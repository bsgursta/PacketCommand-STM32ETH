
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019980  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08019b80  08019b80  0001ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019fcc  08019fcc  0001b300  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019fcc  08019fcc  0001afcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019fd4  08019fd4  0001b300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019fd4  08019fd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019fd8  08019fd8  0001afd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08019fdc  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  0801a058  0001b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  0801a0f8  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDescripSection 000000a0  200001c0  0801a198  0001b1c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 12 .RxDescripSection 000000a0  20000260  0801a238  0001b260  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00009500  20000300  0801a2d8  0001b300  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  20009800  0801a2d8  0001b800  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  0001b300  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005e693  00000000  00000000  0001b32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000c679  00000000  00000000  000799c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003210  00000000  00000000  00086040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000026fb  00000000  00000000  00089250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003e129  00000000  00000000  0008b94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00052781  00000000  00000000  000c9a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012132b  00000000  00000000  0011c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  0023d520  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000d870  00000000  00000000  0023d564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000004a  00000000  00000000  0024add4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000300 	.word	0x20000300
 800021c:	00000000 	.word	0x00000000
 8000220:	08019b68 	.word	0x08019b68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000304 	.word	0x20000304
 800023c:	08019b68 	.word	0x08019b68

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <_DoInit+0xa0>)
 8000644:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000646:	22a8      	movs	r2, #168	@ 0xa8
 8000648:	2100      	movs	r1, #0
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f018 fa8a 	bl	8018b64 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2203      	movs	r2, #3
 8000654:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2203      	movs	r2, #3
 800065a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	4a20      	ldr	r2, [pc, #128]	@ (80006e0 <_DoInit+0xa4>)
 8000660:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <_DoInit+0xa8>)
 8000666:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <_DoInit+0xa4>)
 8000686:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <_DoInit+0xac>)
 800068c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2210      	movs	r2, #16
 8000692:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006a6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e00c      	b.n	80006ca <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f1c3 030f 	rsb	r3, r3, #15
 80006b6:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <_DoInit+0xb0>)
 80006b8:	5cd1      	ldrb	r1, [r2, r3]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	460a      	mov	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3301      	adds	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d9ef      	bls.n	80006b0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006d0:	f3bf 8f5f 	dmb	sy
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000031c 	.word	0x2000031c
 80006e0:	08019b80 	.word	0x08019b80
 80006e4:	200003c4 	.word	0x200003c4
 80006e8:	200007c4 	.word	0x200007c4
 80006ec:	08019dc8 	.word	0x08019dc8

080006f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	429a      	cmp	r2, r3
 8000712:	d905      	bls.n	8000720 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	3b01      	subs	r3, #1
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
 800071e:	e007      	b.n	8000730 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	69b9      	ldr	r1, [r7, #24]
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	1acb      	subs	r3, r1, r3
 800072a:	4413      	add	r3, r2
 800072c:	3b01      	subs	r3, #1
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800073a:	4293      	cmp	r3, r2
 800073c:	bf28      	it	cs
 800073e:	4613      	movcs	r3, r2
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4293      	cmp	r3, r2
 8000748:	bf28      	it	cs
 800074a:	4613      	movcs	r3, r2
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	4413      	add	r3, r2
 8000756:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	6978      	ldr	r0, [r7, #20]
 800075e:	f018 fadc 	bl	8018d1a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000762:	6a3a      	ldr	r2, [r7, #32]
 8000764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000766:	4413      	add	r3, r2
 8000768:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076e:	4413      	add	r3, r2
 8000770:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800077a:	69fa      	ldr	r2, [r7, #28]
 800077c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077e:	4413      	add	r3, r2
 8000780:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	429a      	cmp	r2, r3
 800078a:	d101      	bne.n	8000790 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000790:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1b2      	bne.n	8000706 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80007a0:	6a3b      	ldr	r3, [r7, #32]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3728      	adds	r7, #40	@ 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b088      	sub	sp, #32
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d911      	bls.n	80007f2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	4413      	add	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	6938      	ldr	r0, [r7, #16]
 80007de:	f018 fa9c 	bl	8018d1a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80007e2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	441a      	add	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80007f0:	e01f      	b.n	8000832 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	4413      	add	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	6938      	ldr	r0, [r7, #16]
 8000806:	f018 fa88 	bl	8018d1a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	4619      	mov	r1, r3
 8000822:	6938      	ldr	r0, [r7, #16]
 8000824:	f018 fa79 	bl	8018d1a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000828:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	60da      	str	r2, [r3, #12]
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800083a:	b480      	push	{r7}
 800083c:	b087      	sub	sp, #28
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	429a      	cmp	r2, r3
 8000854:	d808      	bhi.n	8000868 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	1ad2      	subs	r2, r2, r3
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	4413      	add	r3, r2
 8000862:	3b01      	subs	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e004      	b.n	8000872 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	3b01      	subs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000872:	697b      	ldr	r3, [r7, #20]
}
 8000874:	4618      	mov	r0, r3
 8000876:	371c      	adds	r7, #28
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	4613      	mov	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a1f      	ldr	r2, [pc, #124]	@ (800091c <SEGGER_RTT_WriteNoLock+0x9c>)
 800089e:	4413      	add	r3, r2
 80008a0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d029      	beq.n	80008fe <SEGGER_RTT_WriteNoLock+0x7e>
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d82e      	bhi.n	800090c <SEGGER_RTT_WriteNoLock+0x8c>
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <SEGGER_RTT_WriteNoLock+0x38>
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d013      	beq.n	80008de <SEGGER_RTT_WriteNoLock+0x5e>
 80008b6:	e029      	b.n	800090c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008b8:	6978      	ldr	r0, [r7, #20]
 80008ba:	f7ff ffbe 	bl	800083a <_GetAvailWriteSpace>
 80008be:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d202      	bcs.n	80008ce <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80008cc:	e021      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	69b9      	ldr	r1, [r7, #24]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff67 	bl	80007aa <_WriteNoCheck>
    break;
 80008dc:	e019      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ffab 	bl	800083a <_GetAvailWriteSpace>
 80008e4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	4293      	cmp	r3, r2
 80008ec:	bf28      	it	cs
 80008ee:	4613      	movcs	r3, r2
 80008f0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	69b9      	ldr	r1, [r7, #24]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff57 	bl	80007aa <_WriteNoCheck>
    break;
 80008fc:	e009      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	69b9      	ldr	r1, [r7, #24]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff fef4 	bl	80006f0 <_WriteBlocking>
 8000908:	61f8      	str	r0, [r7, #28]
    break;
 800090a:	e002      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    break;
 8000910:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000912:	69fb      	ldr	r3, [r7, #28]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000031c 	.word	0x2000031c

08000920 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <SEGGER_RTT_Write+0x48>)
 800092e:	61fb      	str	r3, [r7, #28]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b53      	cmp	r3, #83	@ 0x53
 8000938:	d001      	beq.n	800093e <SEGGER_RTT_Write+0x1e>
 800093a:	f7ff fe7f 	bl	800063c <_DoInit>
  SEGGER_RTT_LOCK();
 800093e:	f3ef 8311 	mrs	r3, BASEPRI
 8000942:	f04f 0120 	mov.w	r1, #32
 8000946:	f381 8811 	msr	BASEPRI, r1
 800094a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff ff95 	bl	8000880 <SEGGER_RTT_WriteNoLock>
 8000956:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800095e:	697b      	ldr	r3, [r7, #20]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000031c 	.word	0x2000031c

0800096c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ffce 	bl	8000920 <SEGGER_RTT_Write>
  return len;
 8000984:	683b      	ldr	r3, [r7, #0]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d80e      	bhi.n	80009ca <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	78fa      	ldrb	r2, [r7, #3]
 80009b6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d115      	bne.n	8000a02 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6918      	ldr	r0, [r3, #16]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6819      	ldr	r1, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	461a      	mov	r2, r3
 80009e4:	f7ff ff9c 	bl	8000920 <SEGGER_RTT_Write>
 80009e8:	4602      	mov	r2, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d004      	beq.n	80009fc <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80009fa:	e002      	b.n	8000a02 <_StoreChar+0x74>
      p->Cnt = 0u;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a26:	e007      	b.n	8000a38 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000a28:	6a3a      	ldr	r2, [r7, #32]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	623b      	str	r3, [r7, #32]
    Width++;
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3301      	adds	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d2f3      	bcs.n	8000a28 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d901      	bls.n	8000a4c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d125      	bne.n	8000aa2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d022      	beq.n	8000aa2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <_PrintUnsigned+0x66>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_PrintUnsigned+0x66>
        c = '0';
 8000a6c:	2330      	movs	r3, #48	@ 0x30
 8000a6e:	76fb      	strb	r3, [r7, #27]
 8000a70:	e001      	b.n	8000a76 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000a72:	2320      	movs	r3, #32
 8000a74:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a76:	e00b      	b.n	8000a90 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8000a7e:	7efb      	ldrb	r3, [r7, #27]
 8000a80:	4619      	mov	r1, r3
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff ff83 	bl	800098e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db07      	blt.n	8000aa0 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d005      	beq.n	8000aa2 <_PrintUnsigned+0x96>
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3ec      	bcc.n	8000a78 <_PrintUnsigned+0x6c>
 8000a9e:	e000      	b.n	8000aa2 <_PrintUnsigned+0x96>
          break;
 8000aa0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db55      	blt.n	8000b56 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d903      	bls.n	8000ab8 <_PrintUnsigned+0xac>
        NumDigits--;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	e009      	b.n	8000acc <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac0:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d200      	bcs.n	8000acc <_PrintUnsigned+0xc0>
          break;
 8000aca:	e005      	b.n	8000ad8 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000ad6:	e7e8      	b.n	8000aaa <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <_PrintUnsigned+0x154>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	4413      	add	r3, r2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff ff47 	bl	800098e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db08      	blt.n	8000b1a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1df      	bne.n	8000ad8 <_PrintUnsigned+0xcc>
 8000b18:	e000      	b.n	8000b1c <_PrintUnsigned+0x110>
        break;
 8000b1a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d017      	beq.n	8000b56 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d014      	beq.n	8000b56 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b2c:	e00a      	b.n	8000b44 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b30:	3b01      	subs	r3, #1
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000b34:	2120      	movs	r1, #32
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff ff29 	bl	800098e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db07      	blt.n	8000b54 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <_PrintUnsigned+0x14a>
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3ed      	bcc.n	8000b2e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000b52:	e000      	b.n	8000b56 <_PrintUnsigned+0x14a>
            break;
 8000b54:	bf00      	nop
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08019ddc 	.word	0x08019ddc

08000b64 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bfb8      	it	lt
 8000b78:	425b      	neglt	r3, r3
 8000b7a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b80:	e007      	b.n	8000b92 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b8a:	613b      	str	r3, [r7, #16]
    Width++;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	daf3      	bge.n	8000b82 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d901      	bls.n	8000ba6 <_PrintInt+0x42>
    Width = NumDigits;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00a      	beq.n	8000bc2 <_PrintInt+0x5e>
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db04      	blt.n	8000bbc <_PrintInt+0x58>
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <_PrintInt+0x5e>
    FieldWidth--;
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <_PrintInt+0x6e>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d01c      	beq.n	8000c0c <_PrintInt+0xa8>
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d117      	bne.n	8000c0c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d014      	beq.n	8000c0c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000be2:	e00a      	b.n	8000bfa <_PrintInt+0x96>
        FieldWidth--;
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000bea:	2120      	movs	r1, #32
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fece 	bl	800098e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db07      	blt.n	8000c0a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d005      	beq.n	8000c0c <_PrintInt+0xa8>
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d3ed      	bcc.n	8000be4 <_PrintInt+0x80>
 8000c08:	e000      	b.n	8000c0c <_PrintInt+0xa8>
          break;
 8000c0a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db4a      	blt.n	8000caa <_PrintInt+0x146>
    if (v < 0) {
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da07      	bge.n	8000c2a <_PrintInt+0xc6>
      v = -v;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000c20:	212d      	movs	r1, #45	@ 0x2d
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff feb3 	bl	800098e <_StoreChar>
 8000c28:	e008      	b.n	8000c3c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000c34:	212b      	movs	r1, #43	@ 0x2b
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff fea9 	bl	800098e <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db32      	blt.n	8000caa <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <_PrintInt+0x12a>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11a      	bne.n	8000c8e <_PrintInt+0x12a>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d117      	bne.n	8000c8e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d014      	beq.n	8000c8e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c64:	e00a      	b.n	8000c7c <_PrintInt+0x118>
            FieldWidth--;
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000c6c:	2130      	movs	r1, #48	@ 0x30
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fe8d 	bl	800098e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db07      	blt.n	8000c8c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <_PrintInt+0x12a>
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3ed      	bcc.n	8000c66 <_PrintInt+0x102>
 8000c8a:	e000      	b.n	8000c8e <_PrintInt+0x12a>
              break;
 8000c8c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db09      	blt.n	8000caa <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff feb1 	bl	8000a0c <_PrintUnsigned>
      }
    }
  }
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0a4      	sub	sp, #144	@ 0x90
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
 8000cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000ce4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 81d9 	beq.w	80010a0 <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 8000cee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cf2:	2b25      	cmp	r3, #37	@ 0x25
 8000cf4:	f040 81c7 	bne.w	8001086 <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 8000d0a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d0e:	3b23      	subs	r3, #35	@ 0x23
 8000d10:	2b0d      	cmp	r3, #13
 8000d12:	d83f      	bhi.n	8000d94 <SEGGER_RTT_vprintf+0xe0>
 8000d14:	a201      	add	r2, pc, #4	@ (adr r2, 8000d1c <SEGGER_RTT_vprintf+0x68>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d85 	.word	0x08000d85
 8000d20:	08000d95 	.word	0x08000d95
 8000d24:	08000d95 	.word	0x08000d95
 8000d28:	08000d95 	.word	0x08000d95
 8000d2c:	08000d95 	.word	0x08000d95
 8000d30:	08000d95 	.word	0x08000d95
 8000d34:	08000d95 	.word	0x08000d95
 8000d38:	08000d95 	.word	0x08000d95
 8000d3c:	08000d75 	.word	0x08000d75
 8000d40:	08000d95 	.word	0x08000d95
 8000d44:	08000d55 	.word	0x08000d55
 8000d48:	08000d95 	.word	0x08000d95
 8000d4c:	08000d95 	.word	0x08000d95
 8000d50:	08000d65 	.word	0x08000d65
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	e01b      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	e013      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	e00b      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	e003      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d9a:	bf00      	nop
        }
      } while (v);
 8000d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1ae      	bne.n	8000d02 <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000da4:	2300      	movs	r3, #0
 8000da6:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 8000db0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000db4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000db6:	d912      	bls.n	8000dde <SEGGER_RTT_vprintf+0x12a>
 8000db8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000dbc:	2b39      	cmp	r3, #57	@ 0x39
 8000dbe:	d80e      	bhi.n	8000dde <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000dc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b30      	subs	r3, #48	@ 0x30
 8000dda:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8000ddc:	e7e4      	b.n	8000da8 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 8000de4:	2300      	movs	r3, #0
 8000de6:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 8000df0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000df6:	d132      	bne.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e04:	d10d      	bne.n	8000e22 <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1d19      	adds	r1, r3, #4
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6011      	str	r1, [r2, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e20:	e01d      	b.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 8000e2a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e30:	d915      	bls.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
 8000e32:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e36:	2b39      	cmp	r3, #57	@ 0x39
 8000e38:	d811      	bhi.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 8000e46:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	461a      	mov	r2, r3
 8000e52:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e56:	4413      	add	r3, r2
 8000e58:	3b30      	subs	r3, #48	@ 0x30
 8000e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8000e5c:	e7e1      	b.n	8000e22 <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 8000e66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e6a:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e6c:	d003      	beq.n	8000e76 <SEGGER_RTT_vprintf+0x1c2>
 8000e6e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e72:	2b68      	cmp	r3, #104	@ 0x68
 8000e74:	d107      	bne.n	8000e86 <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 8000e84:	e7ef      	b.n	8000e66 <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000e86:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e8a:	2b25      	cmp	r3, #37	@ 0x25
 8000e8c:	f000 80ef 	beq.w	800106e <SEGGER_RTT_vprintf+0x3ba>
 8000e90:	2b25      	cmp	r3, #37	@ 0x25
 8000e92:	f2c0 80f3 	blt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000e96:	2b78      	cmp	r3, #120	@ 0x78
 8000e98:	f300 80f0 	bgt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000e9c:	2b58      	cmp	r3, #88	@ 0x58
 8000e9e:	f2c0 80ed 	blt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000ea2:	3b58      	subs	r3, #88	@ 0x58
 8000ea4:	2b20      	cmp	r3, #32
 8000ea6:	f200 80e9 	bhi.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb0 <SEGGER_RTT_vprintf+0x1fc>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000fb3 	.word	0x08000fb3
 8000eb4:	0800107d 	.word	0x0800107d
 8000eb8:	0800107d 	.word	0x0800107d
 8000ebc:	0800107d 	.word	0x0800107d
 8000ec0:	0800107d 	.word	0x0800107d
 8000ec4:	0800107d 	.word	0x0800107d
 8000ec8:	0800107d 	.word	0x0800107d
 8000ecc:	0800107d 	.word	0x0800107d
 8000ed0:	0800107d 	.word	0x0800107d
 8000ed4:	0800107d 	.word	0x0800107d
 8000ed8:	0800107d 	.word	0x0800107d
 8000edc:	08000f35 	.word	0x08000f35
 8000ee0:	08000f5f 	.word	0x08000f5f
 8000ee4:	0800107d 	.word	0x0800107d
 8000ee8:	0800107d 	.word	0x0800107d
 8000eec:	0800107d 	.word	0x0800107d
 8000ef0:	0800107d 	.word	0x0800107d
 8000ef4:	0800107d 	.word	0x0800107d
 8000ef8:	0800107d 	.word	0x0800107d
 8000efc:	0800107d 	.word	0x0800107d
 8000f00:	0800107d 	.word	0x0800107d
 8000f04:	0800107d 	.word	0x0800107d
 8000f08:	0800107d 	.word	0x0800107d
 8000f0c:	0800107d 	.word	0x0800107d
 8000f10:	08001045 	.word	0x08001045
 8000f14:	0800107d 	.word	0x0800107d
 8000f18:	0800107d 	.word	0x0800107d
 8000f1c:	08000fdd 	.word	0x08000fdd
 8000f20:	0800107d 	.word	0x0800107d
 8000f24:	08000f89 	.word	0x08000f89
 8000f28:	0800107d 	.word	0x0800107d
 8000f2c:	0800107d 	.word	0x0800107d
 8000f30:	08000fb3 	.word	0x08000fb3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1d19      	adds	r1, r3, #4
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6011      	str	r1, [r2, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 8000f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f48:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 8000f4c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000f50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fd19 	bl	800098e <_StoreChar>
        break;
 8000f5c:	e08f      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1d19      	adds	r1, r3, #4
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6011      	str	r1, [r2, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 8000f6e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f82:	f7ff fdef 	bl	8000b64 <_PrintInt>
        break;
 8000f86:	e07a      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1d19      	adds	r1, r3, #4
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6011      	str	r1, [r2, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8000f98:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f9c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000faa:	220a      	movs	r2, #10
 8000fac:	f7ff fd2e 	bl	8000a0c <_PrintUnsigned>
        break;
 8000fb0:	e065      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1d19      	adds	r1, r3, #4
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6011      	str	r1, [r2, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 8000fc2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000fc6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	f7ff fd19 	bl	8000a0c <_PrintUnsigned>
        break;
 8000fda:	e050      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1d19      	adds	r1, r3, #4
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6011      	str	r1, [r2, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8000fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d104      	bne.n	8000ffa <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8000ff0:	4b37      	ldr	r3, [pc, #220]	@ (80010d0 <SEGGER_RTT_vprintf+0x41c>)
 8000ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 8000ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 8001002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001004:	3301      	adds	r3, #1
 8001006:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8001008:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800100c:	2b00      	cmp	r3, #0
 800100e:	d015      	beq.n	800103c <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8001010:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <SEGGER_RTT_vprintf+0x36a>
 8001018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800101a:	2b00      	cmp	r3, #0
 800101c:	d010      	beq.n	8001040 <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 800101e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001022:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fcb0 	bl	800098e <_StoreChar>
            Precision--;
 800102e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001030:	3b01      	subs	r3, #1
 8001032:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 8001034:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001036:	2b00      	cmp	r3, #0
 8001038:	dadf      	bge.n	8000ffa <SEGGER_RTT_vprintf+0x346>
        }
        break;
 800103a:	e020      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
              break;
 800103c:	bf00      	nop
 800103e:	e01e      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
              break;
 8001040:	bf00      	nop
        break;
 8001042:	e01c      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1d19      	adds	r1, r3, #4
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6011      	str	r1, [r2, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8001054:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001058:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800105c:	2300      	movs	r3, #0
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2308      	movs	r3, #8
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2308      	movs	r3, #8
 8001066:	2210      	movs	r2, #16
 8001068:	f7ff fcd0 	bl	8000a0c <_PrintUnsigned>
        break;
 800106c:	e007      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800106e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001072:	2125      	movs	r1, #37	@ 0x25
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fc8a 	bl	800098e <_StoreChar>
        break;
 800107a:	e000      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 800107c:	bf00      	nop
      }
      sFormat++;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	e007      	b.n	8001096 <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 8001086:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800108a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fc7c 	bl	800098e <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8001096:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001098:	2b00      	cmp	r3, #0
 800109a:	f6bf ae1c 	bge.w	8000cd6 <SEGGER_RTT_vprintf+0x22>
 800109e:	e000      	b.n	80010a2 <SEGGER_RTT_vprintf+0x3ee>
      break;
 80010a0:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80010a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd0d      	ble.n	80010c4 <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80010a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80010ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff fc32 	bl	8000920 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80010bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80010c0:	4413      	add	r3, r2
 80010c2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 80010c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3788      	adds	r7, #136	@ 0x88
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08019b8c 	.word	0x08019b8c

080010d4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80010d4:	b40e      	push	{r1, r2, r3}
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	461a      	mov	r2, r3
 80010ea:	69f9      	ldr	r1, [r7, #28]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fde1 	bl	8000cb4 <SEGGER_RTT_vprintf>
 80010f2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001100:	b003      	add	sp, #12
 8001102:	4770      	bx	lr

08001104 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_ETH_Init+0x84>)
 800110a:	4a20      	ldr	r2, [pc, #128]	@ (800118c <MX_ETH_Init+0x88>)
 800110c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x02;
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001110:	2202      	movs	r2, #2
 8001112:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x00;
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001116:	2200      	movs	r2, #0
 8001118:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0x00;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_ETH_Init+0x8c>)
 800111c:	2200      	movs	r2, #0
 800111e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0xFA;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001122:	22fa      	movs	r2, #250	@ 0xfa
 8001124:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x15;
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001128:	2215      	movs	r2, #21
 800112a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x47;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_ETH_Init+0x8c>)
 800112e:	2247      	movs	r2, #71	@ 0x47
 8001130:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_ETH_Init+0x84>)
 8001134:	4a16      	ldr	r2, [pc, #88]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001136:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_ETH_Init+0x84>)
 800113a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800113e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_ETH_Init+0x84>)
 8001142:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <MX_ETH_Init+0x90>)
 8001144:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_ETH_Init+0x84>)
 8001148:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_ETH_Init+0x94>)
 800114a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_ETH_Init+0x84>)
 800114e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001152:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <MX_ETH_Init+0x84>)
 8001156:	f001 fa8b 	bl	8002670 <HAL_ETH_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001160:	f000 faa2 	bl	80016a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001164:	2238      	movs	r2, #56	@ 0x38
 8001166:	2100      	movs	r1, #0
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <MX_ETH_Init+0x98>)
 800116a:	f017 fcfb 	bl	8018b64 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <MX_ETH_Init+0x98>)
 8001170:	2221      	movs	r2, #33	@ 0x21
 8001172:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_ETH_Init+0x98>)
 8001176:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800117a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <MX_ETH_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000080c 	.word	0x2000080c
 800118c:	40028000 	.word	0x40028000
 8001190:	200008bc 	.word	0x200008bc
 8001194:	2000011c 	.word	0x2000011c
 8001198:	2000007c 	.word	0x2000007c
 800119c:	200007d4 	.word	0x200007d4

080011a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	@ (80012f8 <HAL_ETH_MspInit+0x158>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	f040 8096 	bne.w	80012f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011c4:	4b4d      	ldr	r3, [pc, #308]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d0:	4b4a      	ldr	r3, [pc, #296]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	4a46      	ldr	r2, [pc, #280]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e8:	4b44      	ldr	r3, [pc, #272]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	4b41      	ldr	r3, [pc, #260]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	4a40      	ldr	r2, [pc, #256]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001200:	4b3e      	ldr	r3, [pc, #248]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	4b3b      	ldr	r3, [pc, #236]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	4a3a      	ldr	r2, [pc, #232]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6313      	str	r3, [r2, #48]	@ 0x30
 8001218:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a34      	ldr	r2, [pc, #208]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001230:	4b32      	ldr	r3, [pc, #200]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a2e      	ldr	r2, [pc, #184]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800125a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800126c:	233a      	movs	r3, #58	@ 0x3a
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127c:	230b      	movs	r3, #11
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	481e      	ldr	r0, [pc, #120]	@ (8001300 <HAL_ETH_MspInit+0x160>)
 8001288:	f002 fe72 	bl	8003f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 800128c:	238e      	movs	r3, #142	@ 0x8e
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4817      	ldr	r0, [pc, #92]	@ (8001304 <HAL_ETH_MspInit+0x164>)
 80012a8:	f002 fe62 	bl	8003f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80012ac:	f242 0301 	movw	r3, #8193	@ 0x2001
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012be:	230b      	movs	r3, #11
 80012c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	480f      	ldr	r0, [pc, #60]	@ (8001308 <HAL_ETH_MspInit+0x168>)
 80012ca:	f002 fe51 	bl	8003f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ce:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e0:	230b      	movs	r3, #11
 80012e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4808      	ldr	r0, [pc, #32]	@ (800130c <HAL_ETH_MspInit+0x16c>)
 80012ec:	f002 fe40 	bl	8003f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3738      	adds	r7, #56	@ 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40028000 	.word	0x40028000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	40021800 	.word	0x40021800

08001310 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <MX_FREERTOS_Init+0x18>)
 8001316:	2100      	movs	r1, #0
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <MX_FREERTOS_Init+0x1c>)
 800131a:	f013 fb3d 	bl	8014998 <osThreadNew>
 800131e:	4603      	mov	r3, r0
 8001320:	4a03      	ldr	r2, [pc, #12]	@ (8001330 <MX_FREERTOS_Init+0x20>)
 8001322:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	08019dec 	.word	0x08019dec
 800132c:	08001335 	.word	0x08001335
 8001330:	200008c4 	.word	0x200008c4

08001334 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 AppMain();
 800133c:	f000 fea0 	bl	8002080 <AppMain>
    osDelay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f013 fbcf 	bl	8014ae4 <osDelay>
	 AppMain();
 8001346:	bf00      	nop
 8001348:	e7f8      	b.n	800133c <StartDefaultTask+0x8>
	...

0800134c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b63      	ldr	r3, [pc, #396]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a62      	ldr	r2, [pc, #392]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b60      	ldr	r3, [pc, #384]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	4b5d      	ldr	r3, [pc, #372]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a5c      	ldr	r2, [pc, #368]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b5a      	ldr	r3, [pc, #360]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b57      	ldr	r3, [pc, #348]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a56      	ldr	r2, [pc, #344]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b54      	ldr	r3, [pc, #336]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a50      	ldr	r2, [pc, #320]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b4e      	ldr	r3, [pc, #312]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	4b4b      	ldr	r3, [pc, #300]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a4a      	ldr	r2, [pc, #296]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	4b45      	ldr	r3, [pc, #276]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a44      	ldr	r2, [pc, #272]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b42      	ldr	r3, [pc, #264]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2101      	movs	r1, #1
 80013f6:	483f      	ldr	r0, [pc, #252]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 80013f8:	f002 ff66 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2104      	movs	r1, #4
 8001400:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001402:	f002 ff61 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800140c:	483a      	ldr	r0, [pc, #232]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 800140e:	f002 ff5b 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	@ 0x40
 8001416:	4839      	ldr	r0, [pc, #228]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 8001418:	f002 ff56 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	21c0      	movs	r1, #192	@ 0xc0
 8001420:	4837      	ldr	r0, [pc, #220]	@ (8001500 <MX_GPIO_Init+0x1b4>)
 8001422:	f002 ff51 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	482d      	ldr	r0, [pc, #180]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 800143e:	f002 fd97 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001442:	2301      	movs	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4826      	ldr	r0, [pc, #152]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 800145a:	f002 fd89 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145e:	2304      	movs	r3, #4
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4820      	ldr	r0, [pc, #128]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001476:	f002 fd7b 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800147a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4819      	ldr	r0, [pc, #100]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001494:	f002 fd6c 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4813      	ldr	r0, [pc, #76]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 80014b0:	f002 fd5e 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 80014c8:	f002 fd52 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014cc:	23c0      	movs	r3, #192	@ 0xc0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <MX_GPIO_Init+0x1b4>)
 80014e4:	f002 fd44 	bl	8003f70 <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	@ 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40020c00 	.word	0x40020c00

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001508:	f000 f88e 	bl	8001628 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150c:	f000 fef6 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 f818 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001514:	f7ff ff1a 	bl	800134c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001518:	f000 fba6 	bl	8001c68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800151c:	f000 fc34 	bl	8001d88 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8001520:	f000 f94e 	bl	80017c0 <MX_SPI2_Init>
  MX_ETH_Init();
 8001524:	f7ff fdee 	bl	8001104 <MX_ETH_Init>
  MX_RNG_Init();
 8001528:	f000 f8c4 	bl	80016b4 <MX_RNG_Init>
  MX_SPI1_Init();
 800152c:	f000 f90a 	bl	8001744 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001530:	f013 f9c8 	bl	80148c4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001534:	f7ff feec 	bl	8001310 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001538:	f013 f9f8 	bl	801492c <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 800153c:	f000 fda0 	bl	8002080 <AppMain>
 8001540:	e7fc      	b.n	800153c <main+0x38>
	...

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	@ 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	2234      	movs	r2, #52	@ 0x34
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f017 fb06 	bl	8018b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001568:	f003 f802 	bl	8004570 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <SystemClock_Config+0xdc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	4a2b      	ldr	r2, [pc, #172]	@ (8001620 <SystemClock_Config+0xdc>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	@ 0x40
 8001578:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <SystemClock_Config+0xdc>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001584:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <SystemClock_Config+0xe0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800158c:	4a25      	ldr	r2, [pc, #148]	@ (8001624 <SystemClock_Config+0xe0>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <SystemClock_Config+0xe0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80015a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015b4:	2304      	movs	r3, #4
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80015b8:	2360      	movs	r3, #96	@ 0x60
 80015ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015bc:	2302      	movs	r3, #2
 80015be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c0:	2304      	movs	r3, #4
 80015c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 f82f 	bl	8004630 <HAL_RCC_OscConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015d8:	f000 f866 	bl	80016a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015dc:	f002 ffd8 	bl	8004590 <HAL_PWREx_EnableOverDrive>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015e6:	f000 f85f 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ea:	230f      	movs	r3, #15
 80015ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	2302      	movs	r3, #2
 80015f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	2103      	movs	r1, #3
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fac0 	bl	8004b8c <HAL_RCC_ClockConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001612:	f000 f849 	bl	80016a8 <Error_Handler>
  }
}
 8001616:	bf00      	nop
 8001618:	3750      	adds	r7, #80	@ 0x50
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800162e:	463b      	mov	r3, r7
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800163a:	f000 ffa1 	bl	8002580 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800163e:	2301      	movs	r3, #1
 8001640:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001642:	2300      	movs	r3, #0
 8001644:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MPU_Config+0x58>)
 8001648:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800164a:	230d      	movs	r3, #13
 800164c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800164e:	2300      	movs	r3, #0
 8001650:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001652:	2301      	movs	r3, #1
 8001654:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001656:	2303      	movs	r3, #3
 8001658:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800165a:	2301      	movs	r3, #1
 800165c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800166a:	463b      	mov	r3, r7
 800166c:	4618      	mov	r0, r3
 800166e:	f000 ffbf 	bl	80025f0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8001672:	2006      	movs	r0, #6
 8001674:	f000 ff9c 	bl	80025b0 <HAL_MPU_Enable>

}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2007c000 	.word	0x2007c000

08001684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a04      	ldr	r2, [pc, #16]	@ (80016a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001696:	f000 fe4d 	bl	8002334 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40001000 	.word	0x40001000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <Error_Handler+0x8>

080016b4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_RNG_Init+0x20>)
 80016ba:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <MX_RNG_Init+0x24>)
 80016bc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_RNG_Init+0x20>)
 80016c0:	f004 f8e4 	bl	800588c <HAL_RNG_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80016ca:	f7ff ffed 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200008c8 	.word	0x200008c8
 80016d8:	50060800 	.word	0x50060800

080016dc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0a8      	sub	sp, #160	@ 0xa0
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	2290      	movs	r2, #144	@ 0x90
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f017 fa39 	bl	8018b64 <memset>
  if(rngHandle->Instance==RNG)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a11      	ldr	r2, [pc, #68]	@ (800173c <HAL_RNG_MspInit+0x60>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d11b      	bne.n	8001734 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001700:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fc95 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001718:	f7ff ffc6 	bl	80016a8 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_RNG_MspInit+0x64>)
 800171e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001720:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_RNG_MspInit+0x64>)
 8001722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001726:	6353      	str	r3, [r2, #52]	@ 0x34
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_RNG_MspInit+0x64>)
 800172a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001734:	bf00      	nop
 8001736:	37a0      	adds	r7, #160	@ 0xa0
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	50060800 	.word	0x50060800
 8001740:	40023800 	.word	0x40023800

08001744 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800174a:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <MX_SPI1_Init+0x78>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001750:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800175e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001762:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176a:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001776:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001792:	2207      	movs	r2, #7
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_SPI1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_SPI1_Init+0x74>)
 800179e:	2208      	movs	r2, #8
 80017a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_SPI1_Init+0x74>)
 80017a4:	f004 f8f2 	bl	800598c <HAL_SPI_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017ae:	f7ff ff7b 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200008d8 	.word	0x200008d8
 80017bc:	40013000 	.word	0x40013000

080017c0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <MX_SPI2_Init+0x78>)
 80017c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017f6:	2238      	movs	r2, #56	@ 0x38
 80017f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <MX_SPI2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MX_SPI2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <MX_SPI2_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <MX_SPI2_Init+0x74>)
 800180e:	2207      	movs	r2, #7
 8001810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001812:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <MX_SPI2_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <MX_SPI2_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_SPI2_Init+0x74>)
 8001820:	f004 f8b4 	bl	800598c <HAL_SPI_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800182a:	f7ff ff3d 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000093c 	.word	0x2000093c
 8001838:	40003800 	.word	0x40003800

0800183c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	@ 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a3c      	ldr	r2, [pc, #240]	@ (800194c <HAL_SPI_MspInit+0x110>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d144      	bne.n	80018e8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185e:	4b3c      	ldr	r3, [pc, #240]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	4a3b      	ldr	r2, [pc, #236]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001864:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001868:	6453      	str	r3, [r2, #68]	@ 0x44
 800186a:	4b39      	ldr	r3, [pc, #228]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b36      	ldr	r3, [pc, #216]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a35      	ldr	r2, [pc, #212]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b33      	ldr	r3, [pc, #204]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b30      	ldr	r3, [pc, #192]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a2f      	ldr	r2, [pc, #188]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018a6:	2360      	movs	r3, #96	@ 0x60
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018b6:	2305      	movs	r3, #5
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4824      	ldr	r0, [pc, #144]	@ (8001954 <HAL_SPI_MspInit+0x118>)
 80018c2:	f002 fb55 	bl	8003f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018c6:	2320      	movs	r3, #32
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d6:	2305      	movs	r3, #5
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	481d      	ldr	r0, [pc, #116]	@ (8001958 <HAL_SPI_MspInit+0x11c>)
 80018e2:	f002 fb45 	bl	8003f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018e6:	e02d      	b.n	8001944 <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1b      	ldr	r2, [pc, #108]	@ (800195c <HAL_SPI_MspInit+0x120>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d128      	bne.n	8001944 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a10      	ldr	r2, [pc, #64]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <HAL_SPI_MspInit+0x114>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001922:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001934:	2305      	movs	r3, #5
 8001936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <HAL_SPI_MspInit+0x11c>)
 8001940:	f002 fb16 	bl	8003f70 <HAL_GPIO_Init>
}
 8001944:	bf00      	nop
 8001946:	3730      	adds	r7, #48	@ 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40013000 	.word	0x40013000
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40003800 	.word	0x40003800

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a10      	ldr	r2, [pc, #64]	@ (80019ac <HAL_MspInit+0x4c>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_MspInit+0x4c>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_MspInit+0x4c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	210f      	movs	r1, #15
 800199a:	f06f 0001 	mvn.w	r0, #1
 800199e:	f000 fdc5 	bl	800252c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08e      	sub	sp, #56	@ 0x38
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019c0:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <HAL_InitTick+0xe0>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	4a32      	ldr	r2, [pc, #200]	@ (8001a90 <HAL_InitTick+0xe0>)
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80019cc:	4b30      	ldr	r3, [pc, #192]	@ (8001a90 <HAL_InitTick+0xe0>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d8:	f107 0210 	add.w	r2, r7, #16
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 faf8 	bl	8004fd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019f2:	f003 fac9 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 80019f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80019f8:	e004      	b.n	8001a04 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019fa:	f003 fac5 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 80019fe:	4603      	mov	r3, r0
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a06:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <HAL_InitTick+0xe4>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9b      	lsrs	r3, r3, #18
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a12:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a14:	4a21      	ldr	r2, [pc, #132]	@ (8001a9c <HAL_InitTick+0xec>)
 8001a16:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a20:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a38:	4817      	ldr	r0, [pc, #92]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a3a:	f004 fb51 	bl	80060e0 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d11b      	bne.n	8001a84 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a4c:	4812      	ldr	r0, [pc, #72]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a4e:	f004 fba9 	bl	80061a4 <HAL_TIM_Base_Start_IT>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d111      	bne.n	8001a84 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a60:	2036      	movs	r0, #54	@ 0x36
 8001a62:	f000 fd7f 	bl	8002564 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d808      	bhi.n	8001a7e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	2036      	movs	r0, #54	@ 0x36
 8001a72:	f000 fd5b 	bl	800252c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <HAL_InitTick+0xf0>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e002      	b.n	8001a84 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3738      	adds	r7, #56	@ 0x38
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	200009a0 	.word	0x200009a0
 8001a9c:	40001000 	.word	0x40001000
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <NMI_Handler+0x4>

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <MemManage_Handler+0x4>

08001abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <TIM6_DAC_IRQHandler+0x10>)
 8001ae2:	f004 fbd7 	bl	8006294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200009a0 	.word	0x200009a0

08001af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_kill>:

int _kill(int pid, int sig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0a:	f017 f8d9 	bl	8018cc0 <__errno>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2216      	movs	r2, #22
 8001b12:	601a      	str	r2, [r3, #0]
  return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_exit>:

void _exit (int status)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffe7 	bl	8001b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <_exit+0x12>

08001b36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e00a      	b.n	8001b5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b48:	f3af 8000 	nop.w
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf0      	blt.n	8001b48 <_read+0x12>
  }

  return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b98:	605a      	str	r2, [r3, #4]
  return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_isatty>:

int _isatty(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f017 f85a 	bl	8018cc0 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2007c000 	.word	0x2007c000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	200009ec 	.word	0x200009ec
 8001c40:	20009800 	.word	0x20009800

08001c44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c6e:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <MX_USART3_UART_Init+0x5c>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001cac:	f004 fce6 	bl	800667c <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cb6:	f7ff fcf7 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200009f0 	.word	0x200009f0
 8001cc4:	40004800 	.word	0x40004800

08001cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0ae      	sub	sp, #184	@ 0xb8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2290      	movs	r2, #144	@ 0x90
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f016 ff3b 	bl	8018b64 <memset>
  if(uartHandle->Instance==USART3)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <HAL_UART_MspInit+0xb4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d13c      	bne.n	8001d72 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 f998 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d12:	f7ff fcc9 	bl	80016a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_UART_MspInit+0xb8>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <HAL_UART_MspInit+0xb8>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0xb8>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_UART_MspInit+0xb8>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a13      	ldr	r2, [pc, #76]	@ (8001d80 <HAL_UART_MspInit+0xb8>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_UART_MspInit+0xb8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d60:	2307      	movs	r3, #7
 8001d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d66:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <HAL_UART_MspInit+0xbc>)
 8001d6e:	f002 f8ff 	bl	8003f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	37b8      	adds	r7, #184	@ 0xb8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004800 	.word	0x40004800
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020c00 	.word	0x40020c00

08001d88 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d96:	2206      	movs	r2, #6
 8001d98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dcc:	f002 fa95 	bl	80042fa <HAL_PCD_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001dd6:	f7ff fc67 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000a78 	.word	0x20000a78

08001de4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0ae      	sub	sp, #184	@ 0xb8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2290      	movs	r2, #144	@ 0x90
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f016 fead 	bl	8018b64 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e12:	d159      	bne.n	8001ec8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 f909 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e30:	f7ff fc3a 	bl	80016a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	4a25      	ldr	r2, [pc, #148]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e4c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e66:	230a      	movs	r3, #10
 8001e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4818      	ldr	r0, [pc, #96]	@ (8001ed4 <HAL_PCD_MspInit+0xf0>)
 8001e74:	f002 f87c 	bl	8003f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4810      	ldr	r0, [pc, #64]	@ (8001ed4 <HAL_PCD_MspInit+0xf0>)
 8001e94:	f002 f86c 	bl	8003f70 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea2:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001eb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <HAL_PCD_MspInit+0xec>)
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ec8:	bf00      	nop
 8001eca:	37b8      	adds	r7, #184	@ 0xb8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <initializeNetworkInterface>:

//saved in MCU RAM
static NetworkInterface_t xEthernetInterface;

//create a network interface, telling the stack what hardware is available
NetworkInterface_t* initializeNetworkInterface(void){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	@ 0x30
 8001edc:	af04      	add	r7, sp, #16
	//ptr to interface
	NetworkInterface_t *pxInterface;

	//set EMAC idx to the first 0, and pass in ptr
	pxInterface = pxSTM32_FillInterfaceDescriptor(0, &xEthernetInterface);
 8001ede:	491d      	ldr	r1, [pc, #116]	@ (8001f54 <initializeNetworkInterface+0x7c>)
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f012 fcab 	bl	801483c <pxSTM32_FillInterfaceDescriptor>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61fb      	str	r3, [r7, #28]
		//allocate space for the endpoint
		static NetworkEndPoint_t *xLocalEndPoint;

	//use IPV4 because it's for less code and less RAM
		//actual IPV4 address
		uint8_t ipAddress[4] = {10, 114, 20, 200};
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <initializeNetworkInterface+0x80>)
 8001eec:	617b      	str	r3, [r7, #20]
		uint8_t netMask[4] = {255, 255, 252, 0};
 8001eee:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <initializeNetworkInterface+0x84>)
 8001ef0:	613b      	str	r3, [r7, #16]
		uint8_t gatewayAddress[4] = {10, 114, 20, 1};
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <initializeNetworkInterface+0x88>)
 8001ef4:	60fb      	str	r3, [r7, #12]
		uint8_t dnsAddress[4] = {104,222,16,6};
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <initializeNetworkInterface+0x8c>)
 8001ef8:	60bb      	str	r3, [r7, #8]


	//MAC address -> physical hardware identifier, interface card
		uint8_t macAddress[6];
		memcpy(macAddress, heth.Init.MACAddr, 6); // get MAC from config file
 8001efa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <initializeNetworkInterface+0x90>)
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	463b      	mov	r3, r7
 8001f00:	6810      	ldr	r0, [r2, #0]
 8001f02:	6018      	str	r0, [r3, #0]
 8001f04:	8892      	ldrh	r2, [r2, #4]
 8001f06:	809a      	strh	r2, [r3, #4]

	//Add network interface and endpoint to FreeRTOS
		FreeRTOS_FillEndPoint(pxInterface,xLocalEndPoint,ipAddress,netMask,gatewayAddress,dnsAddress, macAddress);
 8001f08:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <initializeNetworkInterface+0x94>)
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	f107 0010 	add.w	r0, r7, #16
 8001f10:	f107 0214 	add.w	r2, r7, #20
 8001f14:	463b      	mov	r3, r7
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	4603      	mov	r3, r0
 8001f26:	69f8      	ldr	r0, [r7, #28]
 8001f28:	f00a f8e6 	bl	800c0f8 <FreeRTOS_FillEndPoint>

	BaseType_t xResult = FreeRTOS_IPInit_Multi();
 8001f2c:	f008 fb48 	bl	800a5c0 <FreeRTOS_IPInit_Multi>
 8001f30:	61b8      	str	r0, [r7, #24]
	if (xResult == pdPASS) {
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d104      	bne.n	8001f42 <initializeNetworkInterface+0x6a>
		SEGGER_RTT_printf(0,"Network stack initialized successfully\n");
 8001f38:	490d      	ldr	r1, [pc, #52]	@ (8001f70 <initializeNetworkInterface+0x98>)
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff f8ca 	bl	80010d4 <SEGGER_RTT_printf>
 8001f40:	e003      	b.n	8001f4a <initializeNetworkInterface+0x72>
	} else {
		SEGGER_RTT_printf(0,"Network initialization failed\n");
 8001f42:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <initializeNetworkInterface+0x9c>)
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff f8c5 	bl	80010d4 <SEGGER_RTT_printf>
	}

	return &xEthernetInterface;
 8001f4a:	4b02      	ldr	r3, [pc, #8]	@ (8001f54 <initializeNetworkInterface+0x7c>)
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000f58 	.word	0x20000f58
 8001f58:	c814720a 	.word	0xc814720a
 8001f5c:	00fcffff 	.word	0x00fcffff
 8001f60:	0114720a 	.word	0x0114720a
 8001f64:	0610de68 	.word	0x0610de68
 8001f68:	2000080c 	.word	0x2000080c
 8001f6c:	20000f80 	.word	0x20000f80
 8001f70:	08019ba0 	.word	0x08019ba0
 8001f74:	08019bc8 	.word	0x08019bc8

08001f78 <ConfigTCPClientSocket>:

//tasks to create/config socket -> create socket, set timeout for Rx and Tx and bind socket to port #
Socket_t ConfigTCPClientSocket(void){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af02      	add	r7, sp, #8
	Socket_t xClientSocket;
	socklen_t xSize = sizeof( struct freertos_sockaddr );
 8001f7e:	2318      	movs	r3, #24
 8001f80:	60bb      	str	r3, [r7, #8]
	static const TickType_t xTimeOut = pdMS_TO_TICKS( 2000 );

    xClientSocket = FreeRTOS_socket(FREERTOS_AF_INET, //ipv4 family
 8001f82:	2206      	movs	r2, #6
 8001f84:	2101      	movs	r1, #1
 8001f86:	2002      	movs	r0, #2
 8001f88:	f00a fb86 	bl	800c698 <FreeRTOS_socket>
 8001f8c:	6078      	str	r0, [r7, #4]
    								FREERTOS_SOCK_STREAM,  /* SOCK_STREAM for TCP. */

									 FREERTOS_IPPROTO_TCP  ); //TCP protocol

    /* Check the socket was created. */
    if( xClientSocket != FREERTOS_INVALID_SOCKET )
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d034      	beq.n	8002000 <ConfigTCPClientSocket+0x88>
    {
        printf("ERROR: Socket creation failed!\n");
 8001f96:	482f      	ldr	r0, [pc, #188]	@ (8002054 <ConfigTCPClientSocket+0xdc>)
 8001f98:	f016 fca4 	bl	80188e4 <puts>

        // Check network status
        printf("Network up: %s\n", FreeRTOS_IsNetworkUp() ? "YES" : "NO");
 8001f9c:	f008 ff14 	bl	800adc8 <FreeRTOS_IsNetworkUp>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <ConfigTCPClientSocket+0x32>
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8002058 <ConfigTCPClientSocket+0xe0>)
 8001fa8:	e000      	b.n	8001fac <ConfigTCPClientSocket+0x34>
 8001faa:	4b2c      	ldr	r3, [pc, #176]	@ (800205c <ConfigTCPClientSocket+0xe4>)
 8001fac:	4619      	mov	r1, r3
 8001fae:	482c      	ldr	r0, [pc, #176]	@ (8002060 <ConfigTCPClientSocket+0xe8>)
 8001fb0:	f016 fc30 	bl	8018814 <iprintf>

        // Check heap memory
        printf("Free heap: %u bytes\n", xPortGetFreeHeapSize());
 8001fb4:	f016 fa66 	bl	8018484 <xPortGetFreeHeapSize>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4829      	ldr	r0, [pc, #164]	@ (8002064 <ConfigTCPClientSocket+0xec>)
 8001fbe:	f016 fc29 	bl	8018814 <iprintf>

        // Check if we have an IP address

        // Add longer wait for DHCP
        printf("Waiting for DHCP...\n");
 8001fc2:	4829      	ldr	r0, [pc, #164]	@ (8002068 <ConfigTCPClientSocket+0xf0>)
 8001fc4:	f016 fc8e 	bl	80188e4 <puts>
        int attempts = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
        while(FreeRTOS_GetIPAddress() == 0 && attempts < 30) {
 8001fcc:	e00e      	b.n	8001fec <ConfigTCPClientSocket+0x74>
            vTaskDelay(pdMS_TO_TICKS(1000));
 8001fce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd2:	f014 f9d3 	bl	801637c <vTaskDelay>
            attempts++;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
            printf("DHCP attempt %d, IP: %lu\n", attempts, FreeRTOS_GetIPAddress());
 8001fdc:	f008 fecb 	bl	800ad76 <FreeRTOS_GetIPAddress>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	4821      	ldr	r0, [pc, #132]	@ (800206c <ConfigTCPClientSocket+0xf4>)
 8001fe8:	f016 fc14 	bl	8018814 <iprintf>
        while(FreeRTOS_GetIPAddress() == 0 && attempts < 30) {
 8001fec:	f008 fec3 	bl	800ad76 <FreeRTOS_GetIPAddress>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <ConfigTCPClientSocket+0x86>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b1d      	cmp	r3, #29
 8001ffa:	dde8      	ble.n	8001fce <ConfigTCPClientSocket+0x56>
 8001ffc:	e7ff      	b.n	8001ffe <ConfigTCPClientSocket+0x86>
        }

        // Stop here for debugging
        while(1);
 8001ffe:	e7fe      	b.n	8001ffe <ConfigTCPClientSocket+0x86>
    }
    else
    {
        printf("Socket created successfully!\n");
 8002000:	481b      	ldr	r0, [pc, #108]	@ (8002070 <ConfigTCPClientSocket+0xf8>)
 8002002:	f016 fc6f 	bl	80188e4 <puts>

    //set socket options for the given socket
        /* Set send and receive time outs. */

        //set timeout for receiving data
        FreeRTOS_setsockopt( xClientSocket,
 8002006:	2304      	movs	r3, #4
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <ConfigTCPClientSocket+0xfc>)
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f00b fa1d 	bl	800d450 <FreeRTOS_setsockopt>
                             FREERTOS_SO_RCVTIMEO,
                             &xTimeOut,
                             sizeof( xTimeOut ) );

        //set timeout for sending data out of socket
        FreeRTOS_setsockopt( xClientSocket,
 8002016:	2304      	movs	r3, #4
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <ConfigTCPClientSocket+0xfc>)
 800201c:	2201      	movs	r2, #1
 800201e:	2100      	movs	r1, #0
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f00b fa15 	bl	800d450 <FreeRTOS_setsockopt>
                             FREERTOS_SO_SNDTIMEO,
                             &xTimeOut,
                             sizeof( xTimeOut ) );

        //bind socket to port num, NULL means FreeRTOS choose port #
        FreeRTOS_bind( xClientSocket, NULL, xSize );
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	2100      	movs	r1, #0
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f00a fdf6 	bl	800cc1c <FreeRTOS_bind>

        if (xClientSocket == FREERTOS_INVALID_SOCKET) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d104      	bne.n	8002042 <ConfigTCPClientSocket+0xca>
        	SEGGER_RTT_printf(0,"Client socket is invalid!\n");
 8002038:	490f      	ldr	r1, [pc, #60]	@ (8002078 <ConfigTCPClientSocket+0x100>)
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff f84a 	bl	80010d4 <SEGGER_RTT_printf>
 8002040:	e003      	b.n	800204a <ConfigTCPClientSocket+0xd2>
        } else {

        	SEGGER_RTT_printf(0,"Client socket is valid\n");
 8002042:	490e      	ldr	r1, [pc, #56]	@ (800207c <ConfigTCPClientSocket+0x104>)
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff f845 	bl	80010d4 <SEGGER_RTT_printf>
        }

        return xClientSocket;
 800204a:	687b      	ldr	r3, [r7, #4]

}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08019be8 	.word	0x08019be8
 8002058:	08019c08 	.word	0x08019c08
 800205c:	08019c0c 	.word	0x08019c0c
 8002060:	08019c10 	.word	0x08019c10
 8002064:	08019c20 	.word	0x08019c20
 8002068:	08019c38 	.word	0x08019c38
 800206c:	08019c4c 	.word	0x08019c4c
 8002070:	08019c68 	.word	0x08019c68
 8002074:	08019e28 	.word	0x08019e28
 8002078:	08019c88 	.word	0x08019c88
 800207c:	08019ca4 	.word	0x08019ca4

08002080 <AppMain>:
#include "SEGGER_RTT.h"
#include "TCP_IP.h"
#include "proj_tasks.h"


void AppMain(void){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af02      	add	r7, sp, #8

	//Task to create network interface and socket
	xTaskCreate(vInterfaceSocketTask, "Task Initialize Interface & Socket",
 8002086:	2300      	movs	r3, #0
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2328      	movs	r3, #40	@ 0x28
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002094:	490b      	ldr	r1, [pc, #44]	@ (80020c4 <AppMain+0x44>)
 8002096:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <AppMain+0x48>)
 8002098:	f014 f810 	bl	80160bc <xTaskCreate>
			NULL,
			40,
			NULL );

	//test LCD
	lcd_4SPI_init();
 800209c:	f000 f8da 	bl	8002254 <lcd_4SPI_init>
	setPageaddressing();
 80020a0:	f000 f864 	bl	800216c <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 80020a4:	2001      	movs	r0, #1
 80020a6:	f000 f877 	bl	8002198 <lcd_setpage_address>
	lcd_setcolumn_address(32);
 80020aa:	2020      	movs	r0, #32
 80020ac:	f000 f88e 	bl	80021cc <lcd_setcolumn_address>

	while(1){
		SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
 80020b0:	4906      	ldr	r1, [pc, #24]	@ (80020cc <AppMain+0x4c>)
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff f80e 	bl	80010d4 <SEGGER_RTT_printf>
		HAL_Delay(5000);
 80020b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80020bc:	f000 f95a 	bl	8002374 <HAL_Delay>
		SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
 80020c0:	bf00      	nop
 80020c2:	e7f5      	b.n	80020b0 <AppMain+0x30>
 80020c4:	08019cbc 	.word	0x08019cbc
 80020c8:	08002289 	.word	0x08002289
 80020cc:	08019ce0 	.word	0x08019ce0

080020d0 <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	2140      	movs	r1, #64	@ 0x40
 80020de:	480b      	ldr	r0, [pc, #44]	@ (800210c <lcd_transfer+0x3c>)
 80020e0:	f002 f8f2 	bl	80042c8 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80020e4:	1df9      	adds	r1, r7, #7
 80020e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ea:	2201      	movs	r2, #1
 80020ec:	4808      	ldr	r0, [pc, #32]	@ (8002110 <lcd_transfer+0x40>)
 80020ee:	f003 fcf8 	bl	8005ae2 <HAL_SPI_Transmit>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	2140      	movs	r1, #64	@ 0x40
 80020fa:	4804      	ldr	r0, [pc, #16]	@ (800210c <lcd_transfer+0x3c>)
 80020fc:	f002 f8e4 	bl	80042c8 <HAL_GPIO_WritePin>

	return HAL_OK;
 8002100:	2300      	movs	r3, #0

}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40020c00 	.word	0x40020c00
 8002110:	2000093c 	.word	0x2000093c

08002114 <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 800211a:	23af      	movs	r3, #175	@ 0xaf
 800211c:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2180      	movs	r1, #128	@ 0x80
 8002122:	4806      	ldr	r0, [pc, #24]	@ (800213c <onLCD+0x28>)
 8002124:	f002 f8d0 	bl	80042c8 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ffd0 	bl	80020d0 <lcd_transfer>
 8002130:	4603      	mov	r3, r0

}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40020c00 	.word	0x40020c00

08002140 <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 8002146:	23ae      	movs	r3, #174	@ 0xae
 8002148:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	2180      	movs	r1, #128	@ 0x80
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <offLCD+0x28>)
 8002150:	f002 f8ba 	bl	80042c8 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ffba 	bl	80020d0 <lcd_transfer>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40020c00 	.word	0x40020c00

0800216c <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 8002172:	2320      	movs	r3, #32
 8002174:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2180      	movs	r1, #128	@ 0x80
 800217a:	4806      	ldr	r0, [pc, #24]	@ (8002194 <setPageaddressing+0x28>)
 800217c:	f002 f8a4 	bl	80042c8 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ffa4 	bl	80020d0 <lcd_transfer>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020c00 	.word	0x40020c00

08002198 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80021aa:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2180      	movs	r1, #128	@ 0x80
 80021b0:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <lcd_setpage_address+0x30>)
 80021b2:	f002 f889 	bl	80042c8 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80021b6:	7bbb      	ldrb	r3, [r7, #14]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff89 	bl	80020d0 <lcd_transfer>
 80021be:	4603      	mov	r3, r0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40020c00 	.word	0x40020c00

080021cc <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80021d8:	dc02      	bgt.n	80021e0 <lcd_setcolumn_address+0x14>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	da01      	bge.n	80021e4 <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e030      	b.n	8002246 <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 80021e8:	2310      	movs	r3, #16
 80021ea:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 80021ec:	2300      	movs	r3, #0
 80021ee:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	b25a      	sxtb	r2, r3
 80021f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	b25a      	sxtb	r2, r3
 800220c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002210:	4313      	orrs	r3, r2
 8002212:	b25b      	sxtb	r3, r3
 8002214:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	2180      	movs	r1, #128	@ 0x80
 800221a:	480d      	ldr	r0, [pc, #52]	@ (8002250 <lcd_setcolumn_address+0x84>)
 800221c:	f002 f854 	bl	80042c8 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff54 	bl	80020d0 <lcd_transfer>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e009      	b.n	8002246 <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 8002232:	7b7b      	ldrb	r3, [r7, #13]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff4b 	bl	80020d0 <lcd_transfer>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40020c00 	.word	0x40020c00

08002254 <lcd_4SPI_init>:
}

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2140      	movs	r1, #64	@ 0x40
 800225c:	4808      	ldr	r0, [pc, #32]	@ (8002280 <lcd_4SPI_init+0x2c>)
 800225e:	f002 f833 	bl	80042c8 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002262:	2201      	movs	r2, #1
 8002264:	2101      	movs	r1, #1
 8002266:	4807      	ldr	r0, [pc, #28]	@ (8002284 <lcd_4SPI_init+0x30>)
 8002268:	f002 f82e 	bl	80042c8 <HAL_GPIO_WritePin>

	//dummy transmission for SPI

	onLCD();
 800226c:	f7ff ff52 	bl	8002114 <onLCD>
	offLCD();
 8002270:	f7ff ff66 	bl	8002140 <offLCD>

	//this is the column where the lcd starts
	lcd_setcolumn_address(32);
 8002274:	2020      	movs	r0, #32
 8002276:	f7ff ffa9 	bl	80021cc <lcd_setcolumn_address>

	return HAL_OK;
 800227a:	2300      	movs	r3, #0

}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40020800 	.word	0x40020800

08002288 <vInterfaceSocketTask>:
#include "FreeRTOS.h"
#include "FreeRTOS_Sockets.h"
#include "FreeRTOS_IP.h"
#include "TCP_IP.h"

void vInterfaceSocketTask(void * argument) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
//Initialize networkInterface
	NetworkInterface_t* ethInterace = initializeNetworkInterface();
 8002290:	f7ff fe22 	bl	8001ed8 <initializeNetworkInterface>
 8002294:	60f8      	str	r0, [r7, #12]

	//Initialize Socket
	Socket_t clientSocket = ConfigTCPClientSocket();
 8002296:	f7ff fe6f 	bl	8001f78 <ConfigTCPClientSocket>
 800229a:	60b8      	str	r0, [r7, #8]

    for(;;) {
        vTaskDelay(1000);
 800229c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022a0:	f014 f86c 	bl	801637c <vTaskDelay>
 80022a4:	e7fa      	b.n	800229c <vInterfaceSocketTask+0x14>
	...

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ac:	f7ff fcca 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b0:	480c      	ldr	r0, [pc, #48]	@ (80022e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022b2:	490d      	ldr	r1, [pc, #52]	@ (80022e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022b4:	4a0d      	ldr	r2, [pc, #52]	@ (80022ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c6:	4a0a      	ldr	r2, [pc, #40]	@ (80022f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022c8:	4c0a      	ldr	r4, [pc, #40]	@ (80022f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f016 fcf9 	bl	8018ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7ff f913 	bl	8001504 <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80022ec:	08019fdc 	.word	0x08019fdc
  ldr r2, =_sbss
 80022f0:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 80022f4:	20009800 	.word	0x20009800

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_Init+0x34>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_Init+0x34>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_Init+0x34>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a07      	ldr	r2, [pc, #28]	@ (8002330 <HAL_Init+0x34>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 f8fc 	bl	8002516 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231e:	200f      	movs	r0, #15
 8002320:	f7ff fb46 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002324:	f7ff fb1c 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00

08002334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_IncTick+0x20>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x24>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_IncTick+0x24>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000008 	.word	0x20000008
 8002358:	20000f84 	.word	0x20000f84

0800235c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <HAL_GetTick+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000f84 	.word	0x20000f84

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff ffee 	bl	800235c <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffde 	bl	800235c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000008 	.word	0x20000008

080023bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <__NVIC_SetPriorityGrouping+0x40>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <__NVIC_SetPriorityGrouping+0x40>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00
 8002400:	05fa0000 	.word	0x05fa0000

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4907      	ldr	r1, [pc, #28]	@ (8002458 <__NVIC_EnableIRQ+0x38>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000e100 	.word	0xe000e100

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	@ (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff4c 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253e:	f7ff ff61 	bl	8002404 <__NVIC_GetPriorityGrouping>
 8002542:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	6978      	ldr	r0, [r7, #20]
 800254a:	f7ff ffb1 	bl	80024b0 <NVIC_EncodePriority>
 800254e:	4602      	mov	r2, r0
 8002550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff80 	bl	800245c <__NVIC_SetPriority>
}
 800255c:	bf00      	nop
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff54 	bl	8002420 <__NVIC_EnableIRQ>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002584:	f3bf 8f5f 	dmb	sy
}
 8002588:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800258a:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <HAL_MPU_Disable+0x28>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	4a06      	ldr	r2, [pc, #24]	@ (80025a8 <HAL_MPU_Disable+0x28>)
 8002590:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002594:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002596:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_MPU_Disable+0x2c>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00
 80025ac:	e000ed90 	.word	0xe000ed90

080025b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80025b8:	4a0b      	ldr	r2, [pc, #44]	@ (80025e8 <HAL_MPU_Enable+0x38>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80025c2:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <HAL_MPU_Enable+0x3c>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	4a09      	ldr	r2, [pc, #36]	@ (80025ec <HAL_MPU_Enable+0x3c>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80025ce:	f3bf 8f4f 	dsb	sy
}
 80025d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025d4:	f3bf 8f6f 	isb	sy
}
 80025d8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed90 	.word	0xe000ed90
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	785a      	ldrb	r2, [r3, #1]
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_MPU_ConfigRegion+0x7c>)
 80025fe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002600:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <HAL_MPU_ConfigRegion+0x7c>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	4a19      	ldr	r2, [pc, #100]	@ (800266c <HAL_MPU_ConfigRegion+0x7c>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800260c:	4a17      	ldr	r2, [pc, #92]	@ (800266c <HAL_MPU_ConfigRegion+0x7c>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7b1b      	ldrb	r3, [r3, #12]
 8002618:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7adb      	ldrb	r3, [r3, #11]
 800261e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7a9b      	ldrb	r3, [r3, #10]
 8002626:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7b5b      	ldrb	r3, [r3, #13]
 800262e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002630:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7b9b      	ldrb	r3, [r3, #14]
 8002636:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002638:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7bdb      	ldrb	r3, [r3, #15]
 800263e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002640:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7a5b      	ldrb	r3, [r3, #9]
 8002646:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7a1b      	ldrb	r3, [r3, #8]
 800264e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002650:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002658:	4a04      	ldr	r2, [pc, #16]	@ (800266c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800265a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800265c:	6113      	str	r3, [r2, #16]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed90 	.word	0xe000ed90

08002670 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e086      	b.n	8002790 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7fe fd83 	bl	80011a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	4b3f      	ldr	r3, [pc, #252]	@ (8002798 <HAL_ETH_Init+0x128>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a3e      	ldr	r2, [pc, #248]	@ (8002798 <HAL_ETH_Init+0x128>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002798 <HAL_ETH_Init+0x128>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026b2:	4b3a      	ldr	r3, [pc, #232]	@ (800279c <HAL_ETH_Init+0x12c>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a39      	ldr	r2, [pc, #228]	@ (800279c <HAL_ETH_Init+0x12c>)
 80026b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026be:	4b37      	ldr	r3, [pc, #220]	@ (800279c <HAL_ETH_Init+0x12c>)
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4935      	ldr	r1, [pc, #212]	@ (800279c <HAL_ETH_Init+0x12c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026cc:	4b33      	ldr	r3, [pc, #204]	@ (800279c <HAL_ETH_Init+0x12c>)
 80026ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e8:	f7ff fe38 	bl	800235c <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026ee:	e011      	b.n	8002714 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026f0:	f7ff fe34 	bl	800235c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026fe:	d909      	bls.n	8002714 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	22e0      	movs	r2, #224	@ 0xe0
 800270c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e03d      	b.n	8002790 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1e4      	bne.n	80026f0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f001 f966 	bl	80039f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f001 fa11 	bl	8003b54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f001 fa67 	bl	8003c06 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	461a      	mov	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f001 f9cf 	bl	8003ae4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002754:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <HAL_ETH_Init+0x130>)
 8002764:	430b      	orrs	r3, r1
 8002766:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800277a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2210      	movs	r2, #16
 800278a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	00020060 	.word	0x00020060

080027a4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	d15f      	bne.n	8002876 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f9f6 	bl	8002bbc <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d8:	2001      	movs	r0, #1
 80027da:	f7ff fdcb 	bl	8002374 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027fc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002814:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 ff8a 	bl	8003730 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0208 	orr.w	r2, r2, #8
 800282a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002834:	2001      	movs	r0, #1
 8002836:	f7ff fd9d 	bl	8002374 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0204 	orr.w	r2, r2, #4
 8002850:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800285a:	69d9      	ldr	r1, [r3, #28]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <HAL_ETH_Start_IT+0xdc>)
 8002862:	430b      	orrs	r3, r1
 8002864:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002868:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2240      	movs	r2, #64	@ 0x40
 800286e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	0001a0c1 	.word	0x0001a0c1

08002884 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002892:	2b40      	cmp	r3, #64	@ 0x40
 8002894:	d16e      	bne.n	8002974 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a6:	69d9      	ldr	r1, [r3, #28]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b34      	ldr	r3, [pc, #208]	@ (8002980 <HAL_ETH_Stop_IT+0xfc>)
 80028ae:	400b      	ands	r3, r1
 80028b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028b4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028cc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	f023 0302 	bic.w	r3, r3, #2
 80028e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028e4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0204 	bic.w	r2, r2, #4
 80028f4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028fe:	2001      	movs	r0, #1
 8002900:	f7ff fd38 	bl	8002374 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 ff0f 	bl	8003730 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0208 	bic.w	r2, r2, #8
 8002920:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800292a:	2001      	movs	r0, #1
 800292c:	f7ff fd22 	bl	8002374 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e00e      	b.n	800295c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	3212      	adds	r2, #18
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d9ed      	bls.n	800293e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2210      	movs	r2, #16
 800296c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	fffe5f3e 	.word	0xfffe5f3e

08002984 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e045      	b.n	8002a34 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ae:	2b40      	cmp	r3, #64	@ 0x40
 80029b0:	d13f      	bne.n	8002a32 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80029ba:	2201      	movs	r2, #1
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f001 f990 	bl	8003ce4 <ETH_Prepare_Tx_Descriptors>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d0:	f043 0202 	orr.w	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e02a      	b.n	8002a34 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80029de:	f3bf 8f4f 	dsb	sy
}
 80029e2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d904      	bls.n	8002a00 <HAL_ETH_Transmit_IT+0x7c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	1f1a      	subs	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00d      	beq.n	8002a2e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0a4      	b.n	8002bb2 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	d001      	beq.n	8002a76 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e09d      	b.n	8002bb2 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	3212      	adds	r2, #18
 8002a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a86:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a8c:	f1c3 0304 	rsb	r3, r3, #4
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a92:	e066      	b.n	8002b62 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <HAL_ETH_ReadData+0x88>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03c      	beq.n	8002b3e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002ae6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002afc:	2301      	movs	r3, #1
 8002afe:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f011 fe38 	bl	8014792 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	441a      	add	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3301      	adds	r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d902      	bls.n	8002b50 <HAL_ETH_ReadData+0x114>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b04      	subs	r3, #4
 8002b4e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	3212      	adds	r2, #18
 8002b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db06      	blt.n	8002b78 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d202      	bcs.n	8002b78 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d08d      	beq.n	8002a94 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f815 	bl	8002bbc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bd0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	3212      	adds	r2, #18
 8002bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bdc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002be4:	e042      	b.n	8002c6c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d112      	bne.n	8002c14 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f011 fdb8 	bl	8014768 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	74fb      	strb	r3, [r7, #19]
 8002c02:	e007      	b.n	8002c14 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	461a      	mov	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d028      	beq.n	8002c6c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	4b26      	ldr	r3, [pc, #152]	@ (8002cc0 <ETH_UpdateDescriptor+0x104>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	6053      	str	r3, [r2, #4]
 8002c2e:	e005      	b.n	8002c3c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d902      	bls.n	8002c5a <ETH_UpdateDescriptor+0x9e>
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	3b04      	subs	r3, #4
 8002c58:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	3212      	adds	r2, #18
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	617b      	str	r3, [r7, #20]
      desccount--;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <ETH_UpdateDescriptor+0xbc>
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1b6      	bne.n	8002be6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d01a      	beq.n	8002cb8 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3303      	adds	r3, #3
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c8c:	f3bf 8f5f 	dmb	sy
}
 8002c90:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	18ca      	adds	r2, r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002caa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	80004000 	.word	0x80004000

08002cc4 <HAL_ETH_GetRxDataErrorCode>:
  *         the configuration information for ETHERNET module
  * @param  pErrorCode: pointer to uint32_t to hold the error code
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataErrorCode(const ETH_HandleTypeDef *heth, uint32_t *pErrorCode)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  /* Get error bits. */
  *pErrorCode = READ_BIT(heth->RxDescList.pRxLastRxDesc, ETH_DMARXDESC_ERRORS_MASK);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cd2:	f644 03de 	movw	r3, #18654	@ 0x48de
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3318      	adds	r3, #24
 8002cf6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d08:	e047      	b.n	8002d9a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	3301      	adds	r3, #1
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d902      	bls.n	8002d36 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	3b04      	subs	r3, #4
 8002d34:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002d3a:	7bbb      	ldrb	r3, [r7, #14]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02c      	beq.n	8002d9a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db1f      	blt.n	8002d96 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f011 fd54 	bl	8014810 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d902      	bls.n	8002d88 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	3b04      	subs	r3, #4
 8002d86:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d94:	e001      	b.n	8002d9a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1b1      	bne.n	8002d0a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f08 <HAL_ETH_IRQHandler+0x158>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00e      	beq.n	8002e06 <HAL_ETH_IRQHandler+0x56>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <HAL_ETH_IRQHandler+0x15c>)
 8002dfe:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f011 fc51 	bl	80146a8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00f      	beq.n	8002e30 <HAL_ETH_IRQHandler+0x80>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e22:	461a      	mov	r2, r3
 8002e24:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002e28:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f011 fc6c 	bl	8014708 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d042      	beq.n	8002ec0 <HAL_ETH_IRQHandler+0x110>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03d      	beq.n	8002ec0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4a:	f043 0208 	orr.w	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01a      	beq.n	8002e94 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <HAL_ETH_IRQHandler+0x160>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002e84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e88:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	22e0      	movs	r2, #224	@ 0xe0
 8002e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e92:	e012      	b.n	8002eba <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002eb8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f011 fb98 	bl	80145f0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f81a 	bl	8002f14 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_ETH_IRQHandler+0x158>)
 8002ef4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ef8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f814 	bl	8002f28 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40013c00 	.word	0x40013c00
 8002f0c:	00010040 	.word	0x00010040
 8002f10:	007e2000 	.word	0x007e2000

08002f14 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 031c 	and.w	r3, r3, #28
 8002f58:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	02db      	lsls	r3, r3, #11
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0302 	bic.w	r3, r3, #2
 8002f7a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002f8c:	f7ff f9e6 	bl	800235c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f92:	e00d      	b.n	8002fb0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002f94:	f7ff f9e2 	bl	800235c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa2:	d301      	bcc.n	8002fa8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e010      	b.n	8002fca <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ec      	bne.n	8002f94 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f003 031c 	and.w	r3, r3, #28
 8002fee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	02db      	lsls	r3, r3, #11
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	019b      	lsls	r3, r3, #6
 8003000:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800302c:	f7ff f996 	bl	800235c <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003032:	e00d      	b.n	8003050 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003034:	f7ff f992 	bl	800235c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003042:	d301      	bcc.n	8003048 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e009      	b.n	800305c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ec      	bne.n	8003034 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0e6      	b.n	8003246 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	b29a      	uxth	r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_ETH_GetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetDMAConfig(const ETH_HandleTypeDef *heth, ETH_DMAConfigTypeDef *dmaconf)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_ETH_GetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0ca      	b.n	80033fe <HAL_ETH_GetDMAConfig+0x1aa>
  }

  dmaconf->DMAArbitration = READ_BIT(heth->Instance->DMABMR,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f24c 0302 	movw	r3, #49154	@ 0xc002
 8003276:	4013      	ands	r3, r2
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	6013      	str	r3, [r2, #0]
                                     (ETH_DMAARBITRATION_RXPRIORTX | ETH_DMAARBITRATION_ROUNDROBIN_RXTX_4_1));
  dmaconf->AddressAlignedBeats = ((READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_AAB) >> 25U) > 0U) ? ENABLE : DISABLE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf14      	ite	ne
 800328e:	2301      	movne	r3, #1
 8003290:	2300      	moveq	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	711a      	strb	r2, [r3, #4]
  dmaconf->BurstMode = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_FB | ETH_DMABMR_MB);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_ETH_GetDMAConfig+0x1b8>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	6093      	str	r3, [r2, #8]
  dmaconf->RxDMABurstLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_RDP);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 02fc 	and.w	r2, r3, #8257536	@ 0x7e0000
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	619a      	str	r2, [r3, #24]
  dmaconf->TxDMABurstLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_PBL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 527c 	and.w	r2, r3, #16128	@ 0x3f00
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	611a      	str	r2, [r3, #16]
  dmaconf->EnhancedDescriptorFormat = ((READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_EDE) >> 7) > 0U) ? ENABLE : DISABLE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  dmaconf->DescriptorSkipLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_DSL) >> 2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	629a      	str	r2, [r3, #40]	@ 0x28

  dmaconf->DropTCPIPChecksumErrorFrame = ((READ_BIT(heth->Instance->DMAOMR,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800330c:	699b      	ldr	r3, [r3, #24]
                                                    ETH_DMAOMR_DTCEFD) >> 26) > 0U) ? DISABLE : ENABLE;
 800330e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf0c      	ite	eq
 8003316:	2301      	moveq	r3, #1
 8003318:	2300      	movne	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
  dmaconf->DropTCPIPChecksumErrorFrame = ((READ_BIT(heth->Instance->DMAOMR,
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	731a      	strb	r2, [r3, #12]
  dmaconf->ReceiveStoreForward = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_RSF) >> 25) > 0U) ? ENABLE : DISABLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	735a      	strb	r2, [r3, #13]
  dmaconf->FlushRxPacket = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_FTF) >> 20) > 0U) ? DISABLE : ENABLE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800334e:	2b00      	cmp	r3, #0
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	775a      	strb	r2, [r3, #29]
  dmaconf->TransmitStoreForward = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_TSF) >> 21) > 0U) ? ENABLE : DISABLE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	739a      	strb	r2, [r3, #14]
  dmaconf->TransmitThresholdControl = READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_TTC);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f403 32e0 	and.w	r2, r3, #114688	@ 0x1c000
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	615a      	str	r2, [r3, #20]
  dmaconf->ForwardErrorFrames = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_FEF) >> 7) > 0U) ? ENABLE : DISABLE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	771a      	strb	r2, [r3, #28]
  dmaconf->ForwardUndersizedGoodFrames = ((READ_BIT(heth->Instance->DMAOMR,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b4:	699b      	ldr	r3, [r3, #24]
                                                    ETH_DMAOMR_FUGF) >> 6) > 0U) ? ENABLE : DISABLE;
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
  dmaconf->ForwardUndersizedGoodFrames = ((READ_BIT(heth->Instance->DMAOMR,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	779a      	strb	r2, [r3, #30]
  dmaconf->ReceiveThresholdControl = READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_RTC);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 0218 	and.w	r2, r3, #24
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	621a      	str	r2, [r3, #32]
  dmaconf->SecondFrameOperate = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_OSF) >> 2) > 0U) ? ENABLE : DISABLE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	04010000 	.word	0x04010000

08003410 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e00b      	b.n	800343c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800342a:	2b10      	cmp	r3, #16
 800342c:	d105      	bne.n	800343a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f9a3 	bl	800377c <ETH_SetMACConfig>

    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e00b      	b.n	8003470 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800345e:	2b10      	cmp	r3, #16
 8003460:	d105      	bne.n	800346e <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8003462:	6839      	ldr	r1, [r7, #0]
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa3d 	bl	80038e4 <ETH_SetDMAConfig>

    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 031c 	bic.w	r3, r3, #28
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003490:	f001 fd6e 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8003494:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <HAL_ETH_SetMDIOClockRange+0x74>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d804      	bhi.n	80034a8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e019      	b.n	80034dc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a11      	ldr	r2, [pc, #68]	@ (80034f0 <HAL_ETH_SetMDIOClockRange+0x78>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d204      	bcs.n	80034ba <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f043 030c 	orr.w	r3, r3, #12
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e010      	b.n	80034dc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4a0d      	ldr	r2, [pc, #52]	@ (80034f4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d90c      	bls.n	80034dc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4a0c      	ldr	r2, [pc, #48]	@ (80034f8 <HAL_ETH_SetMDIOClockRange+0x80>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d804      	bhi.n	80034d4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e003      	b.n	80034dc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f043 0310 	orr.w	r3, r3, #16
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	611a      	str	r2, [r3, #16]
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	02160ebf 	.word	0x02160ebf
 80034f0:	03938700 	.word	0x03938700
 80034f4:	05f5e0ff 	.word	0x05f5e0ff
 80034f8:	08f0d17f 	.word	0x08f0d17f

080034fc <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;
  uint32_t tmpreg1;

  if (pFilterConfig == NULL)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e044      	b.n	800359a <HAL_ETH_SetMACFilterConfig+0x9e>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	78db      	ldrb	r3, [r3, #3]
 800351a:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 800351c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	791b      	ldrb	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003524:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	7a1b      	ldrb	r3, [r3, #8]
 800352a:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 800352c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	795b      	ldrb	r3, [r3, #5]
 8003532:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003534:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == ENABLE) ? 1U : 0U) << 5) |
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	7a52      	ldrb	r2, [r2, #9]
 800353a:	2a01      	cmp	r2, #1
 800353c:	d101      	bne.n	8003542 <HAL_ETH_SetMACFilterConfig+0x46>
 800353e:	2220      	movs	r2, #32
 8003540:	e000      	b.n	8003544 <HAL_ETH_SetMACFilterConfig+0x48>
 8003542:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8003544:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	79db      	ldrb	r3, [r3, #7]
 800354a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == ENABLE) ? 1U : 0U) << 5) |
 800354c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	799b      	ldrb	r3, [r3, #6]
 8003552:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003554:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800355c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8003564:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACFFR, ETH_MACFFR_MASK, filterconfig);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_ETH_SetMACFilterConfig+0xa8>)
 8003576:	4013      	ands	r3, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	430b      	orrs	r3, r1
 8003580:	6053      	str	r3, [r2, #4]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	60bb      	str	r3, [r7, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800358a:	2001      	movs	r0, #1
 800358c:	f7fe fef2 	bl	8002374 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	7ffff800 	.word	0x7ffff800

080035a8 <HAL_ETH_GetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that will hold
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetMACFilterConfig(const ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  if (pFilterConfig == NULL)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_ETH_GetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e084      	b.n	80036c6 <HAL_ETH_GetMACFilterConfig+0x11e>
  }

  pFilterConfig->PromiscuousMode = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PM)) > 0U) ? ENABLE : DISABLE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf14      	ite	ne
 80035ca:	2301      	movne	r3, #1
 80035cc:	2300      	moveq	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	701a      	strb	r2, [r3, #0]
  pFilterConfig->HashUnicast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HU) >> 1) > 0U) ? ENABLE : DISABLE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	70da      	strb	r2, [r3, #3]
  pFilterConfig->HashMulticast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HM) >> 2) > 0U) ? ENABLE : DISABLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	711a      	strb	r2, [r3, #4]
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
                                                       ETH_MACFFR_DAIF) >> 3) > 0U) ? ENABLE : DISABLE;
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	721a      	strb	r2, [r3, #8]
  pFilterConfig->PassAllMulticast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PAM) >> 4) > 0U) ? ENABLE : DISABLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	715a      	strb	r2, [r3, #5]
  pFilterConfig->BroadcastFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_BFD) >> 5) > 0U) ? ENABLE : DISABLE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	725a      	strb	r2, [r3, #9]
  pFilterConfig->ControlPacketsFilter = READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PCF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	60da      	str	r2, [r3, #12]
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
                                                      ETH_MACFFR_SAIF) >> 8) > 0U) ? ENABLE : DISABLE;
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	71da      	strb	r2, [r3, #7]
  pFilterConfig->SrcAddrFiltering = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_SAF) >> 9) > 0U) ? ENABLE : DISABLE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	719a      	strb	r2, [r3, #6]
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HPF) >> 10) > 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
                                       ? ENABLE : DISABLE;
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HPF) >> 10) > 0U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	709a      	strb	r2, [r3, #2]
  pFilterConfig->ReceiveAllMode = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_RA) >> 31) > 0U) ? ENABLE : DISABLE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	0fdb      	lsrs	r3, r3, #31
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	705a      	strb	r2, [r3, #1]

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_ETH_SetHashTable>:
  * @param  pHashTable: pointer to a table of two 32 bit values, that contains
  *         the 64 bits of the hash table.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetHashTable(ETH_HandleTypeDef *heth, uint32_t *pHashTable)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  if (pHashTable == NULL)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ETH_SetHashTable+0x14>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e020      	b.n	8003728 <HAL_ETH_SetHashTable+0x56>
  }

  heth->Instance->MACHTHR = pHashTable[0];
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	609a      	str	r2, [r3, #8]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACHTHR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036f8:	2001      	movs	r0, #1
 80036fa:	f7fe fe3b 	bl	8002374 <HAL_Delay>
  (heth->Instance)->MACHTHR = tmpreg1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	609a      	str	r2, [r3, #8]

  heth->Instance->MACHTLR = pHashTable[1];
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	6852      	ldr	r2, [r2, #4]
 800370e:	60da      	str	r2, [r3, #12]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACHTLR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003718:	2001      	movs	r0, #1
 800371a:	f7fe fe2b 	bl	8002374 <HAL_Delay>
  (heth->Instance)->MACHTLR = tmpreg1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800374e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003752:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003760:	2001      	movs	r0, #1
 8003762:	f7fe fe07 	bl	8002374 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003770:	6193      	str	r3, [r2, #24]
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4b53      	ldr	r3, [pc, #332]	@ (80038e0 <ETH_SetMACConfig+0x164>)
 8003792:	4013      	ands	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	7b9b      	ldrb	r3, [r3, #14]
 800379a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	7c12      	ldrb	r2, [r2, #16]
 80037a0:	2a00      	cmp	r2, #0
 80037a2:	d102      	bne.n	80037aa <ETH_SetMACConfig+0x2e>
 80037a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80037a8:	e000      	b.n	80037ac <ETH_SetMACConfig+0x30>
 80037aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80037ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	7c52      	ldrb	r2, [r2, #17]
 80037b2:	2a00      	cmp	r2, #0
 80037b4:	d102      	bne.n	80037bc <ETH_SetMACConfig+0x40>
 80037b6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80037ba:	e000      	b.n	80037be <ETH_SetMACConfig+0x42>
 80037bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80037c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	7fdb      	ldrb	r3, [r3, #31]
 80037ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80037cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80037d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	7f92      	ldrb	r2, [r2, #30]
 80037d8:	2a00      	cmp	r2, #0
 80037da:	d102      	bne.n	80037e2 <ETH_SetMACConfig+0x66>
 80037dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037e0:	e000      	b.n	80037e4 <ETH_SetMACConfig+0x68>
 80037e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80037e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	7f1b      	ldrb	r3, [r3, #28]
 80037ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80037ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80037f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	791b      	ldrb	r3, [r3, #4]
 80037f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80037fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003802:	2a00      	cmp	r2, #0
 8003804:	d102      	bne.n	800380c <ETH_SetMACConfig+0x90>
 8003806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800380a:	e000      	b.n	800380e <ETH_SetMACConfig+0x92>
 800380c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800380e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	7bdb      	ldrb	r3, [r3, #15]
 8003814:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003816:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800381c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003824:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003826:	4313      	orrs	r3, r2
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800383e:	2001      	movs	r0, #1
 8003840:	f7fe fd98 	bl	8002374 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800385a:	4013      	ands	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800386a:	2a00      	cmp	r2, #0
 800386c:	d101      	bne.n	8003872 <ETH_SetMACConfig+0xf6>
 800386e:	2280      	movs	r2, #128	@ 0x80
 8003870:	e000      	b.n	8003874 <ETH_SetMACConfig+0xf8>
 8003872:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003874:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800387a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003882:	2a01      	cmp	r2, #1
 8003884:	d101      	bne.n	800388a <ETH_SetMACConfig+0x10e>
 8003886:	2208      	movs	r2, #8
 8003888:	e000      	b.n	800388c <ETH_SetMACConfig+0x110>
 800388a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800388c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003894:	2a01      	cmp	r2, #1
 8003896:	d101      	bne.n	800389c <ETH_SetMACConfig+0x120>
 8003898:	2204      	movs	r2, #4
 800389a:	e000      	b.n	800389e <ETH_SetMACConfig+0x122>
 800389c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800389e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80038a6:	2a01      	cmp	r2, #1
 80038a8:	d101      	bne.n	80038ae <ETH_SetMACConfig+0x132>
 80038aa:	2202      	movs	r2, #2
 80038ac:	e000      	b.n	80038b0 <ETH_SetMACConfig+0x134>
 80038ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038b0:	4313      	orrs	r3, r2
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038c8:	2001      	movs	r0, #1
 80038ca:	f7fe fd53 	bl	8002374 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	619a      	str	r2, [r3, #24]
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	fd20810f 	.word	0xfd20810f

080038e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4b3d      	ldr	r3, [pc, #244]	@ (80039f4 <ETH_SetDMAConfig+0x110>)
 80038fe:	4013      	ands	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	7b1b      	ldrb	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <ETH_SetDMAConfig+0x2c>
 800390a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800390e:	e000      	b.n	8003912 <ETH_SetDMAConfig+0x2e>
 8003910:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	7b5b      	ldrb	r3, [r3, #13]
 8003916:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003918:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	7f52      	ldrb	r2, [r2, #29]
 800391e:	2a00      	cmp	r2, #0
 8003920:	d102      	bne.n	8003928 <ETH_SetDMAConfig+0x44>
 8003922:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003926:	e000      	b.n	800392a <ETH_SetDMAConfig+0x46>
 8003928:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800392a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	7b9b      	ldrb	r3, [r3, #14]
 8003930:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003932:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003938:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	7f1b      	ldrb	r3, [r3, #28]
 800393e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003940:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	7f9b      	ldrb	r3, [r3, #30]
 8003946:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003948:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800394e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003956:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003958:	4313      	orrs	r3, r2
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003968:	461a      	mov	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800397a:	2001      	movs	r0, #1
 800397c:	f7fe fcfa 	bl	8002374 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003988:	461a      	mov	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	791b      	ldrb	r3, [r3, #4]
 8003992:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003998:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800399e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80039ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80039b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80039bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039d8:	2001      	movs	r0, #1
 80039da:	f7fe fccb 	bl	8002374 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6013      	str	r3, [r2, #0]
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	f8de3f23 	.word	0xf8de3f23

080039f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b0a6      	sub	sp, #152	@ 0x98
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003a60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a64:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003a66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003a72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fe7f 	bl	800377c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003aae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ab2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ab4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ab8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003abe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ff05 	bl	80038e4 <ETH_SetDMAConfig>
}
 8003ada:	bf00      	nop
 8003adc:	3798      	adds	r7, #152	@ 0x98
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3305      	adds	r3, #5
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	3204      	adds	r2, #4
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <ETH_MACAddressConfig+0x68>)
 8003b06:	4413      	add	r3, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3303      	adds	r3, #3
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	061a      	lsls	r2, r3, #24
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3302      	adds	r3, #2
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3301      	adds	r3, #1
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <ETH_MACAddressConfig+0x6c>)
 8003b36:	4413      	add	r3, r2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	6013      	str	r3, [r2, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40028040 	.word	0x40028040
 8003b50:	40028044 	.word	0x40028044

08003b54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e03e      	b.n	8003be0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68d9      	ldr	r1, [r3, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	440b      	add	r3, r1
 8003b72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	3206      	adds	r2, #6
 8003b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d80c      	bhi.n	8003bc4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68d9      	ldr	r1, [r3, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	440b      	add	r3, r1
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	e004      	b.n	8003bce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d9bd      	bls.n	8003b62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf8:	611a      	str	r2, [r3, #16]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b085      	sub	sp, #20
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e048      	b.n	8003ca6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6919      	ldr	r1, [r3, #16]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2200      	movs	r2, #0
 8003c42:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2200      	movs	r2, #0
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c50:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	3212      	adds	r2, #18
 8003c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d80c      	bhi.n	8003c96 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6919      	ldr	r1, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	440b      	add	r3, r1
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	e004      	b.n	8003ca0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d9b3      	bls.n	8003c14 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cd6:	60da      	str	r2, [r3, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b091      	sub	sp, #68	@ 0x44
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d26:	d007      	beq.n	8003d38 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e111      	b.n	8003f60 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3e:	3301      	adds	r3, #1
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4b86      	ldr	r3, [pc, #536]	@ (8003f6c <ETH_Prepare_Tx_Descriptors+0x288>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d56:	6852      	ldr	r2, [r2, #4]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003dbe:	e082      	b.n	8003ec6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e005      	b.n	8003dec <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dee:	3301      	adds	r3, #1
 8003df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d902      	bls.n	8003dfe <ETH_Prepare_Tx_Descriptors+0x11a>
 8003df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfa:	3b04      	subs	r3, #4
 8003dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e06:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e14:	d007      	beq.n	8003e26 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d029      	beq.n	8003e7a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e32:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e38:	e019      	b.n	8003e6e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003e3a:	f3bf 8f5f 	dmb	sy
}
 8003e3e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4e:	3301      	adds	r3, #1
 8003e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d902      	bls.n	8003e5e <ETH_Prepare_Tx_Descriptors+0x17a>
 8003e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e66:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3e1      	bcc.n	8003e3a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003e76:	2302      	movs	r3, #2
 8003e78:	e072      	b.n	8003f60 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e84:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e88:	3301      	adds	r3, #1
 8003e8a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4b32      	ldr	r3, [pc, #200]	@ (8003f6c <ETH_Prepare_Tx_Descriptors+0x288>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea6:	6852      	ldr	r2, [r2, #4]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003eb4:	f3bf 8f5f 	dmb	sy
}
 8003eb8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f47f af78 	bne.w	8003dc0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e005      	b.n	8003ef0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	6a3a      	ldr	r2, [r7, #32]
 8003f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f04:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003f06:	f3bf 8f5f 	dmb	sy
}
 8003f0a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f20:	3304      	adds	r3, #4
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f2c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f32:	613b      	str	r3, [r7, #16]
  return(result);
 8003f34:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	4413      	add	r3, r2
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3744      	adds	r7, #68	@ 0x44
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	ffffe000 	.word	0xffffe000

08003f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	@ 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	e175      	b.n	800427c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003f90:	2201      	movs	r2, #1
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	f040 8164 	bne.w	8004276 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d005      	beq.n	8003fc6 <HAL_GPIO_Init+0x56>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d130      	bne.n	8004028 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 0201 	and.w	r2, r3, #1
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b03      	cmp	r3, #3
 8004032:	d017      	beq.n	8004064 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	2203      	movs	r2, #3
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d123      	bne.n	80040b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	08da      	lsrs	r2, r3, #3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3208      	adds	r2, #8
 8004078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	220f      	movs	r2, #15
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	08da      	lsrs	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3208      	adds	r2, #8
 80040b2:	69b9      	ldr	r1, [r7, #24]
 80040b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2203      	movs	r2, #3
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0203 	and.w	r2, r3, #3
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80be 	beq.w	8004276 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040fa:	4b66      	ldr	r3, [pc, #408]	@ (8004294 <HAL_GPIO_Init+0x324>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	4a65      	ldr	r2, [pc, #404]	@ (8004294 <HAL_GPIO_Init+0x324>)
 8004100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004104:	6453      	str	r3, [r2, #68]	@ 0x44
 8004106:	4b63      	ldr	r3, [pc, #396]	@ (8004294 <HAL_GPIO_Init+0x324>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004112:	4a61      	ldr	r2, [pc, #388]	@ (8004298 <HAL_GPIO_Init+0x328>)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	3302      	adds	r3, #2
 800411a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	220f      	movs	r2, #15
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a58      	ldr	r2, [pc, #352]	@ (800429c <HAL_GPIO_Init+0x32c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d037      	beq.n	80041ae <HAL_GPIO_Init+0x23e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a57      	ldr	r2, [pc, #348]	@ (80042a0 <HAL_GPIO_Init+0x330>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d031      	beq.n	80041aa <HAL_GPIO_Init+0x23a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a56      	ldr	r2, [pc, #344]	@ (80042a4 <HAL_GPIO_Init+0x334>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d02b      	beq.n	80041a6 <HAL_GPIO_Init+0x236>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a55      	ldr	r2, [pc, #340]	@ (80042a8 <HAL_GPIO_Init+0x338>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d025      	beq.n	80041a2 <HAL_GPIO_Init+0x232>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a54      	ldr	r2, [pc, #336]	@ (80042ac <HAL_GPIO_Init+0x33c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01f      	beq.n	800419e <HAL_GPIO_Init+0x22e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a53      	ldr	r2, [pc, #332]	@ (80042b0 <HAL_GPIO_Init+0x340>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d019      	beq.n	800419a <HAL_GPIO_Init+0x22a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a52      	ldr	r2, [pc, #328]	@ (80042b4 <HAL_GPIO_Init+0x344>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_GPIO_Init+0x226>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a51      	ldr	r2, [pc, #324]	@ (80042b8 <HAL_GPIO_Init+0x348>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00d      	beq.n	8004192 <HAL_GPIO_Init+0x222>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a50      	ldr	r2, [pc, #320]	@ (80042bc <HAL_GPIO_Init+0x34c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <HAL_GPIO_Init+0x21e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4f      	ldr	r2, [pc, #316]	@ (80042c0 <HAL_GPIO_Init+0x350>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_GPIO_Init+0x21a>
 8004186:	2309      	movs	r3, #9
 8004188:	e012      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 800418a:	230a      	movs	r3, #10
 800418c:	e010      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 800418e:	2308      	movs	r3, #8
 8004190:	e00e      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 8004192:	2307      	movs	r3, #7
 8004194:	e00c      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 8004196:	2306      	movs	r3, #6
 8004198:	e00a      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 800419a:	2305      	movs	r3, #5
 800419c:	e008      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 800419e:	2304      	movs	r3, #4
 80041a0:	e006      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 80041a2:	2303      	movs	r3, #3
 80041a4:	e004      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e002      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <HAL_GPIO_Init+0x240>
 80041ae:	2300      	movs	r3, #0
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	f002 0203 	and.w	r2, r2, #3
 80041b6:	0092      	lsls	r2, r2, #2
 80041b8:	4093      	lsls	r3, r2
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80041c0:	4935      	ldr	r1, [pc, #212]	@ (8004298 <HAL_GPIO_Init+0x328>)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	3302      	adds	r3, #2
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ce:	4b3d      	ldr	r3, [pc, #244]	@ (80042c4 <HAL_GPIO_Init+0x354>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041f2:	4a34      	ldr	r2, [pc, #208]	@ (80042c4 <HAL_GPIO_Init+0x354>)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041f8:	4b32      	ldr	r3, [pc, #200]	@ (80042c4 <HAL_GPIO_Init+0x354>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800421c:	4a29      	ldr	r2, [pc, #164]	@ (80042c4 <HAL_GPIO_Init+0x354>)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004222:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <HAL_GPIO_Init+0x354>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004246:	4a1f      	ldr	r2, [pc, #124]	@ (80042c4 <HAL_GPIO_Init+0x354>)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_GPIO_Init+0x354>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004270:	4a14      	ldr	r2, [pc, #80]	@ (80042c4 <HAL_GPIO_Init+0x354>)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3301      	adds	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b0f      	cmp	r3, #15
 8004280:	f67f ae86 	bls.w	8003f90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	3724      	adds	r7, #36	@ 0x24
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800
 8004298:	40013800 	.word	0x40013800
 800429c:	40020000 	.word	0x40020000
 80042a0:	40020400 	.word	0x40020400
 80042a4:	40020800 	.word	0x40020800
 80042a8:	40020c00 	.word	0x40020c00
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40021400 	.word	0x40021400
 80042b4:	40021800 	.word	0x40021800
 80042b8:	40021c00 	.word	0x40021c00
 80042bc:	40022000 	.word	0x40022000
 80042c0:	40022400 	.word	0x40022400
 80042c4:	40013c00 	.word	0x40013c00

080042c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
 80042d4:	4613      	mov	r3, r2
 80042d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042d8:	787b      	ldrb	r3, [r7, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042e4:	e003      	b.n	80042ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042e6:	887b      	ldrh	r3, [r7, #2]
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	619a      	str	r2, [r3, #24]
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af02      	add	r7, sp, #8
 8004300:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e108      	b.n	800451e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fd5c 	bl	8001de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2203      	movs	r2, #3
 8004330:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800433a:	d102      	bne.n	8004342 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f002 fec0 	bl	80070cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7c1a      	ldrb	r2, [r3, #16]
 8004354:	f88d 2000 	strb.w	r2, [sp]
 8004358:	3304      	adds	r3, #4
 800435a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435c:	f002 fe5c 	bl	8007018 <USB_CoreInit>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e0d5      	b.n	800451e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f002 feb8 	bl	80070ee <USB_SetCurrentMode>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0c6      	b.n	800451e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e04a      	b.n	800442c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	3315      	adds	r3, #21
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	3314      	adds	r3, #20
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043be:	7bfa      	ldrb	r2, [r7, #15]
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	b298      	uxth	r0, r3
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	332e      	adds	r3, #46	@ 0x2e
 80043d2:	4602      	mov	r2, r0
 80043d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3318      	adds	r3, #24
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	331c      	adds	r3, #28
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3320      	adds	r3, #32
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004412:	7bfa      	ldrb	r2, [r7, #15]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3324      	adds	r3, #36	@ 0x24
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	3301      	adds	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	791b      	ldrb	r3, [r3, #4]
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	429a      	cmp	r2, r3
 8004434:	d3af      	bcc.n	8004396 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e044      	b.n	80044c6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	3301      	adds	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	791b      	ldrb	r3, [r3, #4]
 80044ca:	7bfa      	ldrb	r2, [r7, #15]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d3b5      	bcc.n	800443c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7c1a      	ldrb	r2, [r3, #16]
 80044d8:	f88d 2000 	strb.w	r2, [sp]
 80044dc:	3304      	adds	r3, #4
 80044de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044e0:	f002 fe52 	bl	8007188 <USB_DevInit>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e013      	b.n	800451e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7b1b      	ldrb	r3, [r3, #12]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d102      	bne.n	8004512 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f80b 	bl	8004528 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f003 f80d 	bl	8007536 <USB_DevDisconnect>

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004556:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_PCDEx_ActivateLPM+0x44>)
 8004558:	4313      	orrs	r3, r2
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	10000003 	.word	0x10000003

08004570 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004574:	4b05      	ldr	r3, [pc, #20]	@ (800458c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a04      	ldr	r2, [pc, #16]	@ (800458c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800457a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40007000 	.word	0x40007000

08004590 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	4b23      	ldr	r3, [pc, #140]	@ (8004628 <HAL_PWREx_EnableOverDrive+0x98>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	4a22      	ldr	r2, [pc, #136]	@ (8004628 <HAL_PWREx_EnableOverDrive+0x98>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a6:	4b20      	ldr	r3, [pc, #128]	@ (8004628 <HAL_PWREx_EnableOverDrive+0x98>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045b2:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <HAL_PWREx_EnableOverDrive+0x9c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1d      	ldr	r2, [pc, #116]	@ (800462c <HAL_PWREx_EnableOverDrive+0x9c>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045be:	f7fd fecd 	bl	800235c <HAL_GetTick>
 80045c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045c4:	e009      	b.n	80045da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045c6:	f7fd fec9 	bl	800235c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045d4:	d901      	bls.n	80045da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e022      	b.n	8004620 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045da:	4b14      	ldr	r3, [pc, #80]	@ (800462c <HAL_PWREx_EnableOverDrive+0x9c>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e6:	d1ee      	bne.n	80045c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80045e8:	4b10      	ldr	r3, [pc, #64]	@ (800462c <HAL_PWREx_EnableOverDrive+0x9c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0f      	ldr	r2, [pc, #60]	@ (800462c <HAL_PWREx_EnableOverDrive+0x9c>)
 80045ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045f4:	f7fd feb2 	bl	800235c <HAL_GetTick>
 80045f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045fa:	e009      	b.n	8004610 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045fc:	f7fd feae 	bl	800235c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800460a:	d901      	bls.n	8004610 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e007      	b.n	8004620 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004610:	4b06      	ldr	r3, [pc, #24]	@ (800462c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800461c:	d1ee      	bne.n	80045fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40023800 	.word	0x40023800
 800462c:	40007000 	.word	0x40007000

08004630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004638:	2300      	movs	r3, #0
 800463a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e29b      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8087 	beq.w	8004762 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004654:	4b96      	ldr	r3, [pc, #600]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b04      	cmp	r3, #4
 800465e:	d00c      	beq.n	800467a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004660:	4b93      	ldr	r3, [pc, #588]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b08      	cmp	r3, #8
 800466a:	d112      	bne.n	8004692 <HAL_RCC_OscConfig+0x62>
 800466c:	4b90      	ldr	r3, [pc, #576]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004674:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004678:	d10b      	bne.n	8004692 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467a:	4b8d      	ldr	r3, [pc, #564]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d06c      	beq.n	8004760 <HAL_RCC_OscConfig+0x130>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d168      	bne.n	8004760 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e275      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x7a>
 800469c:	4b84      	ldr	r3, [pc, #528]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a83      	ldr	r2, [pc, #524]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e02e      	b.n	8004708 <HAL_RCC_OscConfig+0xd8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x9c>
 80046b2:	4b7f      	ldr	r3, [pc, #508]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a7e      	ldr	r2, [pc, #504]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b7c      	ldr	r3, [pc, #496]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7b      	ldr	r2, [pc, #492]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e01d      	b.n	8004708 <HAL_RCC_OscConfig+0xd8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0xc0>
 80046d6:	4b76      	ldr	r3, [pc, #472]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a75      	ldr	r2, [pc, #468]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b73      	ldr	r3, [pc, #460]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a72      	ldr	r2, [pc, #456]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0xd8>
 80046f0:	4b6f      	ldr	r3, [pc, #444]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a6e      	ldr	r2, [pc, #440]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4b6c      	ldr	r3, [pc, #432]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6b      	ldr	r2, [pc, #428]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fe24 	bl	800235c <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7fd fe20 	bl	800235c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	@ 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e229      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b61      	ldr	r3, [pc, #388]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0xe8>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fd fe10 	bl	800235c <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd fe0c 	bl	800235c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	@ 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e215      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	4b57      	ldr	r3, [pc, #348]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x110>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d069      	beq.n	8004842 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800476e:	4b50      	ldr	r3, [pc, #320]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b4d      	ldr	r3, [pc, #308]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b08      	cmp	r3, #8
 8004784:	d11c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x190>
 8004786:	4b4a      	ldr	r3, [pc, #296]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d116      	bne.n	80047c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	4b47      	ldr	r3, [pc, #284]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_RCC_OscConfig+0x17a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e1e9      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	4b41      	ldr	r3, [pc, #260]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	493d      	ldr	r1, [pc, #244]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047be:	e040      	b.n	8004842 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d023      	beq.n	8004810 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c8:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a38      	ldr	r2, [pc, #224]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd fdc2 	bl	800235c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fd fdbe 	bl	800235c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1c7      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fa:	4b2d      	ldr	r3, [pc, #180]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4929      	ldr	r1, [pc, #164]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]
 800480e:	e018      	b.n	8004842 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004810:	4b27      	ldr	r3, [pc, #156]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a26      	ldr	r2, [pc, #152]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fd fd9e 	bl	800235c <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004824:	f7fd fd9a 	bl	800235c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e1a3      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	4b1e      	ldr	r3, [pc, #120]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d038      	beq.n	80048c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d019      	beq.n	800488a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004856:	4b16      	ldr	r3, [pc, #88]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485a:	4a15      	ldr	r2, [pc, #84]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004862:	f7fd fd7b 	bl	800235c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486a:	f7fd fd77 	bl	800235c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e180      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800487e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x23a>
 8004888:	e01a      	b.n	80048c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488a:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 800488c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488e:	4a08      	ldr	r2, [pc, #32]	@ (80048b0 <HAL_RCC_OscConfig+0x280>)
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fd fd61 	bl	800235c <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489e:	f7fd fd5d 	bl	800235c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d903      	bls.n	80048b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e166      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
 80048b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b4:	4b92      	ldr	r3, [pc, #584]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 80048b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ee      	bne.n	800489e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a4 	beq.w	8004a16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ce:	4b8c      	ldr	r3, [pc, #560]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80048da:	4b89      	ldr	r3, [pc, #548]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	4a88      	ldr	r2, [pc, #544]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 80048e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80048e6:	4b86      	ldr	r3, [pc, #536]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	60bb      	str	r3, [r7, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f6:	4b83      	ldr	r3, [pc, #524]	@ (8004b04 <HAL_RCC_OscConfig+0x4d4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d118      	bne.n	8004934 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004902:	4b80      	ldr	r3, [pc, #512]	@ (8004b04 <HAL_RCC_OscConfig+0x4d4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a7f      	ldr	r2, [pc, #508]	@ (8004b04 <HAL_RCC_OscConfig+0x4d4>)
 8004908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800490c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490e:	f7fd fd25 	bl	800235c <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004916:	f7fd fd21 	bl	800235c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b64      	cmp	r3, #100	@ 0x64
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e12a      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004928:	4b76      	ldr	r3, [pc, #472]	@ (8004b04 <HAL_RCC_OscConfig+0x4d4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x31a>
 800493c:	4b70      	ldr	r3, [pc, #448]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004940:	4a6f      	ldr	r2, [pc, #444]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6713      	str	r3, [r2, #112]	@ 0x70
 8004948:	e02d      	b.n	80049a6 <HAL_RCC_OscConfig+0x376>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0x33c>
 8004952:	4b6b      	ldr	r3, [pc, #428]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004956:	4a6a      	ldr	r2, [pc, #424]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	6713      	str	r3, [r2, #112]	@ 0x70
 800495e:	4b68      	ldr	r3, [pc, #416]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	4a67      	ldr	r2, [pc, #412]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004964:	f023 0304 	bic.w	r3, r3, #4
 8004968:	6713      	str	r3, [r2, #112]	@ 0x70
 800496a:	e01c      	b.n	80049a6 <HAL_RCC_OscConfig+0x376>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b05      	cmp	r3, #5
 8004972:	d10c      	bne.n	800498e <HAL_RCC_OscConfig+0x35e>
 8004974:	4b62      	ldr	r3, [pc, #392]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004978:	4a61      	ldr	r2, [pc, #388]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 800497a:	f043 0304 	orr.w	r3, r3, #4
 800497e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004980:	4b5f      	ldr	r3, [pc, #380]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004984:	4a5e      	ldr	r2, [pc, #376]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6713      	str	r3, [r2, #112]	@ 0x70
 800498c:	e00b      	b.n	80049a6 <HAL_RCC_OscConfig+0x376>
 800498e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004992:	4a5b      	ldr	r2, [pc, #364]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6713      	str	r3, [r2, #112]	@ 0x70
 800499a:	4b59      	ldr	r3, [pc, #356]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499e:	4a58      	ldr	r2, [pc, #352]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d015      	beq.n	80049da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fd fcd5 	bl	800235c <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fd fcd1 	bl	800235c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e0d8      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049cc:	4b4c      	ldr	r3, [pc, #304]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ee      	beq.n	80049b6 <HAL_RCC_OscConfig+0x386>
 80049d8:	e014      	b.n	8004a04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049da:	f7fd fcbf 	bl	800235c <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e2:	f7fd fcbb 	bl	800235c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e0c2      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f8:	4b41      	ldr	r3, [pc, #260]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1ee      	bne.n	80049e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d105      	bne.n	8004a16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a14:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80ae 	beq.w	8004b7c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a20:	4b37      	ldr	r3, [pc, #220]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d06d      	beq.n	8004b08 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d14b      	bne.n	8004acc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a34:	4b32      	ldr	r3, [pc, #200]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a31      	ldr	r2, [pc, #196]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fd fc8c 	bl	800235c <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fd fc88 	bl	800235c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e091      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5a:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	071b      	lsls	r3, r3, #28
 8004a92:	491b      	ldr	r1, [pc, #108]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a98:	4b19      	ldr	r3, [pc, #100]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fc5a 	bl	800235c <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fd fc56 	bl	800235c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e05f      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	4b10      	ldr	r3, [pc, #64]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x47c>
 8004aca:	e057      	b.n	8004b7c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fd fc40 	bl	800235c <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd fc3c 	bl	800235c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e045      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af2:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <HAL_RCC_OscConfig+0x4d0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x4b0>
 8004afe:	e03d      	b.n	8004b7c <HAL_RCC_OscConfig+0x54c>
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b08:	4b1f      	ldr	r3, [pc, #124]	@ (8004b88 <HAL_RCC_OscConfig+0x558>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d030      	beq.n	8004b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d129      	bne.n	8004b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d122      	bne.n	8004b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d119      	bne.n	8004b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	3b01      	subs	r3, #1
 8004b52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d10f      	bne.n	8004b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0d0      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d910      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b67      	ldr	r3, [pc, #412]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 020f 	bic.w	r2, r3, #15
 8004bba:	4965      	ldr	r1, [pc, #404]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b63      	ldr	r3, [pc, #396]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0b8      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d020      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bec:	4b59      	ldr	r3, [pc, #356]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a58      	ldr	r2, [pc, #352]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c04:	4b53      	ldr	r3, [pc, #332]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4a52      	ldr	r2, [pc, #328]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c10:	4b50      	ldr	r3, [pc, #320]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	494d      	ldr	r1, [pc, #308]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d040      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c36:	4b47      	ldr	r3, [pc, #284]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d115      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e07f      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	4b41      	ldr	r3, [pc, #260]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e073      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e06b      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	4b39      	ldr	r3, [pc, #228]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4936      	ldr	r1, [pc, #216]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c80:	f7fd fb6c 	bl	800235c <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c88:	f7fd fb68 	bl	800235c <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e053      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 020c 	and.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1eb      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b27      	ldr	r3, [pc, #156]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d210      	bcs.n	8004ce0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 020f 	bic.w	r2, r3, #15
 8004cc6:	4922      	ldr	r1, [pc, #136]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b20      	ldr	r3, [pc, #128]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e032      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cec:	4b19      	ldr	r3, [pc, #100]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4916      	ldr	r1, [pc, #88]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d0a:	4b12      	ldr	r3, [pc, #72]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	490e      	ldr	r1, [pc, #56]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d1e:	f000 f821 	bl	8004d64 <HAL_RCC_GetSysClockFreq>
 8004d22:	4602      	mov	r2, r0
 8004d24:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	490a      	ldr	r1, [pc, #40]	@ (8004d58 <HAL_RCC_ClockConfig+0x1cc>)
 8004d30:	5ccb      	ldrb	r3, [r1, r3]
 8004d32:	fa22 f303 	lsr.w	r3, r2, r3
 8004d36:	4a09      	ldr	r2, [pc, #36]	@ (8004d5c <HAL_RCC_ClockConfig+0x1d0>)
 8004d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <HAL_RCC_ClockConfig+0x1d4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fc fe36 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023c00 	.word	0x40023c00
 8004d54:	40023800 	.word	0x40023800
 8004d58:	08019e10 	.word	0x08019e10
 8004d5c:	20000000 	.word	0x20000000
 8004d60:	20000004 	.word	0x20000004

08004d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d68:	b094      	sub	sp, #80	@ 0x50
 8004d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d70:	2300      	movs	r3, #0
 8004d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d74:	2300      	movs	r3, #0
 8004d76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d7c:	4b79      	ldr	r3, [pc, #484]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 030c 	and.w	r3, r3, #12
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d00d      	beq.n	8004da4 <HAL_RCC_GetSysClockFreq+0x40>
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	f200 80e1 	bhi.w	8004f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x34>
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d003      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d96:	e0db      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d98:	4b73      	ldr	r3, [pc, #460]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d9c:	e0db      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d9e:	4b73      	ldr	r3, [pc, #460]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x208>)
 8004da0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004da2:	e0d8      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da4:	4b6f      	ldr	r3, [pc, #444]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004dae:	4b6d      	ldr	r3, [pc, #436]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d063      	beq.n	8004e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dba:	4b6a      	ldr	r3, [pc, #424]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	099b      	lsrs	r3, r3, #6
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dce:	2300      	movs	r3, #0
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	462b      	mov	r3, r5
 8004dda:	f04f 0000 	mov.w	r0, #0
 8004dde:	f04f 0100 	mov.w	r1, #0
 8004de2:	0159      	lsls	r1, r3, #5
 8004de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de8:	0150      	lsls	r0, r2, #5
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4621      	mov	r1, r4
 8004df0:	1a51      	subs	r1, r2, r1
 8004df2:	6139      	str	r1, [r7, #16]
 8004df4:	4629      	mov	r1, r5
 8004df6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e08:	4659      	mov	r1, fp
 8004e0a:	018b      	lsls	r3, r1, #6
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e12:	4651      	mov	r1, sl
 8004e14:	018a      	lsls	r2, r1, #6
 8004e16:	4651      	mov	r1, sl
 8004e18:	ebb2 0801 	subs.w	r8, r2, r1
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e36:	4690      	mov	r8, r2
 8004e38:	4699      	mov	r9, r3
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	eb18 0303 	adds.w	r3, r8, r3
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	462b      	mov	r3, r5
 8004e44:	eb49 0303 	adc.w	r3, r9, r3
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e56:	4629      	mov	r1, r5
 8004e58:	024b      	lsls	r3, r1, #9
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e60:	4621      	mov	r1, r4
 8004e62:	024a      	lsls	r2, r1, #9
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e74:	f7fb fa4c 	bl	8000310 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e80:	e058      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e82:	4b38      	ldr	r3, [pc, #224]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e92:	623b      	str	r3, [r7, #32]
 8004e94:	2300      	movs	r3, #0
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	f04f 0000 	mov.w	r0, #0
 8004ea4:	f04f 0100 	mov.w	r1, #0
 8004ea8:	0159      	lsls	r1, r3, #5
 8004eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eae:	0150      	lsls	r0, r2, #5
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eba:	4649      	mov	r1, r9
 8004ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	00eb      	lsls	r3, r5, #3
 8004ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eea:	00e2      	lsls	r2, r4, #3
 8004eec:	4614      	mov	r4, r2
 8004eee:	461d      	mov	r5, r3
 8004ef0:	4643      	mov	r3, r8
 8004ef2:	18e3      	adds	r3, r4, r3
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	eb45 0303 	adc.w	r3, r5, r3
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	028b      	lsls	r3, r1, #10
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f14:	4621      	mov	r1, r4
 8004f16:	028a      	lsls	r2, r1, #10
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f1e:	2200      	movs	r2, #0
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	61fa      	str	r2, [r7, #28]
 8004f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f28:	f7fb f9f2 	bl	8000310 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4613      	mov	r3, r2
 8004f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f34:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f4e:	e002      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f50:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3750      	adds	r7, #80	@ 0x50
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	007a1200 	.word	0x007a1200

08004f70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f74:	4b03      	ldr	r3, [pc, #12]	@ (8004f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f76:	681b      	ldr	r3, [r3, #0]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000000 	.word	0x20000000

08004f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f8c:	f7ff fff0 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0a9b      	lsrs	r3, r3, #10
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4903      	ldr	r1, [pc, #12]	@ (8004fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	08019e20 	.word	0x08019e20

08004fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fb4:	f7ff ffdc 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	0b5b      	lsrs	r3, r3, #13
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	4903      	ldr	r1, [pc, #12]	@ (8004fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	08019e20 	.word	0x08019e20

08004fd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	220f      	movs	r2, #15
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fe8:	4b12      	ldr	r3, [pc, #72]	@ (8005034 <HAL_RCC_GetClockConfig+0x5c>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0203 	and.w	r2, r3, #3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <HAL_RCC_GetClockConfig+0x5c>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800500c:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <HAL_RCC_GetClockConfig+0x5c>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	08db      	lsrs	r3, r3, #3
 8005012:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800501a:	4b07      	ldr	r3, [pc, #28]	@ (8005038 <HAL_RCC_GetClockConfig+0x60>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	601a      	str	r2, [r3, #0]
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800
 8005038:	40023c00 	.word	0x40023c00

0800503c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d012      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005064:	4b69      	ldr	r3, [pc, #420]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4a68      	ldr	r2, [pc, #416]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800506e:	6093      	str	r3, [r2, #8]
 8005070:	4b66      	ldr	r3, [pc, #408]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005078:	4964      	ldr	r1, [pc, #400]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005086:	2301      	movs	r3, #1
 8005088:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d017      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005096:	4b5d      	ldr	r3, [pc, #372]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800509c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	4959      	ldr	r1, [pc, #356]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b4:	d101      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80050b6:	2301      	movs	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050d2:	4b4e      	ldr	r3, [pc, #312]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	494a      	ldr	r1, [pc, #296]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050f0:	d101      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80050f2:	2301      	movs	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800510e:	2301      	movs	r3, #1
 8005110:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 808b 	beq.w	8005236 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005120:	4b3a      	ldr	r3, [pc, #232]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	4a39      	ldr	r2, [pc, #228]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512a:	6413      	str	r3, [r2, #64]	@ 0x40
 800512c:	4b37      	ldr	r3, [pc, #220]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005138:	4b35      	ldr	r3, [pc, #212]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a34      	ldr	r2, [pc, #208]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800513e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005144:	f7fd f90a 	bl	800235c <HAL_GetTick>
 8005148:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514c:	f7fd f906 	bl	800235c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	@ 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e38f      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800515e:	4b2c      	ldr	r3, [pc, #176]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800516a:	4b28      	ldr	r3, [pc, #160]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005172:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d035      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	d02e      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005188:	4b20      	ldr	r3, [pc, #128]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005190:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005192:	4b1e      	ldr	r3, [pc, #120]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005196:	4a1d      	ldr	r2, [pc, #116]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800519c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800519e:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a2:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051aa:	4a18      	ldr	r2, [pc, #96]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051b0:	4b16      	ldr	r3, [pc, #88]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d114      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051bc:	f7fd f8ce 	bl	800235c <HAL_GetTick>
 80051c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fd f8ca 	bl	800235c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e351      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ee      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f2:	d111      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005200:	4b04      	ldr	r3, [pc, #16]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005202:	400b      	ands	r3, r1
 8005204:	4901      	ldr	r1, [pc, #4]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
 800520a:	e00b      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800520c:	40023800 	.word	0x40023800
 8005210:	40007000 	.word	0x40007000
 8005214:	0ffffcff 	.word	0x0ffffcff
 8005218:	4bac      	ldr	r3, [pc, #688]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	4aab      	ldr	r2, [pc, #684]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005222:	6093      	str	r3, [r2, #8]
 8005224:	4ba9      	ldr	r3, [pc, #676]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005226:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005230:	49a6      	ldr	r1, [pc, #664]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005232:	4313      	orrs	r3, r2
 8005234:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	d010      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005242:	4ba2      	ldr	r3, [pc, #648]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005248:	4aa0      	ldr	r2, [pc, #640]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800524e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005252:	4b9e      	ldr	r3, [pc, #632]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005254:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	499b      	ldr	r1, [pc, #620]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005270:	4b96      	ldr	r3, [pc, #600]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005276:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800527e:	4993      	ldr	r1, [pc, #588]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005292:	4b8e      	ldr	r3, [pc, #568]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005298:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052a0:	498a      	ldr	r1, [pc, #552]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b4:	4b85      	ldr	r3, [pc, #532]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c2:	4982      	ldr	r1, [pc, #520]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052d6:	4b7d      	ldr	r3, [pc, #500]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e4:	4979      	ldr	r1, [pc, #484]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f8:	4b74      	ldr	r3, [pc, #464]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	f023 0203 	bic.w	r2, r3, #3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005306:	4971      	ldr	r1, [pc, #452]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800531a:	4b6c      	ldr	r3, [pc, #432]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005320:	f023 020c 	bic.w	r2, r3, #12
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005328:	4968      	ldr	r1, [pc, #416]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800533c:	4b63      	ldr	r3, [pc, #396]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800534a:	4960      	ldr	r1, [pc, #384]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800535e:	4b5b      	ldr	r3, [pc, #364]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005364:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536c:	4957      	ldr	r1, [pc, #348]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005380:	4b52      	ldr	r3, [pc, #328]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005386:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538e:	494f      	ldr	r1, [pc, #316]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053a2:	4b4a      	ldr	r3, [pc, #296]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b0:	4946      	ldr	r1, [pc, #280]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80053c4:	4b41      	ldr	r3, [pc, #260]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d2:	493e      	ldr	r1, [pc, #248]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053e6:	4b39      	ldr	r3, [pc, #228]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f4:	4935      	ldr	r1, [pc, #212]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005408:	4b30      	ldr	r3, [pc, #192]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005416:	492d      	ldr	r1, [pc, #180]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d011      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800542a:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005438:	4924      	ldr	r1, [pc, #144]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005448:	d101      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800544a:	2301      	movs	r3, #1
 800544c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800545a:	2301      	movs	r3, #1
 800545c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546a:	4b18      	ldr	r3, [pc, #96]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005470:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005478:	4914      	ldr	r1, [pc, #80]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800548c:	4b0f      	ldr	r3, [pc, #60]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005492:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800549c:	490b      	ldr	r1, [pc, #44]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00f      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c0:	4902      	ldr	r1, [pc, #8]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054c8:	e002      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	4986      	ldr	r1, [pc, #536]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005500:	4b81      	ldr	r3, [pc, #516]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005506:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005510:	497d      	ldr	r1, [pc, #500]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d006      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80d6 	beq.w	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800552c:	4b76      	ldr	r3, [pc, #472]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a75      	ldr	r2, [pc, #468]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005532:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005538:	f7fc ff10 	bl	800235c <HAL_GetTick>
 800553c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005540:	f7fc ff0c 	bl	800235c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	@ 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e195      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005552:	4b6d      	ldr	r3, [pc, #436]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d021      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11d      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005572:	4b65      	ldr	r3, [pc, #404]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005580:	4b61      	ldr	r3, [pc, #388]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005586:	0e1b      	lsrs	r3, r3, #24
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	019a      	lsls	r2, r3, #6
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	431a      	orrs	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	071b      	lsls	r3, r3, #28
 80055a6:	4958      	ldr	r1, [pc, #352]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d02e      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055d8:	d129      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055da:	4b4b      	ldr	r3, [pc, #300]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055e8:	4b47      	ldr	r3, [pc, #284]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ee:	0f1b      	lsrs	r3, r3, #28
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	019a      	lsls	r2, r3, #6
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	061b      	lsls	r3, r3, #24
 8005608:	431a      	orrs	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	071b      	lsls	r3, r3, #28
 800560e:	493e      	ldr	r1, [pc, #248]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005616:	4b3c      	ldr	r3, [pc, #240]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800561c:	f023 021f 	bic.w	r2, r3, #31
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	3b01      	subs	r3, #1
 8005626:	4938      	ldr	r1, [pc, #224]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01d      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800563a:	4b33      	ldr	r3, [pc, #204]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800563c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005640:	0e1b      	lsrs	r3, r3, #24
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005648:	4b2f      	ldr	r3, [pc, #188]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800564a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800564e:	0f1b      	lsrs	r3, r3, #28
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	019a      	lsls	r2, r3, #6
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	431a      	orrs	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	431a      	orrs	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	071b      	lsls	r3, r3, #28
 800566e:	4926      	ldr	r1, [pc, #152]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d011      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	019a      	lsls	r2, r3, #6
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	041b      	lsls	r3, r3, #16
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	061b      	lsls	r3, r3, #24
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	071b      	lsls	r3, r3, #28
 800569e:	491a      	ldr	r1, [pc, #104]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056a6:	4b18      	ldr	r3, [pc, #96]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a17      	ldr	r2, [pc, #92]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b2:	f7fc fe53 	bl	800235c <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056ba:	f7fc fe4f 	bl	800235c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b64      	cmp	r3, #100	@ 0x64
 80056c6:	d901      	bls.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e0d8      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	f040 80ce 	bne.w	800587c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80056e0:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a08      	ldr	r2, [pc, #32]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ec:	f7fc fe36 	bl	800235c <HAL_GetTick>
 80056f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056f2:	e00b      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056f4:	f7fc fe32 	bl	800235c <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b64      	cmp	r3, #100	@ 0x64
 8005700:	d904      	bls.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0bb      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005706:	bf00      	nop
 8005708:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800570c:	4b5e      	ldr	r3, [pc, #376]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005718:	d0ec      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005736:	2b00      	cmp	r3, #0
 8005738:	d02e      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d12a      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005742:	4b51      	ldr	r3, [pc, #324]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005750:	4b4d      	ldr	r3, [pc, #308]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	0f1b      	lsrs	r3, r3, #28
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	019a      	lsls	r2, r3, #6
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	071b      	lsls	r3, r3, #28
 8005776:	4944      	ldr	r1, [pc, #272]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800577e:	4b42      	ldr	r3, [pc, #264]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005784:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	493d      	ldr	r1, [pc, #244]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d022      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ac:	d11d      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057ae:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b4:	0e1b      	lsrs	r3, r3, #24
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057bc:	4b32      	ldr	r3, [pc, #200]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c2:	0f1b      	lsrs	r3, r3, #28
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	019a      	lsls	r2, r3, #6
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	431a      	orrs	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	061b      	lsls	r3, r3, #24
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	071b      	lsls	r3, r3, #28
 80057e2:	4929      	ldr	r1, [pc, #164]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d028      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057f6:	4b24      	ldr	r3, [pc, #144]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	0e1b      	lsrs	r3, r3, #24
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005804:	4b20      	ldr	r3, [pc, #128]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580a:	0c1b      	lsrs	r3, r3, #16
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	019a      	lsls	r2, r3, #6
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	431a      	orrs	r2, r3
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	061b      	lsls	r3, r3, #24
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	071b      	lsls	r3, r3, #28
 800582a:	4917      	ldr	r1, [pc, #92]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005832:	4b15      	ldr	r3, [pc, #84]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005838:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	4911      	ldr	r1, [pc, #68]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005848:	4b0f      	ldr	r3, [pc, #60]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a0e      	ldr	r2, [pc, #56]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005854:	f7fc fd82 	bl	800235c <HAL_GetTick>
 8005858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800585a:	e008      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800585c:	f7fc fd7e 	bl	800235c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b64      	cmp	r3, #100	@ 0x64
 8005868:	d901      	bls.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e007      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800586e:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800587a:	d1ef      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800

0800588c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e01c      	b.n	80058d8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	795b      	ldrb	r3, [r3, #5]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fb ff14 	bl	80016dc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0204 	orr.w	r2, r2, #4
 80058c8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	791b      	ldrb	r3, [r3, #4]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_RNG_GenerateRandomNumber+0x1a>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e044      	b.n	8005984 <HAL_RNG_GenerateRandomNumber+0xa4>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	795b      	ldrb	r3, [r3, #5]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b01      	cmp	r3, #1
 8005908:	d133      	bne.n	8005972 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005910:	f7fc fd24 	bl	800235c <HAL_GetTick>
 8005914:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005916:	e018      	b.n	800594a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005918:	f7fc fd20 	bl	800235c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d911      	bls.n	800594a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	d00a      	beq.n	800594a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e01c      	b.n	8005984 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d1df      	bne.n	8005918 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	715a      	strb	r2, [r3, #5]
 8005970:	e004      	b.n	800597c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	711a      	strb	r2, [r3, #4]

  return status;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e09d      	b.n	8005ada <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d108      	bne.n	80059b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059ae:	d009      	beq.n	80059c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	61da      	str	r2, [r3, #28]
 80059b6:	e005      	b.n	80059c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fb ff2c 	bl	800183c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a04:	d902      	bls.n	8005a0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	e002      	b.n	8005a12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a1a:	d007      	beq.n	8005a2c <HAL_SPI_Init+0xa0>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6e:	ea42 0103 	orr.w	r1, r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	0c1b      	lsrs	r3, r3, #16
 8005a88:	f003 0204 	and.w	r2, r3, #4
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005aa8:	ea42 0103 	orr.w	r1, r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ac8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b088      	sub	sp, #32
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005af2:	f7fc fc33 	bl	800235c <HAL_GetTick>
 8005af6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d001      	beq.n	8005b0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e15c      	b.n	8005dc6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_SPI_Transmit+0x36>
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e154      	b.n	8005dc6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_SPI_Transmit+0x48>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e14d      	b.n	8005dc6 <HAL_SPI_Transmit+0x2e4>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b7c:	d10f      	bne.n	8005b9e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba8:	2b40      	cmp	r3, #64	@ 0x40
 8005baa:	d007      	beq.n	8005bbc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bc4:	d952      	bls.n	8005c6c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_SPI_Transmit+0xf2>
 8005bce:	8b7b      	ldrh	r3, [r7, #26]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d145      	bne.n	8005c60 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	881a      	ldrh	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	1c9a      	adds	r2, r3, #2
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bf8:	e032      	b.n	8005c60 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d112      	bne.n	8005c2e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	881a      	ldrh	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	1c9a      	adds	r2, r3, #2
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c2c:	e018      	b.n	8005c60 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2e:	f7fc fb95 	bl	800235c <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d803      	bhi.n	8005c46 <HAL_SPI_Transmit+0x164>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d102      	bne.n	8005c4c <HAL_SPI_Transmit+0x16a>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d109      	bne.n	8005c60 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e0b2      	b.n	8005dc6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1c7      	bne.n	8005bfa <HAL_SPI_Transmit+0x118>
 8005c6a:	e083      	b.n	8005d74 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_SPI_Transmit+0x198>
 8005c74:	8b7b      	ldrh	r3, [r7, #26]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d177      	bne.n	8005d6a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d912      	bls.n	8005caa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	881a      	ldrh	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	1c9a      	adds	r2, r3, #2
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b02      	subs	r3, #2
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ca8:	e05f      	b.n	8005d6a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	7812      	ldrb	r2, [r2, #0]
 8005cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005cd0:	e04b      	b.n	8005d6a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d12b      	bne.n	8005d38 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d912      	bls.n	8005d10 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	881a      	ldrh	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	1c9a      	adds	r2, r3, #2
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b02      	subs	r3, #2
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d0e:	e02c      	b.n	8005d6a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	7812      	ldrb	r2, [r2, #0]
 8005d1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d36:	e018      	b.n	8005d6a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d38:	f7fc fb10 	bl	800235c <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d803      	bhi.n	8005d50 <HAL_SPI_Transmit+0x26e>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d102      	bne.n	8005d56 <HAL_SPI_Transmit+0x274>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e02d      	b.n	8005dc6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ae      	bne.n	8005cd2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f947 	bl	800600c <SPI_EndRxTxTransaction>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005de0:	f7fc fabc 	bl	800235c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	4413      	add	r3, r2
 8005dee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005df0:	f7fc fab4 	bl	800235c <HAL_GetTick>
 8005df4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005df6:	4b39      	ldr	r3, [pc, #228]	@ (8005edc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	015b      	lsls	r3, r3, #5
 8005dfc:	0d1b      	lsrs	r3, r3, #20
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e06:	e055      	b.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d051      	beq.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e10:	f7fc faa4 	bl	800235c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d902      	bls.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d13d      	bne.n	8005ea2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e3e:	d111      	bne.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e48:	d004      	beq.n	8005e54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e52:	d107      	bne.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e6c:	d10f      	bne.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e018      	b.n	8005ed4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	e002      	b.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	bf0c      	ite	eq
 8005ec4:	2301      	moveq	r3, #1
 8005ec6:	2300      	movne	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d19a      	bne.n	8005e08 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20000000 	.word	0x20000000

08005ee0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	@ 0x28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ef2:	f7fc fa33 	bl	800235c <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	4413      	add	r3, r2
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f02:	f7fc fa2b 	bl	800235c <HAL_GetTick>
 8005f06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	330c      	adds	r3, #12
 8005f0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f10:	4b3d      	ldr	r3, [pc, #244]	@ (8006008 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	00da      	lsls	r2, r3, #3
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	0d1b      	lsrs	r3, r3, #20
 8005f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f28:	e061      	b.n	8005fee <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f30:	d107      	bne.n	8005f42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d051      	beq.n	8005fee <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f4a:	f7fc fa07 	bl	800235c <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d902      	bls.n	8005f60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d13d      	bne.n	8005fdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f78:	d111      	bne.n	8005f9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f82:	d004      	beq.n	8005f8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f8c:	d107      	bne.n	8005f9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fa6:	d10f      	bne.n	8005fc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e011      	b.n	8006000 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d102      	bne.n	8005fe8 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe6:	e002      	b.n	8005fee <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d195      	bne.n	8005f2a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3728      	adds	r7, #40	@ 0x28
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20000000 	.word	0x20000000

0800600c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff ff5b 	bl	8005ee0 <SPI_WaitFifoStateUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006034:	f043 0220 	orr.w	r2, r3, #32
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e046      	b.n	80060ce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006040:	4b25      	ldr	r3, [pc, #148]	@ (80060d8 <SPI_EndRxTxTransaction+0xcc>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a25      	ldr	r2, [pc, #148]	@ (80060dc <SPI_EndRxTxTransaction+0xd0>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	0d5b      	lsrs	r3, r3, #21
 800604c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006050:	fb02 f303 	mul.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800605e:	d112      	bne.n	8006086 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	2180      	movs	r1, #128	@ 0x80
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff feb0 	bl	8005dd0 <SPI_WaitFlagStateUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d016      	beq.n	80060a4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800607a:	f043 0220 	orr.w	r2, r3, #32
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e023      	b.n	80060ce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3b01      	subs	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800609c:	2b80      	cmp	r3, #128	@ 0x80
 800609e:	d0f2      	beq.n	8006086 <SPI_EndRxTxTransaction+0x7a>
 80060a0:	e000      	b.n	80060a4 <SPI_EndRxTxTransaction+0x98>
        break;
 80060a2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff ff15 	bl	8005ee0 <SPI_WaitFifoStateUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e000      	b.n	80060ce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000000 	.word	0x20000000
 80060dc:	165e9f81 	.word	0x165e9f81

080060e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e049      	b.n	8006186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f841 	bl	800618e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f000 f9e8 	bl	80064f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e054      	b.n	8006266 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a26      	ldr	r2, [pc, #152]	@ (8006274 <HAL_TIM_Base_Start_IT+0xd0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d022      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d01d      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a22      	ldr	r2, [pc, #136]	@ (8006278 <HAL_TIM_Base_Start_IT+0xd4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d018      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a21      	ldr	r2, [pc, #132]	@ (800627c <HAL_TIM_Base_Start_IT+0xd8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1f      	ldr	r2, [pc, #124]	@ (8006280 <HAL_TIM_Base_Start_IT+0xdc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1e      	ldr	r2, [pc, #120]	@ (8006284 <HAL_TIM_Base_Start_IT+0xe0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1c      	ldr	r2, [pc, #112]	@ (8006288 <HAL_TIM_Base_Start_IT+0xe4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1b      	ldr	r2, [pc, #108]	@ (800628c <HAL_TIM_Base_Start_IT+0xe8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d115      	bne.n	8006250 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <HAL_TIM_Base_Start_IT+0xec>)
 800622c:	4013      	ands	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b06      	cmp	r3, #6
 8006234:	d015      	beq.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623c:	d011      	beq.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0201 	orr.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624e:	e008      	b.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e000      	b.n	8006264 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40010000 	.word	0x40010000
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40010400 	.word	0x40010400
 8006288:	40014000 	.word	0x40014000
 800628c:	40001800 	.word	0x40001800
 8006290:	00010007 	.word	0x00010007

08006294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d020      	beq.n	80062f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01b      	beq.n	80062f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0202 	mvn.w	r2, #2
 80062c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8e9 	bl	80064b6 <HAL_TIM_IC_CaptureCallback>
 80062e4:	e005      	b.n	80062f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f8db 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f8ec 	bl	80064ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d020      	beq.n	8006344 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01b      	beq.n	8006344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0204 	mvn.w	r2, #4
 8006314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f8c3 	bl	80064b6 <HAL_TIM_IC_CaptureCallback>
 8006330:	e005      	b.n	800633e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8b5 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f8c6 	bl	80064ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d020      	beq.n	8006390 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01b      	beq.n	8006390 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0208 	mvn.w	r2, #8
 8006360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2204      	movs	r2, #4
 8006366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f89d 	bl	80064b6 <HAL_TIM_IC_CaptureCallback>
 800637c:	e005      	b.n	800638a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f88f 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f8a0 	bl	80064ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	2b00      	cmp	r3, #0
 8006398:	d020      	beq.n	80063dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01b      	beq.n	80063dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0210 	mvn.w	r2, #16
 80063ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2208      	movs	r2, #8
 80063b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f877 	bl	80064b6 <HAL_TIM_IC_CaptureCallback>
 80063c8:	e005      	b.n	80063d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f869 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f87a 	bl	80064ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00c      	beq.n	8006400 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0201 	mvn.w	r2, #1
 80063f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fb f942 	bl	8001684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00c      	beq.n	800642e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641a:	2b00      	cmp	r3, #0
 800641c:	d007      	beq.n	800642e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f913 	bl	8006654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00c      	beq.n	8006452 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800644a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f90b 	bl	8006668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00c      	beq.n	8006476 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800646e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f834 	bl	80064de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00c      	beq.n	800649a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f06f 0220 	mvn.w	r2, #32
 8006492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f8d3 	bl	8006640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a43      	ldr	r2, [pc, #268]	@ (8006614 <TIM_Base_SetConfig+0x120>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006512:	d00f      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a40      	ldr	r2, [pc, #256]	@ (8006618 <TIM_Base_SetConfig+0x124>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00b      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a3f      	ldr	r2, [pc, #252]	@ (800661c <TIM_Base_SetConfig+0x128>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a3e      	ldr	r2, [pc, #248]	@ (8006620 <TIM_Base_SetConfig+0x12c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a3d      	ldr	r2, [pc, #244]	@ (8006624 <TIM_Base_SetConfig+0x130>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a32      	ldr	r2, [pc, #200]	@ (8006614 <TIM_Base_SetConfig+0x120>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d02b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006554:	d027      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2f      	ldr	r2, [pc, #188]	@ (8006618 <TIM_Base_SetConfig+0x124>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d023      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a2e      	ldr	r2, [pc, #184]	@ (800661c <TIM_Base_SetConfig+0x128>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01f      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2d      	ldr	r2, [pc, #180]	@ (8006620 <TIM_Base_SetConfig+0x12c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2c      	ldr	r2, [pc, #176]	@ (8006624 <TIM_Base_SetConfig+0x130>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d017      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2b      	ldr	r2, [pc, #172]	@ (8006628 <TIM_Base_SetConfig+0x134>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2a      	ldr	r2, [pc, #168]	@ (800662c <TIM_Base_SetConfig+0x138>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00f      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a29      	ldr	r2, [pc, #164]	@ (8006630 <TIM_Base_SetConfig+0x13c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a28      	ldr	r2, [pc, #160]	@ (8006634 <TIM_Base_SetConfig+0x140>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a27      	ldr	r2, [pc, #156]	@ (8006638 <TIM_Base_SetConfig+0x144>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a26      	ldr	r2, [pc, #152]	@ (800663c <TIM_Base_SetConfig+0x148>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d108      	bne.n	80065b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006614 <TIM_Base_SetConfig+0x120>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_Base_SetConfig+0xf2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a10      	ldr	r2, [pc, #64]	@ (8006624 <TIM_Base_SetConfig+0x130>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d103      	bne.n	80065ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f043 0204 	orr.w	r2, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	601a      	str	r2, [r3, #0]
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40010000 	.word	0x40010000
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40000c00 	.word	0x40000c00
 8006624:	40010400 	.word	0x40010400
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800
 8006634:	40001800 	.word	0x40001800
 8006638:	40001c00 	.word	0x40001c00
 800663c:	40002000 	.word	0x40002000

08006640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e040      	b.n	8006710 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fb fb12 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2224      	movs	r2, #36	@ 0x24
 80066a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa8c 	bl	8006be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f825 	bl	8006718 <UART_SetConfig>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e01b      	b.n	8006710 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb0b 	bl	8006d24 <UART_CheckIdleState>
 800670e:	4603      	mov	r3, r0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4ba6      	ldr	r3, [pc, #664]	@ (80069dc <UART_SetConfig+0x2c4>)
 8006744:	4013      	ands	r3, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6812      	ldr	r2, [r2, #0]
 800674a:	6979      	ldr	r1, [r7, #20]
 800674c:	430b      	orrs	r3, r1
 800674e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	430a      	orrs	r2, r1
 8006788:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a94      	ldr	r2, [pc, #592]	@ (80069e0 <UART_SetConfig+0x2c8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d120      	bne.n	80067d6 <UART_SetConfig+0xbe>
 8006794:	4b93      	ldr	r3, [pc, #588]	@ (80069e4 <UART_SetConfig+0x2cc>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d816      	bhi.n	80067d0 <UART_SetConfig+0xb8>
 80067a2:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <UART_SetConfig+0x90>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	080067b9 	.word	0x080067b9
 80067ac:	080067c5 	.word	0x080067c5
 80067b0:	080067bf 	.word	0x080067bf
 80067b4:	080067cb 	.word	0x080067cb
 80067b8:	2301      	movs	r3, #1
 80067ba:	77fb      	strb	r3, [r7, #31]
 80067bc:	e150      	b.n	8006a60 <UART_SetConfig+0x348>
 80067be:	2302      	movs	r3, #2
 80067c0:	77fb      	strb	r3, [r7, #31]
 80067c2:	e14d      	b.n	8006a60 <UART_SetConfig+0x348>
 80067c4:	2304      	movs	r3, #4
 80067c6:	77fb      	strb	r3, [r7, #31]
 80067c8:	e14a      	b.n	8006a60 <UART_SetConfig+0x348>
 80067ca:	2308      	movs	r3, #8
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e147      	b.n	8006a60 <UART_SetConfig+0x348>
 80067d0:	2310      	movs	r3, #16
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e144      	b.n	8006a60 <UART_SetConfig+0x348>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a83      	ldr	r2, [pc, #524]	@ (80069e8 <UART_SetConfig+0x2d0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d132      	bne.n	8006846 <UART_SetConfig+0x12e>
 80067e0:	4b80      	ldr	r3, [pc, #512]	@ (80069e4 <UART_SetConfig+0x2cc>)
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b0c      	cmp	r3, #12
 80067ec:	d828      	bhi.n	8006840 <UART_SetConfig+0x128>
 80067ee:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <UART_SetConfig+0xdc>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006829 	.word	0x08006829
 80067f8:	08006841 	.word	0x08006841
 80067fc:	08006841 	.word	0x08006841
 8006800:	08006841 	.word	0x08006841
 8006804:	08006835 	.word	0x08006835
 8006808:	08006841 	.word	0x08006841
 800680c:	08006841 	.word	0x08006841
 8006810:	08006841 	.word	0x08006841
 8006814:	0800682f 	.word	0x0800682f
 8006818:	08006841 	.word	0x08006841
 800681c:	08006841 	.word	0x08006841
 8006820:	08006841 	.word	0x08006841
 8006824:	0800683b 	.word	0x0800683b
 8006828:	2300      	movs	r3, #0
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e118      	b.n	8006a60 <UART_SetConfig+0x348>
 800682e:	2302      	movs	r3, #2
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e115      	b.n	8006a60 <UART_SetConfig+0x348>
 8006834:	2304      	movs	r3, #4
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e112      	b.n	8006a60 <UART_SetConfig+0x348>
 800683a:	2308      	movs	r3, #8
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e10f      	b.n	8006a60 <UART_SetConfig+0x348>
 8006840:	2310      	movs	r3, #16
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e10c      	b.n	8006a60 <UART_SetConfig+0x348>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a68      	ldr	r2, [pc, #416]	@ (80069ec <UART_SetConfig+0x2d4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d120      	bne.n	8006892 <UART_SetConfig+0x17a>
 8006850:	4b64      	ldr	r3, [pc, #400]	@ (80069e4 <UART_SetConfig+0x2cc>)
 8006852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006856:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800685a:	2b30      	cmp	r3, #48	@ 0x30
 800685c:	d013      	beq.n	8006886 <UART_SetConfig+0x16e>
 800685e:	2b30      	cmp	r3, #48	@ 0x30
 8006860:	d814      	bhi.n	800688c <UART_SetConfig+0x174>
 8006862:	2b20      	cmp	r3, #32
 8006864:	d009      	beq.n	800687a <UART_SetConfig+0x162>
 8006866:	2b20      	cmp	r3, #32
 8006868:	d810      	bhi.n	800688c <UART_SetConfig+0x174>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <UART_SetConfig+0x15c>
 800686e:	2b10      	cmp	r3, #16
 8006870:	d006      	beq.n	8006880 <UART_SetConfig+0x168>
 8006872:	e00b      	b.n	800688c <UART_SetConfig+0x174>
 8006874:	2300      	movs	r3, #0
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e0f2      	b.n	8006a60 <UART_SetConfig+0x348>
 800687a:	2302      	movs	r3, #2
 800687c:	77fb      	strb	r3, [r7, #31]
 800687e:	e0ef      	b.n	8006a60 <UART_SetConfig+0x348>
 8006880:	2304      	movs	r3, #4
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e0ec      	b.n	8006a60 <UART_SetConfig+0x348>
 8006886:	2308      	movs	r3, #8
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e0e9      	b.n	8006a60 <UART_SetConfig+0x348>
 800688c:	2310      	movs	r3, #16
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e0e6      	b.n	8006a60 <UART_SetConfig+0x348>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a56      	ldr	r2, [pc, #344]	@ (80069f0 <UART_SetConfig+0x2d8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d120      	bne.n	80068de <UART_SetConfig+0x1c6>
 800689c:	4b51      	ldr	r3, [pc, #324]	@ (80069e4 <UART_SetConfig+0x2cc>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068a8:	d013      	beq.n	80068d2 <UART_SetConfig+0x1ba>
 80068aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80068ac:	d814      	bhi.n	80068d8 <UART_SetConfig+0x1c0>
 80068ae:	2b80      	cmp	r3, #128	@ 0x80
 80068b0:	d009      	beq.n	80068c6 <UART_SetConfig+0x1ae>
 80068b2:	2b80      	cmp	r3, #128	@ 0x80
 80068b4:	d810      	bhi.n	80068d8 <UART_SetConfig+0x1c0>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <UART_SetConfig+0x1a8>
 80068ba:	2b40      	cmp	r3, #64	@ 0x40
 80068bc:	d006      	beq.n	80068cc <UART_SetConfig+0x1b4>
 80068be:	e00b      	b.n	80068d8 <UART_SetConfig+0x1c0>
 80068c0:	2300      	movs	r3, #0
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e0cc      	b.n	8006a60 <UART_SetConfig+0x348>
 80068c6:	2302      	movs	r3, #2
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e0c9      	b.n	8006a60 <UART_SetConfig+0x348>
 80068cc:	2304      	movs	r3, #4
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e0c6      	b.n	8006a60 <UART_SetConfig+0x348>
 80068d2:	2308      	movs	r3, #8
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	e0c3      	b.n	8006a60 <UART_SetConfig+0x348>
 80068d8:	2310      	movs	r3, #16
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e0c0      	b.n	8006a60 <UART_SetConfig+0x348>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a44      	ldr	r2, [pc, #272]	@ (80069f4 <UART_SetConfig+0x2dc>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d125      	bne.n	8006934 <UART_SetConfig+0x21c>
 80068e8:	4b3e      	ldr	r3, [pc, #248]	@ (80069e4 <UART_SetConfig+0x2cc>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f6:	d017      	beq.n	8006928 <UART_SetConfig+0x210>
 80068f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068fc:	d817      	bhi.n	800692e <UART_SetConfig+0x216>
 80068fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006902:	d00b      	beq.n	800691c <UART_SetConfig+0x204>
 8006904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006908:	d811      	bhi.n	800692e <UART_SetConfig+0x216>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <UART_SetConfig+0x1fe>
 800690e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006912:	d006      	beq.n	8006922 <UART_SetConfig+0x20a>
 8006914:	e00b      	b.n	800692e <UART_SetConfig+0x216>
 8006916:	2300      	movs	r3, #0
 8006918:	77fb      	strb	r3, [r7, #31]
 800691a:	e0a1      	b.n	8006a60 <UART_SetConfig+0x348>
 800691c:	2302      	movs	r3, #2
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	e09e      	b.n	8006a60 <UART_SetConfig+0x348>
 8006922:	2304      	movs	r3, #4
 8006924:	77fb      	strb	r3, [r7, #31]
 8006926:	e09b      	b.n	8006a60 <UART_SetConfig+0x348>
 8006928:	2308      	movs	r3, #8
 800692a:	77fb      	strb	r3, [r7, #31]
 800692c:	e098      	b.n	8006a60 <UART_SetConfig+0x348>
 800692e:	2310      	movs	r3, #16
 8006930:	77fb      	strb	r3, [r7, #31]
 8006932:	e095      	b.n	8006a60 <UART_SetConfig+0x348>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a2f      	ldr	r2, [pc, #188]	@ (80069f8 <UART_SetConfig+0x2e0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d125      	bne.n	800698a <UART_SetConfig+0x272>
 800693e:	4b29      	ldr	r3, [pc, #164]	@ (80069e4 <UART_SetConfig+0x2cc>)
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006944:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006948:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800694c:	d017      	beq.n	800697e <UART_SetConfig+0x266>
 800694e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006952:	d817      	bhi.n	8006984 <UART_SetConfig+0x26c>
 8006954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006958:	d00b      	beq.n	8006972 <UART_SetConfig+0x25a>
 800695a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800695e:	d811      	bhi.n	8006984 <UART_SetConfig+0x26c>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <UART_SetConfig+0x254>
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006968:	d006      	beq.n	8006978 <UART_SetConfig+0x260>
 800696a:	e00b      	b.n	8006984 <UART_SetConfig+0x26c>
 800696c:	2301      	movs	r3, #1
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e076      	b.n	8006a60 <UART_SetConfig+0x348>
 8006972:	2302      	movs	r3, #2
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e073      	b.n	8006a60 <UART_SetConfig+0x348>
 8006978:	2304      	movs	r3, #4
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	e070      	b.n	8006a60 <UART_SetConfig+0x348>
 800697e:	2308      	movs	r3, #8
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e06d      	b.n	8006a60 <UART_SetConfig+0x348>
 8006984:	2310      	movs	r3, #16
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e06a      	b.n	8006a60 <UART_SetConfig+0x348>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1b      	ldr	r2, [pc, #108]	@ (80069fc <UART_SetConfig+0x2e4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d138      	bne.n	8006a06 <UART_SetConfig+0x2ee>
 8006994:	4b13      	ldr	r3, [pc, #76]	@ (80069e4 <UART_SetConfig+0x2cc>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800699e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069a2:	d017      	beq.n	80069d4 <UART_SetConfig+0x2bc>
 80069a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069a8:	d82a      	bhi.n	8006a00 <UART_SetConfig+0x2e8>
 80069aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ae:	d00b      	beq.n	80069c8 <UART_SetConfig+0x2b0>
 80069b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b4:	d824      	bhi.n	8006a00 <UART_SetConfig+0x2e8>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <UART_SetConfig+0x2aa>
 80069ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069be:	d006      	beq.n	80069ce <UART_SetConfig+0x2b6>
 80069c0:	e01e      	b.n	8006a00 <UART_SetConfig+0x2e8>
 80069c2:	2300      	movs	r3, #0
 80069c4:	77fb      	strb	r3, [r7, #31]
 80069c6:	e04b      	b.n	8006a60 <UART_SetConfig+0x348>
 80069c8:	2302      	movs	r3, #2
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e048      	b.n	8006a60 <UART_SetConfig+0x348>
 80069ce:	2304      	movs	r3, #4
 80069d0:	77fb      	strb	r3, [r7, #31]
 80069d2:	e045      	b.n	8006a60 <UART_SetConfig+0x348>
 80069d4:	2308      	movs	r3, #8
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e042      	b.n	8006a60 <UART_SetConfig+0x348>
 80069da:	bf00      	nop
 80069dc:	efff69f3 	.word	0xefff69f3
 80069e0:	40011000 	.word	0x40011000
 80069e4:	40023800 	.word	0x40023800
 80069e8:	40004400 	.word	0x40004400
 80069ec:	40004800 	.word	0x40004800
 80069f0:	40004c00 	.word	0x40004c00
 80069f4:	40005000 	.word	0x40005000
 80069f8:	40011400 	.word	0x40011400
 80069fc:	40007800 	.word	0x40007800
 8006a00:	2310      	movs	r3, #16
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	e02c      	b.n	8006a60 <UART_SetConfig+0x348>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a72      	ldr	r2, [pc, #456]	@ (8006bd4 <UART_SetConfig+0x4bc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d125      	bne.n	8006a5c <UART_SetConfig+0x344>
 8006a10:	4b71      	ldr	r3, [pc, #452]	@ (8006bd8 <UART_SetConfig+0x4c0>)
 8006a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006a1a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a1e:	d017      	beq.n	8006a50 <UART_SetConfig+0x338>
 8006a20:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a24:	d817      	bhi.n	8006a56 <UART_SetConfig+0x33e>
 8006a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2a:	d00b      	beq.n	8006a44 <UART_SetConfig+0x32c>
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a30:	d811      	bhi.n	8006a56 <UART_SetConfig+0x33e>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <UART_SetConfig+0x326>
 8006a36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a3a:	d006      	beq.n	8006a4a <UART_SetConfig+0x332>
 8006a3c:	e00b      	b.n	8006a56 <UART_SetConfig+0x33e>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e00d      	b.n	8006a60 <UART_SetConfig+0x348>
 8006a44:	2302      	movs	r3, #2
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e00a      	b.n	8006a60 <UART_SetConfig+0x348>
 8006a4a:	2304      	movs	r3, #4
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e007      	b.n	8006a60 <UART_SetConfig+0x348>
 8006a50:	2308      	movs	r3, #8
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e004      	b.n	8006a60 <UART_SetConfig+0x348>
 8006a56:	2310      	movs	r3, #16
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e001      	b.n	8006a60 <UART_SetConfig+0x348>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a68:	d15b      	bne.n	8006b22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a6a:	7ffb      	ldrb	r3, [r7, #31]
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d828      	bhi.n	8006ac2 <UART_SetConfig+0x3aa>
 8006a70:	a201      	add	r2, pc, #4	@ (adr r2, 8006a78 <UART_SetConfig+0x360>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006a9d 	.word	0x08006a9d
 8006a7c:	08006aa5 	.word	0x08006aa5
 8006a80:	08006aad 	.word	0x08006aad
 8006a84:	08006ac3 	.word	0x08006ac3
 8006a88:	08006ab3 	.word	0x08006ab3
 8006a8c:	08006ac3 	.word	0x08006ac3
 8006a90:	08006ac3 	.word	0x08006ac3
 8006a94:	08006ac3 	.word	0x08006ac3
 8006a98:	08006abb 	.word	0x08006abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a9c:	f7fe fa74 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8006aa0:	61b8      	str	r0, [r7, #24]
        break;
 8006aa2:	e013      	b.n	8006acc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa4:	f7fe fa84 	bl	8004fb0 <HAL_RCC_GetPCLK2Freq>
 8006aa8:	61b8      	str	r0, [r7, #24]
        break;
 8006aaa:	e00f      	b.n	8006acc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aac:	4b4b      	ldr	r3, [pc, #300]	@ (8006bdc <UART_SetConfig+0x4c4>)
 8006aae:	61bb      	str	r3, [r7, #24]
        break;
 8006ab0:	e00c      	b.n	8006acc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab2:	f7fe f957 	bl	8004d64 <HAL_RCC_GetSysClockFreq>
 8006ab6:	61b8      	str	r0, [r7, #24]
        break;
 8006ab8:	e008      	b.n	8006acc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006abe:	61bb      	str	r3, [r7, #24]
        break;
 8006ac0:	e004      	b.n	8006acc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	77bb      	strb	r3, [r7, #30]
        break;
 8006aca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d074      	beq.n	8006bbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	005a      	lsls	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	441a      	add	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b0f      	cmp	r3, #15
 8006aec:	d916      	bls.n	8006b1c <UART_SetConfig+0x404>
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af4:	d212      	bcs.n	8006b1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f023 030f 	bic.w	r3, r3, #15
 8006afe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	89fb      	ldrh	r3, [r7, #14]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	89fa      	ldrh	r2, [r7, #14]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	e04f      	b.n	8006bbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	77bb      	strb	r3, [r7, #30]
 8006b20:	e04c      	b.n	8006bbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b22:	7ffb      	ldrb	r3, [r7, #31]
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d828      	bhi.n	8006b7a <UART_SetConfig+0x462>
 8006b28:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <UART_SetConfig+0x418>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	08006b7b 	.word	0x08006b7b
 8006b40:	08006b6b 	.word	0x08006b6b
 8006b44:	08006b7b 	.word	0x08006b7b
 8006b48:	08006b7b 	.word	0x08006b7b
 8006b4c:	08006b7b 	.word	0x08006b7b
 8006b50:	08006b73 	.word	0x08006b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b54:	f7fe fa18 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8006b58:	61b8      	str	r0, [r7, #24]
        break;
 8006b5a:	e013      	b.n	8006b84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b5c:	f7fe fa28 	bl	8004fb0 <HAL_RCC_GetPCLK2Freq>
 8006b60:	61b8      	str	r0, [r7, #24]
        break;
 8006b62:	e00f      	b.n	8006b84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b64:	4b1d      	ldr	r3, [pc, #116]	@ (8006bdc <UART_SetConfig+0x4c4>)
 8006b66:	61bb      	str	r3, [r7, #24]
        break;
 8006b68:	e00c      	b.n	8006b84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6a:	f7fe f8fb 	bl	8004d64 <HAL_RCC_GetSysClockFreq>
 8006b6e:	61b8      	str	r0, [r7, #24]
        break;
 8006b70:	e008      	b.n	8006b84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b76:	61bb      	str	r3, [r7, #24]
        break;
 8006b78:	e004      	b.n	8006b84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	77bb      	strb	r3, [r7, #30]
        break;
 8006b82:	bf00      	nop
    }

    if (pclk != 0U)
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d018      	beq.n	8006bbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	085a      	lsrs	r2, r3, #1
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	441a      	add	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b0f      	cmp	r3, #15
 8006ba2:	d909      	bls.n	8006bb8 <UART_SetConfig+0x4a0>
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006baa:	d205      	bcs.n	8006bb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60da      	str	r2, [r3, #12]
 8006bb6:	e001      	b.n	8006bbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006bc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40007c00 	.word	0x40007c00
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	00f42400 	.word	0x00f42400

08006be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cde:	d10a      	bne.n	8006cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	605a      	str	r2, [r3, #4]
  }
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b098      	sub	sp, #96	@ 0x60
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d34:	f7fb fb12 	bl	800235c <HAL_GetTick>
 8006d38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d12e      	bne.n	8006da6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d50:	2200      	movs	r2, #0
 8006d52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f88c 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d021      	beq.n	8006da6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e062      	b.n	8006e6c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d149      	bne.n	8006e48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f856 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d03c      	beq.n	8006e48 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	623b      	str	r3, [r7, #32]
   return(result);
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e20:	61fa      	str	r2, [r7, #28]
 8006e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	69b9      	ldr	r1, [r7, #24]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e011      	b.n	8006e6c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3758      	adds	r7, #88	@ 0x58
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	4613      	mov	r3, r2
 8006e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e84:	e04f      	b.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d04b      	beq.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8e:	f7fb fa65 	bl	800235c <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d302      	bcc.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e04e      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d037      	beq.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b80      	cmp	r3, #128	@ 0x80
 8006eba:	d034      	beq.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b40      	cmp	r3, #64	@ 0x40
 8006ec0:	d031      	beq.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d110      	bne.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f838 	bl	8006f4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e029      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f00:	d111      	bne.n	8006f26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f81e 	bl	8006f4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e00f      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	bf0c      	ite	eq
 8006f36:	2301      	moveq	r3, #1
 8006f38:	2300      	movne	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d0a0      	beq.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b095      	sub	sp, #84	@ 0x54
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e6      	bne.n	8006f56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e5      	bne.n	8006f88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d118      	bne.n	8006ff6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f023 0310 	bic.w	r3, r3, #16
 8006fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6979      	ldr	r1, [r7, #20]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e6      	bne.n	8006fc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800700a:	bf00      	nop
 800700c:	3754      	adds	r7, #84	@ 0x54
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007018:	b084      	sub	sp, #16
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	f107 001c 	add.w	r0, r7, #28
 8007026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800702a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800702e:	2b01      	cmp	r3, #1
 8007030:	d121      	bne.n	8007076 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	4b21      	ldr	r3, [pc, #132]	@ (80070c8 <USB_CoreInit+0xb0>)
 8007044:	4013      	ands	r3, r2
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007056:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa92 	bl	8007594 <USB_CoreReset>
 8007070:	4603      	mov	r3, r0
 8007072:	73fb      	strb	r3, [r7, #15]
 8007074:	e010      	b.n	8007098 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa86 	bl	8007594 <USB_CoreReset>
 8007088:	4603      	mov	r3, r0
 800708a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007090:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007098:	7fbb      	ldrb	r3, [r7, #30]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d10b      	bne.n	80070b6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f043 0206 	orr.w	r2, r3, #6
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070c2:	b004      	add	sp, #16
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	ffbdffbf 	.word	0xffbdffbf

080070cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f023 0201 	bic.w	r2, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d115      	bne.n	800713c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800711c:	200a      	movs	r0, #10
 800711e:	f7fb f929 	bl	8002374 <HAL_Delay>
      ms += 10U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	330a      	adds	r3, #10
 8007126:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fa25 	bl	8007578 <USB_GetMode>
 800712e:	4603      	mov	r3, r0
 8007130:	2b01      	cmp	r3, #1
 8007132:	d01e      	beq.n	8007172 <USB_SetCurrentMode+0x84>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2bc7      	cmp	r3, #199	@ 0xc7
 8007138:	d9f0      	bls.n	800711c <USB_SetCurrentMode+0x2e>
 800713a:	e01a      	b.n	8007172 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d115      	bne.n	800716e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800714e:	200a      	movs	r0, #10
 8007150:	f7fb f910 	bl	8002374 <HAL_Delay>
      ms += 10U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	330a      	adds	r3, #10
 8007158:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa0c 	bl	8007578 <USB_GetMode>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <USB_SetCurrentMode+0x84>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2bc7      	cmp	r3, #199	@ 0xc7
 800716a:	d9f0      	bls.n	800714e <USB_SetCurrentMode+0x60>
 800716c:	e001      	b.n	8007172 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e005      	b.n	800717e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2bc8      	cmp	r3, #200	@ 0xc8
 8007176:	d101      	bne.n	800717c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e000      	b.n	800717e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007188:	b084      	sub	sp, #16
 800718a:	b580      	push	{r7, lr}
 800718c:	b086      	sub	sp, #24
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071a2:	2300      	movs	r3, #0
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	e009      	b.n	80071bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3340      	adds	r3, #64	@ 0x40
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	3301      	adds	r3, #1
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b0e      	cmp	r3, #14
 80071c0:	d9f2      	bls.n	80071a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d11c      	bne.n	8007204 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d8:	f043 0302 	orr.w	r3, r3, #2
 80071dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e005      	b.n	8007210 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007208:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007216:	461a      	mov	r2, r3
 8007218:	2300      	movs	r3, #0
 800721a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800721c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10d      	bne.n	8007240 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f968 	bl	8007504 <USB_SetDevSpeed>
 8007234:	e008      	b.n	8007248 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007236:	2101      	movs	r1, #1
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f963 	bl	8007504 <USB_SetDevSpeed>
 800723e:	e003      	b.n	8007248 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007240:	2103      	movs	r1, #3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f95e 	bl	8007504 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007248:	2110      	movs	r1, #16
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f8fa 	bl	8007444 <USB_FlushTxFifo>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f924 	bl	80074a8 <USB_FlushRxFifo>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007270:	461a      	mov	r2, r3
 8007272:	2300      	movs	r3, #0
 8007274:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800727c:	461a      	mov	r2, r3
 800727e:	2300      	movs	r3, #0
 8007280:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800728e:	2300      	movs	r3, #0
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	e043      	b.n	800731c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072aa:	d118      	bne.n	80072de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072be:	461a      	mov	r2, r3
 80072c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	e013      	b.n	80072f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d4:	461a      	mov	r2, r3
 80072d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	e008      	b.n	80072f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ea:	461a      	mov	r2, r3
 80072ec:	2300      	movs	r3, #0
 80072ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fc:	461a      	mov	r2, r3
 80072fe:	2300      	movs	r3, #0
 8007300:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730e:	461a      	mov	r2, r3
 8007310:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007314:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3301      	adds	r3, #1
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007320:	461a      	mov	r2, r3
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	4293      	cmp	r3, r2
 8007326:	d3b5      	bcc.n	8007294 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	e043      	b.n	80073b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007344:	d118      	bne.n	8007378 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007358:	461a      	mov	r2, r3
 800735a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	e013      	b.n	800738a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800736e:	461a      	mov	r2, r3
 8007370:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e008      	b.n	800738a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007384:	461a      	mov	r2, r3
 8007386:	2300      	movs	r3, #0
 8007388:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007396:	461a      	mov	r2, r3
 8007398:	2300      	movs	r3, #0
 800739a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a8:	461a      	mov	r2, r3
 80073aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	3301      	adds	r3, #1
 80073b4:	613b      	str	r3, [r7, #16]
 80073b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073ba:	461a      	mov	r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4293      	cmp	r3, r2
 80073c0:	d3b5      	bcc.n	800732e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d105      	bne.n	80073f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f043 0210 	orr.w	r2, r3, #16
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699a      	ldr	r2, [r3, #24]
 80073fc:	4b0f      	ldr	r3, [pc, #60]	@ (800743c <USB_DevInit+0x2b4>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007404:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f043 0208 	orr.w	r2, r3, #8
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007418:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800741c:	2b01      	cmp	r3, #1
 800741e:	d105      	bne.n	800742c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699a      	ldr	r2, [r3, #24]
 8007424:	4b06      	ldr	r3, [pc, #24]	@ (8007440 <USB_DevInit+0x2b8>)
 8007426:	4313      	orrs	r3, r2
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007438:	b004      	add	sp, #16
 800743a:	4770      	bx	lr
 800743c:	803c3800 	.word	0x803c3800
 8007440:	40000004 	.word	0x40000004

08007444 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3301      	adds	r3, #1
 8007456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800745e:	d901      	bls.n	8007464 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e01b      	b.n	800749c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	daf2      	bge.n	8007452 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	019b      	lsls	r3, r3, #6
 8007474:	f043 0220 	orr.w	r2, r3, #32
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007488:	d901      	bls.n	800748e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e006      	b.n	800749c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b20      	cmp	r3, #32
 8007498:	d0f0      	beq.n	800747c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074c0:	d901      	bls.n	80074c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e018      	b.n	80074f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	daf2      	bge.n	80074b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2210      	movs	r2, #16
 80074d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074e4:	d901      	bls.n	80074ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e006      	b.n	80074f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2b10      	cmp	r3, #16
 80074f4:	d0f0      	beq.n	80074d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007524:	4313      	orrs	r3, r2
 8007526:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007550:	f023 0303 	bic.w	r3, r3, #3
 8007554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007564:	f043 0302 	orr.w	r3, r3, #2
 8007568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	f003 0301 	and.w	r3, r3, #1
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075ac:	d901      	bls.n	80075b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e022      	b.n	80075f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	daf2      	bge.n	80075a0 <USB_CoreReset+0xc>

  count = 10U;
 80075ba:	230a      	movs	r3, #10
 80075bc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80075be:	e002      	b.n	80075c6 <USB_CoreReset+0x32>
  {
    count--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1f9      	bne.n	80075c0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f043 0201 	orr.w	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e4:	d901      	bls.n	80075ea <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e006      	b.n	80075f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d0f0      	beq.n	80075d8 <USB_CoreReset+0x44>

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007604:	b580      	push	{r7, lr}
 8007606:	b090      	sub	sp, #64	@ 0x40
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007610:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8007612:	2300      	movs	r3, #0
 8007614:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 800761e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007620:	330e      	adds	r3, #14
 8007622:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b01      	cmp	r3, #1
 800762c:	f040 8109 	bne.w	8007842 <eARPProcessPacket+0x23e>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	885b      	ldrh	r3, [r3, #2]
 8007634:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8007636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800763a:	f040 8102 	bne.w	8007842 <eARPProcessPacket+0x23e>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8007642:	2b06      	cmp	r3, #6
 8007644:	f040 80fd 	bne.w	8007842 <eARPProcessPacket+0x23e>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 800764c:	2b04      	cmp	r3, #4
 800764e:	f040 80f8 	bne.w	8007842 <eARPProcessPacket+0x23e>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8007652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007654:	330e      	adds	r3, #14
 8007656:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8007658:	f107 031c 	add.w	r3, r7, #28
 800765c:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007666:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 800766e:	4b78      	ldr	r3, [pc, #480]	@ (8007850 <eARPProcessPacket+0x24c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 8007676:	4977      	ldr	r1, [pc, #476]	@ (8007854 <eARPProcessPacket+0x250>)
 8007678:	4877      	ldr	r0, [pc, #476]	@ (8007858 <eARPProcessPacket+0x254>)
 800767a:	f00f fab3 	bl	8016be4 <xTaskCheckForTimeOut>
 800767e:	4603      	mov	r3, r0
 8007680:	2b01      	cmp	r3, #1
 8007682:	d102      	bne.n	800768a <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 8007684:	4b72      	ldr	r3, [pc, #456]	@ (8007850 <eARPProcessPacket+0x24c>)
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	7a1b      	ldrb	r3, [r3, #8]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	f040 80d5 	bne.w	8007842 <eARPProcessPacket+0x23e>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800769e:	d303      	bcc.n	80076a8 <eARPProcessPacket+0xa4>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 80076a0:	69fb      	ldr	r3, [r7, #28]
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f280 80cd 	bge.w	8007842 <eARPProcessPacket+0x23e>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 80076a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d03a      	beq.n	8007724 <eARPProcessPacket+0x120>
 80076ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d135      	bne.n	8007724 <eARPProcessPacket+0x120>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 80076b8:	4b65      	ldr	r3, [pc, #404]	@ (8007850 <eARPProcessPacket+0x24c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d116      	bne.n	80076ee <eARPProcessPacket+0xea>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 80076c0:	4b63      	ldr	r3, [pc, #396]	@ (8007850 <eARPProcessPacket+0x24c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	4a62      	ldr	r2, [pc, #392]	@ (8007850 <eARPProcessPacket+0x24c>)
 80076c8:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80076d2:	f000 fd03 	bl	80080dc <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 80076d6:	f00e ffab 	bl	8016630 <xTaskGetTickCount>
 80076da:	4603      	mov	r3, r0
 80076dc:	4a5f      	ldr	r2, [pc, #380]	@ (800785c <eARPProcessPacket+0x258>)
 80076de:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 80076e0:	485d      	ldr	r0, [pc, #372]	@ (8007858 <eARPProcessPacket+0x254>)
 80076e2:	f00f fa3f 	bl	8016b64 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 80076e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007854 <eARPProcessPacket+0x250>)
 80076e8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80076ec:	601a      	str	r2, [r3, #0]
                }

                /* Process received ARP frame to see if there is a clash. */
                #if ( ipconfigARP_USE_CLASH_DETECTION != 0 )
                {
                    NetworkEndPoint_t * pxSourceEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulSenderProtocolAddress );
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f004 fdd7 	bl	800c2a4 <FreeRTOS_FindEndPointOnIP_IPv4>
 80076f6:	6238      	str	r0, [r7, #32]

                    if( ( pxSourceEndPoint != NULL ) && ( pxSourceEndPoint->ipv4_settings.ulIPAddress == ulSenderProtocolAddress ) )
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 809e 	beq.w	800783c <eARPProcessPacket+0x238>
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	429a      	cmp	r2, r3
 8007708:	f040 8098 	bne.w	800783c <eARPProcessPacket+0x238>
                    {
                        xARPHadIPClash = pdTRUE;
 800770c:	4b54      	ldr	r3, [pc, #336]	@ (8007860 <eARPProcessPacket+0x25c>)
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
                        /* Remember the MAC-address of the other device which has the same IP-address. */
                        ( void ) memcpy( xARPClashMacAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( xARPClashMacAddress.ucBytes ) );
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	f103 0208 	add.w	r2, r3, #8
 8007718:	4b52      	ldr	r3, [pc, #328]	@ (8007864 <eARPProcessPacket+0x260>)
 800771a:	6810      	ldr	r0, [r2, #0]
 800771c:	6018      	str	r0, [r3, #0]
 800771e:	8892      	ldrh	r2, [r2, #4]
 8007720:	809a      	strh	r2, [r3, #4]
                {
 8007722:	e08b      	b.n	800783c <eARPProcessPacket+0x238>
            {
                iptraceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8007724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007726:	88db      	ldrh	r3, [r3, #6]
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8007728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b01      	cmp	r3, #1
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8007730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8085 	beq.w	8007842 <eARPProcessPacket+0x23e>
 8007738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d07c      	beq.n	8007842 <eARPProcessPacket+0x23e>
                {
                    switch( pxARPHeader->usOperation )
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	88db      	ldrh	r3, [r3, #6]
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d002      	beq.n	8007758 <eARPProcessPacket+0x154>
 8007752:	2b02      	cmp	r3, #2
 8007754:	d06b      	beq.n	800782e <eARPProcessPacket+0x22a>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8007756:	e074      	b.n	8007842 <eARPProcessPacket+0x23e>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8007758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800775e:	429a      	cmp	r2, r3
 8007760:	d115      	bne.n	800778e <eARPProcessPacket+0x18a>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8007762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007764:	f103 0038 	add.w	r0, r3, #56	@ 0x38
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 800776c:	2206      	movs	r2, #6
 800776e:	4619      	mov	r1, r3
 8007770:	f011 f9ce 	bl	8018b10 <memcmp>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d062      	beq.n	8007840 <eARPProcessPacket+0x23c>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	461a      	mov	r2, r3
 800777e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007780:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007782:	f000 f875 	bl	8007870 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8007786:	2302      	movs	r3, #2
 8007788:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 800778c:	e058      	b.n	8007840 <eARPProcessPacket+0x23c>
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007792:	429a      	cmp	r2, r3
 8007794:	d154      	bne.n	8007840 <eARPProcessPacket+0x23c>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8007796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	405a      	eors	r2, r3
 800779e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d14b      	bne.n	8007840 <eARPProcessPacket+0x23c>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 80077a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007868 <eARPProcessPacket+0x264>)
 80077aa:	f107 0314 	add.w	r3, r7, #20
 80077ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077b2:	6018      	str	r0, [r3, #0]
 80077b4:	3304      	adds	r3, #4
 80077b6:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80077b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ba:	3312      	adds	r3, #18
 80077bc:	2206      	movs	r2, #6
 80077be:	492b      	ldr	r1, [pc, #172]	@ (800786c <eARPProcessPacket+0x268>)
 80077c0:	4618      	mov	r0, r3
 80077c2:	f011 f9a5 	bl	8018b10 <memcmp>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <eARPProcessPacket+0x1de>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80077cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ce:	3312      	adds	r3, #18
 80077d0:	f107 0114 	add.w	r1, r7, #20
 80077d4:	2206      	movs	r2, #6
 80077d6:	4618      	mov	r0, r3
 80077d8:	f011 f99a 	bl	8018b10 <memcmp>
 80077dc:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d12e      	bne.n	8007840 <eARPProcessPacket+0x23c>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 80077e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	3308      	adds	r3, #8
 80077ec:	2206      	movs	r2, #6
 80077ee:	4619      	mov	r1, r3
 80077f0:	f011 f98e 	bl	8018b10 <memcmp>
 80077f4:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d022      	beq.n	8007840 <eARPProcessPacket+0x23c>
                                    pxCachedEndPoint = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eResolutionCacheHit )
 80077fe:	f107 0208 	add.w	r2, r7, #8
 8007802:	f107 010c 	add.w	r1, r7, #12
 8007806:	f107 031c 	add.w	r3, r7, #28
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fa8e 	bl	8007d2c <eARPGetCacheEntry>
 8007810:	4603      	mov	r3, r0
 8007812:	2b01      	cmp	r3, #1
 8007814:	d114      	bne.n	8007840 <eARPProcessPacket+0x23c>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800781a:	429a      	cmp	r2, r3
 800781c:	d110      	bne.n	8007840 <eARPProcessPacket+0x23c>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	3308      	adds	r3, #8
 8007822:	69f9      	ldr	r1, [r7, #28]
 8007824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f96e 	bl	8007b08 <vARPRefreshCacheEntry>
                            break;
 800782c:	e008      	b.n	8007840 <eARPProcessPacket+0x23c>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	461a      	mov	r2, r3
 8007832:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007834:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007836:	f000 f859 	bl	80078ec <vARPProcessPacketReply>
                            break;
 800783a:	e002      	b.n	8007842 <eARPProcessPacket+0x23e>
                {
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <eARPProcessPacket+0x23e>
                            break;
 8007840:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8007842:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8007846:	4618      	mov	r0, r3
 8007848:	3740      	adds	r7, #64	@ 0x40
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20001038 	.word	0x20001038
 8007854:	2000000c 	.word	0x2000000c
 8007858:	2000103c 	.word	0x2000103c
 800785c:	20001034 	.word	0x20001034
 8007860:	20001028 	.word	0x20001028
 8007864:	2000102c 	.word	0x2000102c
 8007868:	08019cf0 	.word	0x08019cf0
 800786c:	08019ea8 	.word	0x08019ea8

08007870 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	330e      	adds	r3, #14
 8007880:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	3308      	adds	r3, #8
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f93c 	bl	8007b08 <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2200      	movs	r2, #0
 8007894:	f042 0202 	orr.w	r2, r2, #2
 8007898:	719a      	strb	r2, [r3, #6]
 800789a:	2200      	movs	r2, #0
 800789c:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3308      	adds	r3, #8
 80078a2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	3312      	adds	r3, #18
 80078a8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80078aa:	2206      	movs	r2, #6
 80078ac:	69b9      	ldr	r1, [r7, #24]
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f011 fa33 	bl	8018d1a <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	3338      	adds	r3, #56	@ 0x38
 80078be:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	3308      	adds	r3, #8
 80078c4:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80078c6:	2206      	movs	r2, #6
 80078c8:	69b9      	ldr	r1, [r7, #24]
 80078ca:	6978      	ldr	r0, [r7, #20]
 80078cc:	f011 fa25 	bl	8018d1a <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	330e      	adds	r3, #14
 80078d8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	601a      	str	r2, [r3, #0]
    }
 80078e4:	bf00      	nop
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08c      	sub	sp, #48	@ 0x30
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	330e      	adds	r3, #14
 80078fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80078fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800790a:	429a      	cmp	r2, r3
 800790c:	d005      	beq.n	800791a <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f844 	bl	800799c <xIsIPInARPCache>
 8007914:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007916:	2b01      	cmp	r3, #1
 8007918:	d106      	bne.n	8007928 <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 800791a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791c:	3308      	adds	r3, #8
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4618      	mov	r0, r3
 8007924:	f000 f8f0 	bl	8007b08 <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8007928:	4b1b      	ldr	r3, [pc, #108]	@ (8007998 <vARPProcessPacketReply+0xac>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02e      	beq.n	800798e <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8007930:	4b19      	ldr	r3, [pc, #100]	@ (8007998 <vARPProcessPacketReply+0xac>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f003 fa95 	bl	800ae64 <uxIPHeaderSizePacket>
 800793a:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800793c:	2b14      	cmp	r3, #20
 800793e:	d126      	bne.n	800798e <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8007940:	4b15      	ldr	r3, [pc, #84]	@ (8007998 <vARPProcessPacketReply+0xac>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	330e      	adds	r3, #14
 800794c:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	429a      	cmp	r2, r3
 8007956:	d11a      	bne.n	800798e <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 8007958:	2300      	movs	r3, #0
 800795a:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 800795c:	2301      	movs	r3, #1
 800795e:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8007960:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <vARPProcessPacketReply+0xac>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 8007966:	f107 0314 	add.w	r3, r7, #20
 800796a:	69f9      	ldr	r1, [r7, #28]
 800796c:	4618      	mov	r0, r3
 800796e:	f002 fec9 	bl	800a704 <xSendEventStructToIPTask>
 8007972:	4603      	mov	r3, r0
 8007974:	2b01      	cmp	r3, #1
 8007976:	d004      	beq.n	8007982 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8007978:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <vARPProcessPacketReply+0xac>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f00b f8b5 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8007982:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <vARPProcessPacketReply+0xac>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 8007988:	2000      	movs	r0, #0
 800798a:	f003 fce1 	bl	800b350 <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 800798e:	bf00      	nop
 8007990:	3730      	adds	r7, #48	@ 0x30
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	200012bc 	.word	0x200012bc

0800799c <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
    BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
    {
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
        BaseType_t x, xReturn = pdFALSE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60bb      	str	r3, [r7, #8]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e017      	b.n	80079de <xIsIPInARPCache+0x42>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80079ae:	4a12      	ldr	r2, [pc, #72]	@ (80079f8 <xIsIPInARPCache+0x5c>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	4413      	add	r3, r2
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d10c      	bne.n	80079d8 <xIsIPInARPCache+0x3c>
            {
                xReturn = pdTRUE;
 80079be:	2301      	movs	r3, #1
 80079c0:	60bb      	str	r3, [r7, #8]

                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80079c2:	4a0d      	ldr	r2, [pc, #52]	@ (80079f8 <xIsIPInARPCache+0x5c>)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	4413      	add	r3, r2
 80079ca:	330b      	adds	r3, #11
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <xIsIPInARPCache+0x4a>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    xReturn = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
                }

                break;
 80079d6:	e006      	b.n	80079e6 <xIsIPInARPCache+0x4a>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b09      	cmp	r3, #9
 80079e2:	dde4      	ble.n	80079ae <xIsIPInARPCache+0x12>
 80079e4:	e000      	b.n	80079e8 <xIsIPInARPCache+0x4c>
                break;
 80079e6:	bf00      	nop
            }
        }

        return xReturn;
 80079e8:	68bb      	ldr	r3, [r7, #8]
    }
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	20000f88 	.word	0x20000f88

080079fc <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
    BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
        BaseType_t xNeedsARPResolution = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0c:	61bb      	str	r3, [r7, #24]
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	330e      	adds	r3, #14
 8007a12:	617b      	str	r3, [r7, #20]
        const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a18:	613b      	str	r3, [r7, #16]

        configASSERT( ( pxIPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) || ( pxIPPacket->xEthernetHeader.usFrameType == ipARP_FRAME_TYPE ) );
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	899b      	ldrh	r3, [r3, #12]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a24:	d006      	beq.n	8007a34 <xCheckRequiresARPResolution+0x38>
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	899b      	ldrh	r3, [r3, #12]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f640 0206 	movw	r2, #2054	@ 0x806
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d101      	bne.n	8007a38 <xCheckRequiresARPResolution+0x3c>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <xCheckRequiresARPResolution+0x3e>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10d      	bne.n	8007a5a <xCheckRequiresARPResolution+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	b672      	cpsid	i
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	b662      	cpsie	i
 8007a52:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <xCheckRequiresARPResolution+0x5a>

        if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	405a      	eors	r2, r3
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d111      	bne.n	8007a92 <xCheckRequiresARPResolution+0x96>
        {
            /* If the IP is on the same subnet and we do not have an ARP entry already,
             * then we should send out ARP for finding the MAC address. */
            if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff ff92 	bl	800799c <xIsIPInARPCache>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <xCheckRequiresARPResolution+0x96>
            {
                FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f000 fb27 	bl	80080dc <FreeRTOS_OutputARPRequest_Multi>

                /* This packet needs resolution since this is on the same subnet
                 * but not in the ARP cache. */
                xNeedsARPResolution = pdTRUE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
            }
        }

        return xNeedsARPResolution;
 8007a92:	69fb      	ldr	r3, [r7, #28]
    }
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
    void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                                   const uint32_t ulIPAddress )
    {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
        BaseType_t x;

        if( pxMACAddress != NULL )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d026      	beq.n	8007afa <vARPRefreshCacheEntryAge+0x5e>
        {
            /* Loop through each entry in the ARP cache. */
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	e020      	b.n	8007af4 <vARPRefreshCacheEntryAge+0x58>
            {
                /* Does this line in the cache table hold an entry for the IP
                 * address being queried? */
                if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007ab2:	4a14      	ldr	r2, [pc, #80]	@ (8007b04 <vARPRefreshCacheEntryAge+0x68>)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	4413      	add	r3, r2
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d115      	bne.n	8007aee <vARPRefreshCacheEntryAge+0x52>
                {
                    /* Does this cache entry have the same MAC address? */
                    if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8007b04 <vARPRefreshCacheEntryAge+0x68>)
 8007ac8:	4413      	add	r3, r2
 8007aca:	3304      	adds	r3, #4
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	2206      	movs	r2, #6
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f011 f81d 	bl	8018b10 <memcmp>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d108      	bne.n	8007aee <vARPRefreshCacheEntryAge+0x52>
                    {
                        /* The IP address and the MAC matched, update this entry age. */
                        xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007adc:	4a09      	ldr	r2, [pc, #36]	@ (8007b04 <vARPRefreshCacheEntryAge+0x68>)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	011b      	lsls	r3, r3, #4
 8007ae2:	4413      	add	r3, r2
 8007ae4:	330a      	adds	r3, #10
 8007ae6:	2296      	movs	r2, #150	@ 0x96
 8007ae8:	701a      	strb	r2, [r3, #0]
                        break;
 8007aea:	bf00      	nop
                    }
                }
            }
        }
    }
 8007aec:	e005      	b.n	8007afa <vARPRefreshCacheEntryAge+0x5e>
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	dddb      	ble.n	8007ab2 <vARPRefreshCacheEntryAge+0x16>
    }
 8007afa:	bf00      	nop
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000f88 	.word	0x20000f88

08007b08 <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
    void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                                const uint32_t ulIPAddress,
                                struct xNetworkEndPoint * pxEndPoint )
    {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
        #endif
        {
            CacheLocation_t xLocation;
            BaseType_t xReady;

            xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8007b14:	f107 0310 	add.w	r3, r7, #16
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f85b 	bl	8007bd8 <prvFindCacheEntry>
 8007b22:	61f8      	str	r0, [r7, #28]

            if( xReady == pdFALSE )
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d150      	bne.n	8007bcc <vARPRefreshCacheEntry+0xc4>
            {
                if( xLocation.xMacEntry >= 0 )
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	db0e      	blt.n	8007b4e <vARPRefreshCacheEntry+0x46>
                {
                    xLocation.xUseEntry = xLocation.xMacEntry;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	61bb      	str	r3, [r7, #24]

                    if( xLocation.xIpEntry >= 0 )
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	db0e      	blt.n	8007b58 <vARPRefreshCacheEntry+0x50>
                    {
                        /* Both the MAC address as well as the IP address were found in
                         * different locations: clear the entry which matches the
                         * IP-address */
                        ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	4a25      	ldr	r2, [pc, #148]	@ (8007bd4 <vARPRefreshCacheEntry+0xcc>)
 8007b40:	4413      	add	r3, r2
 8007b42:	2210      	movs	r2, #16
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f011 f80c 	bl	8018b64 <memset>
 8007b4c:	e004      	b.n	8007b58 <vARPRefreshCacheEntry+0x50>
                    }
                }
                else if( xLocation.xIpEntry >= 0 )
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	db01      	blt.n	8007b58 <vARPRefreshCacheEntry+0x50>
                {
                    /* An entry containing the IP-address was found, but it had a different MAC address */
                    xLocation.xUseEntry = xLocation.xIpEntry;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	61bb      	str	r3, [r7, #24]
                {
                    /* No matching entry found. */
                }

                /* If the entry was not found, we use the oldest entry and set the IPaddress */
                xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8007bd4 <vARPRefreshCacheEntry+0xcc>)
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	4413      	add	r3, r2
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	601a      	str	r2, [r3, #0]

                if( pxMACAddress != NULL )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d01f      	beq.n	8007baa <vARPRefreshCacheEntry+0xa2>
                {
                    ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	4a19      	ldr	r2, [pc, #100]	@ (8007bd4 <vARPRefreshCacheEntry+0xcc>)
 8007b70:	4413      	add	r3, r2
 8007b72:	3304      	adds	r3, #4
 8007b74:	68f9      	ldr	r1, [r7, #12]
 8007b76:	2206      	movs	r2, #6
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f011 f8ce 	bl	8018d1a <memcpy>

                    iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                    /* And this entry does not need immediate attention */
                    xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	4a14      	ldr	r2, [pc, #80]	@ (8007bd4 <vARPRefreshCacheEntry+0xcc>)
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	4413      	add	r3, r2
 8007b86:	330a      	adds	r3, #10
 8007b88:	2296      	movs	r2, #150	@ 0x96
 8007b8a:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	4a11      	ldr	r2, [pc, #68]	@ (8007bd4 <vARPRefreshCacheEntry+0xcc>)
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	4413      	add	r3, r2
 8007b94:	330b      	adds	r3, #11
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007bd4 <vARPRefreshCacheEntry+0xcc>)
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	4413      	add	r3, r2
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]
                {
                    /* Nothing will be stored. */
                }
            }
        }
    }
 8007ba8:	e010      	b.n	8007bcc <vARPRefreshCacheEntry+0xc4>
                else if( xLocation.xIpEntry < 0 )
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da0d      	bge.n	8007bcc <vARPRefreshCacheEntry+0xc4>
                    xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	4a08      	ldr	r2, [pc, #32]	@ (8007bd4 <vARPRefreshCacheEntry+0xcc>)
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	4413      	add	r3, r2
 8007bb8:	330a      	adds	r3, #10
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	4a04      	ldr	r2, [pc, #16]	@ (8007bd4 <vARPRefreshCacheEntry+0xcc>)
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	4413      	add	r3, r2
 8007bc6:	330b      	adds	r3, #11
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
    }
 8007bcc:	bf00      	nop
 8007bce:	3720      	adds	r7, #32
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20000f88 	.word	0x20000f88

08007bd8 <prvFindCacheEntry>:
 */
    static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                         const uint32_t ulIPAddress,
                                         struct xNetworkEndPoint * pxEndPoint,
                                         CacheLocation_t * pxLocation )
    {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	@ 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	603b      	str	r3, [r7, #0]
        BaseType_t x = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucMinAgeFound = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        BaseType_t xReturn = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007bf4:	68b8      	ldr	r0, [r7, #8]
 8007bf6:	f004 fb91 	bl	800c31c <FreeRTOS_FindEndPointOnNetMask>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bf14      	ite	ne
 8007c00:	2301      	movne	r3, #1
 8007c02:	2300      	moveq	r3, #0
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	617b      	str	r3, [r7, #20]
        #endif

        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 8007c08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        pxLocation->xIpEntry = -1;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295
 8007c18:	601a      	str	r2, [r3, #0]
        pxLocation->xMacEntry = -1;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c20:	605a      	str	r2, [r3, #4]
        pxLocation->xUseEntry = 0;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2200      	movs	r2, #0
 8007c26:	609a      	str	r2, [r3, #8]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c28:	2300      	movs	r3, #0
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c2c:	e073      	b.n	8007d16 <prvFindCacheEntry+0x13e>
        {
            BaseType_t xMatchingMAC = pdFALSE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61bb      	str	r3, [r7, #24]

            if( pxMACAddress != NULL )
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00e      	beq.n	8007c56 <prvFindCacheEntry+0x7e>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8007d28 <prvFindCacheEntry+0x150>)
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	68f9      	ldr	r1, [r7, #12]
 8007c44:	2206      	movs	r2, #6
 8007c46:	4618      	mov	r0, r3
 8007c48:	f010 ff62 	bl	8018b10 <memcmp>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <prvFindCacheEntry+0x7e>
                {
                    xMatchingMAC = pdTRUE;
 8007c52:	2301      	movs	r3, #1
 8007c54:	61bb      	str	r3, [r7, #24]
                }
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007c56:	4a34      	ldr	r2, [pc, #208]	@ (8007d28 <prvFindCacheEntry+0x150>)
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	4413      	add	r3, r2
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d125      	bne.n	8007cb2 <prvFindCacheEntry+0xda>
            {
                if( pxMACAddress == NULL )
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d103      	bne.n	8007c74 <prvFindCacheEntry+0x9c>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    pxLocation->xIpEntry = x;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c70:	601a      	str	r2, [r3, #0]
                    break;
 8007c72:	e053      	b.n	8007d1c <prvFindCacheEntry+0x144>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d017      	beq.n	8007caa <prvFindCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * This is by far the most common path. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8007d28 <prvFindCacheEntry+0x150>)
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	4413      	add	r3, r2
 8007c82:	330a      	adds	r3, #10
 8007c84:	2296      	movs	r2, #150	@ 0x96
 8007c86:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8007c88:	4a27      	ldr	r2, [pc, #156]	@ (8007d28 <prvFindCacheEntry+0x150>)
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	4413      	add	r3, r2
 8007c90:	330b      	adds	r3, #11
 8007c92:	2201      	movs	r2, #1
 8007c94:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].pxEndPoint = pxEndPoint;
 8007c96:	4a24      	ldr	r2, [pc, #144]	@ (8007d28 <prvFindCacheEntry+0x150>)
 8007c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	4413      	add	r3, r2
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
                    /* Indicate to the caller that the entry is updated. */
                    xReturn = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	61fb      	str	r3, [r7, #28]
                    break;
 8007ca8:	e038      	b.n	8007d1c <prvFindCacheEntry+0x144>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                pxLocation->xIpEntry = x;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e02e      	b.n	8007d10 <prvFindCacheEntry+0x138>
            }
            else if( xMatchingMAC != pdFALSE )
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d016      	beq.n	8007ce6 <prvFindCacheEntry+0x10e>
                #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
                {
                    /* If ARP stores the MAC address of IP addresses outside the
                     * network, than the MAC address of the gateway should not be
                     * overwritten. */
                    BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d28 <prvFindCacheEntry+0x150>)
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	4413      	add	r3, r2
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f004 fb2a 	bl	800c31c <FreeRTOS_FindEndPointOnNetMask>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	613b      	str	r3, [r7, #16]

                    if( xAddressIsLocal == xOtherIsLocal )
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d118      	bne.n	8007d10 <prvFindCacheEntry+0x138>
                    {
                        pxLocation->xMacEntry = x;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	e014      	b.n	8007d10 <prvFindCacheEntry+0x138>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8007ce6:	4a10      	ldr	r2, [pc, #64]	@ (8007d28 <prvFindCacheEntry+0x150>)
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	4413      	add	r3, r2
 8007cee:	330a      	adds	r3, #10
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d90a      	bls.n	8007d10 <prvFindCacheEntry+0x138>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8007cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8007d28 <prvFindCacheEntry+0x150>)
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	4413      	add	r3, r2
 8007d02:	330a      	adds	r3, #10
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pxLocation->xUseEntry = x;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d0e:	609a      	str	r2, [r3, #8]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d12:	3301      	adds	r3, #1
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	dd88      	ble.n	8007c2e <prvFindCacheEntry+0x56>
            {
                /* Nothing happens to this cache entry for now. */
            }
        } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

        return xReturn;
 8007d1c:	69fb      	ldr	r3, [r7, #28]
    }
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3728      	adds	r7, #40	@ 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000f88 	.word	0x20000f88

08007d2c <eARPGetCacheEntry>:
 *         eResolutionFailed.
 */
    eResolutionLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                                 MACAddress_t * const pxMACAddress,
                                                 struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	@ 0x28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
        eResolutionLookupResult_t eReturn = eResolutionFailed;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	623b      	str	r3, [r7, #32]

        configASSERT( pxMACAddress != NULL );
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10d      	bne.n	8007d64 <eARPGetCacheEntry+0x38>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4c:	b672      	cpsid	i
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	b662      	cpsie	i
 8007d5c:	61bb      	str	r3, [r7, #24]
}
 8007d5e:	bf00      	nop
 8007d60:	bf00      	nop
 8007d62:	e7fd      	b.n	8007d60 <eARPGetCacheEntry+0x34>
        configASSERT( pulIPAddress != NULL );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10d      	bne.n	8007d86 <eARPGetCacheEntry+0x5a>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6e:	b672      	cpsid	i
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	b662      	cpsie	i
 8007d7e:	617b      	str	r3, [r7, #20]
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	e7fd      	b.n	8007d82 <eARPGetCacheEntry+0x56>
        configASSERT( ppxEndPoint != NULL );
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10d      	bne.n	8007da8 <eARPGetCacheEntry+0x7c>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	b672      	cpsid	i
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	b662      	cpsie	i
 8007da0:	613b      	str	r3, [r7, #16]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <eARPGetCacheEntry+0x78>

        *( ppxEndPoint ) = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	61fb      	str	r3, [r7, #28]

        if( xIsIPv4Loopback( ulAddressToLookup ) != 0 )
 8007db4:	69f8      	ldr	r0, [r7, #28]
 8007db6:	f003 ffd9 	bl	800bd6c <xIsIPv4Loopback>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d014      	beq.n	8007dea <eARPGetCacheEntry+0xbe>
        {
            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup );
 8007dc0:	69f8      	ldr	r0, [r7, #28]
 8007dc2:	f004 fa6f 	bl	800c2a4 <FreeRTOS_FindEndPointOnIP_IPv4>
 8007dc6:	6238      	str	r0, [r7, #32]

            if( pxEndPoint != NULL )
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d04d      	beq.n	8007e6a <eARPGetCacheEntry+0x13e>
            {
                /* For multi-cast, use the first IPv4 end-point. */
                ( void ) memcpy( pxMACAddress->ucBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007dce:	68b8      	ldr	r0, [r7, #8]
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	3338      	adds	r3, #56	@ 0x38
 8007dd4:	2206      	movs	r2, #6
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f010 ff9f 	bl	8018d1a <memcpy>
                *( ppxEndPoint ) = pxEndPoint;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a3a      	ldr	r2, [r7, #32]
 8007de0:	601a      	str	r2, [r3, #0]
                eReturn = eResolutionCacheHit;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007de8:	e03f      	b.n	8007e6a <eARPGetCacheEntry+0x13e>
            }
        }
        else if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8007dea:	69f8      	ldr	r0, [r7, #28]
 8007dec:	f003 ff46 	bl	800bc7c <xIsIPv4Multicast>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d020      	beq.n	8007e38 <eARPGetCacheEntry+0x10c>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	69f8      	ldr	r0, [r7, #28]
 8007dfa:	f004 f956 	bl	800c0aa <vSetMultiCastIPv4MacAddress>

            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f004 fab6 	bl	800c370 <FreeRTOS_FirstEndPoint>
 8007e04:	6238      	str	r0, [r7, #32]

            for( ;
 8007e06:	e013      	b.n	8007e30 <eARPGetCacheEntry+0x104>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <eARPGetCacheEntry+0xfa>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a3a      	ldr	r2, [r7, #32]
 8007e1c:	601a      	str	r2, [r3, #0]
                    eReturn = eResolutionCacheHit;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 8007e24:	e021      	b.n	8007e6a <eARPGetCacheEntry+0x13e>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8007e26:	6a39      	ldr	r1, [r7, #32]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f004 fae9 	bl	800c400 <FreeRTOS_NextEndPoint>
 8007e2e:	6238      	str	r0, [r7, #32]
                 pxEndPoint != NULL;
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e8      	bne.n	8007e08 <eARPGetCacheEntry+0xdc>
 8007e36:	e018      	b.n	8007e6a <eARPGetCacheEntry+0x13e>
                }
            }
        }
        else if( xIsIPv4Broadcast( ulAddressToLookup, ppxEndPoint ) == pdTRUE )
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	69f8      	ldr	r0, [r7, #28]
 8007e3c:	f003 ff38 	bl	800bcb0 <xIsIPv4Broadcast>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d109      	bne.n	8007e5a <eARPGetCacheEntry+0x12e>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	4a0b      	ldr	r2, [pc, #44]	@ (8007e78 <eARPGetCacheEntry+0x14c>)
 8007e4a:	6811      	ldr	r1, [r2, #0]
 8007e4c:	6019      	str	r1, [r3, #0]
 8007e4e:	8892      	ldrh	r2, [r2, #4]
 8007e50:	809a      	strh	r2, [r3, #4]
            /* Note that xIsIPv4Broadcast() already filled in ppxEndPoint with the corresponding endpoint
             * or the first IPv4 endpoint in case ulAddressToLookup was FREERTOS_INADDR_BROADCAST.
             * It is also safe to call xIsIPv4Broadcast() with a null pointer so no need to use
             * the intermediary pxEndPoint */

            eReturn = eResolutionCacheHit;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e58:	e007      	b.n	8007e6a <eARPGetCacheEntry+0x13e>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f80c 	bl	8007e7c <eARPGetCacheEntryGateWay>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        return eReturn;
 8007e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3728      	adds	r7, #40	@ 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	08019ea8 	.word	0x08019ea8

08007e7c <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eResolutionLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                               MACAddress_t * const pxMACAddress,
                                                               struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
        eResolutionLookupResult_t eReturn = eResolutionCacheMiss;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup );
 8007e98:	69b8      	ldr	r0, [r7, #24]
 8007e9a:	f004 fa3f 	bl	800c31c <FreeRTOS_FindEndPointOnNetMask>
 8007e9e:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d11b      	bne.n	8007ede <eARPGetCacheEntryGateWay+0x62>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	69b8      	ldr	r0, [r7, #24]
 8007eac:	f000 f836 	bl	8007f1c <prvCacheLookup>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eResolutionCacheHit )
 8007eb4:	7ffb      	ldrb	r3, [r7, #31]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d017      	beq.n	8007eea <eARPGetCacheEntryGateWay+0x6e>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8007eba:	2040      	movs	r0, #64	@ 0x40
 8007ebc:	f004 fa3c 	bl	800c338 <FreeRTOS_FindGateWay>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <eARPGetCacheEntryGateWay+0x5c>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e008      	b.n	8007eea <eARPGetCacheEntryGateWay+0x6e>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	e005      	b.n	8007eea <eARPGetCacheEntryGateWay+0x6e>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eResolutionCacheMiss )
 8007eea:	7ffb      	ldrb	r3, [r7, #31]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10f      	bne.n	8007f10 <eARPGetCacheEntryGateWay+0x94>
        #endif
        {
            if( ulAddressToLookup == 0U )
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <eARPGetCacheEntryGateWay+0x80>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eResolutionFailed;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	77fb      	strb	r3, [r7, #31]
 8007efa:	e009      	b.n	8007f10 <eARPGetCacheEntryGateWay+0x94>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	69b8      	ldr	r0, [r7, #24]
 8007f02:	f000 f80b 	bl	8007f1c <prvCacheLookup>
 8007f06:	4603      	mov	r3, r0
 8007f08:	77fb      	strb	r3, [r7, #31]
                                             ( eReturn == eResolutionCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 8007f10:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007f12:	4618      	mov	r0, r3
 8007f14:	3720      	adds	r7, #32
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <prvCacheLookup>:
 *         and when waiting for a ARP reply: eResolutionFailed.
 */
    static eResolutionLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                                     MACAddress_t * const pxMACAddress,
                                                     NetworkEndPoint_t ** ppxEndPoint )
    {
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eResolutionLookupResult_t eReturn = eResolutionCacheMiss;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e02a      	b.n	8007f88 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007f32:	4a19      	ldr	r2, [pc, #100]	@ (8007f98 <prvCacheLookup+0x7c>)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	4413      	add	r3, r2
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d11f      	bne.n	8007f82 <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007f42:	4a15      	ldr	r2, [pc, #84]	@ (8007f98 <prvCacheLookup+0x7c>)
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	4413      	add	r3, r2
 8007f4a:	330b      	adds	r3, #11
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eResolutionFailed;
 8007f52:	2302      	movs	r3, #2
 8007f54:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eResolutionCacheHit;
                }

                break;
 8007f56:	e01a      	b.n	8007f8e <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007f58:	68b8      	ldr	r0, [r7, #8]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8007f98 <prvCacheLookup+0x7c>)
 8007f60:	4413      	add	r3, r2
 8007f62:	3304      	adds	r3, #4
 8007f64:	2206      	movs	r2, #6
 8007f66:	4619      	mov	r1, r3
 8007f68:	f010 fed7 	bl	8018d1a <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8007f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f98 <prvCacheLookup+0x7c>)
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	4413      	add	r3, r2
 8007f74:	330c      	adds	r3, #12
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	601a      	str	r2, [r3, #0]
                    eReturn = eResolutionCacheHit;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	74fb      	strb	r3, [r7, #19]
                break;
 8007f80:	e005      	b.n	8007f8e <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	3301      	adds	r3, #1
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	ddd1      	ble.n	8007f32 <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8007f8e:	7cfb      	ldrb	r3, [r7, #19]
    }
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20000f88 	.word	0x20000f88

08007f9c <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e048      	b.n	800803a <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8007fa8:	4a43      	ldr	r2, [pc, #268]	@ (80080b8 <vARPAgeCache+0x11c>)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	4413      	add	r3, r2
 8007fb0:	330a      	adds	r3, #10
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d03d      	beq.n	8008034 <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007fb8:	4a3f      	ldr	r2, [pc, #252]	@ (80080b8 <vARPAgeCache+0x11c>)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	4413      	add	r3, r2
 8007fc0:	330a      	adds	r3, #10
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b2d9      	uxtb	r1, r3
 8007fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80080b8 <vARPAgeCache+0x11c>)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	4413      	add	r3, r2
 8007fd0:	330a      	adds	r3, #10
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007fd6:	4a38      	ldr	r2, [pc, #224]	@ (80080b8 <vARPAgeCache+0x11c>)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	4413      	add	r3, r2
 8007fde:	330b      	adds	r3, #11
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d108      	bne.n	8007ff8 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007fe6:	4a34      	ldr	r2, [pc, #208]	@ (80080b8 <vARPAgeCache+0x11c>)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	4413      	add	r3, r2
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 f8db 	bl	80081ac <FreeRTOS_OutputARPRequest>
 8007ff6:	e00f      	b.n	8008018 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80080b8 <vARPAgeCache+0x11c>)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	4413      	add	r3, r2
 8008000:	330a      	adds	r3, #10
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d807      	bhi.n	8008018 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008008:	4a2b      	ldr	r2, [pc, #172]	@ (80080b8 <vARPAgeCache+0x11c>)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	4413      	add	r3, r2
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f8ca 	bl	80081ac <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8008018:	4a27      	ldr	r2, [pc, #156]	@ (80080b8 <vARPAgeCache+0x11c>)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	011b      	lsls	r3, r3, #4
 800801e:	4413      	add	r3, r2
 8008020:	330a      	adds	r3, #10
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d105      	bne.n	8008034 <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8008028:	4a23      	ldr	r2, [pc, #140]	@ (80080b8 <vARPAgeCache+0x11c>)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	4413      	add	r3, r2
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b09      	cmp	r3, #9
 800803e:	ddb3      	ble.n	8007fa8 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8008040:	f00e faf6 	bl	8016630 <xTaskGetTickCount>
 8008044:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8008046:	4b1d      	ldr	r3, [pc, #116]	@ (80080bc <vARPAgeCache+0x120>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d007      	beq.n	800805e <vARPAgeCache+0xc2>
 800804e:	4b1b      	ldr	r3, [pc, #108]	@ (80080bc <vARPAgeCache+0x120>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800805a:	4293      	cmp	r3, r2
 800805c:	d927      	bls.n	80080ae <vARPAgeCache+0x112>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800805e:	4b18      	ldr	r3, [pc, #96]	@ (80080c0 <vARPAgeCache+0x124>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8008064:	e01d      	b.n	80080a2 <vARPAgeCache+0x106>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d011      	beq.n	800809a <vARPAgeCache+0xfe>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00d      	beq.n	800809a <vARPAgeCache+0xfe>
                {
                    if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) /* LCOV_EXCL_BR_LINE */
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008084:	f003 0308 	and.w	r3, r3, #8
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <vARPAgeCache+0xfe>
                    {
                        FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	68b8      	ldr	r0, [r7, #8]
 8008096:	f000 f821 	bl	80080dc <FreeRTOS_OutputARPRequest_Multi>
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80080a0:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1de      	bne.n	8008066 <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 80080a8:	4a04      	ldr	r2, [pc, #16]	@ (80080bc <vARPAgeCache+0x120>)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6013      	str	r3, [r2, #0]
        }
    }
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000f88 	.word	0x20000f88
 80080bc:	20001034 	.word	0x20001034
 80080c0:	2000263c 	.word	0x2000263c

080080c4 <vARPSendGratuitous>:
/**
 * @brief Send a Gratuitous ARP packet to allow this node to announce the IP-MAC
 *        mapping to the entire network.
 */
    void vARPSendGratuitous( void )
    {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
        /* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
         * time vARPAgeCache() is called. */
        xLastGratuitousARPTime = ( TickType_t ) 0;
 80080c8:	4b03      	ldr	r3, [pc, #12]	@ (80080d8 <vARPSendGratuitous+0x14>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]

        /* Let the IP-task call vARPAgeCache(). */
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 80080ce:	2003      	movs	r0, #3
 80080d0:	f002 fb02 	bl	800a6d8 <xSendEventToIPTask>
    }
 80080d4:	bf00      	nop
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20001034 	.word	0x20001034

080080dc <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d156      	bne.n	80081a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d052      	beq.n	80081a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 80080fe:	2100      	movs	r1, #0
 8008100:	202a      	movs	r0, #42	@ 0x2a
 8008102:	f00a fc47 	bl	8012994 <pxGetNetworkBufferWithDescriptor>
 8008106:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d04a      	beq.n	80081a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8008124:	6938      	ldr	r0, [r7, #16]
 8008126:	f000 f855 	bl	80081d4 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812e:	2b3b      	cmp	r3, #59	@ 0x3b
 8008130:	d812      	bhi.n	8008158 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e008      	b.n	800814c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	4413      	add	r3, r2
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	3301      	adds	r3, #1
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2b3b      	cmp	r3, #59	@ 0x3b
 8008150:	ddf3      	ble.n	800813a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	223c      	movs	r2, #60	@ 0x3c
 8008156:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8008158:	f003 fa49 	bl	800b5ee <xIsCallingFromIPTask>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00f      	beq.n	8008182 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01b      	beq.n	80081a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	f8d2 00a4 	ldr.w	r0, [r2, #164]	@ 0xa4
 800817a:	2201      	movs	r2, #1
 800817c:	6939      	ldr	r1, [r7, #16]
 800817e:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8008180:	e010      	b.n	80081a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8008182:	2302      	movs	r3, #2
 8008184:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800818a:	f107 0308 	add.w	r3, r7, #8
 800818e:	f04f 31ff 	mov.w	r1, #4294967295
 8008192:	4618      	mov	r0, r3
 8008194:	f002 fab6 	bl	800a704 <xSendEventStructToIPTask>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800819e:	6938      	ldr	r0, [r7, #16]
 80081a0:	f00a fca4 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
    }
 80081a4:	bf00      	nop
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress );
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f004 f8b1 	bl	800c31c <FreeRTOS_FindEndPointOnNetMask>
 80081ba:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <FreeRTOS_OutputARPRequest+0x1e>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff ff89 	bl	80080dc <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10d      	bne.n	80081fe <vARPGenerateRequestPacket+0x2a>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	b672      	cpsid	i
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	b662      	cpsie	i
 80081f6:	613b      	str	r3, [r7, #16]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <vARPGenerateRequestPacket+0x26>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008202:	2b29      	cmp	r3, #41	@ 0x29
 8008204:	d80d      	bhi.n	8008222 <vARPGenerateRequestPacket+0x4e>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	b672      	cpsid	i
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	b662      	cpsie	i
 800821a:	60fb      	str	r3, [r7, #12]
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	e7fd      	b.n	800821e <vARPGenerateRequestPacket+0x4a>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10d      	bne.n	8008246 <vARPGenerateRequestPacket+0x72>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822e:	b672      	cpsid	i
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	b662      	cpsie	i
 800823e:	60bb      	str	r3, [r7, #8]
}
 8008240:	bf00      	nop
 8008242:	bf00      	nop
 8008244:	e7fd      	b.n	8008242 <vARPGenerateRequestPacket+0x6e>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824a:	61fb      	str	r3, [r7, #28]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 800824c:	4b1b      	ldr	r3, [pc, #108]	@ (80082bc <vARPGenerateRequestPacket+0xe8>)
 800824e:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket;
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8008254:	2226      	movs	r2, #38	@ 0x26
 8008256:	69b9      	ldr	r1, [r7, #24]
 8008258:	6978      	ldr	r0, [r7, #20]
 800825a:	f010 fd5e 	bl	8018d1a <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008262:	3338      	adds	r3, #56	@ 0x38
 8008264:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	3306      	adds	r3, #6
 800826a:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800826c:	2206      	movs	r2, #6
 800826e:	69b9      	ldr	r1, [r7, #24]
 8008270:	6978      	ldr	r0, [r7, #20]
 8008272:	f010 fd52 	bl	8018d1a <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827a:	3338      	adds	r3, #56	@ 0x38
 800827c:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	3316      	adds	r3, #22
 8008282:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8008284:	2206      	movs	r2, #6
 8008286:	69b9      	ldr	r1, [r7, #24]
 8008288:	6978      	ldr	r0, [r7, #20]
 800828a:	f010 fd46 	bl	8018d1a <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	331c      	adds	r3, #28
 8008298:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	222a      	movs	r2, #42	@ 0x2a
 80082b2:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 80082b4:	bf00      	nop
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	08019e2c 	.word	0x08019e2c

080082c0 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
    void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
    {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
        if( pxEndPoint != NULL )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01b      	beq.n	8008306 <FreeRTOS_ClearARP+0x46>
        {
            BaseType_t x;

            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	e014      	b.n	80082fe <FreeRTOS_ClearARP+0x3e>
            {
                if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 80082d4:	4a10      	ldr	r2, [pc, #64]	@ (8008318 <FreeRTOS_ClearARP+0x58>)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	4413      	add	r3, r2
 80082dc:	330c      	adds	r3, #12
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d108      	bne.n	80082f8 <FreeRTOS_ClearARP+0x38>
                {
                    ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	4a0b      	ldr	r2, [pc, #44]	@ (8008318 <FreeRTOS_ClearARP+0x58>)
 80082ec:	4413      	add	r3, r2
 80082ee:	2210      	movs	r2, #16
 80082f0:	2100      	movs	r1, #0
 80082f2:	4618      	mov	r0, r3
 80082f4:	f010 fc36 	bl	8018b64 <memset>
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b09      	cmp	r3, #9
 8008302:	dde7      	ble.n	80082d4 <FreeRTOS_ClearARP+0x14>
        }
        else
        {
            ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
        }
    }
 8008304:	e004      	b.n	8008310 <FreeRTOS_ClearARP+0x50>
            ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8008306:	22a0      	movs	r2, #160	@ 0xa0
 8008308:	2100      	movs	r1, #0
 800830a:	4803      	ldr	r0, [pc, #12]	@ (8008318 <FreeRTOS_ClearARP+0x58>)
 800830c:	f010 fc2a 	bl	8018b64 <memset>
    }
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000f88 	.word	0x20000f88

0800831c <xApplicationGetRandomNumber>:

/*-----------------------------------------------------------*/

    //USER FUNCTIONS
    BaseType_t xApplicationGetRandomNumber(uint32_t *pulValue)
    {
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
        if (HAL_RNG_GenerateRandomNumber(&hrng, pulValue) == HAL_OK)
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4806      	ldr	r0, [pc, #24]	@ (8008340 <xApplicationGetRandomNumber+0x24>)
 8008328:	f7fd fada 	bl	80058e0 <HAL_RNG_GenerateRandomNumber>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <xApplicationGetRandomNumber+0x1a>
            return pdTRUE;
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <xApplicationGetRandomNumber+0x1c>
        else
            return pdFALSE;
 8008336:	2300      	movs	r3, #0
    }
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	200008c8 	.word	0x200008c8

08008344 <xIsDHCPSocket>:
 *
 * @return If the socket given as parameter is the DHCP socket - return
 *         pdTRUE, else pdFALSE.
 */
    BaseType_t xIsDHCPSocket( const ConstSocket_t xSocket )
    {
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;

        if( xDHCPv4Socket == xSocket )
 800834c:	4b08      	ldr	r3, [pc, #32]	@ (8008370 <xIsDHCPSocket+0x2c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	429a      	cmp	r2, r3
 8008354:	d102      	bne.n	800835c <xIsDHCPSocket+0x18>
        {
            xReturn = pdTRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e001      	b.n	8008360 <xIsDHCPSocket+0x1c>
        }
        else
        {
            xReturn = pdFALSE;
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8008360:	68fb      	ldr	r3, [r7, #12]
    }
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	20001044 	.word	0x20001044

08008374 <vDHCPProcess>:
 * @param[in] pxEndPoint The end-point for which the DHCP state machine should
 *                        make one cycle.
 */
    void vDHCPProcess( BaseType_t xReset,
                       struct xNetworkEndPoint * pxEndPoint )
    {
 8008374:	b580      	push	{r7, lr}
 8008376:	b08c      	sub	sp, #48	@ 0x30
 8008378:	af02      	add	r7, sp, #8
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
        BaseType_t xDoProcess = pdTRUE;
 800837e:	2301      	movs	r3, #1
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24

        /* The function is called by the IP-task, so pxEndPoint
         * should be non-NULL. */
        configASSERT( pxEndPoint != NULL );
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10d      	bne.n	80083a4 <vDHCPProcess+0x30>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	b672      	cpsid	i
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	b662      	cpsie	i
 800839c:	613b      	str	r3, [r7, #16]
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	e7fd      	b.n	80083a0 <vDHCPProcess+0x2c>
        configASSERT( pxEndPoint->bits.bIPv6 == 0 );
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00d      	beq.n	80083d0 <vDHCPProcess+0x5c>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b8:	b672      	cpsid	i
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	b662      	cpsie	i
 80083c8:	60fb      	str	r3, [r7, #12]
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	e7fd      	b.n	80083cc <vDHCPProcess+0x58>

        /* Is DHCP starting over? */
        if( xReset != pdFALSE )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <vDHCPProcess+0x6a>
        {
            EP_DHCPData.eDHCPState = eInitialWait;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        }

        if( ( EP_DHCPData.eDHCPState != EP_DHCPData.eExpectedState ) && ( xReset == pdFALSE ) )
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d003      	beq.n	80083f6 <vDHCPProcess+0x82>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 8090 	beq.w	8008516 <vDHCPProcess+0x1a2>
            /* When the DHCP event was generated, the DHCP client was
            * in a different state.  Therefore, ignore this event. */
            FreeRTOS_debug_printf( ( "DHCP wrong state: expect: %d got: %d : ignore\n",
                                     EP_DHCPData.eExpectedState, EP_DHCPData.eDHCPState ) );
        }
        else if( EP_DHCPData.xDHCPSocket != NULL ) /* If there is a socket, check for incoming messages first. */
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 808a 	beq.w	8008516 <vDHCPProcess+0x1a2>
        {
            /* No need to initialise 'pucUDPPayload', it just looks nicer. */
            uint8_t * pucUDPPayload = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
            const DHCPMessage_IPv4_t * pxDHCPMessage;
            int32_t lBytes;

            while( EP_DHCPData.xDHCPSocket != NULL )
 8008406:	e07e      	b.n	8008506 <vDHCPProcess+0x192>
            {
                BaseType_t xRecvFlags = FREERTOS_ZERO_COPY + FREERTOS_MSG_PEEK;
 8008408:	2305      	movs	r3, #5
 800840a:	61fb      	str	r3, [r7, #28]
                NetworkEndPoint_t * pxIterator = NULL;
 800840c:	2300      	movs	r3, #0
 800840e:	623b      	str	r3, [r7, #32]

                /* Peek the next UDP message. */
                lBytes = FreeRTOS_recvfrom( EP_DHCPData.xDHCPSocket, &( pucUDPPayload ), 0, xRecvFlags, NULL, NULL );
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008416:	f107 0108 	add.w	r1, r7, #8
 800841a:	2300      	movs	r3, #0
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	2300      	movs	r3, #0
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	2200      	movs	r2, #0
 8008426:	f004 fa64 	bl	800c8f2 <FreeRTOS_recvfrom>
 800842a:	61b8      	str	r0, [r7, #24]

                if( lBytes < ( ( int32_t ) sizeof( DHCPMessage_IPv4_t ) ) )
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2bef      	cmp	r3, #239	@ 0xef
 8008430:	dc11      	bgt.n	8008456 <vDHCPProcess+0xe2>
                {
                    if( ( lBytes < 0 ) && ( lBytes != -pdFREERTOS_ERRNO_EAGAIN ) )
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	2b00      	cmp	r3, #0
 8008436:	da03      	bge.n	8008440 <vDHCPProcess+0xcc>
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f113 0f0b 	cmn.w	r3, #11
 800843e:	d109      	bne.n	8008454 <vDHCPProcess+0xe0>
                    {
                        FreeRTOS_printf( ( "vDHCPProcess: FreeRTOS_recvfrom returns %d\n", ( int ) lBytes ) );
                    }
                    else if( lBytes >= 0 )
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	db66      	blt.n	8008514 <vDHCPProcess+0x1a0>
                    {
                        vReleaseSinglePacketFromUDPSocket( EP_DHCPData.xDHCPSocket );
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800844c:	4618      	mov	r0, r3
 800844e:	f003 fb3f 	bl	800bad0 <vReleaseSinglePacketFromUDPSocket>
                    else
                    {
                        /* do nothing, coverity happy */
                    }

                    break;
 8008452:	e05f      	b.n	8008514 <vDHCPProcess+0x1a0>
 8008454:	e05e      	b.n	8008514 <vDHCPProcess+0x1a0>

                /* Map a DHCP structure onto the received data. */
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDHCPMessage = ( ( const DHCPMessage_IPv4_t * ) pucUDPPayload );
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	617b      	str	r3, [r7, #20]

                /* Sanity check. */
                if( ( pxDHCPMessage->ulDHCPCookie == dhcpCOOKIE ) && ( pxDHCPMessage->ucOpcode == dhcpREPLY_OPCODE ) )
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008460:	4a33      	ldr	r2, [pc, #204]	@ (8008530 <vDHCPProcess+0x1bc>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d116      	bne.n	8008494 <vDHCPProcess+0x120>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d112      	bne.n	8008494 <vDHCPProcess+0x120>
                {
                    pxIterator = pxNetworkEndPoints;
 800846e:	4b31      	ldr	r3, [pc, #196]	@ (8008534 <vDHCPProcess+0x1c0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	623b      	str	r3, [r7, #32]

                    /* Find the end-point with given transaction ID. */
                    while( pxIterator != NULL )
 8008474:	e009      	b.n	800848a <vDHCPProcess+0x116>
                    {
                        if( pxDHCPMessage->ulTransactionID == FreeRTOS_htonl( pxIterator->xDHCPData.ulTransactionId ) )
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800847e:	429a      	cmp	r2, r3
 8008480:	d007      	beq.n	8008492 <vDHCPProcess+0x11e>
                        {
                            break;
                        }

                        pxIterator = pxIterator->pxNext;
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008488:	623b      	str	r3, [r7, #32]
                    while( pxIterator != NULL )
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f2      	bne.n	8008476 <vDHCPProcess+0x102>
 8008490:	e000      	b.n	8008494 <vDHCPProcess+0x120>
                            break;
 8008492:	bf00      	nop
                    }
                }

                if( ( pxIterator != NULL ) && ( pxIterator->xDHCPData.eDHCPState == eLeasedAddress ) )
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d006      	beq.n	80084a8 <vDHCPProcess+0x134>
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80084a0:	2b06      	cmp	r3, #6
 80084a2:	d101      	bne.n	80084a8 <vDHCPProcess+0x134>
                {
                    /* No DHCP messages are expected while in eLeasedAddress state. */
                    pxIterator = NULL;
 80084a4:	2300      	movs	r3, #0
 80084a6:	623b      	str	r3, [r7, #32]
                }

                if( ( pxIterator != NULL ) && ( pxIterator->xDHCPData.eDHCPState == pxIterator->xDHCPData.eExpectedState ) )
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d013      	beq.n	80084d6 <vDHCPProcess+0x162>
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d10b      	bne.n	80084d6 <vDHCPProcess+0x162>
                {
                    /* The second parameter pdTRUE tells to check for a UDP message. */
                    vDHCPProcessEndPoint( pdFALSE, pdTRUE, pxIterator );
 80084be:	6a3a      	ldr	r2, [r7, #32]
 80084c0:	2101      	movs	r1, #1
 80084c2:	2000      	movs	r0, #0
 80084c4:	f000 f990 	bl	80087e8 <vDHCPProcessEndPoint>

                    if( pxEndPoint == pxIterator )
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d11a      	bne.n	8008506 <vDHCPProcess+0x192>
                    {
                        xDoProcess = pdFALSE;
 80084d0:	2300      	movs	r3, #0
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24
                    if( pxEndPoint == pxIterator )
 80084d4:	e017      	b.n	8008506 <vDHCPProcess+0x192>
                }
                else
                {
                    /* Target not found or there is a state mismatch, fetch the message and delete it. */
                    /* PAss the address of a pointer pucUDPPayload, because zero-copy is used. */
                    lBytes = FreeRTOS_recvfrom( EP_DHCPData.xDHCPSocket, &( pucUDPPayload ), 0, FREERTOS_ZERO_COPY, NULL, NULL );
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80084dc:	f107 0108 	add.w	r1, r7, #8
 80084e0:	2300      	movs	r3, #0
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	2300      	movs	r3, #0
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	2301      	movs	r3, #1
 80084ea:	2200      	movs	r2, #0
 80084ec:	f004 fa01 	bl	800c8f2 <FreeRTOS_recvfrom>
 80084f0:	61b8      	str	r0, [r7, #24]

                    if( ( lBytes > 0 ) && ( pucUDPPayload != NULL ) )
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dd06      	ble.n	8008506 <vDHCPProcess+0x192>
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <vDHCPProcess+0x192>
                    {
                        /* Remove it now, destination not found. */
                        FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayload );
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	4618      	mov	r0, r3
 8008502:	f002 f8c9 	bl	800a698 <FreeRTOS_ReleaseUDPPayloadBuffer>
            while( EP_DHCPData.xDHCPSocket != NULL )
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800850c:	2b00      	cmp	r3, #0
 800850e:	f47f af7b 	bne.w	8008408 <vDHCPProcess+0x94>
 8008512:	e000      	b.n	8008516 <vDHCPProcess+0x1a2>
                    break;
 8008514:	bf00      	nop
        else
        {
            /* do nothing, coverity happy */
        }

        if( xDoProcess != pdFALSE )
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	2b00      	cmp	r3, #0
 800851a:	d004      	beq.n	8008526 <vDHCPProcess+0x1b2>
        {
            /* Process the end-point, but do not expect incoming packets. */
            vDHCPProcessEndPoint( xReset, pdFALSE, pxEndPoint );
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	2100      	movs	r1, #0
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f961 	bl	80087e8 <vDHCPProcessEndPoint>
        }
    }
 8008526:	bf00      	nop
 8008528:	3728      	adds	r7, #40	@ 0x28
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	63825363 	.word	0x63825363
 8008534:	2000263c 	.word	0x2000263c

08008538 <vDHCPStop>:
 * @brief Stop the DHCP process. Close the DHCP socket when it's no longer used by any end-point.
 *
 * @param[in] pxEndPoint The end-point for which we want to stop the DHCP process.
 */
    void vDHCPStop( struct xNetworkEndPoint * pxEndPoint )
    {
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
        /* Disable the DHCP timer. */
        vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 8008540:	2100      	movs	r1, #0
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f002 ff1e 	bl	800b384 <vIPSetDHCP_RATimerEnableState>

        /* Close socket to ensure packets don't queue on it. */
        prvCloseDHCPSocket( pxEndPoint );
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fa25 	bl	8008998 <prvCloseDHCPSocket>
    }
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <xHandleWaitingOffer>:
 * @param[in] xDoCheck When true, the function must handle any replies.
 * @return It returns pdTRUE in case the DHCP process must be given up.
 */
    static BaseType_t xHandleWaitingOffer( NetworkEndPoint_t * pxEndPoint,
                                           BaseType_t xDoCheck )
    {
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
        BaseType_t xGivingUp = pdFALSE;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]
                IP_Address_t xIPAddress;
            #endif
        #endif

        /* Look for offers coming in. */
        if( xDoCheck != pdFALSE )
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01f      	beq.n	80085aa <xHandleWaitingOffer+0x54>
        {
            if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER, pxEndPoint ) == pdPASS )
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	2002      	movs	r0, #2
 800856e:	f000 fc83 	bl	8008e78 <prvProcessDHCPReplies>
 8008572:	4603      	mov	r3, r0
 8008574:	2b01      	cmp	r3, #1
 8008576:	d155      	bne.n	8008624 <xHandleWaitingOffer+0xce>
                    if( eAnswer == eDHCPContinue )
                #endif /* ipconfigUSE_DHCP_HOOK */
                {
                    /* An offer has been made, the user wants to continue,
                     * generate the request. */
                    if( prvSendDHCPRequest( pxEndPoint ) == pdPASS )
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fd89 	bl	8009090 <prvSendDHCPRequest>
 800857e:	4603      	mov	r3, r0
 8008580:	2b01      	cmp	r3, #1
 8008582:	d10d      	bne.n	80085a0 <xHandleWaitingOffer+0x4a>
                    {
                        EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008584:	f00e f854 	bl	8016630 <xTaskGetTickCount>
 8008588:	4602      	mov	r2, r0
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	671a      	str	r2, [r3, #112]	@ 0x70
                        EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008594:	675a      	str	r2, [r3, #116]	@ 0x74
                        EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2203      	movs	r2, #3
 800859a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800859e:	e041      	b.n	8008624 <xHandleWaitingOffer+0xce>
                    else
                    {
                        /* Either the creation of a message buffer failed, or sendto().
                         * Try again in the next cycle. */
                        FreeRTOS_debug_printf( ( "Send failed during eWaitingOffer/1.\n" ) );
                        EP_DHCPData.eDHCPState = eSendDHCPRequest;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2204      	movs	r2, #4
 80085a4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80085a8:	e03c      	b.n	8008624 <xHandleWaitingOffer+0xce>
                #endif /* ipconfigUSE_DHCP_HOOK */
            }
        }

        /* Is it time to send another Discover? */
        else if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 80085aa:	f00e f841 	bl	8016630 <xTaskGetTickCount>
 80085ae:	4602      	mov	r2, r0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b4:	1ad2      	subs	r2, r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d932      	bls.n	8008624 <xHandleWaitingOffer+0xce>
        {
            /* It is time to send another Discover.  Increase the time
             * period, and if it has not got to the point of giving up - send
             * another discovery. */
            EP_DHCPData.xDHCPTxPeriod <<= 1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c2:	005a      	lsls	r2, r3, #1
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	675a      	str	r2, [r3, #116]	@ 0x74

            if( EP_DHCPData.xDHCPTxPeriod <= ( ( TickType_t ) ipconfigMAXIMUM_DISCOVER_TX_PERIOD ) )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d822      	bhi.n	8008616 <xHandleWaitingOffer+0xc0>
            {
                if( xApplicationGetRandomNumber( &( EP_DHCPData.ulTransactionId ) ) != pdFALSE )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	335c      	adds	r3, #92	@ 0x5c
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fea1 	bl	800831c <xApplicationGetRandomNumber>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d021      	beq.n	8008624 <xHandleWaitingOffer+0xce>
                {
                    EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 80085e0:	f00e f826 	bl	8016630 <xTaskGetTickCount>
 80085e4:	4602      	mov	r2, r0
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	671a      	str	r2, [r3, #112]	@ 0x70

                    if( EP_DHCPData.xUseBroadcast != pdFALSE )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <xHandleWaitingOffer+0xa4>
                    {
                        EP_DHCPData.xUseBroadcast = pdFALSE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	679a      	str	r2, [r3, #120]	@ 0x78
 80085f8:	e002      	b.n	8008600 <xHandleWaitingOffer+0xaa>
                    }
                    else
                    {
                        EP_DHCPData.xUseBroadcast = pdTRUE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	679a      	str	r2, [r3, #120]	@ 0x78
                    }

                    if( prvSendDHCPDiscover( pxEndPoint ) == pdPASS )
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fda7 	bl	8009154 <prvSendDHCPDiscover>
 8008606:	4603      	mov	r3, r0
 8008608:	2b01      	cmp	r3, #1
 800860a:	d00b      	beq.n	8008624 <xHandleWaitingOffer+0xce>
                    else
                    {
                        /* Either the creation of a message buffer failed, or sendto().
                         * Try again in the next cycle. */
                        FreeRTOS_debug_printf( ( "Send failed during eWaitingOffer/2.\n" ) );
                        EP_DHCPData.eDHCPState = eInitialWait;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8008614:	e006      	b.n	8008624 <xHandleWaitingOffer+0xce>
                {
                    /* Only use a fake Ack if the default IP address == 0x00
                     * and the link local addressing is used.  Start searching
                     * a free LinkLayer IP-address.  Next state will be
                     * 'eGetLinkLayerAddress'. */
                    prvPrepareLinkLayerIPLookUp( pxEndPoint );
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fe1a 	bl	8009250 <prvPrepareLinkLayerIPLookUp>

                    /* Setting an IP address manually so set to not using
                     * leased address mode. */
                    EP_DHCPData.eDHCPState = eGetLinkLayerAddress;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2205      	movs	r2, #5
 8008620:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        else
        {
            /* There was no DHCP reply, there was no time-out, just keep on waiting. */
        }

        return xGivingUp;
 8008624:	68fb      	ldr	r3, [r7, #12]
    }
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <vHandleWaitingAcknowledge>:
 * @param[in] pxEndPoint The end-point that is getting an IP-address from a DHCP server
 * @param[in] xDoCheck When true, the function must handle any replies.
 */
    static void vHandleWaitingAcknowledge( NetworkEndPoint_t * pxEndPoint,
                                           BaseType_t xDoCheck )
    {
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
        if( xDoCheck == pdFALSE )
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d12b      	bne.n	8008698 <vHandleWaitingAcknowledge+0x68>
        {
            /* Is it time to send another Discover? */
            if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 8008640:	f00d fff6 	bl	8016630 <xTaskGetTickCount>
 8008644:	4602      	mov	r2, r0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864a:	1ad2      	subs	r2, r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008650:	429a      	cmp	r2, r3
 8008652:	d958      	bls.n	8008706 <vHandleWaitingAcknowledge+0xd6>
            {
                /* Increase the time period, and if it has not got to the
                 * point of giving up - send another request. */
                EP_DHCPData.xDHCPTxPeriod <<= 1;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008658:	005a      	lsls	r2, r3, #1
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	675a      	str	r2, [r3, #116]	@ 0x74

                if( EP_DHCPData.xDHCPTxPeriod <= ( TickType_t ) ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008662:	2b01      	cmp	r3, #1
 8008664:	d80f      	bhi.n	8008686 <vHandleWaitingAcknowledge+0x56>
                {
                    EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008666:	f00d ffe3 	bl	8016630 <xTaskGetTickCount>
 800866a:	4602      	mov	r2, r0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	671a      	str	r2, [r3, #112]	@ 0x70

                    if( prvSendDHCPRequest( pxEndPoint ) == pdPASS )
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fd0d 	bl	8009090 <prvSendDHCPRequest>
 8008676:	4603      	mov	r3, r0
 8008678:	2b01      	cmp	r3, #1
 800867a:	d044      	beq.n	8008706 <vHandleWaitingAcknowledge+0xd6>
                    else
                    {
                        /* Either the creation of a message buffer failed, or sendto().
                         * Try again in the next cycle. */
                        FreeRTOS_debug_printf( ( "Send failed during eWaitingAcknowledge.\n" ) );
                        EP_DHCPData.eDHCPState = eSendDHCPRequest;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2204      	movs	r2, #4
 8008680:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        }
        else
        {
            /* There are no replies yet. */
        }
    }
 8008684:	e03f      	b.n	8008706 <vHandleWaitingAcknowledge+0xd6>
                    EP_DHCPData.eDHCPState = eInitialWait;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    EP_DHCPData.eExpectedState = eInitialWait;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    }
 8008696:	e036      	b.n	8008706 <vHandleWaitingAcknowledge+0xd6>
        else if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK, pxEndPoint ) == pdPASS )
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	2005      	movs	r0, #5
 800869c:	f000 fbec 	bl	8008e78 <prvProcessDHCPReplies>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d12f      	bne.n	8008706 <vHandleWaitingAcknowledge+0xd6>
            EP_IPv4_SETTINGS.ulIPAddress = EP_DHCPData.ulOfferedIPAddress;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	601a      	str	r2, [r3, #0]
            EP_IPv4_SETTINGS.ulBroadcastAddress = EP_DHCPData.ulOfferedIPAddress | ~( EP_IPv4_SETTINGS.ulNetMask );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	43db      	mvns	r3, r3
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	615a      	str	r2, [r3, #20]
            EP_DHCPData.eDHCPState = eLeasedAddress;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2206      	movs	r2, #6
 80086c2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            vIPNetworkUpCalls( pxEndPoint );
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 ff0c 	bl	800a4e4 <vIPNetworkUpCalls>
            prvCloseDHCPSocket( pxEndPoint );
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f963 	bl	8008998 <prvCloseDHCPSocket>
            if( EP_DHCPData.ulLeaseTime == 0U )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d103      	bne.n	80086e2 <vHandleWaitingAcknowledge+0xb2>
                EP_DHCPData.ulLeaseTime = dhcpDEFAULT_LEASE_TIME;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008710 <vHandleWaitingAcknowledge+0xe0>)
 80086de:	66da      	str	r2, [r3, #108]	@ 0x6c
 80086e0:	e009      	b.n	80086f6 <vHandleWaitingAcknowledge+0xc6>
            else if( EP_DHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d803      	bhi.n	80086f6 <vHandleWaitingAcknowledge+0xc6>
                EP_DHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80086f4:	66da      	str	r2, [r3, #108]	@ 0x6c
            vARPSendGratuitous();
 80086f6:	f7ff fce5 	bl	80080c4 <vARPSendGratuitous>
            vDHCP_RATimerReload( ( struct xNetworkEndPoint * ) pxEndPoint, EP_DHCPData.ulLeaseTime );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f002 fd91 	bl	800b228 <vDHCP_RATimerReload>
    }
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	0a4cb800 	.word	0x0a4cb800

08008714 <xHandleWaitingFirstDiscover>:
 *        If will send a DISCOVER message to a DHCP server, and move to the next status 'eWaitingOffer'.
 * @param[in] pxEndPoint The end-point that is getting an IP-address from a DHCP server
 * @return xGivingUp: when pdTRUE, there was a fatal error and the process can not continue;
 */
    static BaseType_t xHandleWaitingFirstDiscover( NetworkEndPoint_t * pxEndPoint )
    {
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
        BaseType_t xGivingUp = pdFALSE;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]

            if( eAnswer == eDHCPContinue )
        #endif /* ipconfigUSE_DHCP_HOOK */
        {
            /* See if prvInitialiseDHCP() has creates a socket. */
            if( EP_DHCPData.xDHCPSocket == NULL )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008726:	2b00      	cmp	r3, #0
 8008728:	d102      	bne.n	8008730 <xHandleWaitingFirstDiscover+0x1c>
            {
                xGivingUp = pdTRUE;
 800872a:	2301      	movs	r3, #1
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	e011      	b.n	8008754 <xHandleWaitingFirstDiscover+0x40>
            }
            else
            {
                /* Put 'ulIPAddress' to zero to indicate that the end-point is down. */
                EP_IPv4_SETTINGS.ulIPAddress = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]

                /* Send the first discover request. */
                EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008736:	f00d ff7b 	bl	8016630 <xTaskGetTickCount>
 800873a:	4602      	mov	r2, r0
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	671a      	str	r2, [r3, #112]	@ 0x70

                if( prvSendDHCPDiscover( pxEndPoint ) == pdPASS )
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fd07 	bl	8009154 <prvSendDHCPDiscover>
 8008746:	4603      	mov	r3, r0
 8008748:	2b01      	cmp	r3, #1
 800874a:	d103      	bne.n	8008754 <xHandleWaitingFirstDiscover+0x40>
                {
                    EP_DHCPData.eDHCPState = eWaitingOffer;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                /* The user indicates that the DHCP process does not continue. */
                xGivingUp = pdTRUE;
            }
        #endif /* ipconfigUSE_DHCP_HOOK */

        return xGivingUp;
 8008754:	68fb      	ldr	r3, [r7, #12]
    }
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <prvHandleWaitingeLeasedAddress>:
 * @brief Called by vDHCPProcessEndPoint(), this function handles the state 'eLeasedAddress'.
 *        If waits until the lease must be renewed, and then send a new request.
 * @param[in] pxEndPoint The end-point that is getting an IP-address from a DHCP server
 */
    static void prvHandleWaitingeLeasedAddress( NetworkEndPoint_t * pxEndPoint )
    {
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
        if( FreeRTOS_IsEndPointUp( pxEndPoint ) != 0 )
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f002 fb36 	bl	800add8 <FreeRTOS_IsEndPointUp>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d031      	beq.n	80087d6 <prvHandleWaitingeLeasedAddress+0x78>
        {
            /* Resend the request at the appropriate time to renew the lease. */
            prvCreateDHCPSocket( pxEndPoint );
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f942 	bl	80089fc <prvCreateDHCPSocket>

            if( EP_DHCPData.xDHCPSocket != NULL )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877e:	2b00      	cmp	r3, #0
 8008780:	d02e      	beq.n	80087e0 <prvHandleWaitingeLeasedAddress+0x82>
            {
                uint32_t ulID = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]

                if( xApplicationGetRandomNumber( &( ulID ) ) != pdFALSE )
 8008786:	f107 030c 	add.w	r3, r7, #12
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fdc6 	bl	800831c <xApplicationGetRandomNumber>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <prvHandleWaitingeLeasedAddress+0x3e>
                {
                    EP_DHCPData.ulTransactionId = ulID;
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	65da      	str	r2, [r3, #92]	@ 0x5c
                }

                EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800879c:	f00d ff48 	bl	8016630 <xTaskGetTickCount>
 80087a0:	4602      	mov	r2, r0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	671a      	str	r2, [r3, #112]	@ 0x70
                EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087ac:	675a      	str	r2, [r3, #116]	@ 0x74

                if( prvSendDHCPRequest( pxEndPoint ) == pdPASS )
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fc6e 	bl	8009090 <prvSendDHCPRequest>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d104      	bne.n	80087c4 <prvHandleWaitingeLeasedAddress+0x66>
                {
                    /* The packet was sent successfully, wait for an acknowledgement. */
                    EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2203      	movs	r2, #3
 80087be:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80087c2:	e003      	b.n	80087cc <prvHandleWaitingeLeasedAddress+0x6e>
                }
                else
                {
                    /* The packet was not sent, try sending it later. */
                    EP_DHCPData.eDHCPState = eSendDHCPRequest;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2204      	movs	r2, #4
 80087c8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "Send failed eLeasedAddress.\n" ) );
                }

                /* From now on, we should be called more often */
                vDHCP_RATimerReload( pxEndPoint, dhcpINITIAL_TIMER_PERIOD );
 80087cc:	21fa      	movs	r1, #250	@ 0xfa
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f002 fd2a 	bl	800b228 <vDHCP_RATimerReload>
        {
            /* See PR #53 on github/freertos/freertos */
            FreeRTOS_printf( ( "DHCP: lease time finished but network is down\n" ) );
            vDHCP_RATimerReload( ( struct xNetworkEndPoint * ) pxEndPoint, pdMS_TO_TICKS( 5000U ) );
        }
    }
 80087d4:	e004      	b.n	80087e0 <prvHandleWaitingeLeasedAddress+0x82>
            vDHCP_RATimerReload( ( struct xNetworkEndPoint * ) pxEndPoint, pdMS_TO_TICKS( 5000U ) );
 80087d6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f002 fd24 	bl	800b228 <vDHCP_RATimerReload>
    }
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <vDHCPProcessEndPoint>:
 *                        make one cycle.
 */
    static void vDHCPProcessEndPoint( BaseType_t xReset,
                                      BaseType_t xDoCheck,
                                      NetworkEndPoint_t * pxEndPoint )
    {
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
        BaseType_t xGivingUp = pdFALSE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]

        configASSERT( pxEndPoint != NULL );
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10d      	bne.n	800881a <vDHCPProcessEndPoint+0x32>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	b672      	cpsid	i
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	b662      	cpsie	i
 8008812:	613b      	str	r3, [r7, #16]
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	e7fd      	b.n	8008816 <vDHCPProcessEndPoint+0x2e>

        /* Is DHCP starting over? */
        if( xReset != pdFALSE )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <vDHCPProcessEndPoint+0x40>
        {
            EP_DHCPData.eDHCPState = eInitialWait;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        }

        if( ( EP_DHCPData.eDHCPState != EP_DHCPData.eExpectedState ) && ( xReset == pdFALSE ) )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008834:	429a      	cmp	r2, r3
 8008836:	d003      	beq.n	8008840 <vDHCPProcessEndPoint+0x58>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80a2 	beq.w	8008984 <vDHCPProcessEndPoint+0x19c>
        else
        {
            {
                static eDHCPState_t eLastState = eNotUsingLeasedAddress;

                if( eLastState != EP_DHCPData.eDHCPState )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8008846:	4b51      	ldr	r3, [pc, #324]	@ (800898c <vDHCPProcessEndPoint+0x1a4>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d004      	beq.n	8008858 <vDHCPProcessEndPoint+0x70>
                {
                    eLastState = EP_DHCPData.eDHCPState;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8008854:	4b4d      	ldr	r3, [pc, #308]	@ (800898c <vDHCPProcessEndPoint+0x1a4>)
 8008856:	701a      	strb	r2, [r3, #0]
                    FreeRTOS_debug_printf( ( "vDHCPProcessEndPoint: enter %d\n", EP_DHCPData.eDHCPState ) );
                }
            }

            switch( EP_DHCPData.eDHCPState )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800885e:	2b07      	cmp	r3, #7
 8008860:	d865      	bhi.n	800892e <vDHCPProcessEndPoint+0x146>
 8008862:	a201      	add	r2, pc, #4	@ (adr r2, 8008868 <vDHCPProcessEndPoint+0x80>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	08008889 	.word	0x08008889
 800886c:	08008899 	.word	0x08008899
 8008870:	080088cb 	.word	0x080088cb
 8008874:	080088d7 	.word	0x080088d7
 8008878:	080088a3 	.word	0x080088a3
 800887c:	080088e1 	.word	0x080088e1
 8008880:	0800891d 	.word	0x0800891d
 8008884:	08008925 	.word	0x08008925
                    /* Initial state.  Create the DHCP socket, timer, etc. if they
                     * have not already been created. */

                    /* Initial state.  Create the DHCP socket, timer, etc. if they
                     * have not already been created. */
                    prvInitialiseDHCP( pxEndPoint );
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f947 	bl	8008b1c <prvInitialiseDHCP>
                    EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    break;
 8008896:	e04f      	b.n	8008938 <vDHCPProcessEndPoint+0x150>

                case eWaitingSendFirstDiscover:
                    xGivingUp = xHandleWaitingFirstDiscover( pxEndPoint );
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff ff3b 	bl	8008714 <xHandleWaitingFirstDiscover>
 800889e:	6178      	str	r0, [r7, #20]
                    break;
 80088a0:	e04a      	b.n	8008938 <vDHCPProcessEndPoint+0x150>

                case eSendDHCPRequest:

                    if( prvSendDHCPRequest( pxEndPoint ) == pdPASS )
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fbf4 	bl	8009090 <prvSendDHCPRequest>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d141      	bne.n	8008932 <vDHCPProcessEndPoint+0x14a>
                    {
                        /* Send succeeded, go to state 'eWaitingAcknowledge'. */
                        EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 80088ae:	f00d febf 	bl	8016630 <xTaskGetTickCount>
 80088b2:	4602      	mov	r2, r0
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	671a      	str	r2, [r3, #112]	@ 0x70
                        EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088be:	675a      	str	r2, [r3, #116]	@ 0x74
                        EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2203      	movs	r2, #3
 80088c4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                        /* Either the creation of a message buffer failed, or sendto().
                         * Try again in the next cycle. */
                        FreeRTOS_debug_printf( ( "Send failed during eSendDHCPRequest.\n" ) );
                    }

                    break;
 80088c8:	e033      	b.n	8008932 <vDHCPProcessEndPoint+0x14a>

                case eWaitingOffer:
                    xGivingUp = xHandleWaitingOffer( pxEndPoint, xDoCheck );
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fe42 	bl	8008556 <xHandleWaitingOffer>
 80088d2:	6178      	str	r0, [r7, #20]
                    break;
 80088d4:	e030      	b.n	8008938 <vDHCPProcessEndPoint+0x150>

                case eWaitingAcknowledge:
                    vHandleWaitingAcknowledge( pxEndPoint, xDoCheck );
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff fea9 	bl	8008630 <vHandleWaitingAcknowledge>
                    break;
 80088de:	e02b      	b.n	8008938 <vDHCPProcessEndPoint+0x150>

                    #if ( ipconfigDHCP_FALL_BACK_AUTO_IP != 0 )
                        case eGetLinkLayerAddress:

                            if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 80088e0:	f00d fea6 	bl	8016630 <xTaskGetTickCount>
 80088e4:	4602      	mov	r2, r0
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ea:	1ad2      	subs	r2, r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d920      	bls.n	8008936 <vDHCPProcessEndPoint+0x14e>
                            {
                                if( xARPHadIPClash == pdFALSE )
 80088f4:	4b26      	ldr	r3, [pc, #152]	@ (8008990 <vDHCPProcessEndPoint+0x1a8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <vDHCPProcessEndPoint+0x124>
                                    iptraceDHCP_SUCCEEDED( EP_DHCPData.ulOfferedIPAddress );

                                    /* Auto-IP succeeded, the default configured IP-address will
                                     * be used.  Now call vIPNetworkUpCalls() to send the
                                     * network-up event and start the ARP timer. */
                                    vIPNetworkUpCalls( pxEndPoint );
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fdf1 	bl	800a4e4 <vIPNetworkUpCalls>

                                    EP_DHCPData.eDHCPState = eNotUsingLeasedAddress;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2207      	movs	r2, #7
 8008906:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                                    /* Setting an IP address manually so set to not using leased
                                     * address mode. */
                                    EP_DHCPData.eDHCPState = eGetLinkLayerAddress;
                                }
                            }
                            break;
 800890a:	e014      	b.n	8008936 <vDHCPProcessEndPoint+0x14e>
                                    prvPrepareLinkLayerIPLookUp( pxEndPoint );
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fc9f 	bl	8009250 <prvPrepareLinkLayerIPLookUp>
                                    EP_DHCPData.eDHCPState = eGetLinkLayerAddress;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2205      	movs	r2, #5
 8008916:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                            break;
 800891a:	e00c      	b.n	8008936 <vDHCPProcessEndPoint+0x14e>
                    #endif /* ipconfigDHCP_FALL_BACK_AUTO_IP */

                case eLeasedAddress:
                    prvHandleWaitingeLeasedAddress( pxEndPoint );
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff ff1e 	bl	800875e <prvHandleWaitingeLeasedAddress>
                    break;
 8008922:	e009      	b.n	8008938 <vDHCPProcessEndPoint+0x150>

                case eNotUsingLeasedAddress:

                    vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 8008924:	2100      	movs	r1, #0
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f002 fd2c 	bl	800b384 <vIPSetDHCP_RATimerEnableState>
                    break;
 800892c:	e004      	b.n	8008938 <vDHCPProcessEndPoint+0x150>

                default:
                    /* Lint: all options are included. */
                    break;
 800892e:	bf00      	nop
 8008930:	e002      	b.n	8008938 <vDHCPProcessEndPoint+0x150>
                    break;
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <vDHCPProcessEndPoint+0x150>
                            break;
 8008936:	bf00      	nop
            }

            {
                static eDHCPState_t eLastState = eNotUsingLeasedAddress;

                if( eLastState != EP_DHCPData.eDHCPState )
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800893e:	4b15      	ldr	r3, [pc, #84]	@ (8008994 <vDHCPProcessEndPoint+0x1ac>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d004      	beq.n	8008950 <vDHCPProcessEndPoint+0x168>
                {
                    eLastState = EP_DHCPData.eDHCPState;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800894c:	4b11      	ldr	r3, [pc, #68]	@ (8008994 <vDHCPProcessEndPoint+0x1ac>)
 800894e:	701a      	strb	r2, [r3, #0]
                    FreeRTOS_debug_printf( ( "vDHCPProcessEndPoint: exit %d\n", EP_DHCPData.eDHCPState ) );
                }
            }

            if( xGivingUp != pdFALSE )
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d016      	beq.n	8008984 <vDHCPProcessEndPoint+0x19c>
                /* xGivingUp became true either because of a time-out, or because
                 * xApplicationDHCPHook() returned another value than 'eDHCPContinue',
                 * meaning that the conversion is cancelled from here. */

                /* Revert to static IP address. */
                taskENTER_CRITICAL();
 8008956:	f00f fb39 	bl	8017fcc <vPortEnterCritical>
                {
                    EP_IPv4_SETTINGS.ulIPAddress = pxEndPoint->ipv4_defaults.ulIPAddress;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69da      	ldr	r2, [r3, #28]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
                    iptraceDHCP_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( pxEndPoint->ipv4_defaults.ulIPAddress );
                }
                taskEXIT_CRITICAL();
 8008962:	f00f fb69 	bl	8018038 <vPortExitCritical>

                EP_DHCPData.eDHCPState = eNotUsingLeasedAddress;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2207      	movs	r2, #7
 800896a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800896e:	2100      	movs	r1, #0
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f002 fd07 	bl	800b384 <vIPSetDHCP_RATimerEnableState>

                /* DHCP failed, the default configured IP-address will be used. Now
                 * call vIPNetworkUpCalls() to send the network-up event and start the ARP
                 * timer. */
                vIPNetworkUpCalls( pxEndPoint );
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 fdb4 	bl	800a4e4 <vIPNetworkUpCalls>

                /* Close socket to ensure packets don't queue on it. */
                prvCloseDHCPSocket( pxEndPoint );
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f80b 	bl	8008998 <prvCloseDHCPSocket>
            }
        }
    }
 8008982:	e7ff      	b.n	8008984 <vDHCPProcessEndPoint+0x19c>
 8008984:	bf00      	nop
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000010 	.word	0x20000010
 8008990:	20001028 	.word	0x20001028
 8008994:	20000011 	.word	0x20000011

08008998 <prvCloseDHCPSocket>:
 * @brief Close the DHCP socket, but only when there are no other end-points
 *        using it.
 * @param[in] pxEndPoint The end-point that stops using the socket.
 */
    static void prvCloseDHCPSocket( NetworkEndPoint_t * pxEndPoint )
    {
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
        if( ( EP_DHCPData.xDHCPSocket == NULL ) || ( EP_DHCPData.xDHCPSocket != xDHCPv4Socket ) )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d01f      	beq.n	80089ea <prvCloseDHCPSocket+0x52>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80089b0:	4b10      	ldr	r3, [pc, #64]	@ (80089f4 <prvCloseDHCPSocket+0x5c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d118      	bne.n	80089ea <prvCloseDHCPSocket+0x52>
        {
            /* the socket can not be closed. */
        }
        else if( xDHCPSocketUserCount > 0 )
 80089b8:	4b0f      	ldr	r3, [pc, #60]	@ (80089f8 <prvCloseDHCPSocket+0x60>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd14      	ble.n	80089ea <prvCloseDHCPSocket+0x52>
        {
            xDHCPSocketUserCount--;
 80089c0:	4b0d      	ldr	r3, [pc, #52]	@ (80089f8 <prvCloseDHCPSocket+0x60>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	4a0c      	ldr	r2, [pc, #48]	@ (80089f8 <prvCloseDHCPSocket+0x60>)
 80089c8:	6013      	str	r3, [r2, #0]

            if( xDHCPSocketUserCount == 0 )
 80089ca:	4b0b      	ldr	r3, [pc, #44]	@ (80089f8 <prvCloseDHCPSocket+0x60>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d107      	bne.n	80089e2 <prvCloseDHCPSocket+0x4a>
            {
                /* This modules runs from the IP-task. Use the internal
                 * function 'vSocketClose()` to close the socket. */
                ( void ) vSocketClose( xDHCPv4Socket );
 80089d2:	4b08      	ldr	r3, [pc, #32]	@ (80089f4 <prvCloseDHCPSocket+0x5c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f004 fa62 	bl	800cea0 <vSocketClose>
                xDHCPv4Socket = NULL;
 80089dc:	4b05      	ldr	r3, [pc, #20]	@ (80089f4 <prvCloseDHCPSocket+0x5c>)
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
            }

            EP_DHCPData.xDHCPSocket = NULL;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        FreeRTOS_printf( ( "prvCloseDHCPSocket[%02x-%02x]: %s, user count %d\n",
                           pxEndPoint->xMACAddress.ucBytes[ 4 ],
                           pxEndPoint->xMACAddress.ucBytes[ 5 ],
                           ( xDHCPv4Socket != NULL ) ? "open" : "closed",
                           ( int ) xDHCPSocketUserCount ) );
    }
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20001044 	.word	0x20001044
 80089f8:	20001048 	.word	0x20001048

080089fc <prvCreateDHCPSocket>:
/**
 * @brief Create a DHCP socket with the defined timeouts. The same socket
 *        will be shared among all end-points that need DHCP.
 */
    _static void prvCreateDHCPSocket( NetworkEndPoint_t * pxEndPoint )
    {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08e      	sub	sp, #56	@ 0x38
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	6078      	str	r0, [r7, #4]
        struct freertos_sockaddr xAddress;
        BaseType_t xReturn;
        TickType_t xTimeoutTime = ( TickType_t ) 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60fb      	str	r3, [r7, #12]

        if( ( xDHCPv4Socket != NULL ) && ( EP_DHCPData.xDHCPSocket == xDHCPv4Socket ) )
 8008a08:	4b42      	ldr	r3, [pc, #264]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <prvCreateDHCPSocket+0x22>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008a16:	4b3f      	ldr	r3, [pc, #252]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d075      	beq.n	8008b0a <prvCreateDHCPSocket+0x10e>
        {
            /* the socket is still valid. */
        }
        else if( xDHCPv4Socket == NULL ) /* Create the socket, if it has not already been created. */
 8008a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d166      	bne.n	8008af4 <prvCreateDHCPSocket+0xf8>
        {
            xDHCPv4Socket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8008a26:	2211      	movs	r2, #17
 8008a28:	2102      	movs	r1, #2
 8008a2a:	2002      	movs	r0, #2
 8008a2c:	f003 fe34 	bl	800c698 <FreeRTOS_socket>
 8008a30:	4603      	mov	r3, r0
 8008a32:	4a38      	ldr	r2, [pc, #224]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008a34:	6013      	str	r3, [r2, #0]
            configASSERT( xSocketValid( xDHCPv4Socket ) == pdTRUE );
 8008a36:	4b37      	ldr	r3, [pc, #220]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f005 fa98 	bl	800df70 <xSocketValid>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d00d      	beq.n	8008a62 <prvCreateDHCPSocket+0x66>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	b672      	cpsid	i
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	b662      	cpsie	i
 8008a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	e7fd      	b.n	8008a5e <prvCreateDHCPSocket+0x62>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            if( xSocketValid( xDHCPv4Socket ) == pdTRUE )
 8008a62:	4b2c      	ldr	r3, [pc, #176]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f005 fa82 	bl	800df70 <xSocketValid>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d138      	bne.n	8008ae4 <prvCreateDHCPSocket+0xe8>
            {
                /* Ensure the Rx and Tx timeouts are zero as the DHCP executes in the
                 * context of the IP task. */
                ( void ) FreeRTOS_setsockopt( xDHCPv4Socket, 0, FREERTOS_SO_RCVTIMEO, &( xTimeoutTime ), sizeof( TickType_t ) );
 8008a72:	4b28      	ldr	r3, [pc, #160]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	2204      	movs	r2, #4
 8008a7c:	9200      	str	r2, [sp, #0]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	f004 fce5 	bl	800d450 <FreeRTOS_setsockopt>
                ( void ) FreeRTOS_setsockopt( xDHCPv4Socket, 0, FREERTOS_SO_SNDTIMEO, &( xTimeoutTime ), sizeof( TickType_t ) );
 8008a86:	4b23      	ldr	r3, [pc, #140]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	f107 030c 	add.w	r3, r7, #12
 8008a8e:	2204      	movs	r2, #4
 8008a90:	9200      	str	r2, [sp, #0]
 8008a92:	2201      	movs	r2, #1
 8008a94:	2100      	movs	r1, #0
 8008a96:	f004 fcdb 	bl	800d450 <FreeRTOS_setsockopt>

                ( void ) memset( &xAddress, 0, sizeof( xAddress ) );
 8008a9a:	f107 0310 	add.w	r3, r7, #16
 8008a9e:	2218      	movs	r2, #24
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f010 f85e 	bl	8018b64 <memset>
                xAddress.sin_family = FREERTOS_AF_INET4;
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	747b      	strb	r3, [r7, #17]
                xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8008aac:	2318      	movs	r3, #24
 8008aae:	743b      	strb	r3, [r7, #16]
                /* Bind to the standard DHCP client port. */
                xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT_IPv4;
 8008ab0:	2344      	movs	r3, #68	@ 0x44
 8008ab2:	827b      	strh	r3, [r7, #18]
                xReturn = vSocketBind( xDHCPv4Socket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008ab4:	4b17      	ldr	r3, [pc, #92]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	f107 0110 	add.w	r1, r7, #16
 8008abc:	2300      	movs	r3, #0
 8008abe:	2218      	movs	r2, #24
 8008ac0:	f004 f974 	bl	800cdac <vSocketBind>
 8008ac4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                xDHCPSocketUserCount = 1;
 8008ac6:	4b14      	ldr	r3, [pc, #80]	@ (8008b18 <prvCreateDHCPSocket+0x11c>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
                EP_DHCPData.xDHCPSocket = xDHCPv4Socket;
 8008acc:	4b11      	ldr	r3, [pc, #68]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                FreeRTOS_printf( ( "DHCP-socket[%02x-%02x]: DHCP Socket Create\n",
                                   pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );

                if( xReturn != 0 )
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d016      	beq.n	8008b0a <prvCreateDHCPSocket+0x10e>
                {
                    /* Binding failed, close the socket again. */
                    prvCloseDHCPSocket( pxEndPoint );
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ff5b 	bl	8008998 <prvCloseDHCPSocket>
        FreeRTOS_printf( ( "prvCreateDHCPSocket[%02x-%02x]: %s, user count %d\n",
                           pxEndPoint->xMACAddress.ucBytes[ 4 ],
                           pxEndPoint->xMACAddress.ucBytes[ 5 ],
                           ( xDHCPv4Socket != NULL ) ? "open" : "closed",
                           ( int ) xDHCPSocketUserCount ) );
    }
 8008ae2:	e012      	b.n	8008b0a <prvCreateDHCPSocket+0x10e>
                xDHCPv4Socket = NULL;
 8008ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	601a      	str	r2, [r3, #0]
                EP_DHCPData.xDHCPSocket = NULL;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
 8008af2:	e00a      	b.n	8008b0a <prvCreateDHCPSocket+0x10e>
            xDHCPSocketUserCount++;
 8008af4:	4b08      	ldr	r3, [pc, #32]	@ (8008b18 <prvCreateDHCPSocket+0x11c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	4a07      	ldr	r2, [pc, #28]	@ (8008b18 <prvCreateDHCPSocket+0x11c>)
 8008afc:	6013      	str	r3, [r2, #0]
            EP_DHCPData.xDHCPSocket = xDHCPv4Socket;
 8008afe:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <prvCreateDHCPSocket+0x118>)
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
 8008b08:	e7ff      	b.n	8008b0a <prvCreateDHCPSocket+0x10e>
 8008b0a:	bf00      	nop
 8008b0c:	3730      	adds	r7, #48	@ 0x30
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20001044 	.word	0x20001044
 8008b18:	20001048 	.word	0x20001048

08008b1c <prvInitialiseDHCP>:
 *        begin the transaction.
 *
 * @param[in] pxEndPoint The end-point that needs DHCP.
 */
    static void prvInitialiseDHCP( NetworkEndPoint_t * pxEndPoint )
    {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
        /* Initialise the parameters that will be set by the DHCP process. Per
         * https://www.ietf.org/rfc/rfc2131.txt Transaction ID should be a random
         * value chosen by the client. */

        /* Check for random number generator API failure. */
        if( xApplicationGetRandomNumber( &( EP_DHCPData.ulTransactionId ) ) != pdFALSE )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	335c      	adds	r3, #92	@ 0x5c
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff fbf7 	bl	800831c <xApplicationGetRandomNumber>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d013      	beq.n	8008b5c <prvInitialiseDHCP+0x40>
        {
            EP_DHCPData.xUseBroadcast = 0;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	679a      	str	r2, [r3, #120]	@ 0x78
            EP_DHCPData.ulOfferedIPAddress = 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	661a      	str	r2, [r3, #96]	@ 0x60
            EP_DHCPData.ulDHCPServerAddress = 0U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	669a      	str	r2, [r3, #104]	@ 0x68
            EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b4c:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Create the DHCP socket if it has not already been created. */
            prvCreateDHCPSocket( pxEndPoint );
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff ff54 	bl	80089fc <prvCreateDHCPSocket>
            FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", ( unsigned long ) dhcpINITIAL_TIMER_PERIOD ) );
            vDHCP_RATimerReload( pxEndPoint, dhcpINITIAL_TIMER_PERIOD );
 8008b54:	21fa      	movs	r1, #250	@ 0xfa
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f002 fb66 	bl	800b228 <vDHCP_RATimerReload>
        }
        else
        {
            FreeRTOS_debug_printf( ( "prvInitialiseDHCP: failed to generate a random Transaction ID\n" ) );
        }
    }
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <vProcessHandleOption>:
 *                                  dhcpIPv4_MESSAGE_TYPE_OPTION_CODE option.
 */
    static void vProcessHandleOption( NetworkEndPoint_t * pxEndPoint,
                                      ProcessSet_t * pxSet,
                                      BaseType_t xExpectedMessageType )
    {
 8008b64:	b480      	push	{r7}
 8008b66:	b08b      	sub	sp, #44	@ 0x2c
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
        /* Option-specific handling. */

        switch( pxSet->ucOptionCode )
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b36      	cmp	r3, #54	@ 0x36
 8008b76:	f000 80a6 	beq.w	8008cc6 <vProcessHandleOption+0x162>
 8008b7a:	2b36      	cmp	r3, #54	@ 0x36
 8008b7c:	f300 80d6 	bgt.w	8008d2c <vProcessHandleOption+0x1c8>
 8008b80:	2b35      	cmp	r3, #53	@ 0x35
 8008b82:	d012      	beq.n	8008baa <vProcessHandleOption+0x46>
 8008b84:	2b35      	cmp	r3, #53	@ 0x35
 8008b86:	f300 80d1 	bgt.w	8008d2c <vProcessHandleOption+0x1c8>
 8008b8a:	2b33      	cmp	r3, #51	@ 0x33
 8008b8c:	f000 80b8 	beq.w	8008d00 <vProcessHandleOption+0x19c>
 8008b90:	2b33      	cmp	r3, #51	@ 0x33
 8008b92:	f300 80cb 	bgt.w	8008d2c <vProcessHandleOption+0x1c8>
 8008b96:	2b06      	cmp	r3, #6
 8008b98:	d042      	beq.n	8008c20 <vProcessHandleOption+0xbc>
 8008b9a:	2b06      	cmp	r3, #6
 8008b9c:	f300 80c6 	bgt.w	8008d2c <vProcessHandleOption+0x1c8>
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d029      	beq.n	8008bf8 <vProcessHandleOption+0x94>
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d031      	beq.n	8008c0c <vProcessHandleOption+0xa8>

            default:

                /* Not interested in this field. */

                break;
 8008ba8:	e0c0      	b.n	8008d2c <vProcessHandleOption+0x1c8>
                if( pxSet->pucByte[ pxSet->uxIndex ] == ( uint8_t ) xExpectedMessageType )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	699a      	ldr	r2, [r3, #24]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d105      	bne.n	8008bca <vProcessHandleOption+0x66>
                    pxSet->ulProcessed++;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	615a      	str	r2, [r3, #20]
                break;
 8008bc8:	e0bb      	b.n	8008d42 <vProcessHandleOption+0x1de>
                    if( pxSet->pucByte[ pxSet->uxIndex ] == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b06      	cmp	r3, #6
 8008bd8:	d10a      	bne.n	8008bf0 <vProcessHandleOption+0x8c>
                        if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b05      	cmp	r3, #5
 8008bde:	d107      	bne.n	8008bf0 <vProcessHandleOption+0x8c>
                            EP_DHCPData.eDHCPState = eInitialWait;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                            EP_DHCPData.eExpectedState = eInitialWait;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    pxSet->uxLength = 0;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	60da      	str	r2, [r3, #12]
                break;
 8008bf6:	e0a4      	b.n	8008d42 <vProcessHandleOption+0x1de>
                if( pxSet->uxLength == sizeof( uint32_t ) )
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	f040 8097 	bne.w	8008d30 <vProcessHandleOption+0x1cc>
                    EP_IPv4_SETTINGS.ulNetMask = pxSet->ulParameter;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	691a      	ldr	r2, [r3, #16]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	605a      	str	r2, [r3, #4]
                break;
 8008c0a:	e091      	b.n	8008d30 <vProcessHandleOption+0x1cc>
                if( pxSet->uxLength >= sizeof( uint32_t ) )
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	f240 808f 	bls.w	8008d34 <vProcessHandleOption+0x1d0>
                    EP_IPv4_SETTINGS.ulGatewayAddress = pxSet->ulParameter;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	691a      	ldr	r2, [r3, #16]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	609a      	str	r2, [r3, #8]
                break;
 8008c1e:	e089      	b.n	8008d34 <vProcessHandleOption+0x1d0>
                if( pxSet->uxLength >= sizeof( uint32_t ) )
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	f240 8087 	bls.w	8008d38 <vProcessHandleOption+0x1d4>
                    size_t uxTargetIndex = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	623b      	str	r3, [r7, #32]
                    size_t uxDNSCount = pxSet->uxLength / sizeof( uint32_t );
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	089b      	lsrs	r3, r3, #2
 8008c34:	61fb      	str	r3, [r7, #28]
                    size_t uxByteIndex = pxSet->uxIndex;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	61bb      	str	r3, [r7, #24]
                    void * pvCopyDest = &( pxSet->ulParameter );
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	3310      	adds	r3, #16
 8008c40:	617b      	str	r3, [r7, #20]
                    if( uxDNSCount > ipconfigENDPOINT_DNS_ADDRESS_COUNT )
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d901      	bls.n	8008c4c <vProcessHandleOption+0xe8>
                        uxDNSCount = ipconfigENDPOINT_DNS_ADDRESS_COUNT;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	61fb      	str	r3, [r7, #28]
                    for( uxSourceIndex = 0U; uxSourceIndex < uxDNSCount; uxSourceIndex++ )
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c50:	e023      	b.n	8008c9a <vProcessHandleOption+0x136>
                        const void * pvCopySource = &( pxSet->pucByte[ uxByteIndex ] );
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	4413      	add	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxSet->ulParameter ) );
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	601a      	str	r2, [r3, #0]
                        if( ( pxSet->ulParameter != FREERTOS_INADDR_ANY ) && ( pxSet->ulParameter != FREERTOS_INADDR_BROADCAST ) )
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00f      	beq.n	8008c8e <vProcessHandleOption+0x12a>
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d00a      	beq.n	8008c8e <vProcessHandleOption+0x12a>
                            EP_IPv4_SETTINGS.ulDNSServerAddresses[ uxTargetIndex ] = pxSet->ulParameter;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	68f9      	ldr	r1, [r7, #12]
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	3302      	adds	r3, #2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	605a      	str	r2, [r3, #4]
                            uxTargetIndex++;
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	623b      	str	r3, [r7, #32]
                        uxByteIndex += sizeof( uint32_t );
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	3304      	adds	r3, #4
 8008c92:	61bb      	str	r3, [r7, #24]
                    for( uxSourceIndex = 0U; uxSourceIndex < uxDNSCount; uxSourceIndex++ )
 8008c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c96:	3301      	adds	r3, #1
 8008c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d3d7      	bcc.n	8008c52 <vProcessHandleOption+0xee>
                    while( uxTargetIndex < ipconfigENDPOINT_DNS_ADDRESS_COUNT )
 8008ca2:	e009      	b.n	8008cb8 <vProcessHandleOption+0x154>
                        EP_IPv4_SETTINGS.ulDNSServerAddresses[ uxTargetIndex ] = 0U;
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	3302      	adds	r3, #2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	2200      	movs	r2, #0
 8008cb0:	605a      	str	r2, [r3, #4]
                        uxTargetIndex++;
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	623b      	str	r3, [r7, #32]
                    while( uxTargetIndex < ipconfigENDPOINT_DNS_ADDRESS_COUNT )
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d9f2      	bls.n	8008ca4 <vProcessHandleOption+0x140>
                    EP_IPv4_SETTINGS.ucDNSIndex = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	761a      	strb	r2, [r3, #24]
                break;
 8008cc4:	e038      	b.n	8008d38 <vProcessHandleOption+0x1d4>
                if( pxSet->uxLength == sizeof( uint32_t ) )
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d136      	bne.n	8008d3c <vProcessHandleOption+0x1d8>
                    if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d109      	bne.n	8008ce8 <vProcessHandleOption+0x184>
                        pxSet->ulProcessed++;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	615a      	str	r2, [r3, #20]
                        EP_DHCPData.ulDHCPServerAddress = pxSet->ulParameter;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	691a      	ldr	r2, [r3, #16]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	669a      	str	r2, [r3, #104]	@ 0x68
                break;
 8008ce6:	e029      	b.n	8008d3c <vProcessHandleOption+0x1d8>
                        if( EP_DHCPData.ulDHCPServerAddress == pxSet->ulParameter )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d123      	bne.n	8008d3c <vProcessHandleOption+0x1d8>
                            pxSet->ulProcessed++;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	615a      	str	r2, [r3, #20]
                break;
 8008cfe:	e01d      	b.n	8008d3c <vProcessHandleOption+0x1d8>
                if( pxSet->uxLength == sizeof( EP_DHCPData.ulLeaseTime ) )
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d11b      	bne.n	8008d40 <vProcessHandleOption+0x1dc>
                    EP_DHCPData.ulLeaseTime = FreeRTOS_ntohl( pxSet->ulParameter );
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	691a      	ldr	r2, [r3, #16]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	66da      	str	r2, [r3, #108]	@ 0x6c
                    EP_DHCPData.ulLeaseTime >>= 1U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d14:	085a      	lsrs	r2, r3, #1
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	66da      	str	r2, [r3, #108]	@ 0x6c
                    EP_DHCPData.ulLeaseTime = ( uint32_t ) configTICK_RATE_HZ * ( uint32_t ) EP_DHCPData.ulLeaseTime;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d22:	fb03 f202 	mul.w	r2, r3, r2
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	66da      	str	r2, [r3, #108]	@ 0x6c
                break;
 8008d2a:	e009      	b.n	8008d40 <vProcessHandleOption+0x1dc>
                break;
 8008d2c:	bf00      	nop
 8008d2e:	e008      	b.n	8008d42 <vProcessHandleOption+0x1de>
                break;
 8008d30:	bf00      	nop
 8008d32:	e006      	b.n	8008d42 <vProcessHandleOption+0x1de>
                break;
 8008d34:	bf00      	nop
 8008d36:	e004      	b.n	8008d42 <vProcessHandleOption+0x1de>
                break;
 8008d38:	bf00      	nop
 8008d3a:	e002      	b.n	8008d42 <vProcessHandleOption+0x1de>
                break;
 8008d3c:	bf00      	nop
 8008d3e:	e000      	b.n	8008d42 <vProcessHandleOption+0x1de>
                break;
 8008d40:	bf00      	nop
        }
    }
 8008d42:	bf00      	nop
 8008d44:	372c      	adds	r7, #44	@ 0x2c
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <prvIsValidDHCPResponse>:
 * @param[in] pxDHCPMessage  The DHCP message.
 *
 * @return pdPASS if the DHCP response has correct parameters; pdFAIL otherwise.
 */
    static BaseType_t prvIsValidDHCPResponse( const DHCPMessage_IPv4_t * pxDHCPMessage )
    {
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdPASS;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	60fb      	str	r3, [r7, #12]

        if( ( pxDHCPMessage->ulDHCPCookie != ( uint32_t ) dhcpCOOKIE ) ||
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008d62:	4a12      	ldr	r2, [pc, #72]	@ (8008dac <prvIsValidDHCPResponse+0x5c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d117      	bne.n	8008d98 <prvIsValidDHCPResponse+0x48>
            ( pxDHCPMessage->ucOpcode != ( uint8_t ) dhcpREPLY_OPCODE ) ||
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
        if( ( pxDHCPMessage->ulDHCPCookie != ( uint32_t ) dhcpCOOKIE ) ||
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d113      	bne.n	8008d98 <prvIsValidDHCPResponse+0x48>
            ( pxDHCPMessage->ucAddressType != ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET ) ||
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	785b      	ldrb	r3, [r3, #1]
            ( pxDHCPMessage->ucOpcode != ( uint8_t ) dhcpREPLY_OPCODE ) ||
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d10f      	bne.n	8008d98 <prvIsValidDHCPResponse+0x48>
            ( pxDHCPMessage->ucAddressLength != ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH ) ||
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	789b      	ldrb	r3, [r3, #2]
            ( pxDHCPMessage->ucAddressType != ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET ) ||
 8008d7c:	2b06      	cmp	r3, #6
 8008d7e:	d10b      	bne.n	8008d98 <prvIsValidDHCPResponse+0x48>
            ( ( FreeRTOS_ntohl( pxDHCPMessage->ulYourIPAddress_yiaddr ) & 0xFFU ) == 0xFFU ) ||
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	b2db      	uxtb	r3, r3
            ( pxDHCPMessage->ucAddressLength != ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH ) ||
 8008d86:	2bff      	cmp	r3, #255	@ 0xff
 8008d88:	d006      	beq.n	8008d98 <prvIsValidDHCPResponse+0x48>
            ( ( ( pxDHCPMessage->ulYourIPAddress_yiaddr & 0x7FU ) ^ 0x7FU ) == 0x00U ) )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	43db      	mvns	r3, r3
 8008d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
            ( ( FreeRTOS_ntohl( pxDHCPMessage->ulYourIPAddress_yiaddr ) & 0xFFU ) == 0xFFU ) ||
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <prvIsValidDHCPResponse+0x4c>
             * Unexpected opcode OR
             * Incorrect address type OR
             * Incorrect address length OR
             * The DHCP server is trying to assign a broadcast address to the device OR
             * The DHCP server is trying to assign a localhost address to the device. */
            xReturn = pdFAIL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
    }
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	63825363 	.word	0x63825363

08008db0 <xProcessCheckOption>:
 *
 * @return pdPASS: 1 when the option must be analysed, 0 when the option
 *                 must be skipped, and -1 when parsing must stop.
 */
    static BaseType_t xProcessCheckOption( ProcessSet_t * pxSet )
    {
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = -1;
 8008db8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dbc:	617b      	str	r3, [r7, #20]

        do
        {
            if( pxSet->ucOptionCode == ( uint8_t ) dhcpOPTION_END_BYTE )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2bff      	cmp	r3, #255	@ 0xff
 8008dc4:	d04a      	beq.n	8008e5c <xProcessCheckOption+0xac>
                /* Ready, the last byte has been seen.
                 * Return -1 so that the parsing will stop. */
                break;
            }

            if( pxSet->ucOptionCode == ( uint8_t ) dhcpIPv4_ZERO_PAD_OPTION_CODE )
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d107      	bne.n	8008dde <xProcessCheckOption+0x2e>
            {
                /* The value zero is used as a pad byte,
                 * it is not followed by a length byte. */
                pxSet->uxIndex++;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	605a      	str	r2, [r3, #4]
                /* Return zero to skip this option. */
                xResult = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	617b      	str	r3, [r7, #20]
                break;
 8008ddc:	e045      	b.n	8008e6a <xProcessCheckOption+0xba>
            }

            /* Stop if the response is malformed. */
            if( ( pxSet->uxIndex + 1U ) >= pxSet->uxPayloadDataLength )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d239      	bcs.n	8008e60 <xProcessCheckOption+0xb0>
                /* The length byte is missing, stop parsing. */
                break;
            }

            /* Fetch the length byte. */
            pxSet->uxLength = ( size_t ) pxSet->pucByte[ pxSet->uxIndex + 1U ];
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	3301      	adds	r3, #1
 8008df6:	4413      	add	r3, r2
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60da      	str	r2, [r3, #12]
            pxSet->uxIndex = pxSet->uxIndex + 2U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	1c9a      	adds	r2, r3, #2
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	605a      	str	r2, [r3, #4]

            if( !( ( ( pxSet->uxIndex + pxSet->uxLength ) - 1U ) < pxSet->uxPayloadDataLength ) )
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	4413      	add	r3, r2
 8008e14:	1e5a      	subs	r2, r3, #1
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d222      	bcs.n	8008e64 <xProcessCheckOption+0xb4>
                break;
            }

            /* In most cases, a 4-byte network-endian parameter follows,
             * just get it once here and use later. */
            if( pxSet->uxLength >= sizeof( pxSet->ulParameter ) )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d90e      	bls.n	8008e44 <xProcessCheckOption+0x94>
                /*
                 * Use helper variables for memcpy() to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                const void * pvCopySource = &( pxSet->pucByte[ pxSet->uxIndex ] );
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699a      	ldr	r2, [r3, #24]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	4413      	add	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
                void * pvCopyDest = &( pxSet->ulParameter );
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3310      	adds	r3, #16
 8008e36:	60fb      	str	r3, [r7, #12]
                ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxSet->ulParameter ) );
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e002      	b.n	8008e4a <xProcessCheckOption+0x9a>
                /* 'uxIndex' will be increased at the end of this loop. */
            }
            else
            {
                pxSet->ulParameter = 0;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	611a      	str	r2, [r3, #16]
            }

            /* Confirm uxIndex is still a valid index after adjustments to uxIndex above */
            if( !( pxSet->uxIndex < pxSet->uxPayloadDataLength ) )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d208      	bcs.n	8008e68 <xProcessCheckOption+0xb8>
            {
                break;
            }

            /* Return 1 so that the option will be processed. */
            xResult = 1;
 8008e56:	2301      	movs	r3, #1
 8008e58:	617b      	str	r3, [r7, #20]
            /* Try to please CBMC with a break statement here. */
            break;
 8008e5a:	e006      	b.n	8008e6a <xProcessCheckOption+0xba>
                break;
 8008e5c:	bf00      	nop
 8008e5e:	e004      	b.n	8008e6a <xProcessCheckOption+0xba>
                break;
 8008e60:	bf00      	nop
 8008e62:	e002      	b.n	8008e6a <xProcessCheckOption+0xba>
                break;
 8008e64:	bf00      	nop
 8008e66:	e000      	b.n	8008e6a <xProcessCheckOption+0xba>
                break;
 8008e68:	bf00      	nop
        } while( ipFALSE_BOOL );

        return xResult;
 8008e6a:	697b      	ldr	r3, [r7, #20]
    }
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <prvProcessDHCPReplies>:
 *
 * @return pdPASS: if DHCP options are received correctly; pdFAIL: Otherwise.
 */
    static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType,
                                             NetworkEndPoint_t * pxEndPoint )
    {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b092      	sub	sp, #72	@ 0x48
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
        uint8_t * pucUDPPayload;
        int32_t lBytes;
        const DHCPMessage_IPv4_t * pxDHCPMessage;
        BaseType_t xReturn = pdFALSE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const uint32_t ulMandatoryOptions = 2U; /* DHCP server address, and the correct DHCP message type must be present in the options. */
 8008e86:	2302      	movs	r3, #2
 8008e88:	63bb      	str	r3, [r7, #56]	@ 0x38
        ProcessSet_t xSet;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8008e8a:	f107 030c 	add.w	r3, r7, #12
 8008e8e:	221c      	movs	r2, #28
 8008e90:	2100      	movs	r1, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f00f fe66 	bl	8018b64 <memset>

        /* Passing the address of a pointer (pucUDPPayload) because FREERTOS_ZERO_COPY is used. */
        lBytes = FreeRTOS_recvfrom( EP_DHCPData.xDHCPSocket, &pucUDPPayload, 0U, FREERTOS_ZERO_COPY, NULL, NULL );
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008e9e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	2301      	movs	r3, #1
 8008eac:	2200      	movs	r2, #0
 8008eae:	f003 fd20 	bl	800c8f2 <FreeRTOS_recvfrom>
 8008eb2:	6378      	str	r0, [r7, #52]	@ 0x34

        if( lBytes > 0 )
 8008eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	dd5e      	ble.n	8008f78 <prvProcessDHCPReplies+0x100>
            /* Map a DHCP structure onto the received data. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxDHCPMessage = ( ( DHCPMessage_IPv4_t * ) pucUDPPayload );
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Sanity check. */
            if( lBytes < ( int32_t ) sizeof( DHCPMessage_IPv4_t ) )
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec0:	2bef      	cmp	r3, #239	@ 0xef
 8008ec2:	dd52      	ble.n	8008f6a <prvProcessDHCPReplies+0xf2>
            {
                /* Not enough bytes. */
            }
            else if( prvIsValidDHCPResponse( pxDHCPMessage ) == pdFAIL )
 8008ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ec6:	f7ff ff43 	bl	8008d50 <prvIsValidDHCPResponse>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d04c      	beq.n	8008f6a <prvProcessDHCPReplies+0xf2>
            {
                /* Invalid values in DHCP response. */
            }
            else if( ( pxDHCPMessage->ulTransactionID != FreeRTOS_htonl( EP_DHCPData.ulTransactionId ) ) )
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d146      	bne.n	8008f6a <prvProcessDHCPReplies+0xf2>
            {
                /* Transaction ID does not match. */
            }
            else /* Looks like a valid DHCP response, with the same transaction ID. */
            {
                if( memcmp( pxDHCPMessage->ucClientHardwareAddress,
 8008edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ede:	f103 001c 	add.w	r0, r3, #28
                            pxEndPoint->xMACAddress.ucBytes,
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	3338      	adds	r3, #56	@ 0x38
                if( memcmp( pxDHCPMessage->ucClientHardwareAddress,
 8008ee6:	2206      	movs	r2, #6
 8008ee8:	4619      	mov	r1, r3
 8008eea:	f00f fe11 	bl	8018b10 <memcmp>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d13a      	bne.n	8008f6a <prvProcessDHCPReplies+0xf2>
                    /* Target MAC address doesn't match. */
                }
                else
                {
                    /* None of the essential options have been processed yet. */
                    xSet.ulProcessed = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	623b      	str	r3, [r7, #32]

                    /* Walk through the options until the dhcpOPTION_END_BYTE byte
                     * is found, taking care not to walk off the end of the options. */
                    xSet.pucByte = &( pucUDPPayload[ sizeof( DHCPMessage_IPv4_t ) ] );
 8008ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efa:	33f0      	adds	r3, #240	@ 0xf0
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24
                    xSet.uxIndex = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	613b      	str	r3, [r7, #16]
                    xSet.uxPayloadDataLength = ( ( size_t ) lBytes ) - sizeof( DHCPMessage_IPv4_t );
 8008f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f04:	3bf0      	subs	r3, #240	@ 0xf0
 8008f06:	617b      	str	r3, [r7, #20]

                    while( xSet.uxIndex < xSet.uxPayloadDataLength )
 8008f08:	e021      	b.n	8008f4e <prvProcessDHCPReplies+0xd6>
                    {
                        BaseType_t xResult;
                        xSet.ucOptionCode = xSet.pucByte[ xSet.uxIndex ];
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	4413      	add	r3, r2
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	733b      	strb	r3, [r7, #12]

                        xResult = xProcessCheckOption( &( xSet ) );
 8008f14:	f107 030c 	add.w	r3, r7, #12
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff ff49 	bl	8008db0 <xProcessCheckOption>
 8008f1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        if( xResult > 0 )
 8008f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dd06      	ble.n	8008f34 <prvProcessDHCPReplies+0xbc>
                        {
                            vProcessHandleOption( pxEndPoint, &( xSet ), xExpectedMessageType );
 8008f26:	f107 030c 	add.w	r3, r7, #12
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6838      	ldr	r0, [r7, #0]
 8008f30:	f7ff fe18 	bl	8008b64 <vProcessHandleOption>
                        }

                        if( xResult != 0 )
 8008f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <prvProcessDHCPReplies+0xd6>
                        {
                            if( ( xSet.uxLength == 0U ) || ( xResult < 0 ) )
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00a      	beq.n	8008f56 <prvProcessDHCPReplies+0xde>
 8008f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	db07      	blt.n	8008f56 <prvProcessDHCPReplies+0xde>
                            {
                                break;
                            }

                            xSet.uxIndex += xSet.uxLength;
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	613b      	str	r3, [r7, #16]
                    while( xSet.uxIndex < xSet.uxPayloadDataLength )
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d3d9      	bcc.n	8008f0a <prvProcessDHCPReplies+0x92>
                        }
                    }

                    /* Were all the mandatory options received? */
                    if( xSet.ulProcessed >= ulMandatoryOptions )
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d805      	bhi.n	8008f6a <prvProcessDHCPReplies+0xf2>
                    {
                        /* HT:endian: used to be network order */
                        EP_DHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	691a      	ldr	r2, [r3, #16]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	661a      	str	r2, [r3, #96]	@ 0x60
                        FreeRTOS_printf( ( "vDHCPProcess: offer %xip for MAC address %02x-%02x\n",
                                           ( unsigned ) FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ),
                                           pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                           pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
                        xReturn = pdPASS;
 8008f66:	2301      	movs	r3, #1
 8008f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    }
                }
            }

            if( pucUDPPayload != NULL )
 8008f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d003      	beq.n	8008f78 <prvProcessDHCPReplies+0x100>
            {
                FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayload );
 8008f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f72:	4618      	mov	r0, r3
 8008f74:	f001 fb90 	bl	800a698 <FreeRTOS_ReleaseUDPPayloadBuffer>
            }
        } /* if( lBytes > 0 ) */

        return xReturn;
 8008f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3740      	adds	r7, #64	@ 0x40
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <prvCreatePartDHCPMessage>:
    static uint8_t * prvCreatePartDHCPMessage( struct freertos_sockaddr * pxAddress,
                                               BaseType_t xOpcode,
                                               const uint8_t * const pucOptionsArray,
                                               size_t * pxOptionsArraySize,
                                               const NetworkEndPoint_t * pxEndPoint )
    {
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b08a      	sub	sp, #40	@ 0x28
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	607a      	str	r2, [r7, #4]
 8008f8e:	603b      	str	r3, [r7, #0]
        DHCPMessage_IPv4_t * pxDHCPMessage;
        size_t uxRequiredBufferSize = sizeof( DHCPMessage_IPv4_t ) + *pxOptionsArraySize;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	33f0      	adds	r3, #240	@ 0xf0
 8008f96:	623b      	str	r3, [r7, #32]
        const NetworkBufferDescriptor_t * pxNetworkBuffer;
        uint8_t * pucUDPPayloadBuffer = NULL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	627b      	str	r3, [r7, #36]	@ 0x24
            uxRequiredBufferSize += ( 2U + uxNameLength );
        #endif /* if ( ipconfigDHCP_REGISTER_HOSTNAME == 1 ) */

        /* Obtain a network buffer with the required amount of storage.  It doesn't make much sense
         * to use a time-out here, because that would cause the IP-task to wait for itself. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + uxRequiredBufferSize, 0U );
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	332a      	adds	r3, #42	@ 0x2a
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f009 fcf6 	bl	8012994 <pxGetNetworkBufferWithDescriptor>
 8008fa8:	61f8      	str	r0, [r7, #28]

        if( pxNetworkBuffer != NULL )
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d069      	beq.n	8009084 <prvCreatePartDHCPMessage+0x102>
        {
            uint8_t * pucIPType;

            /* Leave space for the UDP header. */
            pucUDPPayloadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb4:	332a      	adds	r3, #42	@ 0x2a
 8008fb6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxDHCPMessage = ( ( DHCPMessage_IPv4_t * ) pucUDPPayloadBuffer );
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fba:	61bb      	str	r3, [r7, #24]
             */

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            pucIPType = pucUDPPayloadBuffer - ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbe:	3b30      	subs	r3, #48	@ 0x30
 8008fc0:	617b      	str	r3, [r7, #20]
            *pucIPType = ipTYPE_IPv4;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2240      	movs	r2, #64	@ 0x40
 8008fc6:	701a      	strb	r2, [r3, #0]

            /* Most fields need to be zero. */
            ( void ) memset( pxDHCPMessage, 0x00, sizeof( DHCPMessage_IPv4_t ) );
 8008fc8:	22f0      	movs	r2, #240	@ 0xf0
 8008fca:	2100      	movs	r1, #0
 8008fcc:	69b8      	ldr	r0, [r7, #24]
 8008fce:	f00f fdc9 	bl	8018b64 <memset>

            /* Create the message. */
            pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	701a      	strb	r2, [r3, #0]
            pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	705a      	strb	r2, [r3, #1]
            pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	2206      	movs	r2, #6
 8008fe4:	709a      	strb	r2, [r3, #2]
            pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( EP_DHCPData.ulTransactionId );
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	605a      	str	r2, [r3, #4]
            pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8008ff6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8009000:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8009004:	2200      	movs	r2, #0
 8009006:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800900a:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 800900e:	2200      	movs	r2, #0
 8009010:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8009014:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef

            if( EP_DHCPData.xUseBroadcast != pdFALSE )
 8009018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <prvCreatePartDHCPMessage+0xae>
            {
                pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	2200      	movs	r2, #0
 8009024:	729a      	strb	r2, [r3, #10]
 8009026:	2200      	movs	r2, #0
 8009028:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800902c:	72da      	strb	r2, [r3, #11]
 800902e:	e004      	b.n	800903a <prvCreatePartDHCPMessage+0xb8>
            }
            else
            {
                pxDHCPMessage->usFlags = 0U;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2200      	movs	r2, #0
 8009034:	729a      	strb	r2, [r3, #10]
 8009036:	2200      	movs	r2, #0
 8009038:	72da      	strb	r2, [r3, #11]
            }

            ( void ) memcpy( &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f103 001c 	add.w	r0, r3, #28
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	3338      	adds	r3, #56	@ 0x38
 8009044:	2206      	movs	r2, #6
 8009046:	4619      	mov	r1, r3
 8009048:	f00f fe67 	bl	8018d1a <memcpy>

            /* Copy in the const part of the options options. */
            ( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), pucOptionsArray, *pxOptionsArraySize );
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	6879      	ldr	r1, [r7, #4]
 800905a:	f00f fe5e 	bl	8018d1a <memcpy>
                *pxOptionsArraySize += ( size_t ) ( 2U + uxNameLength );
            }
            #endif /* if ( ipconfigDHCP_REGISTER_HOSTNAME == 1 ) */

            /* Map in the client identifier. */
            ( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	f103 00f6 	add.w	r0, r3, #246	@ 0xf6
                             pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	3338      	adds	r3, #56	@ 0x38
            ( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 8009068:	2206      	movs	r2, #6
 800906a:	4619      	mov	r1, r3
 800906c:	f00f fe55 	bl	8018d1a <memcpy>

            /* Set the addressing. */
            pxAddress->sin_address.ulIP_IPv4 = FREERTOS_INADDR_BROADCAST;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f04f 32ff 	mov.w	r2, #4294967295
 8009076:	609a      	str	r2, [r3, #8]
            pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT_IPv4;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2243      	movs	r2, #67	@ 0x43
 800907c:	805a      	strh	r2, [r3, #2]
            pxAddress->sin_family = FREERTOS_AF_INET4;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2202      	movs	r2, #2
 8009082:	705a      	strb	r2, [r3, #1]
        }

        return pucUDPPayloadBuffer;
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8009086:	4618      	mov	r0, r3
 8009088:	3728      	adds	r7, #40	@ 0x28
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <prvSendDHCPRequest>:
 * @brief Create and send a DHCP request message through the DHCP socket.
 *
 * @param[in] pxEndPoint The end-point for which the request will be sent.
 */
    static BaseType_t prvSendDHCPRequest( NetworkEndPoint_t * pxEndPoint )
    {
 8009090:	b580      	push	{r7, lr}
 8009092:	b090      	sub	sp, #64	@ 0x40
 8009094:	af02      	add	r7, sp, #8
 8009096:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdFAIL;
 8009098:	2300      	movs	r3, #0
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
            dhcpIPv4_CLIENT_IDENTIFIER_OPTION_CODE,  7, 1, 0, 0, 0, 0, 0, 0,      /* Client identifier. */
            dhcpIPv4_REQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,               /* The IP address being requested. */
            dhcpIPv4_SERVER_IP_ADDRESS_OPTION_CODE,  4, 0, 0, 0, 0,               /* The IP address of the DHCP server. */
            dhcpOPTION_END_BYTE
        };
        size_t uxOptionsLength = sizeof( ucDHCPRequestOptions );
 800909c:	2319      	movs	r3, #25
 800909e:	60fb      	str	r3, [r7, #12]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        /* MISRA doesn't like uninitialised structs. */
        ( void ) memset( &( xAddress ), 0, sizeof( xAddress ) );
 80090a0:	f107 0310 	add.w	r3, r7, #16
 80090a4:	2218      	movs	r2, #24
 80090a6:	2100      	movs	r1, #0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f00f fd5b 	bl	8018b64 <memset>
        pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress,
 80090ae:	f107 020c 	add.w	r2, r7, #12
 80090b2:	f107 0010 	add.w	r0, r7, #16
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	4613      	mov	r3, r2
 80090bc:	4a24      	ldr	r2, [pc, #144]	@ (8009150 <prvSendDHCPRequest+0xc0>)
 80090be:	2101      	movs	r1, #1
 80090c0:	f7ff ff5f 	bl	8008f82 <prvCreatePartDHCPMessage>
 80090c4:	6338      	str	r0, [r7, #48]	@ 0x30
                                                        ( BaseType_t ) dhcpREQUEST_OPCODE,
                                                        ucDHCPRequestOptions,
                                                        &( uxOptionsLength ),
                                                        pxEndPoint );

        if( ( xSocketValid( EP_DHCPData.xDHCPSocket ) == pdTRUE ) && ( pucUDPPayloadBuffer != NULL ) )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090cc:	4618      	mov	r0, r3
 80090ce:	f004 ff4f 	bl	800df70 <xSocketValid>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d136      	bne.n	8009146 <prvSendDHCPRequest+0xb6>
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d033      	beq.n	8009146 <prvSendDHCPRequest+0xb6>
            /*
             * Use helper variables for memcpy() source & dest to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = &EP_DHCPData.ulOfferedIPAddress;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3360      	adds	r3, #96	@ 0x60
 80090e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ];
 80090e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e6:	33fe      	adds	r3, #254	@ 0xfe
 80090e8:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( EP_DHCPData.ulOfferedIPAddress ) );
 80090ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f2:	601a      	str	r2, [r3, #0]

            /* Copy in the address of the DHCP server being used. */
            pvCopySource = &EP_DHCPData.ulDHCPServerAddress;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3368      	adds	r3, #104	@ 0x68
 80090f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ];
 80090fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fc:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8009100:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( EP_DHCPData.ulDHCPServerAddress ) );
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910a:	601a      	str	r2, [r3, #0]

            FreeRTOS_debug_printf( ( "vDHCPProcess: reply %xip\n", ( unsigned ) FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );
            iptraceSENDING_DHCP_REQUEST();

            EP_DHCPData.xDHCPSocket->pxEndPoint = pxEndPoint;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	651a      	str	r2, [r3, #80]	@ 0x50

            if( FreeRTOS_sendto( EP_DHCPData.xDHCPSocket, pucUDPPayloadBuffer, sizeof( DHCPMessage_IPv4_t ) + uxOptionsLength, FREERTOS_ZERO_COPY, &xAddress, ( socklen_t ) sizeof( xAddress ) ) == 0 )
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 8009122:	2318      	movs	r3, #24
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	f107 0310 	add.w	r3, r7, #16
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	2301      	movs	r3, #1
 800912e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009130:	f003 fd18 	bl	800cb64 <FreeRTOS_sendto>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d103      	bne.n	8009142 <prvSendDHCPRequest+0xb2>
            {
                /* The packet was not successfully queued for sending and must be
                 * returned to the stack. */
                FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 800913a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800913c:	f001 faac 	bl	800a698 <FreeRTOS_ReleaseUDPPayloadBuffer>
 8009140:	e001      	b.n	8009146 <prvSendDHCPRequest+0xb6>
            }
            else
            {
                xResult = pdPASS;
 8009142:	2301      	movs	r3, #1
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        return xResult;
 8009146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8009148:	4618      	mov	r0, r3
 800914a:	3738      	adds	r7, #56	@ 0x38
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	08019e54 	.word	0x08019e54

08009154 <prvSendDHCPDiscover>:
 * @param[in] pxEndPoint the end-point for which the discover message will be sent.
 *
 * @return: pdPASS if the DHCP discover message was sent successfully, pdFAIL otherwise.
 */
    static BaseType_t prvSendDHCPDiscover( NetworkEndPoint_t * pxEndPoint )
    {
 8009154:	b580      	push	{r7, lr}
 8009156:	b092      	sub	sp, #72	@ 0x48
 8009158:	af02      	add	r7, sp, #8
 800915a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdFAIL;
 800915c:	2300      	movs	r3, #0
 800915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dhcpIPv4_CLIENT_IDENTIFIER_OPTION_CODE,  7, 1,                                0,                            0, 0, 0, 0, 0,                    /* Client identifier. */
            dhcpIPv4_REQUEST_IP_ADDRESS_OPTION_CODE, 4, 0,                                0,                            0, 0,                             /* The IP address being requested. */
            dhcpIPv4_PARAMETER_REQUEST_OPTION_CODE,  3, dhcpIPv4_SUBNET_MASK_OPTION_CODE, dhcpIPv4_GATEWAY_OPTION_CODE, dhcpIPv4_DNS_SERVER_OPTIONS_CODE, /* Parameter request option. */
            dhcpOPTION_END_BYTE
        };
        size_t uxOptionsLength = sizeof( ucDHCPDiscoverOptions );
 8009160:	2318      	movs	r3, #24
 8009162:	60fb      	str	r3, [r7, #12]

        ( void ) memset( &( xAddress ), 0, sizeof( xAddress ) );
 8009164:	f107 0310 	add.w	r3, r7, #16
 8009168:	2218      	movs	r2, #24
 800916a:	2100      	movs	r1, #0
 800916c:	4618      	mov	r0, r3
 800916e:	f00f fcf9 	bl	8018b64 <memset>
        pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress,
 8009172:	f107 020c 	add.w	r2, r7, #12
 8009176:	f107 0010 	add.w	r0, r7, #16
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	4613      	mov	r3, r2
 8009180:	4a32      	ldr	r2, [pc, #200]	@ (800924c <prvSendDHCPDiscover+0xf8>)
 8009182:	2101      	movs	r1, #1
 8009184:	f7ff fefd 	bl	8008f82 <prvCreatePartDHCPMessage>
 8009188:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                        pxEndPoint );

        /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        if( ( xSocketValid( EP_DHCPData.xDHCPSocket ) == pdTRUE ) && ( pucUDPPayloadBuffer != NULL ) )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009190:	4618      	mov	r0, r3
 8009192:	f004 feed 	bl	800df70 <xSocketValid>
 8009196:	4603      	mov	r3, r0
 8009198:	2b01      	cmp	r3, #1
 800919a:	d152      	bne.n	8009242 <prvSendDHCPDiscover+0xee>
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d04f      	beq.n	8009242 <prvSendDHCPDiscover+0xee>
            void * pvCopyDest;

            FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
            iptraceSENDING_DHCP_DISCOVER();

            if( pxEndPoint->xDHCPData.ulPreferredIPAddress != 0U )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00b      	beq.n	80091c2 <prvSendDHCPDiscover+0x6e>
            {
                /* Fill in the IPv4 address. */
                pvCopySource = &( pxEndPoint->xDHCPData.ulPreferredIPAddress );
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3364      	adds	r3, #100	@ 0x64
 80091ae:	633b      	str	r3, [r7, #48]	@ 0x30
                pvCopyDest = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] );
 80091b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b2:	33fe      	adds	r3, #254	@ 0xfe
 80091b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( EP_DHCPData.ulPreferredIPAddress ) );
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	e022      	b.n	8009208 <prvSendDHCPDiscover+0xb4>
            else
            {
                /* Remove option-50 from the list because it is not used. */
                size_t uxCopyLength;
                /* Exclude this line from branch coverage as the not-taken condition will never happen unless the code is modified */
                configASSERT( uxOptionsLength > ( dhcpOPTION_50_OFFSET + dhcpOPTION_50_SIZE ) ); /* LCOV_EXCL_BR_LINE */
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b12      	cmp	r3, #18
 80091c6:	d80d      	bhi.n	80091e4 <prvSendDHCPDiscover+0x90>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091cc:	b672      	cpsid	i
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	b662      	cpsie	i
 80091dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <prvSendDHCPDiscover+0x8c>
                uxCopyLength = uxOptionsLength - ( dhcpOPTION_50_OFFSET + dhcpOPTION_50_SIZE );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3b12      	subs	r3, #18
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
                pvCopySource = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpOPTION_50_OFFSET + dhcpOPTION_50_SIZE ] );
 80091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ec:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80091f0:	633b      	str	r3, [r7, #48]	@ 0x30
                pvCopyDest = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpOPTION_50_OFFSET ] );
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	33fc      	adds	r3, #252	@ 0xfc
 80091f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) memmove( pvCopyDest, pvCopySource, uxCopyLength );
 80091f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091fe:	f00f fc97 	bl	8018b30 <memmove>
                /* Send 6 bytes less than foreseen. */
                uxOptionsLength -= dhcpOPTION_50_SIZE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3b06      	subs	r3, #6
 8009206:	60fb      	str	r3, [r7, #12]
            }

            EP_DHCPData.xDHCPSocket->pxEndPoint = pxEndPoint;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	651a      	str	r2, [r3, #80]	@ 0x50

            if( FreeRTOS_sendto( EP_DHCPData.xDHCPSocket,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800921e:	2318      	movs	r3, #24
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	f107 0310 	add.w	r3, r7, #16
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	2301      	movs	r3, #1
 800922a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800922c:	f003 fc9a 	bl	800cb64 <FreeRTOS_sendto>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d103      	bne.n	800923e <prvSendDHCPDiscover+0xea>
                                 &( xAddress ),
                                 ( socklen_t ) sizeof( xAddress ) ) == 0 )
            {
                /* The packet was not successfully queued for sending and must be
                 * returned to the stack. */
                FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8009236:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009238:	f001 fa2e 	bl	800a698 <FreeRTOS_ReleaseUDPPayloadBuffer>
 800923c:	e001      	b.n	8009242 <prvSendDHCPDiscover+0xee>
            }
            else
            {
                xResult = pdTRUE;
 800923e:	2301      	movs	r3, #1
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        return xResult;
 8009242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8009244:	4618      	mov	r0, r3
 8009246:	3740      	adds	r7, #64	@ 0x40
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	08019e70 	.word	0x08019e70

08009250 <prvPrepareLinkLayerIPLookUp>:
 *        another device already uses the IP-address.
 *
 * param[in] pxEndPoint The end-point that wants to obtain a link-layer address.
 */
        void prvPrepareLinkLayerIPLookUp( NetworkEndPoint_t * pxEndPoint )
        {
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
            uint8_t ucLinkLayerIPAddress[ 2 ];
            uint32_t ulNumbers[ 2 ];

            /* After DHCP has failed to answer, prepare everything to start
             * trying-out LinkLayer IP-addresses, using the random method. */
            EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 8009258:	f00d f9ea 	bl	8016630 <xTaskGetTickCount>
 800925c:	4602      	mov	r2, r0
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	671a      	str	r2, [r3, #112]	@ 0x70

            ( void ) xApplicationGetRandomNumber( &( ulNumbers[ 0 ] ) );
 8009262:	f107 030c 	add.w	r3, r7, #12
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff f858 	bl	800831c <xApplicationGetRandomNumber>
            ( void ) xApplicationGetRandomNumber( &( ulNumbers[ 1 ] ) );
 800926c:	f107 030c 	add.w	r3, r7, #12
 8009270:	3304      	adds	r3, #4
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff f852 	bl	800831c <xApplicationGetRandomNumber>
            ucLinkLayerIPAddress[ 0 ] = ( uint8_t ) ( 1 + ( ulNumbers[ 0 ] % 0xFDU ) ); /* get value 1..254 for IP-address 3rd byte of IP address to try. */
 8009278:	68f9      	ldr	r1, [r7, #12]
 800927a:	4b2d      	ldr	r3, [pc, #180]	@ (8009330 <prvPrepareLinkLayerIPLookUp+0xe0>)
 800927c:	fba3 2301 	umull	r2, r3, r3, r1
 8009280:	09da      	lsrs	r2, r3, #7
 8009282:	4613      	mov	r3, r2
 8009284:	019b      	lsls	r3, r3, #6
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	1aca      	subs	r2, r1, r3
 800928e:	b2d3      	uxtb	r3, r2
 8009290:	3301      	adds	r3, #1
 8009292:	b2db      	uxtb	r3, r3
 8009294:	753b      	strb	r3, [r7, #20]
            ucLinkLayerIPAddress[ 1 ] = ( uint8_t ) ( 1 + ( ulNumbers[ 1 ] % 0xFDU ) ); /* get value 1..254 for IP-address 4th byte of IP address to try. */
 8009296:	6939      	ldr	r1, [r7, #16]
 8009298:	4b25      	ldr	r3, [pc, #148]	@ (8009330 <prvPrepareLinkLayerIPLookUp+0xe0>)
 800929a:	fba3 2301 	umull	r2, r3, r3, r1
 800929e:	09da      	lsrs	r2, r3, #7
 80092a0:	4613      	mov	r3, r2
 80092a2:	019b      	lsls	r3, r3, #6
 80092a4:	1a9b      	subs	r3, r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	1aca      	subs	r2, r1, r3
 80092ac:	b2d3      	uxtb	r3, r2
 80092ae:	3301      	adds	r3, #1
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	757b      	strb	r3, [r7, #21]

            EP_IPv4_SETTINGS.ulGatewayAddress = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	609a      	str	r2, [r3, #8]

            /* prepare xDHCPData with data to test. */
            EP_DHCPData.ulOfferedIPAddress =
                FreeRTOS_inet_addr_quick( LINK_LAYER_ADDRESS_0, LINK_LAYER_ADDRESS_1, ucLinkLayerIPAddress[ 0 ], ucLinkLayerIPAddress[ 1 ] );
 80092ba:	7d3b      	ldrb	r3, [r7, #20]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	7d7a      	ldrb	r2, [r7, #21]
 80092c0:	431a      	orrs	r2, r3
 80092c2:	4b1c      	ldr	r3, [pc, #112]	@ (8009334 <prvPrepareLinkLayerIPLookUp+0xe4>)
 80092c4:	4313      	orrs	r3, r2
            EP_DHCPData.ulOfferedIPAddress =
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6613      	str	r3, [r2, #96]	@ 0x60

            EP_DHCPData.ulLeaseTime = dhcpDEFAULT_LEASE_TIME; /*  don't care about lease time. just put anything. */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009338 <prvPrepareLinkLayerIPLookUp+0xe8>)
 80092ce:	66da      	str	r2, [r3, #108]	@ 0x6c

            EP_IPv4_SETTINGS.ulNetMask =
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a1a      	ldr	r2, [pc, #104]	@ (800933c <prvPrepareLinkLayerIPLookUp+0xec>)
 80092d4:	605a      	str	r2, [r3, #4]
                FreeRTOS_inet_addr_quick( LINK_LAYER_NETMASK_0, LINK_LAYER_NETMASK_1, LINK_LAYER_NETMASK_2, LINK_LAYER_NETMASK_3 );

            /* DHCP completed.  The IP address can now be used, and the
             * timer set to the lease timeout time. */
            EP_IPv4_SETTINGS.ulIPAddress = EP_DHCPData.ulOfferedIPAddress;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	601a      	str	r2, [r3, #0]

            /* Setting the 'local' broadcast address, something like 192.168.1.255' */
            EP_IPv4_SETTINGS.ulBroadcastAddress = ( EP_DHCPData.ulOfferedIPAddress | ( ~EP_IPv4_SETTINGS.ulNetMask ) );
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	43db      	mvns	r3, r3
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	615a      	str	r2, [r3, #20]

            /* Close socket to ensure packets don't queue on it. not needed anymore as DHCP failed. but still need timer for ARP testing. */
            prvCloseDHCPSocket( pxEndPoint );
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff fb52 	bl	8008998 <prvCloseDHCPSocket>

            xApplicationGetRandomNumber( &( ulNumbers[ 0 ] ) );
 80092f4:	f107 030c 	add.w	r3, r7, #12
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff f80f 	bl	800831c <xApplicationGetRandomNumber>
            EP_DHCPData.xDHCPTxPeriod = pdMS_TO_TICKS( 3000U + ( ulNumbers[ 0 ] & 0x3ffU ) ); /*  do ARP test every (3 + 0-1024mS) seconds. */
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009304:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009308:	fb03 f202 	mul.w	r2, r3, r2
 800930c:	4b0c      	ldr	r3, [pc, #48]	@ (8009340 <prvPrepareLinkLayerIPLookUp+0xf0>)
 800930e:	4413      	add	r3, r2
 8009310:	4a0c      	ldr	r2, [pc, #48]	@ (8009344 <prvPrepareLinkLayerIPLookUp+0xf4>)
 8009312:	fba2 2303 	umull	r2, r3, r2, r3
 8009316:	099a      	lsrs	r2, r3, #6
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	675a      	str	r2, [r3, #116]	@ 0x74

            xARPHadIPClash = pdFALSE;                                                         /* reset flag that shows if have ARP clash. */
 800931c:	4b0a      	ldr	r3, [pc, #40]	@ (8009348 <prvPrepareLinkLayerIPLookUp+0xf8>)
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
            vARPSendGratuitous();
 8009322:	f7fe fecf 	bl	80080c4 <vARPSendGratuitous>
        }
 8009326:	bf00      	nop
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	81848da9 	.word	0x81848da9
 8009334:	a9fe0000 	.word	0xa9fe0000
 8009338:	0a4cb800 	.word	0x0a4cb800
 800933c:	ffff0000 	.word	0xffff0000
 8009340:	002dc6c0 	.word	0x002dc6c0
 8009344:	10624dd3 	.word	0x10624dd3
 8009348:	20001028 	.word	0x20001028

0800934c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8009350:	f000 fb84 	bl	8009a5c <vDNSCallbackInitialise>
        }
 8009354:	bf00      	nop
 8009356:	bd80      	pop	{r7, pc}

08009358 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        /* 'pcName' might not be used when DNS cache is disabled. */
        ( void ) pcName;

        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8009368:	2058      	movs	r0, #88	@ 0x58
 800936a:	f00e ff5d 	bl	8018228 <pvPortMalloc>
 800936e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d033      	beq.n	80093de <pxNew_AddrInfo+0x86>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800937a:	2258      	movs	r2, #88	@ 0x58
 800937c:	2100      	movs	r1, #0
 800937e:	69f8      	ldr	r0, [r7, #28]
 8009380:	f00f fbf0 	bl	8018b64 <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	3338      	adds	r3, #56	@ 0x38
 8009392:	221d      	movs	r2, #29
 8009394:	68f9      	ldr	r1, [r7, #12]
 8009396:	4618      	mov	r0, r3
 8009398:	f00f fbec 	bl	8018b74 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	f103 0220 	add.w	r2, r3, #32
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d10e      	bne.n	80093d2 <pxNew_AddrInfo+0x7a>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f002 fba8 	bl	800bb0a <ulChar2u32>
 80093ba:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	2202      	movs	r2, #2
 80093c8:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	2204      	movs	r2, #4
 80093ce:	611a      	str	r2, [r3, #16]
                       }
                       break;
 80093d0:	e005      	b.n	80093de <pxNew_AddrInfo+0x86>

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );

                    vPortFree( pvBuffer );
 80093d2:	69b8      	ldr	r0, [r7, #24]
 80093d4:	f00e fff6 	bl	80183c4 <vPortFree>
                    pxAddrInfo = NULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	61fb      	str	r3, [r7, #28]

                    break;
 80093dc:	bf00      	nop
            }
        }

        return pxAddrInfo;
 80093de:	69fb      	ldr	r3, [r7, #28]
    }
 80093e0:	4618      	mov	r0, r3
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 80093fa:	e007      	b.n	800940c <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f00e ffde 	bl	80183c4 <vPortFree>
                pxIterator = pxNext;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1f4      	bne.n	80093fc <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800941a:	b580      	push	{r7, lr}
 800941c:	b088      	sub	sp, #32
 800941e:	af02      	add	r7, sp, #8
 8009420:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f001 fd1e 	bl	800ae64 <uxIPHeaderSizePacket>
 8009428:	4603      	mov	r3, r0
 800942a:	3316      	adds	r3, #22
 800942c:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	429a      	cmp	r2, r3
 8009436:	d81f      	bhi.n	8009478 <ulDNSHandlePacket+0x5e>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	2b0b      	cmp	r3, #11
 8009446:	d917      	bls.n	8009478 <ulDNSHandlePacket+0x5e>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8009448:	2300      	movs	r3, #0
 800944a:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	4413      	add	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 800945a:	f107 0208 	add.w	r2, r7, #8
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	2300      	movs	r3, #0
 8009462:	6939      	ldr	r1, [r7, #16]
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 fbdf 	bl	8009c28 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <ulDNSHandlePacket+0x5e>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff ffb8 	bl	80093e8 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8009478:	2300      	movs	r3, #0
    }
 800947a:	4618      	mov	r0, r3
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8009482:	b580      	push	{r7, lr}
 8009484:	b086      	sub	sp, #24
 8009486:	af02      	add	r7, sp, #8
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
 800948e:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	68b9      	ldr	r1, [r7, #8]
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 f818 	bl	80094d0 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 80094a0:	2301      	movs	r3, #1
    }
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 80094b0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80094b4:	2100      	movs	r1, #0
 80094b6:	4804      	ldr	r0, [pc, #16]	@ (80094c8 <FreeRTOS_dnsclear+0x1c>)
 80094b8:	f00f fb54 	bl	8018b64 <memset>
        uxFreeEntry = 0U;
 80094bc:	4b03      	ldr	r3, [pc, #12]	@ (80094cc <FreeRTOS_dnsclear+0x20>)
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
    }
 80094c2:	bf00      	nop
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	2000104c 	.word	0x2000104c
 80094cc:	200012a4 	.word	0x200012a4

080094d0 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b098      	sub	sp, #96	@ 0x60
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 80094de:	f00d f8a7 	bl	8016630 <xTaskGetTickCount>
 80094e2:	65f8      	str	r0, [r7, #92]	@ 0x5c
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10d      	bne.n	8009506 <FreeRTOS_ProcessDNSCache+0x36>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	b672      	cpsid	i
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	b662      	cpsie	i
 80094fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <FreeRTOS_ProcessDNSCache+0x32>

        if( xLookUp != pdFALSE )
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <FreeRTOS_ProcessDNSCache+0x42>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / configTICK_RATE_HZ ) );
 8009512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009514:	4a26      	ldr	r2, [pc, #152]	@ (80095b0 <FreeRTOS_ProcessDNSCache+0xe0>)
 8009516:	fba2 2303 	umull	r2, r3, r2, r3
 800951a:	099b      	lsrs	r3, r3, #6
 800951c:	65bb      	str	r3, [r7, #88]	@ 0x58
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 800951e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8009522:	461a      	mov	r2, r3
 8009524:	68b9      	ldr	r1, [r7, #8]
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 f844 	bl	80095b4 <prvFindEntryIndex>
 800952c:	6578      	str	r0, [r7, #84]	@ 0x54

        if( xResult == pdTRUE )
 800952e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009530:	2b01      	cmp	r3, #1
 8009532:	d110      	bne.n	8009556 <FreeRTOS_ProcessDNSCache+0x86>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d106      	bne.n	8009548 <FreeRTOS_ProcessDNSCache+0x78>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 800953a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800953c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800953e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	f000 f87f 	bl	8009644 <prvGetCacheIPEntry>
 8009546:	e013      	b.n	8009570 <FreeRTOS_ProcessDNSCache+0xa0>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8009548:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800954a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	f000 f8ca 	bl	80096e8 <prvUpdateCacheEntry>
 8009554:	e00c      	b.n	8009570 <FreeRTOS_ProcessDNSCache+0xa0>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d103      	bne.n	8009564 <FreeRTOS_ProcessDNSCache+0x94>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	e005      	b.n	8009570 <FreeRTOS_ProcessDNSCache+0xa0>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8009564:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 f8f2 	bl	8009754 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <FreeRTOS_ProcessDNSCache+0xae>
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d012      	beq.n	80095a4 <FreeRTOS_ProcessDNSCache+0xd4>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 800957e:	2302      	movs	r3, #2
 8009580:	653b      	str	r3, [r7, #80]	@ 0x50

                switch( pxIP->xIs_IPv6 )
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <FreeRTOS_ProcessDNSCache+0xc2>
                            break;
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	63bb      	str	r3, [r7, #56]	@ 0x38
                            break;
 8009590:	e000      	b.n	8009594 <FreeRTOS_ProcessDNSCache+0xc4>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
                        break;
 8009592:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8009594:	f107 0210 	add.w	r2, r7, #16
 8009598:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800959c:	2328      	movs	r3, #40	@ 0x28
 800959e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80095a0:	f004 f930 	bl	800d804 <FreeRTOS_inet_ntop>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 80095a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    }
 80095a6:	4618      	mov	r0, r3
 80095a8:	3760      	adds	r7, #96	@ 0x60
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	10624dd3 	.word	0x10624dd3

080095b4 <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80095c0:	2300      	movs	r3, #0
 80095c2:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 80095c4:	2300      	movs	r3, #0
 80095c6:	613b      	str	r3, [r7, #16]
 80095c8:	e031      	b.n	800962e <prvFindEntryIndex+0x7a>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 80095ca:	491d      	ldr	r1, [pc, #116]	@ (8009640 <prvFindEntryIndex+0x8c>)
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4613      	mov	r3, r2
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	1a9b      	subs	r3, r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	440b      	add	r3, r1
 80095d8:	3314      	adds	r3, #20
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d022      	beq.n	8009626 <prvFindEntryIndex+0x72>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	4613      	mov	r3, r2
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	1a9b      	subs	r3, r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	3310      	adds	r3, #16
 80095ec:	4a14      	ldr	r2, [pc, #80]	@ (8009640 <prvFindEntryIndex+0x8c>)
 80095ee:	4413      	add	r3, r2
 80095f0:	3304      	adds	r3, #4
 80095f2:	68f9      	ldr	r1, [r7, #12]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7f6 fe23 	bl	8000240 <strcmp>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d113      	bne.n	8009628 <prvFindEntryIndex+0x74>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	6919      	ldr	r1, [r3, #16]
 8009604:	480e      	ldr	r0, [pc, #56]	@ (8009640 <prvFindEntryIndex+0x8c>)
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	4613      	mov	r3, r2
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4403      	add	r3, r0
 8009612:	3310      	adds	r3, #16
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4299      	cmp	r1, r3
 8009618:	d106      	bne.n	8009628 <prvFindEntryIndex+0x74>
                {
                    xReturn = pdTRUE;
 800961a:	2301      	movs	r3, #1
 800961c:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	601a      	str	r2, [r3, #0]
                    break;
 8009624:	e006      	b.n	8009634 <prvFindEntryIndex+0x80>
                continue;
 8009626:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	3301      	adds	r3, #1
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2b09      	cmp	r3, #9
 8009632:	d9ca      	bls.n	80095ca <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8009634:	697b      	ldr	r3, [r7, #20]
    }
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	2000104c 	.word	0x2000104c

08009644 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8009656:	4923      	ldr	r1, [pc, #140]	@ (80096e4 <prvGetCacheIPEntry+0xa0>)
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	4613      	mov	r3, r2
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	3338      	adds	r3, #56	@ 0x38
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 800966e:	491d      	ldr	r1, [pc, #116]	@ (80096e4 <prvGetCacheIPEntry+0xa0>)
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4613      	mov	r3, r2
 8009674:	011b      	lsls	r3, r3, #4
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	3334      	adds	r3, #52	@ 0x34
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	429a      	cmp	r2, r3
 8009684:	d21d      	bcs.n	80096c2 <prvGetCacheIPEntry+0x7e>
                ulIPAddressIndex = ucIndex;

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	461a      	mov	r2, r3
 800968a:	0092      	lsls	r2, r2, #2
 800968c:	441a      	add	r2, r3
 800968e:	0093      	lsls	r3, r2, #2
 8009690:	461a      	mov	r2, r3
 8009692:	68f9      	ldr	r1, [r7, #12]
 8009694:	460b      	mov	r3, r1
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	1a5b      	subs	r3, r3, r1
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	4a11      	ldr	r2, [pc, #68]	@ (80096e4 <prvGetCacheIPEntry+0xa0>)
 80096a0:	4413      	add	r3, r2
 80096a2:	2214      	movs	r2, #20
 80096a4:	4619      	mov	r1, r3
 80096a6:	68b8      	ldr	r0, [r7, #8]
 80096a8:	f00f fb37 	bl	8018d1a <memcpy>
            isRead = pdTRUE;
 80096ac:	2301      	movs	r3, #1
 80096ae:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d011      	beq.n	80096da <prvGetCacheIPEntry+0x96>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f89e 	bl	80097fc <prvReadDNSCache>
 80096c0:	e00b      	b.n	80096da <prvGetCacheIPEntry+0x96>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 80096c2:	4908      	ldr	r1, [pc, #32]	@ (80096e4 <prvGetCacheIPEntry+0xa0>)
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	4613      	mov	r3, r2
 80096c8:	011b      	lsls	r3, r3, #4
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	440b      	add	r3, r1
 80096d0:	3314      	adds	r3, #20
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 80096da:	69fb      	ldr	r3, [r7, #28]
    }
 80096dc:	4618      	mov	r0, r3
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	2000104c 	.word	0x2000104c

080096e8 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	461a      	mov	r2, r3
 80096fe:	0092      	lsls	r2, r2, #2
 8009700:	441a      	add	r2, r3
 8009702:	0093      	lsls	r3, r2, #2
 8009704:	461a      	mov	r2, r3
 8009706:	68f9      	ldr	r1, [r7, #12]
 8009708:	460b      	mov	r3, r1
 800970a:	011b      	lsls	r3, r3, #4
 800970c:	1a5b      	subs	r3, r3, r1
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	4a0f      	ldr	r2, [pc, #60]	@ (8009750 <prvUpdateCacheEntry+0x68>)
 8009714:	4413      	add	r3, r2
 8009716:	2214      	movs	r2, #20
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	4618      	mov	r0, r3
 800971c:	f00f fafd 	bl	8018d1a <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8009720:	490b      	ldr	r1, [pc, #44]	@ (8009750 <prvUpdateCacheEntry+0x68>)
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	4613      	mov	r3, r2
 8009726:	011b      	lsls	r3, r3, #4
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	3334      	adds	r3, #52	@ 0x34
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8009734:	4906      	ldr	r1, [pc, #24]	@ (8009750 <prvUpdateCacheEntry+0x68>)
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	4613      	mov	r3, r2
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	1a9b      	subs	r3, r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	440b      	add	r3, r1
 8009742:	3338      	adds	r3, #56	@ 0x38
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	601a      	str	r2, [r3, #0]
    }
 8009748:	bf00      	nop
 800974a:	3718      	adds	r7, #24
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	2000104c 	.word	0x2000104c

08009754 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7f6 fd76 	bl	8000254 <strlen>
 8009768:	4603      	mov	r3, r0
 800976a:	2b1d      	cmp	r3, #29
 800976c:	d83d      	bhi.n	80097ea <prvInsertCacheEntry+0x96>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 800976e:	4b21      	ldr	r3, [pc, #132]	@ (80097f4 <prvInsertCacheEntry+0xa0>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	4613      	mov	r3, r2
 8009774:	011b      	lsls	r3, r3, #4
 8009776:	1a9b      	subs	r3, r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	3310      	adds	r3, #16
 800977c:	4a1e      	ldr	r2, [pc, #120]	@ (80097f8 <prvInsertCacheEntry+0xa4>)
 800977e:	4413      	add	r3, r2
 8009780:	3304      	adds	r3, #4
 8009782:	221e      	movs	r2, #30
 8009784:	68f9      	ldr	r1, [r7, #12]
 8009786:	4618      	mov	r0, r3
 8009788:	f00f f9f4 	bl	8018b74 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 800978c:	4b19      	ldr	r3, [pc, #100]	@ (80097f4 <prvInsertCacheEntry+0xa0>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	4613      	mov	r3, r2
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4a17      	ldr	r2, [pc, #92]	@ (80097f8 <prvInsertCacheEntry+0xa4>)
 800979a:	4413      	add	r3, r2
 800979c:	2214      	movs	r2, #20
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f00f faba 	bl	8018d1a <memcpy>

            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 80097a6:	4b13      	ldr	r3, [pc, #76]	@ (80097f4 <prvInsertCacheEntry+0xa0>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4913      	ldr	r1, [pc, #76]	@ (80097f8 <prvInsertCacheEntry+0xa4>)
 80097ac:	4613      	mov	r3, r2
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	3334      	adds	r3, #52	@ 0x34
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80097bc:	4b0d      	ldr	r3, [pc, #52]	@ (80097f4 <prvInsertCacheEntry+0xa0>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	490d      	ldr	r1, [pc, #52]	@ (80097f8 <prvInsertCacheEntry+0xa4>)
 80097c2:	4613      	mov	r3, r2
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	440b      	add	r3, r1
 80097cc:	3338      	adds	r3, #56	@ 0x38
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	601a      	str	r2, [r3, #0]
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 80097d2:	4b08      	ldr	r3, [pc, #32]	@ (80097f4 <prvInsertCacheEntry+0xa0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3301      	adds	r3, #1
 80097d8:	4a06      	ldr	r2, [pc, #24]	@ (80097f4 <prvInsertCacheEntry+0xa0>)
 80097da:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 80097dc:	4b05      	ldr	r3, [pc, #20]	@ (80097f4 <prvInsertCacheEntry+0xa0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b0a      	cmp	r3, #10
 80097e2:	d102      	bne.n	80097ea <prvInsertCacheEntry+0x96>
            {
                uxFreeEntry = 0;
 80097e4:	4b03      	ldr	r3, [pc, #12]	@ (80097f4 <prvInsertCacheEntry+0xa0>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200012a4 	.word	0x200012a4
 80097f8:	2000104c 	.word	0x2000104c

080097fc <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 8009806:	2301      	movs	r3, #1
 8009808:	613b      	str	r3, [r7, #16]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 800980a:	2300      	movs	r3, #0
 800980c:	61bb      	str	r3, [r7, #24]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	617b      	str	r3, [r7, #20]
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8009812:	2300      	movs	r3, #0
 8009814:	61fb      	str	r3, [r7, #28]
 8009816:	e031      	b.n	800987c <prvReadDNSCache+0x80>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	461a      	mov	r2, r3
 800981c:	0092      	lsls	r2, r2, #2
 800981e:	441a      	add	r2, r3
 8009820:	0093      	lsls	r3, r2, #2
 8009822:	461a      	mov	r2, r3
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	011b      	lsls	r3, r3, #4
 800982a:	1a5b      	subs	r3, r3, r1
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	4a17      	ldr	r2, [pc, #92]	@ (8009890 <prvReadDNSCache+0x94>)
 8009832:	4413      	add	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d111      	bne.n	8009862 <prvReadDNSCache+0x66>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	4613      	mov	r3, r2
 8009846:	011b      	lsls	r3, r3, #4
 8009848:	1a9b      	subs	r3, r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	3310      	adds	r3, #16
 800984e:	4a10      	ldr	r2, [pc, #64]	@ (8009890 <prvReadDNSCache+0x94>)
 8009850:	4413      	add	r3, r2
 8009852:	3304      	adds	r3, #4
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	2102      	movs	r1, #2
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fd7d 	bl	8009358 <pxNew_AddrInfo>
 800985e:	61b8      	str	r0, [r7, #24]
                       }
                       break;
 8009860:	e000      	b.n	8009864 <prvReadDNSCache+0x68>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8009862:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00d      	beq.n	8009886 <prvReadDNSCache+0x8a>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	331c      	adds	r3, #28
 8009874:	617b      	str	r3, [r7, #20]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	3301      	adds	r3, #1
 800987a:	61fb      	str	r3, [r7, #28]
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	429a      	cmp	r2, r3
 8009882:	d3c9      	bcc.n	8009818 <prvReadDNSCache+0x1c>
        }
    }
 8009884:	e000      	b.n	8009888 <prvReadDNSCache+0x8c>
                break;
 8009886:	bf00      	nop
    }
 8009888:	bf00      	nop
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	2000104c 	.word	0x2000104c

08009894 <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	@ 0x28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 800989e:	2300      	movs	r3, #0
 80098a0:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xCallbackList );
 80098a2:	4b28      	ldr	r3, [pc, #160]	@ (8009944 <xDNSDoCallback+0xb0>)
 80098a4:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 80098b8:	f00c fe0c 	bl	80164d4 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xCallbackList );
 80098bc:	4b22      	ldr	r3, [pc, #136]	@ (8009948 <xDNSDoCallback+0xb4>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	623b      	str	r3, [r7, #32]
 80098c2:	e029      	b.n	8009918 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) pxEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d101      	bne.n	80098d8 <xDNSDoCallback+0x44>
 80098d4:	2301      	movs	r3, #1
 80098d6:	e000      	b.n	80098da <xDNSDoCallback+0x46>
 80098d8:	2300      	movs	r3, #0
 80098da:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d117      	bne.n	8009912 <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3314      	adds	r3, #20
 80098f2:	4618      	mov	r0, r3
 80098f4:	f00b fbfd 	bl	80150f2 <uxListRemove>
                    vPortFree( pxCallback );
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f00e fd63 	bl	80183c4 <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80098fe:	4b12      	ldr	r3, [pc, #72]	@ (8009948 <xDNSDoCallback+0xb4>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d102      	bne.n	800990c <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 8009906:	2000      	movs	r0, #0
 8009908:	f001 fd5a 	bl	800b3c0 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8009910:	e006      	b.n	8009920 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) pxEnd;
 8009918:	6a3a      	ldr	r2, [r7, #32]
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	429a      	cmp	r2, r3
 800991e:	d1d1      	bne.n	80098c4 <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8009920:	f00c fde6 	bl	80164f0 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d006      	beq.n	8009938 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	69b9      	ldr	r1, [r7, #24]
 8009936:	4798      	blx	r3
        }

        return xResult;
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800993a:	4618      	mov	r0, r3
 800993c:	3728      	adds	r7, #40	@ 0x28
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	200012b0 	.word	0x200012b0
 8009948:	200012a8 	.word	0x200012a8

0800994c <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 800994c:	b580      	push	{r7, lr}
 800994e:	b08c      	sub	sp, #48	@ 0x30
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xCallbackList );
 8009954:	4b3f      	ldr	r3, [pc, #252]	@ (8009a54 <vDNSCheckCallBack+0x108>)
 8009956:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	4618      	mov	r0, r3
 800995e:	f00b fb3e 	bl	8014fde <vListInitialise>

        vTaskSuspendAll();
 8009962:	f00c fdb7 	bl	80164d4 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xCallbackList );
 8009966:	4b3c      	ldr	r3, [pc, #240]	@ (8009a58 <vDNSCheckCallBack+0x10c>)
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800996c:	e02e      	b.n	80099cc <vDNSCheckCallBack+0x80>
                 pxIterator != pxEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800996e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8009974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00d      	beq.n	800999c <vDNSCheckCallBack+0x50>
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d108      	bne.n	800999c <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	3314      	adds	r3, #20
 800998e:	4618      	mov	r0, r3
 8009990:	f00b fbaf 	bl	80150f2 <uxListRemove>
                    vPortFree( pxCallback );
 8009994:	6a38      	ldr	r0, [r7, #32]
 8009996:	f00e fd15 	bl	80183c4 <vPortFree>
 800999a:	e017      	b.n	80099cc <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	3308      	adds	r3, #8
 80099a0:	6a3a      	ldr	r2, [r7, #32]
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f00d f91d 	bl	8016be4 <xTaskCheckForTimeOut>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00d      	beq.n	80099cc <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	3314      	adds	r3, #20
 80099b4:	4618      	mov	r0, r3
 80099b6:	f00b fb9c 	bl	80150f2 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	f103 0214 	add.w	r2, r3, #20
 80099c0:	f107 030c 	add.w	r3, r7, #12
 80099c4:	4611      	mov	r1, r2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f00b fb36 	bl	8015038 <vListInsertEnd>
                 pxIterator != pxEnd; )
 80099cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d1cc      	bne.n	800996e <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 80099d4:	f00c fd8c 	bl	80164f0 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d02f      	beq.n	8009a3e <vDNSCheckCallBack+0xf2>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            pxEnd = listGET_END_MARKER( &xTempList );
 80099de:	f107 030c 	add.w	r3, r7, #12
 80099e2:	3308      	adds	r3, #8
 80099e4:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xTempList );
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ea:	e024      	b.n	8009a36 <vDNSCheckCallBack+0xea>
                 pxIterator != pxEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80099ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80099f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 80099f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <vDNSCheckCallBack+0xc8>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a06:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8009a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a0c:	6911      	ldr	r1, [r2, #16]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4798      	blx	r3
 8009a12:	e008      	b.n	8009a26 <vDNSCheckCallBack+0xda>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a1a:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8009a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a20:	6911      	ldr	r1, [r2, #16]
 8009a22:	2200      	movs	r2, #0
 8009a24:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8009a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a28:	3314      	adds	r3, #20
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f00b fb61 	bl	80150f2 <uxListRemove>
                vPortFree( pxCallback );
 8009a30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a32:	f00e fcc7 	bl	80183c4 <vPortFree>
                 pxIterator != pxEnd;
 8009a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d1d6      	bne.n	80099ec <vDNSCheckCallBack+0xa0>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8009a3e:	4b06      	ldr	r3, [pc, #24]	@ (8009a58 <vDNSCheckCallBack+0x10c>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <vDNSCheckCallBack+0x100>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8009a46:	2000      	movs	r0, #0
 8009a48:	f001 fcba 	bl	800b3c0 <vIPSetDNSTimerEnableState>
        }
    }
 8009a4c:	bf00      	nop
 8009a4e:	3730      	adds	r7, #48	@ 0x30
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	200012b0 	.word	0x200012b0
 8009a58:	200012a8 	.word	0x200012a8

08009a5c <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 8009a60:	4802      	ldr	r0, [pc, #8]	@ (8009a6c <vDNSCallbackInitialise+0x10>)
 8009a62:	f00b fabc 	bl	8014fde <vListInitialise>
    }
 8009a66:	bf00      	nop
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200012a8 	.word	0x200012a8

08009a70 <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
        size_t DNS_ReadNameField( ParseSet_t * pxSet,
                                  size_t uxDestLen )
        {
 8009a70:	b480      	push	{r7}
 8009a72:	b089      	sub	sp, #36	@ 0x24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
            size_t uxNameLen = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]
            size_t uxIndex = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
            size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	613b      	str	r3, [r7, #16]
            const uint8_t * pucByte = pxSet->pucByte;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	60fb      	str	r3, [r7, #12]

            /* uxCount gets the values from pucByte and counts down to 0.
             * No need to have a different type than that of pucByte */
            size_t uxCount;

            if( uxSourceLen == ( size_t ) 0U )
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <DNS_ReadNameField+0x2a>
            {
                /* Return 0 value in case of error. */
                uxIndex = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61bb      	str	r3, [r7, #24]
 8009a98:	e069      	b.n	8009b6e <DNS_ReadNameField+0xfe>
            }

            /* Determine if the name is the fully coded name, or an offset to the name
             * elsewhere in the message. */
            else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009aa8:	d144      	bne.n	8009b34 <DNS_ReadNameField+0xc4>
            {
                /* Jump over the two byte offset. */
                if( uxSourceLen > sizeof( uint16_t ) )
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d903      	bls.n	8009ab8 <DNS_ReadNameField+0x48>
                {
                    uxIndex += sizeof( uint16_t );
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e05a      	b.n	8009b6e <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	61bb      	str	r3, [r7, #24]
 8009abc:	e057      	b.n	8009b6e <DNS_ReadNameField+0xfe>
                /* 'uxIndex' points to the full name. Walk over the string. */
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
                {
                    /* If this is not the first time through the loop, then add a
                     * separator in the output. */
                    if( ( uxNameLen > 0U ) )
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d008      	beq.n	8009ad6 <DNS_ReadNameField+0x66>
                    {
                        /*
                         * uxNameLen can never be greater than uxDestLen, since there are checks
                         * outside this condition, so the check is removed.
                         */
                        pxSet->pcName[ uxNameLen ] = '.';
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	4413      	add	r3, r2
 8009aca:	332c      	adds	r3, #44	@ 0x2c
 8009acc:	222e      	movs	r2, #46	@ 0x2e
 8009ace:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	61fb      	str	r3, [r7, #28]
                    }

                    /* Process the first/next sub-string. */
                    uxCount = ( size_t ) pucByte[ uxIndex ];
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	4413      	add	r3, r2
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	617b      	str	r3, [r7, #20]

                    /* uxIndex should point to the first character now, unless uxCount
                     * is an offset field. */
                    uxIndex++;
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	61bb      	str	r3, [r7, #24]

                    if( ( uxIndex + uxCount ) > uxSourceLen )
 8009ae6:	69ba      	ldr	r2, [r7, #24]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	4413      	add	r3, r2
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d202      	bcs.n	8009af8 <DNS_ReadNameField+0x88>
                    {
                        uxIndex = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61bb      	str	r3, [r7, #24]
                        break;
 8009af6:	e027      	b.n	8009b48 <DNS_ReadNameField+0xd8>
                    }

                    if( ( uxNameLen + uxCount ) >= uxDestLen )
 8009af8:	69fa      	ldr	r2, [r7, #28]
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	4413      	add	r3, r2
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d812      	bhi.n	8009b2a <DNS_ReadNameField+0xba>
                    {
                        uxIndex = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	61bb      	str	r3, [r7, #24]
                        break;
 8009b08:	e01e      	b.n	8009b48 <DNS_ReadNameField+0xd8>
                    {
                        /*
                         * uxNameLen can never be greater than uxDestLen, since there are checks
                         * outside this condition, so the check is removed.
                         */
                        pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	4413      	add	r3, r2
 8009b10:	7819      	ldrb	r1, [r3, #0]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	4413      	add	r3, r2
 8009b18:	332c      	adds	r3, #44	@ 0x2c
 8009b1a:	460a      	mov	r2, r1
 8009b1c:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	3301      	adds	r3, #1
 8009b22:	61fb      	str	r3, [r7, #28]
                        uxIndex++;
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	3301      	adds	r3, #1
 8009b28:	61bb      	str	r3, [r7, #24]
                    while( uxCount-- != 0U )
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	1e5a      	subs	r2, r3, #1
 8009b2e:	617a      	str	r2, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1ea      	bne.n	8009b0a <DNS_ReadNameField+0x9a>
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d205      	bcs.n	8009b48 <DNS_ReadNameField+0xd8>
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	4413      	add	r3, r2
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1ba      	bne.n	8009abe <DNS_ReadNameField+0x4e>
                    }
                }

                /* Confirm that a fully formed name was found. */
                if( uxIndex > 0U )
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00f      	beq.n	8009b6e <DNS_ReadNameField+0xfe>
                     * failing above check. Whenever we exit the loop otherwise, either
                     * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                     * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                     * case).
                     */
                    if( uxIndex < uxSourceLen )
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d209      	bcs.n	8009b6a <DNS_ReadNameField+0xfa>
                    {
                        pxSet->pcName[ uxNameLen ] = '\0';
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	332c      	adds	r3, #44	@ 0x2c
 8009b5e:	2200      	movs	r2, #0
 8009b60:	701a      	strb	r2, [r3, #0]
                        uxIndex++;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	3301      	adds	r3, #1
 8009b66:	61bb      	str	r3, [r7, #24]
 8009b68:	e001      	b.n	8009b6e <DNS_ReadNameField+0xfe>
                    }
                    else
                    {
                        uxIndex = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61bb      	str	r3, [r7, #24]
                    }
                }
            }

            return uxIndex;
 8009b6e:	69bb      	ldr	r3, [r7, #24]
        }
 8009b70:	4618      	mov	r0, r3
 8009b72:	3724      	adds	r7, #36	@ 0x24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8009b7c:	b480      	push	{r7}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	613b      	str	r3, [r7, #16]
 8009b98:	e03f      	b.n	8009c1a <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ba6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ba8:	d11f      	bne.n	8009bea <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d903      	bls.n	8009bb8 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	3302      	adds	r3, #2
 8009bb4:	613b      	str	r3, [r7, #16]
 8009bb6:	e030      	b.n	8009c1a <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	613b      	str	r3, [r7, #16]
 8009bbc:	e02d      	b.n	8009c1a <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d908      	bls.n	8009be4 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	e002      	b.n	8009bea <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	613b      	str	r3, [r7, #16]
                    break;
 8009be8:	e008      	b.n	8009bfc <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	4413      	add	r3, r2
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <DNS_SkipNameField+0x80>
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d8e0      	bhi.n	8009bbe <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	4413      	add	r3, r2
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d103      	bne.n	8009c16 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	3301      	adds	r3, #1
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	e001      	b.n	8009c1a <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8009c1a:	693b      	ldr	r3, [r7, #16]
    }
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	371c      	adds	r7, #28
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b0a0      	sub	sp, #128	@ 0x80
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8009c36:	2301      	movs	r3, #1
 8009c38:	67bb      	str	r3, [r7, #120]	@ 0x78
        uint32_t ulIPAddress = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	677b      	str	r3, [r7, #116]	@ 0x74
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8009c3e:	f107 0318 	add.w	r3, r7, #24
 8009c42:	2254      	movs	r2, #84	@ 0x54
 8009c44:	2100      	movs	r1, #0
 8009c46:	4618      	mov	r0, r3
 8009c48:	f00e ff8c 	bl	8018b64 <memset>
        xSet.usPortNumber = usPort;
 8009c4c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8009c50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8009c52:	f107 0318 	add.w	r3, r7, #24
 8009c56:	334c      	adds	r3, #76	@ 0x4c
 8009c58:	66bb      	str	r3, [r7, #104]	@ 0x68

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b0b      	cmp	r3, #11
 8009c62:	d802      	bhi.n	8009c6a <DNS_ParseDNSReply+0x42>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c68:	e08d      	b.n	8009d86 <DNS_ParseDNSReply+0x15e>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	61bb      	str	r3, [r7, #24]
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	617b      	str	r3, [r7, #20]
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	623b      	str	r3, [r7, #32]
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	330c      	adds	r3, #12
 8009c86:	627b      	str	r3, [r7, #36]	@ 0x24
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8009c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8a:	3b0c      	subs	r3, #12
 8009c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	889b      	ldrh	r3, [r3, #4]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	83bb      	strh	r3, [r7, #28]
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	88db      	ldrh	r3, [r3, #6]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	83fb      	strh	r3, [r7, #30]

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	f248 030f 	movw	r3, #32783	@ 0x800f
 8009caa:	4013      	ands	r3, r2
 8009cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cb0:	d112      	bne.n	8009cd8 <DNS_ParseDNSReply+0xb0>
                {
                    xIsResponse = pdTRUE;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c

                    if( xSet.usAnswers == 0U )
 8009cb6:	8bfb      	ldrh	r3, [r7, #30]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <DNS_ParseDNSReply+0x9a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8009cc0:	e061      	b.n	8009d86 <DNS_ParseDNSReply+0x15e>
                    }

                    if( xSet.usQuestions == 0U )
 8009cc2:	8bbb      	ldrh	r3, [r7, #28]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10d      	bne.n	8009ce4 <DNS_ParseDNSReply+0xbc>
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 8009cc8:	f107 0318 	add.w	r3, r7, #24
 8009ccc:	211e      	movs	r1, #30
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7ff fece 	bl	8009a70 <DNS_ReadNameField>
 8009cd4:	6738      	str	r0, [r7, #112]	@ 0x70
 8009cd6:	e005      	b.n	8009ce4 <DNS_ParseDNSReply+0xbc>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8009cd8:	8bbb      	ldrh	r3, [r7, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d102      	bne.n	8009ce4 <DNS_ParseDNSReply+0xbc>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8009ce2:	e050      	b.n	8009d86 <DNS_ParseDNSReply+0x15e>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8009cea:	e036      	b.n	8009d5a <DNS_ParseDNSReply+0x132>
                        }
                    }
                    #endif

                    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                        if( x == 0U )
 8009cec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d107      	bne.n	8009d04 <DNS_ParseDNSReply+0xdc>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8009cf4:	f107 0318 	add.w	r3, r7, #24
 8009cf8:	211e      	movs	r1, #30
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff feb8 	bl	8009a70 <DNS_ReadNameField>
 8009d00:	6738      	str	r0, [r7, #112]	@ 0x70
 8009d02:	e006      	b.n	8009d12 <DNS_ParseDNSReply+0xea>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS || ipconfigUSE_MDNS || ipconfigUSE_LLMNR */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff ff36 	bl	8009b7c <DNS_SkipNameField>
 8009d10:	6738      	str	r0, [r7, #112]	@ 0x70
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8009d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d102      	bne.n	8009d1e <DNS_ParseDNSReply+0xf6>
                    {
                        xReturn = pdFALSE;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8009d1c:	e022      	b.n	8009d64 <DNS_ParseDNSReply+0x13c>
                    }

                    uxBytesRead += uxResult;
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d22:	4413      	add	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8009d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d2a:	4413      	add	r3, r2
 8009d2c:	627b      	str	r3, [r7, #36]	@ 0x24
                    xSet.uxSourceBytesRemaining -= uxResult;
 8009d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8009d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d38:	2b03      	cmp	r3, #3
 8009d3a:	d906      	bls.n	8009d4a <DNS_ParseDNSReply+0x122>
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	3304      	adds	r3, #4
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8009d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d44:	3b04      	subs	r3, #4
 8009d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d48:	e002      	b.n	8009d50 <DNS_ParseDNSReply+0x128>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8009d4e:	e009      	b.n	8009d64 <DNS_ParseDNSReply+0x13c>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8009d50:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8009d54:	3301      	adds	r3, #1
 8009d56:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8009d5a:	8bbb      	ldrh	r3, [r7, #28]
 8009d5c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d3c3      	bcc.n	8009cec <DNS_ParseDNSReply+0xc4>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8009d64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00c      	beq.n	8009d84 <DNS_ParseDNSReply+0x15c>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8009d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d10a      	bne.n	8009d86 <DNS_ParseDNSReply+0x15e>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8009d70:	f107 0214 	add.w	r2, r7, #20
 8009d74:	f107 0318 	add.w	r3, r7, #24
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f813 	bl	8009da6 <parseDNSAnswer>
 8009d80:	6778      	str	r0, [r7, #116]	@ 0x74
 8009d82:	e000      	b.n	8009d86 <DNS_ParseDNSReply+0x15e>
                    break;
 8009d84:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8009d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d102      	bne.n	8009d92 <DNS_ParseDNSReply+0x16a>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d90:	e004      	b.n	8009d9c <DNS_ParseDNSReply+0x174>
        }
        else if( xExpected == pdFALSE )
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <DNS_ParseDNSReply+0x174>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	677b      	str	r3, [r7, #116]	@ 0x74
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8009d9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
    }
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3780      	adds	r7, #128	@ 0x80
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8009da6:	b590      	push	{r4, r7, lr}
 8009da8:	b0a7      	sub	sp, #156	@ 0x9c
 8009daa:	af02      	add	r7, sp, #8
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8009db8:	2301      	movs	r3, #1
 8009dba:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009dd0:	e16b      	b.n	800a0aa <parseDNSAnswer+0x304>
        {
            BaseType_t xDoAccept = pdFALSE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009dda:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009dde:	429a      	cmp	r2, r3
 8009de0:	f240 816b 	bls.w	800a0ba <parseDNSAnswer+0x314>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	68da      	ldr	r2, [r3, #12]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	4619      	mov	r1, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	f7ff fec4 	bl	8009b7c <DNS_SkipNameField>
 8009df4:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8009df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d103      	bne.n	8009e04 <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009e02:	e15b      	b.n	800a0bc <parseDNSAnswer+0x316>
            }

            if( uxBytesRead != NULL )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d005      	beq.n	8009e16 <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e10:	441a      	add	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e1c:	441a      	add	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	695a      	ldr	r2, [r3, #20]
 8009e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e28:	1ad2      	subs	r2, r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d803      	bhi.n	8009e3e <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009e3c:	e13e      	b.n	800a0bc <parseDNSAnswer+0x316>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f001 fe7c 	bl	800bb40 <usChar2u16>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8b1b      	ldrh	r3, [r3, #24]
 8009e54:	2b1c      	cmp	r3, #28
 8009e56:	d10c      	bne.n	8009e72 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2210      	movs	r2, #16
 8009e5c:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	695a      	ldr	r2, [r3, #20]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	330a      	adds	r3, #10
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d323      	bcc.n	8009eb4 <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e70:	e020      	b.n	8009eb4 <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8b1b      	ldrh	r3, [r3, #24]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d11c      	bne.n	8009eb4 <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2204      	movs	r2, #4
 8009e7e:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	695a      	ldr	r2, [r3, #20]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	330a      	adds	r3, #10
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d312      	bcc.n	8009eb4 <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	330a      	adds	r3, #10
 8009e94:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 8009e96:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009ea4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ea6:	f00e ff38 	bl	8018d1a <memcpy>

                    if( ulTestAddress != 0U )
 8009eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 8009eb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 80bf 	beq.w	800a03a <parseDNSAnswer+0x294>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8009ec2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ec4:	891b      	ldrh	r3, [r3, #8]
 8009ec6:	b29a      	uxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	f040 80a1 	bne.w	800a016 <parseDNSAnswer+0x270>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	2b10      	cmp	r3, #16
 8009eda:	d11c      	bne.n	8009f16 <parseDNSAnswer+0x170>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 8009ee2:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	6859      	ldr	r1, [r3, #4]
 8009eea:	689a      	ldr	r2, [r3, #8]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                            if( ppxAddressInfo != NULL )
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d009      	beq.n	8009f0a <parseDNSAnswer+0x164>
                            {
                                pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	332c      	adds	r3, #44	@ 0x2c
 8009efa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009efe:	210a      	movs	r1, #10
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff fa29 	bl	8009358 <pxNew_AddrInfo>
 8009f06:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                            }
                        #endif

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2201      	movs	r2, #1
 8009f12:	61da      	str	r2, [r3, #28]
 8009f14:	e021      	b.n	8009f5a <parseDNSAnswer+0x1b4>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	330a      	adds	r3, #10
 8009f1c:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	331c      	adds	r3, #28
 8009f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a1b      	ldr	r3, [r3, #32]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009f2c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009f2e:	f00e fef4 	bl	8018d1a <memcpy>

                        #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                            if( ppxAddressInfo != NULL )
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00b      	beq.n	8009f50 <parseDNSAnswer+0x1aa>
                            {
                                const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	331c      	adds	r3, #28
 8009f3c:	65bb      	str	r3, [r7, #88]	@ 0x58

                                pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	332c      	adds	r3, #44	@ 0x2c
 8009f42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f44:	2102      	movs	r1, #2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fa06 	bl	8009358 <pxNew_AddrInfo>
 8009f4c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                            }
                        #endif

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8009f56:	2300      	movs	r3, #0
 8009f58:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8009f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d013      	beq.n	8009f8a <parseDNSAnswer+0x1e4>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d104      	bne.n	8009f74 <parseDNSAnswer+0x1ce>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	e004      	b.n	8009f7e <parseDNSAnswer+0x1d8>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f7c:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8009f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f82:	f103 021c 	add.w	r2, r3, #28
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	651a      	str	r2, [r3, #80]	@ 0x50

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <parseDNSAnswer+0x1f0>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	e000      	b.n	8009f98 <parseDNSAnswer+0x1f2>
 8009f96:	2300      	movs	r3, #0
 8009f98:	4619      	mov	r1, r3
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fc7a 	bl	8009894 <xDNSDoCallback>
 8009fa0:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 8009fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <parseDNSAnswer+0x208>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2201      	movs	r2, #1
 8009fac:	629a      	str	r2, [r3, #40]	@ 0x28
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d011      	beq.n	8009fda <parseDNSAnswer+0x234>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8009fbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fbe:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 8009fc0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f7ff fa5a 	bl	8009482 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	8b1b      	ldrh	r3, [r3, #24]
 8009fde:	2b1c      	cmp	r3, #28
 8009fe0:	d108      	bne.n	8009ff4 <parseDNSAnswer+0x24e>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 8009fe2:	f107 0214 	add.w	r2, r7, #20
 8009fe6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009fea:	2328      	movs	r3, #40	@ 0x28
 8009fec:	200a      	movs	r0, #10
 8009fee:	f003 fc09 	bl	800d804 <FreeRTOS_inet_ntop>
 8009ff2:	e008      	b.n	800a006 <parseDNSAnswer+0x260>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8009ffa:	f107 0214 	add.w	r2, r7, #20
 8009ffe:	2328      	movs	r3, #40	@ 0x28
 800a000:	2002      	movs	r0, #2
 800a002:	f003 fbff 	bl	800d804 <FreeRTOS_inet_ntop>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 800a006:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d103      	bne.n	800a016 <parseDNSAnswer+0x270>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	68da      	ldr	r2, [r3, #12]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	330a      	adds	r3, #10
 800a020:	441a      	add	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	695a      	ldr	r2, [r3, #20]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	f1a3 020a 	sub.w	r2, r3, #10
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	615a      	str	r2, [r3, #20]
 800a038:	e032      	b.n	800a0a0 <parseDNSAnswer+0x2fa>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d92e      	bls.n	800a0a0 <parseDNSAnswer+0x2fa>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f103 020a 	add.w	r2, r3, #10
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	f1a3 020a 	sub.w	r2, r3, #10
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 800a060:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a062:	7a1a      	ldrb	r2, [r3, #8]
 800a064:	7a5b      	ldrb	r3, [r3, #9]
 800a066:	021b      	lsls	r3, r3, #8
 800a068:	4313      	orrs	r3, r2
 800a06a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	695a      	ldr	r2, [r3, #20]
 800a072:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a076:	429a      	cmp	r2, r3
 800a078:	d30e      	bcc.n	800a098 <parseDNSAnswer+0x2f2>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	68da      	ldr	r2, [r3, #12]
 800a07e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	695a      	ldr	r2, [r3, #20]
 800a08c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a090:	1ad2      	subs	r2, r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	615a      	str	r2, [r3, #20]
 800a096:	e003      	b.n	800a0a0 <parseDNSAnswer+0x2fa>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 800a098:	2300      	movs	r3, #0
 800a09a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 800a09e:	e00d      	b.n	800a0bc <parseDNSAnswer+0x316>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 800a0a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	88db      	ldrh	r3, [r3, #6]
 800a0ae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	f4ff ae8d 	bcc.w	8009dd2 <parseDNSAnswer+0x2c>
 800a0b8:	e000      	b.n	800a0bc <parseDNSAnswer+0x316>
                break;
 800a0ba:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 800a0bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <parseDNSAnswer+0x324>
 800a0c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0c8:	e000      	b.n	800a0cc <parseDNSAnswer+0x326>
 800a0ca:	2300      	movs	r3, #0
    }
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3794      	adds	r7, #148	@ 0x94
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd90      	pop	{r4, r7, pc}

0800a0d4 <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	75fb      	strb	r3, [r7, #23]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	2b29      	cmp	r3, #41	@ 0x29
 800a0e6:	d80d      	bhi.n	800a104 <ProcessICMPPacket+0x30>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	b672      	cpsid	i
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	b662      	cpsie	i
 800a0fc:	60fb      	str	r3, [r7, #12]
}
 800a0fe:	bf00      	nop
 800a100:	bf00      	nop
 800a102:	e7fd      	b.n	800a100 <ProcessICMPPacket+0x2c>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a108:	2b29      	cmp	r3, #41	@ 0x29
 800a10a:	d915      	bls.n	800a138 <ProcessICMPPacket+0x64>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a110:	613b      	str	r3, [r7, #16]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d008      	beq.n	800a12e <ProcessICMPPacket+0x5a>
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	d10a      	bne.n	800a136 <ProcessICMPPacket+0x62>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	6938      	ldr	r0, [r7, #16]
 800a124:	f000 f80d 	bl	800a142 <prvProcessICMPEchoRequest>
 800a128:	4603      	mov	r3, r0
 800a12a:	75fb      	strb	r3, [r7, #23]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 800a12c:	e004      	b.n	800a138 <ProcessICMPPacket+0x64>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 800a12e:	6938      	ldr	r0, [r7, #16]
 800a130:	f000 f833 	bl	800a19a <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 800a134:	e000      	b.n	800a138 <ProcessICMPPacket+0x64>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 800a136:	bf00      	nop
            }
        }

        return eReturn;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
    }
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800a142:	b480      	push	{r7}
 800a144:	b087      	sub	sp, #28
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3322      	adds	r3, #34	@ 0x22
 800a150:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	330e      	adds	r3, #14
 800a156:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2200      	movs	r2, #0
 800a15c:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	68da      	ldr	r2, [r3, #12]
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2240      	movs	r2, #64	@ 0x40
 800a176:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	2200      	movs	r2, #0
 800a17c:	719a      	strb	r2, [r3, #6]
 800a17e:	2200      	movs	r2, #0
 800a180:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	2200      	movs	r2, #0
 800a186:	709a      	strb	r2, [r3, #2]
 800a188:	2200      	movs	r2, #0
 800a18a:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 800a18c:	2302      	movs	r3, #2
    }
 800a18e:	4618      	mov	r0, r3
 800a190:	371c      	adds	r7, #28
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b086      	sub	sp, #24
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	7c1a      	ldrb	r2, [r3, #16]
 800a1aa:	7c5b      	ldrb	r3, [r3, #17]
 800a1ac:	021b      	lsls	r3, r3, #8
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 800a1b2:	89fb      	ldrh	r3, [r7, #14]
 800a1b4:	3b14      	subs	r3, #20
 800a1b6:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 800a1b8:	89fb      	ldrh	r3, [r7, #14]
 800a1ba:	3b08      	subs	r3, #8
 800a1bc:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	332a      	adds	r3, #42	@ 0x2a
 800a1c6:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	82bb      	strh	r3, [r7, #20]
 800a1cc:	e00c      	b.n	800a1e8 <prvProcessICMPEchoReply+0x4e>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	2b78      	cmp	r3, #120	@ 0x78
 800a1d4:	d002      	beq.n	800a1dc <prvProcessICMPEchoReply+0x42>
            {
                eStatus = eInvalidData;
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	75fb      	strb	r3, [r7, #23]
                break;
 800a1da:	e009      	b.n	800a1f0 <prvProcessICMPEchoReply+0x56>
            }

            pucByte++;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 800a1e2:	8abb      	ldrh	r3, [r7, #20]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	82bb      	strh	r3, [r7, #20]
 800a1e8:	8aba      	ldrh	r2, [r7, #20]
 800a1ea:	89fb      	ldrh	r3, [r7, #14]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d3ee      	bcc.n	800a1ce <prvProcessICMPEchoReply+0x34>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fe66 	bl	800aecc <vApplicationPingReplyHook>
    }
 800a200:	bf00      	nop
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 800a210:	f000 f8e4 	bl	800a3dc <prvIPTask_Initialise>
    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 800a214:	f000 f802 	bl	800a21c <prvProcessIPEventsAndTimers>
 800a218:	e7fc      	b.n	800a214 <prvIPTask+0xc>
	...

0800a21c <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08e      	sub	sp, #56	@ 0x38
 800a220:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the Resolution, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 800a222:	f000 fef7 	bl	800b014 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 800a226:	f000 fe97 	bl	800af58 <xCalculateSleepTime>
 800a22a:	6378      	str	r0, [r7, #52]	@ 0x34

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 800a22c:	4b69      	ldr	r3, [pc, #420]	@ (800a3d4 <prvProcessIPEventsAndTimers+0x1b8>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f107 011c 	add.w	r1, r7, #28
 800a234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a236:	4618      	mov	r0, r3
 800a238:	f00b fabc 	bl	80157b4 <xQueueReceive>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 800a242:	23ff      	movs	r3, #255	@ 0xff
 800a244:	773b      	strb	r3, [r7, #28]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 800a246:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d00d      	beq.n	800a26c <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 800a250:	4b60      	ldr	r3, [pc, #384]	@ (800a3d4 <prvProcessIPEventsAndTimers+0x1b8>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f00b fcce 	bl	8015bf6 <uxQueueSpacesAvailable>
 800a25a:	6338      	str	r0, [r7, #48]	@ 0x30

            if( uxQueueMinimumSpace > uxCount )
 800a25c:	4b5e      	ldr	r3, [pc, #376]	@ (800a3d8 <prvProcessIPEventsAndTimers+0x1bc>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a262:	429a      	cmp	r2, r3
 800a264:	d202      	bcs.n	800a26c <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 800a266:	4a5c      	ldr	r2, [pc, #368]	@ (800a3d8 <prvProcessIPEventsAndTimers+0x1bc>)
 800a268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26a:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 800a26c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a270:	3301      	adds	r3, #1
 800a272:	2b0f      	cmp	r3, #15
 800a274:	f200 80a4 	bhi.w	800a3c0 <prvProcessIPEventsAndTimers+0x1a4>
 800a278:	a201      	add	r2, pc, #4	@ (adr r2, 800a280 <prvProcessIPEventsAndTimers+0x64>)
 800a27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27e:	bf00      	nop
 800a280:	0800a3c1 	.word	0x0800a3c1
 800a284:	0800a2c1 	.word	0x0800a2c1
 800a288:	0800a2cb 	.word	0x0800a2cb
 800a28c:	0800a2d5 	.word	0x0800a2d5
 800a290:	0800a2e1 	.word	0x0800a2e1
 800a294:	0800a3c1 	.word	0x0800a3c1
 800a298:	0800a347 	.word	0x0800a347
 800a29c:	0800a351 	.word	0x0800a351
 800a2a0:	0800a379 	.word	0x0800a379
 800a2a4:	0800a381 	.word	0x0800a381
 800a2a8:	0800a3a5 	.word	0x0800a3a5
 800a2ac:	0800a2e7 	.word	0x0800a2e7
 800a2b0:	0800a33d 	.word	0x0800a33d
 800a2b4:	0800a35b 	.word	0x0800a35b
 800a2b8:	0800a3c1 	.word	0x0800a3c1
 800a2bc:	0800a3ab 	.word	0x0800a3ab
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 f9aa 	bl	800b61c <prvProcessNetworkDownEvent>
            break;
 800a2c8:	e07d      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 f928 	bl	800a522 <prvHandleEthernetPacket>
            break;
 800a2d2:	e078      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 f930 	bl	800a53e <prvForwardTxPacket>
            break;
 800a2de:	e072      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>

        case eARPTimerEvent:
            /* The ARP Resolution timer has expired, process the cache. */
            #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                vARPAgeCache();
 800a2e0:	f7fd fe5c 	bl	8007f9c <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */
            break;
 800a2e4:	e06f      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 800a2ea:	2318      	movs	r3, #24
 800a2ec:	713b      	strb	r3, [r7, #4]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f0:	7a1b      	ldrb	r3, [r3, #8]
 800a2f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d108      	bne.n	800a30e <prvProcessIPEventsAndTimers+0xf2>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        xAddress.sin_family = FREERTOS_AF_INET;
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	717b      	strb	r3, [r7, #5]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a304:	60fb      	str	r3, [r7, #12]
                        /* 'ulLocalAddress' will be set again by vSocketBind(). */
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	2200      	movs	r2, #0
 800a30a:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 800a30c:	e000      	b.n	800a310 <prvProcessIPEventsAndTimers+0xf4>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800a30e:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800a314:	80fb      	strh	r3, [r7, #6]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	2200      	movs	r2, #0
 800a31a:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800a31c:	1d39      	adds	r1, r7, #4
 800a31e:	2300      	movs	r3, #0
 800a320:	2218      	movs	r2, #24
 800a322:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a324:	f002 fd42 	bl	800cdac <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f043 0210 	orr.w	r2, r3, #16
 800a330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a332:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800a334:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a336:	f003 faa3 	bl	800d880 <vSocketWakeUpUser>
            break;
 800a33a:	e044      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 800a33c:	6a3b      	ldr	r3, [r7, #32]
 800a33e:	4618      	mov	r0, r3
 800a340:	f002 fdae 	bl	800cea0 <vSocketClose>
            break;
 800a344:	e03f      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	4618      	mov	r0, r3
 800a34a:	f008 f841 	bl	80123d0 <vProcessGeneratedUDPPacket>
            break;
 800a34e:	e03a      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	4618      	mov	r0, r3
 800a354:	f000 f896 	bl	800a484 <prvCallDHCP_RA_Handler>
            break;
 800a358:	e035      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>
             * vSocketSelect() will check which sockets actually have an event
             * and update the socket field xSocketBits. */
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            #if ( ipconfigSELECT_USES_NOTIFY != 0 )
                {
                    SocketSelectMessage_t * pxMessage = ( ( SocketSelectMessage_t * ) xReceivedEvent.pvData );
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    vSocketSelect( pxMessage->pxSocketSet );
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	4618      	mov	r0, r3
 800a364:	f003 ff7a 	bl	800e25c <vSocketSelect>
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	2300      	movs	r3, #0
 800a36e:	2202      	movs	r2, #2
 800a370:	2100      	movs	r1, #0
 800a372:	f00c ffa7 	bl	80172c4 <xTaskGenericNotify>
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800a376:	e026      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800a378:	2001      	movs	r0, #1
 800a37a:	f000 ffaf 	bl	800b2dc <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 800a37e:	e022      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 800a384:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a386:	f004 fea3 	bl	800f0d0 <xTCPCheckNewClient>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d019      	beq.n	800a3c4 <prvProcessIPEventsAndTimers+0x1a8>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f043 0204 	orr.w	r2, r3, #4
 800a398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39a:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 800a39c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a39e:	f003 fa6f 	bl	800d880 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 800a3a2:	e00f      	b.n	800a3c4 <prvProcessIPEventsAndTimers+0x1a8>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 800a3a4:	f003 fe68 	bl	800e078 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800a3a8:	e00d      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 800a3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f00a fdb9 	bl	8014f2a <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800a3b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3ba:	f00e f803 	bl	80183c4 <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800a3be:	e002      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 800a3c0:	bf00      	nop
 800a3c2:	e000      	b.n	800a3c6 <prvProcessIPEventsAndTimers+0x1aa>
            break;
 800a3c4:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 800a3c6:	f000 f833 	bl	800a430 <prvIPTask_CheckPendingEvents>
}
 800a3ca:	bf00      	nop
 800a3cc:	3738      	adds	r7, #56	@ 0x38
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	200012c0 	.word	0x200012c0
 800a3d8:	20000014 	.word	0x20000014

0800a3dc <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 800a3e2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800a3e6:	f000 ff2f 	bl	800b248 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a428 <prvIPTask_Initialise+0x4c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	607b      	str	r3, [r7, #4]
 800a3f0:	e005      	b.n	800a3fe <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f8b8 	bl	800a568 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	607b      	str	r3, [r7, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1f6      	bne.n	800a3f2 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 800a404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a408:	f000 fef2 	bl	800b1f0 <vTCPTimerReload>
    }
    #endif

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        /* Mark the ARP timer as inactive since we are not waiting on any resolution as of now. */
        vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a40c:	2000      	movs	r0, #0
 800a40e:	f000 ff9f 	bl	800b350 <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 800a412:	f7fe ff9b 	bl	800934c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 800a416:	f7ff f849 	bl	80094ac <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800a41a:	4b04      	ldr	r3, [pc, #16]	@ (800a42c <prvIPTask_Initialise+0x50>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	601a      	str	r2, [r3, #0]
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	20002640 	.word	0x20002640
 800a42c:	200012d0 	.word	0x200012d0

0800a430 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800a436:	4b12      	ldr	r3, [pc, #72]	@ (800a480 <prvIPTask_CheckPendingEvents+0x50>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d01c      	beq.n	800a478 <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 800a43e:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <prvIPTask_CheckPendingEvents+0x50>)
 800a440:	2200      	movs	r2, #0
 800a442:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 800a444:	f001 ffa2 	bl	800c38c <FreeRTOS_FirstNetworkInterface>
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	e012      	b.n	800a472 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	7f1b      	ldrb	r3, [r3, #28]
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d007      	beq.n	800a46a <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f001 f8de 	bl	800b61c <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	7f13      	ldrb	r3, [r2, #28]
 800a464:	f023 0302 	bic.w	r3, r3, #2
 800a468:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f001 ffd4 	bl	800c418 <FreeRTOS_NextNetworkInterface>
 800a470:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e9      	bne.n	800a44c <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800a478:	bf00      	nop
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	200012c8 	.word	0x200012c8

0800a484 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	60fb      	str	r3, [r7, #12]
        }
    #endif
    /* The DHCP state machine needs processing. */
    #if ( ipconfigUSE_DHCP == 1 )
    {
        if( ( pxEndPoint->bits.bWantDHCP != pdFALSE_UNSIGNED ) && ( xIsIPv6 == pdFALSE ) )
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <prvCallDHCP_RA_Handler+0x3e>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d103      	bne.n	800a4c2 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process DHCP messages for a given end-point. */
            vDHCPProcess( pdFALSE, pxEndPoint );
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	2000      	movs	r0, #0
 800a4be:	f7fd ff59 	bl	8008374 <vDHCPProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 800a4c2:	bf00      	nop
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 800a4d0:	4b03      	ldr	r3, [pc, #12]	@ (800a4e0 <FreeRTOS_GetIPTaskHandle+0x14>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	200012cc 	.word	0x200012cc

0800a4e4 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800a4f2:	f043 0320 	orr.w	r3, r3, #32
 800a4f6:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
        }
    #else
        {
            vApplicationIPNetworkEventHook_Multi( eNetworkUp, pxEndPoint );
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	f000 fcf3 	bl	800aee8 <vApplicationIPNetworkEventHook_Multi>
        }
    #endif
    #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

    /* Set remaining time to 0 so it will become active immediately. */
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d103      	bne.n	800a51a <vIPNetworkUpCalls+0x36>
        #endif
    }
    else
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
            vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800a512:	f242 7010 	movw	r0, #10000	@ 0x2710
 800a516:	f000 fe79 	bl	800b20c <vARPTimerReload>
        #endif
    }
}
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b082      	sub	sp, #8
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f9bf 	bl	800a8b4 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800a536:	bf00      	nop
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d007      	beq.n	800a560 <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	4798      	blx	r3
    }
}
 800a560:	bf00      	nop
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800a570:	2300      	movs	r3, #0
 800a572:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	7f13      	ldrb	r3, [r2, #28]
 800a578:	f023 0301 	bic.w	r3, r3, #1
 800a57c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 800a57e:	2300      	movs	r3, #0
 800a580:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800a586:	f107 030c 	add.w	r3, r7, #12
 800a58a:	6979      	ldr	r1, [r7, #20]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 f8b9 	bl	800a704 <xSendEventStructToIPTask>
 800a592:	4603      	mov	r3, r0
 800a594:	2b01      	cmp	r3, #1
 800a596:	d008      	beq.n	800a5aa <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	7f13      	ldrb	r3, [r2, #28]
 800a59c:	f043 0302 	orr.w	r3, r3, #2
 800a5a0:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 800a5a2:	4b06      	ldr	r3, [pc, #24]	@ (800a5bc <FreeRTOS_NetworkDown+0x54>)
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 800a5a8:	e004      	b.n	800a5b4 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	7f13      	ldrb	r3, [r2, #28]
 800a5ae:	f023 0302 	bic.w	r3, r3, #2
 800a5b2:	7713      	strb	r3, [r2, #28]
}
 800a5b4:	bf00      	nop
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	200012c8 	.word	0x200012c8

0800a5c0 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFALSE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 800a5ca:	f001 fedf 	bl	800c38c <FreeRTOS_FirstNetworkInterface>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10d      	bne.n	800a5f0 <FreeRTOS_IPInit_Multi+0x30>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d8:	b672      	cpsid	i
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	b662      	cpsie	i
 800a5e8:	603b      	str	r3, [r7, #0]
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	e7fd      	b.n	800a5ec <FreeRTOS_IPInit_Multi+0x2c>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 800a5f0:	f001 f8b6 	bl	800b760 <vPreCheckConfigs>
    /* Attempt to create the queue used to communicate with the IP task. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        static StaticQueue_t xNetworkEventStaticQueue;
        static uint8_t ucNetworkEventQueueStorageArea[ ipconfigEVENT_QUEUE_LENGTH * sizeof( IPStackEvent_t ) ];
        xNetworkEventQueue = xQueueCreateStatic( ipconfigEVENT_QUEUE_LENGTH,
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	@ (800a674 <FreeRTOS_IPInit_Multi+0xb4>)
 800a5fa:	4a1f      	ldr	r2, [pc, #124]	@ (800a678 <FreeRTOS_IPInit_Multi+0xb8>)
 800a5fc:	2108      	movs	r1, #8
 800a5fe:	2041      	movs	r0, #65	@ 0x41
 800a600:	f00a fe0e 	bl	8015220 <xQueueGenericCreateStatic>
 800a604:	4603      	mov	r3, r0
 800a606:	4a1d      	ldr	r2, [pc, #116]	@ (800a67c <FreeRTOS_IPInit_Multi+0xbc>)
 800a608:	6013      	str	r3, [r2, #0]
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
        configASSERT( xNetworkEventQueue != NULL );
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 800a60a:	4b1c      	ldr	r3, [pc, #112]	@ (800a67c <FreeRTOS_IPInit_Multi+0xbc>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d02b      	beq.n	800a66a <FreeRTOS_IPInit_Multi+0xaa>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800a612:	4b1a      	ldr	r3, [pc, #104]	@ (800a67c <FreeRTOS_IPInit_Multi+0xbc>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	491a      	ldr	r1, [pc, #104]	@ (800a680 <FreeRTOS_IPInit_Multi+0xc0>)
 800a618:	4618      	mov	r0, r3
 800a61a:	f00b fc61 	bl	8015ee0 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 800a61e:	f008 f921 	bl	8012864 <xNetworkBuffersInitialise>
 800a622:	4603      	mov	r3, r0
 800a624:	2b01      	cmp	r3, #1
 800a626:	d118      	bne.n	800a65a <FreeRTOS_IPInit_Multi+0x9a>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 800a628:	f001 ff42 	bl	800c4b0 <vNetworkSocketsInit>
            /* Create the task that processes Ethernet and stack events. */
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                static StaticTask_t xIPTaskBuffer;
                static StackType_t xIPTaskStack[ ipconfigIP_TASK_STACK_SIZE_WORDS ];
                xIPTaskHandle = xTaskCreateStatic( &prvIPTask,
 800a62c:	4b15      	ldr	r3, [pc, #84]	@ (800a684 <FreeRTOS_IPInit_Multi+0xc4>)
 800a62e:	9302      	str	r3, [sp, #8]
 800a630:	4b15      	ldr	r3, [pc, #84]	@ (800a688 <FreeRTOS_IPInit_Multi+0xc8>)
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	2336      	movs	r3, #54	@ 0x36
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	2300      	movs	r3, #0
 800a63a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a63e:	4913      	ldr	r1, [pc, #76]	@ (800a68c <FreeRTOS_IPInit_Multi+0xcc>)
 800a640:	4813      	ldr	r0, [pc, #76]	@ (800a690 <FreeRTOS_IPInit_Multi+0xd0>)
 800a642:	f00b fcd5 	bl	8015ff0 <xTaskCreateStatic>
 800a646:	4603      	mov	r3, r0
 800a648:	4a12      	ldr	r2, [pc, #72]	@ (800a694 <FreeRTOS_IPInit_Multi+0xd4>)
 800a64a:	6013      	str	r3, [r2, #0]
                                                   NULL,
                                                   ipconfigIP_TASK_PRIORITY,
                                                   xIPTaskStack,
                                                   &xIPTaskBuffer );

                if( xIPTaskHandle != NULL )
 800a64c:	4b11      	ldr	r3, [pc, #68]	@ (800a694 <FreeRTOS_IPInit_Multi+0xd4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00a      	beq.n	800a66a <FreeRTOS_IPInit_Multi+0xaa>
                {
                    xReturn = pdTRUE;
 800a654:	2301      	movs	r3, #1
 800a656:	607b      	str	r3, [r7, #4]
 800a658:	e007      	b.n	800a66a <FreeRTOS_IPInit_Multi+0xaa>
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 800a65a:	4b08      	ldr	r3, [pc, #32]	@ (800a67c <FreeRTOS_IPInit_Multi+0xbc>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4618      	mov	r0, r3
 800a660:	f00b faef 	bl	8015c42 <vQueueDelete>
            xNetworkEventQueue = NULL;
 800a664:	4b05      	ldr	r3, [pc, #20]	@ (800a67c <FreeRTOS_IPInit_Multi+0xbc>)
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
    }

    return xReturn;
 800a66a:	687b      	ldr	r3, [r7, #4]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	200014dc 	.word	0x200014dc
 800a678:	200012d4 	.word	0x200012d4
 800a67c:	200012c0 	.word	0x200012c0
 800a680:	08019cf8 	.word	0x08019cf8
 800a684:	2000252c 	.word	0x2000252c
 800a688:	2000152c 	.word	0x2000152c
 800a68c:	08019d00 	.word	0x08019d00
 800a690:	0800a209 	.word	0x0800a209
 800a694:	200012cc 	.word	0x200012cc

0800a698 <FreeRTOS_ReleaseUDPPayloadBuffer>:
 * @brief Release the UDP payload buffer.
 *
 * @param[in] pvBuffer Pointer to the UDP buffer that is to be released.
 */
void FreeRTOS_ReleaseUDPPayloadBuffer( void const * pvBuffer )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxBuffer;

    pxBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 ff60 	bl	800b566 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800a6a6:	60f8      	str	r0, [r7, #12]
    configASSERT( pxBuffer != NULL );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10d      	bne.n	800a6ca <FreeRTOS_ReleaseUDPPayloadBuffer+0x32>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	b672      	cpsid	i
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	b662      	cpsie	i
 800a6c2:	60bb      	str	r3, [r7, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	e7fd      	b.n	800a6c6 <FreeRTOS_ReleaseUDPPayloadBuffer+0x2e>
    vReleaseNetworkBufferAndDescriptor( pxBuffer );
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f008 fa0e 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4603      	mov	r3, r0
 800a6e0:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 800a6e6:	79fb      	ldrb	r3, [r7, #7]
 800a6e8:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800a6ee:	f107 030c 	add.w	r3, r7, #12
 800a6f2:	6979      	ldr	r1, [r7, #20]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 f805 	bl	800a704 <xSendEventStructToIPTask>
 800a6fa:	4603      	mov	r3, r0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800a712:	f000 fb4d 	bl	800adb0 <xIPIsNetworkTaskReady>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d107      	bne.n	800a72c <xSendEventStructToIPTask+0x28>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f993 3000 	ldrsb.w	r3, [r3]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 800a726:	2300      	movs	r3, #0
 800a728:	617b      	str	r3, [r7, #20]
 800a72a:	e02b      	b.n	800a784 <xSendEventStructToIPTask+0x80>
    }
    else
    {
        xSendMessage = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f993 3000 	ldrsb.w	r3, [r3]
 800a736:	2b07      	cmp	r3, #7
 800a738:	d10c      	bne.n	800a754 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800a73a:	2001      	movs	r0, #1
 800a73c:	f000 fdce 	bl	800b2dc <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800a740:	4b13      	ldr	r3, [pc, #76]	@ (800a790 <xSendEventStructToIPTask+0x8c>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4618      	mov	r0, r3
 800a746:	f00b fa35 	bl	8015bb4 <uxQueueMessagesWaiting>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 800a750:	2300      	movs	r3, #0
 800a752:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d012      	beq.n	800a780 <xSendEventStructToIPTask+0x7c>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 800a75a:	f000 ff48 	bl	800b5ee <xIsCallingFromIPTask>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b01      	cmp	r3, #1
 800a762:	d104      	bne.n	800a76e <xSendEventStructToIPTask+0x6a>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800a76e:	4b08      	ldr	r3, [pc, #32]	@ (800a790 <xSendEventStructToIPTask+0x8c>)
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	f00a fe6e 	bl	8015458 <xQueueGenericSend>
 800a77c:	6178      	str	r0, [r7, #20]
 800a77e:	e001      	b.n	800a784 <xSendEventStructToIPTask+0x80>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 800a780:	2301      	movs	r3, #1
 800a782:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 800a784:	697b      	ldr	r3, [r7, #20]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	200012c0 	.word	0x200012c0

0800a794 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800a79c:	2300      	movs	r3, #0
 800a79e:	75fb      	strb	r3, [r7, #23]

    do
    {
        const EthernetHeader_t * pxEthernetHeader = NULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	613b      	str	r3, [r7, #16]
        const NetworkEndPoint_t * pxEndPoint = NULL;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60fb      	str	r3, [r7, #12]
        uint16_t usFrameType;

        /* First, check the packet buffer is non-null. */
        if( pucEthernetBuffer == NULL )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d067      	beq.n	800a87e <eConsiderFrameForProcessing+0xea>

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	613b      	str	r3, [r7, #16]
        usFrameType = pxEthernetHeader->usFrameType;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	7b1a      	ldrb	r2, [r3, #12]
 800a7b6:	7b5b      	ldrb	r3, [r3, #13]
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	817b      	strh	r3, [r7, #10]

        /* Second, filter based on ethernet frame type. */
        /* The frame type field in the Ethernet header must have a value greater than 0x0600. */
        if( ipIS_ETHERNET_FRAME_TYPE_INVALID( FreeRTOS_ntohs( usFrameType ) ) )
 800a7be:	897b      	ldrh	r3, [r7, #10]
 800a7c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a7c4:	d95d      	bls.n	800a882 <eConsiderFrameForProcessing+0xee>
                break;
            #else
                /* filtering is disabled - continue filter checks. */
            #endif
        }
        else if( usFrameType == ipARP_FRAME_TYPE )
 800a7c6:	897b      	ldrh	r3, [r7, #10]
 800a7c8:	f640 0206 	movw	r2, #2054	@ 0x806
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d008      	beq.n	800a7e2 <eConsiderFrameForProcessing+0x4e>
                break;
            #else
                /*  IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( usFrameType == ipIPv4_FRAME_TYPE )
 800a7d0:	897b      	ldrh	r3, [r7, #10]
 800a7d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7d6:	d004      	beq.n	800a7e2 <eConsiderFrameForProcessing+0x4e>
                break;
            #else
                /* IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( usFrameType == ipIPv6_FRAME_TYPE )
 800a7d8:	897b      	ldrh	r3, [r7, #10]
 800a7da:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800a7de:	4293      	cmp	r3, r2

                /* Processing custom Ethernet frames is enabled. No need for any further testing.
                 * Accept the frame whether it's a unicast, multicast, or broadcast. */
                eReturn = eProcessBuffer;
            #endif
            break;
 800a7e0:	e058      	b.n	800a894 <eConsiderFrameForProcessing+0x100>
        }

        /* Third, filter based on destination mac address. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 fd78 	bl	800c2dc <FreeRTOS_FindEndPointOnMAC>
 800a7ec:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d141      	bne.n	800a878 <eConsiderFrameForProcessing+0xe4>
        {
            /* A destination endpoint was found - Continue filter checks. */
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	2206      	movs	r2, #6
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4829      	ldr	r0, [pc, #164]	@ (800a8a0 <eConsiderFrameForProcessing+0x10c>)
 800a7fc:	f00e f988 	bl	8018b10 <memcmp>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d038      	beq.n	800a878 <eConsiderFrameForProcessing+0xe4>
        {
            /* The packet was a broadcast - Continue filter checks. */
        }
        else if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2206      	movs	r2, #6
 800a80a:	4619      	mov	r1, r3
 800a80c:	4825      	ldr	r0, [pc, #148]	@ (800a8a4 <eConsiderFrameForProcessing+0x110>)
 800a80e:	f00e f97f 	bl	8018b10 <memcmp>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d036      	beq.n	800a886 <eConsiderFrameForProcessing+0xf2>
                break;
            #else
                /* DNS, LLMNR, and IPv4 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xLLMNR_MacAddressIPv6.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	2206      	movs	r2, #6
 800a81c:	4619      	mov	r1, r3
 800a81e:	4822      	ldr	r0, [pc, #136]	@ (800a8a8 <eConsiderFrameForProcessing+0x114>)
 800a820:	f00e f976 	bl	8018b10 <memcmp>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d02f      	beq.n	800a88a <eConsiderFrameForProcessing+0xf6>
                break;
            #else
                /* DNS, LLMNR, and IPv6 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xMDNS_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2206      	movs	r2, #6
 800a82e:	4619      	mov	r1, r3
 800a830:	481e      	ldr	r0, [pc, #120]	@ (800a8ac <eConsiderFrameForProcessing+0x118>)
 800a832:	f00e f96d 	bl	8018b10 <memcmp>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d028      	beq.n	800a88e <eConsiderFrameForProcessing+0xfa>
                break;
            #else
                /* DNS, MDNS, and IPv4 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xMDNS_MacAddressIPv6.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2206      	movs	r2, #6
 800a840:	4619      	mov	r1, r3
 800a842:	481b      	ldr	r0, [pc, #108]	@ (800a8b0 <eConsiderFrameForProcessing+0x11c>)
 800a844:	f00e f964 	bl	8018b10 <memcmp>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d021      	beq.n	800a892 <eConsiderFrameForProcessing+0xfe>
                break;
            #else
                /* DNS, MDNS, and IPv6 are enabled - Continue filter checks. */
            #endif
        }
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv4_0 ) &&
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d10c      	bne.n	800a870 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv4_1 ) &&
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	785b      	ldrb	r3, [r3, #1]
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv4_0 ) &&
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d108      	bne.n	800a870 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 2 ] == ipMULTICAST_MAC_ADDRESS_IPv4_2 ) &&
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	789b      	ldrb	r3, [r3, #2]
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv4_1 ) &&
 800a862:	2b5e      	cmp	r3, #94	@ 0x5e
 800a864:	d104      	bne.n	800a870 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 3 ] <= 0x7fU ) )
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	78db      	ldrb	r3, [r3, #3]
 800a86a:	b25b      	sxtb	r3, r3
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 2 ] == ipMULTICAST_MAC_ADDRESS_IPv4_2 ) &&
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	da03      	bge.n	800a878 <eConsiderFrameForProcessing+0xe4>
                break;
            #else
                /* IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b33      	cmp	r3, #51	@ 0x33
 800a876:	e00d      	b.n	800a894 <eConsiderFrameForProcessing+0x100>
            /* The packet was not a broadcast, or for this node - release it */
            break;
        }

        /* All checks have been passed, process the packet. */
        eReturn = eProcessBuffer;
 800a878:	2301      	movs	r3, #1
 800a87a:	75fb      	strb	r3, [r7, #23]
 800a87c:	e00a      	b.n	800a894 <eConsiderFrameForProcessing+0x100>
            break;
 800a87e:	bf00      	nop
 800a880:	e008      	b.n	800a894 <eConsiderFrameForProcessing+0x100>
                break;
 800a882:	bf00      	nop
 800a884:	e006      	b.n	800a894 <eConsiderFrameForProcessing+0x100>
                break;
 800a886:	bf00      	nop
 800a888:	e004      	b.n	800a894 <eConsiderFrameForProcessing+0x100>
                break;
 800a88a:	bf00      	nop
 800a88c:	e002      	b.n	800a894 <eConsiderFrameForProcessing+0x100>
                break;
 800a88e:	bf00      	nop
 800a890:	e000      	b.n	800a894 <eConsiderFrameForProcessing+0x100>
                break;
 800a892:	bf00      	nop
    } while( ipFALSE_BOOL );

    return eReturn;
 800a894:	7dfb      	ldrb	r3, [r7, #23]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	08019ea8 	.word	0x08019ea8
 800a8a4:	08019e88 	.word	0x08019e88
 800a8a8:	08019e90 	.word	0x08019e90
 800a8ac:	08019e98 	.word	0x08019e98
 800a8b0:	08019ea0 	.word	0x08019ea0

0800a8b4 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	72fb      	strb	r3, [r7, #11]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d03d      	beq.n	800a944 <prvProcessEthernetPacket+0x90>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d039      	beq.n	800a944 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d4:	2b0d      	cmp	r3, #13
 800a8d6:	d934      	bls.n	800a942 <prvProcessEthernetPacket+0x8e>
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8dc:	60fb      	str	r3, [r7, #12]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eConsiderFrameForProcessing( pxNetworkBuffer->pucEthernetBuffer ) == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	899b      	ldrh	r3, [r3, #12]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d017      	beq.n	800a91c <prvProcessEthernetPacket+0x68>
 800a8ec:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	dc23      	bgt.n	800a93c <prvProcessEthernetPacket+0x88>
 800a8f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8f8:	d010      	beq.n	800a91c <prvProcessEthernetPacket+0x68>
 800a8fa:	f640 0206 	movw	r2, #2054	@ 0x806
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d11c      	bne.n	800a93c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a906:	2b29      	cmp	r3, #41	@ 0x29
 800a908:	d905      	bls.n	800a916 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7fc fe7a 	bl	8007604 <eARPProcessPacket>
 800a910:	4603      	mov	r3, r0
 800a912:	72fb      	strb	r3, [r7, #11]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 800a914:	e016      	b.n	800a944 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 800a916:	2300      	movs	r3, #0
 800a918:	72fb      	strb	r3, [r7, #11]
                        break;
 800a91a:	e013      	b.n	800a944 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a920:	2b21      	cmp	r3, #33	@ 0x21
 800a922:	d908      	bls.n	800a936 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a928:	6879      	ldr	r1, [r7, #4]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 f8c2 	bl	800aab4 <prvProcessIPPacket>
 800a930:	4603      	mov	r3, r0
 800a932:	72fb      	strb	r3, [r7, #11]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 800a934:	e006      	b.n	800a944 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 800a936:	2300      	movs	r3, #0
 800a938:	72fb      	strb	r3, [r7, #11]
                    break;
 800a93a:	e003      	b.n	800a944 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 800a93c:	2300      	movs	r3, #0
 800a93e:	72fb      	strb	r3, [r7, #11]
                    #endif
                    break;
 800a940:	e000      	b.n	800a944 <prvProcessEthernetPacket+0x90>
            break;
 800a942:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 800a944:	7afb      	ldrb	r3, [r7, #11]
 800a946:	2b04      	cmp	r3, #4
 800a948:	d00b      	beq.n	800a962 <prvProcessEthernetPacket+0xae>
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	dc35      	bgt.n	800a9ba <prvProcessEthernetPacket+0x106>
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d002      	beq.n	800a958 <prvProcessEthernetPacket+0xa4>
 800a952:	2b03      	cmp	r3, #3
 800a954:	d035      	beq.n	800a9c2 <prvProcessEthernetPacket+0x10e>
 800a956:	e030      	b.n	800a9ba <prvProcessEthernetPacket+0x106>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * a resolution request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800a958:	2101      	movs	r1, #1
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f943 	bl	800abe6 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 800a960:	e030      	b.n	800a9c4 <prvProcessEthernetPacket+0x110>
             * yet. */
            break;

        case eWaitingResolution:

            if( ( pxEthernetHeader->usFrameType == ipIPv4_FRAME_TYPE ) || ( pxEthernetHeader->usFrameType == ipARP_FRAME_TYPE ) )
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	899b      	ldrh	r3, [r3, #12]
 800a966:	b29b      	uxth	r3, r3
 800a968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a96c:	d006      	beq.n	800a97c <prvProcessEthernetPacket+0xc8>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	899b      	ldrh	r3, [r3, #12]
 800a972:	b29b      	uxth	r3, r3
 800a974:	f640 0206 	movw	r2, #2054	@ 0x806
 800a978:	4293      	cmp	r3, r2
 800a97a:	d10f      	bne.n	800a99c <prvProcessEthernetPacket+0xe8>
            {
                #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                    if( pxARPWaitingNetworkBuffer == NULL )
 800a97c:	4b13      	ldr	r3, [pc, #76]	@ (800a9cc <prvProcessEthernetPacket+0x118>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d107      	bne.n	800a994 <prvProcessEthernetPacket+0xe0>
                    {
                        pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 800a984:	4a11      	ldr	r2, [pc, #68]	@ (800a9cc <prvProcessEthernetPacket+0x118>)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6013      	str	r3, [r2, #0]
                        vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 800a98a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800a98e:	f000 fc11 	bl	800b1b4 <vIPTimerStartARPResolution>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                    iptraceDELAYED_ARP_BUFFER_FULL();
                }

                break;
 800a992:	e017      	b.n	800a9c4 <prvProcessEthernetPacket+0x110>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f008 f8a9 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
                break;
 800a99a:	e013      	b.n	800a9c4 <prvProcessEthernetPacket+0x110>
            }
            else if( pxEthernetHeader->usFrameType == ipIPv6_FRAME_TYPE )
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	899b      	ldrh	r3, [r3, #12]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d103      	bne.n	800a9b2 <prvProcessEthernetPacket+0xfe>
                    }
                    else
                #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) */
                {
                    /* We are already waiting on one resolution. This frame will be dropped. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f008 f89e 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>

                    iptraceDELAYED_ND_BUFFER_FULL();
                }

                break;
 800a9b0:	e008      	b.n	800a9c4 <prvProcessEthernetPacket+0x110>
            }
            else
            {
                /* Unknown frame type, drop the packet. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f008 f89a 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
            }

            break;
 800a9b8:	e004      	b.n	800a9c4 <prvProcessEthernetPacket+0x110>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f008 f896 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
            break;
 800a9c0:	e000      	b.n	800a9c4 <prvProcessEthernetPacket+0x110>
            break;
 800a9c2:	bf00      	nop
    }
}
 800a9c4:	bf00      	nop
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	200012bc 	.word	0x200012bc

0800a9d0 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b08c      	sub	sp, #48	@ 0x30
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingResolution = pdFALSE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800a9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ea:	3322      	adds	r3, #34	@ 0x22
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fa38 	bl	800ae64 <uxIPHeaderSizePacket>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	3316      	adds	r3, #22
 800a9f8:	623b      	str	r3, [r7, #32]
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fc:	791a      	ldrb	r2, [r3, #4]
 800a9fe:	795b      	ldrb	r3, [r3, #5]
 800aa00:	021b      	lsls	r3, r3, #8
 800aa02:	4313      	orrs	r3, r2
 800aa04:	83fb      	strh	r3, [r7, #30]
    uxLength = ( size_t ) usLength;
 800aa06:	8bfb      	ldrh	r3, [r7, #30]
 800aa08:	61bb      	str	r3, [r7, #24]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 800aa0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa0c:	899b      	ldrh	r3, [r3, #12]
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa14:	d10f      	bne.n	800aa36 <prvProcessUDPPacket+0x66>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 800aa16:	8bfc      	ldrh	r4, [r7, #30]
 800aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1a:	8a1b      	ldrh	r3, [r3, #16]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	461d      	mov	r5, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fa1f 	bl	800ae64 <uxIPHeaderSizePacket>
 800aa26:	4603      	mov	r3, r0
 800aa28:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 800aa2a:	429c      	cmp	r4, r3
 800aa2c:	d903      	bls.n	800aa36 <prvProcessUDPPacket+0x66>
        {
            eReturn = eReleaseBuffer;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800aa34:	e038      	b.n	800aaa8 <prvProcessUDPPacket+0xd8>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3a:	6a3a      	ldr	r2, [r7, #32]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d833      	bhi.n	800aaa8 <prvProcessUDPPacket+0xd8>
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	2b07      	cmp	r3, #7
 800aa44:	d930      	bls.n	800aaa8 <prvProcessUDPPacket+0xd8>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	617b      	str	r3, [r7, #20]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	3b08      	subs	r3, #8
 800aa54:	613b      	str	r3, [r7, #16]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d904      	bls.n	800aa68 <prvProcessUDPPacket+0x98>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	441a      	add	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800aa72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa74:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	885b      	ldrh	r3, [r3, #2]
 800aa80:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 800aa82:	f107 020c 	add.w	r2, r7, #12
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f007 fcba 	bl	8012402 <xProcessReceivedUDPPacket>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d103      	bne.n	800aa9c <prvProcessUDPPacket+0xcc>
                                       &( xIsWaitingResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 800aa94:	2303      	movs	r3, #3
 800aa96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800aa9a:	e005      	b.n	800aaa8 <prvProcessUDPPacket+0xd8>
        }
        else
        {
            /* Is this packet to be set aside for resolution. */
            if( xIsWaitingResolution == pdTRUE )
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d102      	bne.n	800aaa8 <prvProcessUDPPacket+0xd8>
            {
                eReturn = eWaitingResolution;
 800aaa2:	2304      	movs	r3, #4
 800aaa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 800aaa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3730      	adds	r7, #48	@ 0x30
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bdb0      	pop	{r4, r5, r7, pc}

0800aab4 <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800aabe:	2314      	movs	r3, #20
 800aac0:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	75fb      	strb	r3, [r7, #23]
    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	330e      	adds	r3, #14
 800aaca:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	899b      	ldrh	r3, [r3, #12]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aad6:	d124      	bne.n	800ab22 <prvProcessIPPacket+0x6e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	60fb      	str	r3, [r7, #12]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800aae6:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaec:	3b0e      	subs	r3, #14
 800aaee:	69ba      	ldr	r2, [r7, #24]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d802      	bhi.n	800aafa <prvProcessIPPacket+0x46>
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	2b13      	cmp	r3, #19
 800aaf8:	d802      	bhi.n	800ab00 <prvProcessIPPacket+0x4c>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 800aafa:	2300      	movs	r3, #0
 800aafc:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 800aafe:	e013      	b.n	800ab28 <prvProcessIPPacket+0x74>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7ddb      	ldrb	r3, [r3, #23]
 800ab04:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 f946 	bl	800bd9c <prvAllowIPPacketIPv4>
 800ab10:	4603      	mov	r3, r0
 800ab12:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab18:	3b06      	subs	r3, #6
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	7812      	ldrb	r2, [r2, #0]
 800ab1e:	701a      	strb	r2, [r3, #0]
                   break;
 800ab20:	e002      	b.n	800ab28 <prvProcessIPPacket+0x74>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 800ab22:	2300      	movs	r3, #0
 800ab24:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
            /* MISRA 16.4 Compliance */
            break;
 800ab26:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 800ab28:	7ffb      	ldrb	r3, [r7, #31]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d156      	bne.n	800abdc <prvProcessIPPacket+0x128>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	899b      	ldrh	r3, [r3, #12]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab38:	d108      	bne.n	800ab4c <prvProcessIPPacket+0x98>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipIPv4_FRAME_TYPE:

                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	2b14      	cmp	r3, #20
 800ab3e:	d907      	bls.n	800ab50 <prvProcessIPPacket+0x9c>
                    {
                        /* The size of the IP-header is larger than 20 bytes.
                         * The extra space is used for IP-options. */
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 800ab40:	6838      	ldr	r0, [r7, #0]
 800ab42:	f001 fa07 	bl	800bf54 <prvCheckIP4HeaderOptions>
 800ab46:	4603      	mov	r3, r0
 800ab48:	77fb      	strb	r3, [r7, #31]
                    }
                    break;
 800ab4a:	e001      	b.n	800ab50 <prvProcessIPPacket+0x9c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800ab4c:	bf00      	nop
 800ab4e:	e000      	b.n	800ab52 <prvProcessIPPacket+0x9e>
                    break;
 800ab50:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 800ab52:	7ffb      	ldrb	r3, [r7, #31]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d041      	beq.n	800abdc <prvProcessIPPacket+0x128>
        {
            /* Add the IP and MAC addresses to the cache if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	2b11      	cmp	r3, #17
 800ab5c:	d018      	beq.n	800ab90 <prvProcessIPPacket+0xdc>
            {
                if( xCheckRequiresResolution( pxNetworkBuffer ) == pdTRUE )
 800ab5e:	6838      	ldr	r0, [r7, #0]
 800ab60:	f001 fc65 	bl	800c42e <xCheckRequiresResolution>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d102      	bne.n	800ab70 <prvProcessIPPacket+0xbc>
                {
                    eReturn = eWaitingResolution;
 800ab6a:	2304      	movs	r3, #4
 800ab6c:	77fb      	strb	r3, [r7, #31]
 800ab6e:	e00f      	b.n	800ab90 <prvProcessIPPacket+0xdc>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	899b      	ldrh	r3, [r3, #12]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab7a:	d108      	bne.n	800ab8e <prvProcessIPPacket+0xda>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	1d9a      	adds	r2, r3, #6
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	4619      	mov	r1, r3
 800ab86:	4610      	mov	r0, r2
 800ab88:	f7fc ff88 	bl	8007a9c <vARPRefreshCacheEntryAge>
                                break;
 800ab8c:	e000      	b.n	800ab90 <prvProcessIPPacket+0xdc>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 800ab8e:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingResolution )
 800ab90:	7ffb      	ldrb	r3, [r7, #31]
 800ab92:	2b04      	cmp	r3, #4
 800ab94:	d022      	beq.n	800abdc <prvProcessIPPacket+0x128>
            {
                switch( ucProtocol )
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	2b11      	cmp	r3, #17
 800ab9a:	d00c      	beq.n	800abb6 <prvProcessIPPacket+0x102>
 800ab9c:	2b11      	cmp	r3, #17
 800ab9e:	dc19      	bgt.n	800abd4 <prvProcessIPPacket+0x120>
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d002      	beq.n	800abaa <prvProcessIPPacket+0xf6>
 800aba4:	2b06      	cmp	r3, #6
 800aba6:	d00c      	beq.n	800abc2 <prvProcessIPPacket+0x10e>
 800aba8:	e014      	b.n	800abd4 <prvProcessIPPacket+0x120>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 800abaa:	6838      	ldr	r0, [r7, #0]
 800abac:	f7ff fa92 	bl	800a0d4 <ProcessICMPPacket>
 800abb0:	4603      	mov	r3, r0
 800abb2:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 800abb4:	e012      	b.n	800abdc <prvProcessIPPacket+0x128>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 800abb6:	6838      	ldr	r0, [r7, #0]
 800abb8:	f7ff ff0a 	bl	800a9d0 <prvProcessUDPPacket>
 800abbc:	4603      	mov	r3, r0
 800abbe:	77fb      	strb	r3, [r7, #31]
                        break;
 800abc0:	e00c      	b.n	800abdc <prvProcessIPPacket+0x128>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800abc2:	6838      	ldr	r0, [r7, #0]
 800abc4:	f004 f8f8 	bl	800edb8 <xProcessReceivedTCPPacket>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d105      	bne.n	800abda <prvProcessIPPacket+0x126>
                                {
                                    eReturn = eFrameConsumed;
 800abce:	2303      	movs	r3, #3
 800abd0:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800abd2:	e002      	b.n	800abda <prvProcessIPPacket+0x126>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 800abd4:	2300      	movs	r3, #0
 800abd6:	77fb      	strb	r3, [r7, #31]
                        break;
 800abd8:	e000      	b.n	800abdc <prvProcessIPPacket+0x128>
                                break;
 800abda:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 800abdc:	7ffb      	ldrb	r3, [r7, #31]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3720      	adds	r7, #32
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b090      	sub	sp, #64	@ 0x40
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf4:	2b3b      	cmp	r3, #59	@ 0x3b
 800abf6:	d812      	bhi.n	800ac1e <vReturnEthernetFrame+0x38>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abfe:	e008      	b.n	800ac12 <vReturnEthernetFrame+0x2c>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac06:	4413      	add	r3, r2
 800ac08:	2200      	movs	r2, #0
 800ac0a:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800ac0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac0e:	3301      	adds	r3, #1
 800ac10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac14:	2b3b      	cmp	r3, #59	@ 0x3b
 800ac16:	ddf3      	ble.n	800ac00 <vReturnEthernetFrame+0x1a>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	223c      	movs	r2, #60	@ 0x3c
 800ac1c:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d111      	bne.n	800ac48 <vReturnEthernetFrame+0x62>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fc10 	bl	800b450 <pxDuplicateNetworkBufferWithDescriptor>
 800ac30:	6378      	str	r0, [r7, #52]	@ 0x34

            if( pxNewBuffer != NULL )
 800ac32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <vReturnEthernetFrame+0x5e>
            {
                xReleaseAfterSend = pdTRUE;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac42:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 800ac44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac46:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 808f 	beq.w	800ad6e <vReturnEthernetFrame+0x188>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac54:	633b      	str	r3, [r7, #48]	@ 0x30
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	63bb      	str	r3, [r7, #56]	@ 0x38
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eResolutionLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	617b      	str	r3, [r7, #20]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d111      	bne.n	800ac8a <vReturnEthernetFrame+0xa4>
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6a:	899b      	ldrh	r3, [r3, #12]
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac72:	d109      	bne.n	800ac88 <vReturnEthernetFrame+0xa2>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress );
 800ac74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac76:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 fb4e 	bl	800c31c <FreeRTOS_FindEndPointOnNetMask>
 800ac80:	4602      	mov	r2, r0
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 800ac86:	e000      	b.n	800ac8a <vReturnEthernetFrame+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800ac88:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d06d      	beq.n	800ad6e <vReturnEthernetFrame+0x188>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9e:	899b      	ldrh	r3, [r3, #12]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aca6:	d11c      	bne.n	800ace2 <vReturnEthernetFrame+0xfc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 800aca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acaa:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800acae:	617b      	str	r3, [r7, #20]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acb6:	f107 0118 	add.w	r1, r7, #24
 800acba:	f107 0314 	add.w	r3, r7, #20
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fd f834 	bl	8007d2c <eARPGetCacheEntry>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                        if( eResult == eResolutionCacheHit )
 800acca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d103      	bne.n	800acda <vReturnEthernetFrame+0xf4>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800acd2:	f107 0318 	add.w	r3, r7, #24
 800acd6:	63bb      	str	r3, [r7, #56]	@ 0x38
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 800acd8:	e007      	b.n	800acea <vReturnEthernetFrame+0x104>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	3306      	adds	r3, #6
 800acde:	63bb      	str	r3, [r7, #56]	@ 0x38
                        break;
 800ace0:	e003      	b.n	800acea <vReturnEthernetFrame+0x104>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* Just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	3306      	adds	r3, #6
 800ace6:	63bb      	str	r3, [r7, #56]	@ 0x38
                    break;
 800ace8:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 800acee:	2206      	movs	r2, #6
 800acf0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800acf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800acf4:	f00e f811 	bl	8018d1a <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acfc:	3338      	adds	r3, #56	@ 0x38
 800acfe:	63bb      	str	r3, [r7, #56]	@ 0x38
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	3306      	adds	r3, #6
 800ad04:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800ad06:	2206      	movs	r2, #6
 800ad08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ad0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad0c:	f00e f805 	bl	8018d1a <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 800ad10:	f000 fc6d 	bl	800b5ee <xIsCallingFromIPTask>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d106      	bne.n	800ad28 <vReturnEthernetFrame+0x142>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800ad1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad24:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 800ad26:	e022      	b.n	800ad6e <vReturnEthernetFrame+0x188>
            else if( xReleaseAfterSend != pdFALSE )
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d011      	beq.n	800ad52 <vReturnEthernetFrame+0x16c>
                xSendEvent.eEventType = eNetworkTxEvent;
 800ad2e:	2302      	movs	r3, #2
 800ad30:	733b      	strb	r3, [r7, #12]
                xSendEvent.pvData = pxNetworkBuffer;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	613b      	str	r3, [r7, #16]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800ad36:	f107 030c 	add.w	r3, r7, #12
 800ad3a:	f04f 31ff 	mov.w	r1, #4294967295
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff fce0 	bl	800a704 <xSendEventStructToIPTask>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d111      	bne.n	800ad6e <vReturnEthernetFrame+0x188>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f007 fece 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
}
 800ad50:	e00d      	b.n	800ad6e <vReturnEthernetFrame+0x188>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad56:	b672      	cpsid	i
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	b662      	cpsie	i
 800ad66:	623b      	str	r3, [r7, #32]
}
 800ad68:	bf00      	nop
                configASSERT( pdFALSE );
 800ad6a:	bf00      	nop
 800ad6c:	e7fd      	b.n	800ad6a <vReturnEthernetFrame+0x184>
}
 800ad6e:	bf00      	nop
 800ad70:	3740      	adds	r7, #64	@ 0x40
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <FreeRTOS_GetIPAddress>:
 * @brief Returns the IP address of the NIC.
 *
 * @return The IP address of the NIC.
 */
    uint32_t FreeRTOS_GetIPAddress( void )
    {
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b082      	sub	sp, #8
 800ad7a:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulIPAddress;

        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	f001 faf7 	bl	800c370 <FreeRTOS_FirstEndPoint>
 800ad82:	6038      	str	r0, [r7, #0]
                }
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        /* Returns the IP address of the NIC. */
        if( pxEndPoint == NULL )
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d102      	bne.n	800ad90 <FreeRTOS_GetIPAddress+0x1a>
        {
            ulIPAddress = 0U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	607b      	str	r3, [r7, #4]
 800ad8e:	e00a      	b.n	800ada6 <FreeRTOS_GetIPAddress+0x30>
        }
        else if( pxEndPoint->ipv4_settings.ulIPAddress != 0U )
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <FreeRTOS_GetIPAddress+0x2a>
        {
            ulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	607b      	str	r3, [r7, #4]
 800ad9e:	e002      	b.n	800ada6 <FreeRTOS_GetIPAddress+0x30>
        }
        else
        {
            ulIPAddress = pxEndPoint->ipv4_defaults.ulIPAddress;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	607b      	str	r3, [r7, #4]
        }

        return ulIPAddress;
 800ada6:	687b      	ldr	r3, [r7, #4]
    }
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800adb4:	4b03      	ldr	r3, [pc, #12]	@ (800adc4 <xIPIsNetworkTaskReady+0x14>)
 800adb6:	681b      	ldr	r3, [r3, #0]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	200012d0 	.word	0x200012d0

0800adc8 <FreeRTOS_IsNetworkUp>:
 * @brief Returns whether all end-points are up.
 *
 * @return pdTRUE if all defined end-points are up.
 */
BaseType_t FreeRTOS_IsNetworkUp( void )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0
    /* IsNetworkUp() is kept for backward compatibility. */
    return FreeRTOS_IsEndPointUp( NULL );
 800adcc:	2000      	movs	r0, #0
 800adce:	f000 f803 	bl	800add8 <FreeRTOS_IsEndPointUp>
 800add2:	4603      	mov	r3, r0
}
 800add4:	4618      	mov	r0, r3
 800add6:	bd80      	pop	{r7, pc}

0800add8 <FreeRTOS_IsEndPointUp>:
 * @brief Returns whether a particular end-point is up.
 *
 * @return pdTRUE if a particular end-points is up.
 */
BaseType_t FreeRTOS_IsEndPointUp( const struct xNetworkEndPoint * pxEndPoint )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxEndPoint != NULL )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d007      	beq.n	800adf6 <FreeRTOS_IsEndPointUp+0x1e>
    {
        /* Is this particular end-point up? */
        xReturn = ( BaseType_t ) pxEndPoint->bits.bEndPointUp;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800adec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	e003      	b.n	800adfe <FreeRTOS_IsEndPointUp+0x26>
    }
    else
    {
        /* Are all end-points up? */
        xReturn = FreeRTOS_AllEndPointsUp( NULL );
 800adf6:	2000      	movs	r0, #0
 800adf8:	f000 f806 	bl	800ae08 <FreeRTOS_AllEndPointsUp>
 800adfc:	60f8      	str	r0, [r7, #12]
    }

    return xReturn;
 800adfe:	68fb      	ldr	r3, [r7, #12]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <FreeRTOS_AllEndPointsUp>:
 * @param[in] pxInterface The network interface of interest, or NULL to check all end-points.
 *
 * @return pdTRUE if all end-points are up, otherwise pdFALSE;
 */
BaseType_t FreeRTOS_AllEndPointsUp( const struct xNetworkInterface * pxInterface )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdTRUE;
 800ae10:	2301      	movs	r3, #1
 800ae12:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800ae14:	4b12      	ldr	r3, [pc, #72]	@ (800ae60 <FreeRTOS_AllEndPointsUp+0x58>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	60bb      	str	r3, [r7, #8]

    while( pxEndPoint != NULL )
 800ae1a:	e017      	b.n	800ae4c <FreeRTOS_AllEndPointsUp+0x44>
    {
        if( ( pxInterface == NULL ) ||
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <FreeRTOS_AllEndPointsUp+0x26>
            ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        if( ( pxInterface == NULL ) ||
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d10a      	bne.n	800ae44 <FreeRTOS_AllEndPointsUp+0x3c>

        {
            if( pxEndPoint->bits.bEndPointUp == pdFALSE_UNSIGNED )
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d102      	bne.n	800ae44 <FreeRTOS_AllEndPointsUp+0x3c>
            {
                xResult = pdFALSE;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	60fb      	str	r3, [r7, #12]
                break;
 800ae42:	e006      	b.n	800ae52 <FreeRTOS_AllEndPointsUp+0x4a>
            }
        }

        pxEndPoint = pxEndPoint->pxNext;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ae4a:	60bb      	str	r3, [r7, #8]
    while( pxEndPoint != NULL )
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1e4      	bne.n	800ae1c <FreeRTOS_AllEndPointsUp+0x14>
    }

    return xResult;
 800ae52:	68fb      	ldr	r3, [r7, #12]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	2000263c 	.word	0x2000263c

0800ae64 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae70:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	899b      	ldrh	r3, [r3, #12]
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d102      	bne.n	800ae86 <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800ae80:	2328      	movs	r3, #40	@ 0x28
 800ae82:	60fb      	str	r3, [r7, #12]
 800ae84:	e001      	b.n	800ae8a <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800ae86:	2314      	movs	r3, #20
 800ae88:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d009      	beq.n	800aeba <uxIPHeaderSizeSocket+0x22>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	7a1b      	ldrb	r3, [r3, #8]
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800aeb4:	2328      	movs	r3, #40	@ 0x28
 800aeb6:	60fb      	str	r3, [r7, #12]
 800aeb8:	e001      	b.n	800aebe <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800aeba:	2314      	movs	r3, #20
 800aebc:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800aebe:	68fb      	ldr	r3, [r7, #12]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <vApplicationPingReplyHook>:

//USER FUNCTIONS

//Hook for when you receive a ping reply
void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, //reply message from system
		uint16_t usIdentifier ){
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	460a      	mov	r2, r1
 800aed6:	71fb      	strb	r3, [r7, #7]
 800aed8:	4613      	mov	r3, r2
 800aeda:	80bb      	strh	r3, [r7, #4]

}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <vApplicationIPNetworkEventHook_Multi>:

//checks the eNetworkUp type to see if it's  UP or DOWN
void vApplicationIPNetworkEventHook_Multi(eIPCallbackEvent_t networkEvent, struct xNetworkEndPoint *pxEndPoint){
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	4603      	mov	r3, r0
 800aef0:	6039      	str	r1, [r7, #0]
 800aef2:	71fb      	strb	r3, [r7, #7]
	switch(networkEvent){
 800aef4:	79fb      	ldrb	r3, [r7, #7]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <vApplicationIPNetworkEventHook_Multi+0x18>
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d008      	beq.n	800af10 <vApplicationIPNetworkEventHook_Multi+0x28>
		break;
	case eNetworkDown:
		SEGGER_RTT_printf(0,"Network Down!");
		break;
	}
}
 800aefe:	e00c      	b.n	800af1a <vApplicationIPNetworkEventHook_Multi+0x32>
		SEGGER_RTT_printf(0,"Network UP! IP: %lup\n", FreeRTOS_ntohl(pxEndPoint->ipv4_settings.ulIPAddress));
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	461a      	mov	r2, r3
 800af06:	4907      	ldr	r1, [pc, #28]	@ (800af24 <vApplicationIPNetworkEventHook_Multi+0x3c>)
 800af08:	2000      	movs	r0, #0
 800af0a:	f7f6 f8e3 	bl	80010d4 <SEGGER_RTT_printf>
		break;
 800af0e:	e004      	b.n	800af1a <vApplicationIPNetworkEventHook_Multi+0x32>
		SEGGER_RTT_printf(0,"Network Down!");
 800af10:	4905      	ldr	r1, [pc, #20]	@ (800af28 <vApplicationIPNetworkEventHook_Multi+0x40>)
 800af12:	2000      	movs	r0, #0
 800af14:	f7f6 f8de 	bl	80010d4 <SEGGER_RTT_printf>
		break;
 800af18:	bf00      	nop
}
 800af1a:	bf00      	nop
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	08019d08 	.word	0x08019d08
 800af28:	08019d20 	.word	0x08019d20

0800af2c <ulApplicationGetNextSequenceNumber>:
//get a random sequence number for the first packet
uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
                                           uint16_t usSourcePort,
                                           uint32_t ulDestinationAddress,
                                           uint16_t usDestinationPort )
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	607a      	str	r2, [r7, #4]
 800af36:	461a      	mov	r2, r3
 800af38:	460b      	mov	r3, r1
 800af3a:	817b      	strh	r3, [r7, #10]
 800af3c:	4613      	mov	r3, r2
 800af3e:	813b      	strh	r3, [r7, #8]
    return (uint32_t) rand() ^ (uint32_t) xTaskGetTickCount();
 800af40:	f00d fb68 	bl	8018614 <rand>
 800af44:	4603      	mov	r3, r0
 800af46:	461c      	mov	r4, r3
 800af48:	f00b fb72 	bl	8016630 <xTaskGetTickCount>
 800af4c:	4603      	mov	r3, r0
 800af4e:	4063      	eors	r3, r4
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	bd90      	pop	{r4, r7, pc}

0800af58 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800af5e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800af62:	607b      	str	r3, [r7, #4]

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800af64:	4b27      	ldr	r3, [pc, #156]	@ (800b004 <xCalculateSleepTime+0xac>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d007      	beq.n	800af82 <xCalculateSleepTime+0x2a>
        {
            if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800af72:	4b24      	ldr	r3, [pc, #144]	@ (800b004 <xCalculateSleepTime+0xac>)
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d902      	bls.n	800af82 <xCalculateSleepTime+0x2a>
            {
                uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 800af7c:	4b21      	ldr	r3, [pc, #132]	@ (800b004 <xCalculateSleepTime+0xac>)
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	607b      	str	r3, [r7, #4]
        }
    #endif

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800af82:	4b21      	ldr	r3, [pc, #132]	@ (800b008 <xCalculateSleepTime+0xb0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 800af88:	e013      	b.n	800afb2 <xCalculateSleepTime+0x5a>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d007      	beq.n	800afaa <xCalculateSleepTime+0x52>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d902      	bls.n	800afaa <xCalculateSleepTime+0x52>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afa8:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800afb0:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1e8      	bne.n	800af8a <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 800afb8:	4b14      	ldr	r3, [pc, #80]	@ (800b00c <xCalculateSleepTime+0xb4>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f003 0301 	and.w	r3, r3, #1
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d007      	beq.n	800afd6 <xCalculateSleepTime+0x7e>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800afc6:	4b11      	ldr	r3, [pc, #68]	@ (800b00c <xCalculateSleepTime+0xb4>)
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d902      	bls.n	800afd6 <xCalculateSleepTime+0x7e>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800afd0:	4b0e      	ldr	r3, [pc, #56]	@ (800b00c <xCalculateSleepTime+0xb4>)
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800afd6:	4b0e      	ldr	r3, [pc, #56]	@ (800b010 <xCalculateSleepTime+0xb8>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d007      	beq.n	800aff4 <xCalculateSleepTime+0x9c>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800afe4:	4b0a      	ldr	r3, [pc, #40]	@ (800b010 <xCalculateSleepTime+0xb8>)
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	429a      	cmp	r2, r3
 800afec:	d902      	bls.n	800aff4 <xCalculateSleepTime+0x9c>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800afee:	4b08      	ldr	r3, [pc, #32]	@ (800b010 <xCalculateSleepTime+0xb8>)
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800aff4:	687b      	ldr	r3, [r7, #4]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	200025ec 	.word	0x200025ec
 800b008:	2000263c 	.word	0x2000263c
 800b00c:	20002600 	.word	0x20002600
 800b010:	20002614 	.word	0x20002614

0800b014 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        /* Is it time for ARP processing? */
        if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800b01a:	484a      	ldr	r0, [pc, #296]	@ (800b144 <vCheckNetworkTimers+0x130>)
 800b01c:	f000 f922 	bl	800b264 <prvIPTimerCheck>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <vCheckNetworkTimers+0x18>
        {
            ( void ) xSendEventToIPTask( eARPTimerEvent );
 800b026:	2003      	movs	r0, #3
 800b028:	f7ff fb56 	bl	800a6d8 <xSendEventToIPTask>
        }

        /* Is the ARP resolution timer expired? */
        if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800b02c:	4846      	ldr	r0, [pc, #280]	@ (800b148 <vCheckNetworkTimers+0x134>)
 800b02e:	f000 f919 	bl	800b264 <prvIPTimerCheck>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00e      	beq.n	800b056 <vCheckNetworkTimers+0x42>
        {
            if( pxARPWaitingNetworkBuffer != NULL )
 800b038:	4b44      	ldr	r3, [pc, #272]	@ (800b14c <vCheckNetworkTimers+0x138>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00a      	beq.n	800b056 <vCheckNetworkTimers+0x42>
            {
                /* Disable the ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800b040:	2000      	movs	r0, #0
 800b042:	f000 f985 	bl	800b350 <vIPSetARPResolutionTimerEnableState>

                /* We have waited long enough for the ARP response. Now, free the network
                 * buffer. */
                vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800b046:	4b41      	ldr	r3, [pc, #260]	@ (800b14c <vCheckNetworkTimers+0x138>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f007 fd4e 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>

                /* Clear the pointer. */
                pxARPWaitingNetworkBuffer = NULL;
 800b050:	4b3e      	ldr	r3, [pc, #248]	@ (800b14c <vCheckNetworkTimers+0x138>)
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) */

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800b056:	4b3e      	ldr	r3, [pc, #248]	@ (800b150 <vCheckNetworkTimers+0x13c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800b05c:	e016      	b.n	800b08c <vCheckNetworkTimers+0x78>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	3348      	adds	r3, #72	@ 0x48
 800b062:	4618      	mov	r0, r3
 800b064:	f000 f8fe 	bl	800b264 <prvIPTimerCheck>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00a      	beq.n	800b084 <vCheckNetworkTimers+0x70>
            {
                #if ( ipconfigUSE_DHCP == 1 )
                    if( END_POINT_USES_DHCP( pxEndPoint ) )
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b074:	f003 0302 	and.w	r3, r3, #2
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <vCheckNetworkTimers+0x70>
                    {
                        ( void ) xSendDHCPEvent( pxEndPoint );
 800b07e:	6938      	ldr	r0, [r7, #16]
 800b080:	f000 f9c8 	bl	800b414 <xSendDHCPEvent>
                        vRAProcess( pdFALSE, pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b08a:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1e5      	bne.n	800b05e <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800b092:	4830      	ldr	r0, [pc, #192]	@ (800b154 <vCheckNetworkTimers+0x140>)
 800b094:	f000 f8e6 	bl	800b264 <prvIPTimerCheck>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <vCheckNetworkTimers+0x90>
        {
            vDNSCheckCallBack( NULL );
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f7fe fc54 	bl	800994c <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800b0a4:	4b2c      	ldr	r3, [pc, #176]	@ (800b158 <vCheckNetworkTimers+0x144>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f00a fd83 	bl	8015bb4 <uxQueueMessagesWaiting>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d102      	bne.n	800b0ba <vCheckNetworkTimers+0xa6>
        {
            xWillSleep = pdTRUE;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	e001      	b.n	800b0be <vCheckNetworkTimers+0xaa>
        }
        else
        {
            xWillSleep = pdFALSE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800b0be:	4827      	ldr	r0, [pc, #156]	@ (800b15c <vCheckNetworkTimers+0x148>)
 800b0c0:	f000 f8d0 	bl	800b264 <prvIPTimerCheck>
 800b0c4:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <vCheckNetworkTimers+0xbc>
        {
            xCheckTCPSockets = pdTRUE;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d007      	beq.n	800b0e6 <vCheckNetworkTimers+0xd2>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f002 fc92 	bl	800da00 <xTCPTimerCheck>
 800b0dc:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	481e      	ldr	r0, [pc, #120]	@ (800b15c <vCheckNetworkTimers+0x148>)
 800b0e2:	f000 f843 	bl	800b16c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	f003 fb2c 	bl	800e744 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f003 fb45 	bl	800e77c <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800b0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b160 <vCheckNetworkTimers+0x14c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d120      	bne.n	800b13c <vCheckNetworkTimers+0x128>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800b0fa:	481a      	ldr	r0, [pc, #104]	@ (800b164 <vCheckNetworkTimers+0x150>)
 800b0fc:	f000 f8b2 	bl	800b264 <prvIPTimerCheck>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d01a      	beq.n	800b13c <vCheckNetworkTimers+0x128>
        {
            BaseType_t xUp = pdTRUE;
 800b106:	2301      	movs	r3, #1
 800b108:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800b10a:	4b17      	ldr	r3, [pc, #92]	@ (800b168 <vCheckNetworkTimers+0x154>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	617b      	str	r3, [r7, #20]
 800b110:	e00e      	b.n	800b130 <vCheckNetworkTimers+0x11c>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	7f1b      	ldrb	r3, [r3, #28]
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d104      	bne.n	800b12a <vCheckNetworkTimers+0x116>
                {
                    xUp = pdFALSE;
 800b120:	2300      	movs	r3, #0
 800b122:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800b124:	6978      	ldr	r0, [r7, #20]
 800b126:	f7ff fa1f 	bl	800a568 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12e:	617b      	str	r3, [r7, #20]
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1ed      	bne.n	800b112 <vCheckNetworkTimers+0xfe>
                }
            }

            vSetAllNetworksUp( xUp );
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f95c 	bl	800b3f4 <vSetAllNetworksUp>
        }
    }
}
 800b13c:	bf00      	nop
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	200025ec 	.word	0x200025ec
 800b148:	200025d8 	.word	0x200025d8
 800b14c:	200012bc 	.word	0x200012bc
 800b150:	2000263c 	.word	0x2000263c
 800b154:	20002614 	.word	0x20002614
 800b158:	200012c0 	.word	0x200012c0
 800b15c:	20002600 	.word	0x20002600
 800b160:	200025d4 	.word	0x200025d4
 800b164:	20002628 	.word	0x20002628
 800b168:	20002640 	.word	0x20002640

0800b16c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	3304      	adds	r3, #4
 800b17a:	4618      	mov	r0, r3
 800b17c:	f00b fcf2 	bl	8016b64 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d105      	bne.n	800b198 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	7813      	ldrb	r3, [r2, #0]
 800b190:	f043 0302 	orr.w	r3, r3, #2
 800b194:	7013      	strb	r3, [r2, #0]
 800b196:	e004      	b.n	800b1a2 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	7813      	ldrb	r3, [r2, #0]
 800b19c:	f023 0302 	bic.w	r3, r3, #2
 800b1a0:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	7813      	ldrb	r3, [r2, #0]
 800b1a6:	f043 0301 	orr.w	r3, r3, #1
 800b1aa:	7013      	strb	r3, [r2, #0]
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
    void vIPTimerStartARPResolution( TickType_t xTime )
    {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
        prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	4803      	ldr	r0, [pc, #12]	@ (800b1cc <vIPTimerStartARPResolution+0x18>)
 800b1c0:	f7ff ffd4 	bl	800b16c <prvIPTimerStart>
    }
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	200025d8 	.word	0x200025d8

0800b1d0 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff ffc2 	bl	800b16c <prvIPTimerStart>
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4803      	ldr	r0, [pc, #12]	@ (800b208 <vTCPTimerReload+0x18>)
 800b1fc:	f7ff ffe8 	bl	800b1d0 <prvIPTimerReload>
    }
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	20002600 	.word	0x20002600

0800b20c <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
    void vARPTimerReload( TickType_t xTime )
    {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xARPTimer, xTime );
 800b214:	6879      	ldr	r1, [r7, #4]
 800b216:	4803      	ldr	r0, [pc, #12]	@ (800b224 <vARPTimerReload+0x18>)
 800b218:	f7ff ffda 	bl	800b1d0 <prvIPTimerReload>
    }
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	200025ec 	.word	0x200025ec

0800b228 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", ( unsigned long ) uxClockTicks ) );
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3348      	adds	r3, #72	@ 0x48
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	4618      	mov	r0, r3
 800b23a:	f7ff ffc9 	bl	800b1d0 <prvIPTimerReload>
    }
 800b23e:	bf00      	nop
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	4803      	ldr	r0, [pc, #12]	@ (800b260 <vNetworkTimerReload+0x18>)
 800b254:	f7ff ffbc 	bl	800b1d0 <prvIPTimerReload>
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20002628 	.word	0x20002628

0800b264 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800b27a:	2300      	movs	r3, #0
 800b27c:	60fb      	str	r3, [r7, #12]
 800b27e:	e028      	b.n	800b2d2 <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10f      	bne.n	800b2ae <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	1d1a      	adds	r2, r3, #4
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	330c      	adds	r3, #12
 800b296:	4619      	mov	r1, r3
 800b298:	4610      	mov	r0, r2
 800b29a:	f00b fca3 	bl	8016be4 <xTaskCheckForTimeOut>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d004      	beq.n	800b2ae <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	7813      	ldrb	r3, [r2, #0]
 800b2a8:	f043 0302 	orr.w	r3, r3, #2
 800b2ac:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d008      	beq.n	800b2ce <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff ff52 	bl	800b16c <prvIPTimerStart>
            xReturn = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e001      	b.n	800b2d2 <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800b2e4:	4a0c      	ldr	r2, [pc, #48]	@ (800b318 <vIPSetTCPTimerExpiredState+0x3c>)
 800b2e6:	7813      	ldrb	r3, [r2, #0]
 800b2e8:	f043 0301 	orr.w	r3, r3, #1
 800b2ec:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d005      	beq.n	800b300 <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800b2f4:	4a08      	ldr	r2, [pc, #32]	@ (800b318 <vIPSetTCPTimerExpiredState+0x3c>)
 800b2f6:	7813      	ldrb	r3, [r2, #0]
 800b2f8:	f043 0302 	orr.w	r3, r3, #2
 800b2fc:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800b2fe:	e004      	b.n	800b30a <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800b300:	4a05      	ldr	r2, [pc, #20]	@ (800b318 <vIPSetTCPTimerExpiredState+0x3c>)
 800b302:	7813      	ldrb	r3, [r2, #0]
 800b304:	f023 0302 	bic.w	r3, r3, #2
 800b308:	7013      	strb	r3, [r2, #0]
    }
 800b30a:	bf00      	nop
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	20002600 	.word	0x20002600

0800b31c <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetARPTimerEnableState( BaseType_t xEnableState )
    {
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
        if( xEnableState != pdFALSE )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <vIPSetARPTimerEnableState+0x1a>
        {
            xARPTimer.bActive = pdTRUE_UNSIGNED;
 800b32a:	4a08      	ldr	r2, [pc, #32]	@ (800b34c <vIPSetARPTimerEnableState+0x30>)
 800b32c:	7813      	ldrb	r3, [r2, #0]
 800b32e:	f043 0301 	orr.w	r3, r3, #1
 800b332:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xARPTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800b334:	e004      	b.n	800b340 <vIPSetARPTimerEnableState+0x24>
            xARPTimer.bActive = pdFALSE_UNSIGNED;
 800b336:	4a05      	ldr	r2, [pc, #20]	@ (800b34c <vIPSetARPTimerEnableState+0x30>)
 800b338:	7813      	ldrb	r3, [r2, #0]
 800b33a:	f023 0301 	bic.w	r3, r3, #1
 800b33e:	7013      	strb	r3, [r2, #0]
    }
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	200025ec 	.word	0x200025ec

0800b350 <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
    {
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
        if( xEnableState != pdFALSE )
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <vIPSetARPResolutionTimerEnableState+0x1a>
        {
            xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800b35e:	4a08      	ldr	r2, [pc, #32]	@ (800b380 <vIPSetARPResolutionTimerEnableState+0x30>)
 800b360:	7813      	ldrb	r3, [r2, #0]
 800b362:	f043 0301 	orr.w	r3, r3, #1
 800b366:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800b368:	e004      	b.n	800b374 <vIPSetARPResolutionTimerEnableState+0x24>
            xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800b36a:	4a05      	ldr	r2, [pc, #20]	@ (800b380 <vIPSetARPResolutionTimerEnableState+0x30>)
 800b36c:	7813      	ldrb	r3, [r2, #0]
 800b36e:	f023 0301 	bic.w	r3, r3, #1
 800b372:	7013      	strb	r3, [r2, #0]
    }
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	200025d8 	.word	0x200025d8

0800b384 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d007      	beq.n	800b3a4 <vIPSetDHCP_RATimerEnableState+0x20>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 800b39a:	f043 0301 	orr.w	r3, r3, #1
 800b39e:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800b3a2:	e006      	b.n	800b3b2 <vIPSetDHCP_RATimerEnableState+0x2e>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 800b3aa:	f023 0301 	bic.w	r3, r3, #1
 800b3ae:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    }
 800b3b2:	bf00      	nop
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d005      	beq.n	800b3da <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800b3ce:	4a08      	ldr	r2, [pc, #32]	@ (800b3f0 <vIPSetDNSTimerEnableState+0x30>)
 800b3d0:	7813      	ldrb	r3, [r2, #0]
 800b3d2:	f043 0301 	orr.w	r3, r3, #1
 800b3d6:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800b3d8:	e004      	b.n	800b3e4 <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800b3da:	4a05      	ldr	r2, [pc, #20]	@ (800b3f0 <vIPSetDNSTimerEnableState+0x30>)
 800b3dc:	7813      	ldrb	r3, [r2, #0]
 800b3de:	f023 0301 	bic.w	r3, r3, #1
 800b3e2:	7013      	strb	r3, [r2, #0]
    }
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	20002614 	.word	0x20002614

0800b3f4 <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800b3fc:	4a04      	ldr	r2, [pc, #16]	@ (800b410 <vSetAllNetworksUp+0x1c>)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6013      	str	r3, [r2, #0]
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	200025d4 	.word	0x200025d4

0800b414 <xSendDHCPEvent>:
 * @return pdPASS or pdFAIL, depending on whether xSendEventStructToIPTask()
 *         succeeded.
 * @param pxEndPoint The end-point that needs DHCP.
 */
    BaseType_t xSendDHCPEvent( struct xNetworkEndPoint * pxEndPoint )
    {
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
        IPStackEvent_t xEventMessage;
        const TickType_t uxDontBlock = 0U;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]

        #if ( ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_DHCP == 1 ) )
            eDHCPState_t uxOption = eGetDHCPState( pxEndPoint );
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fba0 	bl	800bb66 <eGetDHCPState>
 800b426:	4603      	mov	r3, r0
 800b428:	74fb      	strb	r3, [r7, #19]
        #endif

        xEventMessage.eEventType = eDHCPEvent;
 800b42a:	2306      	movs	r3, #6
 800b42c:	723b      	strb	r3, [r7, #8]

        /* MISRA Ref 11.6.1 [DHCP events and conversion to void] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        xEventMessage.pvData = ( void * ) pxEndPoint;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60fb      	str	r3, [r7, #12]
        #if ( ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_DHCP == 1 ) )
        {
            pxEndPoint->xDHCPData.eExpectedState = uxOption;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	7cfa      	ldrb	r2, [r7, #19]
 800b436:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
        }
        #endif

        return xSendEventStructToIPTask( &xEventMessage, uxDontBlock );
 800b43a:	f107 0308 	add.w	r3, r7, #8
 800b43e:	6979      	ldr	r1, [r7, #20]
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff f95f 	bl	800a704 <xSendEventStructToIPTask>
 800b446:	4603      	mov	r3, r0
    }
 800b448:	4618      	mov	r0, r3
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	617b      	str	r3, [r7, #20]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800b45e:	2100      	movs	r1, #0
 800b460:	6838      	ldr	r0, [r7, #0]
 800b462:	f007 fa97 	bl	8012994 <pxGetNetworkBufferWithDescriptor>
 800b466:	6138      	str	r0, [r7, #16]

    if( pxNewBuffer != NULL )
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d038      	beq.n	800b4e0 <pxDuplicateNetworkBufferWithDescriptor+0x90>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10d      	bne.n	800b492 <pxDuplicateNetworkBufferWithDescriptor+0x42>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47a:	b672      	cpsid	i
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	b662      	cpsie	i
 800b48a:	60fb      	str	r3, [r7, #12]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <pxDuplicateNetworkBufferWithDescriptor+0x3e>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d902      	bls.n	800b4a2 <pxDuplicateNetworkBufferWithDescriptor+0x52>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a0:	617b      	str	r3, [r7, #20]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	695a      	ldr	r2, [r3, #20]
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	f00d fc1d 	bl	8018d1a <memcpy>
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800b4e0:	693b      	ldr	r3, [r7, #16]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d102      	bne.n	800b500 <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60fb      	str	r3, [r7, #12]
 800b4fe:	e013      	b.n	800b528 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f816 	bl	800b532 <void_ptr_to_uintptr>
 800b506:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	3b22      	subs	r3, #34	@ 0x22
 800b510:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f003 0303 	and.w	r3, r3, #3
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d103      	bne.n	800b524 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	60fb      	str	r3, [r7, #12]
 800b522:	e001      	b.n	800b528 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800b524:	2300      	movs	r3, #0
 800b526:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800b528:	68fb      	ldr	r3, [r7, #12]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800b532:	b480      	push	{r7}
 800b534:	b085      	sub	sp, #20
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800b53e:	68fb      	ldr	r3, [r7, #12]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff ffc7 	bl	800b4ea <prvPacketBuffer_to_NetworkBuffer>
 800b55c:	4603      	mov	r3, r0
    }
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b088      	sub	sp, #32
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800b574:	2300      	movs	r3, #0
 800b576:	61fb      	str	r3, [r7, #28]
 800b578:	e034      	b.n	800b5e4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7e>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff ffd9 	bl	800b532 <void_ptr_to_uintptr>
 800b580:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	3b30      	subs	r3, #48	@ 0x30
 800b586:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	f023 030f 	bic.w	r3, r3, #15
 800b594:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800b596:	7bfb      	ldrb	r3, [r7, #15]
 800b598:	2b40      	cmp	r3, #64	@ 0x40
 800b59a:	d002      	beq.n	800b5a2 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	2b60      	cmp	r3, #96	@ 0x60
 800b5a0:	d101      	bne.n	800b5a6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e000      	b.n	800b5a8 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10d      	bne.n	800b5c8 <pxUDPPayloadBuffer_to_NetworkBuffer+0x62>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b0:	b672      	cpsid	i
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	b662      	cpsie	i
 800b5c0:	60bb      	str	r3, [r7, #8]
}
 800b5c2:	bf00      	nop
 800b5c4:	bf00      	nop
 800b5c6:	e7fd      	b.n	800b5c4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x5e>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	2b40      	cmp	r3, #64	@ 0x40
 800b5cc:	d102      	bne.n	800b5d4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x6e>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800b5ce:	232a      	movs	r3, #42	@ 0x2a
 800b5d0:	61bb      	str	r3, [r7, #24]
                    break;
 800b5d2:	e002      	b.n	800b5da <pxUDPPayloadBuffer_to_NetworkBuffer+0x74>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
                uxOffset = sizeof( UDPPacket_t );
 800b5d4:	232a      	movs	r3, #42	@ 0x2a
 800b5d6:	61bb      	str	r3, [r7, #24]
                break;
 800b5d8:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800b5da:	69b9      	ldr	r1, [r7, #24]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff ff84 	bl	800b4ea <prvPacketBuffer_to_NetworkBuffer>
 800b5e2:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3720      	adds	r7, #32
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800b5f4:	f00b fc48 	bl	8016e88 <xTaskGetCurrentTaskHandle>
 800b5f8:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800b5fa:	f7fe ff67 	bl	800a4cc <FreeRTOS_GetIPTaskHandle>
 800b5fe:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d102      	bne.n	800b60e <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800b608:	2301      	movs	r3, #1
 800b60a:	60fb      	str	r3, [r7, #12]
 800b60c:	e001      	b.n	800b612 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800b60e:	2300      	movs	r3, #0
 800b610:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b612:	68fb      	ldr	r3, [r7, #12]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10d      	bne.n	800b646 <prvProcessNetworkDownEvent+0x2a>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62e:	b672      	cpsid	i
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	b662      	cpsie	i
 800b63e:	613b      	str	r3, [r7, #16]
}
 800b640:	bf00      	nop
 800b642:	bf00      	nop
 800b644:	e7fd      	b.n	800b642 <prvProcessNetworkDownEvent+0x26>
    configASSERT( pxInterface->pfInitialise != NULL );
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10d      	bne.n	800b66a <prvProcessNetworkDownEvent+0x4e>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b652:	b672      	cpsid	i
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	b662      	cpsie	i
 800b662:	60fb      	str	r3, [r7, #12]
}
 800b664:	bf00      	nop
 800b666:	bf00      	nop
 800b668:	e7fd      	b.n	800b666 <prvProcessNetworkDownEvent+0x4a>
    /* Stop the Address Resolution timer while there is no network. */
    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        vIPSetARPTimerEnableState( pdFALSE );
 800b66a:	2000      	movs	r0, #0
 800b66c:	f7ff fe56 	bl	800b31c <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fe7d 	bl	800c370 <FreeRTOS_FirstEndPoint>
 800b676:	6178      	str	r0, [r7, #20]
 800b678:	e02d      	b.n	800b6d6 <prvProcessNetworkDownEvent+0xba>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800b680:	f023 0320 	bic.w	r3, r3, #32
 800b684:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b68e:	f003 0310 	and.w	r3, r3, #16
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d004      	beq.n	800b6a2 <prvProcessNetworkDownEvent+0x86>
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
                }
                #else
                {
                    vApplicationIPNetworkEventHook_Multi( eNetworkDown, pxEndPoint );
 800b698:	6979      	ldr	r1, [r7, #20]
 800b69a:	2001      	movs	r0, #1
 800b69c:	f7ff fc24 	bl	800aee8 <vApplicationIPNetworkEventHook_Multi>
 800b6a0:	e006      	b.n	800b6b0 <prvProcessNetworkDownEvent+0x94>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800b6a8:	f043 0310 	orr.w	r3, r3, #16
 800b6ac:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
        #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )

            /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
             * treat network down as a "delivery problem" and flush the ARP cache for this
             * interface. */
            FreeRTOS_ClearARP( pxEndPoint );
 800b6b0:	6978      	ldr	r0, [r7, #20]
 800b6b2:	f7fc fe05 	bl	80082c0 <FreeRTOS_ClearARP>
        #if ipconfigIS_ENABLED( ipconfigUSE_IPv6 )
            FreeRTOS_ClearND( pxEndPoint );
        #endif

        #if ( ipconfigUSE_DHCP == 1 )
            if( END_POINT_USES_DHCP( pxEndPoint ) )
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d002      	beq.n	800b6cc <prvProcessNetworkDownEvent+0xb0>
                    }
                    else
                #endif /* (( ipconfigUSE_DHCPv6 != 0 ) && ( ipconfigUSE_IPv6 != 0 )) */
                {
                    /* Stop the DHCP process for this end-point. */
                    vDHCPStop( pxEndPoint );
 800b6c6:	6978      	ldr	r0, [r7, #20]
 800b6c8:	f7fc ff36 	bl	8008538 <vDHCPStop>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800b6cc:	6979      	ldr	r1, [r7, #20]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fe96 	bl	800c400 <FreeRTOS_NextEndPoint>
 800b6d4:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1ce      	bne.n	800b67a <prvProcessNetworkDownEvent+0x5e>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	4798      	blx	r3
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d133      	bne.n	800b752 <prvProcessNetworkDownEvent+0x136>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	7f13      	ldrb	r3, [r2, #28]
 800b6ee:	f043 0301 	orr.w	r3, r3, #1
 800b6f2:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fe3b 	bl	800c370 <FreeRTOS_FirstEndPoint>
 800b6fa:	6178      	str	r0, [r7, #20]
 800b6fc:	e025      	b.n	800b74a <prvProcessNetworkDownEvent+0x12e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            #if ( ipconfigUSE_DHCP == 1 )
                if( END_POINT_USES_DHCP( pxEndPoint ) )
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b704:	f003 0302 	and.w	r3, r3, #2
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d004      	beq.n	800b718 <prvProcessNetworkDownEvent+0xfc>
                        }
                        else
                    #endif /* (( ipconfigUSE_DHCPv6 != 0 ) && ( ipconfigUSE_IPv6 != 0 )) */
                    {
                        /* Reset the DHCP process for this end-point. */
                        vDHCPProcess( pdTRUE, pxEndPoint );
 800b70e:	6979      	ldr	r1, [r7, #20]
 800b710:	2001      	movs	r0, #1
 800b712:	f7fc fe2f 	bl	8008374 <vDHCPProcess>
 800b716:	e013      	b.n	800b740 <prvProcessNetworkDownEvent+0x124>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b71e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b00      	cmp	r3, #0
 800b726:	d107      	bne.n	800b738 <prvProcessNetworkDownEvent+0x11c>
                {
                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE_UNSIGNED:
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800b728:	6978      	ldr	r0, [r7, #20]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	331c      	adds	r3, #28
 800b72e:	221c      	movs	r2, #28
 800b730:	4619      	mov	r1, r3
 800b732:	f00d faf2 	bl	8018d1a <memcpy>
                            break;
 800b736:	e000      	b.n	800b73a <prvProcessNetworkDownEvent+0x11e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800b738:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800b73a:	6978      	ldr	r0, [r7, #20]
 800b73c:	f7fe fed2 	bl	800a4e4 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800b740:	6979      	ldr	r1, [r7, #20]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fe5c 	bl	800c400 <FreeRTOS_NextEndPoint>
 800b748:	6178      	str	r0, [r7, #20]
             pxEndPoint != NULL;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1d6      	bne.n	800b6fe <prvProcessNetworkDownEvent+0xe2>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800b750:	e002      	b.n	800b758 <prvProcessNetworkDownEvent+0x13c>
        vSetAllNetworksUp( pdFALSE );
 800b752:	2000      	movs	r0, #0
 800b754:	f7ff fe4e 	bl	800b3f4 <vSetAllNetworksUp>
}
 800b758:	bf00      	nop
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08c      	sub	sp, #48	@ 0x30
 800b764:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800b766:	f7ff fb23 	bl	800adb0 <xIPIsNetworkTaskReady>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00d      	beq.n	800b78c <vPreCheckConfigs+0x2c>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b774:	b672      	cpsid	i
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	b662      	cpsie	i
 800b784:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b786:	bf00      	nop
 800b788:	bf00      	nop
 800b78a:	e7fd      	b.n	800b788 <vPreCheckConfigs+0x28>
    configASSERT( xNetworkEventQueue == NULL );
 800b78c:	4b58      	ldr	r3, [pc, #352]	@ (800b8f0 <vPreCheckConfigs+0x190>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00d      	beq.n	800b7b0 <vPreCheckConfigs+0x50>
	__asm volatile
 800b794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b798:	b672      	cpsid	i
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	b662      	cpsie	i
 800b7a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b7aa:	bf00      	nop
 800b7ac:	bf00      	nop
 800b7ae:	e7fd      	b.n	800b7ac <vPreCheckConfigs+0x4c>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800b7b0:	f7fe fe8c 	bl	800a4cc <FreeRTOS_GetIPTaskHandle>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00d      	beq.n	800b7d6 <vPreCheckConfigs+0x76>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7be:	b672      	cpsid	i
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	b662      	cpsie	i
 800b7ce:	623b      	str	r3, [r7, #32]
}
 800b7d0:	bf00      	nop
 800b7d2:	bf00      	nop
 800b7d4:	e7fd      	b.n	800b7d2 <vPreCheckConfigs+0x72>
             */
            configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );
        #endif /* if ( ipconfigSUPPRESS_BUFFER_PADDING_CHECK == 0 ) */

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800b7d6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800b7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800b7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7de:	f240 52db 	movw	r2, #1499	@ 0x5db
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d80d      	bhi.n	800b802 <vPreCheckConfigs+0xa2>
	__asm volatile
 800b7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ea:	b672      	cpsid	i
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	b662      	cpsie	i
 800b7fa:	61fb      	str	r3, [r7, #28]
}
 800b7fc:	bf00      	nop
 800b7fe:	bf00      	nop
 800b800:	e7fd      	b.n	800b7fe <vPreCheckConfigs+0x9e>

        uxSize = sizeof( EthernetHeader_t );
 800b802:	230e      	movs	r3, #14
 800b804:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800b806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b808:	2b0e      	cmp	r3, #14
 800b80a:	d00d      	beq.n	800b828 <vPreCheckConfigs+0xc8>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b810:	b672      	cpsid	i
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	b662      	cpsie	i
 800b820:	61bb      	str	r3, [r7, #24]
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <vPreCheckConfigs+0xc4>

        uxSize = sizeof( ARPHeader_t );
 800b828:	231c      	movs	r3, #28
 800b82a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800b82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b82e:	2b1c      	cmp	r3, #28
 800b830:	d00d      	beq.n	800b84e <vPreCheckConfigs+0xee>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b836:	b672      	cpsid	i
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	b662      	cpsie	i
 800b846:	617b      	str	r3, [r7, #20]
}
 800b848:	bf00      	nop
 800b84a:	bf00      	nop
 800b84c:	e7fd      	b.n	800b84a <vPreCheckConfigs+0xea>

        uxSize = sizeof( IPHeader_t );
 800b84e:	2314      	movs	r3, #20
 800b850:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800b852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b854:	2b14      	cmp	r3, #20
 800b856:	d00d      	beq.n	800b874 <vPreCheckConfigs+0x114>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85c:	b672      	cpsid	i
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	b662      	cpsie	i
 800b86c:	613b      	str	r3, [r7, #16]
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	e7fd      	b.n	800b870 <vPreCheckConfigs+0x110>

        uxSize = sizeof( ICMPHeader_t );
 800b874:	2308      	movs	r3, #8
 800b876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800b878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b87a:	2b08      	cmp	r3, #8
 800b87c:	d00d      	beq.n	800b89a <vPreCheckConfigs+0x13a>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b882:	b672      	cpsid	i
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	b662      	cpsie	i
 800b892:	60fb      	str	r3, [r7, #12]
}
 800b894:	bf00      	nop
 800b896:	bf00      	nop
 800b898:	e7fd      	b.n	800b896 <vPreCheckConfigs+0x136>

        uxSize = sizeof( UDPHeader_t );
 800b89a:	2308      	movs	r3, #8
 800b89c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800b89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a0:	2b08      	cmp	r3, #8
 800b8a2:	d00d      	beq.n	800b8c0 <vPreCheckConfigs+0x160>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a8:	b672      	cpsid	i
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	b662      	cpsie	i
 800b8b8:	60bb      	str	r3, [r7, #8]
}
 800b8ba:	bf00      	nop
 800b8bc:	bf00      	nop
 800b8be:	e7fd      	b.n	800b8bc <vPreCheckConfigs+0x15c>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800b8c0:	2324      	movs	r3, #36	@ 0x24
 800b8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800b8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c6:	2b24      	cmp	r3, #36	@ 0x24
 800b8c8:	d00d      	beq.n	800b8e6 <vPreCheckConfigs+0x186>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ce:	b672      	cpsid	i
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	b662      	cpsie	i
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
 800b8e2:	bf00      	nop
 800b8e4:	e7fd      	b.n	800b8e2 <vPreCheckConfigs+0x182>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800b8e6:	bf00      	nop
 800b8e8:	3730      	adds	r7, #48	@ 0x30
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200012c0 	.word	0x200012c0

0800b8f4 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	4293      	cmp	r3, r2
 800b904:	bf38      	it	cc
 800b906:	4613      	movcc	r3, r2
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	4293      	cmp	r3, r2
 800b924:	bfa8      	it	ge
 800b926:	4613      	movge	r3, r2
}
 800b928:	4618      	mov	r0, r3
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	4293      	cmp	r3, r2
 800b944:	bf28      	it	cs
 800b946:	4613      	movcs	r3, r2
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	4293      	cmp	r3, r2
 800b964:	bf28      	it	cs
 800b966:	4613      	movcs	r3, r2
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <FreeRTOS_add_int32>:
 * @param[in] b the second value.
 * @return The result of a + b if no overflow/underflow occurs, or INT32_MAX/INT32_MIN if overflow/underflow would occur.
 */
int32_t FreeRTOS_add_int32( int32_t a,
                            int32_t b )
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
    int32_t ret;

    if( ( a > 0 ) && ( b > ( ipINT32_MAX_VALUE - a ) ) )
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	dd0a      	ble.n	800b99a <FreeRTOS_add_int32+0x26>
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b98a:	1a9b      	subs	r3, r3, r2
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	dd03      	ble.n	800b99a <FreeRTOS_add_int32+0x26>
    {
        ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800b992:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b996:	60fb      	str	r3, [r7, #12]
 800b998:	e010      	b.n	800b9bc <FreeRTOS_add_int32+0x48>
    }
    else if( ( a < 0 ) && ( b < ( ipINT32_MIN_VALUE - a ) ) )
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	da09      	bge.n	800b9b4 <FreeRTOS_add_int32+0x40>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f1c3 4300 	rsb	r3, r3, #2147483648	@ 0x80000000
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	da03      	bge.n	800b9b4 <FreeRTOS_add_int32+0x40>
    {
        ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800b9ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9b0:	60fb      	str	r3, [r7, #12]
 800b9b2:	e003      	b.n	800b9bc <FreeRTOS_add_int32+0x48>
    }
    else
    {
        ret = a + b;
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <FreeRTOS_multiply_int32>:
 * @param[in] b the second value.
 * @return The result of a * b if no overflow occurs, or ipINT32_MAX_VALUE if an overflow would occur.
 */
int32_t FreeRTOS_multiply_int32( int32_t a,
                                 int32_t b )
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b085      	sub	sp, #20
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	6039      	str	r1, [r7, #0]
    int32_t ret;

    /* Check for overflow/underflow */
    if( a > 0 )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	dd23      	ble.n	800ba22 <FreeRTOS_multiply_int32+0x58>
    {
        if( ( b > 0 ) && ( a > ( ipINT32_MAX_VALUE / b ) ) )
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	dd0b      	ble.n	800b9f8 <FreeRTOS_multiply_int32+0x2e>
 800b9e0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	fb92 f3f3 	sdiv	r3, r2, r3
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	dd03      	ble.n	800b9f8 <FreeRTOS_multiply_int32+0x2e>
        {
            ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800b9f0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e037      	b.n	800ba68 <FreeRTOS_multiply_int32+0x9e>
        }
        else if( ( b < 0 ) && ( b < ( ipINT32_MIN_VALUE / a ) ) )
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	da0b      	bge.n	800ba16 <FreeRTOS_multiply_int32+0x4c>
 800b9fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	fb92 f3f3 	sdiv	r3, r2, r3
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	da03      	bge.n	800ba16 <FreeRTOS_multiply_int32+0x4c>
        {
            ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800ba0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba12:	60fb      	str	r3, [r7, #12]
 800ba14:	e028      	b.n	800ba68 <FreeRTOS_multiply_int32+0x9e>
        }
        else
        {
            ret = a * b;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	fb02 f303 	mul.w	r3, r2, r3
 800ba1e:	60fb      	str	r3, [r7, #12]
 800ba20:	e022      	b.n	800ba68 <FreeRTOS_multiply_int32+0x9e>
        }
    }
    else
    {
        if( ( b > 0 ) && ( a < ( ipINT32_MIN_VALUE / b ) ) )
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dd0b      	ble.n	800ba40 <FreeRTOS_multiply_int32+0x76>
 800ba28:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	fb92 f3f3 	sdiv	r3, r2, r3
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	da03      	bge.n	800ba40 <FreeRTOS_multiply_int32+0x76>
        {
            ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800ba38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	e013      	b.n	800ba68 <FreeRTOS_multiply_int32+0x9e>
        }
        else if( ( b < 0 ) && ( a < ( ipINT32_MAX_VALUE / b ) ) )
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	da0b      	bge.n	800ba5e <FreeRTOS_multiply_int32+0x94>
 800ba46:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	da03      	bge.n	800ba5e <FreeRTOS_multiply_int32+0x94>
        {
            ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800ba56:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ba5a:	60fb      	str	r3, [r7, #12]
 800ba5c:	e004      	b.n	800ba68 <FreeRTOS_multiply_int32+0x9e>
        }
        else
        {
            ret = a * b;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
 800ba66:	60fb      	str	r3, [r7, #12]
        }
    }

    return ret;
 800ba68:	68fb      	ldr	r3, [r7, #12]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800ba76:	b480      	push	{r7}
 800ba78:	b085      	sub	sp, #20
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10d      	bne.n	800baa6 <FreeRTOS_round_up+0x30>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8e:	b672      	cpsid	i
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	b662      	cpsie	i
 800ba9e:	60bb      	str	r3, [r7, #8]
}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	e7fd      	b.n	800baa2 <FreeRTOS_round_up+0x2c>

    if( d != 0U )
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00a      	beq.n	800bac2 <FreeRTOS_round_up+0x4c>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	4413      	add	r3, r2
 800bab2:	1e5a      	subs	r2, r3, #1
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	fbb2 f2f3 	udiv	r2, r2, r3
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	fb02 f303 	mul.w	r3, r2, r3
 800bac0:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800bac2:	68fb      	ldr	r3, [r7, #12]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3714      	adds	r7, #20
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <vReleaseSinglePacketFromUDPSocket>:
/**
 * @brief Release single UDP packet from a given socket
 * @param[in] xSocket UDP Socket from which the packet should be released.
 */
void vReleaseSinglePacketFromUDPSocket( const ConstSocket_t xSocket )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af02      	add	r7, sp, #8
 800bad6:	6078      	str	r0, [r7, #4]
    uint8_t * pucUDPPayload = NULL;
 800bad8:	2300      	movs	r3, #0
 800bada:	60bb      	str	r3, [r7, #8]

    /* Passing the address of a pointer (pucUDPPayload) because FREERTOS_ZERO_COPY is used. */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-47. */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    lBytes = FreeRTOS_recvfrom( xSocket, &pucUDPPayload, 0U, FREERTOS_ZERO_COPY, NULL, NULL );
 800badc:	f107 0108 	add.w	r1, r7, #8
 800bae0:	2300      	movs	r3, #0
 800bae2:	9301      	str	r3, [sp, #4]
 800bae4:	2300      	movs	r3, #0
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	2301      	movs	r3, #1
 800baea:	2200      	movs	r2, #0
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 ff00 	bl	800c8f2 <FreeRTOS_recvfrom>
 800baf2:	60f8      	str	r0, [r7, #12]

    ( void ) lBytes;

    if( pucUDPPayload != NULL )
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <vReleaseSinglePacketFromUDPSocket+0x32>
    {
        FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayload );
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe fdcb 	bl	800a698 <FreeRTOS_ReleaseUDPPayloadBuffer>
    }
}
 800bb02:	bf00      	nop
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800bb20:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3302      	adds	r3, #2
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800bb2a:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	3203      	adds	r2, #3
 800bb30:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800bb32:	4313      	orrs	r3, r2
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	021b      	lsls	r3, r3, #8
 800bb4e:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	3201      	adds	r2, #1
 800bb54:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800bb56:	4313      	orrs	r3, r2
 800bb58:	b29b      	uxth	r3, r3
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <eGetDHCPState>:
 * @brief Returns the current state of a DHCP process.
 *
 * @param[in] pxEndPoint the end-point which is going through the DHCP process.
 */
    eDHCPState_t eGetDHCPState( const struct xNetworkEndPoint * pxEndPoint )
    {
 800bb66:	b480      	push	{r7}
 800bb68:	b083      	sub	sp, #12
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
        return pxEndPoint->xDHCPData.eDHCPState;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
    }
 800bb74:	4618      	mov	r0, r3
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800bb80:	b480      	push	{r7}
 800bb82:	b08b      	sub	sp, #44	@ 0x2c
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	61fb      	str	r3, [r7, #28]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800bb92:	2300      	movs	r3, #0
 800bb94:	61bb      	str	r3, [r7, #24]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b21      	cmp	r3, #33	@ 0x21
 800bb9a:	d802      	bhi.n	800bba2 <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	61bb      	str	r3, [r7, #24]
                break;
 800bba0:	e065      	b.n	800bc6e <xCheckIPv4SizeFields+0xee>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	7b9b      	ldrb	r3, [r3, #14]
 800bba6:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800bba8:	8afb      	ldrh	r3, [r7, #22]
 800bbaa:	2b44      	cmp	r3, #68	@ 0x44
 800bbac:	d902      	bls.n	800bbb4 <xCheckIPv4SizeFields+0x34>
 800bbae:	8afb      	ldrh	r3, [r7, #22]
 800bbb0:	2b4f      	cmp	r3, #79	@ 0x4f
 800bbb2:	d902      	bls.n	800bbba <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	61bb      	str	r3, [r7, #24]
                break;
 800bbb8:	e059      	b.n	800bc6e <xCheckIPv4SizeFields+0xee>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800bbba:	8afb      	ldrh	r3, [r7, #22]
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800bbc4:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800bbc6:	8afb      	ldrh	r3, [r7, #22]
 800bbc8:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	330e      	adds	r3, #14
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d202      	bcs.n	800bbda <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	61bb      	str	r3, [r7, #24]
                break;
 800bbd8:	e049      	b.n	800bc6e <xCheckIPv4SizeFields+0xee>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	7c1a      	ldrb	r2, [r3, #16]
 800bbde:	7c5b      	ldrb	r3, [r3, #17]
 800bbe0:	021b      	lsls	r3, r3, #8
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800bbe6:	89fb      	ldrh	r3, [r7, #14]
 800bbe8:	330e      	adds	r3, #14
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d202      	bcs.n	800bbf6 <xCheckIPv4SizeFields+0x76>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800bbf0:	2304      	movs	r3, #4
 800bbf2:	61bb      	str	r3, [r7, #24]
                break;
 800bbf4:	e03b      	b.n	800bc6e <xCheckIPv4SizeFields+0xee>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	7ddb      	ldrb	r3, [r3, #23]
 800bbfa:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800bbfc:	7b7b      	ldrb	r3, [r7, #13]
 800bbfe:	2b11      	cmp	r3, #17
 800bc00:	d103      	bne.n	800bc0a <xCheckIPv4SizeFields+0x8a>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	3316      	adds	r3, #22
 800bc06:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc08:	e013      	b.n	800bc32 <xCheckIPv4SizeFields+0xb2>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800bc0a:	7b7b      	ldrb	r3, [r7, #13]
 800bc0c:	2b06      	cmp	r3, #6
 800bc0e:	d103      	bne.n	800bc18 <xCheckIPv4SizeFields+0x98>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	3322      	adds	r3, #34	@ 0x22
 800bc14:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc16:	e00c      	b.n	800bc32 <xCheckIPv4SizeFields+0xb2>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800bc18:	7b7b      	ldrb	r3, [r7, #13]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d002      	beq.n	800bc24 <xCheckIPv4SizeFields+0xa4>
 800bc1e:	7b7b      	ldrb	r3, [r7, #13]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d103      	bne.n	800bc2c <xCheckIPv4SizeFields+0xac>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	3316      	adds	r3, #22
 800bc28:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc2a:	e002      	b.n	800bc32 <xCheckIPv4SizeFields+0xb2>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800bc2c:	2305      	movs	r3, #5
 800bc2e:	61bb      	str	r3, [r7, #24]
                break;
 800bc30:	e01d      	b.n	800bc6e <xCheckIPv4SizeFields+0xee>
            }

            if( uxBufferLength < uxMinimumLength )
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d202      	bcs.n	800bc40 <xCheckIPv4SizeFields+0xc0>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800bc3a:	2306      	movs	r3, #6
 800bc3c:	61bb      	str	r3, [r7, #24]
                break;
 800bc3e:	e016      	b.n	800bc6e <xCheckIPv4SizeFields+0xee>
            }

            uxLength = ( size_t ) usLength;
 800bc40:	89fb      	ldrh	r3, [r7, #14]
 800bc42:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	461a      	mov	r2, r3
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	1a9b      	subs	r3, r3, r2
 800bc4e:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2b07      	cmp	r3, #7
 800bc54:	d906      	bls.n	800bc64 <xCheckIPv4SizeFields+0xe4>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800bc5c:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d902      	bls.n	800bc6a <xCheckIPv4SizeFields+0xea>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800bc64:	2307      	movs	r3, #7
 800bc66:	61bb      	str	r3, [r7, #24]
                break;
 800bc68:	e001      	b.n	800bc6e <xCheckIPv4SizeFields+0xee>
            }

            xResult = pdPASS;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	623b      	str	r3, [r7, #32]
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
        }

        return xResult;
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
    }
 800bc70:	4618      	mov	r0, r3
 800bc72:	372c      	adds	r7, #44	@ 0x2c
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800bc8e:	d306      	bcc.n	800bc9e <xIsIPv4Multicast+0x22>
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800bc96:	d202      	bcs.n	800bc9e <xIsIPv4Multicast+0x22>
    {
        xReturn = pdTRUE;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	e001      	b.n	800bca2 <xIsIPv4Multicast+0x26>
    }
    else
    {
        xReturn = pdFALSE;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800bca2:	68fb      	ldr	r3, [r7, #12]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <xIsIPv4Broadcast>:
 *
 * @return pdTRUE if the IP address is a broadcast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Broadcast( uint32_t ulIPAddress,
                             struct xNetworkEndPoint ** ppxEndPoint )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
    BaseType_t xIsBroadcast;
    NetworkEndPoint_t * pxEndPoint;

    /* Assign a default answer based on the "global" broadcast.	 This way
     * we can still return the correct result even if there are no endpoints. */
    xIsBroadcast = ( ulIPAddress == FREERTOS_INADDR_BROADCAST ) ? pdTRUE : pdFALSE;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc0:	d101      	bne.n	800bcc6 <xIsIPv4Broadcast+0x16>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e000      	b.n	800bcc8 <xIsIPv4Broadcast+0x18>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60fb      	str	r3, [r7, #12]

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800bcca:	2000      	movs	r0, #0
 800bccc:	f000 fb50 	bl	800c370 <FreeRTOS_FirstEndPoint>
 800bcd0:	60b8      	str	r0, [r7, #8]
 800bcd2:	e00f      	b.n	800bcf4 <xIsIPv4Broadcast+0x44>
            }
        #endif /* ( ipconfigUSE_IPv6 == ipconfigENABLE ) */

        /* If we already know if ulIPAddress is a broadcast,
         * simply return this first matching IPv4 endpoint. */
        if( xIsBroadcast == pdTRUE )
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d010      	beq.n	800bcfc <xIsIPv4Broadcast+0x4c>
        {
            break;
        }
        else if( ulIPAddress == pxEndPoint->ipv4_settings.ulBroadcastAddress )
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	695b      	ldr	r3, [r3, #20]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d102      	bne.n	800bcea <xIsIPv4Broadcast+0x3a>
        {
            xIsBroadcast = pdTRUE;
 800bce4:	2301      	movs	r3, #1
 800bce6:	60fb      	str	r3, [r7, #12]
            break;
 800bce8:	e009      	b.n	800bcfe <xIsIPv4Broadcast+0x4e>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800bcea:	68b9      	ldr	r1, [r7, #8]
 800bcec:	2000      	movs	r0, #0
 800bcee:	f000 fb87 	bl	800c400 <FreeRTOS_NextEndPoint>
 800bcf2:	60b8      	str	r0, [r7, #8]
         pxEndPoint != NULL;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1ec      	bne.n	800bcd4 <xIsIPv4Broadcast+0x24>
 800bcfa:	e000      	b.n	800bcfe <xIsIPv4Broadcast+0x4e>
            break;
 800bcfc:	bf00      	nop
    /* If the caller wants to know the corresponding endpoint, copy the result.
     * Note that this may be null if ulIPAddress is 255.255.255.255 AND there are
     * no IPv4 endpoints.
     * Also, when ulIPAddress is 255.255.255.255, we will
     * return the first IPv4 endpoint that we run across. */
    if( ( xIsBroadcast == pdTRUE ) && ( ppxEndPoint != NULL ) )
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d105      	bne.n	800bd10 <xIsIPv4Broadcast+0x60>
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <xIsIPv4Broadcast+0x60>
    {
        *ppxEndPoint = pxEndPoint;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	601a      	str	r2, [r3, #0]
    }

    return xIsBroadcast;
 800bd10:	68fb      	ldr	r3, [r7, #12]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <xBadIPv4Loopback>:
 *
 * @return Returns pdTRUE if the packet should be stopped, because either the source
 *         or the target address is a loopback address.
 */
BaseType_t xBadIPv4Loopback( const IPHeader_t * const pxIPHeader )
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b086      	sub	sp, #24
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]
    BaseType_t x1 = ( xIsIPv4Loopback( pxIPHeader->ulDestinationIPAddress ) != 0 ) ? pdTRUE : pdFALSE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 f81e 	bl	800bd6c <xIsIPv4Loopback>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <xBadIPv4Loopback+0x20>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <xBadIPv4Loopback+0x22>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	613b      	str	r3, [r7, #16]
    BaseType_t x2 = ( xIsIPv4Loopback( pxIPHeader->ulSourceIPAddress ) != 0 ) ? pdTRUE : pdFALSE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 f812 	bl	800bd6c <xIsIPv4Loopback>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <xBadIPv4Loopback+0x38>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e000      	b.n	800bd54 <xBadIPv4Loopback+0x3a>
 800bd52:	2300      	movs	r3, #0
 800bd54:	60fb      	str	r3, [r7, #12]

    if( x1 != x2 )
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d001      	beq.n	800bd62 <xBadIPv4Loopback+0x48>
    {
        /* Either the source or the destination address is an IPv4 loopback address. */
        xReturn = pdTRUE;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800bd62:	697b      	ldr	r3, [r7, #20]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <xIsIPv4Loopback>:
 * @param[in] ulAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv4Loopback( uint32_t ulAddress )
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800bd74:	2300      	movs	r3, #0
 800bd76:	60fb      	str	r3, [r7, #12]
    uint32_t ulIP = FreeRTOS_ntohl( ulAddress );
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_LOOPBACK_IPv4 ) &&
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800bd82:	d304      	bcc.n	800bd8e <xIsIPv4Loopback+0x22>
        ( ulIP < ipLAST_LOOPBACK_IPv4 ) )
 800bd84:	68bb      	ldr	r3, [r7, #8]
    if( ( ulIP >= ipFIRST_LOOPBACK_IPv4 ) &&
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	db01      	blt.n	800bd8e <xIsIPv4Loopback+0x22>
    {
        xReturn = pdTRUE;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b08a      	sub	sp, #40	@ 0x28
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	330e      	adds	r3, #14
 800bdb2:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
    {
        /* In systems with a very small amount of RAM, it might be advantageous
         * to have incoming messages checked earlier, by the network card driver.
         * This method may decrease the usage of scarce network buffers. */
        uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	61fb      	str	r3, [r7, #28]
        uint32_t ulSourceIPAddress = pxIPHeader->ulSourceIPAddress;
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	61bb      	str	r3, [r7, #24]
        /* Get a reference to the endpoint that the packet was assigned to during pxEasyFit() */
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdc4:	617b      	str	r3, [r7, #20]

        /* Ensure that the incoming packet is not fragmented because the stack
         * doesn't not support IP fragmentation. All but the last fragment coming in will have their
         * "more fragments" flag set and the last fragment will have a non-zero offset.
         * We need to drop the packet in either of those cases. */
        if( ( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U ) || ( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_FLAGS_MORE_FRAGMENTS ) != 0U ) )
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	88db      	ldrh	r3, [r3, #6]
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d106      	bne.n	800bde2 <prvAllowIPPacketIPv4+0x46>
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	88db      	ldrh	r3, [r3, #6]
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <prvAllowIPPacketIPv4+0x4e>
        {
            /* Can not handle, fragmented packet. */
            eReturn = eReleaseBuffer;
 800bde2:	2300      	movs	r3, #0
 800bde4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bde8:	e09a      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
        }

        /* Test if the length of the IP-header is between 20 and 60 bytes,
         * and if the IP-version is 4. */
        else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b44      	cmp	r3, #68	@ 0x44
 800bdf0:	d903      	bls.n	800bdfa <prvAllowIPPacketIPv4+0x5e>
                 ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
        else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800bdf6:	2b4f      	cmp	r3, #79	@ 0x4f
 800bdf8:	d903      	bls.n	800be02 <prvAllowIPPacketIPv4+0x66>
        {
            /* Can not handle, unknown or invalid header version. */
            eReturn = eReleaseBuffer;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be00:	e08e      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
        }
        else if( ( xIsIPv4Loopback( ulDestinationIPAddress ) == pdTRUE ) ||
 800be02:	69f8      	ldr	r0, [r7, #28]
 800be04:	f7ff ffb2 	bl	800bd6c <xIsIPv4Loopback>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d005      	beq.n	800be1a <prvAllowIPPacketIPv4+0x7e>
                 ( xIsIPv4Loopback( ulSourceIPAddress ) == pdTRUE ) )
 800be0e:	69b8      	ldr	r0, [r7, #24]
 800be10:	f7ff ffac 	bl	800bd6c <xIsIPv4Loopback>
 800be14:	4603      	mov	r3, r0
        else if( ( xIsIPv4Loopback( ulDestinationIPAddress ) == pdTRUE ) ||
 800be16:	2b01      	cmp	r3, #1
 800be18:	d10b      	bne.n	800be32 <prvAllowIPPacketIPv4+0x96>
        {
            /* source OR destination is a loopback address. Make sure they BOTH are. */
            if( xBadIPv4Loopback( &( pxIPPacket->xIPHeader ) ) == pdTRUE )
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	330e      	adds	r3, #14
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff ff7b 	bl	800bd1a <xBadIPv4Loopback>
 800be24:	4603      	mov	r3, r0
 800be26:	2b01      	cmp	r3, #1
 800be28:	d17a      	bne.n	800bf20 <prvAllowIPPacketIPv4+0x184>
            {
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                eReturn = eReleaseBuffer;
 800be2a:	2300      	movs	r3, #0
 800be2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( xBadIPv4Loopback( &( pxIPPacket->xIPHeader ) ) == pdTRUE )
 800be30:	e076      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
            }
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes,
                         pxIPPacket->xEthernetHeader.xSourceAddress.ucBytes,
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3306      	adds	r3, #6
        else if( memcmp( xBroadcastMACAddress.ucBytes,
 800be36:	2206      	movs	r2, #6
 800be38:	4619      	mov	r1, r3
 800be3a:	4845      	ldr	r0, [pc, #276]	@ (800bf50 <prvAllowIPPacketIPv4+0x1b4>)
 800be3c:	f00c fe68 	bl	8018b10 <memcmp>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d103      	bne.n	800be4e <prvAllowIPPacketIPv4+0xb2>
                         sizeof( MACAddress_t ) ) == 0 )
        {
            /* Ethernet source is a broadcast address. Drop the packet. */
            eReturn = eReleaseBuffer;
 800be46:	2300      	movs	r3, #0
 800be48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be4c:	e068      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
        }
        else if( xIsIPv4Multicast( ulSourceIPAddress ) == pdTRUE )
 800be4e:	69b8      	ldr	r0, [r7, #24]
 800be50:	f7ff ff14 	bl	800bc7c <xIsIPv4Multicast>
 800be54:	4603      	mov	r3, r0
 800be56:	2b01      	cmp	r3, #1
 800be58:	d103      	bne.n	800be62 <prvAllowIPPacketIPv4+0xc6>
        {
            /* Source is a multicast IP address. Drop the packet in conformity with RFC 1112 section 7.2. */
            eReturn = eReleaseBuffer;
 800be5a:	2300      	movs	r3, #0
 800be5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be60:	e05e      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
        }

        /* Use ipv4_settings for filtering only after the endpoint is up,
         * so that DHCP packets that are exchanged for DHCP (example, DHCP unicast offers)
         * are not dropped/filtered. */
        else if( FreeRTOS_IsEndPointUp( pxEndPoint ) != pdFALSE )
 800be62:	6978      	ldr	r0, [r7, #20]
 800be64:	f7fe ffb8 	bl	800add8 <FreeRTOS_IsEndPointUp>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d03a      	beq.n	800bee4 <prvAllowIPPacketIPv4+0x148>
        {
            if(
                /* Not destined for the assigned endpoint IPv4 address? */
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulIPAddress ) &&
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	681b      	ldr	r3, [r3, #0]
            if(
 800be72:	69fa      	ldr	r2, [r7, #28]
 800be74:	429a      	cmp	r2, r3
 800be76:	d012      	beq.n	800be9e <prvAllowIPPacketIPv4+0x102>
                /* Also not an IPv4 broadcast address ? */
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) &&
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	695b      	ldr	r3, [r3, #20]
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulIPAddress ) &&
 800be7c:	69fa      	ldr	r2, [r7, #28]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d00d      	beq.n	800be9e <prvAllowIPPacketIPv4+0x102>
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) &&
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be88:	d009      	beq.n	800be9e <prvAllowIPPacketIPv4+0x102>
                ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) &&
                /* And not an IPv4 multicast address ? */
                ( xIsIPv4Multicast( ulDestinationIPAddress ) == pdFALSE ) )
 800be8a:	69f8      	ldr	r0, [r7, #28]
 800be8c:	f7ff fef6 	bl	800bc7c <xIsIPv4Multicast>
 800be90:	4603      	mov	r3, r0
                ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) &&
 800be92:	2b00      	cmp	r3, #0
 800be94:	d103      	bne.n	800be9e <prvAllowIPPacketIPv4+0x102>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 800be96:	2300      	movs	r3, #0
 800be98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be9c:	e040      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
            }
            /* Is the source address correct? */
            else if( ( ulSourceIPAddress == pxEndPoint->ipv4_settings.ulBroadcastAddress ) ||
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	69ba      	ldr	r2, [r7, #24]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d003      	beq.n	800beb0 <prvAllowIPPacketIPv4+0x114>
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d103      	bne.n	800beb8 <prvAllowIPPacketIPv4+0x11c>
                     ( ulSourceIPAddress == FREERTOS_INADDR_BROADCAST ) )
            {
                /* The source address cannot be broadcast address. Replying to this
                 * packet may cause network storms. Drop the packet. */
                eReturn = eReleaseBuffer;
 800beb0:	2300      	movs	r3, #0
 800beb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800beb6:	e033      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
            }
            else if( ( memcmp( xBroadcastMACAddress.ucBytes,
                               pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800beb8:	68fb      	ldr	r3, [r7, #12]
            else if( ( memcmp( xBroadcastMACAddress.ucBytes,
 800beba:	2206      	movs	r2, #6
 800bebc:	4619      	mov	r1, r3
 800bebe:	4824      	ldr	r0, [pc, #144]	@ (800bf50 <prvAllowIPPacketIPv4+0x1b4>)
 800bec0:	f00c fe26 	bl	8018b10 <memcmp>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d12a      	bne.n	800bf20 <prvAllowIPPacketIPv4+0x184>
                               sizeof( MACAddress_t ) ) == 0 ) &&
                     ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) && ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) )
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	695b      	ldr	r3, [r3, #20]
                               sizeof( MACAddress_t ) ) == 0 ) &&
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d025      	beq.n	800bf20 <prvAllowIPPacketIPv4+0x184>
                     ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) && ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) )
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beda:	d021      	beq.n	800bf20 <prvAllowIPPacketIPv4+0x184>
            {
                /* Ethernet address is a broadcast address, but the IP address is not a
                 * broadcast address. */
                eReturn = eReleaseBuffer;
 800bedc:	2300      	movs	r3, #0
 800bede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bee2:	e01d      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
        {
            /* Endpoint is down */

            /* Check if the destination MAC address is a broadcast MAC address. */
            if( memcmp( xBroadcastMACAddress.ucBytes,
                        pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800bee4:	68fb      	ldr	r3, [r7, #12]
            if( memcmp( xBroadcastMACAddress.ucBytes,
 800bee6:	2206      	movs	r2, #6
 800bee8:	4619      	mov	r1, r3
 800beea:	4819      	ldr	r0, [pc, #100]	@ (800bf50 <prvAllowIPPacketIPv4+0x1b4>)
 800beec:	f00c fe10 	bl	8018b10 <memcmp>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d107      	bne.n	800bf06 <prvAllowIPPacketIPv4+0x16a>
                        sizeof( MACAddress_t ) ) == 0 )
            {
                if( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST )
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befc:	d010      	beq.n	800bf20 <prvAllowIPPacketIPv4+0x184>
                {
                    /* Ethernet address is a broadcast address, but the IP address is not a
                     * broadcast address. */
                    eReturn = eReleaseBuffer;
 800befe:	2300      	movs	r3, #0
 800bf00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bf04:	e00c      	b.n	800bf20 <prvAllowIPPacketIPv4+0x184>
             * forward to the IP layer any IP packets delivered to the client's
             * hardware address before the IP address is configured; DHCP servers
             * and BOOTP relay agents may not be able to deliver DHCP messages to
             * clients that cannot accept hardware unicast datagrams before the
             * TCP/IP software is configured. */
            else if( ( memcmp( pxEndPoint->xMACAddress.ucBytes,
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	3338      	adds	r3, #56	@ 0x38
                               pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800bf0a:	68f9      	ldr	r1, [r7, #12]
            else if( ( memcmp( pxEndPoint->xMACAddress.ucBytes,
 800bf0c:	2206      	movs	r2, #6
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f00c fdfe 	bl	8018b10 <memcmp>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d002      	beq.n	800bf20 <prvAllowIPPacketIPv4+0x184>
                               sizeof( MACAddress_t ) ) != 0 ) )
            {
                /* The endpoint is not up, and the destination MAC address of the
                 * packet is not matching the endpoint's MAC address nor broadcast
                 * MAC address. Drop the packet. */
                eReturn = eReleaseBuffer;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800bf20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d10d      	bne.n	800bf44 <prvAllowIPPacketIPv4+0x1a8>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf30:	4619      	mov	r1, r3
 800bf32:	4610      	mov	r0, r2
 800bf34:	f7ff fe24 	bl	800bb80 <xCheckIPv4SizeFields>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d002      	beq.n	800bf44 <prvAllowIPPacketIPv4+0x1a8>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800bf44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3728      	adds	r7, #40	@ 0x28
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	08019ea8 	.word	0x08019ea8

0800bf54 <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b08a      	sub	sp, #40	@ 0x28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf66:	330e      	adds	r3, #14
 800bf68:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800bf78:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	3b14      	subs	r3, #20
 800bf7e:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	330e      	adds	r3, #14
 800bf88:	4413      	add	r3, r2
 800bf8a:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf90:	3322      	adds	r3, #34	@ 0x22
 800bf92:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	3b22      	subs	r3, #34	@ 0x22
 800bf9e:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	6939      	ldr	r1, [r7, #16]
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f00c fdc3 	bl	8018b30 <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	1ad2      	subs	r2, r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	885b      	ldrh	r3, [r3, #2]
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	f023 030f 	bic.w	r3, r3, #15
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	f043 0305 	orr.w	r3, r3, #5
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
 800bfda:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800bfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3728      	adds	r7, #40	@ 0x28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b088      	sub	sp, #32
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b0f      	cmp	r3, #15
 800bff8:	d802      	bhi.n	800c000 <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	61fb      	str	r3, [r7, #28]
 800bffe:	e00e      	b.n	800c01e <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800c000:	f107 0314 	add.w	r3, r7, #20
 800c004:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	68b9      	ldr	r1, [r7, #8]
 800c014:	4618      	mov	r0, r3
 800c016:	f001 fb77 	bl	800d708 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800c01e:	69fb      	ldr	r3, [r7, #28]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3720      	adds	r7, #32
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d010      	beq.n	800c05a <xSend_UDP_Update_IPv4+0x32>
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00d      	beq.n	800c05a <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c042:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	731a      	strb	r2, [r3, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	f042 0208 	orr.w	r2, r2, #8
 800c058:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <xRecv_Update_IPv4>:
 * @param[in] pxSourceAddress The IPv4 socket address.
 * @return  The Payload Offset.
 */
size_t xRecv_Update_IPv4( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                          struct freertos_sockaddr * pxSourceAddress )
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
    size_t uxPayloadOffset = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	60fb      	str	r3, [r7, #12]

    if( ( pxNetworkBuffer != NULL ) && ( pxSourceAddress != NULL ) )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00d      	beq.n	800c098 <xRecv_Update_IPv4+0x30>
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00a      	beq.n	800c098 <xRecv_Update_IPv4+0x30>
    {
        pxSourceAddress->sin_family = ( uint8_t ) FREERTOS_AF_INET;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2202      	movs	r2, #2
 800c086:	705a      	strb	r2, [r3, #1]
        pxSourceAddress->sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	695a      	ldr	r2, [r3, #20]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	609a      	str	r2, [r3, #8]
        pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	805a      	strh	r2, [r3, #2]
    }

    uxPayloadOffset = ipUDP_PAYLOAD_OFFSET_IPv4;
 800c098:	232a      	movs	r3, #42	@ 0x2a
 800c09a:	60fb      	str	r3, [r7, #12]

    return uxPayloadOffset;
 800c09c:	68fb      	ldr	r3, [r7, #12]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b085      	sub	sp, #20
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_0;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_1;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_2;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	225e      	movs	r2, #94	@ 0x5e
 800c0c8:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	0c1b      	lsrs	r3, r3, #16
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	0a1b      	lsrs	r3, r3, #8
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	715a      	strb	r2, [r3, #5]
}
 800c0ec:	bf00      	nop
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
 800c104:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d076      	beq.n	800c1fa <FreeRTOS_FillEndPoint+0x102>
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d073      	beq.n	800c1fa <FreeRTOS_FillEndPoint+0x102>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c118:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800c11a:	22ac      	movs	r2, #172	@ 0xac
 800c11c:	2100      	movs	r1, #0
 800c11e:	68b8      	ldr	r0, [r7, #8]
 800c120:	f00c fd20 	bl	8018b64 <memset>
            pxEndPoint->pxNext = pxNext;
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	061a      	lsls	r2, r3, #24
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3301      	adds	r3, #1
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	041b      	lsls	r3, r3, #16
 800c13a:	431a      	orrs	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3302      	adds	r3, #2
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	021b      	lsls	r3, r3, #8
 800c144:	4313      	orrs	r3, r2
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	3203      	adds	r2, #3
 800c14a:	7812      	ldrb	r2, [r2, #0]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	061a      	lsls	r2, r3, #24
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	3301      	adds	r3, #1
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	041b      	lsls	r3, r3, #16
 800c15e:	431a      	orrs	r2, r3
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	3302      	adds	r3, #2
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	021b      	lsls	r3, r3, #8
 800c168:	4313      	orrs	r3, r2
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	3203      	adds	r2, #3
 800c16e:	7812      	ldrb	r2, [r2, #0]
 800c170:	431a      	orrs	r2, r3
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	061a      	lsls	r2, r3, #24
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	3301      	adds	r3, #1
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	041b      	lsls	r3, r3, #16
 800c184:	431a      	orrs	r2, r3
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	3302      	adds	r3, #2
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	021b      	lsls	r3, r3, #8
 800c18e:	4313      	orrs	r3, r2
 800c190:	6a3a      	ldr	r2, [r7, #32]
 800c192:	3203      	adds	r2, #3
 800c194:	7812      	ldrb	r2, [r2, #0]
 800c196:	431a      	orrs	r2, r3
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800c19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	061a      	lsls	r2, r3, #24
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	041b      	lsls	r3, r3, #16
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ae:	3302      	adds	r3, #2
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	021b      	lsls	r3, r3, #8
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1b8:	3203      	adds	r2, #3
 800c1ba:	7812      	ldrb	r2, [r2, #0]
 800c1bc:	431a      	orrs	r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	43da      	mvns	r2, r3
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	331c      	adds	r3, #28
 800c1d4:	68b9      	ldr	r1, [r7, #8]
 800c1d6:	221c      	movs	r2, #28
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f00c fd9e 	bl	8018d1a <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	3338      	adds	r3, #56	@ 0x38
 800c1e8:	2206      	movs	r2, #6
 800c1ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f00c fd94 	bl	8018d1a <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800c1f2:	68b9      	ldr	r1, [r7, #8]
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 f827 	bl	800c248 <FreeRTOS_AddEndPoint>
        }
    }
 800c1fa:	bf00      	nop
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
	...

0800c204 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
        configASSERT( pxNetworkInterfaces == NULL );
 800c20c:	4b0d      	ldr	r3, [pc, #52]	@ (800c244 <FreeRTOS_AddNetworkInterface+0x40>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00d      	beq.n	800c230 <FreeRTOS_AddNetworkInterface+0x2c>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c218:	b672      	cpsid	i
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	b662      	cpsie	i
 800c228:	60fb      	str	r3, [r7, #12]
}
 800c22a:	bf00      	nop
 800c22c:	bf00      	nop
 800c22e:	e7fd      	b.n	800c22c <FreeRTOS_AddNetworkInterface+0x28>
        pxNetworkInterfaces = pxInterface;
 800c230:	4a04      	ldr	r2, [pc, #16]	@ (800c244 <FreeRTOS_AddNetworkInterface+0x40>)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6013      	str	r3, [r2, #0]
        return pxInterface;
 800c236:	687b      	ldr	r3, [r7, #4]
    }
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	20002640 	.word	0x20002640

0800c248 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
        /* This code is in backward-compatibility mode.
         * Only one end-point is allowed, make sure that
         * no end-point has been defined yet. */
        configASSERT( pxNetworkEndPoints == NULL );
 800c252:	4b13      	ldr	r3, [pc, #76]	@ (800c2a0 <FreeRTOS_AddEndPoint+0x58>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00d      	beq.n	800c276 <FreeRTOS_AddEndPoint+0x2e>
	__asm volatile
 800c25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25e:	b672      	cpsid	i
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	b662      	cpsie	i
 800c26e:	60fb      	str	r3, [r7, #12]
}
 800c270:	bf00      	nop
 800c272:	bf00      	nop
 800c274:	e7fd      	b.n	800c272 <FreeRTOS_AddEndPoint+0x2a>

        /* This end point will go to the end of the list, so there is no pxNext
         * yet. */
        pxEndPoint->pxNext = NULL;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2200      	movs	r2, #0
 800c27a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

        pxInterface->pxEndPoint = pxEndPoint;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	621a      	str	r2, [r3, #32]

        /* No other end points are defined yet - so this is the first in the
         * list. */
        pxNetworkEndPoints = pxEndPoint;
 800c28c:	4a04      	ldr	r2, [pc, #16]	@ (800c2a0 <FreeRTOS_AddEndPoint+0x58>)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	6013      	str	r3, [r2, #0]

        return pxEndPoint;
 800c292:	683b      	ldr	r3, [r7, #0]
    }
 800c294:	4618      	mov	r0, r3
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	2000263c 	.word	0x2000263c

0800c2a4 <FreeRTOS_FindEndPointOnIP_IPv4>:
 * @param[in] ulIPAddress The IP-address of interest, or 0 if any IPv4 end-point may be returned.
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress )
    {
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxResult = NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60fb      	str	r3, [r7, #12]

        ( void ) ulIPAddress;

        if( ( ulIPAddress == 0U ) || ( pxNetworkEndPoints->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d005      	beq.n	800c2c2 <FreeRTOS_FindEndPointOnIP_IPv4+0x1e>
 800c2b6:	4b08      	ldr	r3, [pc, #32]	@ (800c2d8 <FreeRTOS_FindEndPointOnIP_IPv4+0x34>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d102      	bne.n	800c2c8 <FreeRTOS_FindEndPointOnIP_IPv4+0x24>
        {
            pxResult = pxNetworkEndPoints;
 800c2c2:	4b05      	ldr	r3, [pc, #20]	@ (800c2d8 <FreeRTOS_FindEndPointOnIP_IPv4+0x34>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
    }
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	2000263c 	.word	0x2000263c

0800c2dc <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = NULL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]

        ( void ) pxMACAddress;
        ( void ) pxInterface;

        if( ( pxMACAddress != NULL ) && ( memcmp( pxNetworkEndPoints->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) )
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00d      	beq.n	800c30c <FreeRTOS_FindEndPointOnMAC+0x30>
 800c2f0:	4b09      	ldr	r3, [pc, #36]	@ (800c318 <FreeRTOS_FindEndPointOnMAC+0x3c>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3338      	adds	r3, #56	@ 0x38
 800c2f6:	6879      	ldr	r1, [r7, #4]
 800c2f8:	2206      	movs	r2, #6
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f00c fc08 	bl	8018b10 <memcmp>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d102      	bne.n	800c30c <FreeRTOS_FindEndPointOnMAC+0x30>
        {
            pxResult = pxNetworkEndPoints;
 800c306:	4b04      	ldr	r3, [pc, #16]	@ (800c318 <FreeRTOS_FindEndPointOnMAC+0x3c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800c30c:	68fb      	ldr	r3, [r7, #12]
    }
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2000263c 	.word	0x2000263c

0800c31c <FreeRTOS_FindEndPointOnNetMask>:
 * @param[in] ulIPAddress The IP-address for which an end-point is looked-up.
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress )
    {
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress );
 800c324:	6879      	ldr	r1, [r7, #4]
 800c326:	2000      	movs	r0, #0
 800c328:	f000 f83c 	bl	800c3a4 <FreeRTOS_InterfaceEndPointOnNetMask>
 800c32c:	4603      	mov	r3, r0
    }
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxReturn = NULL;
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]

        ( void ) xIPType;

        if( pxNetworkEndPoints != NULL )
 800c344:	4b09      	ldr	r3, [pc, #36]	@ (800c36c <FreeRTOS_FindGateWay+0x34>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d007      	beq.n	800c35c <FreeRTOS_FindGateWay+0x24>
        {
            if( pxNetworkEndPoints->ipv4_settings.ulGatewayAddress != 0U )
 800c34c:	4b07      	ldr	r3, [pc, #28]	@ (800c36c <FreeRTOS_FindGateWay+0x34>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d002      	beq.n	800c35c <FreeRTOS_FindGateWay+0x24>
            {
                pxReturn = pxNetworkEndPoints;
 800c356:	4b05      	ldr	r3, [pc, #20]	@ (800c36c <FreeRTOS_FindGateWay+0x34>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60fb      	str	r3, [r7, #12]
            }
        }

        return pxReturn;
 800c35c:	68fb      	ldr	r3, [r7, #12]
    }
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	2000263c 	.word	0x2000263c

0800c370 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
        ( void ) pxInterface;

        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined and this is the simplified version:
         * only one interface and one end-point is defined. */
        return pxNetworkEndPoints;
 800c378:	4b03      	ldr	r3, [pc, #12]	@ (800c388 <FreeRTOS_FirstEndPoint+0x18>)
 800c37a:	681b      	ldr	r3, [r3, #0]
    }
 800c37c:	4618      	mov	r0, r3
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	2000263c 	.word	0x2000263c

0800c38c <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800c38c:	b480      	push	{r7}
 800c38e:	af00      	add	r7, sp, #0
        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined: only one interface and
         * one end-point is defined. */
        return pxNetworkInterfaces;
 800c390:	4b03      	ldr	r3, [pc, #12]	@ (800c3a0 <FreeRTOS_FirstNetworkInterface+0x14>)
 800c392:	681b      	ldr	r3, [r3, #0]
    }
 800c394:	4618      	mov	r0, r3
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	20002640 	.word	0x20002640

0800c3a4 <FreeRTOS_InterfaceEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress )
    {
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60fb      	str	r3, [r7, #12]

        ( void ) pxInterface;

        if( ( ( ulIPAddress ^ pxNetworkEndPoints->ipv4_settings.ulIPAddress ) & pxNetworkEndPoints->ipv4_settings.ulNetMask ) == 0U )
 800c3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c3dc <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	405a      	eors	r2, r3
 800c3bc:	4b07      	ldr	r3, [pc, #28]	@ (800c3dc <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d102      	bne.n	800c3ce <FreeRTOS_InterfaceEndPointOnNetMask+0x2a>
        {
            pxResult = pxNetworkEndPoints;
 800c3c8:	4b04      	ldr	r3, [pc, #16]	@ (800c3dc <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
    }
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	2000263c 	.word	0x2000263c

0800c3e0 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
        ( void ) pxNetworkInterface;
        ( void ) pucEthernetBuffer;

        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined: only one interface and
         * one end-point is defined. */
        return pxNetworkEndPoints;
 800c3ea:	4b04      	ldr	r3, [pc, #16]	@ (800c3fc <FreeRTOS_MatchingEndpoint+0x1c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
    }
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	2000263c 	.word	0x2000263c

0800c400 <FreeRTOS_NextEndPoint>:
 *
 * @return NULL because ipconfigCOMPATIBLE_WITH_SINGLE is defined.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
        ( void ) pxInterface;
        ( void ) pxEndPoint;

        return NULL;
 800c40a:	2300      	movs	r3, #0
    }
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <FreeRTOS_NextNetworkInterface>:
 * @brief Get the next interface.
 *
 * @return NULL because ipconfigCOMPATIBLE_WITH_SINGLE is defined.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
        ( void ) pxInterface;

        return NULL;
 800c420:	2300      	movs	r3, #0
    }
 800c422:	4618      	mov	r0, r3
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <xCheckRequiresResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b084      	sub	sp, #16
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsResolution = pdFALSE;
 800c436:	2300      	movs	r3, #0
 800c438:	60fb      	str	r3, [r7, #12]

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7fe fd12 	bl	800ae64 <uxIPHeaderSizePacket>
 800c440:	4603      	mov	r3, r0
 800c442:	2b14      	cmp	r3, #20
 800c444:	d104      	bne.n	800c450 <xCheckRequiresResolution+0x22>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case ipSIZE_OF_IPv4_HEADER:
                xNeedsResolution = xCheckRequiresARPResolution( pxNetworkBuffer );
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7fb fad8 	bl	80079fc <xCheckRequiresARPResolution>
 800c44c:	60f8      	str	r0, [r7, #12]
                break;
 800c44e:	e000      	b.n	800c452 <xCheckRequiresResolution+0x24>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 800c450:	bf00      	nop
    }

    return xNeedsResolution;
 800c452:	68fb      	ldr	r3, [r7, #12]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f001 fd81 	bl	800df70 <xSocketValid>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d102      	bne.n	800c47a <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800c474:	2300      	movs	r3, #0
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	e015      	b.n	800c4a6 <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d006      	beq.n	800c48e <prvValidSocket+0x32>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	69db      	ldr	r3, [r3, #28]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d102      	bne.n	800c48e <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800c488:	2300      	movs	r3, #0
 800c48a:	617b      	str	r3, [r7, #20]
 800c48c:	e00b      	b.n	800c4a6 <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	b2db      	uxtb	r3, r3
 800c498:	429a      	cmp	r2, r3
 800c49a:	d002      	beq.n	800c4a2 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800c49c:	2300      	movs	r3, #0
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	e001      	b.n	800c4a6 <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800c4a6:	697b      	ldr	r3, [r7, #20]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800c4b4:	4803      	ldr	r0, [pc, #12]	@ (800c4c4 <vNetworkSocketsInit+0x14>)
 800c4b6:	f008 fd92 	bl	8014fde <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800c4ba:	4803      	ldr	r0, [pc, #12]	@ (800c4c8 <vNetworkSocketsInit+0x18>)
 800c4bc:	f008 fd8f 	bl	8014fde <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800c4c0:	bf00      	nop
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	20002644 	.word	0x20002644
 800c4c8:	20002658 	.word	0x20002658

0800c4cc <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08c      	sub	sp, #48	@ 0x30
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800c4e2:	f7fe fc65 	bl	800adb0 <xIPIsNetworkTaskReady>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d102      	bne.n	800c4f2 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4f0:	e089      	b.n	800c606 <prvDetermineSocketSize+0x13a>
    else
    {
        /* Only Ethernet is currently supported. */
        #if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) )
        {
            if( xDomain != FREERTOS_AF_INET )
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d001      	beq.n	800c4fc <prvDetermineSocketSize+0x30>
            {
                xReturn = pdFAIL;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            configASSERT( xDomain == FREERTOS_AF_INET );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d00d      	beq.n	800c51e <prvDetermineSocketSize+0x52>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c506:	b672      	cpsid	i
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	b662      	cpsie	i
 800c516:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	e7fd      	b.n	800c51a <prvDetermineSocketSize+0x4e>
            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800c51e:	4b3c      	ldr	r3, [pc, #240]	@ (800c610 <prvDetermineSocketSize+0x144>)
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c526:	d00d      	beq.n	800c544 <prvDetermineSocketSize+0x78>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52c:	b672      	cpsid	i
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	b662      	cpsie	i
 800c53c:	623b      	str	r3, [r7, #32]
}
 800c53e:	bf00      	nop
 800c540:	bf00      	nop
 800c542:	e7fd      	b.n	800c540 <prvDetermineSocketSize+0x74>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800c544:	4b33      	ldr	r3, [pc, #204]	@ (800c614 <prvDetermineSocketSize+0x148>)
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54c:	d00d      	beq.n	800c56a <prvDetermineSocketSize+0x9e>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c552:	b672      	cpsid	i
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	b662      	cpsie	i
 800c562:	61fb      	str	r3, [r7, #28]
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop
 800c568:	e7fd      	b.n	800c566 <prvDetermineSocketSize+0x9a>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b11      	cmp	r3, #17
 800c56e:	d119      	bne.n	800c5a4 <prvDetermineSocketSize+0xd8>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2b02      	cmp	r3, #2
 800c574:	d012      	beq.n	800c59c <prvDetermineSocketSize+0xd0>
            {
                xReturn = pdFAIL;
 800c576:	2300      	movs	r3, #0
 800c578:	62fb      	str	r3, [r7, #44]	@ 0x2c
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800c57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d00d      	beq.n	800c59c <prvDetermineSocketSize+0xd0>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c584:	b672      	cpsid	i
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	b662      	cpsie	i
 800c594:	61bb      	str	r3, [r7, #24]
}
 800c596:	bf00      	nop
 800c598:	bf00      	nop
 800c59a:	e7fd      	b.n	800c598 <prvDetermineSocketSize+0xcc>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2278      	movs	r2, #120	@ 0x78
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	e030      	b.n	800c606 <prvDetermineSocketSize+0x13a>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b06      	cmp	r3, #6
 800c5a8:	d11a      	bne.n	800c5e0 <prvDetermineSocketSize+0x114>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d012      	beq.n	800c5d6 <prvDetermineSocketSize+0x10a>
                {
                    xReturn = pdFAIL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d00d      	beq.n	800c5d6 <prvDetermineSocketSize+0x10a>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5be:	b672      	cpsid	i
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	b662      	cpsie	i
 800c5ce:	617b      	str	r3, [r7, #20]
}
 800c5d0:	bf00      	nop
 800c5d2:	bf00      	nop
 800c5d4:	e7fd      	b.n	800c5d2 <prvDetermineSocketSize+0x106>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	e012      	b.n	800c606 <prvDetermineSocketSize+0x13a>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800c5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d00d      	beq.n	800c606 <prvDetermineSocketSize+0x13a>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ee:	b672      	cpsid	i
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	b662      	cpsie	i
 800c5fe:	613b      	str	r3, [r7, #16]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <prvDetermineSocketSize+0x136>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800c606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3730      	adds	r7, #48	@ 0x30
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20002644 	.word	0x20002644
 800c614:	20002658 	.word	0x20002658

0800c618 <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800c628:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c632:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800c636:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800c63a:	f241 101c 	movw	r0, #4380	@ 0x111c
 800c63e:	f7ff fa1a 	bl	800ba76 <FreeRTOS_round_up>
 800c642:	4602      	mov	r2, r0
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c650:	08db      	lsrs	r3, r3, #3
 800c652:	4a10      	ldr	r2, [pc, #64]	@ (800c694 <prvInitialiseTCPFields+0x7c>)
 800c654:	fba2 2303 	umull	r2, r3, r2, r3
 800c658:	099b      	lsrs	r3, r3, #6
 800c65a:	4619      	mov	r1, r3
 800c65c:	2001      	movs	r0, #1
 800c65e:	f7ff f949 	bl	800b8f4 <FreeRTOS_max_size_t>
 800c662:	4602      	mov	r2, r0
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c670:	08db      	lsrs	r3, r3, #3
 800c672:	4a08      	ldr	r2, [pc, #32]	@ (800c694 <prvInitialiseTCPFields+0x7c>)
 800c674:	fba2 2303 	umull	r2, r3, r2, r3
 800c678:	099b      	lsrs	r3, r3, #6
 800c67a:	4619      	mov	r1, r3
 800c67c:	2001      	movs	r0, #1
 800c67e:	f7ff f939 	bl	800b8f4 <FreeRTOS_max_size_t>
 800c682:	4602      	mov	r2, r0
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800c68a:	bf00      	nop
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	2ce33e6d 	.word	0x2ce33e6d

0800c698 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08a      	sub	sp, #40	@ 0x28
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2b0a      	cmp	r3, #10
 800c6b0:	d002      	beq.n	800c6b8 <FreeRTOS_socket+0x20>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d101      	bne.n	800c6bc <FreeRTOS_socket+0x24>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e000      	b.n	800c6be <FreeRTOS_socket+0x26>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10d      	bne.n	800c6de <FreeRTOS_socket+0x46>
	__asm volatile
 800c6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c6:	b672      	cpsid	i
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	b662      	cpsie	i
 800c6d6:	617b      	str	r3, [r7, #20]
}
 800c6d8:	bf00      	nop
 800c6da:	bf00      	nop
 800c6dc:	e7fd      	b.n	800c6da <FreeRTOS_socket+0x42>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10c      	bne.n	800c6fe <FreeRTOS_socket+0x66>
        {
            switch( xType )
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d005      	beq.n	800c6f6 <FreeRTOS_socket+0x5e>
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d105      	bne.n	800c6fc <FreeRTOS_socket+0x64>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800c6f0:	2311      	movs	r3, #17
 800c6f2:	623b      	str	r3, [r7, #32]
                    break;
 800c6f4:	e003      	b.n	800c6fe <FreeRTOS_socket+0x66>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800c6f6:	2306      	movs	r3, #6
 800c6f8:	623b      	str	r3, [r7, #32]
                    break;
 800c6fa:	e000      	b.n	800c6fe <FreeRTOS_socket+0x66>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800c6fc:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800c6fe:	f107 0310 	add.w	r3, r7, #16
 800c702:	6a3a      	ldr	r2, [r7, #32]
 800c704:	68b9      	ldr	r1, [r7, #8]
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7ff fee0 	bl	800c4cc <prvDetermineSocketSize>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d103      	bne.n	800c71a <FreeRTOS_socket+0x82>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800c712:	f04f 33ff 	mov.w	r3, #4294967295
 800c716:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800c718:	e05a      	b.n	800c7d0 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f00b fd83 	bl	8018228 <pvPortMalloc>
 800c722:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d103      	bne.n	800c732 <FreeRTOS_socket+0x9a>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800c72a:	f04f 33ff 	mov.w	r3, #4294967295
 800c72e:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800c730:	e04e      	b.n	800c7d0 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800c732:	f008 fa39 	bl	8014ba8 <xEventGroupCreate>
 800c736:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <FreeRTOS_socket+0xb4>
        {
            vPortFreeSocket( pxSocket );
 800c73e:	69f8      	ldr	r0, [r7, #28]
 800c740:	f00b fe40 	bl	80183c4 <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800c744:	f04f 33ff 	mov.w	r3, #4294967295
 800c748:	627b      	str	r3, [r7, #36]	@ 0x24
 800c74a:	e041      	b.n	800c7d0 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	461a      	mov	r2, r3
 800c750:	2100      	movs	r1, #0
 800c752:	69f8      	ldr	r0, [r7, #28]
 800c754:	f00c fa06 	bl	8018b64 <memset>

            pxSocket->xEventGroup = xEventGroup;
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2b02      	cmp	r3, #2
 800c762:	d105      	bne.n	800c770 <FreeRTOS_socket+0xd8>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800c764:	69fa      	ldr	r2, [r7, #28]
 800c766:	7a13      	ldrb	r3, [r2, #8]
 800c768:	f023 0301 	bic.w	r3, r3, #1
 800c76c:	7213      	strb	r3, [r2, #8]
                        break;
 800c76e:	e000      	b.n	800c772 <FreeRTOS_socket+0xda>

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800c770:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	2b11      	cmp	r3, #17
 800c776:	d108      	bne.n	800c78a <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	3358      	adds	r3, #88	@ 0x58
 800c77c:	4618      	mov	r0, r3
 800c77e:	f008 fc2e 	bl	8014fde <vListInitialise>

                #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                {
                    pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	220a      	movs	r2, #10
 800c786:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c788:	e007      	b.n	800c79a <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	2b06      	cmp	r3, #6
 800c78e:	d104      	bne.n	800c79a <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	4619      	mov	r1, r3
 800c794:	69f8      	ldr	r0, [r7, #28]
 800c796:	f7ff ff3f 	bl	800c618 <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	330c      	adds	r3, #12
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f008 fc3d 	bl	801501e <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	69fa      	ldr	r2, [r7, #28]
 800c7a8:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7b0:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7b8:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	2202      	movs	r2, #2
 800c7be:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800c7c2:	6a3b      	ldr	r3, [r7, #32]
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3728      	adds	r7, #40	@ 0x28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <prvRecvFromWaitForPacket>:
 *                              either eSOCKET_INTR or eSOCKET_RECEIVE.
 */
static NetworkBufferDescriptor_t * prvRecvFromWaitForPacket( FreeRTOS_Socket_t const * pxSocket,
                                                             BaseType_t xFlags,
                                                             EventBits_t * pxEventBits )
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b08e      	sub	sp, #56	@ 0x38
 800c7de:	af02      	add	r7, sp, #8
 800c7e0:	60f8      	str	r0, [r7, #12]
 800c7e2:	60b9      	str	r1, [r7, #8]
 800c7e4:	607a      	str	r2, [r7, #4]
    BaseType_t xTimed = pdFALSE;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TickType_t xRemainingTime = pxSocket->xReceiveBlockTime;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	61fb      	str	r3, [r7, #28]
    BaseType_t lPacketCount;
    TimeOut_t xTimeOut;
    EventBits_t xEventBits = ( EventBits_t ) 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	627b      	str	r3, [r7, #36]	@ 0x24
    NetworkBufferDescriptor_t * pxNetworkBuffer = NULL;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	623b      	str	r3, [r7, #32]

    lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7fc:	62bb      	str	r3, [r7, #40]	@ 0x28

    while( lPacketCount == 0 )
 800c7fe:	e02c      	b.n	800c85a <prvRecvFromWaitForPacket+0x80>
    {
        if( xTimed == pdFALSE )
 800c800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c802:	2b00      	cmp	r3, #0
 800c804:	d10e      	bne.n	800c824 <prvRecvFromWaitForPacket+0x4a>
        {
            /* Check to see if the socket is non blocking on the first
             * iteration.  */
            if( xRemainingTime == ( TickType_t ) 0 )
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d02a      	beq.n	800c862 <prvRecvFromWaitForPacket+0x88>
                }
                #endif /* ipconfigSUPPORT_SIGNALS */
                break;
            }

            if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b00      	cmp	r3, #0
 800c814:	d127      	bne.n	800c866 <prvRecvFromWaitForPacket+0x8c>
            {
                break;
            }

            /* To ensure this part only executes once. */
            xTimed = pdTRUE;
 800c816:	2301      	movs	r3, #1
 800c818:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Fetch the current time. */
            vTaskSetTimeOutState( &xTimeOut );
 800c81a:	f107 0314 	add.w	r3, r7, #20
 800c81e:	4618      	mov	r0, r3
 800c820:	f00a f9a0 	bl	8016b64 <vTaskSetTimeOutState>
        }

        /* Wait for arrival of data.  While waiting, the IP-task may set the
         * 'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
         * socket, thus unblocking this API call. */
        xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6858      	ldr	r0, [r3, #4]
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	2300      	movs	r3, #0
 800c82e:	2201      	movs	r2, #1
 800c830:	2141      	movs	r1, #65	@ 0x41
 800c832:	f008 f9d3 	bl	8014bdc <xEventGroupWaitBits>
 800c836:	6278      	str	r0, [r7, #36]	@ 0x24
        {
            ( void ) xEventBits;
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c83c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if( lPacketCount != 0 )
 800c83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c840:	2b00      	cmp	r3, #0
 800c842:	d112      	bne.n	800c86a <prvRecvFromWaitForPacket+0x90>
        {
            break;
        }

        /* Has the timeout been reached ? */
        if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800c844:	f107 021c 	add.w	r2, r7, #28
 800c848:	f107 0314 	add.w	r3, r7, #20
 800c84c:	4611      	mov	r1, r2
 800c84e:	4618      	mov	r0, r3
 800c850:	f00a f9c8 	bl	8016be4 <xTaskCheckForTimeOut>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d109      	bne.n	800c86e <prvRecvFromWaitForPacket+0x94>
    while( lPacketCount == 0 )
 800c85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d0cf      	beq.n	800c800 <prvRecvFromWaitForPacket+0x26>
 800c860:	e006      	b.n	800c870 <prvRecvFromWaitForPacket+0x96>
                break;
 800c862:	bf00      	nop
 800c864:	e004      	b.n	800c870 <prvRecvFromWaitForPacket+0x96>
                break;
 800c866:	bf00      	nop
 800c868:	e002      	b.n	800c870 <prvRecvFromWaitForPacket+0x96>
            break;
 800c86a:	bf00      	nop
 800c86c:	e000      	b.n	800c870 <prvRecvFromWaitForPacket+0x96>
        {
            break;
 800c86e:	bf00      	nop
        }
    } /* while( lPacketCount == 0 ) */

    if( lPacketCount > 0 )
 800c870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c872:	2b00      	cmp	r3, #0
 800c874:	dd10      	ble.n	800c898 <prvRecvFromWaitForPacket+0xbe>
    {
        vTaskSuspendAll();
 800c876:	f009 fe2d 	bl	80164d4 <vTaskSuspendAll>
        {
            /* The owner of the list item is the network buffer. */
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	623b      	str	r3, [r7, #32]

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d103      	bne.n	800c894 <prvRecvFromWaitForPacket+0xba>
            {
                /* Remove the network buffer from the list of buffers waiting to
                 * be processed by the socket. */
                ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	4618      	mov	r0, r3
 800c890:	f008 fc2f 	bl	80150f2 <uxListRemove>
            }
        }
        ( void ) xTaskResumeAll();
 800c894:	f009 fe2c 	bl	80164f0 <xTaskResumeAll>
    }

    *pxEventBits = xEventBits;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c89c:	601a      	str	r2, [r3, #0]

    return pxNetworkBuffer;
 800c89e:	6a3b      	ldr	r3, [r7, #32]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3730      	adds	r7, #48	@ 0x30
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <prvRecvFrom_CopyPacket>:
static int32_t prvRecvFrom_CopyPacket( uint8_t * pucEthernetBuffer,
                                       void * pvBuffer,
                                       size_t uxBufferLength,
                                       BaseType_t xFlags,
                                       int32_t lDataLength )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
    int32_t lReturn = lDataLength;
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	617b      	str	r3, [r7, #20]
    const void * pvCopySource;

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10e      	bne.n	800c8e2 <prvRecvFrom_CopyPacket+0x3a>
    {
        /* The zero copy flag is not set.  Truncate the length if it won't
         * fit in the provided buffer. */
        if( lReturn > ( int32_t ) uxBufferLength )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	dd01      	ble.n	800c8d0 <prvRecvFrom_CopyPacket+0x28>
        {
            iptraceRECVFROM_DISCARDING_BYTES( ( uxBufferLength - lReturn ) );
            lReturn = ( int32_t ) uxBufferLength;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	617b      	str	r3, [r7, #20]
        }

        /* Copy the received data into the provided buffer, then release the
         * network buffer. */
        pvCopySource = ( const void * ) pucEthernetBuffer;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	613b      	str	r3, [r7, #16]
        ( void ) memcpy( pvBuffer, pvCopySource, ( size_t ) lReturn );
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	6939      	ldr	r1, [r7, #16]
 800c8da:	68b8      	ldr	r0, [r7, #8]
 800c8dc:	f00c fa1d 	bl	8018d1a <memcpy>
 800c8e0:	e002      	b.n	800c8e8 <prvRecvFrom_CopyPacket+0x40>
    {
        /* The zero copy flag was set.  pvBuffer is not a buffer into which
         * the received data can be copied, but a pointer that must be set to
         * point to the buffer in which the received data has already been
         * placed. */
        *( ( void ** ) pvBuffer ) = ( void * ) pucEthernetBuffer;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	601a      	str	r2, [r3, #0]
    }

    return lReturn;
 800c8e8:	697b      	ldr	r3, [r7, #20]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3718      	adds	r7, #24
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <FreeRTOS_recvfrom>:
                           void * pvBuffer,
                           size_t uxBufferLength,
                           BaseType_t xFlags,
                           struct freertos_sockaddr * pxSourceAddress,
                           socklen_t * pxSourceAddressLength )
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b08e      	sub	sp, #56	@ 0x38
 800c8f6:	af02      	add	r7, sp, #8
 800c8f8:	60f8      	str	r0, [r7, #12]
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	607a      	str	r2, [r7, #4]
 800c8fe:	603b      	str	r3, [r7, #0]
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    FreeRTOS_Socket_t const * pxSocket = xSocket;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t lReturn = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    EventBits_t xEventBits = ( EventBits_t ) 0;
 800c908:	2300      	movs	r3, #0
 800c90a:	617b      	str	r3, [r7, #20]
    size_t uxPayloadOffset = 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxPayloadLength;
    socklen_t xAddressLength;

    if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800c910:	2201      	movs	r2, #1
 800c912:	2111      	movs	r1, #17
 800c914:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c916:	f7ff fda1 	bl	800c45c <prvValidSocket>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d103      	bne.n	800c928 <FreeRTOS_recvfrom+0x36>
    {
        lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c920:	f06f 0315 	mvn.w	r3, #21
 800c924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c926:	e049      	b.n	800c9bc <FreeRTOS_recvfrom+0xca>
    {
        /* The function prototype is designed to maintain the expected Berkeley
         * sockets standard, but this implementation does not use all the parameters. */
        ( void ) pxSourceAddressLength;

        pxNetworkBuffer = prvRecvFromWaitForPacket( pxSocket, xFlags, &( xEventBits ) );
 800c928:	f107 0314 	add.w	r3, r7, #20
 800c92c:	461a      	mov	r2, r3
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c932:	f7ff ff52 	bl	800c7da <prvRecvFromWaitForPacket>
 800c936:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d03b      	beq.n	800c9b6 <FreeRTOS_recvfrom+0xc4>
        {
            do
            {
                switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800c93e:	6a38      	ldr	r0, [r7, #32]
 800c940:	f7fe fa90 	bl	800ae64 <uxIPHeaderSizePacket>
 800c944:	4603      	mov	r3, r0
 800c946:	2b14      	cmp	r3, #20
 800c948:	d105      	bne.n	800c956 <FreeRTOS_recvfrom+0x64>
                {
                    #if ( ipconfigUSE_IPv4 != 0 )
                        case ipSIZE_OF_IPv4_HEADER:
                            uxPayloadOffset = xRecv_Update_IPv4( pxNetworkBuffer, pxSourceAddress );
 800c94a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c94c:	6a38      	ldr	r0, [r7, #32]
 800c94e:	f7ff fb8b 	bl	800c068 <xRecv_Update_IPv4>
 800c952:	62b8      	str	r0, [r7, #40]	@ 0x28
                            break;
 800c954:	e003      	b.n	800c95e <FreeRTOS_recvfrom+0x6c>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c956:	f06f 0315 	mvn.w	r3, #21
 800c95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        break;
 800c95c:	bf00      	nop
                }

                if( lReturn < 0 )
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	2b00      	cmp	r3, #0
 800c962:	db1b      	blt.n	800c99c <FreeRTOS_recvfrom+0xaa>
                {
                    break;
                }

                xAddressLength = sizeof( struct freertos_sockaddr );
 800c964:	2318      	movs	r3, #24
 800c966:	61fb      	str	r3, [r7, #28]

                if( pxSourceAddressLength != NULL )
 800c968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <FreeRTOS_recvfrom+0x82>
                {
                    *pxSourceAddressLength = xAddressLength;
 800c96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c970:	69fa      	ldr	r2, [r7, #28]
 800c972:	601a      	str	r2, [r3, #0]

                /* The returned value is the length of the payload data, which is
                 * calculated at the total packet size minus the headers.
                 * The validity of `xDataLength` prvProcessIPPacket has been confirmed
                 * in 'prvProcessIPPacket()'. */
                uxPayloadLength = pxNetworkBuffer->xDataLength - uxPayloadOffset;
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97a:	1ad3      	subs	r3, r2, r3
 800c97c:	61bb      	str	r3, [r7, #24]
                lReturn = ( int32_t ) uxPayloadLength;
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	62fb      	str	r3, [r7, #44]	@ 0x2c

                lReturn = prvRecvFrom_CopyPacket( &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] ), pvBuffer, uxBufferLength, xFlags, lReturn );
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c988:	18d0      	adds	r0, r2, r3
 800c98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	68b9      	ldr	r1, [r7, #8]
 800c994:	f7ff ff88 	bl	800c8a8 <prvRecvFrom_CopyPacket>
 800c998:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c99a:	e000      	b.n	800c99e <FreeRTOS_recvfrom+0xac>
                    break;
 800c99c:	bf00      	nop
            } while( ipFALSE_BOOL );

            if( ( ( ( UBaseType_t ) xFlags & ( ( ( UBaseType_t ) FREERTOS_MSG_PEEK ) | ( ( UBaseType_t ) FREERTOS_ZERO_COPY ) ) ) == 0U ) ||
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	f003 0305 	and.w	r3, r3, #5
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <FreeRTOS_recvfrom+0xbc>
 800c9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	da06      	bge.n	800c9bc <FreeRTOS_recvfrom+0xca>
                ( lReturn < 0 ) )
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c9ae:	6a38      	ldr	r0, [r7, #32]
 800c9b0:	f006 f89c 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
 800c9b4:	e002      	b.n	800c9bc <FreeRTOS_recvfrom+0xca>
                iptraceRECVFROM_INTERRUPTED();
            }
        #endif /* ipconfigSUPPORT_SIGNALS */
        else
        {
            lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800c9b6:	f06f 030a 	mvn.w	r3, #10
 800c9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            iptraceRECVFROM_TIMEOUT();
        }
    }

    return lReturn;
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3730      	adds	r7, #48	@ 0x30
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2111      	movs	r1, #17
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff fd42 	bl	800c45c <prvValidSocket>
 800c9d8:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d10d      	bne.n	800c9fc <prvMakeSureSocketIsBound+0x36>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	69db      	ldr	r3, [r3, #28]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d109      	bne.n	800c9fc <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f915 	bl	800cc1c <FreeRTOS_bind>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b088      	sub	sp, #32
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	60f8      	str	r0, [r7, #12]
 800ca0e:	60b9      	str	r1, [r7, #8]
 800ca10:	607a      	str	r2, [r7, #4]
 800ca12:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800ca18:	2305      	movs	r3, #5
 800ca1a:	753b      	strb	r3, [r7, #20]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800ca20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca22:	785b      	ldrb	r3, [r3, #1]
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d104      	bne.n	800ca32 <prvSendUDPPacket+0x2c>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800ca28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca2a:	68b8      	ldr	r0, [r7, #8]
 800ca2c:	f7ff fafc 	bl	800c028 <xSend_UDP_Update_IPv4>
                break;
 800ca30:	e000      	b.n	800ca34 <prvSendUDPPacket+0x2e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800ca32:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca38:	441a      	add	r2, r3
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800ca3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca40:	885a      	ldrh	r2, [r3, #2]
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca54:	3306      	adds	r3, #6
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800ca5c:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800ca62:	f107 0314 	add.w	r3, r7, #20
 800ca66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fd fe4b 	bl	800a704 <xSendEventStructToIPTask>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d107      	bne.n	800ca84 <prvSendUDPPacket+0x7e>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	4798      	blx	r3
 800ca82:	e007      	b.n	800ca94 <prvSendUDPPacket+0x8e>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d102      	bne.n	800ca94 <prvSendUDPPacket+0x8e>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ca8e:	68b8      	ldr	r0, [r7, #8]
 800ca90:	f006 f82c 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800ca94:	69fb      	ldr	r3, [r7, #28]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3720      	adds	r7, #32
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b08e      	sub	sp, #56	@ 0x38
 800caa2:	af04      	add	r7, sp, #16
 800caa4:	60f8      	str	r0, [r7, #12]
 800caa6:	60b9      	str	r1, [r7, #8]
 800caa8:	607a      	str	r2, [r7, #4]
 800caaa:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800caac:	2300      	movs	r3, #0
 800caae:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab4:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	f003 0310 	and.w	r3, r3, #16
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d104      	bne.n	800caca <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800cac0:	f7fe fd95 	bl	800b5ee <xIsCallingFromIPTask>
 800cac4:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800caca:	2300      	movs	r3, #0
 800cacc:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	f003 0301 	and.w	r3, r3, #1
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d128      	bne.n	800cb2a <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800cad8:	f107 0310 	add.w	r3, r7, #16
 800cadc:	4618      	mov	r0, r3
 800cade:	f00a f841 	bl	8016b64 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800cae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4413      	add	r3, r2
 800cae8:	69ba      	ldr	r2, [r7, #24]
 800caea:	4611      	mov	r1, r2
 800caec:	4618      	mov	r0, r3
 800caee:	f005 ff51 	bl	8012994 <pxGetNetworkBufferWithDescriptor>
 800caf2:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d01b      	beq.n	800cb32 <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb00:	4413      	add	r3, r2
 800cb02:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	68b9      	ldr	r1, [r7, #8]
 800cb08:	69f8      	ldr	r0, [r7, #28]
 800cb0a:	f00c f906 	bl	8018d1a <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800cb0e:	f107 0218 	add.w	r2, r7, #24
 800cb12:	f107 0310 	add.w	r3, r7, #16
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f00a f863 	bl	8016be4 <xTaskCheckForTimeOut>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d106      	bne.n	800cb32 <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	61bb      	str	r3, [r7, #24]
 800cb28:	e003      	b.n	800cb32 <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800cb2a:	68b8      	ldr	r0, [r7, #8]
 800cb2c:	f7fe fd1b 	bl	800b566 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800cb30:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800cb32:	6a3b      	ldr	r3, [r7, #32]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d010      	beq.n	800cb5a <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb44:	9202      	str	r2, [sp, #8]
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	6a39      	ldr	r1, [r7, #32]
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7ff ff57 	bl	800ca06 <prvSendUDPPacket>
 800cb58:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3728      	adds	r7, #40	@ 0x28
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b08c      	sub	sp, #48	@ 0x30
 800cb68:	af02      	add	r7, sp, #8
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]
 800cb70:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	627b      	str	r3, [r7, #36]	@ 0x24
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	61bb      	str	r3, [r7, #24]
    size_t uxMaxPayloadLength = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	623b      	str	r3, [r7, #32]
    size_t uxPayloadOffset = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61fb      	str	r3, [r7, #28]

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800cb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10d      	bne.n	800cba4 <FreeRTOS_sendto+0x40>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8c:	b672      	cpsid	i
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	b662      	cpsie	i
 800cb9c:	617b      	str	r3, [r7, #20]
}
 800cb9e:	bf00      	nop
 800cba0:	bf00      	nop
 800cba2:	e7fd      	b.n	800cba0 <FreeRTOS_sendto+0x3c>
    configASSERT( pvBuffer != NULL );
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10d      	bne.n	800cbc6 <FreeRTOS_sendto+0x62>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbae:	b672      	cpsid	i
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	b662      	cpsie	i
 800cbbe:	613b      	str	r3, [r7, #16]
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	e7fd      	b.n	800cbc2 <FreeRTOS_sendto+0x5e>

    switch( pxDestinationAddress->sin_family )
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc8:	785b      	ldrb	r3, [r3, #1]
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d105      	bne.n	800cbda <FreeRTOS_sendto+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800cbce:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800cbd2:	623b      	str	r3, [r7, #32]
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800cbd4:	232a      	movs	r3, #42	@ 0x2a
 800cbd6:	61fb      	str	r3, [r7, #28]
                break;
 800cbd8:	e003      	b.n	800cbe2 <FreeRTOS_sendto+0x7e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800cbda:	f06f 0315 	mvn.w	r3, #21
 800cbde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cbe0:	bf00      	nop
    }

    if( lReturn == 0 )
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d114      	bne.n	800cc12 <FreeRTOS_sendto+0xae>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d810      	bhi.n	800cc12 <FreeRTOS_sendto+0xae>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800cbf0:	69b8      	ldr	r0, [r7, #24]
 800cbf2:	f7ff fee8 	bl	800c9c6 <prvMakeSureSocketIsBound>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d10a      	bne.n	800cc12 <FreeRTOS_sendto+0xae>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	68b9      	ldr	r1, [r7, #8]
 800cc0a:	69b8      	ldr	r0, [r7, #24]
 800cc0c:	f7ff ff47 	bl	800ca9e <prvSendTo_ActualSend>
 800cc10:	6278      	str	r0, [r7, #36]	@ 0x24
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
} /* Tested */
 800cc14:	4618      	mov	r0, r3
 800cc16:	3728      	adds	r7, #40	@ 0x28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08c      	sub	sp, #48	@ 0x30
 800cc20:	af02      	add	r7, sp, #8
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800cc30:	f7fe fcdd 	bl	800b5ee <xIsCallingFromIPTask>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00d      	beq.n	800cc56 <FreeRTOS_bind+0x3a>
	__asm volatile
 800cc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3e:	b672      	cpsid	i
 800cc40:	f383 8811 	msr	BASEPRI, r3
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	f3bf 8f4f 	dsb	sy
 800cc4c:	b662      	cpsie	i
 800cc4e:	61fb      	str	r3, [r7, #28]
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	e7fd      	b.n	800cc52 <FreeRTOS_bind+0x36>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800cc56:	6a38      	ldr	r0, [r7, #32]
 800cc58:	f001 f98a 	bl	800df70 <xSocketValid>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <FreeRTOS_bind+0x4e>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800cc62:	f06f 0315 	mvn.w	r3, #21
 800cc66:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc68:	e04b      	b.n	800cd02 <FreeRTOS_bind+0xe6>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <FreeRTOS_bind+0x5e>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800cc72:	f06f 0315 	mvn.w	r3, #21
 800cc76:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc78:	e043      	b.n	800cd02 <FreeRTOS_bind+0xe6>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800cc7a:	230a      	movs	r3, #10
 800cc7c:	753b      	strb	r3, [r7, #20]
        xBindEvent.pvData = xSocket;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	61bb      	str	r3, [r7, #24]

        if( pxAddress != NULL )
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d013      	beq.n	800ccb0 <FreeRTOS_bind+0x94>
        {
            switch( pxAddress->sin_family )
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	785b      	ldrb	r3, [r3, #1]
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d109      	bne.n	800cca4 <FreeRTOS_bind+0x88>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	689a      	ldr	r2, [r3, #8]
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800cc98:	6a3a      	ldr	r2, [r7, #32]
 800cc9a:	7a13      	ldrb	r3, [r2, #8]
 800cc9c:	f023 0301 	bic.w	r3, r3, #1
 800cca0:	7213      	strb	r3, [r2, #8]
                        break;
 800cca2:	e000      	b.n	800cca6 <FreeRTOS_bind+0x8a>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
                    break;
 800cca4:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	885a      	ldrh	r2, [r3, #2]
 800ccaa:	6a3b      	ldr	r3, [r7, #32]
 800ccac:	871a      	strh	r2, [r3, #56]	@ 0x38
 800ccae:	e009      	b.n	800ccc4 <FreeRTOS_bind+0xa8>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ccb6:	6a3b      	ldr	r3, [r7, #32]
 800ccb8:	3328      	adds	r3, #40	@ 0x28
 800ccba:	2210      	movs	r2, #16
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f00b ff50 	bl	8018b64 <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800ccc4:	f107 0314 	add.w	r3, r7, #20
 800ccc8:	f04f 31ff 	mov.w	r1, #4294967295
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fd fd19 	bl	800a704 <xSendEventStructToIPTask>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d103      	bne.n	800cce0 <FreeRTOS_bind+0xc4>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800ccd8:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800ccdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccde:	e010      	b.n	800cd02 <FreeRTOS_bind+0xe6>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	6858      	ldr	r0, [r3, #4]
 800cce4:	f04f 33ff 	mov.w	r3, #4294967295
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	2300      	movs	r3, #0
 800ccec:	2201      	movs	r2, #1
 800ccee:	2110      	movs	r1, #16
 800ccf0:	f007 ff74 	bl	8014bdc <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <FreeRTOS_bind+0xe6>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ccfc:	f06f 0315 	mvn.w	r3, #21
 800cd00:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    return xReturn;
 800cd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3728      	adds	r7, #40	@ 0x28
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d004      	beq.n	800cd2e <prvSocketBindAdd+0x22>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800cd2a:	2b06      	cmp	r3, #6
 800cd2c:	d00c      	beq.n	800cd48 <prvSocketBindAdd+0x3c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	885b      	ldrh	r3, [r3, #2]
 800cd32:	4619      	mov	r1, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fc93 	bl	800d660 <pxListFindListItemWithValue>
 800cd3a:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d003      	beq.n	800cd48 <prvSocketBindAdd+0x3c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800cd40:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800cd44:	617b      	str	r3, [r7, #20]
 800cd46:	e02b      	b.n	800cda0 <prvSocketBindAdd+0x94>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	885b      	ldrh	r3, [r3, #2]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	885a      	ldrh	r2, [r3, #2]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	871a      	strh	r2, [r3, #56]	@ 0x38
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d007      	beq.n	800cd72 <prvSocketBindAdd+0x66>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4 );
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff fa9c 	bl	800c2a4 <FreeRTOS_FindEndPointOnIP_IPv4>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	651a      	str	r2, [r3, #80]	@ 0x50
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d005      	beq.n	800cd86 <prvSocketBindAdd+0x7a>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	629a      	str	r2, [r3, #40]	@ 0x28
 800cd84:	e006      	b.n	800cd94 <prvSocketBindAdd+0x88>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	3328      	adds	r3, #40	@ 0x28
 800cd8a:	2210      	movs	r2, #16
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f00b fee8 	bl	8018b64 <memset>
                vTaskSuspendAll();
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	330c      	adds	r3, #12
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f008 f94c 	bl	8015038 <vListInsertEnd>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800cda0:	697b      	ldr	r3, [r7, #20]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3718      	adds	r7, #24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
	...

0800cdac <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b090      	sub	sp, #64	@ 0x40
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800cdba:	2300      	movs	r3, #0
 800cdbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f001 f8d4 	bl	800df70 <xSocketValid>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d00d      	beq.n	800cdea <vSocketBind+0x3e>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd2:	b672      	cpsid	i
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	b662      	cpsie	i
 800cde2:	633b      	str	r3, [r7, #48]	@ 0x30
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	e7fd      	b.n	800cde6 <vSocketBind+0x3a>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800cdf0:	2b06      	cmp	r3, #6
 800cdf2:	d102      	bne.n	800cdfa <vSocketBind+0x4e>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800cdf4:	4b28      	ldr	r3, [pc, #160]	@ (800ce98 <vSocketBind+0xec>)
 800cdf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cdf8:	e001      	b.n	800cdfe <vSocketBind+0x52>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800cdfa:	4b28      	ldr	r3, [pc, #160]	@ (800ce9c <vSocketBind+0xf0>)
 800cdfc:	63bb      	str	r3, [r7, #56]	@ 0x38
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d115      	bne.n	800ce30 <vSocketBind+0x84>
        {
            pxAddress = &xAddress;
 800ce04:	f107 0314 	add.w	r3, r7, #20
 800ce08:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800ce0a:	2218      	movs	r2, #24
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ce10:	f00b fea8 	bl	8018b64 <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	7a1b      	ldrb	r3, [r3, #8]
 800ce18:	f003 0301 	and.w	r3, r3, #1
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d003      	beq.n	800ce2a <vSocketBind+0x7e>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800ce22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce24:	220a      	movs	r2, #10
 800ce26:	705a      	strb	r2, [r3, #1]
 800ce28:	e002      	b.n	800ce30 <vSocketBind+0x84>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800ce2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce2c:	2202      	movs	r2, #2
 800ce2e:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800ce30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10d      	bne.n	800ce52 <vSocketBind+0xa6>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3a:	b672      	cpsid	i
 800ce3c:	f383 8811 	msr	BASEPRI, r3
 800ce40:	f3bf 8f6f 	isb	sy
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	b662      	cpsie	i
 800ce4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800ce4c:	bf00      	nop
 800ce4e:	bf00      	nop
 800ce50:	e7fd      	b.n	800ce4e <vSocketBind+0xa2>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800ce52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce54:	885b      	ldrh	r3, [r3, #2]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d111      	bne.n	800ce7e <vSocketBind+0xd2>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 fbb7 	bl	800d5d4 <prvGetPrivatePortNumber>
 800ce66:	4603      	mov	r3, r0
 800ce68:	461a      	mov	r2, r3
 800ce6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce6c:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800ce6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce70:	885b      	ldrh	r3, [r3, #2]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d103      	bne.n	800ce7e <vSocketBind+0xd2>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800ce76:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800ce7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800ce7c:	e006      	b.n	800ce8c <vSocketBind+0xe0>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff ff41 	bl	800cd0c <prvSocketBindAdd>
 800ce8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800ce8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
} /* Tested */
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3740      	adds	r7, #64	@ 0x40
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	20002658 	.word	0x20002658
 800ce9c:	20002644 	.word	0x20002644

0800cea0 <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ceae:	2b06      	cmp	r3, #6
 800ceb0:	d129      	bne.n	800cf06 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d005      	beq.n	800cec8 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cec2:	4618      	mov	r0, r3
 800cec4:	f005 fe12 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800cece:	4618      	mov	r0, r3
 800ced0:	f004 fc92 	bl	80117f8 <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d005      	beq.n	800ceea <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cee4:	4618      	mov	r0, r3
 800cee6:	f00b fa6d 	bl	80183c4 <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d005      	beq.n	800cf00 <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cefa:	4618      	mov	r0, r3
 800cefc:	f00b fa62 	bl	80183c4 <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f82f 	bl	800cf64 <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	69db      	ldr	r3, [r3, #28]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d004      	beq.n	800cf18 <vSocketClose+0x78>
        {
            vTaskSuspendAll();
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	330c      	adds	r3, #12
 800cf12:	4618      	mov	r0, r3
 800cf14:	f008 f8ed 	bl	80150f2 <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800cf1e:	2b11      	cmp	r3, #17
 800cf20:	d10f      	bne.n	800cf42 <vSocketClose+0xa2>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800cf22:	e00a      	b.n	800cf3a <vSocketClose+0x9a>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f008 f8df 	bl	80150f2 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f005 fdd9 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1f0      	bne.n	800cf24 <vSocketClose+0x84>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <vSocketClose+0xb4>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f007 ffeb 	bl	8014f2a <vEventGroupDelete>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f00b fa35 	bl	80183c4 <vPortFree>

    return NULL;
 800cf5a:	2300      	movs	r3, #0
} /* Tested */
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800cf6c:	4b30      	ldr	r3, [pc, #192]	@ (800d030 <prvTCPSetSocketCount+0xcc>)
 800cf6e:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800cf74:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d12b      	bne.n	800cfd8 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800cf80:	4b2c      	ldr	r3, [pc, #176]	@ (800d034 <prvTCPSetSocketCount+0xd0>)
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800cf86:	e022      	b.n	800cfce <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d017      	beq.n	800cfce <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800cfa2:	89fa      	ldrh	r2, [r7, #14]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d112      	bne.n	800cfce <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cfae:	f003 0304 	and.w	r3, r3, #4
 800cfb2:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d107      	bne.n	800cfc8 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cfbe:	f003 0302 	and.w	r3, r3, #2
 800cfc2:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800cfc8:	68b8      	ldr	r0, [r7, #8]
 800cfca:	f7ff ff69 	bl	800cea0 <vSocketClose>
            while( pxIterator != pxEnd )
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d1d8      	bne.n	800cf88 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800cfd6:	e026      	b.n	800d026 <prvTCPSetSocketCount+0xc2>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800cfd8:	4b16      	ldr	r3, [pc, #88]	@ (800d034 <prvTCPSetSocketCount+0xd0>)
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	e01e      	b.n	800d01e <prvTCPSetSocketCount+0xba>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d113      	bne.n	800d018 <prvTCPSetSocketCount+0xb4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800cff4:	89fa      	ldrh	r2, [r7, #14]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d10e      	bne.n	800d018 <prvTCPSetSocketCount+0xb4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800d000:	2b00      	cmp	r3, #0
 800d002:	d009      	beq.n	800d018 <prvTCPSetSocketCount+0xb4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800d00a:	3b01      	subs	r3, #1
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
                    break;
 800d014:	bf00      	nop
    }
 800d016:	e006      	b.n	800d026 <prvTCPSetSocketCount+0xc2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800d01e:	697a      	ldr	r2, [r7, #20]
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	429a      	cmp	r2, r3
 800d024:	d1dc      	bne.n	800cfe0 <prvTCPSetSocketCount+0x7c>
    }
 800d026:	bf00      	nop
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	20002660 	.word	0x20002660
 800d034:	20002658 	.word	0x20002658

0800d038 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( ( FreeRTOS_issocketconnected( pxSocket ) == pdTRUE ) )
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 ff4b 	bl	800dee0 <FreeRTOS_issocketconnected>
             * us data. If data was already sent, then pxSocket->u.xTCP.rxStream != NULL and this call will fail.
             * Warn the user about this inconsistent behavior. */
            FreeRTOS_printf( ( "Warning: Changing buffer/window properties on a connected socket may fail." ) );
        }

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d050:	2b06      	cmp	r3, #6
 800d052:	d003      	beq.n	800d05c <prvSockopt_so_buffer+0x24>
        {
            FreeRTOS_printf( ( "Set SO_%sBUF: wrong socket type\n",
                               ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d054:	f06f 0315 	mvn.w	r3, #21
 800d058:	617b      	str	r3, [r7, #20]
 800d05a:	e02c      	b.n	800d0b6 <prvSockopt_so_buffer+0x7e>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	2b04      	cmp	r3, #4
 800d060:	d104      	bne.n	800d06c <prvSockopt_so_buffer+0x34>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d107      	bne.n	800d07c <prvSockopt_so_buffer+0x44>
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b05      	cmp	r3, #5
 800d070:	d108      	bne.n	800d084 <prvSockopt_so_buffer+0x4c>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d003      	beq.n	800d084 <prvSockopt_so_buffer+0x4c>
        {
            FreeRTOS_printf( ( "Set SO_%sBUF: buffer already created\n",
                               ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d07c:	f06f 0315 	mvn.w	r3, #21
 800d080:	617b      	str	r3, [r7, #20]
 800d082:	e018      	b.n	800d0b6 <prvSockopt_so_buffer+0x7e>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	d10c      	bne.n	800d0aa <prvSockopt_so_buffer+0x72>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800d096:	4619      	mov	r1, r3
 800d098:	6938      	ldr	r0, [r7, #16]
 800d09a:	f7fe fcec 	bl	800ba76 <FreeRTOS_round_up>
 800d09e:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	693a      	ldr	r2, [r7, #16]
 800d0a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800d0a8:	e003      	b.n	800d0b2 <prvSockopt_so_buffer+0x7a>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	693a      	ldr	r2, [r7, #16]
 800d0ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            }

            xReturn = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800d0b6:	697b      	ldr	r3, [r7, #20]
    }
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3718      	adds	r7, #24
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800d0c0:	b480      	push	{r7}
 800d0c2:	b087      	sub	sp, #28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	2b09      	cmp	r3, #9
 800d0d4:	d002      	beq.n	800d0dc <prvSetOptionCallback+0x1c>
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	2b0a      	cmp	r3, #10
 800d0da:	d102      	bne.n	800d0e2 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800d0dc:	2311      	movs	r3, #17
 800d0de:	613b      	str	r3, [r7, #16]
 800d0e0:	e001      	b.n	800d0e6 <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800d0e2:	2306      	movs	r3, #6
 800d0e4:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d002      	beq.n	800d0fa <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d0f4:	f06f 0315 	mvn.w	r3, #21
 800d0f8:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d131      	bne.n	800d164 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	3b06      	subs	r3, #6
 800d104:	2b04      	cmp	r3, #4
 800d106:	d829      	bhi.n	800d15c <prvSetOptionCallback+0x9c>
 800d108:	a201      	add	r2, pc, #4	@ (adr r2, 800d110 <prvSetOptionCallback+0x50>)
 800d10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10e:	bf00      	nop
 800d110:	0800d125 	.word	0x0800d125
 800d114:	0800d131 	.word	0x0800d131
 800d118:	0800d13d 	.word	0x0800d13d
 800d11c:	0800d149 	.word	0x0800d149
 800d120:	0800d153 	.word	0x0800d153
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                        break;
 800d12e:	e019      	b.n	800d164 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685a      	ldr	r2, [r3, #4]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800d13a:	e013      	b.n	800d164 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	689a      	ldr	r2, [r3, #8]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800d146:	e00d      	b.n	800d164 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	68da      	ldr	r2, [r3, #12]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	671a      	str	r2, [r3, #112]	@ 0x70
                    break;
 800d150:	e008      	b.n	800d164 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	691a      	ldr	r2, [r3, #16]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 800d15a:	e003      	b.n	800d164 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800d15c:	f06f 0315 	mvn.w	r3, #21
 800d160:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800d162:	bf00      	nop
            }
        }

        return xReturn;
 800d164:	697b      	ldr	r3, [r7, #20]
    }
 800d166:	4618      	mov	r0, r3
 800d168:	371c      	adds	r7, #28
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop

0800d174 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d17e:	f06f 0315 	mvn.w	r3, #21
 800d182:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3358      	adds	r3, #88	@ 0x58
 800d188:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d190:	2b06      	cmp	r3, #6
 800d192:	d13f      	bne.n	800d214 <prvSetOptionTCPWindows+0xa0>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	461a      	mov	r2, r3
 800d19c:	2104      	movs	r1, #4
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7ff ff4a 	bl	800d038 <prvSockopt_so_buffer>
 800d1a4:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d135      	bne.n	800d218 <prvSetOptionTCPWindows+0xa4>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3308      	adds	r3, #8
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	2105      	movs	r1, #5
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7ff ff3f 	bl	800d038 <prvSockopt_so_buffer>
 800d1ba:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d12c      	bne.n	800d21c <prvSetOptionTCPWindows+0xa8>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d019      	beq.n	800d21e <prvSetOptionTCPWindows+0xaa>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d1f0:	693a      	ldr	r2, [r7, #16]
 800d1f2:	8bd2      	ldrh	r2, [r2, #30]
 800d1f4:	fb03 f202 	mul.w	r2, r3, r2
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800d204:	693a      	ldr	r2, [r7, #16]
 800d206:	8bd2      	ldrh	r2, [r2, #30]
 800d208:	fb03 f202 	mul.w	r2, r3, r2
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800d212:	e004      	b.n	800d21e <prvSetOptionTCPWindows+0xaa>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800d214:	bf00      	nop
 800d216:	e002      	b.n	800d21e <prvSetOptionTCPWindows+0xaa>
                break; /* will return an error. */
 800d218:	bf00      	nop
 800d21a:	e000      	b.n	800d21e <prvSetOptionTCPWindows+0xaa>
                break; /* will return an error. */
 800d21c:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800d21e:	697b      	ldr	r3, [r7, #20]
    }
 800d220:	4618      	mov	r0, r3
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d232:	f06f 0315 	mvn.w	r3, #21
 800d236:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d242:	2b06      	cmp	r3, #6
 800d244:	d118      	bne.n	800d278 <prvSetOptionLowHighWater+0x50>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d212      	bcs.n	800d278 <prvSetOptionLowHighWater+0x50>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	685a      	ldr	r2, [r3, #4]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d80b      	bhi.n	800d278 <prvSetOptionLowHighWater+0x50>
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	685a      	ldr	r2, [r3, #4]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            xReturn = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800d278:	68fb      	ldr	r3, [r7, #12]
    }
 800d27a:	4618      	mov	r0, r3
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800d286:	b580      	push	{r7, lr}
 800d288:	b084      	sub	sp, #16
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d290:	f06f 0315 	mvn.w	r3, #21
 800d294:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d29c:	2b06      	cmp	r3, #6
 800d29e:	d126      	bne.n	800d2ee <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d007      	beq.n	800d2b8 <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	f892 3124 	ldrb.w	r3, [r2, #292]	@ 0x124
 800d2ae:	f043 0302 	orr.w	r3, r3, #2
 800d2b2:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124
 800d2b6:	e006      	b.n	800d2c6 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	f892 3124 	ldrb.w	r3, [r2, #292]	@ 0x124
 800d2be:	f023 0302 	bic.w	r3, r3, #2
 800d2c2:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d90c      	bls.n	800d2ea <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 fde1 	bl	800de98 <FreeRTOS_tx_size>
 800d2d6:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d006      	beq.n	800d2ea <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800d2e4:	2007      	movs	r0, #7
 800d2e6:	f7fd f9f7 	bl	800a6d8 <xSendEventToIPTask>
            }

            xReturn = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
    }
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d302:	f06f 0315 	mvn.w	r3, #21
 800d306:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d30e:	2b06      	cmp	r3, #6
 800d310:	d122      	bne.n	800d358 <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d007      	beq.n	800d32a <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800d320:	f043 0304 	orr.w	r3, r3, #4
 800d324:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
 800d328:	e006      	b.n	800d338 <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800d330:	f023 0304 	bic.w	r3, r3, #4
 800d334:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800d33e:	f043 0301 	orr.w	r3, r3, #1
 800d342:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800d34e:	2007      	movs	r0, #7
 800d350:	f7fd f9c2 	bl	800a6d8 <xSendEventToIPTask>
            xReturn = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800d358:	68fb      	ldr	r3, [r7, #12]
    }
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800d362:	b480      	push	{r7}
 800d364:	b087      	sub	sp, #28
 800d366:	af00      	add	r7, sp, #0
 800d368:	60f8      	str	r0, [r7, #12]
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d10f      	bne.n	800d39a <prvSetOptionTimeout+0x38>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d380:	2b11      	cmp	r3, #17
 800d382:	d106      	bne.n	800d392 <prvSetOptionTimeout+0x30>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d38a:	d902      	bls.n	800d392 <prvSetOptionTimeout+0x30>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800d38c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d390:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800d398:	e002      	b.n	800d3a0 <prvSetOptionTimeout+0x3e>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	697a      	ldr	r2, [r7, #20]
 800d39e:	621a      	str	r2, [r3, #32]
}
 800d3a0:	bf00      	nop
 800d3a2:	371c      	adds	r7, #28
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d3b6:	f06f 0315 	mvn.w	r3, #21
 800d3ba:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d3c2:	2b06      	cmp	r3, #6
 800d3c4:	d114      	bne.n	800d3f0 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d007      	beq.n	800d3de <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d3d4:	f043 0308 	orr.w	r3, r3, #8
 800d3d8:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800d3dc:	e006      	b.n	800d3ec <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d3e4:	f023 0308 	bic.w	r3, r3, #8
 800d3e8:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            xReturn = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
    }
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3714      	adds	r7, #20
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800d3fe:	b480      	push	{r7}
 800d400:	b085      	sub	sp, #20
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d408:	f06f 0315 	mvn.w	r3, #21
 800d40c:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d414:	2b06      	cmp	r3, #6
 800d416:	d114      	bne.n	800d442 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d007      	beq.n	800d430 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d426:	f043 0310 	orr.w	r3, r3, #16
 800d42a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800d42e:	e006      	b.n	800d43e <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d436:	f023 0310 	bic.w	r3, r3, #16
 800d43a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            xReturn = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800d442:	68fb      	ldr	r3, [r7, #12]
    }
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
 800d45c:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d45e:	f06f 0315 	mvn.w	r3, #21
 800d462:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800d468:	6938      	ldr	r0, [r7, #16]
 800d46a:	f000 fd81 	bl	800df70 <xSocketValid>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b01      	cmp	r3, #1
 800d472:	f040 80a5 	bne.w	800d5c0 <FreeRTOS_setsockopt+0x170>
    {
        switch( lOptionName )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b12      	cmp	r3, #18
 800d47a:	f200 809d 	bhi.w	800d5b8 <FreeRTOS_setsockopt+0x168>
 800d47e:	a201      	add	r2, pc, #4	@ (adr r2, 800d484 <FreeRTOS_setsockopt+0x34>)
 800d480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d484:	0800d4d1 	.word	0x0800d4d1
 800d488:	0800d4e1 	.word	0x0800d4e1
 800d48c:	0800d509 	.word	0x0800d509
 800d490:	0800d549 	.word	0x0800d549
 800d494:	0800d56f 	.word	0x0800d56f
 800d498:	0800d56f 	.word	0x0800d56f
 800d49c:	0800d53b 	.word	0x0800d53b
 800d4a0:	0800d53b 	.word	0x0800d53b
 800d4a4:	0800d53b 	.word	0x0800d53b
 800d4a8:	0800d53b 	.word	0x0800d53b
 800d4ac:	0800d53b 	.word	0x0800d53b
 800d4b0:	0800d589 	.word	0x0800d589
 800d4b4:	0800d595 	.word	0x0800d595
 800d4b8:	0800d57d 	.word	0x0800d57d
 800d4bc:	0800d5a1 	.word	0x0800d5a1
 800d4c0:	0800d5ad 	.word	0x0800d5ad
 800d4c4:	0800d4f1 	.word	0x0800d4f1
 800d4c8:	0800d557 	.word	0x0800d557
 800d4cc:	0800d563 	.word	0x0800d563
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6938      	ldr	r0, [r7, #16]
 800d4d6:	f7ff ff44 	bl	800d362 <prvSetOptionTimeout>
                xReturn = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	617b      	str	r3, [r7, #20]
                break;
 800d4de:	e074      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6938      	ldr	r0, [r7, #16]
 800d4e6:	f7ff ff3c 	bl	800d362 <prvSetOptionTimeout>
                xReturn = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	617b      	str	r3, [r7, #20]
                break;
 800d4ee:	e06c      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>

                #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                    case FREERTOS_SO_UDP_MAX_RX_PACKETS:

                        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d4f6:	2b11      	cmp	r3, #17
 800d4f8:	d166      	bne.n	800d5c8 <FreeRTOS_setsockopt+0x178>
                        {
                            break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                        }

                        pxSocket->u.xUDP.uxMaxPackets = *( ( const UBaseType_t * ) pvOptionValue );
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	66da      	str	r2, [r3, #108]	@ 0x6c
                        xReturn = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	617b      	str	r3, [r7, #20]
                        break;
 800d506:	e060      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d109      	bne.n	800d522 <FreeRTOS_setsockopt+0xd2>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d514:	f023 0302 	bic.w	r3, r3, #2
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800d520:	e008      	b.n	800d534 <FreeRTOS_setsockopt+0xe4>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d528:	f043 0302 	orr.w	r3, r3, #2
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	617b      	str	r3, [r7, #20]
                break;
 800d538:	e047      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	6938      	ldr	r0, [r7, #16]
 800d540:	f7ff fdbe 	bl	800d0c0 <prvSetOptionCallback>
 800d544:	6178      	str	r0, [r7, #20]
                        break;
 800d546:	e040      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800d550:	2300      	movs	r3, #0
 800d552:	617b      	str	r3, [r7, #20]
                        break;
 800d554:	e039      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>
                        /* MISRA Ref 11.1.1 [ Conversion between pointer to
                         * a function and another type ] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-111 */
                        /* coverity[misra_c_2012_rule_11_8_violation] */
                        /* coverity[misra_c_2012_rule_11_1_violation] */
                        pxSocket->pxUserWakeCallback = ( SocketWakeupCallback_t ) pvOptionValue;
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	641a      	str	r2, [r3, #64]	@ 0x40
                        ipconfigISO_STRICTNESS_VIOLATION_END;
                        xReturn = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	617b      	str	r3, [r7, #20]
                        break;
 800d560:	e033      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800d562:	6839      	ldr	r1, [r7, #0]
 800d564:	6938      	ldr	r0, [r7, #16]
 800d566:	f7ff fe5f 	bl	800d228 <prvSetOptionLowHighWater>
 800d56a:	6178      	str	r0, [r7, #20]
                        break;
 800d56c:	e02d      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800d56e:	683a      	ldr	r2, [r7, #0]
 800d570:	6879      	ldr	r1, [r7, #4]
 800d572:	6938      	ldr	r0, [r7, #16]
 800d574:	f7ff fd60 	bl	800d038 <prvSockopt_so_buffer>
 800d578:	6178      	str	r0, [r7, #20]
                        break;
 800d57a:	e026      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800d57c:	6839      	ldr	r1, [r7, #0]
 800d57e:	6938      	ldr	r0, [r7, #16]
 800d580:	f7ff fdf8 	bl	800d174 <prvSetOptionTCPWindows>
 800d584:	6178      	str	r0, [r7, #20]
                        break;
 800d586:	e020      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6938      	ldr	r0, [r7, #16]
 800d58c:	f7ff ff0e 	bl	800d3ac <prvSetOptionReuseListenSocket>
 800d590:	6178      	str	r0, [r7, #20]
                        break;
 800d592:	e01a      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800d594:	6839      	ldr	r1, [r7, #0]
 800d596:	6938      	ldr	r0, [r7, #16]
 800d598:	f7ff ff31 	bl	800d3fe <prvSetOptionCloseAfterSend>
 800d59c:	6178      	str	r0, [r7, #20]
                        break;
 800d59e:	e014      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	6938      	ldr	r0, [r7, #16]
 800d5a4:	f7ff fe6f 	bl	800d286 <prvSetOptionSetFullSize>
 800d5a8:	6178      	str	r0, [r7, #20]
                        break;
 800d5aa:	e00e      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800d5ac:	6839      	ldr	r1, [r7, #0]
 800d5ae:	6938      	ldr	r0, [r7, #16]
 800d5b0:	f7ff fea2 	bl	800d2f8 <prvSetOptionStopRX>
 800d5b4:	6178      	str	r0, [r7, #20]
                        break;
 800d5b6:	e008      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800d5b8:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800d5bc:	617b      	str	r3, [r7, #20]
                break;
 800d5be:	e004      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d5c0:	f06f 0315 	mvn.w	r3, #21
 800d5c4:	617b      	str	r3, [r7, #20]
 800d5c6:	e000      	b.n	800d5ca <FreeRTOS_setsockopt+0x17a>
                            break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800d5c8:	bf00      	nop
    }

    return xReturn;
 800d5ca:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800d5dc:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800d5e0:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800d5e2:	89fb      	ldrh	r3, [r7, #14]
 800d5e4:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b06      	cmp	r3, #6
 800d5f2:	d102      	bne.n	800d5fa <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800d5f4:	4b18      	ldr	r3, [pc, #96]	@ (800d658 <prvGetPrivatePortNumber+0x84>)
 800d5f6:	613b      	str	r3, [r7, #16]
 800d5f8:	e001      	b.n	800d5fe <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800d5fa:	4b18      	ldr	r3, [pc, #96]	@ (800d65c <prvGetPrivatePortNumber+0x88>)
 800d5fc:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800d5fe:	f107 0308 	add.w	r3, r7, #8
 800d602:	4618      	mov	r0, r3
 800d604:	f7fa fe8a 	bl	800831c <xApplicationGetRandomNumber>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d01c      	beq.n	800d648 <prvGetPrivatePortNumber+0x74>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800d612:	89fa      	ldrh	r2, [r7, #14]
 800d614:	fbb3 f1f2 	udiv	r1, r3, r2
 800d618:	fb01 f202 	mul.w	r2, r1, r2
 800d61c:	1a9b      	subs	r3, r3, r2
 800d61e:	b29b      	uxth	r3, r3
 800d620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d624:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
 800d626:	8abb      	ldrh	r3, [r7, #20]
 800d628:	4619      	mov	r1, r3
 800d62a:	6938      	ldr	r0, [r7, #16]
 800d62c:	f000 f818 	bl	800d660 <pxListFindListItemWithValue>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00a      	beq.n	800d64c <prvGetPrivatePortNumber+0x78>
            usResult = FreeRTOS_htons( usResult );
            break;
        }
        else
        {
            usResult = 0;
 800d636:	2300      	movs	r3, #0
 800d638:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800d63a:	8afb      	ldrh	r3, [r7, #22]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800d640:	8afb      	ldrh	r3, [r7, #22]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1db      	bne.n	800d5fe <prvGetPrivatePortNumber+0x2a>
 800d646:	e002      	b.n	800d64e <prvGetPrivatePortNumber+0x7a>
            break;
 800d648:	bf00      	nop
 800d64a:	e000      	b.n	800d64e <prvGetPrivatePortNumber+0x7a>
            break;
 800d64c:	bf00      	nop

    return usResult;
 800d64e:	8abb      	ldrh	r3, [r7, #20]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	20002658 	.word	0x20002658
 800d65c:	20002644 	.word	0x20002644

0800d660 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800d66e:	f7fd fb9f 	bl	800adb0 <xIPIsNetworkTaskReady>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d018      	beq.n	800d6aa <pxListFindListItemWithValue+0x4a>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d015      	beq.n	800d6aa <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	3308      	adds	r3, #8
 800d682:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_HEAD_ENTRY( pxList );
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	613b      	str	r3, [r7, #16]
 800d68a:	e00a      	b.n	800d6a2 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	429a      	cmp	r2, r3
 800d694:	d102      	bne.n	800d69c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	617b      	str	r3, [r7, #20]
                break;
 800d69a:	e006      	b.n	800d6aa <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d1f0      	bne.n	800d68c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800d6aa:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b086      	sub	sp, #24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	617b      	str	r3, [r7, #20]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	4810      	ldr	r0, [pc, #64]	@ (800d704 <pxUDPSocketLookup+0x50>)
 800d6c4:	f7ff ffcc 	bl	800d660 <pxListFindListItemWithValue>
 800d6c8:	6138      	str	r0, [r7, #16]

    if( pxListItem != NULL )
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d013      	beq.n	800d6f8 <pxUDPSocketLookup+0x44>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	617b      	str	r3, [r7, #20]
        configASSERT( pxSocket != NULL );
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10d      	bne.n	800d6f8 <pxUDPSocketLookup+0x44>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e0:	b672      	cpsid	i
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	b662      	cpsie	i
 800d6f0:	60fb      	str	r3, [r7, #12]
}
 800d6f2:	bf00      	nop
 800d6f4:	bf00      	nop
 800d6f6:	e7fd      	b.n	800d6f4 <pxUDPSocketLookup+0x40>
    }

    return pxSocket;
 800d6f8:	697b      	ldr	r3, [r7, #20]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	20002644 	.word	0x20002644

0800d708 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800d708:	b480      	push	{r7}
 800d70a:	b08b      	sub	sp, #44	@ 0x2c
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800d716:	1d3b      	adds	r3, r7, #4
 800d718:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800d71e:	2300      	movs	r3, #0
 800d720:	627b      	str	r3, [r7, #36]	@ 0x24
 800d722:	e062      	b.n	800d7ea <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d728:	4413      	add	r3, r2
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800d72e:	2302      	movs	r3, #2
 800d730:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800d732:	7ffa      	ldrb	r2, [r7, #31]
 800d734:	4b32      	ldr	r3, [pc, #200]	@ (800d800 <FreeRTOS_inet_ntoa+0xf8>)
 800d736:	fba3 1302 	umull	r1, r3, r3, r2
 800d73a:	08d9      	lsrs	r1, r3, #3
 800d73c:	460b      	mov	r3, r1
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	440b      	add	r3, r1
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	1ad3      	subs	r3, r2, r3
 800d746:	b2d9      	uxtb	r1, r3
 800d748:	f107 020c 	add.w	r2, r7, #12
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	4413      	add	r3, r2
 800d750:	460a      	mov	r2, r1
 800d752:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800d754:	7ffb      	ldrb	r3, [r7, #31]
 800d756:	4a2a      	ldr	r2, [pc, #168]	@ (800d800 <FreeRTOS_inet_ntoa+0xf8>)
 800d758:	fba2 2303 	umull	r2, r3, r2, r3
 800d75c:	08db      	lsrs	r3, r3, #3
 800d75e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d003      	beq.n	800d76e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	3b01      	subs	r3, #1
 800d76a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800d76c:	e7e1      	b.n	800d732 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800d76e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800d770:	7ffb      	ldrb	r3, [r7, #31]
 800d772:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800d774:	2300      	movs	r3, #0
 800d776:	61bb      	str	r3, [r7, #24]
 800d778:	e009      	b.n	800d78e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800d77a:	f107 020c 	add.w	r2, r7, #12
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	4413      	add	r3, r2
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d106      	bne.n	800d796 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	3301      	adds	r3, #1
 800d78c:	61bb      	str	r3, [r7, #24]
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	2b01      	cmp	r3, #1
 800d792:	d9f2      	bls.n	800d77a <FreeRTOS_inet_ntoa+0x72>
 800d794:	e012      	b.n	800d7bc <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800d796:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800d798:	e010      	b.n	800d7bc <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800d79a:	f107 020c 	add.w	r2, r7, #12
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	440b      	add	r3, r1
 800d7aa:	3230      	adds	r2, #48	@ 0x30
 800d7ac:	b2d2      	uxtb	r2, r2
 800d7ae:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800d7b0:	6a3b      	ldr	r3, [r7, #32]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	61bb      	str	r3, [r7, #24]
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d9eb      	bls.n	800d79a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d805      	bhi.n	800d7d4 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800d7c8:	683a      	ldr	r2, [r7, #0]
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	222e      	movs	r2, #46	@ 0x2e
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	e004      	b.n	800d7de <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800d7d4:	683a      	ldr	r2, [r7, #0]
 800d7d6:	6a3b      	ldr	r3, [r7, #32]
 800d7d8:	4413      	add	r3, r2
 800d7da:	2200      	movs	r2, #0
 800d7dc:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ec:	2b03      	cmp	r3, #3
 800d7ee:	d999      	bls.n	800d724 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800d7f0:	693b      	ldr	r3, [r7, #16]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	372c      	adds	r7, #44	@ 0x2c
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop
 800d800:	cccccccd 	.word	0xcccccccd

0800d804 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2b02      	cmp	r3, #2
 800d816:	d106      	bne.n	800d826 <FreeRTOS_inet_ntop+0x22>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	6879      	ldr	r1, [r7, #4]
 800d81c:	68b8      	ldr	r0, [r7, #8]
 800d81e:	f7fe fbe3 	bl	800bfe8 <FreeRTOS_inet_ntop4>
 800d822:	6178      	str	r0, [r7, #20]
                break;
 800d824:	e002      	b.n	800d82c <FreeRTOS_inet_ntop+0x28>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800d826:	2300      	movs	r3, #0
 800d828:	617b      	str	r3, [r7, #20]
            break;
 800d82a:	bf00      	nop
    }

    return pcResult;
 800d82c:	697b      	ldr	r3, [r7, #20]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800d836:	b480      	push	{r7}
 800d838:	b085      	sub	sp, #20
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	7a1b      	ldrb	r3, [r3, #8]
 800d848:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10e      	bne.n	800d870 <FreeRTOS_GetLocalAddress+0x3a>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case pdFALSE_UNSIGNED:
                pxAddress->sin_family = FREERTOS_AF_INET;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2202      	movs	r2, #2
 800d856:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2218      	movs	r2, #24
 800d85c:	701a      	strb	r2, [r3, #0]
                /* IP address of local machine. */
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	609a      	str	r2, [r3, #8]

                /* Local port on this machine. */
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	805a      	strh	r2, [r3, #2]
                break;
 800d86e:	e000      	b.n	800d872 <FreeRTOS_GetLocalAddress+0x3c>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800d870:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800d872:	2318      	movs	r3, #24
}
 800d874:	4618      	mov	r0, r3
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d006      	beq.n	800d89e <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d894:	2300      	movs	r3, #0
 800d896:	2200      	movs	r2, #0
 800d898:	2100      	movs	r1, #0
 800d89a:	f007 fddd 	bl	8015458 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

    #if ( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
    {
        if( pxSocket->pxUserWakeCallback != NULL )
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d003      	beq.n	800d8ae <vSocketWakeUpUser+0x2e>
        {
            pxSocket->pxUserWakeCallback( pxSocket );
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	4798      	blx	r3
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d015      	beq.n	800d8e2 <vSocketWakeUpUser+0x62>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	0a1b      	lsrs	r3, r3, #8
 800d8bc:	f003 030f 	and.w	r3, r3, #15
 800d8c0:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00c      	beq.n	800d8e2 <vSocketWakeUpUser+0x62>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	64da      	str	r2, [r3, #76]	@ 0x4c
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68f9      	ldr	r1, [r7, #12]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f007 fa94 	bl	8014e0a <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00b      	beq.n	800d90e <vSocketWakeUpUser+0x8e>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d007      	beq.n	800d90e <vSocketWakeUpUser+0x8e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685a      	ldr	r2, [r3, #4]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4619      	mov	r1, r3
 800d908:	4610      	mov	r0, r2
 800d90a:	f007 fa7e 	bl	8014e0a <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	601a      	str	r2, [r3, #0]
}
 800d914:	bf00      	nop
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800d92e:	2201      	movs	r2, #1
 800d930:	2106      	movs	r1, #6
 800d932:	68b8      	ldr	r0, [r7, #8]
 800d934:	f7fe fd92 	bl	800c45c <prvValidSocket>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d103      	bne.n	800d946 <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800d93e:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	e056      	b.n	800d9f4 <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d008      	beq.n	800d962 <FreeRTOS_listen+0x46>
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d956:	2b08      	cmp	r3, #8
 800d958:	d003      	beq.n	800d962 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800d95a:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	e048      	b.n	800d9f4 <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800d962:	6839      	ldr	r1, [r7, #0]
 800d964:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800d968:	f7fd ffd4 	bl	800b914 <FreeRTOS_min_int32>
 800d96c:	4603      	mov	r3, r0
 800d96e:	b29a      	uxth	r2, r3
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d97c:	f003 0308 	and.w	r3, r3, #8
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d032      	beq.n	800d9ec <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d005      	beq.n	800d99c <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d996:	4618      	mov	r0, r3
 800d998:	f000 fd65 	bl	800e466 <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d005      	beq.n	800d9b2 <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 fd5a 	bl	800e466 <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	33ae      	adds	r3, #174	@ 0xae
 800d9b6:	225a      	movs	r2, #90	@ 0x5a
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f00b f8d2 	bl	8018b64 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800d9c6:	22c0      	movs	r2, #192	@ 0xc0
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f00b f8ca 	bl	8018b64 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	336c      	adds	r3, #108	@ 0x6c
 800d9d4:	2204      	movs	r2, #4
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f00b f8c3 	bl	8018b64 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d9e4:	f043 0308 	orr.w	r3, r3, #8
 800d9e8:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800d9ec:	2101      	movs	r1, #1
 800d9ee:	68b8      	ldr	r0, [r7, #8]
 800d9f0:	f000 ffae 	bl	800e950 <vTCPStateChange>
        }

        return xResult;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
    }
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
	...

0800da00 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800da00:	b580      	push	{r7, lr}
 800da02:	b08a      	sub	sp, #40	@ 0x28
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800da08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800da0c:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800da0e:	f008 fe0f 	bl	8016630 <xTaskGetTickCount>
 800da12:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800da14:	4b32      	ldr	r3, [pc, #200]	@ (800dae0 <xTCPTimerCheck+0xe0>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	69ba      	ldr	r2, [r7, #24]
 800da1a:	1ad3      	subs	r3, r2, r3
 800da1c:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800da1e:	4b31      	ldr	r3, [pc, #196]	@ (800dae4 <xTCPTimerCheck+0xe4>)
 800da20:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800da22:	4b31      	ldr	r3, [pc, #196]	@ (800dae8 <xTCPTimerCheck+0xe8>)
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800da28:	4a2d      	ldr	r2, [pc, #180]	@ (800dae0 <xTCPTimerCheck+0xe0>)
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d14b      	bne.n	800dacc <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800da34:	2301      	movs	r3, #1
 800da36:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800da38:	e048      	b.n	800dacc <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d03a      	beq.n	800dac6 <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800da56:	461a      	mov	r2, r3
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d20a      	bcs.n	800da74 <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	b29b      	uxth	r3, r3
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 800da72:	e00a      	b.n	800da8a <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	2200      	movs	r2, #0
 800da78:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                xRc = xTCPSocketCheck( pxSocket );
 800da7c:	6938      	ldr	r0, [r7, #16]
 800da7e:	f000 fe9d 	bl	800e7bc <xTCPSocketCheck>
 800da82:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	db1f      	blt.n	800daca <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d008      	beq.n	800daa4 <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d003      	beq.n	800daa0 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800da98:	6938      	ldr	r0, [r7, #16]
 800da9a:	f7ff fef1 	bl	800d880 <vSocketWakeUpUser>
 800da9e:	e001      	b.n	800daa4 <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00e      	beq.n	800dacc <xTCPTimerCheck+0xcc>
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800dab4:	461a      	mov	r2, r3
 800dab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab8:	4293      	cmp	r3, r2
 800daba:	d907      	bls.n	800dacc <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800dac2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dac4:	e002      	b.n	800dacc <xTCPTimerCheck+0xcc>
                continue;
 800dac6:	bf00      	nop
 800dac8:	e000      	b.n	800dacc <xTCPTimerCheck+0xcc>
                    continue;
 800daca:	bf00      	nop
        while( pxIterator != pxEnd )
 800dacc:	69fa      	ldr	r2, [r7, #28]
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d1b2      	bne.n	800da3a <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800dad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800dad6:	4618      	mov	r0, r3
 800dad8:	3728      	adds	r7, #40	@ 0x28
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	2000266c 	.word	0x2000266c
 800dae4:	20002660 	.word	0x20002660
 800dae8:	20002658 	.word	0x20002658

0800daec <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800daec:	b082      	sub	sp, #8
 800daee:	b480      	push	{r7}
 800daf0:	b089      	sub	sp, #36	@ 0x24
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
 800daf8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800dafc:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800db00:	2300      	movs	r3, #0
 800db02:	61bb      	str	r3, [r7, #24]
 800db04:	2300      	movs	r3, #0
 800db06:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800db08:	4b20      	ldr	r3, [pc, #128]	@ (800db8c <pxTCPSocketLookup+0xa0>)
 800db0a:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800db0c:	4b20      	ldr	r3, [pc, #128]	@ (800db90 <pxTCPSocketLookup+0xa4>)
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	61fb      	str	r3, [r7, #28]
 800db12:	e027      	b.n	800db64 <pxTCPSocketLookup+0x78>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	b29b      	uxth	r3, r3
 800db22:	429a      	cmp	r2, r3
 800db24:	d11b      	bne.n	800db5e <pxTCPSocketLookup+0x72>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d102      	bne.n	800db36 <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	617b      	str	r3, [r7, #20]
 800db34:	e013      	b.n	800db5e <pxTCPSocketLookup+0x72>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800db3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db3e:	b29b      	uxth	r3, r3
 800db40:	429a      	cmp	r2, r3
 800db42:	d10c      	bne.n	800db5e <pxTCPSocketLookup+0x72>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800db44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db46:	2b00      	cmp	r3, #0
 800db48:	d106      	bne.n	800db58 <pxTCPSocketLookup+0x6c>
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800db4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db50:	429a      	cmp	r2, r3
 800db52:	d101      	bne.n	800db58 <pxTCPSocketLookup+0x6c>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d107      	bne.n	800db6e <pxTCPSocketLookup+0x82>
             pxIterator = listGET_NEXT( pxIterator ) )
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800db64:	69fa      	ldr	r2, [r7, #28]
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d1d3      	bne.n	800db14 <pxTCPSocketLookup+0x28>
 800db6c:	e000      	b.n	800db70 <pxTCPSocketLookup+0x84>
                    {
                        break;
 800db6e:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <pxTCPSocketLookup+0x8e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800db7a:	69bb      	ldr	r3, [r7, #24]
    }
 800db7c:	4618      	mov	r0, r3
 800db7e:	3724      	adds	r7, #36	@ 0x24
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	b002      	add	sp, #8
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	20002660 	.word	0x20002660
 800db90:	20002658 	.word	0x20002658

0800db94 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800db94:	b580      	push	{r7, lr}
 800db96:	b088      	sub	sp, #32
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d048      	beq.n	800dc36 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800dba4:	2314      	movs	r3, #20
 800dba6:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800dba8:	2350      	movs	r3, #80	@ 0x50
 800dbaa:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
 800dbb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbbc:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00f      	beq.n	800dbe4 <prvTCPCreateStream+0x50>
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	2b04      	cmp	r3, #4
 800dbc8:	d80c      	bhi.n	800dbe4 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	4a37      	ldr	r2, [pc, #220]	@ (800dcac <prvTCPCreateStream+0x118>)
 800dbd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dbd4:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	4a34      	ldr	r2, [pc, #208]	@ (800dcac <prvTCPCreateStream+0x118>)
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	4413      	add	r3, r2
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dbea:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10c      	bne.n	800dc10 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dbfc:	69ba      	ldr	r2, [r7, #24]
 800dbfe:	fb02 f303 	mul.w	r3, r2, r3
 800dc02:	4a2b      	ldr	r2, [pc, #172]	@ (800dcb0 <prvTCPCreateStream+0x11c>)
 800dc04:	fba2 2303 	umull	r2, r3, r2, r3
 800dc08:	095a      	lsrs	r2, r3, #5
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d111      	bne.n	800dc3e <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc20:	697a      	ldr	r2, [r7, #20]
 800dc22:	fb02 f303 	mul.w	r3, r2, r3
 800dc26:	4a22      	ldr	r2, [pc, #136]	@ (800dcb0 <prvTCPCreateStream+0x11c>)
 800dc28:	fba2 2303 	umull	r2, r3, r2, r3
 800dc2c:	095a      	lsrs	r2, r3, #5
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800dc34:	e003      	b.n	800dc3e <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dc3c:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	3304      	adds	r3, #4
 800dc42:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	f023 0303 	bic.w	r3, r3, #3
 800dc4a:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	3314      	adds	r3, #20
 800dc50:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f00a fae8 	bl	8018228 <pvPortMalloc>
 800dc58:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10b      	bne.n	800dc78 <prvTCPCreateStream+0xe4>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800dc66:	f043 0308 	orr.w	r3, r3, #8
 800dc6a:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800dc6e:	2108      	movs	r1, #8
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fe6d 	bl	800e950 <vTCPStateChange>
 800dc76:	e013      	b.n	800dca0 <prvTCPCreateStream+0x10c>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800dc78:	2214      	movs	r2, #20
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	68b8      	ldr	r0, [r7, #8]
 800dc7e:	f00a ff71 	bl	8018b64 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	69fa      	ldr	r2, [r7, #28]
 800dc86:	611a      	str	r2, [r3, #16]
            if( xTCPWindowLoggingLevel != 0 )
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
            }

            if( xIsInputStream != 0 )
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d004      	beq.n	800dc98 <prvTCPCreateStream+0x104>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800dc96:	e003      	b.n	800dca0 <prvTCPCreateStream+0x10c>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	68ba      	ldr	r2, [r7, #8]
 800dc9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            }
        }

        return pxBuffer;
 800dca0:	68bb      	ldr	r3, [r7, #8]
    }
 800dca2:	4618      	mov	r0, r3
 800dca4:	3720      	adds	r7, #32
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	08019eb0 	.word	0x08019eb0
 800dcb0:	51eb851f 	.word	0x51eb851f

0800dcb4 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b08a      	sub	sp, #40	@ 0x28
 800dcb8:	af02      	add	r7, sp, #8
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d006      	beq.n	800dcdc <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	61fb      	str	r3, [r7, #28]
 800dcda:	e009      	b.n	800dcf0 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dce2:	f107 0214 	add.w	r2, r7, #20
 800dce6:	4611      	mov	r1, r2
 800dce8:	4618      	mov	r0, r3
 800dcea:	f000 fc18 	bl	800e51e <uxStreamBufferGetPtr>
 800dcee:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d011      	beq.n	800dd1a <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800dcfc:	6979      	ldr	r1, [r7, #20]
 800dcfe:	69ba      	ldr	r2, [r7, #24]
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	69bb      	ldr	r3, [r7, #24]
 800dd10:	2200      	movs	r2, #0
 800dd12:	2100      	movs	r1, #0
 800dd14:	f000 fca3 	bl	800e65e <uxStreamBufferGet>
        {
 800dd18:	e7d4      	b.n	800dcc4 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800dd1a:	bf00      	nop
 800dd1c:	3720      	adds	r7, #32
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800dd30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d121      	bne.n	800dd7e <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 fb5d 	bl	800e400 <uxStreamBufferFrontSpace>
 800dd46:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d814      	bhi.n	800dd7e <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800dd5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd5e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800dd68:	f043 0301 	orr.w	r3, r3, #1
 800dd6c:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800dd78:	2007      	movs	r0, #7
 800dd7a:	f7fc fcad 	bl	800a6d8 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f043 0201 	orr.w	r2, r3, #1
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd8e:	f003 0301 	and.w	r3, r3, #1
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d005      	beq.n	800dda2 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800dda2:	bf00      	nop
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b088      	sub	sp, #32
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	60f8      	str	r0, [r7, #12]
 800ddb2:	60b9      	str	r1, [r7, #8]
 800ddb4:	607a      	str	r2, [r7, #4]
 800ddb6:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ddbe:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10a      	bne.n	800dde8 <lTCPAddRxdata+0x3e>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f7ff fedd 	bl	800db94 <prvTCPCreateStream>
 800ddda:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d102      	bne.n	800dde8 <lTCPAddRxdata+0x3e>
            {
                xResult = -1;
 800dde2:	f04f 33ff 	mov.w	r3, #4294967295
 800dde6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	db29      	blt.n	800de42 <lTCPAddRxdata+0x98>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00f      	beq.n	800de14 <lTCPAddRxdata+0x6a>
 800ddf4:	69f8      	ldr	r0, [r7, #28]
 800ddf6:	f000 fb14 	bl	800e422 <uxStreamBufferGetSize>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d109      	bne.n	800de14 <lTCPAddRxdata+0x6a>
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d106      	bne.n	800de14 <lTCPAddRxdata+0x6a>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <lTCPAddRxdata+0x6a>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800de10:	2300      	movs	r3, #0
 800de12:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	68b9      	ldr	r1, [r7, #8]
 800de1a:	69f8      	ldr	r0, [r7, #28]
 800de1c:	f000 fb9f 	bl	800e55e <uxStreamBufferAdd>
 800de20:	4603      	mov	r3, r0
 800de22:	61bb      	str	r3, [r7, #24]
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10b      	bne.n	800de42 <lTCPAddRxdata+0x98>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d005      	beq.n	800de3c <lTCPAddRxdata+0x92>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	6979      	ldr	r1, [r7, #20]
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f7ff ff3d 	bl	800dcb4 <vTCPAddRxdata_Callback>
 800de3a:	e002      	b.n	800de42 <lTCPAddRxdata+0x98>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f7ff ff70 	bl	800dd22 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800de42:	69bb      	ldr	r3, [r7, #24]
    }
 800de44:	4618      	mov	r0, r3
 800de46:	3720      	adds	r7, #32
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800de5e:	2b06      	cmp	r3, #6
 800de60:	d003      	beq.n	800de6a <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800de62:	f06f 0315 	mvn.w	r3, #21
 800de66:	60fb      	str	r3, [r7, #12]
 800de68:	e011      	b.n	800de8e <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800de70:	2b00      	cmp	r3, #0
 800de72:	d008      	beq.n	800de86 <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800de7a:	4618      	mov	r0, r3
 800de7c:	f000 faaf 	bl	800e3de <uxStreamBufferGetSpace>
 800de80:	4603      	mov	r3, r0
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	e003      	b.n	800de8e <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de8c:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800de8e:	68fb      	ldr	r3, [r7, #12]
    }
 800de90:	4618      	mov	r0, r3
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800deaa:	2b06      	cmp	r3, #6
 800deac:	d003      	beq.n	800deb6 <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800deae:	f06f 0315 	mvn.w	r3, #21
 800deb2:	60fb      	str	r3, [r7, #12]
 800deb4:	e00f      	b.n	800ded6 <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800debc:	2b00      	cmp	r3, #0
 800debe:	d008      	beq.n	800ded2 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 faab 	bl	800e422 <uxStreamBufferGetSize>
 800decc:	4603      	mov	r3, r0
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	e001      	b.n	800ded6 <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800ded2:	2300      	movs	r3, #0
 800ded4:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800ded6:	68fb      	ldr	r3, [r7, #12]
    }
 800ded8:	4618      	mov	r0, r3
 800deda:	3710      	adds	r7, #16
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800deec:	2300      	movs	r3, #0
 800deee:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800def6:	2b06      	cmp	r3, #6
 800def8:	d003      	beq.n	800df02 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800defa:	f06f 0315 	mvn.w	r3, #21
 800defe:	60fb      	str	r3, [r7, #12]
 800df00:	e00b      	b.n	800df1a <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800df08:	2b04      	cmp	r3, #4
 800df0a:	d906      	bls.n	800df1a <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800df12:	2b07      	cmp	r3, #7
 800df14:	d801      	bhi.n	800df1a <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800df16:	2301      	movs	r3, #1
 800df18:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800df1a:	68fb      	ldr	r3, [r7, #12]
    }
 800df1c:	4618      	mov	r0, r3
 800df1e:	3714      	adds	r7, #20
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800df3a:	2b06      	cmp	r3, #6
 800df3c:	d003      	beq.n	800df46 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800df3e:	f06f 0315 	mvn.w	r3, #21
 800df42:	60fb      	str	r3, [r7, #12]
 800df44:	e00f      	b.n	800df66 <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d008      	beq.n	800df62 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800df56:	4618      	mov	r0, r3
 800df58:	f000 fa63 	bl	800e422 <uxStreamBufferGetSize>
 800df5c:	4603      	mov	r3, r0
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	e001      	b.n	800df66 <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800df66:	68fb      	ldr	r3, [r7, #12]
    }
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800df78:	2300      	movs	r3, #0
 800df7a:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df82:	d004      	beq.n	800df8e <xSocketValid+0x1e>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d001      	beq.n	800df8e <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800df8a:	2301      	movs	r3, #1
 800df8c:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800df8e:	68fb      	ldr	r3, [r7, #12]
}
 800df90:	4618      	mov	r0, r3
 800df92:	3714      	adds	r7, #20
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b098      	sub	sp, #96	@ 0x60
 800dfa0:	af02      	add	r7, sp, #8
 800dfa2:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800dfa4:	2320      	movs	r3, #32
 800dfa6:	657b      	str	r3, [r7, #84]	@ 0x54

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800dfa8:	f008 fb42 	bl	8016630 <xTaskGetTickCount>
 800dfac:	4602      	mov	r2, r0
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	653b      	str	r3, [r7, #80]	@ 0x50
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800dfb8:	f107 030c 	add.w	r3, r7, #12
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	605a      	str	r2, [r3, #4]
 800dfc2:	609a      	str	r2, [r3, #8]
 800dfc4:	60da      	str	r2, [r3, #12]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d131      	bne.n	800e034 <vTCPNetStat_TCPSocket+0x98>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800dfd6:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800dfde:	f107 000c 	add.w	r0, r7, #12
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	4a21      	ldr	r2, [pc, #132]	@ (800e06c <vTCPNetStat_TCPSocket+0xd0>)
 800dfe8:	2110      	movs	r1, #16
 800dfea:	f00a fc83 	bl	80188f4 <sniprintf>
 800dfee:	64f8      	str	r0, [r7, #76]	@ 0x4c
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800dff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	da0d      	bge.n	800e012 <vTCPNetStat_TCPSocket+0x76>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	b672      	cpsid	i
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	b662      	cpsie	i
 800e00a:	64bb      	str	r3, [r7, #72]	@ 0x48
}
 800e00c:	bf00      	nop
 800e00e:	bf00      	nop
 800e010:	e7fd      	b.n	800e00e <vTCPNetStat_TCPSocket+0x72>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800e012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e014:	2b0f      	cmp	r3, #15
 800e016:	dd0d      	ble.n	800e034 <vTCPNetStat_TCPSocket+0x98>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e01c:	b672      	cpsid	i
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	b662      	cpsie	i
 800e02c:	647b      	str	r3, [r7, #68]	@ 0x44
}
 800e02e:	bf00      	nop
 800e030:	bf00      	nop
 800e032:	e7fd      	b.n	800e030 <vTCPNetStat_TCPSocket+0x94>
        }

        if( age > 999999U )
 800e034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e036:	4a0e      	ldr	r2, [pc, #56]	@ (800e070 <vTCPNetStat_TCPSocket+0xd4>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d901      	bls.n	800e040 <vTCPNetStat_TCPSocket+0xa4>
        {
            age = 999999U;
 800e03c:	4b0c      	ldr	r3, [pc, #48]	@ (800e070 <vTCPNetStat_TCPSocket+0xd4>)
 800e03e:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	7a1b      	ldrb	r3, [r3, #8]
 800e044:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d108      	bne.n	800e060 <vTCPNetStat_TCPSocket+0xc4>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e052:	f107 001c 	add.w	r0, r7, #28
 800e056:	4a07      	ldr	r2, [pc, #28]	@ (800e074 <vTCPNetStat_TCPSocket+0xd8>)
 800e058:	2128      	movs	r1, #40	@ 0x28
 800e05a:	f00a fc4b 	bl	80188f4 <sniprintf>
                    break;
 800e05e:	e000      	b.n	800e062 <vTCPNetStat_TCPSocket+0xc6>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800e060:	bf00      	nop
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800e062:	bf00      	nop
 800e064:	3758      	adds	r7, #88	@ 0x58
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	08019d60 	.word	0x08019d60
 800e070:	000f423f 	.word	0x000f423f
 800e074:	08019d68 	.word	0x08019d68

0800e078 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af00      	add	r7, sp, #0
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800e082:	f004 fd75 	bl	8012b70 <uxGetMinimumFreeNetworkBuffers>
 800e086:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800e088:	f004 fd66 	bl	8012b58 <uxGetNumberOfFreeNetworkBuffers>
 800e08c:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800e08e:	4b17      	ldr	r3, [pc, #92]	@ (800e0ec <vTCPNetStat+0x74>)
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e096:	d125      	bne.n	800e0e4 <vTCPNetStat+0x6c>
        }
        else
        {
            /* Casting a "MiniListItem_t" to a "ListItem_t".
             * This is safe because only its address is being accessed, not its fields. */
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800e098:	4b15      	ldr	r3, [pc, #84]	@ (800e0f0 <vTCPNetStat+0x78>)
 800e09a:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800e09c:	4b15      	ldr	r3, [pc, #84]	@ (800e0f4 <vTCPNetStat+0x7c>)
 800e09e:	60bb      	str	r3, [r7, #8]

            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e0a0:	4b12      	ldr	r3, [pc, #72]	@ (800e0ec <vTCPNetStat+0x74>)
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	61fb      	str	r3, [r7, #28]
 800e0a6:	e00b      	b.n	800e0c0 <vTCPNetStat+0x48>
                 pxIterator != pxEndTCP;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff ff74 	bl	800df9c <vTCPNetStat_TCPSocket>
                count++;
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 800e0c0:	69fa      	ldr	r2, [r7, #28]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d1ef      	bne.n	800e0a8 <vTCPNetStat+0x30>
            }

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800e0c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f8 <vTCPNetStat+0x80>)
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	61fb      	str	r3, [r7, #28]
 800e0ce:	e005      	b.n	800e0dc <vTCPNetStat+0x64>
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                /* Local port on this machine */
                FreeRTOS_printf( ( "UDP Port %5u\n",
                                   FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
                count++;
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 800e0dc:	69fa      	ldr	r2, [r7, #28]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d1f5      	bne.n	800e0d0 <vTCPNetStat+0x58>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800e0e4:	bf00      	nop
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	20002658 	.word	0x20002658
 800e0f0:	20002660 	.word	0x20002660
 800e0f4:	2000264c 	.word	0x2000264c
 800e0f8:	20002644 	.word	0x20002644

0800e0fc <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 800e104:	2300      	movs	r3, #0
 800e106:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 800e108:	2300      	movs	r3, #0
 800e10a:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e112:	f003 0304 	and.w	r3, r3, #4
 800e116:	b2db      	uxtb	r3, r3
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d109      	bne.n	800e130 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e122:	f003 0302 	and.w	r3, r3, #2
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d101      	bne.n	800e130 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 800e12c:	2301      	movs	r3, #1
 800e12e:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d03a      	beq.n	800e1b2 <vSocketSelectTCP+0xb6>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e142:	2b01      	cmp	r3, #1
 800e144:	d113      	bne.n	800e16e <vSocketSelectTCP+0x72>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d030      	beq.n	800e1b2 <vSocketSelectTCP+0xb6>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e156:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e15a:	f003 0302 	and.w	r3, r3, #2
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	2b00      	cmp	r3, #0
 800e162:	d026      	beq.n	800e1b2 <vSocketSelectTCP+0xb6>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	f043 0301 	orr.w	r3, r3, #1
 800e16a:	613b      	str	r3, [r7, #16]
 800e16c:	e021      	b.n	800e1b2 <vSocketSelectTCP+0xb6>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e174:	f003 0308 	and.w	r3, r3, #8
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00c      	beq.n	800e198 <vSocketSelectTCP+0x9c>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e184:	f003 0302 	and.w	r3, r3, #2
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d004      	beq.n	800e198 <vSocketSelectTCP+0x9c>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f043 0301 	orr.w	r3, r3, #1
 800e194:	613b      	str	r3, [r7, #16]
 800e196:	e00c      	b.n	800e1b2 <vSocketSelectTCP+0xb6>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d009      	beq.n	800e1b2 <vSocketSelectTCP+0xb6>
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7ff fec2 	bl	800df28 <FreeRTOS_rx_size>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	dd03      	ble.n	800e1b2 <vSocketSelectTCP+0xb6>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	f043 0301 	orr.w	r3, r3, #1
 800e1b0:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1b6:	f003 0304 	and.w	r3, r3, #4
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00d      	beq.n	800e1da <vSocketSelectTCP+0xde>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e1c4:	2b08      	cmp	r3, #8
 800e1c6:	d004      	beq.n	800e1d2 <vSocketSelectTCP+0xd6>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d103      	bne.n	800e1da <vSocketSelectTCP+0xde>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	f043 0304 	orr.w	r3, r3, #4
 800e1d8:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1de:	f003 0302 	and.w	r3, r3, #2
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d034      	beq.n	800e250 <vSocketSelectTCP+0x154>
            {
                BaseType_t bMatch = pdFALSE;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d007      	beq.n	800e200 <vSocketSelectTCP+0x104>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7ff fe2b 	bl	800de4c <FreeRTOS_tx_space>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	dd01      	ble.n	800e200 <vSocketSelectTCP+0x104>
                    {
                        bMatch = pdTRUE;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d11d      	bne.n	800e242 <vSocketSelectTCP+0x146>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e20c:	f003 0308 	and.w	r3, r3, #8
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d015      	beq.n	800e242 <vSocketSelectTCP+0x146>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800e21c:	2b04      	cmp	r3, #4
 800e21e:	d910      	bls.n	800e242 <vSocketSelectTCP+0x146>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e226:	f003 0310 	and.w	r3, r3, #16
 800e22a:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d108      	bne.n	800e242 <vSocketSelectTCP+0x146>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e236:	f043 0310 	orr.w	r3, r3, #16
 800e23a:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                        bMatch = pdTRUE;
 800e23e:	2301      	movs	r3, #1
 800e240:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d003      	beq.n	800e250 <vSocketSelectTCP+0x154>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	f043 0302 	orr.w	r3, r3, #2
 800e24e:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 800e250:	693b      	ldr	r3, [r7, #16]
        }
 800e252:	4618      	mov	r0, r3
 800e254:	3718      	adds	r7, #24
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
	...

0800e25c <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b08c      	sub	sp, #48	@ 0x30
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800e264:	2301      	movs	r3, #1
 800e266:	617b      	str	r3, [r7, #20]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	627b      	str	r3, [r7, #36]	@ 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800e26c:	2300      	movs	r3, #0
 800e26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e270:	e047      	b.n	800e302 <vSocketSelect+0xa6>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            const List_t * pxList;

            if( xRound == 0 )
 800e272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e274:	2b00      	cmp	r3, #0
 800e276:	d104      	bne.n	800e282 <vSocketSelect+0x26>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 800e278:	4b36      	ldr	r3, [pc, #216]	@ (800e354 <vSocketSelect+0xf8>)
 800e27a:	61fb      	str	r3, [r7, #28]
                pxList = &xBoundUDPSocketsList;
 800e27c:	4b36      	ldr	r3, [pc, #216]	@ (800e358 <vSocketSelect+0xfc>)
 800e27e:	61bb      	str	r3, [r7, #24]
 800e280:	e003      	b.n	800e28a <vSocketSelect+0x2e>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800e282:	4b36      	ldr	r3, [pc, #216]	@ (800e35c <vSocketSelect+0x100>)
 800e284:	61fb      	str	r3, [r7, #28]
                    pxList = &xBoundTCPSocketsList;
 800e286:	4b36      	ldr	r3, [pc, #216]	@ (800e360 <vSocketSelect+0x104>)
 800e288:	61bb      	str	r3, [r7, #24]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_HEAD_ENTRY( pxList );
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	623b      	str	r3, [r7, #32]
 800e290:	e030      	b.n	800e2f4 <vSocketSelect+0x98>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e292:	6a3b      	ldr	r3, [r7, #32]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	60fb      	str	r3, [r7, #12]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d124      	bne.n	800e2ec <vSocketSelect+0x90>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	62bb      	str	r3, [r7, #40]	@ 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e2ac:	2b06      	cmp	r3, #6
 800e2ae:	d107      	bne.n	800e2c0 <vSocketSelect+0x64>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f7ff ff23 	bl	800e0fc <vSocketSelectTCP>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2be:	e00d      	b.n	800e2dc <vSocketSelect+0x80>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d007      	beq.n	800e2dc <vSocketSelect+0x80>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d003      	beq.n	800e2dc <vSocketSelect+0x80>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800e2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d6:	f043 0301 	orr.w	r3, r3, #1
 800e2da:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2e0:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800e2e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2ea:	e000      	b.n	800e2ee <vSocketSelect+0x92>
                    continue;
 800e2ec:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 800e2f4:	6a3a      	ldr	r2, [r7, #32]
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d1ca      	bne.n	800e292 <vSocketSelect+0x36>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800e2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fe:	3301      	adds	r3, #1
 800e300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	429a      	cmp	r2, r3
 800e308:	ddb3      	ble.n	800e272 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2100      	movs	r1, #0
 800e310:	4618      	mov	r0, r3
 800e312:	f006 fd3d 	bl	8014d90 <xEventGroupClearBits>
 800e316:	6138      	str	r0, [r7, #16]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800e318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31a:	43da      	mvns	r2, r3
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	4013      	ands	r3, r2
 800e320:	f003 030f 	and.w	r3, r3, #15
 800e324:	613b      	str	r3, [r7, #16]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d005      	beq.n	800e338 <vSocketSelect+0xdc>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6939      	ldr	r1, [r7, #16]
 800e332:	4618      	mov	r0, r3
 800e334:	f006 fd2c 	bl	8014d90 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e33e:	f043 0310 	orr.w	r3, r3, #16
 800e342:	4619      	mov	r1, r3
 800e344:	4610      	mov	r0, r2
 800e346:	f006 fd60 	bl	8014e0a <xEventGroupSetBits>
    }
 800e34a:	bf00      	nop
 800e34c:	3730      	adds	r7, #48	@ 0x30
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	2000264c 	.word	0x2000264c
 800e358:	20002644 	.word	0x20002644
 800e35c:	20002660 	.word	0x20002660
 800e360:	20002658 	.word	0x20002658

0800e364 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 800e364:	b480      	push	{r7}
 800e366:	b087      	sub	sp, #28
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	441a      	add	r2, r3
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	3b01      	subs	r3, #1
 800e382:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800e384:	697a      	ldr	r2, [r7, #20]
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d303      	bcc.n	800e394 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800e394:	697b      	ldr	r3, [r7, #20]
}
 800e396:	4618      	mov	r0, r3
 800e398:	371c      	adds	r7, #28
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr

0800e3a2 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 800e3a2:	b480      	push	{r7}
 800e3a4:	b087      	sub	sp, #28
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	60f8      	str	r0, [r7, #12]
 800e3aa:	60b9      	str	r1, [r7, #8]
 800e3ac:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 800e3b4:	693a      	ldr	r2, [r7, #16]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	441a      	add	r2, r3
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800e3c0:	697a      	ldr	r2, [r7, #20]
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d303      	bcc.n	800e3d0 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 800e3c8:	697a      	ldr	r2, [r7, #20]
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800e3d0:	697b      	ldr	r3, [r7, #20]
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	371c      	adds	r7, #28
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6899      	ldr	r1, [r3, #8]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7ff ffb7 	bl	800e364 <uxStreamBufferSpace>
 800e3f6:	4603      	mov	r3, r0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	68d9      	ldr	r1, [r3, #12]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	461a      	mov	r2, r3
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f7ff ffa6 	bl	800e364 <uxStreamBufferSpace>
 800e418:	4603      	mov	r3, r0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3708      	adds	r7, #8
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b082      	sub	sp, #8
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6819      	ldr	r1, [r3, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	461a      	mov	r2, r3
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f7ff ffb4 	bl	800e3a2 <uxStreamBufferDistance>
 800e43a:	4603      	mov	r3, r0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6859      	ldr	r1, [r3, #4]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	461a      	mov	r2, r3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7ff ffa3 	bl	800e3a2 <uxStreamBufferDistance>
 800e45c:	4603      	mov	r3, r0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 800e466:	b480      	push	{r7}
 800e468:	b083      	sub	sp, #12
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	605a      	str	r2, [r3, #4]
}
 800e486:	bf00      	nop
 800e488:	370c      	adds	r7, #12
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr

0800e492 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b086      	sub	sp, #24
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
 800e49a:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff ffce 	bl	800e444 <uxStreamBufferMidSpace>
 800e4a8:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 800e4b4:	693a      	ldr	r2, [r7, #16]
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d901      	bls.n	800e4c0 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 800e4c0:	697a      	ldr	r2, [r7, #20]
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 800e4c8:	697a      	ldr	r2, [r7, #20]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d303      	bcc.n	800e4d8 <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 800e4d0:	697a      	ldr	r2, [r7, #20]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	1ad3      	subs	r3, r2, r3
 800e4d6:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	605a      	str	r2, [r3, #4]
}
 800e4de:	bf00      	nop
 800e4e0:	3718      	adds	r7, #24
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 800e4e6:	b480      	push	{r7}
 800e4e8:	b087      	sub	sp, #28
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	60f8      	str	r0, [r7, #12]
 800e4ee:	60b9      	str	r1, [r7, #8]
 800e4f0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	1ad2      	subs	r2, r2, r3
 800e502:	6879      	ldr	r1, [r7, #4]
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	1acb      	subs	r3, r1, r3
 800e508:	429a      	cmp	r2, r3
 800e50a:	d801      	bhi.n	800e510 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 800e50c:	2301      	movs	r3, #1
 800e50e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e510:	697b      	ldr	r3, [r7, #20]
}
 800e512:	4618      	mov	r0, r3
 800e514:	371c      	adds	r7, #28
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr

0800e51e <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 800e51e:	b580      	push	{r7, lr}
 800e520:	b084      	sub	sp, #16
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
 800e526:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7ff ff77 	bl	800e422 <uxStreamBufferGetSize>
 800e534:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f103 0214 	add.w	r2, r3, #20
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	441a      	add	r2, r3
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	691a      	ldr	r2, [r3, #16]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	4619      	mov	r1, r3
 800e54e:	68b8      	ldr	r0, [r7, #8]
 800e550:	f7fd fa00 	bl	800b954 <FreeRTOS_min_size_t>
 800e554:	4603      	mov	r3, r0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b08a      	sub	sp, #40	@ 0x28
 800e562:	af00      	add	r7, sp, #0
 800e564:	60f8      	str	r0, [r7, #12]
 800e566:	60b9      	str	r1, [r7, #8]
 800e568:	607a      	str	r2, [r7, #4]
 800e56a:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f7ff ff36 	bl	800e3de <uxStreamBufferGetSpace>
 800e572:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800e574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d904      	bls.n	800e586 <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 800e57c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	627b      	str	r3, [r7, #36]	@ 0x24
 800e584:	e001      	b.n	800e58a <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 800e586:	2300      	movs	r3, #0
 800e588:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e58e:	f7fd f9e1 	bl	800b954 <FreeRTOS_min_size_t>
 800e592:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d05c      	beq.n	800e654 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00b      	beq.n	800e5c4 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800e5ac:	6a3a      	ldr	r2, [r7, #32]
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 800e5b4:	6a3a      	ldr	r2, [r7, #32]
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d303      	bcc.n	800e5c4 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 800e5bc:	6a3a      	ldr	r2, [r7, #32]
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d021      	beq.n	800e60e <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 800e5ca:	69ba      	ldr	r2, [r7, #24]
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	69f9      	ldr	r1, [r7, #28]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fd f9be 	bl	800b954 <FreeRTOS_min_size_t>
 800e5d8:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) pvPortMemCpyStreamBuffer( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800e5da:	6a3b      	ldr	r3, [r7, #32]
 800e5dc:	3310      	adds	r3, #16
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	6879      	ldr	r1, [r7, #4]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f00a fb96 	bl	8018d1a <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800e5ee:	69fa      	ldr	r2, [r7, #28]
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d90b      	bls.n	800e60e <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) pvPortMemCpyStreamBuffer( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f103 0014 	add.w	r0, r3, #20
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	18d1      	adds	r1, r2, r3
 800e602:	69fa      	ldr	r2, [r7, #28]
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	461a      	mov	r2, r3
 800e60a:	f00a fb86 	bl	8018d1a <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        taskENTER_CRITICAL();
 800e60e:	f009 fcdd 	bl	8017fcc <vPortEnterCritical>
        {
            if( uxOffset == 0U )
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10e      	bne.n	800e636 <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 800e618:	6a3a      	ldr	r2, [r7, #32]
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	4413      	add	r3, r2
 800e61e:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 800e620:	6a3a      	ldr	r2, [r7, #32]
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	429a      	cmp	r2, r3
 800e626:	d303      	bcc.n	800e630 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 800e628:	6a3a      	ldr	r2, [r7, #32]
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6a3a      	ldr	r2, [r7, #32]
 800e634:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	6a3a      	ldr	r2, [r7, #32]
 800e63c:	4619      	mov	r1, r3
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7ff ff51 	bl	800e4e6 <xStreamBufferLessThenEqual>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6a3a      	ldr	r2, [r7, #32]
 800e64e:	60da      	str	r2, [r3, #12]
            }
        }
        taskEXIT_CRITICAL();
 800e650:	f009 fcf2 	bl	8018038 <vPortExitCritical>
    }

    return uxCount;
 800e654:	69fb      	ldr	r3, [r7, #28]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3728      	adds	r7, #40	@ 0x28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b08a      	sub	sp, #40	@ 0x28
 800e662:	af00      	add	r7, sp, #0
 800e664:	60f8      	str	r0, [r7, #12]
 800e666:	60b9      	str	r1, [r7, #8]
 800e668:	607a      	str	r2, [r7, #4]
 800e66a:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7ff fed8 	bl	800e422 <uxStreamBufferGetSize>
 800e672:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 800e674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d904      	bls.n	800e686 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800e67c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	627b      	str	r3, [r7, #36]	@ 0x24
 800e684:	e001      	b.n	800e68a <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800e686:	2300      	movs	r3, #0
 800e688:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e68e:	f7fd f961 	bl	800b954 <FreeRTOS_min_size_t>
 800e692:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d04e      	beq.n	800e738 <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00b      	beq.n	800e6c4 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 800e6ac:	6a3a      	ldr	r2, [r7, #32]
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800e6b4:	6a3a      	ldr	r2, [r7, #32]
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d303      	bcc.n	800e6c4 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 800e6bc:	6a3a      	ldr	r2, [r7, #32]
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d021      	beq.n	800e70e <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 800e6ca:	69ba      	ldr	r2, [r7, #24]
 800e6cc:	6a3b      	ldr	r3, [r7, #32]
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	69f9      	ldr	r1, [r7, #28]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fd f93e 	bl	800b954 <FreeRTOS_min_size_t>
 800e6d8:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) pvPortMemCpyStreamBuffer( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	3310      	adds	r3, #16
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	697a      	ldr	r2, [r7, #20]
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f00a fb16 	bl	8018d1a <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800e6ee:	69fa      	ldr	r2, [r7, #28]
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d90b      	bls.n	800e70e <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) pvPortMemCpyStreamBuffer( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	18d0      	adds	r0, r2, r3
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f103 0114 	add.w	r1, r3, #20
 800e702:	69fa      	ldr	r2, [r7, #28]
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	1ad3      	subs	r3, r2, r3
 800e708:	461a      	mov	r2, r3
 800e70a:	f00a fb06 	bl	8018d1a <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 800e70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e710:	2b00      	cmp	r3, #0
 800e712:	d111      	bne.n	800e738 <uxStreamBufferGet+0xda>
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d10e      	bne.n	800e738 <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800e71a:	6a3a      	ldr	r2, [r7, #32]
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	4413      	add	r3, r2
 800e720:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800e722:	6a3a      	ldr	r2, [r7, #32]
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	429a      	cmp	r2, r3
 800e728:	d303      	bcc.n	800e732 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 800e72a:	6a3a      	ldr	r2, [r7, #32]
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	1ad3      	subs	r3, r2, r3
 800e730:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6a3a      	ldr	r2, [r7, #32]
 800e736:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800e738:	69fb      	ldr	r3, [r7, #28]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3728      	adds	r7, #40	@ 0x28
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
	...

0800e744 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 800e74c:	4b0a      	ldr	r3, [pc, #40]	@ (800e778 <vSocketCloseNextTime+0x34>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d009      	beq.n	800e768 <vSocketCloseNextTime+0x24>
 800e754:	4b08      	ldr	r3, [pc, #32]	@ (800e778 <vSocketCloseNextTime+0x34>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d004      	beq.n	800e768 <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 800e75e:	4b06      	ldr	r3, [pc, #24]	@ (800e778 <vSocketCloseNextTime+0x34>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4618      	mov	r0, r3
 800e764:	f7fe fb9c 	bl	800cea0 <vSocketClose>
        }

        xSocketToClose = pxSocket;
 800e768:	4a03      	ldr	r2, [pc, #12]	@ (800e778 <vSocketCloseNextTime+0x34>)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6013      	str	r3, [r2, #0]
    }
 800e76e:	bf00      	nop
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20002670 	.word	0x20002670

0800e77c <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 800e784:	4b0c      	ldr	r3, [pc, #48]	@ (800e7b8 <vSocketListenNextTime+0x3c>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00e      	beq.n	800e7aa <vSocketListenNextTime+0x2e>
 800e78c:	4b0a      	ldr	r3, [pc, #40]	@ (800e7b8 <vSocketListenNextTime+0x3c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	429a      	cmp	r2, r3
 800e794:	d009      	beq.n	800e7aa <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 800e796:	4b08      	ldr	r3, [pc, #32]	@ (800e7b8 <vSocketListenNextTime+0x3c>)
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	4b07      	ldr	r3, [pc, #28]	@ (800e7b8 <vSocketListenNextTime+0x3c>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	4610      	mov	r0, r2
 800e7a6:	f7ff f8b9 	bl	800d91c <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 800e7aa:	4a03      	ldr	r2, [pc, #12]	@ (800e7b8 <vSocketListenNextTime+0x3c>)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6013      	str	r3, [r2, #0]
    }
 800e7b0:	bf00      	nop
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	20002674 	.word	0x20002674

0800e7bc <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800e7bc:	b590      	push	{r4, r7, lr}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	d907      	bls.n	800e7e6 <xTCPSocketCheck+0x2a>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <xTCPSocketCheck+0x2a>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f002 f97f 	bl	8010ae4 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d035      	beq.n	800e85c <xTCPSocketCheck+0xa0>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e7f6:	f003 0320 	and.w	r3, r3, #32
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d11e      	bne.n	800e83e <xTCPSocketCheck+0x82>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e806:	2b00      	cmp	r3, #0
 800e808:	d011      	beq.n	800e82e <xTCPSocketCheck+0x72>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7fc fb41 	bl	800ae98 <uxIPHeaderSizeSocket>
 800e816:	4603      	mov	r3, r0
 800e818:	f103 0214 	add.w	r2, r3, #20
 800e81c:	2301      	movs	r3, #1
 800e81e:	4621      	mov	r1, r4
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f001 fd78 	bl	8010316 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 fa08 	bl	800ec44 <prvTCPNextTimeout>
 800e834:	4603      	mov	r3, r0
 800e836:	2b01      	cmp	r3, #1
 800e838:	d901      	bls.n	800e83e <xTCPSocketCheck+0x82>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 800e83a:	2301      	movs	r3, #1
 800e83c:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e844:	2b00      	cmp	r3, #0
 800e846:	d009      	beq.n	800e85c <xTCPSocketCheck+0xa0>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e84e:	4618      	mov	r0, r3
 800e850:	f004 f94c 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d113      	bne.n	800e88a <xTCPSocketCheck+0xce>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e868:	2b04      	cmp	r3, #4
 800e86a:	d804      	bhi.n	800e876 <xTCPSocketCheck+0xba>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800e872:	2b02      	cmp	r3, #2
 800e874:	d102      	bne.n	800e87c <xTCPSocketCheck+0xc0>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f001 fcba 	bl	80101f0 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f9e1 	bl	800ec44 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 ff1a 	bl	800f6bc <prvTCPStatusAgeCheck>
 800e888:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 800e88a:	68fb      	ldr	r3, [r7, #12]
    }
 800e88c:	4618      	mov	r0, r3
 800e88e:	3714      	adds	r7, #20
 800e890:	46bd      	mov	sp, r7
 800e892:	bd90      	pop	{r4, r7, pc}

0800e894 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800e89c:	f007 fec8 	bl	8016630 <xTaskGetTickCount>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e8ae:	f023 0304 	bic.w	r3, r3, #4
 800e8b2:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e8bc:	f023 0302 	bic.w	r3, r3, #2
 800e8c0:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800e8cc:	f007 feb0 	bl	8016630 <xTaskGetTickCount>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        ( void ) pxSocket;
    }
 800e8d8:	bf00      	nop
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 800e8e0:	b480      	push	{r7}
 800e8e2:	b087      	sub	sp, #28
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800e8ec:	4b16      	ldr	r3, [pc, #88]	@ (800e948 <vTCPRemoveTCPChild+0x68>)
 800e8ee:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e8f0:	4b16      	ldr	r3, [pc, #88]	@ (800e94c <vTCPRemoveTCPChild+0x6c>)
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 800e8f6:	e01c      	b.n	800e932 <vTCPRemoveTCPChild+0x52>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d012      	beq.n	800e932 <vTCPRemoveTCPChild+0x52>
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e914:	429a      	cmp	r2, r3
 800e916:	d10c      	bne.n	800e932 <vTCPRemoveTCPChild+0x52>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	429a      	cmp	r2, r3
 800e922:	d106      	bne.n	800e932 <vTCPRemoveTCPChild+0x52>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	2200      	movs	r2, #0
 800e928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    xReturn = pdTRUE;
 800e92c:	2301      	movs	r3, #1
 800e92e:	617b      	str	r3, [r7, #20]
                    break;
 800e930:	e003      	b.n	800e93a <vTCPRemoveTCPChild+0x5a>
        while( pxIterator != pxEnd )
 800e932:	693a      	ldr	r2, [r7, #16]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	429a      	cmp	r2, r3
 800e938:	d1de      	bne.n	800e8f8 <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 800e93a:	697b      	ldr	r3, [r7, #20]
    }
 800e93c:	4618      	mov	r0, r3
 800e93e:	371c      	adds	r7, #28
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	20002660 	.word	0x20002660
 800e94c:	20002658 	.word	0x20002658

0800e950 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800e950:	b580      	push	{r7, lr}
 800e952:	b096      	sub	sp, #88	@ 0x58
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	460b      	mov	r3, r1
 800e95a:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	657b      	str	r3, [r7, #84]	@ 0x54
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e966:	2b04      	cmp	r3, #4
 800e968:	d906      	bls.n	800e978 <vTCPStateChange+0x28>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e970:	2b08      	cmp	r3, #8
 800e972:	d001      	beq.n	800e978 <vTCPStateChange+0x28>
 800e974:	2301      	movs	r3, #1
 800e976:	e000      	b.n	800e97a <vTCPStateChange+0x2a>
 800e978:	2300      	movs	r3, #0
 800e97a:	653b      	str	r3, [r7, #80]	@ 0x50
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 800e97c:	78fb      	ldrb	r3, [r7, #3]
 800e97e:	2b04      	cmp	r3, #4
 800e980:	d904      	bls.n	800e98c <vTCPStateChange+0x3c>
 800e982:	78fb      	ldrb	r3, [r7, #3]
 800e984:	2b08      	cmp	r3, #8
 800e986:	d001      	beq.n	800e98c <vTCPStateChange+0x3c>
 800e988:	2301      	movs	r3, #1
 800e98a:	e000      	b.n	800e98e <vTCPStateChange+0x3e>
 800e98c:	2300      	movs	r3, #0
 800e98e:	64bb      	str	r3, [r7, #72]	@ 0x48

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e996:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 800e99a:	2300      	movs	r3, #0
 800e99c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 800e99e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e9a2:	2b02      	cmp	r3, #2
 800e9a4:	d007      	beq.n	800e9b6 <vTCPStateChange+0x66>
 800e9a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e9aa:	2b03      	cmp	r3, #3
 800e9ac:	d003      	beq.n	800e9b6 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 800e9ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e9b2:	2b04      	cmp	r3, #4
 800e9b4:	d104      	bne.n	800e9c0 <vTCPStateChange+0x70>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 800e9b6:	78fb      	ldrb	r3, [r7, #3]
 800e9b8:	2b08      	cmp	r3, #8
 800e9ba:	d101      	bne.n	800e9c0 <vTCPStateChange+0x70>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800e9c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e9c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	f000 80a2 	beq.w	800eb0e <vTCPStateChange+0x1be>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e9d0:	f003 0304 	and.w	r3, r3, #4
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d01c      	beq.n	800ea14 <vTCPStateChange+0xc4>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e9e0:	f003 0308 	and.w	r3, r3, #8
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d114      	bne.n	800ea14 <vTCPStateChange+0xc4>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9f0:	657b      	str	r3, [r7, #84]	@ 0x54
                    configASSERT( xParent != NULL );
 800e9f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d10d      	bne.n	800ea14 <vTCPStateChange+0xc4>
	__asm volatile
 800e9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9fc:	b672      	cpsid	i
 800e9fe:	f383 8811 	msr	BASEPRI, r3
 800ea02:	f3bf 8f6f 	isb	sy
 800ea06:	f3bf 8f4f 	dsb	sy
 800ea0a:	b662      	cpsie	i
 800ea0c:	63bb      	str	r3, [r7, #56]	@ 0x38
}
 800ea0e:	bf00      	nop
 800ea10:	bf00      	nop
 800ea12:	e7fd      	b.n	800ea10 <vTCPStateChange+0xc0>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800ea14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d055      	beq.n	800eac6 <vTCPStateChange+0x176>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800ea20:	f003 0304 	and.w	r3, r3, #4
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d03a      	beq.n	800eaa0 <vTCPStateChange+0x150>
                {
                    if( xParent != NULL )
 800ea2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d024      	beq.n	800ea7a <vTCPStateChange+0x12a>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800ea30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d103      	bne.n	800ea42 <vTCPStateChange+0xf2>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800ea3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800ea42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f043 0204 	orr.w	r2, r3, #4
 800ea4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea4c:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800ea4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea52:	f003 0301 	and.w	r3, r3, #1
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d005      	beq.n	800ea66 <vTCPStateChange+0x116>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800ea5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ea62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea64:	601a      	str	r2, [r3, #0]
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 800ea66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea68:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 800ea6c:	f003 0308 	and.w	r3, r3, #8
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d101      	bne.n	800ea7a <vTCPStateChange+0x12a>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 800ea76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea78:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800ea88:	f023 0304 	bic.w	r3, r3, #4
 800ea8c:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800ea96:	f043 0302 	orr.w	r3, r3, #2
 800ea9a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800ea9e:	e024      	b.n	800eaea <vTCPStateChange+0x19a>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f043 0208 	orr.w	r2, r3, #8
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eab0:	f003 0302 	and.w	r3, r3, #2
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d018      	beq.n	800eaea <vTCPStateChange+0x19a>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	601a      	str	r2, [r3, #0]
 800eac4:	e011      	b.n	800eaea <vTCPStateChange+0x19a>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800eac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f043 0220 	orr.w	r2, r3, #32
 800eace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead0:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800ead2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ead6:	f003 0304 	and.w	r3, r3, #4
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d005      	beq.n	800eaea <vTCPStateChange+0x19a>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800eade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800eae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eae8:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 800eaea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d101      	bne.n	800eaf4 <vTCPStateChange+0x1a4>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800eafa:	4618      	mov	r0, r3
 800eafc:	f000 fdb7 	bl	800f66e <prvTCPSocketIsActive>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d103      	bne.n	800eb0e <vTCPStateChange+0x1be>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	78fa      	ldrb	r2, [r7, #3]
 800eb12:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        if( ( eTCPState == eCLOSED ) ||
 800eb16:	78fb      	ldrb	r3, [r7, #3]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <vTCPStateChange+0x1d2>
 800eb1c:	78fb      	ldrb	r3, [r7, #3]
 800eb1e:	2b08      	cmp	r3, #8
 800eb20:	d161      	bne.n	800ebe6 <vTCPStateChange+0x296>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 800eb22:	2300      	movs	r3, #0
 800eb24:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 800eb26:	2300      	movs	r3, #0
 800eb28:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 800eb2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d108      	bne.n	800eb44 <vTCPStateChange+0x1f4>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d003      	beq.n	800eb44 <vTCPStateChange+0x1f4>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb42:	657b      	str	r3, [r7, #84]	@ 0x54
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 800eb44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d007      	beq.n	800eb5e <vTCPStateChange+0x20e>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 800eb4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d101      	bne.n	800eb5e <vTCPStateChange+0x20e>
            {
                xMustClear = pdTRUE;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	643b      	str	r3, [r7, #64]	@ 0x40
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 800eb5e:	f007 fcb9 	bl	80164d4 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800eb68:	f003 0304 	and.w	r3, r3, #4
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d107      	bne.n	800eb82 <vTCPStateChange+0x232>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800eb78:	f003 0302 	and.w	r3, r3, #2
 800eb7c:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d02f      	beq.n	800ebe2 <vTCPStateChange+0x292>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800eb88:	f003 0308 	and.w	r3, r3, #8
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d127      	bne.n	800ebe2 <vTCPStateChange+0x292>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff fea4 	bl	800e8e0 <vTCPRemoveTCPChild>
 800eb98:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800eba0:	f023 0304 	bic.w	r3, r3, #4
 800eba4:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800ebae:	f023 0302 	bic.w	r3, r3, #2
 800ebb2:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 800ebb6:	f7fc fd1a 	bl	800b5ee <xIsCallingFromIPTask>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10d      	bne.n	800ebdc <vTCPStateChange+0x28c>
	__asm volatile
 800ebc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc4:	b672      	cpsid	i
 800ebc6:	f383 8811 	msr	BASEPRI, r3
 800ebca:	f3bf 8f6f 	isb	sy
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	b662      	cpsie	i
 800ebd4:	637b      	str	r3, [r7, #52]	@ 0x34
}
 800ebd6:	bf00      	nop
 800ebd8:	bf00      	nop
 800ebda:	e7fd      	b.n	800ebd8 <vTCPStateChange+0x288>
                        vSocketCloseNextTime( pxSocket );
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7ff fdb1 	bl	800e744 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 800ebe2:	f007 fc85 	bl	80164f0 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 800ebe6:	78fb      	ldrb	r3, [r7, #3]
 800ebe8:	2b08      	cmp	r3, #8
 800ebea:	d115      	bne.n	800ec18 <vTCPStateChange+0x2c8>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800ebf2:	f003 0308 	and.w	r3, r3, #8
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00d      	beq.n	800ec18 <vTCPStateChange+0x2c8>
        {
            switch( xPreviousState )
 800ebfc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ec00:	3b03      	subs	r3, #3
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d807      	bhi.n	800ec16 <vTCPStateChange+0x2c6>
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7ff fdb4 	bl	800e77c <vSocketListenNextTime>
                    break;
 800ec14:	e000      	b.n	800ec18 <vTCPStateChange+0x2c8>

                default:
                    /* Nothing to do. */
                    break;
 800ec16:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff fe3b 	bl	800e894 <prvTCPTouchSocket>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 800ec1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d005      	beq.n	800ec30 <vTCPStateChange+0x2e0>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 800ec24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec26:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ec2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ec2c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ec2e:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 800ec30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d002      	beq.n	800ec3c <vTCPStateChange+0x2ec>
        {
            vSocketWakeUpUser( xParent );
 800ec36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ec38:	f7fe fe22 	bl	800d880 <vSocketWakeUpUser>
        }
    }
 800ec3c:	bf00      	nop
 800ec3e:	3758      	adds	r7, #88	@ 0x58
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800ec4c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800ec50:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d13d      	bne.n	800ecd8 <prvTCPNextTimeout+0x94>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800ec62:	f003 0308 	and.w	r3, r3, #8
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d01a      	beq.n	800eca2 <prvTCPNextTimeout+0x5e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d811      	bhi.n	800ec9a <prvTCPNextTimeout+0x56>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d102      	bne.n	800ec86 <prvTCPNextTimeout+0x42>
                    {
                        ulDelayMs = 0U;
 800ec80:	2300      	movs	r3, #0
 800ec82:	60bb      	str	r3, [r7, #8]
 800ec84:	e010      	b.n	800eca8 <prvTCPNextTimeout+0x64>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ec92:	fa02 f303 	lsl.w	r3, r2, r3
 800ec96:	60bb      	str	r3, [r7, #8]
 800ec98:	e006      	b.n	800eca8 <prvTCPNextTimeout+0x64>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 800ec9a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 800ec9e:	60bb      	str	r3, [r7, #8]
 800eca0:	e002      	b.n	800eca8 <prvTCPNextTimeout+0x64>
                }
            }
            else
            {
                /* Still in the Resolution phase: check every half second. */
                ulDelayMs = 500U;
 800eca2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800eca6:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ecae:	fb02 f303 	mul.w	r3, r2, r3
 800ecb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ecb6:	d30a      	bcc.n	800ecce <prvTCPNextTimeout+0x8a>
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ecbe:	fb02 f303 	mul.w	r3, r2, r3
 800ecc2:	4a23      	ldr	r2, [pc, #140]	@ (800ed50 <prvTCPNextTimeout+0x10c>)
 800ecc4:	fba2 2303 	umull	r2, r3, r2, r3
 800ecc8:	099b      	lsrs	r3, r3, #6
 800ecca:	b29a      	uxth	r2, r3
 800eccc:	e000      	b.n	800ecd0 <prvTCPNextTimeout+0x8c>
 800ecce:	2201      	movs	r2, #1
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 800ecd6:	e033      	b.n	800ed40 <prvTCPNextTimeout+0xfc>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d12e      	bne.n	800ed40 <prvTCPNextTimeout+0xfc>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800ecee:	f107 0208 	add.w	r2, r7, #8
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	f003 f8b1 	bl	8011e5a <xTCPWindowTxHasData>
 800ecf8:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d108      	bne.n	800ed12 <prvTCPNextTimeout+0xce>
            {
                if( xResult != ( BaseType_t ) 0 )
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d002      	beq.n	800ed0c <prvTCPNextTimeout+0xc8>
                {
                    ulDelayMs = 1U;
 800ed06:	2301      	movs	r3, #1
 800ed08:	60bb      	str	r3, [r7, #8]
 800ed0a:	e002      	b.n	800ed12 <prvTCPNextTimeout+0xce>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800ed0c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800ed10:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed18:	fb02 f303 	mul.w	r3, r2, r3
 800ed1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ed20:	d30a      	bcc.n	800ed38 <prvTCPNextTimeout+0xf4>
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed28:	fb02 f303 	mul.w	r3, r2, r3
 800ed2c:	4a08      	ldr	r2, [pc, #32]	@ (800ed50 <prvTCPNextTimeout+0x10c>)
 800ed2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed32:	099b      	lsrs	r3, r3, #6
 800ed34:	b29a      	uxth	r2, r3
 800ed36:	e000      	b.n	800ed3a <prvTCPNextTimeout+0xf6>
 800ed38:	2201      	movs	r2, #1
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
    }
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	10624dd3 	.word	0x10624dd3

0800ed54 <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 800ed54:	b4b0      	push	{r4, r5, r7}
 800ed56:	b08b      	sub	sp, #44	@ 0x2c
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800ed62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed64:	899b      	ldrh	r3, [r3, #12]
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d10e      	bne.n	800ed8e <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	330e      	adds	r3, #14
 800ed74:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 800ed76:	2301      	movs	r3, #1
 800ed78:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	3308      	adds	r3, #8
 800ed7e:	f107 0408 	add.w	r4, r7, #8
 800ed82:	6818      	ldr	r0, [r3, #0]
 800ed84:	6859      	ldr	r1, [r3, #4]
 800ed86:	689a      	ldr	r2, [r3, #8]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed8c:	e007      	b.n	800ed9e <xGetSourceAddrFromBuffer+0x4a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	330e      	adds	r3, #14
 800ed92:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 800ed94:	2300      	movs	r3, #0
 800ed96:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	461d      	mov	r5, r3
 800eda2:	f107 0408 	add.w	r4, r7, #8
 800eda6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eda8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edaa:	6823      	ldr	r3, [r4, #0]
 800edac:	602b      	str	r3, [r5, #0]
    }
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	372c      	adds	r7, #44	@ 0x2c
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bcb0      	pop	{r4, r5, r7}
 800edb6:	4770      	bx	lr

0800edb8 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800edb8:	b5b0      	push	{r4, r5, r7, lr}
 800edba:	b09a      	sub	sp, #104	@ 0x68
 800edbc:	af04      	add	r7, sp, #16
 800edbe:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 800edc0:	2301      	movs	r3, #1
 800edc2:	657b      	str	r3, [r7, #84]	@ 0x54
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10d      	bne.n	800ede6 <xProcessReceivedTCPPacket+0x2e>
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edce:	b672      	cpsid	i
 800edd0:	f383 8811 	msr	BASEPRI, r3
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	b662      	cpsie	i
 800edde:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800ede0:	bf00      	nop
 800ede2:	bf00      	nop
 800ede4:	e7fd      	b.n	800ede2 <xProcessReceivedTCPPacket+0x2a>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10d      	bne.n	800ee0a <xProcessReceivedTCPPacket+0x52>
	__asm volatile
 800edee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf2:	b672      	cpsid	i
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	b662      	cpsie	i
 800ee02:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ee04:	bf00      	nop
 800ee06:	bf00      	nop
 800ee08:	e7fd      	b.n	800ee06 <xProcessReceivedTCPPacket+0x4e>

        pxNetworkBuffer = pxDescriptor;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	623b      	str	r3, [r7, #32]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 800ee0e:	6a3b      	ldr	r3, [r7, #32]
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fc f827 	bl	800ae64 <uxIPHeaderSizePacket>
 800ee16:	4603      	mov	r3, r0
 800ee18:	330e      	adds	r3, #14
 800ee1a:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ee20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee22:	3314      	adds	r3, #20
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d202      	bcs.n	800ee2e <xProcessReceivedTCPPacket+0x76>
        {
            xResult = pdFAIL;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ee2c:	e14a      	b.n	800f0c4 <xProcessReceivedTCPPacket+0x30c>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 800ee32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee34:	4413      	add	r3, r2
 800ee36:	64bb      	str	r3, [r7, #72]	@ 0x48

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800ee38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee3a:	7b5b      	ldrb	r3, [r3, #13]
 800ee3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 800ee40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee42:	789a      	ldrb	r2, [r3, #2]
 800ee44:	78db      	ldrb	r3, [r3, #3]
 800ee46:	021b      	lsls	r3, r3, #8
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 800ee4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee50:	781a      	ldrb	r2, [r3, #0]
 800ee52:	785b      	ldrb	r3, [r3, #1]
 800ee54:	021b      	lsls	r3, r3, #8
 800ee56:	4313      	orrs	r3, r2
 800ee58:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800ee5c:	6a3b      	ldr	r3, [r7, #32]
 800ee5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee60:	f107 030c 	add.w	r3, r7, #12
 800ee64:	4611      	mov	r1, r2
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff ff74 	bl	800ed54 <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 800ee6c:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 800ee70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ee74:	9303      	str	r3, [sp, #12]
 800ee76:	466c      	mov	r4, sp
 800ee78:	f107 0314 	add.w	r3, r7, #20
 800ee7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ee84:	f107 030c 	add.w	r3, r7, #12
 800ee88:	cb0c      	ldmia	r3, {r2, r3}
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	f7fe fe2d 	bl	800daec <pxTCPSocketLookup>
 800ee92:	6538      	str	r0, [r7, #80]	@ 0x50

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 800ee94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d008      	beq.n	800eeac <xProcessReceivedTCPPacket+0xf4>
 800ee9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee9c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 fbe4 	bl	800f66e <prvTCPSocketIsActive>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d112      	bne.n	800eed2 <xProcessReceivedTCPPacket+0x11a>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800eeac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eeb0:	f003 031f 	and.w	r3, r3, #31
 800eeb4:	2b10      	cmp	r3, #16
 800eeb6:	d009      	beq.n	800eecc <xProcessReceivedTCPPacket+0x114>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800eeb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eebc:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d103      	bne.n	800eecc <xProcessReceivedTCPPacket+0x114>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800eec4:	6a3b      	ldr	r3, [r7, #32]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f001 ff7a 	bl	8010dc0 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800eecc:	2300      	movs	r3, #0
 800eece:	657b      	str	r3, [r7, #84]	@ 0x54
 800eed0:	e09c      	b.n	800f00c <xProcessReceivedTCPPacket+0x254>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800eed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eed4:	2200      	movs	r2, #0
 800eed6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800eeda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eedc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d11e      	bne.n	800ef22 <xProcessReceivedTCPPacket+0x16a>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800eee4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eee8:	f003 031f 	and.w	r3, r3, #31
 800eeec:	2b02      	cmp	r3, #2
 800eeee:	d00c      	beq.n	800ef0a <xProcessReceivedTCPPacket+0x152>
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800eef0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eef4:	f003 0304 	and.w	r3, r3, #4
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d103      	bne.n	800ef04 <xProcessReceivedTCPPacket+0x14c>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f001 ff5e 	bl	8010dc0 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800ef04:	2300      	movs	r3, #0
 800ef06:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef08:	e080      	b.n	800f00c <xProcessReceivedTCPPacket+0x254>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800ef0a:	6a3b      	ldr	r3, [r7, #32]
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ef10:	f000 ffd2 	bl	800feb8 <prvHandleListen>
 800ef14:	6538      	str	r0, [r7, #80]	@ 0x50

                        if( pxSocket == NULL )
 800ef16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d177      	bne.n	800f00c <xProcessReceivedTCPPacket+0x254>
                        {
                            xResult = pdFAIL;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef20:	e074      	b.n	800f00c <xProcessReceivedTCPPacket+0x254>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800ef22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ef26:	f003 0304 	and.w	r3, r3, #4
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d046      	beq.n	800efbc <xProcessReceivedTCPPacket+0x204>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800ef2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef30:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ef34:	2b02      	cmp	r3, #2
 800ef36:	d10e      	bne.n	800ef56 <xProcessReceivedTCPPacket+0x19e>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800ef38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	637b      	str	r3, [r7, #52]	@ 0x34

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 800ef3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef40:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800ef44:	3301      	adds	r3, #1
 800ef46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d134      	bne.n	800efb6 <xProcessReceivedTCPPacket+0x1fe>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ef50:	f7ff fcfe 	bl	800e950 <vTCPStateChange>
 800ef54:	e02f      	b.n	800efb6 <xProcessReceivedTCPPacket+0x1fe>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800ef56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	63bb      	str	r3, [r7, #56]	@ 0x38

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800ef5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800ef62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d104      	bne.n	800ef72 <xProcessReceivedTCPPacket+0x1ba>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800ef68:	2100      	movs	r1, #0
 800ef6a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ef6c:	f7ff fcf0 	bl	800e950 <vTCPStateChange>
 800ef70:	e021      	b.n	800efb6 <xProcessReceivedTCPPacket+0x1fe>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 800ef72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef74:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef7c:	f002 fa15 	bl	80113aa <xSequenceGreaterThan>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d017      	beq.n	800efb6 <xProcessReceivedTCPPacket+0x1fe>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800ef86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef88:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 800ef8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef8e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800ef92:	4413      	add	r3, r2
 800ef94:	4619      	mov	r1, r3
 800ef96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef98:	f002 f9f1 	bl	801137e <xSequenceLessThan>
 800ef9c:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d009      	beq.n	800efb6 <xProcessReceivedTCPPacket+0x1fe>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
 800efa2:	6a38      	ldr	r0, [r7, #32]
 800efa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efa6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800efaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efac:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800efb0:	461a      	mov	r2, r3
 800efb2:	f001 fee7 	bl	8010d84 <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800efb6:	2300      	movs	r3, #0
 800efb8:	657b      	str	r3, [r7, #84]	@ 0x54
 800efba:	e027      	b.n	800f00c <xProcessReceivedTCPPacket+0x254>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 800efbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800efc0:	f003 031f 	and.w	r3, r3, #31
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d107      	bne.n	800efd8 <xProcessReceivedTCPPacket+0x220>
 800efc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efca:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800efce:	2b04      	cmp	r3, #4
 800efd0:	d902      	bls.n	800efd8 <xProcessReceivedTCPPacket+0x220>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800efd2:	2300      	movs	r3, #0
 800efd4:	657b      	str	r3, [r7, #84]	@ 0x54
 800efd6:	e019      	b.n	800f00c <xProcessReceivedTCPPacket+0x254>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800efd8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800efda:	f7fb ff5d 	bl	800ae98 <uxIPHeaderSizeSocket>
 800efde:	4603      	mov	r3, r0
 800efe0:	330e      	adds	r3, #14
 800efe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 800efe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe6:	33a8      	adds	r3, #168	@ 0xa8
 800efe8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800efea:	4413      	add	r3, r2
 800efec:	1d98      	adds	r0, r3, #6
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 800efee:	6a3b      	ldr	r3, [r7, #32]
 800eff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eff4:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 800eff6:	2214      	movs	r2, #20
 800eff8:	4619      	mov	r1, r3
 800effa:	f009 fe8e 	bl	8018d1a <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 800effe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f000:	330d      	adds	r3, #13
 800f002:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f004:	4413      	add	r3, r2
 800f006:	2210      	movs	r2, #16
 800f008:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
                    }
                }
            }

            if( xResult != pdFAIL )
 800f00c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d058      	beq.n	800f0c4 <xProcessReceivedTCPPacket+0x30c>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 800f012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f014:	2b00      	cmp	r3, #0
 800f016:	d10d      	bne.n	800f034 <xProcessReceivedTCPPacket+0x27c>
	__asm volatile
 800f018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01c:	b672      	cpsid	i
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	b662      	cpsie	i
 800f02c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f02e:	bf00      	nop
 800f030:	bf00      	nop
 800f032:	e7fd      	b.n	800f030 <xProcessReceivedTCPPacket+0x278>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800f034:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f036:	f7ff fc2d 	bl	800e894 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800f03a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f03c:	7b1b      	ldrb	r3, [r3, #12]
 800f03e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f042:	2b50      	cmp	r3, #80	@ 0x50
 800f044:	d905      	bls.n	800f052 <xProcessReceivedTCPPacket+0x29a>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 800f046:	6a3b      	ldr	r3, [r7, #32]
 800f048:	4619      	mov	r1, r3
 800f04a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f04c:	f000 f87e 	bl	800f14c <prvCheckOptions>
 800f050:	6578      	str	r0, [r7, #84]	@ 0x54
                }

                if( xResult != pdFAIL )
 800f052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f054:	2b00      	cmp	r3, #0
 800f056:	d035      	beq.n	800f0c4 <xProcessReceivedTCPPacket+0x30c>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800f058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f05a:	7b9a      	ldrb	r2, [r3, #14]
 800f05c:	7bdb      	ldrb	r3, [r3, #15]
 800f05e:	021b      	lsls	r3, r3, #8
 800f060:	4313      	orrs	r3, r2
 800f062:	867b      	strh	r3, [r7, #50]	@ 0x32
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800f064:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800f066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f068:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800f06c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f070:	f003 0302 	and.w	r3, r3, #2
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10a      	bne.n	800f08e <xProcessReceivedTCPPacket+0x2d6>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800f078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f07a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f07e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f080:	f892 210a 	ldrb.w	r2, [r2, #266]	@ 0x10a
 800f084:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800f088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f08a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800f08e:	f107 0320 	add.w	r3, r7, #32
 800f092:	4619      	mov	r1, r3
 800f094:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f096:	f000 fdf7 	bl	800fc88 <prvTCPHandleState>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	dd05      	ble.n	800f0ac <xProcessReceivedTCPPacket+0x2f4>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800f0a0:	f107 0320 	add.w	r3, r7, #32
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f0a8:	f001 f905 	bl	80102b6 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 800f0ac:	6a3b      	ldr	r3, [r7, #32]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d005      	beq.n	800f0be <xProcessReceivedTCPPacket+0x306>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f003 fd19 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	623b      	str	r3, [r7, #32]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 800f0be:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f0c0:	f7ff fdc0 	bl	800ec44 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800f0c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    }
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3758      	adds	r7, #88	@ 0x58
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f0d0 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800f0d0:	b480      	push	{r7}
 800f0d2:	b089      	sub	sp, #36	@ 0x24
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f0dc:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f0e2:	4b18      	ldr	r3, [pc, #96]	@ (800f144 <xTCPCheckNewClient+0x74>)
 800f0e4:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f0e6:	4b18      	ldr	r3, [pc, #96]	@ (800f148 <xTCPCheckNewClient+0x78>)
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	61fb      	str	r3, [r7, #28]
 800f0ec:	e01e      	b.n	800f12c <xTCPCheckNewClient+0x5c>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d116      	bne.n	800f126 <xTCPCheckNewClient+0x56>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f104:	2b06      	cmp	r3, #6
 800f106:	d10e      	bne.n	800f126 <xTCPCheckNewClient+0x56>
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800f10e:	f003 0302 	and.w	r3, r3, #2
 800f112:	b2db      	uxtb	r3, r3
 800f114:	2b00      	cmp	r3, #0
 800f116:	d006      	beq.n	800f126 <xTCPCheckNewClient+0x56>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
                    xResult = pdTRUE;
 800f120:	2301      	movs	r3, #1
 800f122:	61bb      	str	r3, [r7, #24]
                    break;
 800f124:	e006      	b.n	800f134 <xTCPCheckNewClient+0x64>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 800f12c:	69fa      	ldr	r2, [r7, #28]
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	429a      	cmp	r2, r3
 800f132:	d1dc      	bne.n	800f0ee <xTCPCheckNewClient+0x1e>
                }
            }
        }

        return xResult;
 800f134:	69bb      	ldr	r3, [r7, #24]
    }
 800f136:	4618      	mov	r0, r3
 800f138:	3724      	adds	r7, #36	@ 0x24
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr
 800f142:	bf00      	nop
 800f144:	20002660 	.word	0x20002660
 800f148:	20002658 	.word	0x20002658

0800f14c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08c      	sub	sp, #48	@ 0x30
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 800f156:	6838      	ldr	r0, [r7, #0]
 800f158:	f7fb fe84 	bl	800ae64 <uxIPHeaderSizePacket>
 800f15c:	4603      	mov	r3, r0
 800f15e:	330e      	adds	r3, #14
 800f160:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	4413      	add	r3, r2
 800f16a:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 800f16c:	2301      	movs	r3, #1
 800f16e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	3314      	adds	r3, #20
 800f174:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800f176:	69bb      	ldr	r3, [r7, #24]
 800f178:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	3314      	adds	r3, #20
 800f17e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	7b1b      	ldrb	r3, [r3, #12]
 800f184:	2b50      	cmp	r3, #80	@ 0x50
 800f186:	d93f      	bls.n	800f208 <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	7b1b      	ldrb	r3, [r3, #12]
 800f18c:	091b      	lsrs	r3, r3, #4
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	3b05      	subs	r3, #5
 800f192:	b2db      	uxtb	r3, r3
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 800f198:	7bfb      	ldrb	r3, [r7, #15]
 800f19a:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a0:	697a      	ldr	r2, [r7, #20]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d230      	bcs.n	800f208 <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	1ad3      	subs	r3, r2, r3
 800f1ae:	6a3a      	ldr	r2, [r7, #32]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d829      	bhi.n	800f208 <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	7b5b      	ldrb	r3, [r3, #13]
 800f1b8:	f003 0302 	and.w	r3, r3, #2
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f1c4:	e001      	b.n	800f1ca <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800f1ca:	6a3b      	ldr	r3, [r7, #32]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d018      	beq.n	800f202 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800f1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	6a39      	ldr	r1, [r7, #32]
 800f1d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1d8:	f000 f81b 	bl	800f212 <prvSingleStepTCPHeaderOptions>
 800f1dc:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	da02      	bge.n	800f1ea <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 800f1e8:	e00e      	b.n	800f208 <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00a      	beq.n	800f206 <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	6a3a      	ldr	r2, [r7, #32]
 800f1f4:	1ad3      	subs	r3, r2, r3
 800f1f6:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1fc:	4413      	add	r3, r2
 800f1fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 800f200:	e7e3      	b.n	800f1ca <prvCheckOptions+0x7e>
                            break;
 800f202:	bf00      	nop
 800f204:	e000      	b.n	800f208 <prvCheckOptions+0xbc>
                            break;
 800f206:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 800f208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800f20a:	4618      	mov	r0, r3
 800f20c:	3730      	adds	r7, #48	@ 0x30
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800f212:	b580      	push	{r7, lr}
 800f214:	b08a      	sub	sp, #40	@ 0x28
 800f216:	af00      	add	r7, sp, #0
 800f218:	60f8      	str	r0, [r7, #12]
 800f21a:	60b9      	str	r1, [r7, #8]
 800f21c:	607a      	str	r2, [r7, #4]
 800f21e:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f22e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800f230:	2300      	movs	r3, #0
 800f232:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	61fb      	str	r3, [r7, #28]
 800f240:	e0cc      	b.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	2b01      	cmp	r3, #1
 800f248:	d102      	bne.n	800f250 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 800f24a:	2301      	movs	r3, #1
 800f24c:	61fb      	str	r3, [r7, #28]
 800f24e:	e0c5      	b.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d803      	bhi.n	800f25e <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 800f256:	f04f 33ff 	mov.w	r3, #4294967295
 800f25a:	61fb      	str	r3, [r7, #28]
 800f25c:	e0be      	b.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b03      	cmp	r3, #3
 800f264:	d128      	bne.n	800f2b8 <prvSingleStepTCPHeaderOptions+0xa6>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d904      	bls.n	800f276 <prvSingleStepTCPHeaderOptions+0x64>
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	3301      	adds	r3, #1
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	2b03      	cmp	r3, #3
 800f274:	d003      	beq.n	800f27e <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 800f276:	f04f 33ff 	mov.w	r3, #4294967295
 800f27a:	61fb      	str	r3, [r7, #28]
 800f27c:	e0ae      	b.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d016      	beq.n	800f2b2 <prvSingleStepTCPHeaderOptions+0xa0>
                    {
                        /* From RFC7323 - section 2.3, we should limit the WSopt not larger than 14. */
                        if( pucPtr[ 2 ] > tcpTCP_OPT_WSOPT_MAXIMUM_VALUE )
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	3302      	adds	r3, #2
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b0e      	cmp	r3, #14
 800f28c:	d904      	bls.n	800f298 <prvSingleStepTCPHeaderOptions+0x86>
                        {
                            FreeRTOS_debug_printf( ( "The WSopt(%u) from SYN packet is larger than maximum value.", pucPtr[ 2 ] ) );
                            pxSocket->u.xTCP.ucPeerWinScaleFactor = tcpTCP_OPT_WSOPT_MAXIMUM_VALUE;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	220e      	movs	r2, #14
 800f292:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
 800f296:	e005      	b.n	800f2a4 <prvSingleStepTCPHeaderOptions+0x92>
                        }
                        else
                        {
                            pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	3302      	adds	r3, #2
 800f29c:	781a      	ldrb	r2, [r3, #0]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
                        }

                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800f2aa:	f043 0310 	orr.w	r3, r3, #16
 800f2ae:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 800f2b2:	2303      	movs	r3, #3
 800f2b4:	61fb      	str	r3, [r7, #28]
 800f2b6:	e091      	b.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d155      	bne.n	800f36c <prvSingleStepTCPHeaderOptions+0x15a>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	2b03      	cmp	r3, #3
 800f2c4:	d904      	bls.n	800f2d0 <prvSingleStepTCPHeaderOptions+0xbe>
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	2b04      	cmp	r3, #4
 800f2ce:	d003      	beq.n	800f2d8 <prvSingleStepTCPHeaderOptions+0xc6>
            {
                lIndex = -1;
 800f2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d4:	61fb      	str	r3, [r7, #28]
 800f2d6:	e081      	b.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3302      	adds	r3, #2
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7fc fc2f 	bl	800bb40 <usChar2u16>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d007      	beq.n	800f304 <prvSingleStepTCPHeaderOptions+0xf2>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800f2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d104      	bne.n	800f304 <prvSingleStepTCPHeaderOptions+0xf2>
                    {
                        lIndex = -1;
 800f2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f2fe:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800f300:	2301      	movs	r3, #1
 800f302:	61bb      	str	r3, [r7, #24]
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d168      	bne.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 800f30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30c:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f310:	d202      	bcs.n	800f318 <prvSingleStepTCPHeaderOptions+0x106>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 800f312:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800f316:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f31e:	461a      	mov	r2, r3
 800f320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f322:	4293      	cmp	r3, r2
 800f324:	d21f      	bcs.n	800f366 <prvSingleStepTCPHeaderOptions+0x154>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800f32c:	f043 0301 	orr.w	r3, r3, #1
 800f330:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	685a      	ldr	r2, [r3, #4]
 800f338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f340:	fb03 f202 	mul.w	r2, r3, r2
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800f348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800f352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f354:	b29a      	uxth	r2, r3
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 800f35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f35e:	b29a      	uxth	r2, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 800f366:	2304      	movs	r3, #4
 800f368:	61fb      	str	r3, [r7, #28]
 800f36a:	e037      	b.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	3301      	adds	r3, #1
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800f37a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d904      	bls.n	800f38c <prvSingleStepTCPHeaderOptions+0x17a>
 800f382:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d203      	bcs.n	800f394 <prvSingleStepTCPHeaderOptions+0x182>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 800f38c:	f04f 33ff 	mov.w	r3, #4294967295
 800f390:	61fb      	str	r3, [r7, #28]
 800f392:	e023      	b.n	800f3dc <prvSingleStepTCPHeaderOptions+0x1ca>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2b05      	cmp	r3, #5
 800f39a:	d11a      	bne.n	800f3d2 <prvSingleStepTCPHeaderOptions+0x1c0>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 800f39c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f3a0:	3b02      	subs	r3, #2
 800f3a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	3302      	adds	r3, #2
 800f3aa:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 800f3ac:	e00d      	b.n	800f3ca <prvSingleStepTCPHeaderOptions+0x1b8>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 f816 	bl	800f3e6 <prvReadSackOption>
                            lIndex += 8;
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	3308      	adds	r3, #8
 800f3be:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 800f3c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f3c4:	3b08      	subs	r3, #8
 800f3c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 800f3ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f3ce:	2b07      	cmp	r3, #7
 800f3d0:	d8ed      	bhi.n	800f3ae <prvSingleStepTCPHeaderOptions+0x19c>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 800f3d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f3d6:	69fa      	ldr	r2, [r7, #28]
 800f3d8:	4413      	add	r3, r2
 800f3da:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 800f3dc:	69fb      	ldr	r3, [r7, #28]
    }
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3728      	adds	r7, #40	@ 0x28
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b08a      	sub	sp, #40	@ 0x28
 800f3ea:	af02      	add	r7, sp, #8
 800f3ec:	60f8      	str	r0, [r7, #12]
 800f3ee:	60b9      	str	r1, [r7, #8]
 800f3f0:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fc fb86 	bl	800bb0a <ulChar2u32>
 800f3fe:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	3304      	adds	r3, #4
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	4413      	add	r3, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fc fb7e 	bl	800bb0a <ulChar2u32>
 800f40e:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f416:	69ba      	ldr	r2, [r7, #24]
 800f418:	69f9      	ldr	r1, [r7, #28]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f002 ffb6 	bl	801238c <ulTCPWindowTxSack>
 800f420:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d024      	beq.n	800f476 <prvReadSackOption+0x90>
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d021      	beq.n	800f476 <prvReadSackOption+0x90>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800f438:	2300      	movs	r3, #0
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	2200      	movs	r2, #0
 800f440:	2100      	movs	r1, #0
 800f442:	f7ff f90c 	bl	800e65e <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f043 0202 	orr.w	r2, r3, #2
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f456:	f003 0302 	and.w	r3, r3, #2
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d005      	beq.n	800f46a <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	601a      	str	r2, [r3, #0]
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800f470:	6979      	ldr	r1, [r7, #20]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800f476:	bf00      	nop
 800f478:	3720      	adds	r7, #32
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 800f47e:	b590      	push	{r4, r7, lr}
 800f480:	b08d      	sub	sp, #52	@ 0x34
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
 800f486:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7fb fce9 	bl	800ae64 <uxIPHeaderSizePacket>
 800f492:	4603      	mov	r3, r0
 800f494:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f496:	4423      	add	r3, r4
 800f498:	627b      	str	r3, [r7, #36]	@ 0x24
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800f49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49c:	623b      	str	r3, [r7, #32]
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7fb fce0 	bl	800ae64 <uxIPHeaderSizePacket>
 800f4a4:	61f8      	str	r0, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800f4aa:	6a3b      	ldr	r3, [r7, #32]
 800f4ac:	7b1b      	ldrb	r3, [r3, #12]
 800f4ae:	089b      	lsrs	r3, r3, #2
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800f4b6:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800f4b8:	7efb      	ldrb	r3, [r7, #27]
 800f4ba:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4c0:	6979      	ldr	r1, [r7, #20]
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	440b      	add	r3, r1
 800f4c6:	330e      	adds	r3, #14
 800f4c8:	441a      	add	r2, r3
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800f4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d6:	3b0e      	subs	r3, #14
 800f4d8:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4de:	899b      	ldrh	r3, [r3, #12]
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4e6:	d10c      	bne.n	800f502 <prvCheckRxData+0x84>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ec:	330e      	adds	r3, #14
 800f4ee:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	789a      	ldrb	r2, [r3, #2]
 800f4f4:	78db      	ldrb	r3, [r3, #3]
 800f4f6:	021b      	lsls	r3, r3, #8
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	81fb      	strh	r3, [r7, #14]
                       lLength = ( int32_t ) usLength;
 800f4fc:	89fb      	ldrh	r3, [r7, #14]
 800f4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   }
                   break;
 800f500:	e002      	b.n	800f508 <prvCheckRxData+0x8a>
                   break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800f506:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 800f508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f50c:	429a      	cmp	r2, r3
 800f50e:	dd01      	ble.n	800f514 <prvCheckRxData+0x96>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800f510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f512:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800f514:	69fa      	ldr	r2, [r7, #28]
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	4413      	add	r3, r2
 800f51a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f51c:	429a      	cmp	r2, r3
 800f51e:	dd06      	ble.n	800f52e <prvCheckRxData+0xb0>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800f520:	69fa      	ldr	r2, [r7, #28]
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	4413      	add	r3, r2
 800f526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f52c:	e001      	b.n	800f532 <prvCheckRxData+0xb4>
        }
        else
        {
            lReceiveLength = 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	62bb      	str	r3, [r7, #40]	@ 0x28
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	7b5b      	ldrb	r3, [r3, #13]
 800f536:	f003 0320 	and.w	r3, r3, #32
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d011      	beq.n	800f562 <prvCheckRxData+0xe4>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800f53e:	6a3b      	ldr	r3, [r7, #32]
 800f540:	8a5b      	ldrh	r3, [r3, #18]
 800f542:	b29b      	uxth	r3, r3
 800f544:	60bb      	str	r3, [r7, #8]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	441a      	add	r2, r3
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800f552:	68b9      	ldr	r1, [r7, #8]
 800f554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f556:	f7fc f9dd 	bl	800b914 <FreeRTOS_min_int32>
 800f55a:	4602      	mov	r2, r0
 800f55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f55e:	1a9b      	subs	r3, r3, r2
 800f560:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        return ( BaseType_t ) lReceiveLength;
 800f562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800f564:	4618      	mov	r0, r3
 800f566:	3734      	adds	r7, #52	@ 0x34
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd90      	pop	{r4, r7, pc}

0800f56c <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b092      	sub	sp, #72	@ 0x48
 800f570:	af02      	add	r7, sp, #8
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
 800f578:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7fb fc72 	bl	800ae64 <uxIPHeaderSizePacket>
 800f580:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f588:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 800f58a:	4413      	add	r3, r2
 800f58c:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800f58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f590:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f598:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 800f5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d052      	beq.n	800f658 <prvStoreRxData+0xec>
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f5b8:	2b03      	cmp	r3, #3
 800f5ba:	d94d      	bls.n	800f658 <prvStoreRxData+0xec>
        {
            uint32_t ulSkipCount = 0;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d007      	beq.n	800f5da <prvStoreRxData+0x6e>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fe ff04 	bl	800e3de <uxStreamBufferGetSpace>
 800f5d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f5d8:	e003      	b.n	800f5e2 <prvStoreRxData+0x76>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 800f5e2:	f107 0310 	add.w	r3, r7, #16
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5ec:	69f9      	ldr	r1, [r7, #28]
 800f5ee:	6a38      	ldr	r0, [r7, #32]
 800f5f0:	f002 faac 	bl	8011b4c <lTCPWindowRxCheck>
 800f5f4:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	db1b      	blt.n	800f634 <prvStoreRxData+0xc8>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d007      	beq.n	800f612 <prvStoreRxData+0xa6>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	68ba      	ldr	r2, [r7, #8]
 800f60e:	4413      	add	r3, r2
 800f610:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 800f612:	69b9      	ldr	r1, [r7, #24]
 800f614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f7fe fbc6 	bl	800ddaa <lTCPAddRxdata>
 800f61e:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 800f620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f622:	697a      	ldr	r2, [r7, #20]
 800f624:	429a      	cmp	r2, r3
 800f626:	d005      	beq.n	800f634 <prvStoreRxData+0xc8>
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f001 fbc9 	bl	8010dc0 <prvTCPSendReset>
                    xResult = -1;
 800f62e:	f04f 33ff 	mov.w	r3, #4294967295
 800f632:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 800f634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f636:	2b00      	cmp	r3, #0
 800f638:	d113      	bne.n	800f662 <prvStoreRxData+0xf6>
 800f63a:	6a3b      	ldr	r3, [r7, #32]
 800f63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d00f      	beq.n	800f662 <prvStoreRxData+0xf6>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 800f642:	6a3b      	ldr	r3, [r7, #32]
 800f644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f646:	2200      	movs	r2, #0
 800f648:	2100      	movs	r1, #0
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	f7fe fbad 	bl	800ddaa <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 800f650:	6a3b      	ldr	r3, [r7, #32]
 800f652:	2200      	movs	r2, #0
 800f654:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 800f656:	e004      	b.n	800f662 <prvStoreRxData+0xf6>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800f658:	6a3b      	ldr	r3, [r7, #32]
 800f65a:	2200      	movs	r2, #0
 800f65c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800f660:	e000      	b.n	800f664 <prvStoreRxData+0xf8>
        {
 800f662:	bf00      	nop
        }

        return xResult;
 800f664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 800f666:	4618      	mov	r0, r3
 800f668:	3740      	adds	r7, #64	@ 0x40
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 800f66e:	b480      	push	{r7}
 800f670:	b085      	sub	sp, #20
 800f672:	af00      	add	r7, sp, #0
 800f674:	4603      	mov	r3, r0
 800f676:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 800f678:	79fb      	ldrb	r3, [r7, #7]
 800f67a:	2b0b      	cmp	r3, #11
 800f67c:	bf8c      	ite	hi
 800f67e:	2201      	movhi	r2, #1
 800f680:	2200      	movls	r2, #0
 800f682:	b2d2      	uxtb	r2, r2
 800f684:	2a00      	cmp	r2, #0
 800f686:	d10f      	bne.n	800f6a8 <prvTCPSocketIsActive+0x3a>
 800f688:	f640 3281 	movw	r2, #2945	@ 0xb81
 800f68c:	fa22 f303 	lsr.w	r3, r2, r3
 800f690:	f003 0301 	and.w	r3, r3, #1
 800f694:	2b00      	cmp	r3, #0
 800f696:	bf14      	ite	ne
 800f698:	2301      	movne	r3, #1
 800f69a:	2300      	moveq	r3, #0
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d002      	beq.n	800f6a8 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	60fb      	str	r3, [r7, #12]
                break;
 800f6a6:	e002      	b.n	800f6ae <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	60fb      	str	r3, [r7, #12]
                break;
 800f6ac:	bf00      	nop
        }

        return xResult;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
    }
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3714      	adds	r7, #20
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f6ca:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800f6cc:	7cfb      	ldrb	r3, [r7, #19]
 800f6ce:	2b08      	cmp	r3, #8
 800f6d0:	d00b      	beq.n	800f6ea <prvTCPStatusAgeCheck+0x2e>
 800f6d2:	2b08      	cmp	r3, #8
 800f6d4:	dc0c      	bgt.n	800f6f0 <prvTCPStatusAgeCheck+0x34>
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	dc02      	bgt.n	800f6e0 <prvTCPStatusAgeCheck+0x24>
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	da05      	bge.n	800f6ea <prvTCPStatusAgeCheck+0x2e>
 800f6de:	e007      	b.n	800f6f0 <prvTCPStatusAgeCheck+0x34>
 800f6e0:	2b05      	cmp	r3, #5
 800f6e2:	d105      	bne.n	800f6f0 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	617b      	str	r3, [r7, #20]
                    break;
 800f6e8:	e005      	b.n	800f6f6 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	617b      	str	r3, [r7, #20]
                    break;
 800f6ee:	e002      	b.n	800f6f6 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	617b      	str	r3, [r7, #20]
                    break;
 800f6f4:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d01b      	beq.n	800f734 <prvTCPStatusAgeCheck+0x78>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800f6fc:	f006 ff98 	bl	8016630 <xTaskGetTickCount>
 800f700:	4602      	mov	r2, r0
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f708:	1ad3      	subs	r3, r2, r3
 800f70a:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800f712:	4293      	cmp	r3, r2
 800f714:	d90e      	bls.n	800f734 <prvTCPStatusAgeCheck+0x78>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f716:	2108      	movs	r1, #8
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7ff f919 	bl	800e950 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800f724:	f003 0304 	and.w	r3, r3, #4
 800f728:	b2db      	uxtb	r3, r3
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d002      	beq.n	800f734 <prvTCPStatusAgeCheck+0x78>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 800f72e:	f04f 33ff 	mov.w	r3, #4294967295
 800f732:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800f734:	697b      	ldr	r3, [r7, #20]
        }
 800f736:	4618      	mov	r0, r3
 800f738:	3718      	adds	r7, #24
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800f73e:	b590      	push	{r4, r7, lr}
 800f740:	b089      	sub	sp, #36	@ 0x24
 800f742:	af00      	add	r7, sp, #0
 800f744:	6078      	str	r0, [r7, #4]
 800f746:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f74c:	6838      	ldr	r0, [r7, #0]
 800f74e:	f7fb fb89 	bl	800ae64 <uxIPHeaderSizePacket>
 800f752:	4603      	mov	r3, r0
 800f754:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f756:	4423      	add	r3, r4
 800f758:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800f75e:	2300      	movs	r3, #0
 800f760:	74fb      	strb	r3, [r7, #19]
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	7b5b      	ldrb	r3, [r3, #13]
 800f766:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f76e:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800f770:	2300      	movs	r3, #0
 800f772:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800f77a:	7cbb      	ldrb	r3, [r7, #18]
 800f77c:	f003 0301 	and.w	r3, r3, #1
 800f780:	2b00      	cmp	r3, #0
 800f782:	d004      	beq.n	800f78e <prvTCPHandleFin+0x50>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	695b      	ldr	r3, [r3, #20]
 800f788:	1c5a      	adds	r2, r3, #1
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d10b      	bne.n	800f7b6 <prvTCPHandleFin+0x78>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6a1a      	ldr	r2, [r3, #32]
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f7ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7b0:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
 800f7b4:	e00c      	b.n	800f7d0 <prvTCPHandleFin+0x92>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	68ba      	ldr	r2, [r7, #8]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d106      	bne.n	800f7d0 <prvTCPHandleFin+0x92>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800f7c8:	f043 0301 	orr.w	r3, r3, #1
 800f7cc:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d10b      	bne.n	800f7f8 <prvTCPHandleFin+0xba>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	2211      	movs	r2, #17
 800f7ec:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800f7ee:	210a      	movs	r1, #10
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f7ff f8ad 	bl	800e950 <vTCPStateChange>
 800f7f6:	e023      	b.n	800f840 <prvTCPHandleFin+0x102>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7fc:	1c5a      	adds	r2, r3, #1
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f808:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d103      	bne.n	800f81a <prvTCPHandleFin+0xdc>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2200      	movs	r2, #0
 800f816:	735a      	strb	r2, [r3, #13]
 800f818:	e012      	b.n	800f840 <prvTCPHandleFin+0x102>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800f820:	f003 0302 	and.w	r3, r3, #2
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d103      	bne.n	800f832 <prvTCPHandleFin+0xf4>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	2210      	movs	r2, #16
 800f82e:	735a      	strb	r2, [r3, #13]
 800f830:	e002      	b.n	800f838 <prvTCPHandleFin+0xfa>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	2200      	movs	r2, #0
 800f836:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f838:	2108      	movs	r1, #8
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f7ff f888 	bl	800e950 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6a1a      	ldr	r2, [r3, #32]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	7b5b      	ldrb	r3, [r3, #13]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00d      	beq.n	800f86c <prvTCPHandleFin+0x12e>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f7fb fb21 	bl	800ae98 <uxIPHeaderSizeSocket>
 800f856:	4603      	mov	r3, r0
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f860:	4413      	add	r3, r2
 800f862:	b2db      	uxtb	r3, r3
 800f864:	3314      	adds	r3, #20
 800f866:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800f868:	7cfb      	ldrb	r3, [r7, #19]
 800f86a:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f872:	3314      	adds	r3, #20
 800f874:	b2db      	uxtb	r3, r3
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	b2da      	uxtb	r2, r3
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	731a      	strb	r2, [r3, #12]
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 800f87e:	69fb      	ldr	r3, [r7, #28]
    }
 800f880:	4618      	mov	r0, r3
 800f882:	3724      	adds	r7, #36	@ 0x24
 800f884:	46bd      	mov	sp, r7
 800f886:	bd90      	pop	{r4, r7, pc}

0800f888 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800f888:	b590      	push	{r4, r7, lr}
 800f88a:	b099      	sub	sp, #100	@ 0x64
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
 800f894:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7fb fafc 	bl	800ae98 <uxIPHeaderSizeSocket>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f8a4:	4423      	add	r3, r4
 800f8a6:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800f8a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8aa:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f8b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800f8b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8b6:	7b5b      	ldrb	r3, [r3, #13]
 800f8b8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800f8bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800f8ca:	2310      	movs	r3, #16
 800f8cc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800f8d0:	2317      	movs	r3, #23
 800f8d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f8dc:	2b02      	cmp	r3, #2
 800f8de:	d105      	bne.n	800f8ec <prvHandleSynReceived+0x64>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800f8e0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800f8e4:	f043 0302 	orr.w	r3, r3, #2
 800f8e8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800f8ec:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800f8f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d024      	beq.n	800f94a <prvHandleSynReceived+0xc2>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f900:	2108      	movs	r1, #8
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f7ff f824 	bl	800e950 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800f908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f90a:	689a      	ldr	r2, [r3, #8]
 800f90c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f90e:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800f910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f914:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800f916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f918:	7b5b      	ldrb	r3, [r3, #13]
 800f91a:	f043 0304 	orr.w	r3, r3, #4
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f922:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800f924:	68f8      	ldr	r0, [r7, #12]
 800f926:	f7fb fab7 	bl	800ae98 <uxIPHeaderSizeSocket>
 800f92a:	4602      	mov	r2, r0
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	4413      	add	r3, r2
 800f930:	3314      	adds	r3, #20
 800f932:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800f934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f936:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	3314      	adds	r3, #20
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	009b      	lsls	r3, r3, #2
 800f942:	b2da      	uxtb	r2, r3
 800f944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f946:	731a      	strb	r2, [r3, #12]
 800f948:	e08c      	b.n	800fa64 <prvHandleSynReceived+0x1dc>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800f950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f952:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800f95a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f95c:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f966:	2b02      	cmp	r3, #2
 800f968:	d12e      	bne.n	800f9c8 <prvHandleSynReceived+0x140>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f7fb fa94 	bl	800ae98 <uxIPHeaderSizeSocket>
 800f970:	4603      	mov	r3, r0
 800f972:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 800f974:	33a8      	adds	r3, #168	@ 0xa8
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	4413      	add	r3, r2
 800f97a:	3306      	adds	r3, #6
 800f97c:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800f97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f980:	2210      	movs	r2, #16
 800f982:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800f984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f986:	2210      	movs	r2, #16
 800f988:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800f99c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f99e:	f001 ff95 	bl	80118cc <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800f9a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9a4:	1c5a      	adds	r2, r3, #1
 800f9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9a8:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800f9aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9ac:	1c5a      	adds	r2, r3, #1
 800f9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9b0:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800f9b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9b4:	6a1b      	ldr	r3, [r3, #32]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ba:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800f9bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9c0:	1c5a      	adds	r2, r3, #1
 800f9c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9c4:	635a      	str	r2, [r3, #52]	@ 0x34
 800f9c6:	e005      	b.n	800f9d4 <prvHandleSynReceived+0x14c>
            }
            else if( ulReceiveLength == 0U )
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d102      	bne.n	800f9d4 <prvHandleSynReceived+0x14c>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800f9ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f9d2:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800f9d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9d6:	69db      	ldr	r3, [r3, #28]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9dc:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	7a1b      	ldrb	r3, [r3, #8]
 800f9e2:	f003 0301 	and.w	r3, r3, #1
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d001      	beq.n	800f9f0 <prvHandleSynReceived+0x168>
 800f9ec:	200a      	movs	r0, #10
 800f9ee:	e000      	b.n	800f9f2 <prvHandleSynReceived+0x16a>
 800f9f0:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f103 0158 	add.w	r1, r3, #88	@ 0x58
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 800f9f8:	f107 0210 	add.w	r2, r7, #16
 800f9fc:	2328      	movs	r3, #40	@ 0x28
 800f9fe:	f7fd ff01 	bl	800d804 <FreeRTOS_inet_ntop>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	d002      	beq.n	800fa12 <prvHandleSynReceived+0x18a>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d014      	beq.n	800fa3c <prvHandleSynReceived+0x1b4>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800fa12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa14:	2210      	movs	r2, #16
 800fa16:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	f7fb fa3d 	bl	800ae98 <uxIPHeaderSizeSocket>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	4413      	add	r3, r2
 800fa24:	3314      	adds	r3, #20
 800fa26:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800fa28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	3314      	adds	r3, #20
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	b2da      	uxtb	r2, r3
 800fa38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa3a:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800fa42:	f003 0310 	and.w	r3, r3, #16
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d107      	bne.n	800fa5c <prvHandleSynReceived+0x1d4>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800fa5c:	2105      	movs	r1, #5
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7fe ff76 	bl	800e950 <vTCPStateChange>
        }

        return xSendLength;
 800fa64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 800fa66:	4618      	mov	r0, r3
 800fa68:	3764      	adds	r7, #100	@ 0x64
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd90      	pop	{r4, r7, pc}

0800fa6e <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800fa6e:	b590      	push	{r4, r7, lr}
 800fa70:	b097      	sub	sp, #92	@ 0x5c
 800fa72:	af02      	add	r7, sp, #8
 800fa74:	60f8      	str	r0, [r7, #12]
 800fa76:	60b9      	str	r1, [r7, #8]
 800fa78:	607a      	str	r2, [r7, #4]
 800fa7a:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fa82:	68f8      	ldr	r0, [r7, #12]
 800fa84:	f7fb fa08 	bl	800ae98 <uxIPHeaderSizeSocket>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800fa8c:	4423      	add	r3, r4
 800fa8e:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800fa90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa92:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800fa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800fa9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa9e:	7b5b      	ldrb	r3, [r3, #13]
 800faa0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800faa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800faaa:	2300      	movs	r3, #0
 800faac:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800faae:	2300      	movs	r3, #0
 800fab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fab2:	2300      	movs	r3, #0
 800fab4:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800faba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fabc:	7b9a      	ldrb	r2, [r3, #14]
 800fabe:	7bdb      	ldrb	r3, [r3, #15]
 800fac0:	021b      	lsls	r3, r3, #8
 800fac2:	4313      	orrs	r3, r2
 800fac4:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800fac6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	f892 210a 	ldrb.w	r2, [r2, #266]	@ 0x10a
 800fada:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 800fae4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800fae8:	f003 0310 	and.w	r3, r3, #16
 800faec:	2b00      	cmp	r3, #0
 800faee:	f000 80c6 	beq.w	800fc7e <prvHandleEstablished+0x210>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800faf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faf4:	689b      	ldr	r3, [r3, #8]
 800faf6:	4619      	mov	r1, r3
 800faf8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fafa:	f002 fc2a 	bl	8012352 <ulTCPWindowTxAck>
 800fafe:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d027      	beq.n	800fb5a <prvHandleEstablished+0xec>
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d024      	beq.n	800fb5a <prvHandleEstablished+0xec>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800fb16:	2300      	movs	r3, #0
 800fb18:	9300      	str	r3, [sp, #0]
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	2100      	movs	r1, #0
 800fb20:	f7fe fd9d 	bl	800e65e <uxStreamBufferGet>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d017      	beq.n	800fb5a <prvHandleEstablished+0xec>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f043 0202 	orr.w	r2, r3, #2
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb3a:	f003 0302 	and.w	r3, r3, #2
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d005      	beq.n	800fb4e <prvHandleEstablished+0xe0>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	601a      	str	r2, [r3, #0]
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800fb54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d002      	beq.n	800fb6a <prvHandleEstablished+0xfc>
            {
                prvTCPAddTxData( pxSocket );
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f000 ffbd 	bl	8010ae4 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800fb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb6c:	6a1a      	ldr	r2, [r3, #32]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800fb7a:	f003 0320 	and.w	r3, r3, #32
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d105      	bne.n	800fb90 <prvHandleEstablished+0x122>
 800fb84:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800fb88:	f003 0301 	and.w	r3, r3, #1
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d041      	beq.n	800fc14 <prvHandleEstablished+0x1a6>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 800fb90:	2301      	movs	r3, #1
 800fb92:	64bb      	str	r3, [r7, #72]	@ 0x48
                ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800fb94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	441a      	add	r2, r3
 800fb9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb9c:	691b      	ldr	r3, [r3, #16]
 800fb9e:	1ad3      	subs	r3, r2, r3
 800fba0:	633b      	str	r3, [r7, #48]	@ 0x30
                lDistance = ( int32_t ) ulIntermediateResult;
 800fba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba4:	623b      	str	r3, [r7, #32]

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800fbac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d11d      	bne.n	800fbf2 <prvHandleEstablished+0x184>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800fbb6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fbb8:	f001 fd9e 	bl	80116f8 <xTCPWindowRxEmpty>
 800fbbc:	61f8      	str	r0, [r7, #28]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800fbbe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fbc0:	f002 f8f3 	bl	8011daa <xTCPWindowTxDone>
 800fbc4:	61b8      	str	r0, [r7, #24]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d002      	beq.n	800fbd2 <prvHandleEstablished+0x164>
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d10a      	bne.n	800fbe8 <prvHandleEstablished+0x17a>
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	64bb      	str	r3, [r7, #72]	@ 0x48

                        /* This action is necessary to ensure proper handling of any subsequent packets that
                         * may arrive after the refused FIN packet. Note that we only update it when the sequence
                         * of FIN packet is correct. Otherwise, we wait for re-transmission. */
                        if( lDistance <= 1 )
 800fbd6:	6a3b      	ldr	r3, [r7, #32]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	dc0a      	bgt.n	800fbf2 <prvHandleEstablished+0x184>
                        {
                            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800fbdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbde:	695b      	ldr	r3, [r3, #20]
 800fbe0:	1c5a      	adds	r2, r3, #1
 800fbe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbe4:	611a      	str	r2, [r3, #16]
                        if( lDistance <= 1 )
 800fbe6:	e004      	b.n	800fbf2 <prvHandleEstablished+0x184>
                        }
                    }
                    else if( lDistance > 1 )
 800fbe8:	6a3b      	ldr	r3, [r7, #32]
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	dd01      	ble.n	800fbf2 <prvHandleEstablished+0x184>
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
                                                 ( int ) lDistance,
                                                 ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                        xMayClose = pdFALSE;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	64bb      	str	r3, [r7, #72]	@ 0x48
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 800fbf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00d      	beq.n	800fc14 <prvHandleEstablished+0x1a6>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800fbfe:	f043 0320 	orr.w	r3, r3, #32
 800fc02:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f7ff fd96 	bl	800f73e <prvTCPHandleFin>
 800fc12:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 800fc14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d131      	bne.n	800fc7e <prvHandleEstablished+0x210>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800fc1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc1c:	2210      	movs	r2, #16
 800fc1e:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d01d      	beq.n	800fc62 <prvHandleEstablished+0x1f4>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	f7fb f936 	bl	800ae98 <uxIPHeaderSizeSocket>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	4413      	add	r3, r2
 800fc32:	3314      	adds	r3, #20
 800fc34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800fc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc38:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	3314      	adds	r3, #20
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc48:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800fc50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d003      	beq.n	800fc62 <prvHandleEstablished+0x1f4>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800fc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc60:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d10a      	bne.n	800fc7e <prvHandleEstablished+0x210>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800fc68:	683a      	ldr	r2, [r7, #0]
 800fc6a:	68b9      	ldr	r1, [r7, #8]
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f000 fdb2 	bl	80107d6 <prvTCPPrepareSend>
 800fc72:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	dd01      	ble.n	800fc7e <prvHandleEstablished+0x210>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 800fc7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800fc80:	4618      	mov	r0, r3
 800fc82:	3754      	adds	r7, #84	@ 0x54
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd90      	pop	{r4, r7, pc}

0800fc88 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800fc88:	b590      	push	{r4, r7, lr}
 800fc8a:	b08f      	sub	sp, #60	@ 0x3c
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fb f8e1 	bl	800ae64 <uxIPHeaderSizePacket>
 800fca2:	4603      	mov	r3, r0
 800fca4:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800fca6:	4423      	add	r3, r4
 800fca8:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800fcb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcbe:	7b5b      	ldrb	r3, [r3, #13]
 800fcc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800fcca:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f107 0208 	add.w	r2, r7, #8
 800fcd8:	4611      	mov	r1, r2
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff fbcf 	bl	800f47e <prvCheckRxData>
 800fce0:	4603      	mov	r3, r0
 800fce2:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fcea:	2b04      	cmp	r3, #4
 800fcec:	d90c      	bls.n	800fd08 <prvTCPHandleState+0x80>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	691a      	ldr	r2, [r3, #16]
 800fcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d106      	bne.n	800fd08 <prvTCPHandleState+0x80>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800fd00:	f043 0301 	orr.w	r3, r3, #1
 800fd04:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 800fd08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	441a      	add	r2, r3
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	699b      	ldr	r3, [r3, #24]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	dd04      	ble.n	800fd26 <prvTCPHandleState+0x9e>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800fd1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	441a      	add	r2, r3
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800fd26:	68b9      	ldr	r1, [r7, #8]
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7ff fc1c 	bl	800f56c <prvStoreRxData>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	da03      	bge.n	800fd42 <prvTCPHandleState+0xba>
        {
            xSendLength = -1;
 800fd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd40:	e0ab      	b.n	800fe9a <prvTCPHandleState+0x212>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4619      	mov	r1, r3
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 fef9 	bl	8010b40 <prvSetOptions>
 800fd4e:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fd56:	2b04      	cmp	r3, #4
 800fd58:	d109      	bne.n	800fd6e <prvTCPHandleState+0xe6>
 800fd5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fd5e:	f003 031f 	and.w	r3, r3, #31
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	d103      	bne.n	800fd6e <prvTCPHandleState+0xe6>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800fd66:	2103      	movs	r1, #3
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f7fe fdf1 	bl	800e950 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800fd6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d022      	beq.n	800fdc0 <prvTCPHandleState+0x138>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800fd80:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d11a      	bne.n	800fdc0 <prvTCPHandleState+0x138>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800fd8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	441a      	add	r2, r3
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800fd9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd9e:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800fda8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d106      	bne.n	800fdc0 <prvTCPHandleState+0x138>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800fdb8:	f043 0302 	orr.w	r3, r3, #2
 800fdbc:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fdc6:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
 800fdca:	2b0b      	cmp	r3, #11
 800fdcc:	d864      	bhi.n	800fe98 <prvTCPHandleState+0x210>
 800fdce:	a201      	add	r2, pc, #4	@ (adr r2, 800fdd4 <prvTCPHandleState+0x14c>)
 800fdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd4:	0800fe99 	.word	0x0800fe99
 800fdd8:	0800fe99 	.word	0x0800fe99
 800fddc:	0800fe67 	.word	0x0800fe67
 800fde0:	0800fe05 	.word	0x0800fe05
 800fde4:	0800fe67 	.word	0x0800fe67
 800fde8:	0800fe79 	.word	0x0800fe79
 800fdec:	0800fe89 	.word	0x0800fe89
 800fdf0:	0800fe89 	.word	0x0800fe89
 800fdf4:	0800fe99 	.word	0x0800fe99
 800fdf8:	0800fe99 	.word	0x0800fe99
 800fdfc:	0800fe89 	.word	0x0800fe89
 800fe00:	0800fe99 	.word	0x0800fe99
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800fe04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fbe4 	bl	80105d4 <prvSetSynAckOptions>
 800fe0c:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800fe0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe10:	2212      	movs	r2, #18
 800fe12:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f7fb f83f 	bl	800ae98 <uxIPHeaderSizeSocket>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe1e:	4413      	add	r3, r2
 800fe20:	3314      	adds	r3, #20
 800fe22:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	3314      	adds	r3, #20
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	b2da      	uxtb	r2, r3
 800fe34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe36:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800fe38:	2104      	movs	r1, #4
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f7fe fd88 	bl	800e950 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800fe40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe42:	1c5a      	adds	r2, r3, #1
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800fe48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe4a:	1c5a      	adds	r2, r3, #1
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	69db      	ldr	r3, [r3, #28]
 800fe54:	1c5a      	adds	r2, r3, #1
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	69db      	ldr	r3, [r3, #28]
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	621a      	str	r2, [r3, #32]
                    break;
 800fe64:	e019      	b.n	800fe9a <prvTCPHandleState+0x212>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	6819      	ldr	r1, [r3, #0]
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe6c:	697a      	ldr	r2, [r7, #20]
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7ff fd0a 	bl	800f888 <prvHandleSynReceived>
 800fe74:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800fe76:	e010      	b.n	800fe9a <prvTCPHandleState+0x212>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800fe78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe7a:	697a      	ldr	r2, [r7, #20]
 800fe7c:	6839      	ldr	r1, [r7, #0]
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7ff fdf5 	bl	800fa6e <prvHandleEstablished>
 800fe84:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800fe86:	e008      	b.n	800fe9a <prvTCPHandleState+0x212>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff fc55 	bl	800f73e <prvTCPHandleFin>
 800fe94:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800fe96:	e000      	b.n	800fe9a <prvTCPHandleState+0x212>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800fe98:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800fe9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	dd06      	ble.n	800feae <prvTCPHandleState+0x226>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800fea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	6839      	ldr	r1, [r7, #0]
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 feb0 	bl	8010c0c <prvSendData>
 800feac:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 800feae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800feb0:	4618      	mov	r0, r3
 800feb2:	373c      	adds	r7, #60	@ 0x3c
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd90      	pop	{r4, r7, pc}

0800feb8 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800feb8:	b580      	push	{r7, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 800fec2:	2300      	movs	r3, #0
 800fec4:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800fec6:	6838      	ldr	r0, [r7, #0]
 800fec8:	f7fa ffcc 	bl	800ae64 <uxIPHeaderSizePacket>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b14      	cmp	r3, #20
 800fed0:	d105      	bne.n	800fede <prvHandleListen+0x26>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipSIZE_OF_IPv4_HEADER:
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 f89c 	bl	8010012 <prvHandleListen_IPV4>
 800feda:	60f8      	str	r0, [r7, #12]
                    break;
 800fedc:	e000      	b.n	800fee0 <prvHandleListen+0x28>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 800fede:	bf00      	nop
        }

        return pxNewSocket;
 800fee0:	68fb      	ldr	r3, [r7, #12]
    }
 800fee2:	4618      	mov	r0, r3
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 800feea:	b580      	push	{r7, lr}
 800feec:	b08a      	sub	sp, #40	@ 0x28
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	6a1a      	ldr	r2, [r3, #32]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d009      	beq.n	800ffa0 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	645a      	str	r2, [r3, #68]	@ 0x44
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff98:	f043 0205 	orr.w	r2, r3, #5
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	649a      	str	r2, [r3, #72]	@ 0x48
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 800ffa0:	f107 030c 	add.w	r3, r7, #12
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	6838      	ldr	r0, [r7, #0]
 800ffa8:	f7fd fc45 	bl	800d836 <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800ffb2:	f043 0304 	orr.w	r3, r3, #4
 800ffb6:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	683a      	ldr	r2, [r7, #0]
 800ffbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800ffc8:	3301      	adds	r3, #1
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d103      	bne.n	800ffe4 <prvTCPSocketCopy+0xfa>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800ffe4:	f107 010c 	add.w	r1, r7, #12
 800ffe8:	2301      	movs	r3, #1
 800ffea:	2218      	movs	r2, #24
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7fc fedd 	bl	800cdac <vSocketBind>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d005      	beq.n	8010004 <prvTCPSocketCopy+0x11a>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
            ( void ) vSocketClose( pxNewSocket );
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7fc ff51 	bl	800cea0 <vSocketClose>
            xResult = pdFALSE;
 800fffe:	2300      	movs	r3, #0
 8010000:	627b      	str	r3, [r7, #36]	@ 0x24
 8010002:	e001      	b.n	8010008 <prvTCPSocketCopy+0x11e>
        }
        else
        {
            xResult = pdTRUE;
 8010004:	2301      	movs	r3, #1
 8010006:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8010008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801000a:	4618      	mov	r0, r3
 801000c:	3728      	adds	r7, #40	@ 0x28
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8010012:	b590      	push	{r4, r7, lr}
 8010014:	b08d      	sub	sp, #52	@ 0x34
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
 801001a:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 801001c:	2300      	movs	r3, #0
 801001e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8010020:	2300      	movs	r3, #0
 8010022:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 8010024:	2300      	movs	r3, #0
 8010026:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8010028:	2300      	movs	r3, #0
 801002a:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 801002c:	2300      	movs	r3, #0
 801002e:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d008      	beq.n	8010048 <prvHandleListen_IPV4+0x36>
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d005      	beq.n	8010048 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010040:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010046:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8010048:	6a3b      	ldr	r3, [r7, #32]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d015      	beq.n	801007a <prvHandleListen_IPV4+0x68>
 801004e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010050:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8010054:	6a3b      	ldr	r3, [r7, #32]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	429a      	cmp	r2, r3
 801005a:	d10e      	bne.n	801007a <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 801005c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801005e:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8010066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010068:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 801006c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801006e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8010070:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8010072:	f7fa ff5b 	bl	800af2c <ulApplicationGetNextSequenceNumber>
 8010076:	6278      	str	r0, [r7, #36]	@ 0x24
 8010078:	e001      	b.n	801007e <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 801007a:	2300      	movs	r3, #0
 801007c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 801007e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010080:	2b00      	cmp	r3, #0
 8010082:	d03f      	beq.n	8010104 <prvHandleListen_IPV4+0xf2>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801008a:	f003 0308 	and.w	r3, r3, #8
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00d      	beq.n	80100b0 <prvHandleListen_IPV4+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 801009e:	f043 0304 	orr.w	r3, r3, #4
 80100a2:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80100ae:	e029      	b.n	8010104 <prvHandleListen_IPV4+0xf2>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 80100b0:	2300      	movs	r3, #0
 80100b2:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8b3 2078 	ldrh.w	r2, [r3, #120]	@ 0x78
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d303      	bcc.n	80100cc <prvHandleListen_IPV4+0xba>
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80100c4:	6838      	ldr	r0, [r7, #0]
 80100c6:	f000 fe7b 	bl	8010dc0 <prvTCPSendReset>
 80100ca:	e01b      	b.n	8010104 <prvHandleListen_IPV4+0xf2>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80100cc:	2206      	movs	r2, #6
 80100ce:	2101      	movs	r1, #1
 80100d0:	2002      	movs	r0, #2
 80100d2:	f7fc fae1 	bl	800c698 <FreeRTOS_socket>
 80100d6:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d003      	beq.n	80100e6 <prvHandleListen_IPV4+0xd4>
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e4:	d103      	bne.n	80100ee <prvHandleListen_IPV4+0xdc>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80100e6:	6838      	ldr	r0, [r7, #0]
 80100e8:	f000 fe6a 	bl	8010dc0 <prvTCPSendReset>
 80100ec:	e00a      	b.n	8010104 <prvHandleListen_IPV4+0xf2>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80100ee:	6879      	ldr	r1, [r7, #4]
 80100f0:	6978      	ldr	r0, [r7, #20]
 80100f2:	f7ff fefa 	bl	800feea <prvTCPSocketCopy>
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d003      	beq.n	8010104 <prvHandleListen_IPV4+0xf2>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8010100:	2301      	movs	r3, #1
 8010102:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8010104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010106:	2b00      	cmp	r3, #0
 8010108:	d052      	beq.n	80101b0 <prvHandleListen_IPV4+0x19e>
 801010a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801010c:	2b00      	cmp	r3, #0
 801010e:	d04f      	beq.n	80101b0 <prvHandleListen_IPV4+0x19e>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010114:	6838      	ldr	r0, [r7, #0]
 8010116:	f7fa fea5 	bl	800ae64 <uxIPHeaderSizePacket>
 801011a:	4603      	mov	r3, r0
 801011c:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801011e:	4423      	add	r3, r4
 8010120:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010128:	651a      	str	r2, [r3, #80]	@ 0x50
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 801012a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801012c:	7a13      	ldrb	r3, [r2, #8]
 801012e:	f023 0301 	bic.w	r3, r3, #1
 8010132:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8010134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010136:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8010138:	b29a      	uxth	r2, r3
 801013a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801013c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8010140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010142:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8010146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010148:	659a      	str	r2, [r3, #88]	@ 0x58
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801014a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801014c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801014e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	685a      	ldr	r2, [r3, #4]
 8010156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010158:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
            prvSocketSetMSS( pxReturn );
 801015c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801015e:	f001 f8bc 	bl	80112da <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8010162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010164:	f000 f9cf 	bl	8010506 <prvTCPCreateWindow>
 8010168:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d008      	beq.n	8010182 <prvHandleListen_IPV4+0x170>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	2b01      	cmp	r3, #1
 8010174:	d102      	bne.n	801017c <prvHandleListen_IPV4+0x16a>
                {
                    ( void ) vSocketClose( pxReturn );
 8010176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010178:	f7fc fe92 	bl	800cea0 <vSocketClose>
                }

                pxReturn = NULL;
 801017c:	2300      	movs	r3, #0
 801017e:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8010180:	e016      	b.n	80101b0 <prvHandleListen_IPV4+0x19e>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8010182:	2103      	movs	r1, #3
 8010184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010186:	f7fe fbe3 	bl	800e950 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801018e:	2b5a      	cmp	r3, #90	@ 0x5a
 8010190:	d902      	bls.n	8010198 <prvHandleListen_IPV4+0x186>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8010192:	235a      	movs	r3, #90	@ 0x5a
 8010194:	61bb      	str	r3, [r7, #24]
 8010196:	e002      	b.n	801019e <prvHandleListen_IPV4+0x18c>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801019c:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801019e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a0:	f103 00ae 	add.w	r0, r3, #174	@ 0xae
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80101a8:	69ba      	ldr	r2, [r7, #24]
 80101aa:	4619      	mov	r1, r3
 80101ac:	f008 fdb5 	bl	8018d1a <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80101b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3734      	adds	r7, #52	@ 0x34
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd90      	pop	{r4, r7, pc}

080101ba <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b084      	sub	sp, #16
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 80101c2:	2301      	movs	r3, #1
 80101c4:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 80101cc:	f003 0308 	and.w	r3, r3, #8
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d107      	bne.n	80101e6 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f9c3 	bl	8010562 <prvTCPPrepareConnect>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d001      	beq.n	80101e6 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( resolution ) is not yet ready. */
                xReturn = pdFALSE;
 80101e2:	2300      	movs	r3, #0
 80101e4:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 80101e6:	68fb      	ldr	r3, [r7, #12]
    }
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b088      	sub	sp, #32
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 80101f8:	2300      	movs	r3, #0
 80101fa:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 80101fc:	2300      	movs	r3, #0
 80101fe:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010206:	2b02      	cmp	r3, #2
 8010208:	d010      	beq.n	801022c <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 801020a:	2300      	movs	r3, #0
 801020c:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 801020e:	f107 030c 	add.w	r3, r7, #12
 8010212:	4619      	mov	r1, r3
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 f84e 	bl	80102b6 <prvTCPSendRepeated>
 801021a:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d044      	beq.n	80102ac <prvTCPSendPacket+0xbc>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	4618      	mov	r0, r3
 8010226:	f002 fc61 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
 801022a:	e03f      	b.n	80102ac <prvTCPSendPacket+0xbc>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010232:	2b02      	cmp	r3, #2
 8010234:	d904      	bls.n	8010240 <prvTCPSendPacket+0x50>
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8010236:	2108      	movs	r1, #8
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7fe fb89 	bl	800e950 <vTCPStateChange>
 801023e:	e035      	b.n	80102ac <prvTCPSendPacket+0xbc>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7ff ffba 	bl	80101ba <prvTCPMakeSurePrepared>
 8010246:	4603      	mov	r3, r0
 8010248:	2b01      	cmp	r3, #1
 801024a:	d12f      	bne.n	80102ac <prvTCPSendPacket+0xbc>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f7fa fe23 	bl	800ae98 <uxIPHeaderSizeSocket>
 8010252:	4603      	mov	r3, r0
 8010254:	330e      	adds	r3, #14
 8010256:	33a8      	adds	r3, #168	@ 0xa8
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	4413      	add	r3, r2
 801025c:	3306      	adds	r3, #6
 801025e:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	4619      	mov	r1, r3
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 f9b5 	bl	80105d4 <prvSetSynAckOptions>
 801026a:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7fa fe13 	bl	800ae98 <uxIPHeaderSizeSocket>
 8010272:	4602      	mov	r2, r0
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	4413      	add	r3, r2
 8010278:	3314      	adds	r3, #20
 801027a:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 801027c:	69bb      	ldr	r3, [r7, #24]
 801027e:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	b2db      	uxtb	r3, r3
 8010284:	3314      	adds	r3, #20
 8010286:	b2db      	uxtb	r3, r3
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	b2da      	uxtb	r2, r3
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010296:	3301      	adds	r3, #1
 8010298:	b2da      	uxtb	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 80102a0:	69fa      	ldr	r2, [r7, #28]
 80102a2:	2300      	movs	r3, #0
 80102a4:	2100      	movs	r1, #0
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 f835 	bl	8010316 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 80102ac:	69fb      	ldr	r3, [r7, #28]
    }
 80102ae:	4618      	mov	r0, r3
 80102b0:	3720      	adds	r7, #32
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b086      	sub	sp, #24
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 80102c4:	2300      	movs	r3, #0
 80102c6:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 80102c8:	2300      	movs	r3, #0
 80102ca:	617b      	str	r3, [r7, #20]
 80102cc:	e019      	b.n	8010302 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	6839      	ldr	r1, [r7, #0]
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f000 fa7f 	bl	80107d6 <prvTCPPrepareSend>
 80102d8:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	dd14      	ble.n	801030a <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	6819      	ldr	r1, [r3, #0]
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	2301      	movs	r3, #1
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 f814 	bl	8010316 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	2200      	movs	r2, #0
 80102f2:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	4413      	add	r3, r2
 80102fa:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	3301      	adds	r3, #1
 8010300:	617b      	str	r3, [r7, #20]
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	2b07      	cmp	r3, #7
 8010306:	d9e2      	bls.n	80102ce <prvTCPSendRepeated+0x18>
 8010308:	e000      	b.n	801030c <prvTCPSendRepeated+0x56>
                break;
 801030a:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 801030c:	693b      	ldr	r3, [r7, #16]
    }
 801030e:	4618      	mov	r0, r3
 8010310:	3718      	adds	r7, #24
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8010316:	b580      	push	{r7, lr}
 8010318:	b088      	sub	sp, #32
 801031a:	af00      	add	r7, sp, #0
 801031c:	60f8      	str	r0, [r7, #12]
 801031e:	60b9      	str	r1, [r7, #8]
 8010320:	607a      	str	r2, [r7, #4]
 8010322:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	61fb      	str	r3, [r7, #28]
        BaseType_t xIsIPv6 = pdFALSE;
 8010328:	2300      	movs	r3, #0
 801032a:	61bb      	str	r3, [r7, #24]

        if( pxNetworkBuffer != NULL )
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d110      	bne.n	8010354 <prvTCPReturnPacket+0x3e>
                {
                    xIsIPv6 = pdTRUE;
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d10d      	bne.n	8010354 <prvTCPReturnPacket+0x3e>
	__asm volatile
 8010338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801033c:	b672      	cpsid	i
 801033e:	f383 8811 	msr	BASEPRI, r3
 8010342:	f3bf 8f6f 	isb	sy
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	b662      	cpsie	i
 801034c:	617b      	str	r3, [r7, #20]
}
 801034e:	bf00      	nop
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8010350:	bf00      	nop
 8010352:	e7fd      	b.n	8010350 <prvTCPReturnPacket+0x3a>
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d105      	bne.n	8010366 <prvTCPReturnPacket+0x50>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	68b9      	ldr	r1, [r7, #8]
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f000 fd3b 	bl	8010ddc <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8010366:	bf00      	nop
 8010368:	3720      	adds	r7, #32
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 801036e:	b580      	push	{r7, lr}
 8010370:	b08a      	sub	sp, #40	@ 0x28
 8010372:	af00      	add	r7, sp, #0
 8010374:	60f8      	str	r0, [r7, #12]
 8010376:	60b9      	str	r1, [r7, #8]
 8010378:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010380:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801038a:	4413      	add	r3, r2
 801038c:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d007      	beq.n	80103a8 <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe f82e 	bl	800e400 <uxStreamBufferFrontSpace>
 80103a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80103a6:	e003      	b.n	80103b0 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80103ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fb fabc 	bl	800b934 <FreeRTOS_min_uint32>
 80103bc:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80103c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d107      	bne.n	80103de <prvTCPReturn_CheckTCPWindow+0x70>
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80103d4:	f003 0304 	and.w	r3, r3, #4
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 80103de:	2300      	movs	r3, #0
 80103e0:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80103e8:	461a      	mov	r2, r3
 80103ea:	6a3b      	ldr	r3, [r7, #32]
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d20a      	bcs.n	8010406 <prvTCPReturn_CheckTCPWindow+0x98>
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80103f6:	461a      	mov	r2, r3
 80103f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d303      	bcc.n	8010406 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010404:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 801040c:	461a      	mov	r2, r3
 801040e:	6a3b      	ldr	r3, [r7, #32]
 8010410:	40d3      	lsrs	r3, r2
 8010412:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801041a:	4293      	cmp	r3, r2
 801041c:	d902      	bls.n	8010424 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 801041e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8010422:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	b29a      	uxth	r2, r3
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 801042c:	68fa      	ldr	r2, [r7, #12]
 801042e:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8010432:	f023 0301 	bic.w	r3, r3, #1
 8010436:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	691a      	ldr	r2, [r3, #16]
 801043e:	6a3b      	ldr	r3, [r7, #32]
 8010440:	441a      	add	r2, r3
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	671a      	str	r2, [r3, #112]	@ 0x70
    }
 8010446:	bf00      	nop
 8010448:	3728      	adds	r7, #40	@ 0x28
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 801044e:	b580      	push	{r7, lr}
 8010450:	b088      	sub	sp, #32
 8010452:	af00      	add	r7, sp, #0
 8010454:	60f8      	str	r0, [r7, #12]
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	607a      	str	r2, [r7, #4]
 801045a:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010462:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801046c:	4413      	add	r3, r2
 801046e:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8010476:	f003 0302 	and.w	r3, r3, #2
 801047a:	b2db      	uxtb	r3, r3
 801047c:	2b00      	cmp	r3, #0
 801047e:	d018      	beq.n	80104b2 <prvTCPReturn_SetSequenceNumber+0x64>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8010486:	f023 0302 	bic.w	r3, r3, #2
 801048a:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8010494:	f043 0304 	orr.w	r3, r3, #4
 8010498:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80104a2:	1e5a      	subs	r2, r3, #1
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	685a      	ldr	r2, [r3, #4]
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	605a      	str	r2, [r3, #4]
 80104b0:	e021      	b.n	80104f6 <prvTCPReturn_SetSequenceNumber+0xa8>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 80104bc:	69bb      	ldr	r3, [r7, #24]
 80104be:	7b5b      	ldrb	r3, [r3, #13]
 80104c0:	f003 0301 	and.w	r3, r3, #1
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d016      	beq.n	80104f6 <prvTCPReturn_SetSequenceNumber+0xa8>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f7fa fce5 	bl	800ae98 <uxIPHeaderSizeSocket>
 80104ce:	4602      	mov	r2, r0
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	1a9b      	subs	r3, r3, r2
 80104d4:	3b14      	subs	r3, #20
 80104d6:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	441a      	add	r2, r3
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d006      	beq.n	80104f6 <prvTCPReturn_SetSequenceNumber+0xa8>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	7b5b      	ldrb	r3, [r3, #13]
 80104ec:	f023 0301 	bic.w	r3, r3, #1
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	735a      	strb	r2, [r3, #13]
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	691a      	ldr	r2, [r3, #16]
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	609a      	str	r2, [r3, #8]
    }
 80104fe:	bf00      	nop
 8010500:	3720      	adds	r7, #32
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8010506:	b5b0      	push	{r4, r5, r7, lr}
 8010508:	b088      	sub	sp, #32
 801050a:	af02      	add	r7, sp, #8
 801050c:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8010514:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801051c:	613b      	str	r3, [r7, #16]
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801052a:	fb02 f103 	mul.w	r1, r2, r3
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8010534:	fb02 f403 	mul.w	r4, r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 5134 	ldr.w	r5, [r3, #308]	@ 0x134
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
        xReturn = xTCPWindowCreate(
 801054a:	9201      	str	r2, [sp, #4]
 801054c:	9300      	str	r3, [sp, #0]
 801054e:	462b      	mov	r3, r5
 8010550:	4622      	mov	r2, r4
 8010552:	f001 f97f 	bl	8011854 <xTCPWindowCreate>
 8010556:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8010558:	68fb      	ldr	r3, [r7, #12]
    }
 801055a:	4618      	mov	r0, r3
 801055c:	3718      	adds	r7, #24
 801055e:	46bd      	mov	sp, r7
 8010560:	bdb0      	pop	{r4, r5, r7, pc}

08010562 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found through address resolution.
 *       In case the target IP address is not within the netmask, the hardware address
 *       of the gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8010562:	b580      	push	{r7, lr}
 8010564:	b084      	sub	sp, #16
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 801056a:	2301      	movs	r3, #1
 801056c:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	7a1b      	ldrb	r3, [r3, #8]
 8010572:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010576:	b2db      	uxtb	r3, r3
 8010578:	2b00      	cmp	r3, #0
 801057a:	d104      	bne.n	8010586 <prvTCPPrepareConnect+0x24>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 fdff 	bl	8011180 <prvTCPPrepareConnect_IPV4>
 8010582:	60f8      	str	r0, [r7, #12]
                    break;
 8010584:	e000      	b.n	8010588 <prvTCPPrepareConnect+0x26>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8010586:	bf00      	nop
        }

        return xReturn;
 8010588:	68fb      	ldr	r3, [r7, #12]
    }
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8010592:	b480      	push	{r7}
 8010594:	b085      	sub	sp, #20
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
 80105a6:	fb02 f303 	mul.w	r3, r2, r3
 80105aa:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 80105ac:	2300      	movs	r3, #0
 80105ae:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 80105b0:	e005      	b.n	80105be <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	085b      	lsrs	r3, r3, #1
 80105b6:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 80105b8:	7afb      	ldrb	r3, [r7, #11]
 80105ba:	3301      	adds	r3, #1
 80105bc:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105c4:	d2f5      	bcs.n	80105b2 <prvWinScaleFactor+0x20>
            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 80105c6:	7afb      	ldrb	r3, [r7, #11]
        }
 80105c8:	4618      	mov	r0, r3
 80105ca:	3714      	adds	r7, #20
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80105e4:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	2202      	movs	r2, #2
 80105ea:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2204      	movs	r2, #4
 80105f0:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 80105f2:	89fb      	ldrh	r3, [r7, #14]
 80105f4:	0a1b      	lsrs	r3, r3, #8
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 80105fe:	89fb      	ldrh	r3, [r7, #14]
 8010600:	b2da      	uxtb	r2, r3
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f7ff ffc3 	bl	8010592 <prvWinScaleFactor>
 801060c:	4603      	mov	r3, r0
 801060e:	461a      	mov	r2, r3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	2201      	movs	r2, #1
 801061a:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	2203      	movs	r2, #3
 8010620:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	2203      	movs	r2, #3
 8010626:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8010632:	2308      	movs	r3, #8
 8010634:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	4413      	add	r3, r2
 801063c:	3314      	adds	r3, #20
 801063e:	2201      	movs	r2, #1
 8010640:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	3301      	adds	r3, #1
 8010646:	683a      	ldr	r2, [r7, #0]
 8010648:	4413      	add	r3, r2
 801064a:	2201      	movs	r2, #1
 801064c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	3302      	adds	r3, #2
 8010652:	683a      	ldr	r2, [r7, #0]
 8010654:	4413      	add	r3, r2
 8010656:	2204      	movs	r2, #4
 8010658:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	3303      	adds	r3, #3
 801065e:	683a      	ldr	r2, [r7, #0]
 8010660:	4413      	add	r3, r2
 8010662:	2202      	movs	r2, #2
 8010664:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	3304      	adds	r3, #4
 801066a:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 801066c:	68bb      	ldr	r3, [r7, #8]
    }
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 8010678:	b580      	push	{r7, lr}
 801067a:	b088      	sub	sp, #32
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	607a      	str	r2, [r7, #4]
 8010684:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 8010686:	4b3c      	ldr	r3, [pc, #240]	@ (8010778 <prvTCPBufferResize+0x100>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00b      	beq.n	80106a6 <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 801068e:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8010692:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d102      	bne.n	80106a0 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 801069a:	2301      	movs	r3, #1
 801069c:	617b      	str	r3, [r7, #20]
 801069e:	e020      	b.n	80106e2 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80106a0:	2300      	movs	r3, #0
 80106a2:	617b      	str	r3, [r7, #20]
 80106a4:	e01d      	b.n	80106e2 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f7fa fbf6 	bl	800ae98 <uxIPHeaderSizeSocket>
 80106ac:	4602      	mov	r2, r0
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	4413      	add	r3, r2
 80106b2:	3322      	adds	r3, #34	@ 0x22
 80106b4:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	69ba      	ldr	r2, [r7, #24]
 80106ba:	4413      	add	r3, r2
 80106bc:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	2b59      	cmp	r3, #89	@ 0x59
 80106c2:	d801      	bhi.n	80106c8 <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80106c4:	235a      	movs	r3, #90	@ 0x5a
 80106c6:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d004      	beq.n	80106d8 <prvTCPBufferResize+0x60>
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106d2:	69ba      	ldr	r2, [r7, #24]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d902      	bls.n	80106de <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 80106d8:	2301      	movs	r3, #1
 80106da:	617b      	str	r3, [r7, #20]
 80106dc:	e001      	b.n	80106e2 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80106de:	2300      	movs	r3, #0
 80106e0:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d023      	beq.n	8010730 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 80106e8:	2100      	movs	r1, #0
 80106ea:	69b8      	ldr	r0, [r7, #24]
 80106ec:	f002 f952 	bl	8012994 <pxGetNetworkBufferWithDescriptor>
 80106f0:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d03a      	beq.n	801076e <prvTCPBufferResize+0xf6>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	69ba      	ldr	r2, [r7, #24]
 80106fc:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d00c      	beq.n	801071e <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010710:	461a      	mov	r2, r3
 8010712:	f008 fb02 	bl	8018d1a <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8010716:	68b8      	ldr	r0, [r7, #8]
 8010718:	f002 f9e8 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
 801071c:	e027      	b.n	801076e <prvTCPBufferResize+0xf6>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	33ae      	adds	r3, #174	@ 0xae
 8010726:	225a      	movs	r2, #90	@ 0x5a
 8010728:	4619      	mov	r1, r3
 801072a:	f008 faf6 	bl	8018d1a <memcpy>
 801072e:	e01e      	b.n	801076e <prvTCPBufferResize+0xf6>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d10d      	bne.n	8010752 <prvTCPBufferResize+0xda>
	__asm volatile
 8010736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801073a:	b672      	cpsid	i
 801073c:	f383 8811 	msr	BASEPRI, r3
 8010740:	f3bf 8f6f 	isb	sy
 8010744:	f3bf 8f4f 	dsb	sy
 8010748:	b662      	cpsie	i
 801074a:	613b      	str	r3, [r7, #16]
}
 801074c:	bf00      	nop
 801074e:	bf00      	nop
 8010750:	e7fd      	b.n	801074e <prvTCPBufferResize+0xd6>
            pxReturn = pxNetworkBuffer;
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f7fa fb9e 	bl	800ae98 <uxIPHeaderSizeSocket>
 801075c:	4602      	mov	r2, r0
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	441a      	add	r2, r3
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	4413      	add	r3, r2
 8010766:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 801076e:	69fb      	ldr	r3, [r7, #28]
    }
 8010770:	4618      	mov	r0, r3
 8010772:	3720      	adds	r7, #32
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	08019ee8 	.word	0x08019ee8

0801077c <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 8010788:	2300      	movs	r3, #0
 801078a:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d008      	beq.n	80107a4 <prvTCPReturn_SetEndPoint+0x28>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010796:	2b00      	cmp	r3, #0
 8010798:	d004      	beq.n	80107a4 <prvTCPReturn_SetEndPoint+0x28>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80107a2:	e014      	b.n	80107ce <prvTCPReturn_SetEndPoint+0x52>
        }
        else
        {
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );

            switch( uxIPHeaderSize )
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b14      	cmp	r3, #20
 80107a8:	d10c      	bne.n	80107c4 <prvTCPReturn_SetEndPoint+0x48>
                        /*_RB_ Was FreeRTOS_FindEndPointOnIP_IPv4() but changed to FreeRTOS_FindEndPointOnNetMask()
                         * as it is using the destination address.  I'm confused here as sometimes the addresses are swapped. */
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ae:	330e      	adds	r3, #14
 80107b0:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress );
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	691b      	ldr	r3, [r3, #16]
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fb fdb0 	bl	800c31c <FreeRTOS_FindEndPointOnNetMask>
 80107bc:	4602      	mov	r2, r0
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	631a      	str	r2, [r3, #48]	@ 0x30
                        {
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
                                               ( unsigned int ) FreeRTOS_ntohl( pxIPHeader->ulSourceIPAddress ),
                                               ( unsigned int ) FreeRTOS_ntohl( pxIPHeader->ulDestinationIPAddress ) ) );
                        }
                        break;
 80107c2:	e003      	b.n	80107cc <prvTCPReturn_SetEndPoint+0x50>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* Shouldn't reach here */
                    pxNetworkBuffer->pxEndPoint = NULL;
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	2200      	movs	r2, #0
 80107c8:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 80107ca:	bf00      	nop
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 80107cc:	bf00      	nop
 80107ce:	bf00      	nop
 80107d0:	3718      	adds	r7, #24
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b096      	sub	sp, #88	@ 0x58
 80107da:	af02      	add	r7, sp, #8
 80107dc:	60f8      	str	r0, [r7, #12]
 80107de:	60b9      	str	r1, [r7, #8]
 80107e0:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d004      	beq.n	80107f8 <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107f6:	e002      	b.n	80107fe <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	33ae      	adds	r3, #174	@ 0xae
 80107fc:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f7fa fb4a 	bl	800ae98 <uxIPHeaderSizeSocket>
 8010804:	4603      	mov	r3, r0
 8010806:	330e      	adds	r3, #14
 8010808:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801080a:	4413      	add	r3, r2
 801080c:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010814:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 801081a:	2300      	movs	r3, #0
 801081c:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 801081e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010820:	7b5b      	ldrb	r3, [r3, #13]
 8010822:	f043 0310 	orr.w	r3, r3, #16
 8010826:	b2da      	uxtb	r2, r3
 8010828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801082a:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010832:	2b00      	cmp	r3, #0
 8010834:	f000 808d 	beq.w	8010952 <prvTCPPrepareSend+0x17c>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801083e:	2b01      	cmp	r3, #1
 8010840:	d90a      	bls.n	8010858 <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8010848:	f107 0210 	add.w	r2, r7, #16
 801084c:	4619      	mov	r1, r3
 801084e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010850:	f001 fbdf 	bl	8012012 <ulTCPWindowTxGet>
 8010854:	4603      	mov	r3, r0
 8010856:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 8010858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801085a:	2b00      	cmp	r3, #0
 801085c:	dd79      	ble.n	8010952 <prvTCPPrepareSend+0x17c>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	6819      	ldr	r1, [r3, #0]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	f7ff ff06 	bl	8010678 <prvTCPBufferResize>
 801086c:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 801086e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010870:	2b00      	cmp	r3, #0
 8010872:	d06b      	beq.n	801094c <prvTCPPrepareSend+0x176>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010878:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 801087a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801087c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801087e:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f7fa fb09 	bl	800ae98 <uxIPHeaderSizeSocket>
 8010886:	4603      	mov	r3, r0
 8010888:	330e      	adds	r3, #14
 801088a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801088c:	4413      	add	r3, r2
 801088e:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f7fa fb01 	bl	800ae98 <uxIPHeaderSizeSocket>
 8010896:	4602      	mov	r2, r0
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	4413      	add	r3, r2
 801089c:	3322      	adds	r3, #34	@ 0x22
 801089e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80108a0:	4413      	add	r3, r2
 80108a2:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	693a      	ldr	r2, [r7, #16]
 80108b4:	4619      	mov	r1, r3
 80108b6:	f7fd fd74 	bl	800e3a2 <uxStreamBufferDistance>
 80108ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80108c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108c4:	2201      	movs	r2, #1
 80108c6:	9200      	str	r2, [sp, #0]
 80108c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108cc:	f7fd fec7 	bl	800e65e <uxStreamBufferGet>
 80108d0:	62b8      	str	r0, [r7, #40]	@ 0x28
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80108d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d037      	beq.n	8010952 <prvTCPPrepareSend+0x17c>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	4619      	mov	r1, r3
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	461a      	mov	r2, r3
 80108f6:	f7fd fd54 	bl	800e3a2 <uxStreamBufferDistance>
 80108fa:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 80108fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010900:	429a      	cmp	r2, r3
 8010902:	d126      	bne.n	8010952 <prvTCPPrepareSend+0x17c>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	61bb      	str	r3, [r7, #24]
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8010922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010924:	7b5b      	ldrb	r3, [r3, #13]
 8010926:	f043 0301 	orr.w	r3, r3, #1
 801092a:	b2da      	uxtb	r2, r3
 801092c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801092e:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8010930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010936:	441a      	add	r2, r3
 8010938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093a:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 801093c:	68fa      	ldr	r2, [r7, #12]
 801093e:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8010942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010946:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
 801094a:	e002      	b.n	8010952 <prvTCPPrepareSend+0x17c>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 801094c:	f04f 33ff 	mov.w	r3, #4294967295
 8010950:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8010952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010954:	2b00      	cmp	r3, #0
 8010956:	db7e      	blt.n	8010a56 <prvTCPPrepareSend+0x280>
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801095e:	2b05      	cmp	r3, #5
 8010960:	d179      	bne.n	8010a56 <prvTCPPrepareSend+0x280>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8010968:	f003 0320 	and.w	r3, r3, #32
 801096c:	b2db      	uxtb	r3, r3
 801096e:	2b00      	cmp	r3, #0
 8010970:	d029      	beq.n	80109c6 <prvTCPPrepareSend+0x1f0>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8010972:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010974:	f001 fa19 	bl	8011daa <xTCPWindowTxDone>
 8010978:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 801097a:	2b00      	cmp	r3, #0
 801097c:	d023      	beq.n	80109c6 <prvTCPPrepareSend+0x1f0>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8010984:	f023 0320 	bic.w	r3, r3, #32
 8010988:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 801098c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801098e:	7b5b      	ldrb	r3, [r3, #13]
 8010990:	f043 0301 	orr.w	r3, r3, #1
 8010994:	b2da      	uxtb	r2, r3
 8010996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010998:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 80109a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109a4:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 80109ae:	f043 0301 	orr.w	r3, r3, #1
 80109b2:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80109b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b8:	6a1a      	ldr	r2, [r3, #32]
 80109ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109bc:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 80109be:	2106      	movs	r1, #6
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f7fd ffc5 	bl	800e950 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109cc:	2b03      	cmp	r3, #3
 80109ce:	d906      	bls.n	80109de <prvTCPPrepareSend+0x208>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80109d0:	2108      	movs	r1, #8
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f7fd ffbc 	bl	800e950 <vTCPStateChange>
                    lDataLen = -1;
 80109d8:	f04f 33ff 	mov.w	r3, #4294967295
 80109dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80109de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d138      	bne.n	8010a56 <prvTCPPrepareSend+0x280>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 80109ea:	f003 0301 	and.w	r3, r3, #1
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d130      	bne.n	8010a56 <prvTCPPrepareSend+0x280>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 80109f4:	f005 fe1c 	bl	8016630 <xTaskGetTickCount>
 80109f8:	4602      	mov	r2, r0
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a00:	1ad3      	subs	r3, r2, r3
 8010a02:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8010a04:	f247 5330 	movw	r3, #30000	@ 0x7530
 8010a08:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d002      	beq.n	8010a1a <prvTCPPrepareSend+0x244>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8010a14:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8010a18:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d919      	bls.n	8010a56 <prvTCPPrepareSend+0x280>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010a22:	f005 fe05 	bl	8016630 <xTaskGetTickCount>
 8010a26:	4602      	mov	r2, r0
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8010a2e:	68fa      	ldr	r2, [r7, #12]
 8010a30:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8010a34:	f043 0302 	orr.w	r3, r3, #2
 8010a38:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8010a42:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                        pxSocket->u.xTCP.ucKeepRepCount++;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	b2da      	uxtb	r2, r3
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 8010a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	db3e      	blt.n	8010ada <prvTCPPrepareSend+0x304>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8010a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	dc0f      	bgt.n	8010a82 <prvTCPPrepareSend+0x2ac>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8010a68:	f003 0301 	and.w	r3, r3, #1
 8010a6c:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d107      	bne.n	8010a82 <prvTCPPrepareSend+0x2ac>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8010a78:	f003 0302 	and.w	r3, r3, #2
 8010a7c:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d02b      	beq.n	8010ada <prvTCPPrepareSend+0x304>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8010a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a84:	7b5b      	ldrb	r3, [r3, #13]
 8010a86:	f023 0308 	bic.w	r3, r3, #8
 8010a8a:	b2da      	uxtb	r2, r3
 8010a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a8e:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	3314      	adds	r3, #20
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	b2da      	uxtb	r2, r3
 8010a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a9e:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8010aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010aa2:	7b5b      	ldrb	r3, [r3, #13]
 8010aa4:	f043 0310 	orr.w	r3, r3, #16
 8010aa8:	b2da      	uxtb	r2, r3
 8010aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010aac:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8010aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d006      	beq.n	8010ac2 <prvTCPPrepareSend+0x2ec>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8010ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ab6:	7b5b      	ldrb	r3, [r3, #13]
 8010ab8:	f043 0308 	orr.w	r3, r3, #8
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ac0:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	f7fa f9e8 	bl	800ae98 <uxIPHeaderSizeSocket>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4413      	add	r3, r2
 8010ace:	3314      	adds	r3, #20
 8010ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 8010ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ad4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010ad6:	4413      	add	r3, r2
 8010ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8010ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8010adc:	4618      	mov	r0, r3
 8010ade:	3750      	adds	r7, #80	@ 0x50
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fd fca6 	bl	800e444 <uxStreamBufferMidSpace>
 8010af8:	4603      	mov	r3, r0
 8010afa:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	dd1a      	ble.n	8010b38 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8010b08:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010b10:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8010b12:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010b1a:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8010b1c:	f001 f8bd 	bl	8011c9a <lTCPWindowTxAdd>
 8010b20:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	dd07      	ble.n	8010b38 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	4611      	mov	r1, r2
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fd fcad 	bl	800e492 <vStreamBufferMoveMid>
            }
        }
    }
 8010b38:	bf00      	nop
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8010b40:	b590      	push	{r4, r7, lr}
 8010b42:	b089      	sub	sp, #36	@ 0x24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010b4e:	6838      	ldr	r0, [r7, #0]
 8010b50:	f7fa f988 	bl	800ae64 <uxIPHeaderSizePacket>
 8010b54:	4603      	mov	r3, r0
 8010b56:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8010b58:	4423      	add	r3, r4
 8010b5a:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010b66:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010b6e:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d013      	beq.n	8010b9e <prvSetOptions+0x5e>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	3380      	adds	r3, #128	@ 0x80
 8010b7a:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	3314      	adds	r3, #20
 8010b80:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8010b82:	69fa      	ldr	r2, [r7, #28]
 8010b84:	68f9      	ldr	r1, [r7, #12]
 8010b86:	68b8      	ldr	r0, [r7, #8]
 8010b88:	f008 f8c7 	bl	8018d1a <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	b2db      	uxtb	r3, r3
 8010b90:	3314      	adds	r3, #20
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	b2da      	uxtb	r2, r3
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	731a      	strb	r2, [r3, #12]
 8010b9c:	e031      	b.n	8010c02 <prvSetOptions+0xc2>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010ba4:	2b04      	cmp	r3, #4
 8010ba6:	d92c      	bls.n	8010c02 <prvSetOptions+0xc2>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8010bae:	f003 0301 	and.w	r3, r3, #1
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d024      	beq.n	8010c02 <prvSetOptions+0xc2>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8010bbe:	f023 0301 	bic.w	r3, r3, #1
 8010bc2:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            if( xTCPWindowLoggingLevel >= 0 )
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2202      	movs	r2, #2
 8010bca:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	2204      	movs	r2, #4
 8010bd0:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010bd8:	0a1b      	lsrs	r3, r3, #8
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010be8:	b2da      	uxtb	r2, r3
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8010bee:	2304      	movs	r3, #4
 8010bf0:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8010bf2:	69fb      	ldr	r3, [r7, #28]
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	3314      	adds	r3, #20
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	b2da      	uxtb	r2, r3
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 8010c02:	69fb      	ldr	r3, [r7, #28]
    }
 8010c04:	4618      	mov	r0, r3
 8010c06:	3724      	adds	r7, #36	@ 0x24
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd90      	pop	{r4, r7, pc}

08010c0c <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8010c0c:	b590      	push	{r4, r7, lr}
 8010c0e:	b08f      	sub	sp, #60	@ 0x3c
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	60f8      	str	r0, [r7, #12]
 8010c14:	60b9      	str	r1, [r7, #8]
 8010c16:	607a      	str	r2, [r7, #4]
 8010c18:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fa f91d 	bl	800ae64 <uxIPHeaderSizePacket>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8010c2e:	4423      	add	r3, r4
 8010c30:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8010c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fa f90c 	bl	800ae64 <uxIPHeaderSizePacket>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	3314      	adds	r3, #20
 8010c50:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8010c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c54:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	1ad3      	subs	r3, r2, r3
 8010c60:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d04f      	beq.n	8010d16 <prvSendData+0x10a>
 8010c76:	69ba      	ldr	r2, [r7, #24]
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	db4b      	blt.n	8010d16 <prvSendData+0x10a>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8010c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c88:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d143      	bne.n	8010d16 <prvSendData+0x10a>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8010c8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c90:	6a3b      	ldr	r3, [r7, #32]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d13f      	bne.n	8010d16 <prvSendData+0x10a>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8010c9c:	2b05      	cmp	r3, #5
 8010c9e:	d13a      	bne.n	8010d16 <prvSendData+0x10a>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8010ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca2:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8010ca4:	2b10      	cmp	r3, #16
 8010ca6:	d136      	bne.n	8010d16 <prvSendData+0x10a>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010cae:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d00f      	beq.n	8010cde <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d005      	beq.n	8010cd4 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f001 ff0c 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d204      	bcs.n	8010cf0 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2202      	movs	r2, #2
 8010cea:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 8010cee:	e00c      	b.n	8010d0a <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2214      	movs	r2, #20
 8010cf4:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d103      	bne.n	8010d0a <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2201      	movs	r2, #1
 8010d06:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8010d10:	2300      	movs	r3, #0
 8010d12:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8010d14:	e015      	b.n	8010d42 <prvSendData+0x136>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d010      	beq.n	8010d42 <prvSendData+0x136>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d005      	beq.n	8010d3a <prvSendData+0x12e>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010d34:	4618      	mov	r0, r3
 8010d36:	f001 fed9 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8010d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d009      	beq.n	8010d5c <prvSendData+0x150>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	6819      	ldr	r1, [r3, #0]
 8010d4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d4e:	2301      	movs	r3, #1
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f7ff fae0 	bl	8010316 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8010d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8010d5e:	4618      	mov	r0, r3
 8010d60:	373c      	adds	r7, #60	@ 0x3c
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd90      	pop	{r4, r7, pc}

08010d66 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8010d66:	b480      	push	{r7}
 8010d68:	b085      	sub	sp, #20
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	6078      	str	r0, [r7, #4]
 8010d6e:	460b      	mov	r3, r1
 8010d70:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 8010d72:	2301      	movs	r3, #1
 8010d74:	60fb      	str	r3, [r7, #12]
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8010d76:	68fb      	ldr	r3, [r7, #12]
    }
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <prvTCPSendChallengeAck>:
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       uint32_t ulCurrentSequenceNumber,
                                       uint32_t ulOurSequenceNumber )
    {
 8010d84:	b590      	push	{r4, r7, lr}
 8010d86:	b087      	sub	sp, #28
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f7fa f865 	bl	800ae64 <uxIPHeaderSizePacket>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8010d9e:	4423      	add	r3, r4
 8010da0:	617b      	str	r3, [r7, #20]
         *  <ACK=RCV.NXT>
         *
         * The prvTCPSendSpecialPacketHelper function uses the sequence number of the packet as the
         * ACK number and the ACK number as the sequence number, therefore the values are set swapped
         * here to match the RFC. */
        pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulCurrentSequenceNumber );
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	68ba      	ldr	r2, [r7, #8]
 8010da6:	605a      	str	r2, [r3, #4]
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( ulOurSequenceNumber );
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	609a      	str	r2, [r3, #8]

        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8010dae:	2110      	movs	r1, #16
 8010db0:	68f8      	ldr	r0, [r7, #12]
 8010db2:	f7ff ffd8 	bl	8010d66 <prvTCPSendSpecialPacketHelper>
 8010db6:	4603      	mov	r3, r0
    }
 8010db8:	4618      	mov	r0, r3
 8010dba:	371c      	adds	r7, #28
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd90      	pop	{r4, r7, pc}

08010dc0 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8010dc8:	2114      	movs	r1, #20
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f7ff ffcb 	bl	8010d66 <prvTCPSendSpecialPacketHelper>
 8010dd0:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3708      	adds	r7, #8
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
	...

08010ddc <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b0a8      	sub	sp, #160	@ 0xa0
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	60b9      	str	r1, [r7, #8]
 8010de6:	607a      	str	r2, [r7, #4]
 8010de8:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8010dea:	2300      	movs	r3, #0
 8010dec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8010df0:	2300      	movs	r3, #0
 8010df2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    IPHeader_t * pxIPHeader = NULL;
 8010df6:	2300      	movs	r3, #0
 8010df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    BaseType_t xDoRelease = xReleaseAfterSend;
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    EthernetHeader_t * pxEthernetHeader = NULL;
 8010e02:	2300      	movs	r3, #0
 8010e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    void * pvCopyDest = NULL;
 8010e14:	2300      	movs	r3, #0
 8010e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8010e18:	2314      	movs	r3, #20
 8010e1a:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t ulDestinationIPAddress;
    eResolutionLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8010e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d117      	bne.n	8010e58 <prvTCPReturnPacket_IPV4+0x7c>
        {
            pxNetworkBuffer = &xTempBuffer;
 8010e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8010e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e34:	2238      	movs	r2, #56	@ 0x38
 8010e36:	2100      	movs	r1, #0
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f007 fe93 	bl	8018b64 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f103 02ae 	add.w	r2, r3, #174	@ 0xae
 8010e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e48:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8010e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e4e:	225a      	movs	r2, #90	@ 0x5a
 8010e50:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8010e52:	2300      	movs	r3, #0
 8010e54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8010e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d110      	bne.n	8010e82 <prvTCPReturnPacket_IPV4+0xa6>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8010e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e66:	4619      	mov	r1, r3
 8010e68:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8010e6c:	f7fa faf0 	bl	800b450 <pxDuplicateNetworkBufferWithDescriptor>
 8010e70:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

                if( pxNetworkBuffer != NULL )
 8010e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <prvTCPReturnPacket_IPV4+0xa6>
                {
                    xDoRelease = pdTRUE;
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8010e82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f000 816b 	beq.w	8011162 <prvTCPReturnPacket_IPV4+0x386>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e92:	330e      	adds	r3, #14
 8010e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8010e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8010ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8010eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010eae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010eb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010eb2:	330e      	adds	r3, #14
 8010eb4:	4413      	add	r3, r2
 8010eb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8010eba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d10b      	bne.n	8010edc <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8010ec4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010ec6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f7ff fc56 	bl	801077c <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8010ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f000 8140 	beq.w	801115c <prvTCPReturnPacket_IPV4+0x380>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d019      	beq.n	8010f16 <prvTCPReturnPacket_IPV4+0x13a>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8010ee2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010ee4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f7ff fa40 	bl	801036e <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010ef2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	f7ff faa9 	bl	801044e <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f04:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8010f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f12:	60da      	str	r2, [r3, #12]
 8010f14:	e01b      	b.n	8010f4e <prvTCPReturnPacket_IPV4+0x172>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8010f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8010f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010f22:	689a      	ldr	r2, [r3, #8]
 8010f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010f28:	605a      	str	r2, [r3, #4]
 8010f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010f2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010f30:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8010f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	673b      	str	r3, [r7, #112]	@ 0x70
 8010f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f3e:	68da      	ldr	r2, [r3, #12]
 8010f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f44:	611a      	str	r2, [r3, #16]
 8010f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f4a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010f4c:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8010f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f52:	2240      	movs	r2, #64	@ 0x40
 8010f54:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f5e:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8010f60:	4b86      	ldr	r3, [pc, #536]	@ (801117c <prvTCPReturnPacket_IPV4+0x3a0>)
 8010f62:	881a      	ldrh	r2, [r3, #0]
 8010f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f68:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8010f6a:	4b84      	ldr	r3, [pc, #528]	@ (801117c <prvTCPReturnPacket_IPV4+0x3a0>)
 8010f6c:	881b      	ldrh	r3, [r3, #0]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	4b82      	ldr	r3, [pc, #520]	@ (801117c <prvTCPReturnPacket_IPV4+0x3a0>)
 8010f74:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8010f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	719a      	strb	r2, [r3, #6]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8010f82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010f86:	781a      	ldrb	r2, [r3, #0]
 8010f88:	785b      	ldrb	r3, [r3, #1]
 8010f8a:	021b      	lsls	r3, r3, #8
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8010f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010f96:	885b      	ldrh	r3, [r3, #2]
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010f9e:	801a      	strh	r2, [r3, #0]
 8010fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010fa4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8010fa8:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8010faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8010fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fb8:	f103 020e 	add.w	r2, r3, #14
 8010fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010fc0:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8010fc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010fc6:	3306      	adds	r3, #6
 8010fc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8010fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010fd0:	691b      	ldr	r3, [r3, #16]
 8010fd2:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8010fd4:	f107 0214 	add.w	r2, r7, #20
 8010fd8:	f107 011c 	add.w	r1, r7, #28
 8010fdc:	f107 0318 	add.w	r3, r7, #24
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f6 fea3 	bl	8007d2c <eARPGetCacheEntry>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

            if( eResult == eResolutionCacheHit )
 8010fec:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d108      	bne.n	8011006 <prvTCPReturnPacket_IPV4+0x22a>
            {
                pvCopySource = &xMACAddress;
 8010ff4:	f107 031c 	add.w	r3, r7, #28
 8010ff8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8010ffc:	697a      	ldr	r2, [r7, #20]
 8010ffe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011002:	631a      	str	r2, [r3, #48]	@ 0x30
 8011004:	e004      	b.n	8011010 <prvTCPReturnPacket_IPV4+0x234>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8011006:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801100a:	3306      	adds	r3, #6
 801100c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8011010:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 80a2 	beq.w	8011160 <prvTCPReturnPacket_IPV4+0x384>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 801101c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011020:	67fb      	str	r3, [r7, #124]	@ 0x7c
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8011022:	2206      	movs	r2, #6
 8011024:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8011028:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801102a:	f007 fe76 	bl	8018d1a <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 801102e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011034:	3338      	adds	r3, #56	@ 0x38
 8011036:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 801103a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801103e:	3306      	adds	r3, #6
 8011040:	67fb      	str	r3, [r7, #124]	@ 0x7c
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8011042:	2206      	movs	r2, #6
 8011044:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8011048:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801104a:	f007 fe66 	bl	8018d1a <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 801104e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011054:	2b3b      	cmp	r3, #59	@ 0x3b
 8011056:	d81a      	bhi.n	801108e <prvTCPReturnPacket_IPV4+0x2b2>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8011058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801105c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801105e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011062:	e00c      	b.n	801107e <prvTCPReturnPacket_IPV4+0x2a2>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8011064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801106a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801106e:	4413      	add	r3, r2
 8011070:	2200      	movs	r2, #0
 8011072:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8011074:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011078:	3301      	adds	r3, #1
 801107a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801107e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011082:	2b3b      	cmp	r3, #59	@ 0x3b
 8011084:	ddee      	ble.n	8011064 <prvTCPReturnPacket_IPV4+0x288>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8011086:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801108a:	223c      	movs	r2, #60	@ 0x3c
 801108c:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 801108e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011098:	2b00      	cmp	r3, #0
 801109a:	d10d      	bne.n	80110b8 <prvTCPReturnPacket_IPV4+0x2dc>
	__asm volatile
 801109c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a0:	b672      	cpsid	i
 80110a2:	f383 8811 	msr	BASEPRI, r3
 80110a6:	f3bf 8f6f 	isb	sy
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	b662      	cpsie	i
 80110b0:	663b      	str	r3, [r7, #96]	@ 0x60
}
 80110b2:	bf00      	nop
 80110b4:	bf00      	nop
 80110b6:	e7fd      	b.n	80110b4 <prvTCPReturnPacket_IPV4+0x2d8>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 80110b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80110bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d10d      	bne.n	80110e4 <prvTCPReturnPacket_IPV4+0x308>
	__asm volatile
 80110c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110cc:	b672      	cpsid	i
 80110ce:	f383 8811 	msr	BASEPRI, r3
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	f3bf 8f4f 	dsb	sy
 80110da:	b662      	cpsie	i
 80110dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
 80110de:	bf00      	nop
 80110e0:	bf00      	nop
 80110e2:	e7fd      	b.n	80110e0 <prvTCPReturnPacket_IPV4+0x304>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80110e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80110e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80110ee:	66bb      	str	r3, [r7, #104]	@ 0x68
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 80110f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80110f8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80110fc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80110fe:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8011100:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011104:	2b00      	cmp	r3, #0
 8011106:	d125      	bne.n	8011154 <prvTCPReturnPacket_IPV4+0x378>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8011108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801110c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8011110:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8011114:	021b      	lsls	r3, r3, #8
 8011116:	4313      	orrs	r3, r2
 8011118:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 801111c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011120:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011122:	b29a      	uxth	r2, r3
 8011124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011128:	845a      	strh	r2, [r3, #34]	@ 0x22
 801112a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801112e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8011132:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8011134:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011138:	691a      	ldr	r2, [r3, #16]
 801113a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801113e:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8011140:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011144:	3306      	adds	r3, #6
 8011146:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801114a:	2206      	movs	r2, #6
 801114c:	4618      	mov	r0, r3
 801114e:	f007 fde4 	bl	8018d1a <memcpy>
 8011152:	e006      	b.n	8011162 <prvTCPReturnPacket_IPV4+0x386>
            }
            else
            {
                xDoRelease = pdFALSE;
 8011154:	2300      	movs	r3, #0
 8011156:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801115a:	e002      	b.n	8011162 <prvTCPReturnPacket_IPV4+0x386>
                    break;
 801115c:	bf00      	nop
 801115e:	e000      	b.n	8011162 <prvTCPReturnPacket_IPV4+0x386>
                break;
 8011160:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8011162:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011166:	2b01      	cmp	r3, #1
 8011168:	d103      	bne.n	8011172 <prvTCPReturnPacket_IPV4+0x396>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801116a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 801116e:	f001 fcbd 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
    }
}
 8011172:	bf00      	nop
 8011174:	37a0      	adds	r7, #160	@ 0xa0
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	200012c4 	.word	0x200012c4

08011180 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b08c      	sub	sp, #48	@ 0x30
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eResolutionLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8011188:	2301      	movs	r3, #1
 801118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 801118c:	2300      	movs	r3, #0
 801118e:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8011190:	f107 030c 	add.w	r3, r7, #12
 8011194:	2206      	movs	r2, #6
 8011196:	2100      	movs	r1, #0
 8011198:	4618      	mov	r0, r3
 801119a:	f007 fce3 	bl	8018b64 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111a2:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80111aa:	f107 010c 	add.w	r1, r7, #12
 80111ae:	f107 0314 	add.w	r3, r7, #20
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7f6 fdba 	bl	8007d2c <eARPGetCacheEntry>
 80111b8:	4603      	mov	r3, r0
 80111ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 80111be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d00e      	beq.n	80111e4 <prvTCPPrepareConnect_IPV4+0x64>

        case eResolutionCacheMiss: /* An ARP table lookup did not find a valid entry. */
        case eResolutionFailed:    /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80111cc:	3301      	adds	r3, #1
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f6 ffe7 	bl	80081ac <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 80111de:	2300      	movs	r3, #0
 80111e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80111e2:	e000      	b.n	80111e6 <prvTCPPrepareConnect_IPV4+0x66>
            break;                 /* We can now prepare the SYN packet. */
 80111e4:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 80111e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d010      	beq.n	801120e <prvTCPPrepareConnect_IPV4+0x8e>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80111fe:	f7f9 fe95 	bl	800af2c <ulApplicationGetNextSequenceNumber>
 8011202:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8011204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011206:	2b00      	cmp	r3, #0
 8011208:	d101      	bne.n	801120e <prvTCPPrepareConnect_IPV4+0x8e>
        {
            xReturn = pdFALSE;
 801120a:	2300      	movs	r3, #0
 801120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 801120e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011210:	2b00      	cmp	r3, #0
 8011212:	d05d      	beq.n	80112d0 <prvTCPPrepareConnect_IPV4+0x150>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	33ae      	adds	r3, #174	@ 0xae
 8011218:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	330e      	adds	r3, #14
 801121e:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 801122e:	f043 0308 	orr.w	r3, r3, #8
 8011232:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	33ae      	adds	r3, #174	@ 0xae
 801123a:	225a      	movs	r2, #90	@ 0x5a
 801123c:	2100      	movs	r1, #0
 801123e:	4618      	mov	r0, r3
 8011240:	f007 fc90 	bl	8018b64 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8011244:	6a3b      	ldr	r3, [r7, #32]
 8011246:	3306      	adds	r3, #6
 8011248:	461a      	mov	r2, r3
 801124a:	f107 030c 	add.w	r3, r7, #12
 801124e:	6818      	ldr	r0, [r3, #0]
 8011250:	6010      	str	r0, [r2, #0]
 8011252:	889b      	ldrh	r3, [r3, #4]
 8011254:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	2200      	movs	r2, #0
 801125a:	731a      	strb	r2, [r3, #12]
 801125c:	2200      	movs	r2, #0
 801125e:	f042 0208 	orr.w	r2, r2, #8
 8011262:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	2245      	movs	r2, #69	@ 0x45
 8011268:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 801126a:	2338      	movs	r3, #56	@ 0x38
 801126c:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	8b7a      	ldrh	r2, [r7, #26]
 8011272:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	2240      	movs	r2, #64	@ 0x40
 8011278:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	2206      	movs	r2, #6
 801127e:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 801128e:	6a3b      	ldr	r3, [r7, #32]
 8011290:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011296:	6a3b      	ldr	r3, [r7, #32]
 8011298:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2200      	movs	r2, #0
 801129e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112a6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 80112aa:	6a3b      	ldr	r3, [r7, #32]
 80112ac:	2250      	movs	r2, #80	@ 0x50
 80112ae:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 80112b2:	6a3b      	ldr	r3, [r7, #32]
 80112b4:	2202      	movs	r2, #2
 80112b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 f80d 	bl	80112da <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7ff f920 	bl	8010506 <prvTCPCreateWindow>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	d001      	beq.n	80112d0 <prvTCPPrepareConnect_IPV4+0x150>
        {
            xReturn = pdFALSE;
 80112cc:	2300      	movs	r3, #0
 80112ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 80112d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3730      	adds	r7, #48	@ 0x30
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}

080112da <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 80112da:	b580      	push	{r7, lr}
 80112dc:	b082      	sub	sp, #8
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	7a1b      	ldrb	r3, [r3, #8]
 80112e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80112ea:	b2db      	uxtb	r3, r3
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d103      	bne.n	80112f8 <prvSocketSetMSS+0x1e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    prvSocketSetMSS_IPV4( pxSocket );
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 f806 	bl	8011302 <prvSocketSetMSS_IPV4>
                    break;
 80112f6:	e000      	b.n	80112fa <prvSocketSetMSS+0x20>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80112f8:	bf00      	nop
        }
    }
 80112fa:	bf00      	nop
 80112fc:	3708      	adds	r7, #8
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8011302:	b580      	push	{r7, lr}
 8011304:	b084      	sub	sp, #16
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 801130a:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 801130e:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011314:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d012      	beq.n	8011342 <prvSocketSetMSS_IPV4+0x40>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 801131c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8011320:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	405a      	eors	r2, r3
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	4013      	ands	r3, r2
 8011332:	2b00      	cmp	r3, #0
 8011334:	d005      	beq.n	8011342 <prvSocketSetMSS_IPV4+0x40>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8011336:	68f9      	ldr	r1, [r7, #12]
 8011338:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 801133c:	f7fa fafa 	bl	800b934 <FreeRTOS_min_uint32>
 8011340:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	b29a      	uxth	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
}
 801134c:	bf00      	nop
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 801135e:	2300      	movs	r3, #0
 8011360:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8011362:	683a      	ldr	r2, [r7, #0]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	1ad3      	subs	r3, r2, r3
 8011368:	2b00      	cmp	r3, #0
 801136a:	db01      	blt.n	8011370 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 801136c:	2301      	movs	r3, #1
 801136e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8011370:	68fb      	ldr	r3, [r7, #12]
        }
 8011372:	4618      	mov	r0, r3
 8011374:	3714      	adds	r7, #20
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr

0801137e <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 801137e:	b480      	push	{r7}
 8011380:	b085      	sub	sp, #20
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
 8011386:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8011388:	2300      	movs	r3, #0
 801138a:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	3b01      	subs	r3, #1
 8011394:	2b00      	cmp	r3, #0
 8011396:	db01      	blt.n	801139c <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8011398:	2301      	movs	r3, #1
 801139a:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 801139c:	68fb      	ldr	r3, [r7, #12]
    }
 801139e:	4618      	mov	r0, r3
 80113a0:	3714      	adds	r7, #20
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr

080113aa <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 80113aa:	b480      	push	{r7}
 80113ac:	b085      	sub	sp, #20
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80113b4:	2300      	movs	r3, #0
 80113b6:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 80113b8:	687a      	ldr	r2, [r7, #4]
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	1ad3      	subs	r3, r2, r3
 80113be:	3b01      	subs	r3, #1
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	db01      	blt.n	80113c8 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 80113c4:	2301      	movs	r3, #1
 80113c6:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 80113c8:	68fb      	ldr	r3, [r7, #12]
    }
 80113ca:	4618      	mov	r0, r3
 80113cc:	3714      	adds	r7, #20
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr

080113d6 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 80113d6:	b480      	push	{r7}
 80113d8:	b085      	sub	sp, #20
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
 80113de:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80113e0:	2300      	movs	r3, #0
 80113e2:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	1ad3      	subs	r3, r2, r3
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	db01      	blt.n	80113f2 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 80113ee:	2301      	movs	r3, #1
 80113f0:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 80113f2:	68fb      	ldr	r3, [r7, #12]
    }
 80113f4:	4618      	mov	r0, r3
 80113f6:	3714      	adds	r7, #20
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	3308      	adds	r3, #8
 801140e:	461a      	mov	r2, r3
 8011410:	6839      	ldr	r1, [r7, #0]
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f85c 	bl	80114d0 <vListInsertGeneric>
        }
 8011418:	bf00      	nop
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8011428:	f005 f902 	bl	8016630 <xTaskGetTickCount>
 801142c:	4602      	mov	r2, r0
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	601a      	str	r2, [r3, #0]
    }
 8011432:	bf00      	nop
 8011434:	3708      	adds	r7, #8
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}

0801143a <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 801143a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8011444:	f005 f8f4 	bl	8016630 <xTaskGetTickCount>
 8011448:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	68fa      	ldr	r2, [r7, #12]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) pdTICKS_TO_MS( uxDiff );
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	2200      	movs	r2, #0
 8011458:	4698      	mov	r8, r3
 801145a:	4691      	mov	r9, r2
 801145c:	4642      	mov	r2, r8
 801145e:	464b      	mov	r3, r9
 8011460:	f04f 0000 	mov.w	r0, #0
 8011464:	f04f 0100 	mov.w	r1, #0
 8011468:	0159      	lsls	r1, r3, #5
 801146a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801146e:	0150      	lsls	r0, r2, #5
 8011470:	4602      	mov	r2, r0
 8011472:	460b      	mov	r3, r1
 8011474:	ebb2 0408 	subs.w	r4, r2, r8
 8011478:	eb63 0509 	sbc.w	r5, r3, r9
 801147c:	f04f 0200 	mov.w	r2, #0
 8011480:	f04f 0300 	mov.w	r3, #0
 8011484:	00ab      	lsls	r3, r5, #2
 8011486:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801148a:	00a2      	lsls	r2, r4, #2
 801148c:	4614      	mov	r4, r2
 801148e:	461d      	mov	r5, r3
 8011490:	eb14 0a08 	adds.w	sl, r4, r8
 8011494:	eb45 0b09 	adc.w	fp, r5, r9
 8011498:	f04f 0200 	mov.w	r2, #0
 801149c:	f04f 0300 	mov.w	r3, #0
 80114a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80114a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80114a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80114ac:	4692      	mov	sl, r2
 80114ae:	469b      	mov	fp, r3
 80114b0:	4650      	mov	r0, sl
 80114b2:	4659      	mov	r1, fp
 80114b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80114b8:	f04f 0300 	mov.w	r3, #0
 80114bc:	f7ee ff28 	bl	8000310 <__aeabi_uldivmod>
 80114c0:	4602      	mov	r2, r0
 80114c2:	460b      	mov	r3, r1
 80114c4:	4613      	mov	r3, r2
    }
 80114c6:	4618      	mov	r0, r3
 80114c8:	3710      	adds	r7, #16
 80114ca:	46bd      	mov	sp, r7
 80114cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080114d0 <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 80114d0:	b480      	push	{r7}
 80114d2:	b085      	sub	sp, #20
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	689a      	ldr	r2, [r3, #8]
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	689b      	ldr	r3, [r3, #8]
 80114ee:	68ba      	ldr	r2, [r7, #8]
 80114f0:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	68fa      	ldr	r2, [r7, #12]
 80114fc:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	1c5a      	adds	r2, r3, #1
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	601a      	str	r2, [r3, #0]
        }
 8011508:	bf00      	nop
 801150a:	3714      	adds	r7, #20
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr

08011514 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 801151a:	4824      	ldr	r0, [pc, #144]	@ (80115ac <prvCreateSectors+0x98>)
 801151c:	f003 fd5f 	bl	8014fde <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8011520:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8011524:	f006 fe80 	bl	8018228 <pvPortMalloc>
 8011528:	4603      	mov	r3, r0
 801152a:	4a21      	ldr	r2, [pc, #132]	@ (80115b0 <prvCreateSectors+0x9c>)
 801152c:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 801152e:	4b20      	ldr	r3, [pc, #128]	@ (80115b0 <prvCreateSectors+0x9c>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d102      	bne.n	801153c <prvCreateSectors+0x28>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8011536:	2300      	movs	r3, #0
 8011538:	603b      	str	r3, [r7, #0]
 801153a:	e032      	b.n	80115a2 <prvCreateSectors+0x8e>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 801153c:	4b1c      	ldr	r3, [pc, #112]	@ (80115b0 <prvCreateSectors+0x9c>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011544:	2100      	movs	r1, #0
 8011546:	4618      	mov	r0, r3
 8011548:	f007 fb0c 	bl	8018b64 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 801154c:	2300      	movs	r3, #0
 801154e:	607b      	str	r3, [r7, #4]
 8011550:	e022      	b.n	8011598 <prvCreateSectors+0x84>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8011552:	4b17      	ldr	r3, [pc, #92]	@ (80115b0 <prvCreateSectors+0x9c>)
 8011554:	6819      	ldr	r1, [r3, #0]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	019a      	lsls	r2, r3, #6
 801155a:	4b15      	ldr	r3, [pc, #84]	@ (80115b0 <prvCreateSectors+0x9c>)
 801155c:	6818      	ldr	r0, [r3, #0]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	019b      	lsls	r3, r3, #6
 8011562:	4403      	add	r3, r0
 8011564:	440a      	add	r2, r1
 8011566:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8011568:	4b11      	ldr	r3, [pc, #68]	@ (80115b0 <prvCreateSectors+0x9c>)
 801156a:	6819      	ldr	r1, [r3, #0]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	019a      	lsls	r2, r3, #6
 8011570:	4b0f      	ldr	r3, [pc, #60]	@ (80115b0 <prvCreateSectors+0x9c>)
 8011572:	6818      	ldr	r0, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	019b      	lsls	r3, r3, #6
 8011578:	4403      	add	r3, r0
 801157a:	440a      	add	r2, r1
 801157c:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 801157e:	4b0c      	ldr	r3, [pc, #48]	@ (80115b0 <prvCreateSectors+0x9c>)
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	019b      	lsls	r3, r3, #6
 8011586:	4413      	add	r3, r2
 8011588:	332c      	adds	r3, #44	@ 0x2c
 801158a:	4619      	mov	r1, r3
 801158c:	4807      	ldr	r0, [pc, #28]	@ (80115ac <prvCreateSectors+0x98>)
 801158e:	f7ff ff37 	bl	8011400 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	3301      	adds	r3, #1
 8011596:	607b      	str	r3, [r7, #4]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2b3f      	cmp	r3, #63	@ 0x3f
 801159c:	ddd9      	ble.n	8011552 <prvCreateSectors+0x3e>
                }

                xReturn = pdPASS;
 801159e:	2301      	movs	r3, #1
 80115a0:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 80115a2:	683b      	ldr	r3, [r7, #0]
        }
 80115a4:	4618      	mov	r0, r3
 80115a6:	3708      	adds	r7, #8
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}
 80115ac:	2000267c 	.word	0x2000267c
 80115b0:	20002678 	.word	0x20002678

080115b4 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 80115b4:	b480      	push	{r7}
 80115b6:	b087      	sub	sp, #28
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 80115be:	2300      	movs	r3, #0
 80115c0:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	33ac      	adds	r3, #172	@ 0xac
 80115c6:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	617b      	str	r3, [r7, #20]
 80115ce:	e00d      	b.n	80115ec <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d102      	bne.n	80115e6 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	613b      	str	r3, [r7, #16]
                    break;
 80115e4:	e006      	b.n	80115f4 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 80115ec:	697a      	ldr	r2, [r7, #20]
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d1ed      	bne.n	80115d0 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 80115f4:	693b      	ldr	r3, [r7, #16]
        }
 80115f6:	4618      	mov	r0, r3
 80115f8:	371c      	adds	r7, #28
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
	...

08011604 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8011604:	b580      	push	{r7, lr}
 8011606:	b08a      	sub	sp, #40	@ 0x28
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
 8011610:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8011612:	4b37      	ldr	r3, [pc, #220]	@ (80116f0 <xTCPWindowNew+0xec>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d102      	bne.n	8011620 <xTCPWindowNew+0x1c>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
                pxSegment = NULL;
 801161a:	2300      	movs	r3, #0
 801161c:	627b      	str	r3, [r7, #36]	@ 0x24
 801161e:	e061      	b.n	80116e4 <xTCPWindowNew+0xe0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8011620:	4b33      	ldr	r3, [pc, #204]	@ (80116f0 <xTCPWindowNew+0xec>)
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8011626:	6a3b      	ldr	r3, [r7, #32]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	627b      	str	r3, [r7, #36]	@ 0x24

                configASSERT( pxItem != NULL );
 801162c:	6a3b      	ldr	r3, [r7, #32]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d10d      	bne.n	801164e <xTCPWindowNew+0x4a>
	__asm volatile
 8011632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011636:	b672      	cpsid	i
 8011638:	f383 8811 	msr	BASEPRI, r3
 801163c:	f3bf 8f6f 	isb	sy
 8011640:	f3bf 8f4f 	dsb	sy
 8011644:	b662      	cpsie	i
 8011646:	61bb      	str	r3, [r7, #24]
}
 8011648:	bf00      	nop
 801164a:	bf00      	nop
 801164c:	e7fd      	b.n	801164a <xTCPWindowNew+0x46>
                configASSERT( pxSegment != NULL );
 801164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011650:	2b00      	cmp	r3, #0
 8011652:	d10d      	bne.n	8011670 <xTCPWindowNew+0x6c>
	__asm volatile
 8011654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011658:	b672      	cpsid	i
 801165a:	f383 8811 	msr	BASEPRI, r3
 801165e:	f3bf 8f6f 	isb	sy
 8011662:	f3bf 8f4f 	dsb	sy
 8011666:	b662      	cpsie	i
 8011668:	617b      	str	r3, [r7, #20]
}
 801166a:	bf00      	nop
 801166c:	bf00      	nop
 801166e:	e7fd      	b.n	801166c <xTCPWindowNew+0x68>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8011670:	6a38      	ldr	r0, [r7, #32]
 8011672:	f003 fd3e 	bl	80150f2 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d006      	beq.n	801168a <xTCPWindowNew+0x86>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	33a4      	adds	r3, #164	@ 0xa4
 8011680:	6a39      	ldr	r1, [r7, #32]
 8011682:	4618      	mov	r0, r3
 8011684:	f7ff febc 	bl	8011400 <vListInsertFifo>
 8011688:	e005      	b.n	8011696 <xTCPWindowNew+0x92>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	3390      	adds	r3, #144	@ 0x90
 801168e:	6a39      	ldr	r1, [r7, #32]
 8011690:	4618      	mov	r0, r3
 8011692:	f7ff feb5 	bl	8011400 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8011696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011698:	3310      	adds	r3, #16
 801169a:	4618      	mov	r0, r3
 801169c:	f7ff fec0 	bl	8011420 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 80116a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a2:	2200      	movs	r2, #0
 80116a4:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d001      	beq.n	80116b0 <xTCPWindowNew+0xac>
 80116ac:	2101      	movs	r1, #1
 80116ae:	e000      	b.n	80116b2 <xTCPWindowNew+0xae>
 80116b0:	2100      	movs	r1, #0
 80116b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116b4:	7d93      	ldrb	r3, [r2, #22]
 80116b6:	f361 0382 	bfi	r3, r1, #2, #1
 80116ba:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 80116bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 80116c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 80116c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ca:	68ba      	ldr	r2, [r7, #8]
 80116cc:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 80116ce:	4b08      	ldr	r3, [pc, #32]	@ (80116f0 <xTCPWindowNew+0xec>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	61fb      	str	r3, [r7, #28]

                    if( xLowestLength > xLength )
 80116d4:	4b07      	ldr	r3, [pc, #28]	@ (80116f4 <xTCPWindowNew+0xf0>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	69fa      	ldr	r2, [r7, #28]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d202      	bcs.n	80116e4 <xTCPWindowNew+0xe0>
                    {
                        xLowestLength = xLength;
 80116de:	4a05      	ldr	r2, [pc, #20]	@ (80116f4 <xTCPWindowNew+0xf0>)
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 80116e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80116e6:	4618      	mov	r0, r3
 80116e8:	3728      	adds	r7, #40	@ 0x28
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	2000267c 	.word	0x2000267c
 80116f4:	20000018 	.word	0x20000018

080116f8 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011706:	2b00      	cmp	r3, #0
 8011708:	d002      	beq.n	8011710 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 801170a:	2300      	movs	r3, #0
 801170c:	60fb      	str	r3, [r7, #12]
 801170e:	e010      	b.n	8011732 <xTCPWindowRxEmpty+0x3a>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	691b      	ldr	r3, [r3, #16]
 8011714:	1c5a      	adds	r2, r3, #1
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	699b      	ldr	r3, [r3, #24]
 801171a:	4619      	mov	r1, r3
 801171c:	4610      	mov	r0, r2
 801171e:	f7ff fe5a 	bl	80113d6 <xSequenceGreaterThanOrEqual>
 8011722:	4603      	mov	r3, r0
 8011724:	2b00      	cmp	r3, #0
 8011726:	d002      	beq.n	801172e <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8011728:	2301      	movs	r3, #1
 801172a:	60fb      	str	r3, [r7, #12]
 801172c:	e001      	b.n	8011732 <xTCPWindowRxEmpty+0x3a>
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 801172e:	2300      	movs	r3, #0
 8011730:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8011732:	68fb      	ldr	r3, [r7, #12]
        }
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d102      	bne.n	8011752 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 801174c:	2300      	movs	r3, #0
 801174e:	60fb      	str	r3, [r7, #12]
 8011750:	e008      	b.n	8011764 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	68db      	ldr	r3, [r3, #12]
 8011756:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 801175e:	68b8      	ldr	r0, [r7, #8]
 8011760:	f003 fcc7 	bl	80150f2 <uxListRemove>
            }

            return pxSegment;
 8011764:	68fb      	ldr	r3, [r7, #12]
        }
 8011766:	4618      	mov	r0, r3
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}

0801176e <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 801176e:	b480      	push	{r7}
 8011770:	b085      	sub	sp, #20
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d102      	bne.n	8011784 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 801177e:	2300      	movs	r3, #0
 8011780:	60fb      	str	r3, [r7, #12]
 8011782:	e005      	b.n	8011790 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8011790:	68fb      	ldr	r3, [r7, #12]
        }
 8011792:	4618      	mov	r0, r3
 8011794:	3714      	adds	r7, #20
 8011796:	46bd      	mov	sp, r7
 8011798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179c:	4770      	bx	lr
	...

080117a0 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d004      	beq.n	80117ba <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	3318      	adds	r3, #24
 80117b4:	4618      	mov	r0, r3
 80117b6:	f003 fc9c 	bl	80150f2 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2200      	movs	r2, #0
 80117be:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2200      	movs	r2, #0
 80117c4:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2200      	movs	r2, #0
 80117ca:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d004      	beq.n	80117de <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	332c      	adds	r3, #44	@ 0x2c
 80117d8:	4618      	mov	r0, r3
 80117da:	f003 fc8a 	bl	80150f2 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	332c      	adds	r3, #44	@ 0x2c
 80117e2:	4619      	mov	r1, r3
 80117e4:	4803      	ldr	r0, [pc, #12]	@ (80117f4 <vTCPWindowFree+0x54>)
 80117e6:	f7ff fe0b 	bl	8011400 <vListInsertFifo>
        }
 80117ea:	bf00      	nop
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	2000267c 	.word	0x2000267c

080117f8 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b086      	sub	sp, #24
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8011800:	2300      	movs	r3, #0
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	e01d      	b.n	8011842 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d003      	beq.n	8011814 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	33a4      	adds	r3, #164	@ 0xa4
 8011810:	617b      	str	r3, [r7, #20]
 8011812:	e002      	b.n	801181a <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	3390      	adds	r3, #144	@ 0x90
 8011818:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011822:	d10b      	bne.n	801183c <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8011824:	e006      	b.n	8011834 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	68db      	ldr	r3, [r3, #12]
 801182c:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 801182e:	68f8      	ldr	r0, [r7, #12]
 8011830:	f7ff ffb6 	bl	80117a0 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1f4      	bne.n	8011826 <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	3301      	adds	r3, #1
 8011840:	613b      	str	r3, [r7, #16]
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	2b01      	cmp	r3, #1
 8011846:	ddde      	ble.n	8011806 <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8011848:	bf00      	nop
 801184a:	bf00      	nop
 801184c:	3718      	adds	r7, #24
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
	...

08011854 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8011854:	b580      	push	{r7, lr}
 8011856:	b086      	sub	sp, #24
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	607a      	str	r2, [r7, #4]
 8011860:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8011862:	2301      	movs	r3, #1
 8011864:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8011866:	4b18      	ldr	r3, [pc, #96]	@ (80118c8 <xTCPWindowCreate+0x74>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d102      	bne.n	8011874 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 801186e:	f7ff fe51 	bl	8011514 <prvCreateSectors>
 8011872:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	3390      	adds	r3, #144	@ 0x90
 8011878:	4618      	mov	r0, r3
 801187a:	f003 fbb0 	bl	8014fde <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	33a4      	adds	r3, #164	@ 0xa4
 8011882:	4618      	mov	r0, r3
 8011884:	f003 fbab 	bl	8014fde <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	3340      	adds	r3, #64	@ 0x40
 801188c:	4618      	mov	r0, r3
 801188e:	f003 fba6 	bl	8014fde <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	3354      	adds	r3, #84	@ 0x54
 8011896:	4618      	mov	r0, r3
 8011898:	f003 fba1 	bl	8014fde <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	3368      	adds	r3, #104	@ 0x68
 80118a0:	4618      	mov	r0, r3
 80118a2:	f003 fb9c 	bl	8014fde <vListInitialise>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	68ba      	ldr	r2, [r7, #8]
 80118aa:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 80118b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b4:	6a3a      	ldr	r2, [r7, #32]
 80118b6:	6839      	ldr	r1, [r7, #0]
 80118b8:	68f8      	ldr	r0, [r7, #12]
 80118ba:	f000 f807 	bl	80118cc <vTCPWindowInit>

        return xReturn;
 80118be:	697b      	ldr	r3, [r7, #20]
    }
 80118c0:	4618      	mov	r0, r3
 80118c2:	3718      	adds	r7, #24
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	20002678 	.word	0x20002678

080118cc <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 80118cc:	b480      	push	{r7}
 80118ce:	b087      	sub	sp, #28
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
 80118d8:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 80118da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80118de:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2200      	movs	r2, #0
 80118e4:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 80118e6:	68fa      	ldr	r2, [r7, #12]
 80118e8:	7813      	ldrb	r3, [r2, #0]
 80118ea:	f043 0301 	orr.w	r3, r3, #1
 80118ee:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d024      	beq.n	8011940 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d004      	beq.n	801190a <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	b29a      	uxth	r2, r3
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8011910:	461a      	mov	r2, r3
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	4293      	cmp	r3, r2
 8011916:	d304      	bcc.n	8011922 <vTCPWindowInit+0x56>
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801191e:	2b00      	cmp	r3, #0
 8011920:	d10e      	bne.n	8011940 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	685a      	ldr	r2, [r3, #4]
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	fbb2 f3f3 	udiv	r3, r2, r3
 801192c:	683a      	ldr	r2, [r7, #0]
 801192e:	fb03 f202 	mul.w	r2, r3, r2
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	b29a      	uxth	r2, r3
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	697a      	ldr	r2, [r7, #20]
 8011944:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	68ba      	ldr	r2, [r7, #8]
 8011950:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	68ba      	ldr	r2, [r7, #8]
 8011956:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8011976:	bf00      	nop
 8011978:	371c      	adds	r7, #28
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr

08011982 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8011982:	b580      	push	{r7, lr}
 8011984:	b08a      	sub	sp, #40	@ 0x28
 8011986:	af00      	add	r7, sp, #0
 8011988:	60f8      	str	r0, [r7, #12]
 801198a:	60b9      	str	r1, [r7, #8]
 801198c:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 801198e:	2300      	movs	r3, #0
 8011990:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8011992:	68ba      	ldr	r2, [r7, #8]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	4413      	add	r3, r2
 8011998:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	33ac      	adds	r3, #172	@ 0xac
 801199e:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	623b      	str	r3, [r7, #32]
 80119a6:	e027      	b.n	80119f8 <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80119a8:	6a3b      	ldr	r3, [r7, #32]
 80119aa:	68db      	ldr	r3, [r3, #12]
 80119ac:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	68b9      	ldr	r1, [r7, #8]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7ff fd0e 	bl	80113d6 <xSequenceGreaterThanOrEqual>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d018      	beq.n	80119f2 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	69f9      	ldr	r1, [r7, #28]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff fcd9 	bl	801137e <xSequenceLessThan>
 80119cc:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00f      	beq.n	80119f2 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 80119d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d00a      	beq.n	80119ee <xTCPWindowRxConfirm+0x6c>
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4619      	mov	r1, r3
 80119e2:	4610      	mov	r0, r2
 80119e4:	f7ff fccb 	bl	801137e <xSequenceLessThan>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d001      	beq.n	80119f2 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 80119f2:	6a3b      	ldr	r3, [r7, #32]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 80119f8:	6a3a      	ldr	r2, [r7, #32]
 80119fa:	69bb      	ldr	r3, [r7, #24]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d1d3      	bne.n	80119a8 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 8011a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d003      	beq.n	8011a0e <xTCPWindowRxConfirm+0x8c>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8011a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a08:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 8011a0a:	68ba      	ldr	r2, [r7, #8]
 8011a0c:	429a      	cmp	r2, r3
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 8011a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8011a10:	4618      	mov	r0, r3
 8011a12:	3728      	adds	r7, #40	@ 0x28
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b086      	sub	sp, #24
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	691b      	ldr	r3, [r3, #16]
 8011a26:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8011a28:	693a      	ldr	r2, [r7, #16]
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d02c      	beq.n	8011a94 <prvTCPWindowRx_ExpectedRX+0x7c>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	6939      	ldr	r1, [r7, #16]
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7ff ff9d 	bl	8011982 <xTCPWindowRxConfirm>
 8011a48:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d002      	beq.n	8011a56 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8011a50:	68b8      	ldr	r0, [r7, #8]
 8011a52:	f7ff fea5 	bl	80117a0 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1f0      	bne.n	8011a3e <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8011a5c:	6979      	ldr	r1, [r7, #20]
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f7ff fda8 	bl	80115b4 <xTCPWindowRxFind>
 8011a64:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d009      	beq.n	8011a80 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	461a      	mov	r2, r3
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	4413      	add	r3, r2
 8011a76:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8011a78:	68b8      	ldr	r0, [r7, #8]
 8011a7a:	f7ff fe91 	bl	80117a0 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8011a7e:	e7ed      	b.n	8011a5c <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8011a80:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8011a82:	68fa      	ldr	r2, [r7, #12]
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d004      	beq.n	8011a94 <prvTCPWindowRx_ExpectedRX+0x7c>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8011a8a:	697a      	ldr	r2, [r7, #20]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	1ad2      	subs	r2, r2, r3
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	631a      	str	r2, [r3, #48]	@ 0x30
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	697a      	ldr	r2, [r7, #20]
 8011a98:	611a      	str	r2, [r3, #16]
        }
 8011a9a:	bf00      	nop
 8011a9c:	3718      	adds	r7, #24
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
	...

08011aa4 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b08a      	sub	sp, #40	@ 0x28
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 8011ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab4:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 8011ab6:	68ba      	ldr	r2, [r7, #8]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	4413      	add	r3, r2
 8011abc:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	691b      	ldr	r3, [r3, #16]
 8011ac2:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8011ac4:	6a39      	ldr	r1, [r7, #32]
 8011ac6:	68f8      	ldr	r0, [r7, #12]
 8011ac8:	f7ff fd74 	bl	80115b4 <xTCPWindowRxFind>
 8011acc:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8011ace:	69bb      	ldr	r3, [r7, #24]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d006      	beq.n	8011ae2 <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8011ad4:	69bb      	ldr	r3, [r7, #24]
 8011ad6:	689b      	ldr	r3, [r3, #8]
 8011ad8:	461a      	mov	r2, r3
 8011ada:	6a3b      	ldr	r3, [r7, #32]
 8011adc:	4413      	add	r3, r2
 8011ade:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8011ae0:	e7f0      	b.n	8011ac4 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 8011ae2:	bf00      	nop
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	4a18      	ldr	r2, [pc, #96]	@ (8011b48 <prvTCPWindowRx_UnexpectedRX+0xa4>)
 8011ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	68ba      	ldr	r2, [r7, #8]
 8011af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	6a3a      	ldr	r2, [r7, #32]
 8011af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	220c      	movs	r2, #12
 8011b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8011b04:	68b9      	ldr	r1, [r7, #8]
 8011b06:	68f8      	ldr	r0, [r7, #12]
 8011b08:	f7ff fd54 	bl	80115b4 <xTCPWindowRxFind>
 8011b0c:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d114      	bne.n	8011b3e <prvTCPWindowRx_UnexpectedRX+0x9a>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	2301      	movs	r3, #1
 8011b18:	68b9      	ldr	r1, [r7, #8]
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f7ff fd72 	bl	8011604 <xTCPWindowNew>
 8011b20:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d104      	bne.n	8011b32 <prvTCPWindowRx_UnexpectedRX+0x8e>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011b30:	e005      	b.n	8011b3e <prvTCPWindowRx_UnexpectedRX+0x9a>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8011b32:	68ba      	ldr	r2, [r7, #8]
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 8011b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8011b40:	4618      	mov	r0, r3
 8011b42:	3728      	adds	r7, #40	@ 0x28
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	0101050a 	.word	0x0101050a

08011b4c <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b08c      	sub	sp, #48	@ 0x30
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	607a      	str	r2, [r7, #4]
 8011b58:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8011b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8011b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	691b      	ldr	r3, [r3, #16]
 8011b72:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8011b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b78:	4413      	add	r3, r2
 8011b7a:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8011b7c:	69fa      	ldr	r2, [r7, #28]
 8011b7e:	6a3b      	ldr	r3, [r7, #32]
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8011b84:	69bb      	ldr	r3, [r7, #24]
 8011b86:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8011b88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	da0f      	bge.n	8011bba <lTCPWindowRxCheck+0x6e>
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	dd0c      	ble.n	8011bba <lTCPWindowRxCheck+0x6e>
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ba4:	1ad3      	subs	r3, r2, r3
 8011ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bac:	4413      	add	r3, r2
 8011bae:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	425b      	negs	r3, r3
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bb8:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8011bc8:	6a3a      	ldr	r2, [r7, #32]
 8011bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d10a      	bne.n	8011be6 <lTCPWindowRxCheck+0x9a>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 8011bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d818      	bhi.n	8011c0a <lTCPWindowRxCheck+0xbe>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8011bd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bda:	68f8      	ldr	r0, [r7, #12]
 8011bdc:	f7ff ff1c 	bl	8011a18 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 8011be0:	2300      	movs	r3, #0
 8011be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011be4:	e011      	b.n	8011c0a <lTCPWindowRxCheck+0xbe>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8011be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be8:	3301      	adds	r3, #1
 8011bea:	6a3a      	ldr	r2, [r7, #32]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d00c      	beq.n	8011c0a <lTCPWindowRxCheck+0xbe>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	dd09      	ble.n	8011c0a <lTCPWindowRxCheck+0xbe>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	697a      	ldr	r2, [r7, #20]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	dc05      	bgt.n	8011c0a <lTCPWindowRxCheck+0xbe>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8011bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c02:	68f8      	ldr	r0, [r7, #12]
 8011c04:	f7ff ff4e 	bl	8011aa4 <prvTCPWindowRx_UnexpectedRX>
 8011c08:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8011c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3730      	adds	r7, #48	@ 0x30
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8011c14:	b480      	push	{r7}
 8011c16:	b087      	sub	sp, #28
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	60f8      	str	r0, [r7, #12]
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8011c20:	68fa      	ldr	r2, [r7, #12]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	4413      	add	r3, r2
 8011c26:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8011c28:	697a      	ldr	r2, [r7, #20]
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	db03      	blt.n	8011c38 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8011c30:	697a      	ldr	r2, [r7, #20]
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	1ad3      	subs	r3, r2, r3
 8011c36:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8011c38:	697b      	ldr	r3, [r7, #20]
        }
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	371c      	adds	r7, #28
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c44:	4770      	bx	lr

08011c46 <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b086      	sub	sp, #24
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	60f8      	str	r0, [r7, #12]
 8011c4e:	60b9      	str	r1, [r7, #8]
 8011c50:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	685a      	ldr	r2, [r3, #4]
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	689b      	ldr	r3, [r3, #8]
 8011c5a:	1ad3      	subs	r3, r2, r3
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7f9 fe58 	bl	800b914 <FreeRTOS_min_int32>
 8011c64:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	689a      	ldr	r2, [r3, #8]
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	441a      	add	r2, r3
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	689a      	ldr	r2, [r3, #8]
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	db02      	blt.n	8011c84 <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2200      	movs	r2, #0
 8011c82:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	441a      	add	r2, r3
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	635a      	str	r2, [r3, #52]	@ 0x34
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8011c90:	697b      	ldr	r3, [r7, #20]
        }
 8011c92:	4618      	mov	r0, r3
 8011c94:	3718      	adds	r7, #24
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}

08011c9a <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8011c9a:	b580      	push	{r7, lr}
 8011c9c:	b08a      	sub	sp, #40	@ 0x28
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	60f8      	str	r0, [r7, #12]
 8011ca2:	60b9      	str	r1, [r7, #8]
 8011ca4:	607a      	str	r2, [r7, #4]
 8011ca6:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8011cac:	2300      	movs	r3, #0
 8011cae:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011cb8:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8011cba:	69bb      	ldr	r3, [r7, #24]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d06a      	beq.n	8011d96 <lTCPWindowTxAdd+0xfc>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	689a      	ldr	r2, [r3, #8]
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	da64      	bge.n	8011d96 <lTCPWindowTxAdd+0xfc>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	7d9b      	ldrb	r3, [r3, #22]
 8011cd0:	f003 0301 	and.w	r3, r3, #1
 8011cd4:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d15d      	bne.n	8011d96 <lTCPWindowTxAdd+0xfc>
                ( pxSegment->lDataLength != 0 ) )
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d059      	beq.n	8011d96 <lTCPWindowTxAdd+0xfc>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 8011ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ce4:	69b9      	ldr	r1, [r7, #24]
 8011ce6:	68f8      	ldr	r0, [r7, #12]
 8011ce8:	f7ff ffad 	bl	8011c46 <prvTCPWindowTxAdd_FrontSegment>
 8011cec:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8011cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	1ad3      	subs	r3, r2, r3
 8011cf4:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8011cf6:	6a3a      	ldr	r2, [r7, #32]
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	4413      	add	r3, r2
 8011cfc:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8011cfe:	697a      	ldr	r2, [r7, #20]
 8011d00:	6839      	ldr	r1, [r7, #0]
 8011d02:	69f8      	ldr	r0, [r7, #28]
 8011d04:	f7ff ff86 	bl	8011c14 <lTCPIncrementTxPosition>
 8011d08:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8011d0a:	e044      	b.n	8011d96 <lTCPWindowTxAdd+0xfc>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8011d16:	461a      	mov	r2, r3
 8011d18:	2300      	movs	r3, #0
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f7ff fc72 	bl	8011604 <xTCPWindowNew>
 8011d20:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d03a      	beq.n	8011d9e <lTCPWindowTxAdd+0x104>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8011d28:	69bb      	ldr	r3, [r7, #24]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011d30:	f7f9 fdf0 	bl	800b914 <FreeRTOS_min_int32>
 8011d34:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	697a      	ldr	r2, [r7, #20]
 8011d3a:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8011d3c:	69bb      	ldr	r3, [r7, #24]
 8011d3e:	69fa      	ldr	r2, [r7, #28]
 8011d40:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 8011d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	1ad3      	subs	r3, r2, r3
 8011d48:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8011d4a:	697a      	ldr	r2, [r7, #20]
 8011d4c:	6839      	ldr	r1, [r7, #0]
 8011d4e:	69f8      	ldr	r0, [r7, #28]
 8011d50:	f7ff ff60 	bl	8011c14 <lTCPIncrementTxPosition>
 8011d54:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	441a      	add	r2, r3
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8011d62:	6a3a      	ldr	r2, [r7, #32]
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	4413      	add	r3, r2
 8011d68:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	3318      	adds	r3, #24
 8011d74:	4619      	mov	r1, r3
 8011d76:	4610      	mov	r0, r2
 8011d78:	f7ff fb42 	bl	8011400 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	689a      	ldr	r2, [r3, #8]
 8011d80:	69bb      	ldr	r3, [r7, #24]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	da03      	bge.n	8011d90 <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	69ba      	ldr	r2, [r7, #24]
 8011d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8011d8e:	e002      	b.n	8011d96 <lTCPWindowTxAdd+0xfc>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2200      	movs	r2, #0
 8011d94:	67da      	str	r2, [r3, #124]	@ 0x7c
            while( lBytesLeft > 0 )
 8011d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	dcb7      	bgt.n	8011d0c <lTCPWindowTxAdd+0x72>
 8011d9c:	e000      	b.n	8011da0 <lTCPWindowTxAdd+0x106>
                    if( lDone != 0 )
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
                    }

                    break;
 8011d9e:	bf00      	nop
                }
            }

            return lDone;
 8011da0:	6a3b      	ldr	r3, [r7, #32]
        }
 8011da2:	4618      	mov	r0, r3
 8011da4:	3728      	adds	r7, #40	@ 0x28
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8011daa:	b480      	push	{r7}
 8011dac:	b083      	sub	sp, #12
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d101      	bne.n	8011dc0 <xTCPWindowTxDone+0x16>
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	e000      	b.n	8011dc2 <xTCPWindowTxDone+0x18>
 8011dc0:	2300      	movs	r3, #0
        }
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	370c      	adds	r7, #12
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr

08011dce <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b086      	sub	sp, #24
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
 8011dd6:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	3354      	adds	r3, #84	@ 0x54
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7ff fcc6 	bl	801176e <xTCPWindowPeekHead>
 8011de2:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d102      	bne.n	8011df0 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8011dea:	2300      	movs	r3, #0
 8011dec:	613b      	str	r3, [r7, #16]
 8011dee:	e02f      	b.n	8011e50 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6a1b      	ldr	r3, [r3, #32]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d306      	bcc.n	8011e0a <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6a1b      	ldr	r3, [r3, #32]
 8011e04:	1ad3      	subs	r3, r2, r3
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e001      	b.n	8011e0e <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8011e0e:	6979      	ldr	r1, [r7, #20]
 8011e10:	6838      	ldr	r0, [r7, #0]
 8011e12:	f7f9 fd8f 	bl	800b934 <FreeRTOS_min_uint32>
 8011e16:	4602      	mov	r2, r0
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	1a9b      	subs	r3, r3, r2
 8011e1c:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	461a      	mov	r2, r3
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d302      	bcc.n	8011e30 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	613b      	str	r3, [r7, #16]
 8011e2e:	e001      	b.n	8011e34 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8011e30:	2300      	movs	r3, #0
 8011e32:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d00a      	beq.n	8011e50 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	689b      	ldr	r3, [r3, #8]
 8011e42:	4619      	mov	r1, r3
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d201      	bcs.n	8011e50 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8011e50:	693b      	ldr	r3, [r7, #16]
        }
 8011e52:	4618      	mov	r0, r3
 8011e54:	3718      	adds	r7, #24
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b08a      	sub	sp, #40	@ 0x28
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	60f8      	str	r0, [r7, #12]
 8011e62:	60b9      	str	r1, [r7, #8]
 8011e64:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2200      	movs	r2, #0
 8011e6a:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d002      	beq.n	8011e7a <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 8011e74:	2301      	movs	r3, #1
 8011e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e78:	e050      	b.n	8011f1c <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	3368      	adds	r3, #104	@ 0x68
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7ff fc75 	bl	801176e <xTCPWindowPeekHead>
 8011e84:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 8011e86:	6a3b      	ldr	r3, [r7, #32]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d01f      	beq.n	8011ecc <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e90:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8011e92:	6a3b      	ldr	r3, [r7, #32]
 8011e94:	3310      	adds	r3, #16
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7ff facf 	bl	801143a <ulTimerGetAge>
 8011e9c:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8011e9e:	6a3b      	ldr	r3, [r7, #32]
 8011ea0:	7d1b      	ldrb	r3, [r3, #20]
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	4093      	lsls	r3, r2
 8011ea8:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	69fa      	ldr	r2, [r7, #28]
 8011eae:	fb02 f303 	mul.w	r3, r2, r3
 8011eb2:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 8011eb4:	697a      	ldr	r2, [r7, #20]
 8011eb6:	69bb      	ldr	r3, [r7, #24]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d904      	bls.n	8011ec6 <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8011ebc:	697a      	ldr	r2, [r7, #20]
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	1ad2      	subs	r2, r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8011eca:	e027      	b.n	8011f1c <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	3354      	adds	r3, #84	@ 0x54
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f7ff fc4c 	bl	801176e <xTCPWindowPeekHead>
 8011ed6:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 8011ed8:	6a3b      	ldr	r3, [r7, #32]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d102      	bne.n	8011ee4 <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ee2:	e01b      	b.n	8011f1c <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8011ee4:	68b9      	ldr	r1, [r7, #8]
 8011ee6:	68f8      	ldr	r0, [r7, #12]
 8011ee8:	f7ff ff71 	bl	8011dce <prvTCPWindowTxHasSpace>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d102      	bne.n	8011ef8 <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ef6:	e011      	b.n	8011f1c <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	f003 0302 	and.w	r3, r3, #2
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d008      	beq.n	8011f18 <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8011f06:	6a3b      	ldr	r3, [r7, #32]
 8011f08:	689a      	ldr	r2, [r3, #8]
 8011f0a:	6a3b      	ldr	r3, [r7, #32]
 8011f0c:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	da02      	bge.n	8011f18 <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8011f12:	2300      	movs	r3, #0
 8011f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f16:	e001      	b.n	8011f1c <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 8011f18:	2301      	movs	r3, #1
 8011f1a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3728      	adds	r7, #40	@ 0x28
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b084      	sub	sp, #16
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	3368      	adds	r3, #104	@ 0x68
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7ff fc1b 	bl	801176e <xTCPWindowPeekHead>
 8011f38:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d021      	beq.n	8011f84 <pxTCPWindowTx_GetWaitQueue+0x5e>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	7d1b      	ldrb	r3, [r3, #20]
 8011f44:	461a      	mov	r2, r3
 8011f46:	2301      	movs	r3, #1
 8011f48:	4093      	lsls	r3, r2
 8011f4a:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f50:	461a      	mov	r2, r3
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	fb02 f303 	mul.w	r3, r2, r3
 8011f58:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	3310      	adds	r3, #16
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7ff fa6b 	bl	801143a <ulTimerGetAge>
 8011f64:	4602      	mov	r2, r0
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d209      	bcs.n	8011f80 <pxTCPWindowTx_GetWaitQueue+0x5a>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	3368      	adds	r3, #104	@ 0x68
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7ff fbe3 	bl	801173c <xTCPWindowGetHead>
 8011f76:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	755a      	strb	r2, [r3, #21]
 8011f7e:	e001      	b.n	8011f84 <pxTCPWindowTx_GetWaitQueue+0x5e>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8011f80:	2300      	movs	r3, #0
 8011f82:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 8011f84:	68fb      	ldr	r3, [r7, #12]
        }
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8011f8e:	b580      	push	{r7, lr}
 8011f90:	b084      	sub	sp, #16
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
 8011f96:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	3354      	adds	r3, #84	@ 0x54
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7ff fbe6 	bl	801176e <xTCPWindowPeekHead>
 8011fa2:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d02e      	beq.n	8012008 <pxTCPWindowTx_GetTXQueue+0x7a>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f003 0302 	and.w	r3, r3, #2
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d008      	beq.n	8011fca <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	689a      	ldr	r2, [r3, #8]
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	da02      	bge.n	8011fca <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	60fb      	str	r3, [r7, #12]
 8011fc8:	e01e      	b.n	8012008 <pxTCPWindowTx_GetTXQueue+0x7a>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8011fca:	6839      	ldr	r1, [r7, #0]
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff fefe 	bl	8011dce <prvTCPWindowTxHasSpace>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d102      	bne.n	8011fde <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	60fb      	str	r3, [r7, #12]
 8011fdc:	e014      	b.n	8012008 <pxTCPWindowTx_GetTXQueue+0x7a>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	3354      	adds	r3, #84	@ 0x54
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7ff fbaa 	bl	801173c <xTCPWindowGetHead>
 8011fe8:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011fee:	68fa      	ldr	r2, [r7, #12]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d102      	bne.n	8011ffa <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	6892      	ldr	r2, [r2, #8]
 8012002:	441a      	add	r2, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	629a      	str	r2, [r3, #40]	@ 0x28
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8012008:	68fb      	ldr	r3, [r7, #12]
        }
 801200a:	4618      	mov	r0, r3
 801200c:	3710      	adds	r7, #16
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}

08012012 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8012012:	b580      	push	{r7, lr}
 8012014:	b088      	sub	sp, #32
 8012016:	af00      	add	r7, sp, #0
 8012018:	60f8      	str	r0, [r7, #12]
 801201a:	60b9      	str	r1, [r7, #8]
 801201c:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 801201e:	2300      	movs	r3, #0
 8012020:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	3340      	adds	r3, #64	@ 0x40
 8012026:	4618      	mov	r0, r3
 8012028:	f7ff fb88 	bl	801173c <xTCPWindowGetHead>
 801202c:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8012036:	69fb      	ldr	r3, [r7, #28]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d10b      	bne.n	8012054 <ulTCPWindowTxGet+0x42>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 801203c:	68f8      	ldr	r0, [r7, #12]
 801203e:	f7ff ff72 	bl	8011f26 <pxTCPWindowTx_GetWaitQueue>
 8012042:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8012044:	69fb      	ldr	r3, [r7, #28]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d104      	bne.n	8012054 <ulTCPWindowTxGet+0x42>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 801204a:	68b9      	ldr	r1, [r7, #8]
 801204c:	68f8      	ldr	r0, [r7, #12]
 801204e:	f7ff ff9e 	bl	8011f8e <pxTCPWindowTx_GetTXQueue>
 8012052:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d049      	beq.n	80120ee <ulTCPWindowTxGet+0xdc>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801205e:	2b00      	cmp	r3, #0
 8012060:	d00d      	beq.n	801207e <ulTCPWindowTxGet+0x6c>
	__asm volatile
 8012062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012066:	b672      	cpsid	i
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	b662      	cpsie	i
 8012076:	613b      	str	r3, [r7, #16]
}
 8012078:	bf00      	nop
 801207a:	bf00      	nop
 801207c:	e7fd      	b.n	801207a <ulTCPWindowTxGet+0x68>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	3318      	adds	r3, #24
 8012088:	4619      	mov	r1, r3
 801208a:	4610      	mov	r0, r2
 801208c:	f7ff f9b8 	bl	8011400 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8012090:	69fa      	ldr	r2, [r7, #28]
 8012092:	7d93      	ldrb	r3, [r2, #22]
 8012094:	f043 0301 	orr.w	r3, r3, #1
 8012098:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	7d1b      	ldrb	r3, [r3, #20]
 801209e:	3301      	adds	r3, #1
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	69fb      	ldr	r3, [r7, #28]
 80120a4:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	7d1b      	ldrb	r3, [r3, #20]
 80120aa:	2b04      	cmp	r3, #4
 80120ac:	d10f      	bne.n	80120ce <ulTCPWindowTxGet+0xbc>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	689a      	ldr	r2, [r3, #8]
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80120b8:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d907      	bls.n	80120ce <ulTCPWindowTxGet+0xbc>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 80120c8:	8afa      	ldrh	r2, [r7, #22]
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 80120ce:	69fb      	ldr	r3, [r7, #28]
 80120d0:	3310      	adds	r3, #16
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7ff f9a4 	bl	8011420 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	68da      	ldr	r2, [r3, #12]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	689b      	ldr	r3, [r3, #8]
 80120ec:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 80120ee:	69bb      	ldr	r3, [r7, #24]
        }
 80120f0:	4618      	mov	r0, r3
 80120f2:	3720      	adds	r7, #32
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	3310      	adds	r3, #16
 8012106:	4618      	mov	r0, r3
 8012108:	f7ff f997 	bl	801143a <ulTimerGetAge>
 801210c:	4603      	mov	r3, r0
 801210e:	617b      	str	r3, [r7, #20]
            int32_t lSum = 0;
 8012110:	2300      	movs	r3, #0
 8012112:	60bb      	str	r3, [r7, #8]
            int32_t lWeight = 0;
 8012114:	2300      	movs	r3, #0
 8012116:	613b      	str	r3, [r7, #16]
            int32_t lDivisor = 0;
 8012118:	2300      	movs	r3, #0
 801211a:	60fb      	str	r3, [r7, #12]

            mS = ( mS < 0 ) ? ipINT32_MAX_VALUE : mS;
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	2b00      	cmp	r3, #0
 8012120:	db01      	blt.n	8012126 <prvTCPWindowTxCheckAck_CalcSRTT+0x2e>
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	e001      	b.n	801212a <prvTCPWindowTxCheckAck_CalcSRTT+0x32>
 8012126:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801212a:	617b      	str	r3, [r7, #20]

            if( pxWindow->lSRTT >= mS )
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012130:	697a      	ldr	r2, [r7, #20]
 8012132:	429a      	cmp	r2, r3
 8012134:	dc09      	bgt.n	801214a <prvTCPWindowTxCheckAck_CalcSRTT+0x52>
            {
                /* RTT becomes smaller: adapt slowly. */
                lWeight = winSRTT_DECREMENT_CURRENT;
 8012136:	2307      	movs	r3, #7
 8012138:	613b      	str	r3, [r7, #16]
                lDivisor = winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT;
 801213a:	2308      	movs	r3, #8
 801213c:	60fb      	str	r3, [r7, #12]
                mS = FreeRTOS_multiply_int32( mS,
 801213e:	2101      	movs	r1, #1
 8012140:	6978      	ldr	r0, [r7, #20]
 8012142:	f7f9 fc42 	bl	800b9ca <FreeRTOS_multiply_int32>
 8012146:	6178      	str	r0, [r7, #20]
 8012148:	e008      	b.n	801215c <prvTCPWindowTxCheckAck_CalcSRTT+0x64>
                                              winSRTT_DECREMENT_NEW );
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                lWeight = winSRTT_INCREMENT_CURRENT;
 801214a:	2306      	movs	r3, #6
 801214c:	613b      	str	r3, [r7, #16]
                lDivisor = winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT;
 801214e:	2308      	movs	r3, #8
 8012150:	60fb      	str	r3, [r7, #12]
                mS = FreeRTOS_multiply_int32( mS,
 8012152:	2102      	movs	r1, #2
 8012154:	6978      	ldr	r0, [r7, #20]
 8012156:	f7f9 fc38 	bl	800b9ca <FreeRTOS_multiply_int32>
 801215a:	6178      	str	r0, [r7, #20]
                                              winSRTT_INCREMENT_NEW );
            }

            lSum = FreeRTOS_multiply_int32( pxWindow->lSRTT, lWeight );
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012160:	6939      	ldr	r1, [r7, #16]
 8012162:	4618      	mov	r0, r3
 8012164:	f7f9 fc31 	bl	800b9ca <FreeRTOS_multiply_int32>
 8012168:	60b8      	str	r0, [r7, #8]
            lSum = FreeRTOS_add_int32( lSum, mS );
 801216a:	6979      	ldr	r1, [r7, #20]
 801216c:	68b8      	ldr	r0, [r7, #8]
 801216e:	f7f9 fc01 	bl	800b974 <FreeRTOS_add_int32>
 8012172:	60b8      	str	r0, [r7, #8]
            pxWindow->lSRTT = lSum / lDivisor;
 8012174:	68ba      	ldr	r2, [r7, #8]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	fb92 f2f3 	sdiv	r2, r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012184:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012188:	da03      	bge.n	8012192 <prvTCPWindowTxCheckAck_CalcSRTT+0x9a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012190:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8012192:	bf00      	nop
 8012194:	3718      	adds	r7, #24
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}

0801219a <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 801219a:	b580      	push	{r7, lr}
 801219c:	b08c      	sub	sp, #48	@ 0x30
 801219e:	af00      	add	r7, sp, #0
 80121a0:	60f8      	str	r0, [r7, #12]
 80121a2:	60b9      	str	r1, [r7, #8]
 80121a4:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 80121a6:	2300      	movs	r3, #0
 80121a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	3398      	adds	r3, #152	@ 0x98
 80121b2:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 80121ba:	e06d      	b.n	8012298 <prvTCPWindowTxCheckAck+0xfe>
            {
                xDoUnlink = pdFALSE;
 80121bc:	2300      	movs	r3, #0
 80121be:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80121c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80121c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 80121cc:	69bb      	ldr	r3, [r7, #24]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	4619      	mov	r1, r3
 80121d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80121d4:	f7ff f8e9 	bl	80113aa <xSequenceGreaterThan>
 80121d8:	4603      	mov	r3, r0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d15b      	bne.n	8012296 <prvTCPWindowTxCheckAck+0xfc>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 80121de:	69bb      	ldr	r3, [r7, #24]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d163      	bne.n	80122b0 <prvTCPWindowTxCheckAck+0x116>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80121ee:	69bb      	ldr	r3, [r7, #24]
 80121f0:	7d9b      	ldrb	r3, [r3, #22]
 80121f2:	f003 0302 	and.w	r3, r3, #2
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d127      	bne.n	801224c <prvTCPWindowTxCheckAck+0xb2>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	4413      	add	r3, r2
 8012204:	6879      	ldr	r1, [r7, #4]
 8012206:	4618      	mov	r0, r3
 8012208:	f7ff f8cf 	bl	80113aa <xSequenceGreaterThan>
 801220c:	4603      	mov	r3, r0
 801220e:	2b00      	cmp	r3, #0
 8012210:	d006      	beq.n	8012220 <prvTCPWindowTxCheckAck+0x86>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	681a      	ldr	r2, [r3, #0]
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	69db      	ldr	r3, [r3, #28]
 801221a:	1ad3      	subs	r3, r2, r3
 801221c:	613b      	str	r3, [r7, #16]
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 801221e:	e048      	b.n	80122b2 <prvTCPWindowTxCheckAck+0x118>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8012220:	69ba      	ldr	r2, [r7, #24]
 8012222:	7d93      	ldrb	r3, [r2, #22]
 8012224:	f043 0302 	orr.w	r3, r3, #2
 8012228:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	7d1b      	ldrb	r3, [r3, #20]
 801222e:	2b01      	cmp	r3, #1
 8012230:	d10a      	bne.n	8012248 <prvTCPWindowTxCheckAck+0xae>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 801223a:	687a      	ldr	r2, [r7, #4]
 801223c:	429a      	cmp	r2, r3
 801223e:	d103      	bne.n	8012248 <prvTCPWindowTxCheckAck+0xae>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8012240:	69b9      	ldr	r1, [r7, #24]
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f7ff ff58 	bl	80120f8 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8012248:	2301      	movs	r3, #1
 801224a:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	6a1b      	ldr	r3, [r3, #32]
 8012250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012252:	429a      	cmp	r2, r3
 8012254:	d10e      	bne.n	8012274 <prvTCPWindowTxCheckAck+0xda>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6a1a      	ldr	r2, [r3, #32]
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	441a      	add	r2, r3
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8012262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	4413      	add	r3, r2
 8012268:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 801226a:	69b8      	ldr	r0, [r7, #24]
 801226c:	f7ff fa98 	bl	80117a0 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8012270:	2300      	movs	r3, #0
 8012272:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8012274:	6a3b      	ldr	r3, [r7, #32]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d008      	beq.n	801228c <prvTCPWindowTxCheckAck+0xf2>
 801227a:	69bb      	ldr	r3, [r7, #24]
 801227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801227e:	2b00      	cmp	r3, #0
 8012280:	d004      	beq.n	801228c <prvTCPWindowTxCheckAck+0xf2>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	3318      	adds	r3, #24
 8012286:	4618      	mov	r0, r3
 8012288:	f002 ff33 	bl	80150f2 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 801228c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	4413      	add	r3, r2
 8012292:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012294:	e000      	b.n	8012298 <prvTCPWindowTxCheckAck+0xfe>
                    continue;
 8012296:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8012298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	429a      	cmp	r2, r3
 801229e:	d008      	beq.n	80122b2 <prvTCPWindowTxCheckAck+0x118>
 80122a0:	6879      	ldr	r1, [r7, #4]
 80122a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80122a4:	f7ff f86b 	bl	801137e <xSequenceLessThan>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d186      	bne.n	80121bc <prvTCPWindowTxCheckAck+0x22>
 80122ae:	e000      	b.n	80122b2 <prvTCPWindowTxCheckAck+0x118>
                    break;
 80122b0:	bf00      	nop
            }

            return ulBytesConfirmed;
 80122b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80122b4:	4618      	mov	r0, r3
 80122b6:	3730      	adds	r7, #48	@ 0x30
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 80122bc:	b580      	push	{r7, lr}
 80122be:	b086      	sub	sp, #24
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 80122c6:	2300      	movs	r3, #0
 80122c8:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	3370      	adds	r3, #112	@ 0x70
 80122ce:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 80122d6:	e033      	b.n	8012340 <prvTCPWindowFastRetransmit+0x84>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	7d9b      	ldrb	r3, [r3, #22]
 80122e8:	f003 0302 	and.w	r3, r3, #2
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d126      	bne.n	8012340 <prvTCPWindowFastRetransmit+0x84>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	6839      	ldr	r1, [r7, #0]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7ff f840 	bl	801137e <xSequenceLessThan>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	d01d      	beq.n	8012340 <prvTCPWindowFastRetransmit+0x84>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	7d5b      	ldrb	r3, [r3, #21]
 8012308:	3301      	adds	r3, #1
 801230a:	b2da      	uxtb	r2, r3
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	7d5b      	ldrb	r3, [r3, #21]
 8012314:	2b03      	cmp	r3, #3
 8012316:	d113      	bne.n	8012340 <prvTCPWindowFastRetransmit+0x84>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	2200      	movs	r2, #0
 801231c:	751a      	strb	r2, [r3, #20]
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	3318      	adds	r3, #24
 8012322:	4618      	mov	r0, r3
 8012324:	f002 fee5 	bl	80150f2 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	3318      	adds	r3, #24
 8012332:	4619      	mov	r1, r3
 8012334:	4610      	mov	r0, r2
 8012336:	f7ff f863 	bl	8011400 <vListInsertFifo>
                            ulCount++;
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	3301      	adds	r3, #1
 801233e:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8012340:	697a      	ldr	r2, [r7, #20]
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	429a      	cmp	r2, r3
 8012346:	d1c7      	bne.n	80122d8 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8012348:	693b      	ldr	r3, [r7, #16]
        }
 801234a:	4618      	mov	r0, r3
 801234c:	3718      	adds	r7, #24
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}

08012352 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8012352:	b580      	push	{r7, lr}
 8012354:	b084      	sub	sp, #16
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
 801235a:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6a1b      	ldr	r3, [r3, #32]
 8012360:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	6838      	ldr	r0, [r7, #0]
 8012366:	f7fe fff5 	bl	8011354 <xSequenceLessThanOrEqual>
 801236a:	4603      	mov	r3, r0
 801236c:	2b00      	cmp	r3, #0
 801236e:	d002      	beq.n	8012376 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8012370:	2300      	movs	r3, #0
 8012372:	60fb      	str	r3, [r7, #12]
 8012374:	e005      	b.n	8012382 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8012376:	683a      	ldr	r2, [r7, #0]
 8012378:	68b9      	ldr	r1, [r7, #8]
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7ff ff0d 	bl	801219a <prvTCPWindowTxCheckAck>
 8012380:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8012382:	68fb      	ldr	r3, [r7, #12]
        }
 8012384:	4618      	mov	r0, r3
 8012386:	3710      	adds	r7, #16
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 801238c:	b580      	push	{r7, lr}
 801238e:	b086      	sub	sp, #24
 8012390:	af00      	add	r7, sp, #0
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	6a1b      	ldr	r3, [r3, #32]
 801239c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	68b9      	ldr	r1, [r7, #8]
 80123a2:	68f8      	ldr	r0, [r7, #12]
 80123a4:	f7ff fef9 	bl	801219a <prvTCPWindowTxCheckAck>
 80123a8:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 80123aa:	68b9      	ldr	r1, [r7, #8]
 80123ac:	68f8      	ldr	r0, [r7, #12]
 80123ae:	f7ff ff85 	bl	80122bc <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 80123b2:	4b06      	ldr	r3, [pc, #24]	@ (80123cc <ulTCPWindowTxSack+0x40>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	dd03      	ble.n	80123c2 <ulTCPWindowTxSack+0x36>
 80123ba:	6979      	ldr	r1, [r7, #20]
 80123bc:	68b8      	ldr	r0, [r7, #8]
 80123be:	f7fe fff4 	bl	80113aa <xSequenceGreaterThan>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 80123c2:	693b      	ldr	r3, [r7, #16]
        }
 80123c4:	4618      	mov	r0, r3
 80123c6:	3718      	adds	r7, #24
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	20002690 	.word	0x20002690

080123d0 <vProcessGeneratedUDPPacket>:
 *        packet such as cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d00d      	beq.n	80123fa <vProcessGeneratedUDPPacket+0x2a>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123e2:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	899b      	ldrh	r3, [r3, #12]
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80123ee:	d103      	bne.n	80123f8 <vProcessGeneratedUDPPacket+0x28>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipIPv4_FRAME_TYPE:
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f000 f849 	bl	8012488 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 80123f6:	e000      	b.n	80123fa <vProcessGeneratedUDPPacket+0x2a>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 80123f8:	bf00      	nop
        }
    }
}
 80123fa:	bf00      	nop
 80123fc:	3710      	adds	r7, #16
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForResolution )
{
 8012402:	b580      	push	{r7, lr}
 8012404:	b088      	sub	sp, #32
 8012406:	af00      	add	r7, sp, #0
 8012408:	60f8      	str	r0, [r7, #12]
 801240a:	460b      	mov	r3, r1
 801240c:	607a      	str	r2, [r7, #4]
 801240e:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8012410:	2300      	movs	r3, #0
 8012412:	61fb      	str	r3, [r7, #28]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10d      	bne.n	8012436 <xProcessReceivedUDPPacket+0x34>
	__asm volatile
 801241a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801241e:	b672      	cpsid	i
 8012420:	f383 8811 	msr	BASEPRI, r3
 8012424:	f3bf 8f6f 	isb	sy
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	b662      	cpsie	i
 801242e:	617b      	str	r3, [r7, #20]
}
 8012430:	bf00      	nop
 8012432:	bf00      	nop
 8012434:	e7fd      	b.n	8012432 <xProcessReceivedUDPPacket+0x30>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801243a:	2b00      	cmp	r3, #0
 801243c:	d10d      	bne.n	801245a <xProcessReceivedUDPPacket+0x58>
	__asm volatile
 801243e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012442:	b672      	cpsid	i
 8012444:	f383 8811 	msr	BASEPRI, r3
 8012448:	f3bf 8f6f 	isb	sy
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	b662      	cpsie	i
 8012452:	613b      	str	r3, [r7, #16]
}
 8012454:	bf00      	nop
 8012456:	bf00      	nop
 8012458:	e7fd      	b.n	8012456 <xProcessReceivedUDPPacket+0x54>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801245e:	61bb      	str	r3, [r7, #24]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8012460:	69bb      	ldr	r3, [r7, #24]
 8012462:	899b      	ldrh	r3, [r3, #12]
 8012464:	b29b      	uxth	r3, r3
 8012466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801246a:	d107      	bne.n	801247c <xProcessReceivedUDPPacket+0x7a>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 801246c:	897b      	ldrh	r3, [r7, #10]
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	4619      	mov	r1, r3
 8012472:	68f8      	ldr	r0, [r7, #12]
 8012474:	f000 f904 	bl	8012680 <xProcessReceivedUDPPacket_IPv4>
 8012478:	61f8      	str	r0, [r7, #28]
                                                          usPort, pxIsWaitingForResolution );
                break;
 801247a:	e000      	b.n	801247e <xProcessReceivedUDPPacket+0x7c>
                                                          usPort, pxIsWaitingForResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 801247c:	bf00      	nop
    }

    return xReturn;
 801247e:	69fb      	ldr	r3, [r7, #28]
}
 8012480:	4618      	mov	r0, r3
 8012482:	3720      	adds	r7, #32
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b08e      	sub	sp, #56	@ 0x38
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eResolutionLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	695b      	ldr	r3, [r3, #20]
 8012494:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801249a:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124a0:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d104      	bne.n	80124b4 <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124ae:	3b2a      	subs	r3, #42	@ 0x2a
 80124b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80124b2:	e003      	b.n	80124bc <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124b8:	3b2a      	subs	r3, #42	@ 0x2a
 80124ba:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 80124bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80124be:	f107 0208 	add.w	r2, r7, #8
 80124c2:	f107 030c 	add.w	r3, r7, #12
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7f5 fc30 	bl	8007d2c <eARPGetCacheEntry>
 80124cc:	4603      	mov	r3, r0
 80124ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d102      	bne.n	80124e0 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80124da:	68ba      	ldr	r2, [r7, #8]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eResolutionFailed )
 80124e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80124e4:	2b02      	cmp	r3, #2
 80124e6:	d07f      	beq.n	80125e8 <vProcessGeneratedUDPPacket_IPv4+0x160>
    {
        if( eReturned == eResolutionCacheHit )
 80124e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d158      	bne.n	80125a2 <vProcessGeneratedUDPPacket_IPv4+0x11a>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 80124f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124f2:	330e      	adds	r3, #14
 80124f4:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d01a      	beq.n	8012534 <vProcessGeneratedUDPPacket_IPv4+0xac>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 80124fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012500:	3322      	adds	r3, #34	@ 0x22
 8012502:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8012508:	6a3b      	ldr	r3, [r7, #32]
 801250a:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8012510:	6a3b      	ldr	r3, [r7, #32]
 8012512:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8012514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012516:	b29b      	uxth	r3, r3
 8012518:	3308      	adds	r3, #8
 801251a:	b29a      	uxth	r2, r3
 801251c:	6a3b      	ldr	r3, [r7, #32]
 801251e:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8012520:	6a3b      	ldr	r3, [r7, #32]
 8012522:	889b      	ldrh	r3, [r3, #4]
 8012524:	b29a      	uxth	r2, r3
 8012526:	6a3b      	ldr	r3, [r7, #32]
 8012528:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801252a:	6a3b      	ldr	r3, [r7, #32]
 801252c:	2200      	movs	r2, #0
 801252e:	719a      	strb	r2, [r3, #6]
 8012530:	2200      	movs	r2, #0
 8012532:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8012534:	4b51      	ldr	r3, [pc, #324]	@ (801267c <vProcessGeneratedUDPPacket_IPv4+0x1f4>)
 8012536:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801253c:	3306      	adds	r3, #6
 801253e:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8012540:	2218      	movs	r2, #24
 8012542:	69f9      	ldr	r1, [r7, #28]
 8012544:	69b8      	ldr	r0, [r7, #24]
 8012546:	f006 fbe8 	bl	8018d1a <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801254e:	2b00      	cmp	r3, #0
 8012550:	d109      	bne.n	8012566 <vProcessGeneratedUDPPacket_IPv4+0xde>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8012552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012554:	2201      	movs	r2, #1
 8012556:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8012558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801255a:	b29b      	uxth	r3, r3
 801255c:	331c      	adds	r3, #28
 801255e:	b29a      	uxth	r2, r3
 8012560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012562:	805a      	strh	r2, [r3, #2]
 8012564:	e005      	b.n	8012572 <vProcessGeneratedUDPPacket_IPv4+0xea>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8012566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012568:	b29b      	uxth	r3, r3
 801256a:	331c      	adds	r3, #28
 801256c:	b29a      	uxth	r2, r3
 801256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012570:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8012572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012574:	885b      	ldrh	r3, [r3, #2]
 8012576:	b29a      	uxth	r2, r3
 8012578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801257a:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	695a      	ldr	r2, [r3, #20]
 8012580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012582:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012588:	2b00      	cmp	r3, #0
 801258a:	d004      	beq.n	8012596 <vProcessGeneratedUDPPacket_IPv4+0x10e>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012590:	681a      	ldr	r2, [r3, #0]
 8012592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012594:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8012596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012598:	2200      	movs	r2, #0
 801259a:	719a      	strb	r2, [r3, #6]
 801259c:	2200      	movs	r2, #0
 801259e:	71da      	strb	r2, [r3, #7]
 80125a0:	e022      	b.n	80125e8 <vProcessGeneratedUDPPacket_IPv4+0x160>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eResolutionCacheMiss )
 80125a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d11b      	bne.n	80125e2 <vProcessGeneratedUDPPacket_IPv4+0x15a>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2200      	movs	r2, #0
 80125ae:	4619      	mov	r1, r3
 80125b0:	2000      	movs	r0, #0
 80125b2:	f7f5 faa9 	bl	8007b08 <vARPRefreshCacheEntry>
            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */
            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress );
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7f9 feaf 	bl	800c31c <FreeRTOS_FindEndPointOnNetMask>
 80125be:	4602      	mov	r2, r0
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d103      	bne.n	80125d4 <vProcessGeneratedUDPPacket_IPv4+0x14c>
            {
                eReturned = eResolutionFailed;
 80125cc:	2302      	movs	r3, #2
 80125ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80125d2:	e009      	b.n	80125e8 <vProcessGeneratedUDPPacket_IPv4+0x160>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 80125d4:	68fa      	ldr	r2, [r7, #12]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7f5 fdfa 	bl	80081d4 <vARPGenerateRequestPacket>
 80125e0:	e002      	b.n	80125e8 <vProcessGeneratedUDPPacket_IPv4+0x160>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eResolutionFailed;
 80125e2:	2302      	movs	r3, #2
 80125e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eResolutionFailed )
 80125e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80125ec:	2b02      	cmp	r3, #2
 80125ee:	d03d      	beq.n	801266c <vProcessGeneratedUDPPacket_IPv4+0x1e4>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d035      	beq.n	8012664 <vProcessGeneratedUDPPacket_IPv4+0x1dc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012600:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012606:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	1d98      	adds	r0, r3, #6
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012610:	3338      	adds	r3, #56	@ 0x38
 8012612:	2206      	movs	r2, #6
 8012614:	4619      	mov	r1, r3
 8012616:	f006 fb80 	bl	8018d1a <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801261e:	2b3b      	cmp	r3, #59	@ 0x3b
 8012620:	d812      	bhi.n	8012648 <vProcessGeneratedUDPPacket_IPv4+0x1c0>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012628:	e008      	b.n	801263c <vProcessGeneratedUDPPacket_IPv4+0x1b4>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801262e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012630:	4413      	add	r3, r2
 8012632:	2200      	movs	r2, #0
 8012634:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8012636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012638:	3301      	adds	r3, #1
 801263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801263c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801263e:	2b3b      	cmp	r3, #59	@ 0x3b
 8012640:	ddf3      	ble.n	801262a <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	223c      	movs	r2, #60	@ 0x3c
 8012646:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d011      	beq.n	8012672 <vProcessGeneratedUDPPacket_IPv4+0x1ea>
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	68db      	ldr	r3, [r3, #12]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d00d      	beq.n	8012672 <vProcessGeneratedUDPPacket_IPv4+0x1ea>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	2201      	movs	r2, #1
 801265c:	6879      	ldr	r1, [r7, #4]
 801265e:	6978      	ldr	r0, [r7, #20]
 8012660:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8012662:	e006      	b.n	8012672 <vProcessGeneratedUDPPacket_IPv4+0x1ea>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 fa41 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
}
 801266a:	e002      	b.n	8012672 <vProcessGeneratedUDPPacket_IPv4+0x1ea>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f000 fa3d 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
}
 8012672:	bf00      	nop
 8012674:	3738      	adds	r7, #56	@ 0x38
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	08019ed0 	.word	0x08019ed0

08012680 <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8012680:	b590      	push	{r4, r7, lr}
 8012682:	b09b      	sub	sp, #108	@ 0x6c
 8012684:	af02      	add	r7, sp, #8
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	460b      	mov	r3, r1
 801268a:	607a      	str	r2, [r7, #4]
 801268c:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 801268e:	2301      	movs	r3, #1
 8012690:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d10d      	bne.n	80126b4 <xProcessReceivedUDPPacket_IPv4+0x34>
	__asm volatile
 8012698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801269c:	b672      	cpsid	i
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
 80126aa:	b662      	cpsie	i
 80126ac:	647b      	str	r3, [r7, #68]	@ 0x44
}
 80126ae:	bf00      	nop
 80126b0:	bf00      	nop
 80126b2:	e7fd      	b.n	80126b0 <xProcessReceivedUDPPacket_IPv4+0x30>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d10d      	bne.n	80126d8 <xProcessReceivedUDPPacket_IPv4+0x58>
	__asm volatile
 80126bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c0:	b672      	cpsid	i
 80126c2:	f383 8811 	msr	BASEPRI, r3
 80126c6:	f3bf 8f6f 	isb	sy
 80126ca:	f3bf 8f4f 	dsb	sy
 80126ce:	b662      	cpsie	i
 80126d0:	643b      	str	r3, [r7, #64]	@ 0x40
}
 80126d2:	bf00      	nop
 80126d4:	bf00      	nop
 80126d6:	e7fd      	b.n	80126d4 <xProcessReceivedUDPPacket_IPv4+0x54>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126e2:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80126e4:	897b      	ldrh	r3, [r7, #10]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fa ffe4 	bl	800d6b4 <pxUDPSocketLookup>
 80126ec:	6538      	str	r0, [r7, #80]	@ 0x50

    *pxIsWaitingForARPResolution = pdFALSE;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2200      	movs	r2, #0
 80126f2:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 80126f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f000 8097 	beq.w	801282a <xProcessReceivedUDPPacket_IPv4+0x1aa>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 80126fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d018      	beq.n	8012734 <xProcessReceivedUDPPacket_IPv4+0xb4>
 8012702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d014      	beq.n	8012734 <xProcessReceivedUDPPacket_IPv4+0xb4>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 801270a:	68f8      	ldr	r0, [r7, #12]
 801270c:	f7f5 f976 	bl	80079fc <xCheckRequiresARPResolution>
 8012710:	4603      	mov	r3, r0
 8012712:	2b01      	cmp	r3, #1
 8012714:	d105      	bne.n	8012722 <xProcessReceivedUDPPacket_IPv4+0xa2>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2201      	movs	r2, #1
 801271a:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 801271c:	2300      	movs	r3, #0
 801271e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    break;
 8012720:	e09a      	b.n	8012858 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8012722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012724:	1d9a      	adds	r2, r3, #6
 8012726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012728:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801272c:	4619      	mov	r1, r3
 801272e:	4610      	mov	r0, r2
 8012730:	f7f5 f9b4 	bl	8007a9c <vARPRefreshCacheEntryAge>
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012738:	332a      	adds	r3, #42	@ 0x2a
 801273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 801273c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012740:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8012746:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	695b      	ldr	r3, [r3, #20]
 801274c:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 801274e:	2302      	movs	r3, #2
 8012750:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8012754:	2318      	movs	r3, #24
 8012756:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 801275a:	897b      	ldrh	r3, [r7, #10]
 801275c:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 801275e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012760:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8012764:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8012766:	2302      	movs	r3, #2
 8012768:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 801276a:	2318      	movs	r3, #24
 801276c:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012772:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8012776:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801277a:	f107 0310 	add.w	r3, r7, #16
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8012782:	460b      	mov	r3, r1
 8012784:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8012786:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012788:	47a0      	blx	r4
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d001      	beq.n	8012794 <xProcessReceivedUDPPacket_IPv4+0x114>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8012790:	2300      	movs	r3, #0
 8012792:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
            #endif /* ipconfigUSE_CALLBACKS */

            #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
            {
                if( xReturn == pdPASS )
 8012794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012796:	2b01      	cmp	r3, #1
 8012798:	d107      	bne.n	80127aa <xProcessReceivedUDPPacket_IPv4+0x12a>
                {
                    if( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) >= pxSocket->u.xUDP.uxMaxPackets )
 801279a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801279c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801279e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d301      	bcc.n	80127aa <xProcessReceivedUDPPacket_IPv4+0x12a>
                    {
                        FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket: buffer full %ld >= %ld port %u\n",
                                                 listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ),
                                                 pxSocket->u.xUDP.uxMaxPackets, pxSocket->usLocalPort ) );
                        xReturn = pdFAIL; /* we did not consume or release the buffer */
 80127a6:	2300      	movs	r3, #0
 80127a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80127aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d153      	bne.n	8012858 <xProcessReceivedUDPPacket_IPv4+0x1d8>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80127b0:	f003 fe90 	bl	80164d4 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80127b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127b6:	3358      	adds	r3, #88	@ 0x58
 80127b8:	68fa      	ldr	r2, [r7, #12]
 80127ba:	4611      	mov	r1, r2
 80127bc:	4618      	mov	r0, r3
 80127be:	f002 fc3b 	bl	8015038 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80127c2:	f003 fe95 	bl	80164f0 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80127c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d005      	beq.n	80127da <xProcessReceivedUDPPacket_IPv4+0x15a>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80127ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	2101      	movs	r1, #1
 80127d4:	4618      	mov	r0, r3
 80127d6:	f002 fb18 	bl	8014e0a <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80127da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d00c      	beq.n	80127fc <xProcessReceivedUDPPacket_IPv4+0x17c>
 80127e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80127e6:	f003 0301 	and.w	r3, r3, #1
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d006      	beq.n	80127fc <xProcessReceivedUDPPacket_IPv4+0x17c>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80127ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	2101      	movs	r1, #1
 80127f6:	4618      	mov	r0, r3
 80127f8:	f002 fb07 	bl	8014e0a <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80127fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012800:	2b00      	cmp	r3, #0
 8012802:	d006      	beq.n	8012812 <xProcessReceivedUDPPacket_IPv4+0x192>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8012804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012806:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012808:	2300      	movs	r3, #0
 801280a:	2200      	movs	r2, #0
 801280c:	2100      	movs	r1, #0
 801280e:	f002 fe23 	bl	8015458 <xQueueGenericSend>
                }
                #endif

                #if ( ipconfigUSE_DHCP == 1 )
                {
                    if( xIsDHCPSocket( pxSocket ) != 0 )
 8012812:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012814:	f7f5 fd96 	bl	8008344 <xIsDHCPSocket>
 8012818:	4603      	mov	r3, r0
 801281a:	2b00      	cmp	r3, #0
 801281c:	d01c      	beq.n	8012858 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                    {
                        ( void ) xSendDHCPEvent( pxNetworkBuffer->pxEndPoint );
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012822:	4618      	mov	r0, r3
 8012824:	f7f8 fdf6 	bl	800b414 <xSendDHCPEvent>
 8012828:	e016      	b.n	8012858 <xProcessReceivedUDPPacket_IPv4+0x1d8>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801282a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801282c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801282e:	b29b      	uxth	r3, r3
 8012830:	2b35      	cmp	r3, #53	@ 0x35
 8012832:	d10f      	bne.n	8012854 <xProcessReceivedUDPPacket_IPv4+0x1d4>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8012834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012836:	1d98      	adds	r0, r3, #6
 8012838:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801283a:	f8d3 101a 	ldr.w	r1, [r3, #26]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012842:	461a      	mov	r2, r3
 8012844:	f7f5 f960 	bl	8007b08 <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f7f6 fde6 	bl	800941a <ulDNSHandlePacket>
 801284e:	4603      	mov	r3, r0
 8012850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012852:	e001      	b.n	8012858 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8012854:	2300      	movs	r3, #0
 8012856:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8012858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801285a:	4618      	mov	r0, r3
 801285c:	3764      	adds	r7, #100	@ 0x64
 801285e:	46bd      	mov	sp, r7
 8012860:	bd90      	pop	{r4, r7, pc}
	...

08012864 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 801286a:	4b3a      	ldr	r3, [pc, #232]	@ (8012954 <xNetworkBuffersInitialise+0xf0>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d161      	bne.n	8012936 <xNetworkBuffersInitialise+0xd2>
    {
        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            static StaticSemaphore_t xNetworkBufferSemaphoreBuffer;
            xNetworkBufferSemaphore = xSemaphoreCreateCountingStatic(
 8012872:	4a39      	ldr	r2, [pc, #228]	@ (8012958 <xNetworkBuffersInitialise+0xf4>)
 8012874:	213c      	movs	r1, #60	@ 0x3c
 8012876:	203c      	movs	r0, #60	@ 0x3c
 8012878:	f002 fdb1 	bl	80153de <xQueueCreateCountingSemaphoreStatic>
 801287c:	4603      	mov	r3, r0
 801287e:	4a35      	ldr	r2, [pc, #212]	@ (8012954 <xNetworkBuffersInitialise+0xf0>)
 8012880:	6013      	str	r3, [r2, #0]
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8012882:	4b34      	ldr	r3, [pc, #208]	@ (8012954 <xNetworkBuffersInitialise+0xf0>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d10d      	bne.n	80128a6 <xNetworkBuffersInitialise+0x42>
	__asm volatile
 801288a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801288e:	b672      	cpsid	i
 8012890:	f383 8811 	msr	BASEPRI, r3
 8012894:	f3bf 8f6f 	isb	sy
 8012898:	f3bf 8f4f 	dsb	sy
 801289c:	b662      	cpsie	i
 801289e:	607b      	str	r3, [r7, #4]
}
 80128a0:	bf00      	nop
 80128a2:	bf00      	nop
 80128a4:	e7fd      	b.n	80128a2 <xNetworkBuffersInitialise+0x3e>

        if( xNetworkBufferSemaphore != NULL )
 80128a6:	4b2b      	ldr	r3, [pc, #172]	@ (8012954 <xNetworkBuffersInitialise+0xf0>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d043      	beq.n	8012936 <xNetworkBuffersInitialise+0xd2>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 80128ae:	4b29      	ldr	r3, [pc, #164]	@ (8012954 <xNetworkBuffersInitialise+0xf0>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	492a      	ldr	r1, [pc, #168]	@ (801295c <xNetworkBuffersInitialise+0xf8>)
 80128b4:	4618      	mov	r0, r3
 80128b6:	f003 fb13 	bl	8015ee0 <vQueueAddToRegistry>
                vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
            }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 80128ba:	4829      	ldr	r0, [pc, #164]	@ (8012960 <xNetworkBuffersInitialise+0xfc>)
 80128bc:	f002 fb8f 	bl	8014fde <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80128c0:	2300      	movs	r3, #0
 80128c2:	60bb      	str	r3, [r7, #8]
 80128c4:	e031      	b.n	801292a <xNetworkBuffersInitialise+0xc6>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 80128c6:	4927      	ldr	r1, [pc, #156]	@ (8012964 <xNetworkBuffersInitialise+0x100>)
 80128c8:	68ba      	ldr	r2, [r7, #8]
 80128ca:	4613      	mov	r3, r2
 80128cc:	00db      	lsls	r3, r3, #3
 80128ce:	1a9b      	subs	r3, r3, r2
 80128d0:	00db      	lsls	r3, r3, #3
 80128d2:	440b      	add	r3, r1
 80128d4:	3324      	adds	r3, #36	@ 0x24
 80128d6:	2200      	movs	r2, #0
 80128d8:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80128da:	68ba      	ldr	r2, [r7, #8]
 80128dc:	4613      	mov	r3, r2
 80128de:	00db      	lsls	r3, r3, #3
 80128e0:	1a9b      	subs	r3, r3, r2
 80128e2:	00db      	lsls	r3, r3, #3
 80128e4:	4a1f      	ldr	r2, [pc, #124]	@ (8012964 <xNetworkBuffersInitialise+0x100>)
 80128e6:	4413      	add	r3, r2
 80128e8:	4618      	mov	r0, r3
 80128ea:	f002 fb98 	bl	801501e <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 80128ee:	68ba      	ldr	r2, [r7, #8]
 80128f0:	4613      	mov	r3, r2
 80128f2:	00db      	lsls	r3, r3, #3
 80128f4:	1a9b      	subs	r3, r3, r2
 80128f6:	00db      	lsls	r3, r3, #3
 80128f8:	4a1a      	ldr	r2, [pc, #104]	@ (8012964 <xNetworkBuffersInitialise+0x100>)
 80128fa:	1899      	adds	r1, r3, r2
 80128fc:	4819      	ldr	r0, [pc, #100]	@ (8012964 <xNetworkBuffersInitialise+0x100>)
 80128fe:	68ba      	ldr	r2, [r7, #8]
 8012900:	4613      	mov	r3, r2
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	1a9b      	subs	r3, r3, r2
 8012906:	00db      	lsls	r3, r3, #3
 8012908:	4403      	add	r3, r0
 801290a:	330c      	adds	r3, #12
 801290c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 801290e:	68ba      	ldr	r2, [r7, #8]
 8012910:	4613      	mov	r3, r2
 8012912:	00db      	lsls	r3, r3, #3
 8012914:	1a9b      	subs	r3, r3, r2
 8012916:	00db      	lsls	r3, r3, #3
 8012918:	4a12      	ldr	r2, [pc, #72]	@ (8012964 <xNetworkBuffersInitialise+0x100>)
 801291a:	4413      	add	r3, r2
 801291c:	4619      	mov	r1, r3
 801291e:	4810      	ldr	r0, [pc, #64]	@ (8012960 <xNetworkBuffersInitialise+0xfc>)
 8012920:	f002 fbae 	bl	8015080 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	3301      	adds	r3, #1
 8012928:	60bb      	str	r3, [r7, #8]
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	2b3b      	cmp	r3, #59	@ 0x3b
 801292e:	d9ca      	bls.n	80128c6 <xNetworkBuffersInitialise+0x62>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8012930:	4b0d      	ldr	r3, [pc, #52]	@ (8012968 <xNetworkBuffersInitialise+0x104>)
 8012932:	223c      	movs	r2, #60	@ 0x3c
 8012934:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8012936:	4b07      	ldr	r3, [pc, #28]	@ (8012954 <xNetworkBuffersInitialise+0xf0>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d102      	bne.n	8012944 <xNetworkBuffersInitialise+0xe0>
    {
        xReturn = pdFAIL;
 801293e:	2300      	movs	r3, #0
 8012940:	60fb      	str	r3, [r7, #12]
 8012942:	e001      	b.n	8012948 <xNetworkBuffersInitialise+0xe4>
    }
    else
    {
        xReturn = pdPASS;
 8012944:	2301      	movs	r3, #1
 8012946:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8012948:	68fb      	ldr	r3, [r7, #12]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3710      	adds	r7, #16
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	200026ac 	.word	0x200026ac
 8012958:	200026b0 	.word	0x200026b0
 801295c:	08019d70 	.word	0x08019d70
 8012960:	20002694 	.word	0x20002694
 8012964:	20002700 	.word	0x20002700
 8012968:	200026a8 	.word	0x200026a8

0801296c <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
    uint8_t * pucEthernetBufferCopy = pucEthernetBuffer;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	60fb      	str	r3, [r7, #12]

    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBufferCopy != NULL )
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d005      	beq.n	801298a <vReleaseNetworkBuffer+0x1e>
    {
        /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
        /* coverity[misra_c_2012_rule_18_4_violation] */
        pucEthernetBufferCopy -= ipBUFFER_PADDING;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	3b22      	subs	r3, #34	@ 0x22
 8012982:	60fb      	str	r3, [r7, #12]
        vPortFree( ( void * ) pucEthernetBufferCopy );
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f005 fd1d 	bl	80183c4 <vPortFree>
    }
}
 801298a:	bf00      	nop
 801298c:	3710      	adds	r7, #16
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}
	...

08012994 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b08a      	sub	sp, #40	@ 0x28
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 801299e:	2300      	movs	r3, #0
 80129a0:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t uxCount;
    size_t uxMaxAllowedBytes = ( SIZE_MAX >> 1 );
 80129a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80129a6:	617b      	str	r3, [r7, #20]
    size_t xRequestedSizeBytesCopy = xRequestedSizeBytes;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	623b      	str	r3, [r7, #32]
    size_t xBytesRequiredForAlignment, xAllocatedBytes;
    BaseType_t xIntegerOverflowed = pdFALSE;
 80129ac:	2300      	movs	r3, #0
 80129ae:	61bb      	str	r3, [r7, #24]

    if( ( xRequestedSizeBytesCopy < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 80129b0:	6a3b      	ldr	r3, [r7, #32]
 80129b2:	2b45      	cmp	r3, #69	@ 0x45
 80129b4:	d801      	bhi.n	80129ba <pxGetNetworkBufferWithDescriptor+0x26>
    {
        /* ARP packets can replace application packets, so the storage must be
         * at least large enough to hold an ARP. */
        xRequestedSizeBytesCopy = baMINIMAL_BUFFER_SIZE;
 80129b6:	2346      	movs	r3, #70	@ 0x46
 80129b8:	623b      	str	r3, [r7, #32]
    }

    /* Add 2 bytes to xRequestedSizeBytesCopy and round up xRequestedSizeBytesCopy
     * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
    if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, 2U ) == pdFAIL )
 80129ba:	6a3b      	ldr	r3, [r7, #32]
 80129bc:	f113 0f03 	cmn.w	r3, #3
 80129c0:	d803      	bhi.n	80129ca <pxGetNetworkBufferWithDescriptor+0x36>
    {
        xRequestedSizeBytesCopy += 2U;
 80129c2:	6a3b      	ldr	r3, [r7, #32]
 80129c4:	3302      	adds	r3, #2
 80129c6:	623b      	str	r3, [r7, #32]
 80129c8:	e001      	b.n	80129ce <pxGetNetworkBufferWithDescriptor+0x3a>
    }
    else
    {
        xIntegerOverflowed = pdTRUE;
 80129ca:	2301      	movs	r3, #1
 80129cc:	61bb      	str	r3, [r7, #24]
    }

    if( ( xRequestedSizeBytesCopy & baALIGNMENT_MASK ) != 0U )
 80129ce:	6a3b      	ldr	r3, [r7, #32]
 80129d0:	f003 0303 	and.w	r3, r3, #3
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d011      	beq.n	80129fc <pxGetNetworkBufferWithDescriptor+0x68>
    {
        xBytesRequiredForAlignment = baALIGNMENT_BYTES - ( xRequestedSizeBytesCopy & baALIGNMENT_MASK );
 80129d8:	6a3b      	ldr	r3, [r7, #32]
 80129da:	f003 0303 	and.w	r3, r3, #3
 80129de:	f1c3 0304 	rsb	r3, r3, #4
 80129e2:	613b      	str	r3, [r7, #16]

        if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, xBytesRequiredForAlignment ) == pdFAIL )
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	43db      	mvns	r3, r3
 80129e8:	6a3a      	ldr	r2, [r7, #32]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d804      	bhi.n	80129f8 <pxGetNetworkBufferWithDescriptor+0x64>
        {
            xRequestedSizeBytesCopy += xBytesRequiredForAlignment;
 80129ee:	6a3a      	ldr	r2, [r7, #32]
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	4413      	add	r3, r2
 80129f4:	623b      	str	r3, [r7, #32]
 80129f6:	e001      	b.n	80129fc <pxGetNetworkBufferWithDescriptor+0x68>
        }
        else
        {
            xIntegerOverflowed = pdTRUE;
 80129f8:	2301      	movs	r3, #1
 80129fa:	61bb      	str	r3, [r7, #24]
        }
    }

    if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, ipBUFFER_PADDING ) == pdFAIL )
 80129fc:	6a3b      	ldr	r3, [r7, #32]
 80129fe:	f113 0f23 	cmn.w	r3, #35	@ 0x23
 8012a02:	d803      	bhi.n	8012a0c <pxGetNetworkBufferWithDescriptor+0x78>
    {
        xAllocatedBytes = xRequestedSizeBytesCopy + ipBUFFER_PADDING;
 8012a04:	6a3b      	ldr	r3, [r7, #32]
 8012a06:	3322      	adds	r3, #34	@ 0x22
 8012a08:	61fb      	str	r3, [r7, #28]
 8012a0a:	e001      	b.n	8012a10 <pxGetNetworkBufferWithDescriptor+0x7c>
    }
    else
    {
        xIntegerOverflowed = pdTRUE;
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	61bb      	str	r3, [r7, #24]
    }

    if( ( xIntegerOverflowed == pdFALSE ) && ( xAllocatedBytes <= uxMaxAllowedBytes ) && ( xNetworkBufferSemaphore != NULL ) )
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d15f      	bne.n	8012ad6 <pxGetNetworkBufferWithDescriptor+0x142>
 8012a16:	69fa      	ldr	r2, [r7, #28]
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d85b      	bhi.n	8012ad6 <pxGetNetworkBufferWithDescriptor+0x142>
 8012a1e:	4b30      	ldr	r3, [pc, #192]	@ (8012ae0 <pxGetNetworkBufferWithDescriptor+0x14c>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d057      	beq.n	8012ad6 <pxGetNetworkBufferWithDescriptor+0x142>
    {
        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8012a26:	4b2e      	ldr	r3, [pc, #184]	@ (8012ae0 <pxGetNetworkBufferWithDescriptor+0x14c>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	6839      	ldr	r1, [r7, #0]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f002 ffa9 	bl	8015984 <xQueueSemaphoreTake>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d14e      	bne.n	8012ad6 <pxGetNetworkBufferWithDescriptor+0x142>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 8012a38:	f005 fac8 	bl	8017fcc <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8012a3c:	4b29      	ldr	r3, [pc, #164]	@ (8012ae4 <pxGetNetworkBufferWithDescriptor+0x150>)
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	68db      	ldr	r3, [r3, #12]
 8012a42:	627b      	str	r3, [r7, #36]	@ 0x24
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8012a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a46:	4618      	mov	r0, r3
 8012a48:	f002 fb53 	bl	80150f2 <uxListRemove>
            }
            taskEXIT_CRITICAL();
 8012a4c:	f005 faf4 	bl	8018038 <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8012a50:	4b24      	ldr	r3, [pc, #144]	@ (8012ae4 <pxGetNetworkBufferWithDescriptor+0x150>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	60fb      	str	r3, [r7, #12]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 8012a56:	4b24      	ldr	r3, [pc, #144]	@ (8012ae8 <pxGetNetworkBufferWithDescriptor+0x154>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	68fa      	ldr	r2, [r7, #12]
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d202      	bcs.n	8012a66 <pxGetNetworkBufferWithDescriptor+0xd2>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 8012a60:	4a21      	ldr	r2, [pc, #132]	@ (8012ae8 <pxGetNetworkBufferWithDescriptor+0x154>)
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 8012a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d00d      	beq.n	8012a8a <pxGetNetworkBufferWithDescriptor+0xf6>
	__asm volatile
 8012a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a72:	b672      	cpsid	i
 8012a74:	f383 8811 	msr	BASEPRI, r3
 8012a78:	f3bf 8f6f 	isb	sy
 8012a7c:	f3bf 8f4f 	dsb	sy
 8012a80:	b662      	cpsie	i
 8012a82:	60bb      	str	r3, [r7, #8]
}
 8012a84:	bf00      	nop
 8012a86:	bf00      	nop
 8012a88:	e7fd      	b.n	8012a86 <pxGetNetworkBufferWithDescriptor+0xf2>

            if( xRequestedSizeBytesCopy > 0U )
 8012a8a:	6a3b      	ldr	r3, [r7, #32]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d022      	beq.n	8012ad6 <pxGetNetworkBufferWithDescriptor+0x142>
            {
                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xAllocatedBytes );
 8012a90:	69f8      	ldr	r0, [r7, #28]
 8012a92:	f005 fbc9 	bl	8018228 <pvPortMalloc>
 8012a96:	4602      	mov	r2, r0
 8012a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a9a:	625a      	str	r2, [r3, #36]	@ 0x24

                if( pxReturn->pucEthernetBuffer == NULL )
 8012a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d105      	bne.n	8012ab0 <pxGetNetworkBufferWithDescriptor+0x11c>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 8012aa4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012aa6:	f000 f821 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8012aae:	e012      	b.n	8012ad6 <pxGetNetworkBufferWithDescriptor+0x142>
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 8012ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ab6:	601a      	str	r2, [r3, #0]

                    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
                    /* coverity[misra_c_2012_rule_18_4_violation] */
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012abc:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8012ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac2:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytesCopy;
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac6:	6a3a      	ldr	r2, [r7, #32]
 8012ac8:	629a      	str	r2, [r3, #40]	@ 0x28
                    pxReturn->pxInterface = NULL;
 8012aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012acc:	2200      	movs	r2, #0
 8012ace:	62da      	str	r2, [r3, #44]	@ 0x2c
                    pxReturn->pxEndPoint = NULL;
 8012ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 8012ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3728      	adds	r7, #40	@ 0x28
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}
 8012ae0:	200026ac 	.word	0x200026ac
 8012ae4:	20002694 	.word	0x20002694
 8012ae8:	200026a8 	.word	0x200026a8

08012aec <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff ff37 	bl	801296c <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2200      	movs	r2, #0
 8012b02:	625a      	str	r2, [r3, #36]	@ 0x24
    pxNetworkBuffer->xDataLength = 0U;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2200      	movs	r2, #0
 8012b08:	629a      	str	r2, [r3, #40]	@ 0x28

    taskENTER_CRITICAL();
 8012b0a:	f005 fa5f 	bl	8017fcc <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	691b      	ldr	r3, [r3, #16]
 8012b12:	4a0f      	ldr	r2, [pc, #60]	@ (8012b50 <vReleaseNetworkBufferAndDescriptor+0x64>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d101      	bne.n	8012b1c <vReleaseNetworkBufferAndDescriptor+0x30>
 8012b18:	2301      	movs	r3, #1
 8012b1a:	e000      	b.n	8012b1e <vReleaseNetworkBufferAndDescriptor+0x32>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d104      	bne.n	8012b30 <vReleaseNetworkBufferAndDescriptor+0x44>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4619      	mov	r1, r3
 8012b2a:	4809      	ldr	r0, [pc, #36]	@ (8012b50 <vReleaseNetworkBufferAndDescriptor+0x64>)
 8012b2c:	f002 fa84 	bl	8015038 <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 8012b30:	f005 fa82 	bl	8018038 <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d106      	bne.n	8012b48 <vReleaseNetworkBufferAndDescriptor+0x5c>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 8012b3a:	4b06      	ldr	r3, [pc, #24]	@ (8012b54 <vReleaseNetworkBufferAndDescriptor+0x68>)
 8012b3c:	6818      	ldr	r0, [r3, #0]
 8012b3e:	2300      	movs	r3, #0
 8012b40:	2200      	movs	r2, #0
 8012b42:	2100      	movs	r1, #0
 8012b44:	f002 fc88 	bl	8015458 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8012b48:	bf00      	nop
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	20002694 	.word	0x20002694
 8012b54:	200026ac 	.word	0x200026ac

08012b58 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8012b58:	b480      	push	{r7}
 8012b5a:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8012b5c:	4b03      	ldr	r3, [pc, #12]	@ (8012b6c <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	20002694 	.word	0x20002694

08012b70 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8012b70:	b480      	push	{r7}
 8012b72:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8012b74:	4b03      	ldr	r3, [pc, #12]	@ (8012b84 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8012b76:	681b      	ldr	r3, [r3, #0]
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr
 8012b82:	bf00      	nop
 8012b84:	200026a8 	.word	0x200026a8

08012b88 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b085      	sub	sp, #20
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8012b90:	2300      	movs	r3, #0
 8012b92:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	4a11      	ldr	r2, [pc, #68]	@ (8012bdc <xHas_1F_PHYSPCS+0x54>)
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d016      	beq.n	8012bca <xHas_1F_PHYSPCS+0x42>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8012bdc <xHas_1F_PHYSPCS+0x54>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d80f      	bhi.n	8012bc4 <xHas_1F_PHYSPCS+0x3c>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8012be0 <xHas_1F_PHYSPCS+0x58>)
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d00e      	beq.n	8012bca <xHas_1F_PHYSPCS+0x42>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	4a0c      	ldr	r2, [pc, #48]	@ (8012be0 <xHas_1F_PHYSPCS+0x58>)
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	d807      	bhi.n	8012bc4 <xHas_1F_PHYSPCS+0x3c>
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8012be4 <xHas_1F_PHYSPCS+0x5c>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	d006      	beq.n	8012bca <xHas_1F_PHYSPCS+0x42>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8012be8 <xHas_1F_PHYSPCS+0x60>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d002      	beq.n	8012bca <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	60fb      	str	r3, [r7, #12]
            break;
 8012bc8:	e000      	b.n	8012bcc <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8012bca:	bf00      	nop
    }

    return xResult;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3714      	adds	r7, #20
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	ff000710 	.word	0xff000710
 8012be0:	2000a250 	.word	0x2000a250
 8012be4:	20005c90 	.word	0x20005c90
 8012be8:	2000a221 	.word	0x2000a221

08012bec <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8012bec:	b480      	push	{r7}
 8012bee:	b085      	sub	sp, #20
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8012c30 <xHas_19_PHYCR+0x44>)
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	d00b      	beq.n	8012c18 <xHas_19_PHYCR+0x2c>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	4a0b      	ldr	r2, [pc, #44]	@ (8012c30 <xHas_19_PHYCR+0x44>)
 8012c04:	4293      	cmp	r3, r2
 8012c06:	d80a      	bhi.n	8012c1e <xHas_19_PHYCR+0x32>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8012c34 <xHas_19_PHYCR+0x48>)
 8012c0c:	4293      	cmp	r3, r2
 8012c0e:	d003      	beq.n	8012c18 <xHas_19_PHYCR+0x2c>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	4a09      	ldr	r2, [pc, #36]	@ (8012c38 <xHas_19_PHYCR+0x4c>)
 8012c14:	4293      	cmp	r3, r2
 8012c16:	d102      	bne.n	8012c1e <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	60fb      	str	r3, [r7, #12]
            break;
 8012c1c:	e000      	b.n	8012c20 <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8012c1e:	bf00      	nop
    }

    return xResult;
 8012c20:	68fb      	ldr	r3, [r7, #12]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3714      	adds	r7, #20
 8012c26:	46bd      	mov	sp, r7
 8012c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2c:	4770      	bx	lr
 8012c2e:	bf00      	nop
 8012c30:	2000a221 	.word	0x2000a221
 8012c34:	0007c130 	.word	0x0007c130
 8012c38:	20005c90 	.word	0x20005c90

08012c3c <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b084      	sub	sp, #16
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	60f8      	str	r0, [r7, #12]
 8012c44:	60b9      	str	r1, [r7, #8]
 8012c46:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8012c48:	2240      	movs	r2, #64	@ 0x40
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f005 ff89 	bl	8018b64 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	68ba      	ldr	r2, [r7, #8]
 8012c56:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	605a      	str	r2, [r3, #4]
}
 8012c5e:	bf00      	nop
 8012c60:	3710      	adds	r7, #16
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}

08012c66 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b086      	sub	sp, #24
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2200      	movs	r2, #0
 8012c72:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8012c74:	2300      	movs	r3, #0
 8012c76:	617b      	str	r3, [r7, #20]
 8012c78:	e03a      	b.n	8012cf0 <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	f107 020c 	add.w	r2, r7, #12
 8012c86:	2103      	movs	r1, #3
 8012c88:	6978      	ldr	r0, [r7, #20]
 8012c8a:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d029      	beq.n	8012cea <xPhyDiscover+0x84>
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d026      	beq.n	8012cea <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	f107 0208 	add.w	r2, r7, #8
 8012ca4:	2102      	movs	r1, #2
 8012ca6:	6978      	ldr	r0, [r7, #20]
 8012ca8:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	041a      	lsls	r2, r3, #16
 8012cae:	68f9      	ldr	r1, [r7, #12]
 8012cb0:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8012cb4:	400b      	ands	r3, r1
 8012cb6:	4313      	orrs	r3, r2
 8012cb8:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cbe:	697a      	ldr	r2, [r7, #20]
 8012cc0:	b2d1      	uxtb	r1, r2
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	460a      	mov	r2, r1
 8012cc8:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	3202      	adds	r2, #2
 8012cd2:	6939      	ldr	r1, [r7, #16]
 8012cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cdc:	1c5a      	adds	r2, r3, #1
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ce6:	2b04      	cmp	r3, #4
 8012ce8:	d005      	beq.n	8012cf6 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	3301      	adds	r3, #1
 8012cee:	617b      	str	r3, [r7, #20]
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	2b1f      	cmp	r3, #31
 8012cf4:	ddc1      	ble.n	8012c7a <xPhyDiscover+0x14>
    if( pxPhyObject->xPortCount > 0 )
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
    }

    return pxPhyObject->xPortCount;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3718      	adds	r7, #24
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}

08012d02 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8012d02:	b580      	push	{r7, lr}
 8012d04:	b08c      	sub	sp, #48	@ 0x30
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
 8012d0a:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012d10:	2300      	movs	r3, #0
 8012d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d14:	e017      	b.n	8012d46 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8012d16:	687a      	ldr	r2, [r7, #4]
 8012d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d1a:	4413      	add	r3, r2
 8012d1c:	3318      	adds	r3, #24
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	f107 0218 	add.w	r2, r7, #24
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	69f8      	ldr	r0, [r7, #28]
 8012d2e:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	69ba      	ldr	r2, [r7, #24]
 8012d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012d3a:	2100      	movs	r1, #0
 8012d3c:	69f8      	ldr	r0, [r7, #28]
 8012d3e:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d42:	3301      	adds	r3, #1
 8012d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	dbe2      	blt.n	8012d16 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8012d50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012d54:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8012d56:	f107 030c 	add.w	r3, r7, #12
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f003 ff02 	bl	8016b64 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012d60:	2300      	movs	r3, #0
 8012d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d64:	e01b      	b.n	8012d9e <xPhyReset+0x9c>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8012d66:	687a      	ldr	r2, [r7, #4]
 8012d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d6a:	4413      	add	r3, r2
 8012d6c:	3318      	adds	r3, #24
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f107 0218 	add.w	r2, r7, #24
 8012d7a:	2100      	movs	r1, #0
 8012d7c:	6a38      	ldr	r0, [r7, #32]
 8012d7e:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d106      	bne.n	8012d98 <xPhyReset+0x96>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
                ulDoneMask |= ( 1U << xPhyIndex );
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8012d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d94:	4313      	orrs	r3, r2
 8012d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012da4:	429a      	cmp	r2, r3
 8012da6:	dbde      	blt.n	8012d66 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8012da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d00e      	beq.n	8012dce <xPhyReset+0xcc>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8012db0:	f107 0214 	add.w	r2, r7, #20
 8012db4:	f107 030c 	add.w	r3, r7, #12
 8012db8:	4611      	mov	r1, r2
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f003 ff12 	bl	8016be4 <xTaskCheckForTimeOut>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d105      	bne.n	8012dd2 <xPhyReset+0xd0>
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
            break;
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8012dc6:	2032      	movs	r0, #50	@ 0x32
 8012dc8:	f003 fad8 	bl	801637c <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012dcc:	e7c8      	b.n	8012d60 <xPhyReset+0x5e>
            break;
 8012dce:	bf00      	nop
 8012dd0:	e000      	b.n	8012dd4 <xPhyReset+0xd2>
            break;
 8012dd2:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012dd8:	e01e      	b.n	8012e18 <xPhyReset+0x116>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8012dda:	2201      	movs	r2, #1
 8012ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dde:	409a      	lsls	r2, r3
 8012de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012de2:	4013      	ands	r3, r2
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d114      	bne.n	8012e12 <xPhyReset+0x110>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dec:	4413      	add	r3, r2
 8012dee:	3318      	adds	r3, #24
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f107 0218 	add.w	r2, r7, #24
 8012dfc:	2100      	movs	r1, #0
 8012dfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e00:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	69ba      	ldr	r2, [r7, #24]
 8012e08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012e0c:	2100      	movs	r1, #0
 8012e0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e10:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e14:	3301      	adds	r3, #1
 8012e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	dbdb      	blt.n	8012dda <xPhyReset+0xd8>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8012e22:	2032      	movs	r0, #50	@ 0x32
 8012e24:	f003 faaa 	bl	801637c <vTaskDelay>

    return ulDoneMask;
 8012e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3730      	adds	r7, #48	@ 0x30
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b088      	sub	sp, #32
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
 8012e3a:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	dc02      	bgt.n	8012e4a <xPhyConfigure+0x18>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
        return -1;
 8012e44:	f04f 33ff 	mov.w	r3, #4294967295
 8012e48:	e0e7      	b.n	801301a <xPhyConfigure+0x1e8>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	2b03      	cmp	r3, #3
 8012e50:	d107      	bne.n	8012e62 <xPhyConfigure+0x30>
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	789b      	ldrb	r3, [r3, #2]
 8012e56:	2b03      	cmp	r3, #3
 8012e58:	d103      	bne.n	8012e62 <xPhyConfigure+0x30>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8012e5a:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8012e5e:	61fb      	str	r3, [r7, #28]
 8012e60:	e044      	b.n	8012eec <xPhyConfigure+0xba>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8012e62:	2301      	movs	r3, #1
 8012e64:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	2b03      	cmp	r3, #3
 8012e6c:	d10d      	bne.n	8012e8a <xPhyConfigure+0x58>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	789b      	ldrb	r3, [r3, #2]
 8012e72:	2b02      	cmp	r3, #2
 8012e74:	d104      	bne.n	8012e80 <xPhyConfigure+0x4e>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8012e76:	69fb      	ldr	r3, [r7, #28]
 8012e78:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8012e7c:	61fb      	str	r3, [r7, #28]
 8012e7e:	e035      	b.n	8012eec <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8012e86:	61fb      	str	r3, [r7, #28]
 8012e88:	e030      	b.n	8012eec <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	789b      	ldrb	r3, [r3, #2]
 8012e8e:	2b03      	cmp	r3, #3
 8012e90:	d10d      	bne.n	8012eae <xPhyConfigure+0x7c>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	2b01      	cmp	r3, #1
 8012e98:	d104      	bne.n	8012ea4 <xPhyConfigure+0x72>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8012ea0:	61fb      	str	r3, [r7, #28]
 8012ea2:	e023      	b.n	8012eec <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8012eaa:	61fb      	str	r3, [r7, #28]
 8012eac:	e01e      	b.n	8012eec <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2b02      	cmp	r3, #2
 8012eb4:	d10d      	bne.n	8012ed2 <xPhyConfigure+0xa0>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	789b      	ldrb	r3, [r3, #2]
 8012eba:	2b02      	cmp	r3, #2
 8012ebc:	d104      	bne.n	8012ec8 <xPhyConfigure+0x96>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012ec4:	61fb      	str	r3, [r7, #28]
 8012ec6:	e011      	b.n	8012eec <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8012ec8:	69fb      	ldr	r3, [r7, #28]
 8012eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ece:	61fb      	str	r3, [r7, #28]
 8012ed0:	e00c      	b.n	8012eec <xPhyConfigure+0xba>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	789b      	ldrb	r3, [r3, #2]
 8012ed6:	2b02      	cmp	r3, #2
 8012ed8:	d104      	bne.n	8012ee4 <xPhyConfigure+0xb2>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ee0:	61fb      	str	r3, [r7, #28]
 8012ee2:	e003      	b.n	8012eec <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8012ee4:	69fb      	ldr	r3, [r7, #28]
 8012ee6:	f043 0320 	orr.w	r3, r3, #32
 8012eea:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8012ef6:	3b01      	subs	r3, #1
 8012ef8:	4619      	mov	r1, r3
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f7ff ff01 	bl	8012d02 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012f00:	2300      	movs	r3, #0
 8012f02:	61bb      	str	r3, [r7, #24]
 8012f04:	e07a      	b.n	8012ffc <xPhyConfigure+0x1ca>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	69bb      	ldr	r3, [r7, #24]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	3318      	adds	r3, #24
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	69ba      	ldr	r2, [r7, #24]
 8012f16:	3202      	adds	r2, #2
 8012f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f1c:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	685b      	ldr	r3, [r3, #4]
 8012f22:	69fa      	ldr	r2, [r7, #28]
 8012f24:	2104      	movs	r1, #4
 8012f26:	6978      	ldr	r0, [r7, #20]
 8012f28:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f107 020c 	add.w	r2, r7, #12
 8012f32:	2100      	movs	r1, #0
 8012f34:	6978      	ldr	r0, [r7, #20]
 8012f36:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8012f3e:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8012f46:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	2b02      	cmp	r3, #2
 8012f4e:	d003      	beq.n	8012f58 <xPhyConfigure+0x126>
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b03      	cmp	r3, #3
 8012f56:	d104      	bne.n	8012f62 <xPhyConfigure+0x130>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012f5e:	60fb      	str	r3, [r7, #12]
 8012f60:	e007      	b.n	8012f72 <xPhyConfigure+0x140>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	781b      	ldrb	r3, [r3, #0]
 8012f66:	2b01      	cmp	r3, #1
 8012f68:	d103      	bne.n	8012f72 <xPhyConfigure+0x140>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012f70:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	789b      	ldrb	r3, [r3, #2]
 8012f76:	2b02      	cmp	r3, #2
 8012f78:	d003      	beq.n	8012f82 <xPhyConfigure+0x150>
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	789b      	ldrb	r3, [r3, #2]
 8012f7e:	2b03      	cmp	r3, #3
 8012f80:	d104      	bne.n	8012f8c <xPhyConfigure+0x15a>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012f88:	60fb      	str	r3, [r7, #12]
 8012f8a:	e007      	b.n	8012f9c <xPhyConfigure+0x16a>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	789b      	ldrb	r3, [r3, #2]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d103      	bne.n	8012f9c <xPhyConfigure+0x16a>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012f9a:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8012f9c:	6938      	ldr	r0, [r7, #16]
 8012f9e:	f7ff fe25 	bl	8012bec <xHas_19_PHYCR>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d026      	beq.n	8012ff6 <xPhyConfigure+0x1c4>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f107 0208 	add.w	r2, r7, #8
 8012fb0:	2119      	movs	r1, #25
 8012fb2:	6978      	ldr	r0, [r7, #20]
 8012fb4:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8012fbc:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	785b      	ldrb	r3, [r3, #1]
 8012fc2:	2b03      	cmp	r3, #3
 8012fc4:	d104      	bne.n	8012fd0 <xPhyConfigure+0x19e>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012fcc:	60bb      	str	r3, [r7, #8]
 8012fce:	e00c      	b.n	8012fea <xPhyConfigure+0x1b8>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	785b      	ldrb	r3, [r3, #1]
 8012fd4:	2b02      	cmp	r3, #2
 8012fd6:	d104      	bne.n	8012fe2 <xPhyConfigure+0x1b0>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012fde:	60bb      	str	r3, [r7, #8]
 8012fe0:	e003      	b.n	8012fea <xPhyConfigure+0x1b8>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012fe8:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	68ba      	ldr	r2, [r7, #8]
 8012ff0:	2119      	movs	r1, #25
 8012ff2:	6978      	ldr	r0, [r7, #20]
 8012ff4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8012ff6:	69bb      	ldr	r3, [r7, #24]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	61bb      	str	r3, [r7, #24]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013000:	69ba      	ldr	r2, [r7, #24]
 8013002:	429a      	cmp	r2, r3
 8013004:	f6ff af7f 	blt.w	8012f06 <xPhyConfigure+0xd4>

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	69fa      	ldr	r2, [r7, #28]
 8013016:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8013018:	2300      	movs	r3, #0
}
 801301a:	4618      	mov	r0, r3
 801301c:	3720      	adds	r7, #32
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
	...

08013024 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b092      	sub	sp, #72	@ 0x48
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d101      	bne.n	8013038 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8013034:	2300      	movs	r3, #0
 8013036:	e169      	b.n	801330c <xPhyStartAutoNegotiation+0x2e8>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8013038:	2300      	movs	r3, #0
 801303a:	647b      	str	r3, [r7, #68]	@ 0x44
 801303c:	e020      	b.n	8013080 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 801303e:	683a      	ldr	r2, [r7, #0]
 8013040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013042:	fa22 f303 	lsr.w	r3, r2, r3
 8013046:	f003 0301 	and.w	r3, r3, #1
 801304a:	2b00      	cmp	r3, #0
 801304c:	d015      	beq.n	801307a <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013052:	4413      	add	r3, r2
 8013054:	3318      	adds	r3, #24
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8013062:	2104      	movs	r1, #4
 8013064:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013066:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	687a      	ldr	r2, [r7, #4]
 801306e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013074:	2100      	movs	r1, #0
 8013076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013078:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 801307a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801307c:	3301      	adds	r3, #1
 801307e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013084:	461a      	mov	r2, r3
 8013086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013088:	4293      	cmp	r3, r2
 801308a:	d3d8      	bcc.n	801303e <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 801308c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013090:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8013092:	f107 0318 	add.w	r3, r7, #24
 8013096:	4618      	mov	r0, r3
 8013098:	f003 fd64 	bl	8016b64 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 801309c:	2300      	movs	r3, #0
 801309e:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 80130a0:	2301      	movs	r3, #1
 80130a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80130a4:	2300      	movs	r3, #0
 80130a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80130a8:	e025      	b.n	80130f6 <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 80130aa:	683a      	ldr	r2, [r7, #0]
 80130ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ae:	4013      	ands	r3, r2
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d01a      	beq.n	80130ea <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 80130b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80130b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130b8:	4013      	ands	r3, r2
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d115      	bne.n	80130ea <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130c2:	4413      	add	r3, r2
 80130c4:	3318      	adds	r3, #24
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80130d2:	2101      	movs	r1, #1
 80130d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80130d6:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 80130d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130da:	f003 0320 	and.w	r3, r3, #32
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d003      	beq.n	80130ea <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 80130e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80130e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130e6:	4313      	orrs	r3, r2
 80130e8:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80130ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130ec:	3301      	adds	r3, #1
 80130ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80130f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130f2:	005b      	lsls	r3, r3, #1
 80130f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130fa:	461a      	mov	r2, r3
 80130fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130fe:	4293      	cmp	r3, r2
 8013100:	d3d3      	bcc.n	80130aa <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8013102:	683a      	ldr	r2, [r7, #0]
 8013104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013106:	429a      	cmp	r2, r3
 8013108:	d00e      	beq.n	8013128 <xPhyStartAutoNegotiation+0x104>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 801310a:	f107 0220 	add.w	r2, r7, #32
 801310e:	f107 0318 	add.w	r3, r7, #24
 8013112:	4611      	mov	r1, r2
 8013114:	4618      	mov	r0, r3
 8013116:	f003 fd65 	bl	8016be4 <xTaskCheckForTimeOut>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d105      	bne.n	801312c <xPhyStartAutoNegotiation+0x108>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
            break;
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8013120:	2032      	movs	r0, #50	@ 0x32
 8013122:	f003 f92b 	bl	801637c <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8013126:	e7bb      	b.n	80130a0 <xPhyStartAutoNegotiation+0x7c>
            break;
 8013128:	bf00      	nop
 801312a:	e000      	b.n	801312e <xPhyStartAutoNegotiation+0x10a>
            break;
 801312c:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 801312e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013130:	2b00      	cmp	r3, #0
 8013132:	f000 80ea 	beq.w	801330a <xPhyStartAutoNegotiation+0x2e6>
    {
        ulBitMask = ( uint32_t ) 1U;
 8013136:	2301      	movs	r3, #1
 8013138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801313e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013140:	43db      	mvns	r3, r3
 8013142:	401a      	ands	r2, r3
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013148:	2300      	movs	r3, #0
 801314a:	647b      	str	r3, [r7, #68]	@ 0x44
 801314c:	e0d6      	b.n	80132fc <xPhyStartAutoNegotiation+0x2d8>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013152:	4413      	add	r3, r2
 8013154:	3318      	adds	r3, #24
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801315e:	3202      	adds	r2, #2
 8013160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013164:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8013166:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801316a:	4013      	ands	r3, r2
 801316c:	2b00      	cmp	r3, #0
 801316e:	f000 80be 	beq.w	80132ee <xPhyStartAutoNegotiation+0x2ca>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	687a      	ldr	r2, [r7, #4]
 8013178:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801317a:	2100      	movs	r1, #0
 801317c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801317e:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013188:	2101      	movs	r1, #1
 801318a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801318c:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 801318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013190:	f003 0304 	and.w	r3, r3, #4
 8013194:	2b00      	cmp	r3, #0
 8013196:	d005      	beq.n	80131a4 <xPhyStartAutoNegotiation+0x180>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801319c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801319e:	431a      	orrs	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 80131a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131a6:	4a5b      	ldr	r2, [pc, #364]	@ (8013314 <xPhyStartAutoNegotiation+0x2f0>)
 80131a8:	4293      	cmp	r3, r2
 80131aa:	d12f      	bne.n	801320c <xPhyStartAutoNegotiation+0x1e8>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f107 0214 	add.w	r2, r7, #20
 80131b4:	211e      	movs	r1, #30
 80131b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80131b8:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	f003 0307 	and.w	r3, r3, #7
 80131c0:	3b01      	subs	r3, #1
 80131c2:	2b05      	cmp	r3, #5
 80131c4:	d813      	bhi.n	80131ee <xPhyStartAutoNegotiation+0x1ca>
 80131c6:	a201      	add	r2, pc, #4	@ (adr r2, 80131cc <xPhyStartAutoNegotiation+0x1a8>)
 80131c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131cc:	080131e5 	.word	0x080131e5
 80131d0:	080131ef 	.word	0x080131ef
 80131d4:	080131ef 	.word	0x080131ef
 80131d8:	080131ef 	.word	0x080131ef
 80131dc:	080131e5 	.word	0x080131e5
 80131e0:	080131ef 	.word	0x080131ef
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80131e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131e6:	f043 0302 	orr.w	r3, r3, #2
 80131ea:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80131ec:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	f003 0307 	and.w	r3, r3, #7
 80131f4:	2b02      	cmp	r3, #2
 80131f6:	d801      	bhi.n	80131fc <xPhyStartAutoNegotiation+0x1d8>
 80131f8:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 80131fa:	e05b      	b.n	80132b4 <xPhyStartAutoNegotiation+0x290>
 80131fc:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d858      	bhi.n	80132b4 <xPhyStartAutoNegotiation+0x290>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8013202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013204:	f043 0304 	orr.w	r3, r3, #4
 8013208:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 801320a:	e053      	b.n	80132b4 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 801320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801320e:	4a42      	ldr	r2, [pc, #264]	@ (8013318 <xPhyStartAutoNegotiation+0x2f4>)
 8013210:	4293      	cmp	r3, r2
 8013212:	d126      	bne.n	8013262 <xPhyStartAutoNegotiation+0x23e>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8013214:	2300      	movs	r3, #0
 8013216:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8013218:	2300      	movs	r3, #0
 801321a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f107 0210 	add.w	r2, r7, #16
 8013224:	211f      	movs	r1, #31
 8013226:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013228:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	0a1b      	lsrs	r3, r3, #8
 801322e:	f003 0307 	and.w	r3, r3, #7
 8013232:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8013234:	2300      	movs	r3, #0
 8013236:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8013238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801323a:	2b02      	cmp	r3, #2
 801323c:	d002      	beq.n	8013244 <xPhyStartAutoNegotiation+0x220>
 801323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013240:	2b05      	cmp	r3, #5
 8013242:	d103      	bne.n	801324c <xPhyStartAutoNegotiation+0x228>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8013244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013246:	f043 0302 	orr.w	r3, r3, #2
 801324a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 801324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324e:	2b05      	cmp	r3, #5
 8013250:	d002      	beq.n	8013258 <xPhyStartAutoNegotiation+0x234>
 8013252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013254:	2b06      	cmp	r3, #6
 8013256:	d12d      	bne.n	80132b4 <xPhyStartAutoNegotiation+0x290>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8013258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801325a:	f043 0304 	orr.w	r3, r3, #4
 801325e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013260:	e028      	b.n	80132b4 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8013262:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013264:	f7ff fc90 	bl	8012b88 <xHas_1F_PHYSPCS>
 8013268:	4603      	mov	r3, r0
 801326a:	2b00      	cmp	r3, #0
 801326c:	d01b      	beq.n	80132a6 <xPhyStartAutoNegotiation+0x282>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f107 020c 	add.w	r2, r7, #12
 8013276:	211f      	movs	r1, #31
 8013278:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801327a:	4798      	blx	r3
                ulRegValue = 0;
 801327c:	2300      	movs	r3, #0
 801327e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	f003 0310 	and.w	r3, r3, #16
 8013286:	2b00      	cmp	r3, #0
 8013288:	d003      	beq.n	8013292 <xPhyStartAutoNegotiation+0x26e>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801328c:	f043 0304 	orr.w	r3, r3, #4
 8013290:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f003 030c 	and.w	r3, r3, #12
 8013298:	2b04      	cmp	r3, #4
 801329a:	d10b      	bne.n	80132b4 <xPhyStartAutoNegotiation+0x290>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 801329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801329e:	f043 0302 	orr.w	r3, r3, #2
 80132a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80132a4:	e006      	b.n	80132b4 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80132ae:	2110      	movs	r1, #16
 80132b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80132b2:	4798      	blx	r3
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 80132b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132b6:	f003 0304 	and.w	r3, r3, #4
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d004      	beq.n	80132c8 <xPhyStartAutoNegotiation+0x2a4>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2202      	movs	r2, #2
 80132c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80132c6:	e003      	b.n	80132d0 <xPhyStartAutoNegotiation+0x2ac>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2201      	movs	r2, #1
 80132cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 80132d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132d2:	f003 0302 	and.w	r3, r3, #2
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d004      	beq.n	80132e4 <xPhyStartAutoNegotiation+0x2c0>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2201      	movs	r2, #1
 80132de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80132e2:	e005      	b.n	80132f0 <xPhyStartAutoNegotiation+0x2cc>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2202      	movs	r2, #2
 80132e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80132ec:	e000      	b.n	80132f0 <xPhyStartAutoNegotiation+0x2cc>
                continue;
 80132ee:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80132f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132f2:	3301      	adds	r3, #1
 80132f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80132f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132f8:	005b      	lsls	r3, r3, #1
 80132fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013300:	461a      	mov	r2, r3
 8013302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013304:	4293      	cmp	r3, r2
 8013306:	f4ff af22 	bcc.w	801314e <xPhyStartAutoNegotiation+0x12a>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 801330a:	2300      	movs	r3, #0
}
 801330c:	4618      	mov	r0, r3
 801330e:	3748      	adds	r7, #72	@ 0x48
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	00221560 	.word	0x00221560
 8013318:	00221550 	.word	0x00221550

0801331c <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b088      	sub	sp, #32
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 8013326:	2301      	movs	r3, #1
 8013328:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 801332a:	2300      	movs	r3, #0
 801332c:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	dd25      	ble.n	8013380 <xPhyCheckLinkStatus+0x64>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	331c      	adds	r3, #28
 8013338:	4618      	mov	r0, r3
 801333a:	f003 fc13 	bl	8016b64 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8013344:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013346:	2300      	movs	r3, #0
 8013348:	61bb      	str	r3, [r7, #24]
 801334a:	e013      	b.n	8013374 <xPhyCheckLinkStatus+0x58>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013350:	69fb      	ldr	r3, [r7, #28]
 8013352:	4013      	ands	r3, r2
 8013354:	2b00      	cmp	r3, #0
 8013356:	d107      	bne.n	8013368 <xPhyCheckLinkStatus+0x4c>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801335c:	69fb      	ldr	r3, [r7, #28]
 801335e:	431a      	orrs	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
                xNeedCheck = pdTRUE;
 8013364:	2301      	movs	r3, #1
 8013366:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013368:	69bb      	ldr	r3, [r7, #24]
 801336a:	3301      	adds	r3, #1
 801336c:	61bb      	str	r3, [r7, #24]
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	005b      	lsls	r3, r3, #1
 8013372:	61fb      	str	r3, [r7, #28]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013378:	69ba      	ldr	r2, [r7, #24]
 801337a:	429a      	cmp	r2, r3
 801337c:	dbe6      	blt.n	801334c <xPhyCheckLinkStatus+0x30>
 801337e:	e068      	b.n	8013452 <xPhyCheckLinkStatus+0x136>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f103 021c 	add.w	r2, r3, #28
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	3324      	adds	r3, #36	@ 0x24
 801338a:	4619      	mov	r1, r3
 801338c:	4610      	mov	r0, r2
 801338e:	f003 fc29 	bl	8016be4 <xTaskCheckForTimeOut>
 8013392:	4603      	mov	r3, r0
 8013394:	2b00      	cmp	r3, #0
 8013396:	d05c      	beq.n	8013452 <xPhyCheckLinkStatus+0x136>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013398:	2300      	movs	r3, #0
 801339a:	61bb      	str	r3, [r7, #24]
 801339c:	e03f      	b.n	801341e <xPhyCheckLinkStatus+0x102>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	69bb      	ldr	r3, [r7, #24]
 80133a2:	4413      	add	r3, r2
 80133a4:	3318      	adds	r3, #24
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f107 020c 	add.w	r2, r7, #12
 80133b2:	2101      	movs	r1, #1
 80133b4:	6938      	ldr	r0, [r7, #16]
 80133b6:	4798      	blx	r3
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d129      	bne.n	8013412 <xPhyCheckLinkStatus+0xf6>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	4013      	ands	r3, r2
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	bf14      	ite	ne
 80133ca:	2301      	movne	r3, #1
 80133cc:	2300      	moveq	r3, #0
 80133ce:	b2da      	uxtb	r2, r3
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	f003 0304 	and.w	r3, r3, #4
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	bf14      	ite	ne
 80133da:	2301      	movne	r3, #1
 80133dc:	2300      	moveq	r3, #0
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	4053      	eors	r3, r2
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d014      	beq.n	8013412 <xPhyCheckLinkStatus+0xf6>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	f003 0304 	and.w	r3, r3, #4
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d006      	beq.n	8013400 <xPhyCheckLinkStatus+0xe4>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133f6:	69fb      	ldr	r3, [r7, #28]
 80133f8:	431a      	orrs	r2, r3
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80133fe:	e006      	b.n	801340e <xPhyCheckLinkStatus+0xf2>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	43db      	mvns	r3, r3
 8013408:	401a      	ands	r2, r3
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
                    xNeedCheck = pdTRUE;
 801340e:	2301      	movs	r3, #1
 8013410:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	3301      	adds	r3, #1
 8013416:	61bb      	str	r3, [r7, #24]
 8013418:	69fb      	ldr	r3, [r7, #28]
 801341a:	005b      	lsls	r3, r3, #1
 801341c:	61fb      	str	r3, [r7, #28]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013422:	69ba      	ldr	r2, [r7, #24]
 8013424:	429a      	cmp	r2, r3
 8013426:	dbba      	blt.n	801339e <xPhyCheckLinkStatus+0x82>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	331c      	adds	r3, #28
 801342c:	4618      	mov	r0, r3
 801342e:	f003 fb99 	bl	8016b64 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013436:	69fb      	ldr	r3, [r7, #28]
 8013438:	085b      	lsrs	r3, r3, #1
 801343a:	4013      	ands	r3, r2
 801343c:	2b00      	cmp	r3, #0
 801343e:	d004      	beq.n	801344a <xPhyCheckLinkStatus+0x12e>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8013446:	625a      	str	r2, [r3, #36]	@ 0x24
 8013448:	e003      	b.n	8013452 <xPhyCheckLinkStatus+0x136>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013450:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8013452:	697b      	ldr	r3, [r7, #20]
}
 8013454:	4618      	mov	r0, r3
 8013456:	3720      	adds	r7, #32
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <__NVIC_GetEnableIRQ>:
{
 801345c:	b480      	push	{r7}
 801345e:	b083      	sub	sp, #12
 8013460:	af00      	add	r7, sp, #0
 8013462:	4603      	mov	r3, r0
 8013464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801346a:	2b00      	cmp	r3, #0
 801346c:	db0d      	blt.n	801348a <__NVIC_GetEnableIRQ+0x2e>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 801346e:	4a0a      	ldr	r2, [pc, #40]	@ (8013498 <__NVIC_GetEnableIRQ+0x3c>)
 8013470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013474:	095b      	lsrs	r3, r3, #5
 8013476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801347a:	79fb      	ldrb	r3, [r7, #7]
 801347c:	f003 031f 	and.w	r3, r3, #31
 8013480:	fa22 f303 	lsr.w	r3, r2, r3
 8013484:	f003 0301 	and.w	r3, r3, #1
 8013488:	e000      	b.n	801348c <__NVIC_GetEnableIRQ+0x30>
    return(0U);
 801348a:	2300      	movs	r3, #0
}
 801348c:	4618      	mov	r0, r3
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr
 8013498:	e000e100 	.word	0xe000e100

0801349c <__NVIC_SetPriority>:
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	4603      	mov	r3, r0
 80134a4:	6039      	str	r1, [r7, #0]
 80134a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80134a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	db0a      	blt.n	80134c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	b2da      	uxtb	r2, r3
 80134b4:	490c      	ldr	r1, [pc, #48]	@ (80134e8 <__NVIC_SetPriority+0x4c>)
 80134b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80134ba:	0112      	lsls	r2, r2, #4
 80134bc:	b2d2      	uxtb	r2, r2
 80134be:	440b      	add	r3, r1
 80134c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80134c4:	e00a      	b.n	80134dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	b2da      	uxtb	r2, r3
 80134ca:	4908      	ldr	r1, [pc, #32]	@ (80134ec <__NVIC_SetPriority+0x50>)
 80134cc:	79fb      	ldrb	r3, [r7, #7]
 80134ce:	f003 030f 	and.w	r3, r3, #15
 80134d2:	3b04      	subs	r3, #4
 80134d4:	0112      	lsls	r2, r2, #4
 80134d6:	b2d2      	uxtb	r2, r2
 80134d8:	440b      	add	r3, r1
 80134da:	761a      	strb	r2, [r3, #24]
}
 80134dc:	bf00      	nop
 80134de:	370c      	adds	r7, #12
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr
 80134e8:	e000e100 	.word	0xe000e100
 80134ec:	e000ed00 	.word	0xe000ed00

080134f0 <__NVIC_GetPriority>:
{
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	4603      	mov	r3, r0
 80134f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80134fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	db09      	blt.n	8013516 <__NVIC_GetPriority+0x26>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
 8013502:	4a0d      	ldr	r2, [pc, #52]	@ (8013538 <__NVIC_GetPriority+0x48>)
 8013504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013508:	4413      	add	r3, r2
 801350a:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
 801350e:	b2db      	uxtb	r3, r3
 8013510:	091b      	lsrs	r3, r3, #4
 8013512:	b2db      	uxtb	r3, r3
 8013514:	e009      	b.n	801352a <__NVIC_GetPriority+0x3a>
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8013516:	4a09      	ldr	r2, [pc, #36]	@ (801353c <__NVIC_GetPriority+0x4c>)
 8013518:	79fb      	ldrb	r3, [r7, #7]
 801351a:	f003 030f 	and.w	r3, r3, #15
 801351e:	3b04      	subs	r3, #4
 8013520:	4413      	add	r3, r2
 8013522:	7e1b      	ldrb	r3, [r3, #24]
 8013524:	b2db      	uxtb	r3, r3
 8013526:	091b      	lsrs	r3, r3, #4
 8013528:	b2db      	uxtb	r3, r3
}
 801352a:	4618      	mov	r0, r3
 801352c:	370c      	adds	r7, #12
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop
 8013538:	e000e100 	.word	0xe000e100
 801353c:	e000ed00 	.word	0xe000ed00

08013540 <prvPhyReadReg>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyReadReg( BaseType_t xAddress,
                                 BaseType_t xRegister,
                                 uint32_t * pulValue )
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b086      	sub	sp, #24
 8013544:	af00      	add	r7, sp, #0
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	60b9      	str	r1, [r7, #8]
 801354a:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = 0;
 801354c:	2300      	movs	r3, #0
 801354e:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &xEthHandle, ( uint32_t ) xAddress, ( uint32_t ) xRegister, pulValue ) != HAL_OK )
 8013550:	68f9      	ldr	r1, [r7, #12]
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	4807      	ldr	r0, [pc, #28]	@ (8013574 <prvPhyReadReg+0x34>)
 8013558:	f7ef fcf0 	bl	8002f3c <HAL_ETH_ReadPHYRegister>
 801355c:	4603      	mov	r3, r0
 801355e:	2b00      	cmp	r3, #0
 8013560:	d002      	beq.n	8013568 <prvPhyReadReg+0x28>
    {
        xResult = -1;
 8013562:	f04f 33ff 	mov.w	r3, #4294967295
 8013566:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8013568:	697b      	ldr	r3, [r7, #20]
}
 801356a:	4618      	mov	r0, r3
 801356c:	3718      	adds	r7, #24
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
 8013572:	bf00      	nop
 8013574:	20003420 	.word	0x20003420

08013578 <prvPhyWriteReg>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyWriteReg( BaseType_t xAddress,
                                  BaseType_t xRegister,
                                  uint32_t ulValue )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b086      	sub	sp, #24
 801357c:	af00      	add	r7, sp, #0
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = 0;
 8013584:	2300      	movs	r3, #0
 8013586:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &xEthHandle, ( uint32_t ) xAddress, ( uint32_t ) xRegister, ulValue ) != HAL_OK )
 8013588:	68f9      	ldr	r1, [r7, #12]
 801358a:	68ba      	ldr	r2, [r7, #8]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	4807      	ldr	r0, [pc, #28]	@ (80135ac <prvPhyWriteReg+0x34>)
 8013590:	f7ef fd1f 	bl	8002fd2 <HAL_ETH_WritePHYRegister>
 8013594:	4603      	mov	r3, r0
 8013596:	2b00      	cmp	r3, #0
 8013598:	d002      	beq.n	80135a0 <prvPhyWriteReg+0x28>
    {
        xResult = -1;
 801359a:	f04f 33ff 	mov.w	r3, #4294967295
 801359e:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 80135a0:	697b      	ldr	r3, [r7, #20]
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3718      	adds	r7, #24
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}
 80135aa:	bf00      	nop
 80135ac:	20003420 	.word	0x20003420

080135b0 <prvGetPhyLinkStatus>:
/*                      Network Interface Access Hooks                       */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvGetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
    ( void ) pxInterface;

    BaseType_t xReturn = pdFALSE;
 80135b8:	2300      	movs	r3, #0
 80135ba:	60fb      	str	r3, [r7, #12]

    /* const EMACData_t xEMACData = *( ( EMACData_t * ) pxInterface->pvArgument ); */

    if( xPhyObject.ulLinkStatusMask != 0U )
 80135bc:	4b06      	ldr	r3, [pc, #24]	@ (80135d8 <prvGetPhyLinkStatus+0x28>)
 80135be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d001      	beq.n	80135c8 <prvGetPhyLinkStatus+0x18>
    {
        xReturn = pdTRUE;
 80135c4:	2301      	movs	r3, #1
 80135c6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80135c8:	68fb      	ldr	r3, [r7, #12]
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3714      	adds	r7, #20
 80135ce:	46bd      	mov	sp, r7
 80135d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d4:	4770      	bx	lr
 80135d6:	bf00      	nop
 80135d8:	200034d0 	.word	0x200034d0

080135dc <prvNetworkInterfaceInitialise>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
    BaseType_t xInitResult = pdFAIL;
 80135e4:	2300      	movs	r3, #0
 80135e6:	617b      	str	r3, [r7, #20]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80135e8:	4b39      	ldr	r3, [pc, #228]	@ (80136d0 <prvNetworkInterfaceInitialise+0xf4>)
 80135ea:	613b      	str	r3, [r7, #16]
    EthernetPhy_t * pxPhyObject = &xPhyObject;
 80135ec:	4b39      	ldr	r3, [pc, #228]	@ (80136d4 <prvNetworkInterfaceInitialise+0xf8>)
 80135ee:	60fb      	str	r3, [r7, #12]

    switch( xMacInitStatus )
 80135f0:	4b39      	ldr	r3, [pc, #228]	@ (80136d8 <prvNetworkInterfaceInitialise+0xfc>)
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2b05      	cmp	r3, #5
 80135f6:	d80f      	bhi.n	8013618 <prvNetworkInterfaceInitialise+0x3c>
 80135f8:	a201      	add	r2, pc, #4	@ (adr r2, 8013600 <prvNetworkInterfaceInitialise+0x24>)
 80135fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135fe:	bf00      	nop
 8013600:	08013635 	.word	0x08013635
 8013604:	08013649 	.word	0x08013649
 8013608:	0801365b 	.word	0x0801365b
 801360c:	08013671 	.word	0x08013671
 8013610:	08013683 	.word	0x08013683
 8013614:	0801369f 	.word	0x0801369f
	__asm volatile
 8013618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801361c:	b672      	cpsid	i
 801361e:	f383 8811 	msr	BASEPRI, r3
 8013622:	f3bf 8f6f 	isb	sy
 8013626:	f3bf 8f4f 	dsb	sy
 801362a:	b662      	cpsie	i
 801362c:	60bb      	str	r3, [r7, #8]
}
 801362e:	bf00      	nop
    {
        default:
            configASSERT( pdFALSE );
 8013630:	bf00      	nop
 8013632:	e7fd      	b.n	8013630 <prvNetworkInterfaceInitialise+0x54>
            break;

        case eMacEthInit:

            if( prvEthConfigInit( pxEthHandle, pxInterface ) == pdFALSE )
 8013634:	6879      	ldr	r1, [r7, #4]
 8013636:	6938      	ldr	r0, [r7, #16]
 8013638:	f000 fb02 	bl	8013c40 <prvEthConfigInit>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d036      	beq.n	80136b0 <prvNetworkInterfaceInitialise+0xd4>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacEthInit failed\n" ) );
                break;
            }

            xMacInitStatus = eMacPhyInit;
 8013642:	4b25      	ldr	r3, [pc, #148]	@ (80136d8 <prvNetworkInterfaceInitialise+0xfc>)
 8013644:	2201      	movs	r2, #1
 8013646:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacPhyInit:

            if( prvPhyInit( pxPhyObject ) == pdFALSE )
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f000 fc49 	bl	8013ee0 <prvPhyInit>
 801364e:	4603      	mov	r3, r0
 8013650:	2b00      	cmp	r3, #0
 8013652:	d02f      	beq.n	80136b4 <prvNetworkInterfaceInitialise+0xd8>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacPhyInit failed\n" ) );
                break;
            }

            xMacInitStatus = eMacPhyStart;
 8013654:	4b20      	ldr	r3, [pc, #128]	@ (80136d8 <prvNetworkInterfaceInitialise+0xfc>)
 8013656:	2202      	movs	r2, #2
 8013658:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacPhyStart:

            if( prvPhyStart( pxEthHandle, pxInterface, pxPhyObject ) == pdFALSE )
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	6879      	ldr	r1, [r7, #4]
 801365e:	6938      	ldr	r0, [r7, #16]
 8013660:	f000 fc5a 	bl	8013f18 <prvPhyStart>
 8013664:	4603      	mov	r3, r0
 8013666:	2b00      	cmp	r3, #0
 8013668:	d026      	beq.n	80136b8 <prvNetworkInterfaceInitialise+0xdc>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacPhyStart failed\n" ) );
                break;
            }

            xMacInitStatus = eMacTaskStart;
 801366a:	4b1b      	ldr	r3, [pc, #108]	@ (80136d8 <prvNetworkInterfaceInitialise+0xfc>)
 801366c:	2203      	movs	r2, #3
 801366e:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacTaskStart:

            if( prvEMACTaskStart( pxInterface ) == pdFALSE )
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f000 fa5b 	bl	8013b2c <prvEMACTaskStart>
 8013676:	4603      	mov	r3, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	d01f      	beq.n	80136bc <prvNetworkInterfaceInitialise+0xe0>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacTaskStart failed\n" ) );
                break;
            }

            xMacInitStatus = eMacEthStart;
 801367c:	4b16      	ldr	r3, [pc, #88]	@ (80136d8 <prvNetworkInterfaceInitialise+0xfc>)
 801367e:	2204      	movs	r2, #4
 8013680:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacEthStart:

            if( pxEthHandle->gState != HAL_ETH_STATE_STARTED )
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013688:	2b40      	cmp	r3, #64	@ 0x40
 801368a:	d005      	beq.n	8013698 <prvNetworkInterfaceInitialise+0xbc>
            {
                if( HAL_ETH_Start_IT( pxEthHandle ) != HAL_OK )
 801368c:	6938      	ldr	r0, [r7, #16]
 801368e:	f7ef f889 	bl	80027a4 <HAL_ETH_Start_IT>
 8013692:	4603      	mov	r3, r0
 8013694:	2b00      	cmp	r3, #0
 8013696:	d113      	bne.n	80136c0 <prvNetworkInterfaceInitialise+0xe4>
                    FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacEthStart failed\n" ) );
                    break;
                }
            }

            xMacInitStatus = eMacInitComplete;
 8013698:	4b0f      	ldr	r3, [pc, #60]	@ (80136d8 <prvNetworkInterfaceInitialise+0xfc>)
 801369a:	2205      	movs	r2, #5
 801369c:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacInitComplete:

            if( prvGetPhyLinkStatus( pxInterface ) != pdTRUE )
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f7ff ff86 	bl	80135b0 <prvGetPhyLinkStatus>
 80136a4:	4603      	mov	r3, r0
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d10c      	bne.n	80136c4 <prvNetworkInterfaceInitialise+0xe8>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacInitComplete failed\n" ) );
                break;
            }

            xInitResult = pdPASS;
 80136aa:	2301      	movs	r3, #1
 80136ac:	617b      	str	r3, [r7, #20]
 80136ae:	e00a      	b.n	80136c6 <prvNetworkInterfaceInitialise+0xea>
                break;
 80136b0:	bf00      	nop
 80136b2:	e008      	b.n	80136c6 <prvNetworkInterfaceInitialise+0xea>
                break;
 80136b4:	bf00      	nop
 80136b6:	e006      	b.n	80136c6 <prvNetworkInterfaceInitialise+0xea>
                break;
 80136b8:	bf00      	nop
 80136ba:	e004      	b.n	80136c6 <prvNetworkInterfaceInitialise+0xea>
                break;
 80136bc:	bf00      	nop
 80136be:	e002      	b.n	80136c6 <prvNetworkInterfaceInitialise+0xea>
                    break;
 80136c0:	bf00      	nop
 80136c2:	e000      	b.n	80136c6 <prvNetworkInterfaceInitialise+0xea>
                break;
 80136c4:	bf00      	nop
    }

    return xInitResult;
 80136c6:	697b      	ldr	r3, [r7, #20]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3718      	adds	r7, #24
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	20003420 	.word	0x20003420
 80136d4:	200034d0 	.word	0x200034d0
 80136d8:	20003520 	.word	0x20003520

080136dc <prvNetworkInterfaceOutput>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                             NetworkBufferDescriptor_t * const pxDescriptor,
                                             BaseType_t xReleaseAfterSend )
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b09e      	sub	sp, #120	@ 0x78
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	60f8      	str	r0, [r7, #12]
 80136e4:	60b9      	str	r1, [r7, #8]
 80136e6:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80136e8:	2300      	movs	r3, #0
 80136ea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* Zero-Copy Only */
    configASSERT( xReleaseAfterSend == pdTRUE );
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2b01      	cmp	r3, #1
 80136f0:	d00d      	beq.n	801370e <prvNetworkInterfaceOutput+0x32>
	__asm volatile
 80136f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136f6:	b672      	cpsid	i
 80136f8:	f383 8811 	msr	BASEPRI, r3
 80136fc:	f3bf 8f6f 	isb	sy
 8013700:	f3bf 8f4f 	dsb	sy
 8013704:	b662      	cpsie	i
 8013706:	663b      	str	r3, [r7, #96]	@ 0x60
}
 8013708:	bf00      	nop
 801370a:	bf00      	nop
 801370c:	e7fd      	b.n	801370a <prvNetworkInterfaceOutput+0x2e>

    do
    {
        ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 801370e:	4b66      	ldr	r3, [pc, #408]	@ (80138a8 <prvNetworkInterfaceOutput+0x1cc>)
 8013710:	673b      	str	r3, [r7, #112]	@ 0x70

        if( ( pxDescriptor == NULL ) || ( pxDescriptor->pucEthernetBuffer == NULL ) || ( pxDescriptor->xDataLength > niEMAC_DATA_BUFFER_SIZE ) )
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	2b00      	cmp	r3, #0
 8013716:	f000 80b5 	beq.w	8013884 <prvNetworkInterfaceOutput+0x1a8>
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801371e:	2b00      	cmp	r3, #0
 8013720:	f000 80b0 	beq.w	8013884 <prvNetworkInterfaceOutput+0x1a8>
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013728:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801372c:	f200 80aa 	bhi.w	8013884 <prvNetworkInterfaceOutput+0x1a8>
            /* TODO: if xDataLength is greater than niEMAC_DATA_BUFFER_SIZE, you can link buffers */
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Invalid Descriptor\n" ) );
            break;
        }

        if( prvGetPhyLinkStatus( pxInterface ) == pdFALSE )
 8013730:	68f8      	ldr	r0, [r7, #12]
 8013732:	f7ff ff3d 	bl	80135b0 <prvGetPhyLinkStatus>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	f000 80a5 	beq.w	8013888 <prvNetworkInterfaceOutput+0x1ac>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Link Down\n" ) );
            break;
        }

        if( ( xMacInitStatus != eMacInitComplete ) || ( pxEthHandle->gState != HAL_ETH_STATE_STARTED ) )
 801373e:	4b5b      	ldr	r3, [pc, #364]	@ (80138ac <prvNetworkInterfaceOutput+0x1d0>)
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	2b05      	cmp	r3, #5
 8013744:	f040 80a2 	bne.w	801388c <prvNetworkInterfaceOutput+0x1b0>
 8013748:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801374a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801374e:	2b40      	cmp	r3, #64	@ 0x40
 8013750:	f040 809c 	bne.w	801388c <prvNetworkInterfaceOutput+0x1b0>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Interface Not Started\n" ) );
            break;
        }

        ETH_TxPacketConfigTypeDef xTxConfig =
 8013754:	f107 0314 	add.w	r3, r7, #20
 8013758:	2238      	movs	r2, #56	@ 0x38
 801375a:	2100      	movs	r1, #0
 801375c:	4618      	mov	r0, r3
 801375e:	f005 fa01 	bl	8018b64 <memset>
 8013762:	2320      	movs	r3, #32
 8013764:	617b      	str	r3, [r7, #20]
            .CRCPadCtrl = ETH_CRC_PAD_INSERT,
            .Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD,
        };

        #if ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM )
            xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8013766:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 801376a:	62bb      	str	r3, [r7, #40]	@ 0x28
            xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	f043 0301 	orr.w	r3, r3, #1
 8013772:	617b      	str	r3, [r7, #20]
        #else
            xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
        #endif

        const EthernetHeader_t * const pxEthHeader = ( const EthernetHeader_t * const ) pxDescriptor->pucEthernetBuffer;
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013778:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if( pxEthHeader->usFrameType == ipIPv4_FRAME_TYPE )
 801377a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801377c:	899b      	ldrh	r3, [r3, #12]
 801377e:	b29b      	uxth	r3, r3
 8013780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013784:	d110      	bne.n	80137a8 <prvNetworkInterfaceOutput+0xcc>
        {
            #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                const IPPacket_t * const pxIPPacket = ( const IPPacket_t * const ) pxDescriptor->pucEthernetBuffer;
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801378a:	66bb      	str	r3, [r7, #104]	@ 0x68

                if( pxIPPacket->xIPHeader.ucProtocol == ipPROTOCOL_ICMP )
 801378c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801378e:	7ddb      	ldrb	r3, [r3, #23]
 8013790:	2b01      	cmp	r3, #1
 8013792:	d109      	bne.n	80137a8 <prvNetworkInterfaceOutput+0xcc>
                {
                    #if ipconfigIS_ENABLED( ipconfigREPLY_TO_INCOMING_PINGS ) || ipconfigIS_ENABLED( ipconfigSUPPORT_OUTGOING_PINGS )
                        ICMPPacket_t * const pxICMPPacket = ( ICMPPacket_t * const ) pxDescriptor->pucEthernetBuffer;
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013798:	667b      	str	r3, [r7, #100]	@ 0x64
                        #if ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM )
                            pxICMPPacket->xICMPHeader.usChecksum = 0U;
 801379a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801379c:	2200      	movs	r2, #0
 801379e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80137a2:	2200      	movs	r2, #0
 80137a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv4 ) */
        }

        ETH_BufferTypeDef xTxBuffer =
        {
            .buffer = pxDescriptor->pucEthernetBuffer,
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        ETH_BufferTypeDef xTxBuffer =
 80137ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
            .len    = pxDescriptor->xDataLength,
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTxBuffer =
 80137b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80137b4:	2300      	movs	r3, #0
 80137b6:	657b      	str	r3, [r7, #84]	@ 0x54
            .next   = NULL
        };

        xTxConfig.pData = pxDescriptor;
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	64bb      	str	r3, [r7, #72]	@ 0x48
        xTxConfig.TxBuffer = &xTxBuffer;
 80137bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80137c0:	61fb      	str	r3, [r7, #28]
        xTxConfig.Length = xTxBuffer.len;
 80137c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80137c4:	61bb      	str	r3, [r7, #24]
        /* if( xQueueSendToBack( xTxQueue, pxDescriptor, 0 ) != pdPASS )
         * {
         *  xReleaseAfterSend = pdFALSE;
         * } */

        if( xSemaphoreTake( xTxDescSem, pdMS_TO_TICKS( niEMAC_DESCRIPTOR_WAIT_TIME_MS ) ) == pdFALSE )
 80137c6:	4b3a      	ldr	r3, [pc, #232]	@ (80138b0 <prvNetworkInterfaceOutput+0x1d4>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	2114      	movs	r1, #20
 80137cc:	4618      	mov	r0, r3
 80137ce:	f002 f8d9 	bl	8015984 <xQueueSemaphoreTake>
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d05b      	beq.n	8013890 <prvNetworkInterfaceOutput+0x1b4>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: No Descriptors Available\n" ) );
            break;
        }

        if( xSemaphoreTake( xTxMutex, pdMS_TO_TICKS( niEMAC_TX_MAX_BLOCK_TIME_MS ) ) == pdFALSE )
 80137d8:	4b36      	ldr	r3, [pc, #216]	@ (80138b4 <prvNetworkInterfaceOutput+0x1d8>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	2114      	movs	r1, #20
 80137de:	4618      	mov	r0, r3
 80137e0:	f002 f8d0 	bl	8015984 <xQueueSemaphoreTake>
 80137e4:	4603      	mov	r3, r0
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d107      	bne.n	80137fa <prvNetworkInterfaceOutput+0x11e>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Process Busy\n" ) );
            ( void ) xSemaphoreGive( xTxDescSem );
 80137ea:	4b31      	ldr	r3, [pc, #196]	@ (80138b0 <prvNetworkInterfaceOutput+0x1d4>)
 80137ec:	6818      	ldr	r0, [r3, #0]
 80137ee:	2300      	movs	r3, #0
 80137f0:	2200      	movs	r2, #0
 80137f2:	2100      	movs	r1, #0
 80137f4:	f001 fe30 	bl	8015458 <xQueueGenericSend>
            break;
 80137f8:	e04b      	b.n	8013892 <prvNetworkInterfaceOutput+0x1b6>
                const size_t uxLength = xTxBuffer.len + uxDataOffset;
                SCB_CleanDCache_by_Addr( ( uint32_t * ) uxLineStart, uxLength );
            }
        #endif

        if( HAL_ETH_Transmit_IT( pxEthHandle, &xTxConfig ) == HAL_OK )
 80137fa:	f107 0314 	add.w	r3, r7, #20
 80137fe:	4619      	mov	r1, r3
 8013800:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8013802:	f7ef f8bf 	bl	8002984 <HAL_ETH_Transmit_IT>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d104      	bne.n	8013816 <prvNetworkInterfaceOutput+0x13a>
        {
            /* Released later in deferred task by calling HAL_ETH_ReleaseTxPacket */
            xReleaseAfterSend = pdFALSE;
 801380c:	2300      	movs	r3, #0
 801380e:	607b      	str	r3, [r7, #4]
            xResult = pdPASS;
 8013810:	2301      	movs	r3, #1
 8013812:	677b      	str	r3, [r7, #116]	@ 0x74
 8013814:	e02e      	b.n	8013874 <prvNetworkInterfaceOutput+0x198>
        }
        else
        {
            ( void ) xSemaphoreGive( xTxDescSem );
 8013816:	4b26      	ldr	r3, [pc, #152]	@ (80138b0 <prvNetworkInterfaceOutput+0x1d4>)
 8013818:	6818      	ldr	r0, [r3, #0]
 801381a:	2300      	movs	r3, #0
 801381c:	2200      	movs	r2, #0
 801381e:	2100      	movs	r1, #0
 8013820:	f001 fe1a 	bl	8015458 <xQueueGenericSend>
            configASSERT( pxEthHandle->gState == HAL_ETH_STATE_STARTED );
 8013824:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801382a:	2b40      	cmp	r3, #64	@ 0x40
 801382c:	d00d      	beq.n	801384a <prvNetworkInterfaceOutput+0x16e>
	__asm volatile
 801382e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013832:	b672      	cpsid	i
 8013834:	f383 8811 	msr	BASEPRI, r3
 8013838:	f3bf 8f6f 	isb	sy
 801383c:	f3bf 8f4f 	dsb	sy
 8013840:	b662      	cpsie	i
 8013842:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
 8013844:	bf00      	nop
 8013846:	bf00      	nop
 8013848:	e7fd      	b.n	8013846 <prvNetworkInterfaceOutput+0x16a>
            /* Should be impossible if semaphores are correctly implemented */
            configASSERT( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_BUSY ) == 0 );
 801384a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013850:	f003 0302 	and.w	r3, r3, #2
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00d      	beq.n	8013874 <prvNetworkInterfaceOutput+0x198>
	__asm volatile
 8013858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801385c:	b672      	cpsid	i
 801385e:	f383 8811 	msr	BASEPRI, r3
 8013862:	f3bf 8f6f 	isb	sy
 8013866:	f3bf 8f4f 	dsb	sy
 801386a:	b662      	cpsie	i
 801386c:	65bb      	str	r3, [r7, #88]	@ 0x58
}
 801386e:	bf00      	nop
 8013870:	bf00      	nop
 8013872:	e7fd      	b.n	8013870 <prvNetworkInterfaceOutput+0x194>
        }

        ( void ) xSemaphoreGive( xTxMutex );
 8013874:	4b0f      	ldr	r3, [pc, #60]	@ (80138b4 <prvNetworkInterfaceOutput+0x1d8>)
 8013876:	6818      	ldr	r0, [r3, #0]
 8013878:	2300      	movs	r3, #0
 801387a:	2200      	movs	r2, #0
 801387c:	2100      	movs	r1, #0
 801387e:	f001 fdeb 	bl	8015458 <xQueueGenericSend>
 8013882:	e006      	b.n	8013892 <prvNetworkInterfaceOutput+0x1b6>
            break;
 8013884:	bf00      	nop
 8013886:	e004      	b.n	8013892 <prvNetworkInterfaceOutput+0x1b6>
            break;
 8013888:	bf00      	nop
 801388a:	e002      	b.n	8013892 <prvNetworkInterfaceOutput+0x1b6>
            break;
 801388c:	bf00      	nop
 801388e:	e000      	b.n	8013892 <prvNetworkInterfaceOutput+0x1b6>
            break;
 8013890:	bf00      	nop
    } while( pdFALSE );

    if( xReleaseAfterSend == pdTRUE )
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2b01      	cmp	r3, #1
 8013896:	d102      	bne.n	801389e <prvNetworkInterfaceOutput+0x1c2>
    {
        prvReleaseNetworkBufferDescriptor( pxDescriptor );
 8013898:	68b8      	ldr	r0, [r7, #8]
 801389a:	f000 fe22 	bl	80144e2 <prvReleaseNetworkBufferDescriptor>
    }

    return xResult;
 801389e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3778      	adds	r7, #120	@ 0x78
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}
 80138a8:	20003420 	.word	0x20003420
 80138ac:	20003520 	.word	0x20003520
 80138b0:	20003518 	.word	0x20003518
 80138b4:	20003514 	.word	0x20003514

080138b8 <prvAddAllowedMACAddress>:

/*---------------------------------------------------------------------------*/

static void prvAddAllowedMACAddress( NetworkInterface_t * pxInterface,
                                     const uint8_t * pucMacAddress )
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b086      	sub	sp, #24
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80138c2:	4b12      	ldr	r3, [pc, #72]	@ (801390c <prvAddAllowedMACAddress+0x54>)
 80138c4:	617b      	str	r3, [r7, #20]

    /* TODO: group address filtering with Mask Byte Control */
    BaseType_t xResult = prvAddDestMACAddrMatch( pxEthHandle->Instance, pucMacAddress );
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	6839      	ldr	r1, [r7, #0]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f000 fc23 	bl	8014118 <prvAddDestMACAddrMatch>
 80138d2:	6138      	str	r0, [r7, #16]

    if( xResult == pdFALSE )
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d114      	bne.n	8013904 <prvAddAllowedMACAddress+0x4c>
    {
        const uint8_t ucHashIndex = prvGetMacHashIndex( pucMacAddress );
 80138da:	6838      	ldr	r0, [r7, #0]
 80138dc:	f000 fb8c 	bl	8013ff8 <prvGetMacHashIndex>
 80138e0:	4603      	mov	r3, r0
 80138e2:	73fb      	strb	r3, [r7, #15]

        xResult = prvSetNewDestMACAddrMatch( pxEthHandle->Instance, ucHashIndex, pucMacAddress );
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	7bf9      	ldrb	r1, [r7, #15]
 80138ea:	683a      	ldr	r2, [r7, #0]
 80138ec:	4618      	mov	r0, r3
 80138ee:	f000 fce1 	bl	80142b4 <prvSetNewDestMACAddrMatch>
 80138f2:	6138      	str	r0, [r7, #16]

        if( xResult == pdFALSE )
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d104      	bne.n	8013904 <prvAddAllowedMACAddress+0x4c>
        {
            prvAddDestMACAddrHash( pxEthHandle, ucHashIndex );
 80138fa:	7bfb      	ldrb	r3, [r7, #15]
 80138fc:	4619      	mov	r1, r3
 80138fe:	6978      	ldr	r0, [r7, #20]
 8013900:	f000 fd08 	bl	8014314 <prvAddDestMACAddrHash>
        }
    }
}
 8013904:	bf00      	nop
 8013906:	3718      	adds	r7, #24
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	20003420 	.word	0x20003420

08013910 <prvRemoveAllowedMACAddress>:

/*---------------------------------------------------------------------------*/

static void prvRemoveAllowedMACAddress( NetworkInterface_t * pxInterface,
                                        const uint8_t * pucMacAddress )
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 801391a:	4b0a      	ldr	r3, [pc, #40]	@ (8013944 <prvRemoveAllowedMACAddress+0x34>)
 801391c:	60fb      	str	r3, [r7, #12]

    const BaseType_t xResult = prvRemoveDestMACAddrMatch( pxEthHandle->Instance, pucMacAddress );
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	6839      	ldr	r1, [r7, #0]
 8013924:	4618      	mov	r0, r3
 8013926:	f000 fc5f 	bl	80141e8 <prvRemoveDestMACAddrMatch>
 801392a:	60b8      	str	r0, [r7, #8]

    if( xResult == pdFALSE )
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d103      	bne.n	801393a <prvRemoveAllowedMACAddress+0x2a>
    {
        prvRemoveDestMACAddrHash( pxEthHandle, pucMacAddress );
 8013932:	6839      	ldr	r1, [r7, #0]
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f000 fd2b 	bl	8014390 <prvRemoveDestMACAddrHash>
    }
}
 801393a:	bf00      	nop
 801393c:	3710      	adds	r7, #16
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	20003420 	.word	0x20003420

08013948 <prvNetworkInterfaceInput>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( ETH_HandleTypeDef * pxEthHandle,
                                            NetworkInterface_t * pxInterface )
{
 8013948:	b590      	push	{r4, r7, lr}
 801394a:	b087      	sub	sp, #28
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8013952:	2300      	movs	r3, #0
 8013954:	617b      	str	r3, [r7, #20]
    UBaseType_t uxCount = 0;
 8013956:	2300      	movs	r3, #0
 8013958:	613b      	str	r3, [r7, #16]

    #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
        NetworkBufferDescriptor_t * pxStartDescriptor = NULL;
        NetworkBufferDescriptor_t * pxEndDescriptor = NULL;
    #endif
    NetworkBufferDescriptor_t * pxCurDescriptor = NULL;
 801395a:	2300      	movs	r3, #0
 801395c:	60bb      	str	r3, [r7, #8]

    if( ( xMacInitStatus == eMacInitComplete ) && ( pxEthHandle->gState == HAL_ETH_STATE_STARTED ) )
 801395e:	4b25      	ldr	r3, [pc, #148]	@ (80139f4 <prvNetworkInterfaceInput+0xac>)
 8013960:	781b      	ldrb	r3, [r3, #0]
 8013962:	2b05      	cmp	r3, #5
 8013964:	d13b      	bne.n	80139de <prvNetworkInterfaceInput+0x96>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801396c:	2b40      	cmp	r3, #64	@ 0x40
 801396e:	d136      	bne.n	80139de <prvNetworkInterfaceInput+0x96>
    {
        while( HAL_ETH_ReadData( pxEthHandle, ( void ** ) &pxCurDescriptor ) == HAL_OK )
 8013970:	e02c      	b.n	80139cc <prvNetworkInterfaceInput+0x84>
        {
            ++uxCount;
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	3301      	adds	r3, #1
 8013976:	613b      	str	r3, [r7, #16]

            if( pxCurDescriptor == NULL )
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d025      	beq.n	80139ca <prvNetworkInterfaceInput+0x82>
            {
                /* Buffer was dropped, ignore packet */
                continue;
            }

            configASSERT( pxCurDescriptor->xDataLength <= niEMAC_DATA_BUFFER_SIZE );
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013982:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013986:	d90d      	bls.n	80139a4 <prvNetworkInterfaceInput+0x5c>
	__asm volatile
 8013988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801398c:	b672      	cpsid	i
 801398e:	f383 8811 	msr	BASEPRI, r3
 8013992:	f3bf 8f6f 	isb	sy
 8013996:	f3bf 8f4f 	dsb	sy
 801399a:	b662      	cpsie	i
 801399c:	60fb      	str	r3, [r7, #12]
}
 801399e:	bf00      	nop
 80139a0:	bf00      	nop
 80139a2:	e7fd      	b.n	80139a0 <prvNetworkInterfaceInput+0x58>

            pxCurDescriptor->pxInterface = pxInterface;
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	683a      	ldr	r2, [r7, #0]
 80139a8:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxCurDescriptor->pxEndPoint = FreeRTOS_MatchingEndpoint( pxCurDescriptor->pxInterface, pxCurDescriptor->pucEthernetBuffer );
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139b2:	68bc      	ldr	r4, [r7, #8]
 80139b4:	4619      	mov	r1, r3
 80139b6:	4610      	mov	r0, r2
 80139b8:	f7f8 fd12 	bl	800c3e0 <FreeRTOS_MatchingEndpoint>
 80139bc:	4603      	mov	r3, r0
 80139be:	6323      	str	r3, [r4, #48]	@ 0x30
                    pxEndDescriptor->pxNextBuffer = pxCurDescriptor;
                }

                pxEndDescriptor = pxCurDescriptor;
            #else /* if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES ) */
                prvSendRxEvent( pxCurDescriptor );
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	4618      	mov	r0, r3
 80139c4:	f000 fda3 	bl	801450e <prvSendRxEvent>
 80139c8:	e000      	b.n	80139cc <prvNetworkInterfaceInput+0x84>
                continue;
 80139ca:	bf00      	nop
        while( HAL_ETH_ReadData( pxEthHandle, ( void ** ) &pxCurDescriptor ) == HAL_OK )
 80139cc:	f107 0308 	add.w	r3, r7, #8
 80139d0:	4619      	mov	r1, r3
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7ef f832 	bl	8002a3c <HAL_ETH_ReadData>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d0c9      	beq.n	8013972 <prvNetworkInterfaceInput+0x2a>
            #endif /* if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES ) */
        }
    }

    if( uxCount > 0 )
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d001      	beq.n	80139e8 <prvNetworkInterfaceInput+0xa0>
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            prvSendRxEvent( pxStartDescriptor );
        #endif
        xResult = pdTRUE;
 80139e4:	2301      	movs	r3, #1
 80139e6:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 80139e8:	697b      	ldr	r3, [r7, #20]
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	371c      	adds	r7, #28
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd90      	pop	{r4, r7, pc}
 80139f2:	bf00      	nop
 80139f4:	20003520 	.word	0x20003520

080139f8 <prvEMACHandlerTask>:

/*---------------------------------------------------------------------------*/

static portTASK_FUNCTION( prvEMACHandlerTask, pvParameters )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b088      	sub	sp, #32
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
    NetworkInterface_t * pxInterface = ( NetworkInterface_t * ) pvParameters;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	61bb      	str	r3, [r7, #24]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8013a04:	4b47      	ldr	r3, [pc, #284]	@ (8013b24 <prvEMACHandlerTask+0x12c>)
 8013a06:	617b      	str	r3, [r7, #20]
    EthernetPhy_t * pxPhyObject = &xPhyObject;
 8013a08:	4b47      	ldr	r3, [pc, #284]	@ (8013b28 <prvEMACHandlerTask+0x130>)
 8013a0a:	613b      	str	r3, [r7, #16]

    /* iptraceEMAC_TASK_STARTING(); */

    for( ; ; )
    {
        BaseType_t xResult = pdFALSE;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	61fb      	str	r3, [r7, #28]
        uint32_t ulISREvents = 0U;
 8013a10:	2300      	movs	r3, #0
 8013a12:	60bb      	str	r3, [r7, #8]

        if( xTaskNotifyWait( 0U, eMacEventAll, &ulISREvents, pdMS_TO_TICKS( niEMAC_TASK_MAX_BLOCK_TIME_MS ) ) == pdTRUE )
 8013a14:	f107 0208 	add.w	r2, r7, #8
 8013a18:	2364      	movs	r3, #100	@ 0x64
 8013a1a:	217f      	movs	r1, #127	@ 0x7f
 8013a1c:	2000      	movs	r0, #0
 8013a1e:	f003 fbf1 	bl	8017204 <xTaskNotifyWait>
 8013a22:	4603      	mov	r3, r0
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d14d      	bne.n	8013ac4 <prvEMACHandlerTask+0xcc>
        {
            if( ( ulISREvents & eMacEventRx ) != 0 )
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	f003 0301 	and.w	r3, r3, #1
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d004      	beq.n	8013a3c <prvEMACHandlerTask+0x44>
            {
                xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 8013a32:	69b9      	ldr	r1, [r7, #24]
 8013a34:	6978      	ldr	r0, [r7, #20]
 8013a36:	f7ff ff87 	bl	8013948 <prvNetworkInterfaceInput>
 8013a3a:	61f8      	str	r0, [r7, #28]
            }

            if( ( ulISREvents & eMacEventTx ) != 0 )
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	f003 0302 	and.w	r3, r3, #2
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d002      	beq.n	8013a4c <prvEMACHandlerTask+0x54>
            {
                prvReleaseTxPacket( pxEthHandle );
 8013a46:	6978      	ldr	r0, [r7, #20]
 8013a48:	f000 fcea 	bl	8014420 <prvReleaseTxPacket>
            }

            if( ( ulISREvents & eMacEventErrRx ) != 0 )
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	f003 0304 	and.w	r3, r3, #4
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d004      	beq.n	8013a60 <prvEMACHandlerTask+0x68>
            {
                xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 8013a56:	69b9      	ldr	r1, [r7, #24]
 8013a58:	6978      	ldr	r0, [r7, #20]
 8013a5a:	f7ff ff75 	bl	8013948 <prvNetworkInterfaceInput>
 8013a5e:	61f8      	str	r0, [r7, #28]
            }

            if( ( ulISREvents & eMacEventErrTx ) != 0 )
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	f003 0308 	and.w	r3, r3, #8
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d002      	beq.n	8013a70 <prvEMACHandlerTask+0x78>
            {
                prvReleaseTxPacket( pxEthHandle );
 8013a6a:	6978      	ldr	r0, [r7, #20]
 8013a6c:	f000 fcd8 	bl	8014420 <prvReleaseTxPacket>
            }

            if( ( ulISREvents & eMacEventErrEth ) != 0 )
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	f003 0320 	and.w	r3, r3, #32
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d024      	beq.n	8013ac4 <prvEMACHandlerTask+0xcc>
            {
                configASSERT( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_PARAM ) == 0 );
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013a80:	f003 0301 	and.w	r3, r3, #1
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00d      	beq.n	8013aa4 <prvEMACHandlerTask+0xac>
	__asm volatile
 8013a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a8c:	b672      	cpsid	i
 8013a8e:	f383 8811 	msr	BASEPRI, r3
 8013a92:	f3bf 8f6f 	isb	sy
 8013a96:	f3bf 8f4f 	dsb	sy
 8013a9a:	b662      	cpsie	i
 8013a9c:	60fb      	str	r3, [r7, #12]
}
 8013a9e:	bf00      	nop
 8013aa0:	bf00      	nop
 8013aa2:	e7fd      	b.n	8013aa0 <prvEMACHandlerTask+0xa8>

                if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013aaa:	2be0      	cmp	r3, #224	@ 0xe0
 8013aac:	d10a      	bne.n	8013ac4 <prvEMACHandlerTask+0xcc>
                {
                    /* Recover from critical error */
                    ( void ) HAL_ETH_Init( pxEthHandle );
 8013aae:	6978      	ldr	r0, [r7, #20]
 8013ab0:	f7ee fdde 	bl	8002670 <HAL_ETH_Init>
                    ( void ) HAL_ETH_Start_IT( pxEthHandle );
 8013ab4:	6978      	ldr	r0, [r7, #20]
 8013ab6:	f7ee fe75 	bl	80027a4 <HAL_ETH_Start_IT>
                    xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 8013aba:	69b9      	ldr	r1, [r7, #24]
 8013abc:	6978      	ldr	r0, [r7, #20]
 8013abe:	f7ff ff43 	bl	8013948 <prvNetworkInterfaceInput>
 8013ac2:	61f8      	str	r0, [r7, #28]

            /* if( ( ulISREvents & eMacEventErrMac ) != 0 ) */
            /* if( ( ulISREvents & eMacEventErrDma ) != 0 ) */
        }

        if( xPhyCheckLinkStatus( pxPhyObject, xResult ) != pdFALSE )
 8013ac4:	69f9      	ldr	r1, [r7, #28]
 8013ac6:	6938      	ldr	r0, [r7, #16]
 8013ac8:	f7ff fc28 	bl	801331c <xPhyCheckLinkStatus>
 8013acc:	4603      	mov	r3, r0
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d09c      	beq.n	8013a0c <prvEMACHandlerTask+0x14>
        {
            if( prvGetPhyLinkStatus( pxInterface ) != pdFALSE )
 8013ad2:	69b8      	ldr	r0, [r7, #24]
 8013ad4:	f7ff fd6c 	bl	80135b0 <prvGetPhyLinkStatus>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d017      	beq.n	8013b0e <prvEMACHandlerTask+0x116>
            {
                if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013ae4:	2be0      	cmp	r3, #224	@ 0xe0
 8013ae6:	d102      	bne.n	8013aee <prvEMACHandlerTask+0xf6>
                {
                    /* Recover from critical error */
                    ( void ) HAL_ETH_Init( pxEthHandle );
 8013ae8:	6978      	ldr	r0, [r7, #20]
 8013aea:	f7ee fdc1 	bl	8002670 <HAL_ETH_Init>
                }

                if( pxEthHandle->gState == HAL_ETH_STATE_READY )
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013af4:	2b10      	cmp	r3, #16
 8013af6:	d189      	bne.n	8013a0c <prvEMACHandlerTask+0x14>
                {
                    /* Link was down or critical error occurred */
                    if( prvMacUpdateConfig( pxEthHandle, pxPhyObject ) != pdFALSE )
 8013af8:	6939      	ldr	r1, [r7, #16]
 8013afa:	6978      	ldr	r0, [r7, #20]
 8013afc:	f000 fcae 	bl	801445c <prvMacUpdateConfig>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d082      	beq.n	8013a0c <prvEMACHandlerTask+0x14>
                    {
                        ( void ) HAL_ETH_Start_IT( pxEthHandle );
 8013b06:	6978      	ldr	r0, [r7, #20]
 8013b08:	f7ee fe4c 	bl	80027a4 <HAL_ETH_Start_IT>
 8013b0c:	e77e      	b.n	8013a0c <prvEMACHandlerTask+0x14>
                    }
                }
            }
            else
            {
                ( void ) HAL_ETH_Stop_IT( pxEthHandle );
 8013b0e:	6978      	ldr	r0, [r7, #20]
 8013b10:	f7ee feb8 	bl	8002884 <HAL_ETH_Stop_IT>
                prvReleaseTxPacket( pxEthHandle );
 8013b14:	6978      	ldr	r0, [r7, #20]
 8013b16:	f000 fc83 	bl	8014420 <prvReleaseTxPacket>
                #if ( ipconfigIS_ENABLED( ipconfigSUPPORT_NETWORK_DOWN_EVENT ) )
                    FreeRTOS_NetworkDown( pxInterface );
 8013b1a:	69b8      	ldr	r0, [r7, #24]
 8013b1c:	f7f6 fd24 	bl	800a568 <FreeRTOS_NetworkDown>
    {
 8013b20:	e774      	b.n	8013a0c <prvEMACHandlerTask+0x14>
 8013b22:	bf00      	nop
 8013b24:	20003420 	.word	0x20003420
 8013b28:	200034d0 	.word	0x200034d0

08013b2c <prvEMACTaskStart>:
}

/*---------------------------------------------------------------------------*/

static BaseType_t prvEMACTaskStart( NetworkInterface_t * pxInterface )
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b08a      	sub	sp, #40	@ 0x28
 8013b30:	af04      	add	r7, sp, #16
 8013b32:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8013b34:	2300      	movs	r3, #0
 8013b36:	617b      	str	r3, [r7, #20]

    if( xTxMutex == NULL )
 8013b38:	4b36      	ldr	r3, [pc, #216]	@ (8013c14 <prvEMACTaskStart+0xe8>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d11e      	bne.n	8013b7e <prvEMACTaskStart+0x52>
    {
        #if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION )
            static StaticSemaphore_t xTxMutexBuf;
            xTxMutex = xSemaphoreCreateMutexStatic( &xTxMutexBuf );
 8013b40:	4935      	ldr	r1, [pc, #212]	@ (8013c18 <prvEMACTaskStart+0xec>)
 8013b42:	2001      	movs	r0, #1
 8013b44:	f001 fc30 	bl	80153a8 <xQueueCreateMutexStatic>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	4a32      	ldr	r2, [pc, #200]	@ (8013c14 <prvEMACTaskStart+0xe8>)
 8013b4c:	6013      	str	r3, [r2, #0]
        #else
            xTxMutex = xSemaphoreCreateMutex();
        #endif
        configASSERT( xTxMutex != NULL );
 8013b4e:	4b31      	ldr	r3, [pc, #196]	@ (8013c14 <prvEMACTaskStart+0xe8>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d10d      	bne.n	8013b72 <prvEMACTaskStart+0x46>
	__asm volatile
 8013b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b5a:	b672      	cpsid	i
 8013b5c:	f383 8811 	msr	BASEPRI, r3
 8013b60:	f3bf 8f6f 	isb	sy
 8013b64:	f3bf 8f4f 	dsb	sy
 8013b68:	b662      	cpsie	i
 8013b6a:	613b      	str	r3, [r7, #16]
}
 8013b6c:	bf00      	nop
 8013b6e:	bf00      	nop
 8013b70:	e7fd      	b.n	8013b6e <prvEMACTaskStart+0x42>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            vQueueAddToRegistry( xTxMutex, niEMAC_TX_MUTEX_NAME );
 8013b72:	4b28      	ldr	r3, [pc, #160]	@ (8013c14 <prvEMACTaskStart+0xe8>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	4929      	ldr	r1, [pc, #164]	@ (8013c1c <prvEMACTaskStart+0xf0>)
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f002 f9b1 	bl	8015ee0 <vQueueAddToRegistry>
        #endif
    }

    if( xTxDescSem == NULL )
 8013b7e:	4b28      	ldr	r3, [pc, #160]	@ (8013c20 <prvEMACTaskStart+0xf4>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d11f      	bne.n	8013bc6 <prvEMACTaskStart+0x9a>
    {
        #if ( ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) )
            static StaticSemaphore_t xTxDescSemBuf;
            xTxDescSem = xSemaphoreCreateCountingStatic(
 8013b86:	4a27      	ldr	r2, [pc, #156]	@ (8013c24 <prvEMACTaskStart+0xf8>)
 8013b88:	2104      	movs	r1, #4
 8013b8a:	2004      	movs	r0, #4
 8013b8c:	f001 fc27 	bl	80153de <xQueueCreateCountingSemaphoreStatic>
 8013b90:	4603      	mov	r3, r0
 8013b92:	4a23      	ldr	r2, [pc, #140]	@ (8013c20 <prvEMACTaskStart+0xf4>)
 8013b94:	6013      	str	r3, [r2, #0]
            xTxDescSem = xSemaphoreCreateCounting(
                ( UBaseType_t ) ETH_TX_DESC_CNT,
                ( UBaseType_t ) ETH_TX_DESC_CNT
                );
        #endif /* if ( ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) ) */
        configASSERT( xTxDescSem != NULL );
 8013b96:	4b22      	ldr	r3, [pc, #136]	@ (8013c20 <prvEMACTaskStart+0xf4>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d10d      	bne.n	8013bba <prvEMACTaskStart+0x8e>
	__asm volatile
 8013b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ba2:	b672      	cpsid	i
 8013ba4:	f383 8811 	msr	BASEPRI, r3
 8013ba8:	f3bf 8f6f 	isb	sy
 8013bac:	f3bf 8f4f 	dsb	sy
 8013bb0:	b662      	cpsie	i
 8013bb2:	60fb      	str	r3, [r7, #12]
}
 8013bb4:	bf00      	nop
 8013bb6:	bf00      	nop
 8013bb8:	e7fd      	b.n	8013bb6 <prvEMACTaskStart+0x8a>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            vQueueAddToRegistry( xTxDescSem, niEMAC_TX_DESC_SEM_NAME );
 8013bba:	4b19      	ldr	r3, [pc, #100]	@ (8013c20 <prvEMACTaskStart+0xf4>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	491a      	ldr	r1, [pc, #104]	@ (8013c28 <prvEMACTaskStart+0xfc>)
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f002 f98d 	bl	8015ee0 <vQueueAddToRegistry>
        #endif
    }

    if( ( xEMACTaskHandle == NULL ) && ( xTxMutex != NULL ) && ( xTxDescSem != NULL ) )
 8013bc6:	4b19      	ldr	r3, [pc, #100]	@ (8013c2c <prvEMACTaskStart+0x100>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d117      	bne.n	8013bfe <prvEMACTaskStart+0xd2>
 8013bce:	4b11      	ldr	r3, [pc, #68]	@ (8013c14 <prvEMACTaskStart+0xe8>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d013      	beq.n	8013bfe <prvEMACTaskStart+0xd2>
 8013bd6:	4b12      	ldr	r3, [pc, #72]	@ (8013c20 <prvEMACTaskStart+0xf4>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d00f      	beq.n	8013bfe <prvEMACTaskStart+0xd2>
    {
        #if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION )
            static StackType_t uxEMACTaskStack[ niEMAC_TASK_STACK_SIZE ];
            static StaticTask_t xEMACTaskTCB;
            xEMACTaskHandle = xTaskCreateStatic(
 8013bde:	4b14      	ldr	r3, [pc, #80]	@ (8013c30 <prvEMACTaskStart+0x104>)
 8013be0:	9302      	str	r3, [sp, #8]
 8013be2:	4b14      	ldr	r3, [pc, #80]	@ (8013c34 <prvEMACTaskStart+0x108>)
 8013be4:	9301      	str	r3, [sp, #4]
 8013be6:	2337      	movs	r3, #55	@ 0x37
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013bf0:	4911      	ldr	r1, [pc, #68]	@ (8013c38 <prvEMACTaskStart+0x10c>)
 8013bf2:	4812      	ldr	r0, [pc, #72]	@ (8013c3c <prvEMACTaskStart+0x110>)
 8013bf4:	f002 f9fc 	bl	8015ff0 <xTaskCreateStatic>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8013c2c <prvEMACTaskStart+0x100>)
 8013bfc:	6013      	str	r3, [r2, #0]
                &xEMACTaskHandle
                );
        #endif /* if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) */
    }

    if( xEMACTaskHandle != NULL )
 8013bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8013c2c <prvEMACTaskStart+0x100>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d001      	beq.n	8013c0a <prvEMACTaskStart+0xde>
    {
        xResult = pdTRUE;
 8013c06:	2301      	movs	r3, #1
 8013c08:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8013c0a:	697b      	ldr	r3, [r7, #20]
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3718      	adds	r7, #24
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	20003514 	.word	0x20003514
 8013c18:	20003570 	.word	0x20003570
 8013c1c:	08019d7c 	.word	0x08019d7c
 8013c20:	20003518 	.word	0x20003518
 8013c24:	200035c0 	.word	0x200035c0
 8013c28:	08019d8c 	.word	0x08019d8c
 8013c2c:	20003510 	.word	0x20003510
 8013c30:	20004610 	.word	0x20004610
 8013c34:	20003610 	.word	0x20003610
 8013c38:	08019d9c 	.word	0x08019d9c
 8013c3c:	080139f9 	.word	0x080139f9

08013c40 <prvEthConfigInit>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvEthConfigInit( ETH_HandleTypeDef * pxEthHandle,
                                    NetworkInterface_t * pxInterface )
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b0ae      	sub	sp, #184	@ 0xb8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    pxEthHandle->Instance = ETH;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	4a7d      	ldr	r2, [pc, #500]	@ (8013e48 <prvEthConfigInit+0x208>)
 8013c54:	601a      	str	r2, [r3, #0]
    pxEthHandle->Init.MediaInterface = ipconfigIS_ENABLED( niEMAC_USE_RMII ) ? HAL_ETH_RMII_MODE : HAL_ETH_MII_MODE;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8013c5c:	609a      	str	r2, [r3, #8]
    pxEthHandle->Init.RxBuffLen = niEMAC_DATA_BUFFER_SIZE;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8013c64:	615a      	str	r2, [r3, #20]
    /* configASSERT( pxEthHandle->Init.RxBuffLen <= ETH_MAX_PACKET_SIZE ); */
    configASSERT( pxEthHandle->Init.RxBuffLen % 4U == 0 );
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	695b      	ldr	r3, [r3, #20]
 8013c6a:	f003 0303 	and.w	r3, r3, #3
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d00e      	beq.n	8013c90 <prvEthConfigInit+0x50>
	__asm volatile
 8013c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c76:	b672      	cpsid	i
 8013c78:	f383 8811 	msr	BASEPRI, r3
 8013c7c:	f3bf 8f6f 	isb	sy
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	b662      	cpsie	i
 8013c86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
}
 8013c8a:	bf00      	nop
 8013c8c:	bf00      	nop
 8013c8e:	e7fd      	b.n	8013c8c <prvEthConfigInit+0x4c>
    #if ( defined( niEMAC_STM32FX ) && defined( ETH_RX_BUF_SIZE ) )
        configASSERT( pxEthHandle->Init.RxBuffLen == ETH_RX_BUF_SIZE );
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	695b      	ldr	r3, [r3, #20]
 8013c94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013c98:	d00e      	beq.n	8013cb8 <prvEthConfigInit+0x78>
	__asm volatile
 8013c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c9e:	b672      	cpsid	i
 8013ca0:	f383 8811 	msr	BASEPRI, r3
 8013ca4:	f3bf 8f6f 	isb	sy
 8013ca8:	f3bf 8f4f 	dsb	sy
 8013cac:	b662      	cpsie	i
 8013cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
}
 8013cb2:	bf00      	nop
 8013cb4:	bf00      	nop
 8013cb6:	e7fd      	b.n	8013cb4 <prvEthConfigInit+0x74>
    #endif

    static ETH_DMADescTypeDef xDMADescTx[ ETH_TX_DESC_CNT ] __ALIGNED( portBYTE_ALIGNMENT ) __attribute__( ( section( niEMAC_TX_DESC_SECTION ) ) );
    static ETH_DMADescTypeDef xDMADescRx[ ETH_RX_DESC_CNT ] __ALIGNED( portBYTE_ALIGNMENT ) __attribute__( ( section( niEMAC_RX_DESC_SECTION ) ) );
    pxEthHandle->Init.TxDesc = xDMADescTx;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	4a64      	ldr	r2, [pc, #400]	@ (8013e4c <prvEthConfigInit+0x20c>)
 8013cbc:	60da      	str	r2, [r3, #12]
    pxEthHandle->Init.RxDesc = xDMADescRx;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	4a63      	ldr	r2, [pc, #396]	@ (8013e50 <prvEthConfigInit+0x210>)
 8013cc2:	611a      	str	r2, [r3, #16]
    ( void ) memset( &xDMADescTx, 0, sizeof( xDMADescTx ) );
 8013cc4:	22a0      	movs	r2, #160	@ 0xa0
 8013cc6:	2100      	movs	r1, #0
 8013cc8:	4860      	ldr	r0, [pc, #384]	@ (8013e4c <prvEthConfigInit+0x20c>)
 8013cca:	f004 ff4b 	bl	8018b64 <memset>
    ( void ) memset( &xDMADescRx, 0, sizeof( xDMADescRx ) );
 8013cce:	22a0      	movs	r2, #160	@ 0xa0
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	485f      	ldr	r0, [pc, #380]	@ (8013e50 <prvEthConfigInit+0x210>)
 8013cd4:	f004 ff46 	bl	8018b64 <memset>

    const NetworkEndPoint_t * const pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8013cd8:	6838      	ldr	r0, [r7, #0]
 8013cda:	f7f8 fb49 	bl	800c370 <FreeRTOS_FirstEndPoint>
 8013cde:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

    if( pxEndPoint != NULL )
 8013ce2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d03c      	beq.n	8013d64 <prvEthConfigInit+0x124>
    {
        pxEthHandle->Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8013cea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013cee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	605a      	str	r2, [r3, #4]

        if( HAL_ETH_Init( pxEthHandle ) == HAL_OK )
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f7ee fcba 	bl	8002670 <HAL_ETH_Init>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d130      	bne.n	8013d64 <prvEthConfigInit+0x124>
        {
            #if defined( niEMAC_STM32FX )
                /* This function doesn't get called in Fxx driver */
                HAL_ETH_SetMDIOClockRange( pxEthHandle );
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f7ef fbb8 	bl	8003478 <HAL_ETH_SetMDIOClockRange>
            #endif
            ETH_MACConfigTypeDef xMACConfig;
            ( void ) HAL_ETH_GetMACConfig( pxEthHandle, &xMACConfig );
 8013d08:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7ef f9a8 	bl	8003064 <HAL_ETH_GetMACConfig>
            xMACConfig.ChecksumOffload = ( FunctionalState ) ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM );
 8013d14:	2301      	movs	r3, #1
 8013d16:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            xMACConfig.CRCStripTypePacket = DISABLE;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
            xMACConfig.AutomaticPadCRCStrip = ENABLE;
 8013d20:	2301      	movs	r3, #1
 8013d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            xMACConfig.RetryTransmission = ENABLE;
 8013d26:	2301      	movs	r3, #1
 8013d28:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            ( void ) HAL_ETH_SetMACConfig( pxEthHandle, &xMACConfig );
 8013d2c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013d30:	4619      	mov	r1, r3
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f7ef fb6c 	bl	8003410 <HAL_ETH_SetMACConfig>

            ETH_DMAConfigTypeDef xDMAConfig;
            ( void ) HAL_ETH_GetDMAConfig( pxEthHandle, &xDMAConfig );
 8013d38:	f107 0308 	add.w	r3, r7, #8
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f7ef fa88 	bl	8003254 <HAL_ETH_GetDMAConfig>
            #if defined( niEMAC_STM32FX )
                xDMAConfig.EnhancedDescriptorFormat = ( FunctionalState ) ( ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM ) || ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM ) );
 8013d44:	2301      	movs	r3, #1
 8013d46:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                /* #if ipconfigIS_ENABLED( ipconfigUSE_TCP ) && ipconfigIS_ENABLED( niEMAC_TCP_SEGMENTATION )
                 *  xDMAConfig.TCPSegmentation = ENABLE;
                 *  xDMAConfig.MaximumSegmentSize = ipconfigTCP_MSS;
                 #endif */
            #endif
            ( void ) HAL_ETH_SetDMAConfig( pxEthHandle, &xDMAConfig );
 8013d4a:	f107 0308 	add.w	r3, r7, #8
 8013d4e:	4619      	mov	r1, r3
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7ef fb77 	bl	8003444 <HAL_ETH_SetDMAConfig>
                /* HAL_ETHEx_DisableARPOffload( pxEthHandle );
                 * HAL_ETHEx_SetARPAddressMatch( pxEthHandle, ulSourceIPAddress );
                 * HAL_ETHEx_EnableARPOffload( pxEthHandle ); */
            #endif

            prvInitMacAddresses( pxEthHandle, pxInterface );
 8013d56:	6839      	ldr	r1, [r7, #0]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f000 f881 	bl	8013e60 <prvInitMacAddresses>

            xResult = pdTRUE;
 8013d5e:	2301      	movs	r3, #1
 8013d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        }
    }

    if( xResult == pdTRUE )
 8013d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d167      	bne.n	8013e3c <prvEthConfigInit+0x1fc>
    {
        #ifdef niEMAC_CACHEABLE
            if( niEMAC_CACHE_ENABLED )
 8013d6c:	4b39      	ldr	r3, [pc, #228]	@ (8013e54 <prvEthConfigInit+0x214>)
 8013d6e:	695b      	ldr	r3, [r3, #20]
 8013d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d014      	beq.n	8013da2 <prvEthConfigInit+0x162>
            {
                #ifdef niEMAC_MPU
                    configASSERT( niEMAC_MPU_ENABLED != 0 );
 8013d78:	4b37      	ldr	r3, [pc, #220]	@ (8013e58 <prvEthConfigInit+0x218>)
 8013d7a:	685b      	ldr	r3, [r3, #4]
 8013d7c:	f003 0301 	and.w	r3, r3, #1
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d10e      	bne.n	8013da2 <prvEthConfigInit+0x162>
	__asm volatile
 8013d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d88:	b672      	cpsid	i
 8013d8a:	f383 8811 	msr	BASEPRI, r3
 8013d8e:	f3bf 8f6f 	isb	sy
 8013d92:	f3bf 8f4f 	dsb	sy
 8013d96:	b662      	cpsie	i
 8013d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
}
 8013d9c:	bf00      	nop
 8013d9e:	bf00      	nop
 8013da0:	e7fd      	b.n	8013d9e <prvEthConfigInit+0x15e>
                /* _FLD2VAL( SCB_CCSIDR_LINESIZE, SCB->CCSIDR ) */
            }
        #endif

        #ifdef configPRIO_BITS
            const uint32_t ulPrioBits = configPRIO_BITS;
 8013da2:	2304      	movs	r3, #4
 8013da4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        #else
            const uint32_t ulPrioBits = __NVIC_PRIO_BITS;
        #endif
        const uint32_t ulPriority = NVIC_GetPriority( ETH_IRQn ) << ( 8U - ulPrioBits );
 8013da8:	203d      	movs	r0, #61	@ 0x3d
 8013daa:	f7ff fba1 	bl	80134f0 <__NVIC_GetPriority>
 8013dae:	4602      	mov	r2, r0
 8013db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013db4:	f1c3 0308 	rsb	r3, r3, #8
 8013db8:	fa02 f303 	lsl.w	r3, r2, r3
 8013dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

        if( ulPriority < configMAX_SYSCALL_INTERRUPT_PRIORITY )
 8013dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013dc4:	2b4f      	cmp	r3, #79	@ 0x4f
 8013dc6:	d80a      	bhi.n	8013dde <prvEthConfigInit+0x19e>
        {
            FreeRTOS_debug_printf( ( "prvEthConfigInit: Incorrectly set ETH_IRQn priority\n" ) );
            NVIC_SetPriority( ETH_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY >> ( 8U - ulPrioBits ) );
 8013dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013dcc:	f1c3 0308 	rsb	r3, r3, #8
 8013dd0:	2250      	movs	r2, #80	@ 0x50
 8013dd2:	fa42 f303 	asr.w	r3, r2, r3
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	203d      	movs	r0, #61	@ 0x3d
 8013dda:	f7ff fb5f 	bl	801349c <__NVIC_SetPriority>
        }

        if( NVIC_GetEnableIRQ( ETH_IRQn ) == 0 )
 8013dde:	203d      	movs	r0, #61	@ 0x3d
 8013de0:	f7ff fb3c 	bl	801345c <__NVIC_GetEnableIRQ>
 8013de4:	4603      	mov	r3, r0
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d102      	bne.n	8013df0 <prvEthConfigInit+0x1b0>
        {
            FreeRTOS_debug_printf( ( "prvEthConfigInit: ETH_IRQn was not enabled by application\n" ) );
            HAL_NVIC_EnableIRQ( ETH_IRQn );
 8013dea:	203d      	movs	r0, #61	@ 0x3d
 8013dec:	f7ee fbba 	bl	8002564 <HAL_NVIC_EnableIRQ>
        }

        #ifdef niEMAC_STM32FX
            configASSERT( __HAL_RCC_ETH_IS_CLK_ENABLED() != 0 );
 8013df0:	4b1a      	ldr	r3, [pc, #104]	@ (8013e5c <prvEthConfigInit+0x21c>)
 8013df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d00d      	beq.n	8013e18 <prvEthConfigInit+0x1d8>
 8013dfc:	4b17      	ldr	r3, [pc, #92]	@ (8013e5c <prvEthConfigInit+0x21c>)
 8013dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d007      	beq.n	8013e18 <prvEthConfigInit+0x1d8>
 8013e08:	4b14      	ldr	r3, [pc, #80]	@ (8013e5c <prvEthConfigInit+0x21c>)
 8013e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d001      	beq.n	8013e18 <prvEthConfigInit+0x1d8>
 8013e14:	2301      	movs	r3, #1
 8013e16:	e000      	b.n	8013e1a <prvEthConfigInit+0x1da>
 8013e18:	2300      	movs	r3, #0
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d10e      	bne.n	8013e3c <prvEthConfigInit+0x1fc>
	__asm volatile
 8013e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e22:	b672      	cpsid	i
 8013e24:	f383 8811 	msr	BASEPRI, r3
 8013e28:	f3bf 8f6f 	isb	sy
 8013e2c:	f3bf 8f4f 	dsb	sy
 8013e30:	b662      	cpsie	i
 8013e32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
}
 8013e36:	bf00      	nop
 8013e38:	bf00      	nop
 8013e3a:	e7fd      	b.n	8013e38 <prvEthConfigInit+0x1f8>
            configASSERT( __HAL_RCC_ETH1TX_IS_CLK_ENABLED() != 0 );
            configASSERT( __HAL_RCC_ETH1RX_IS_CLK_ENABLED() != 0 );
        #endif
    }

    return xResult;
 8013e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	37b8      	adds	r7, #184	@ 0xb8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	40028000 	.word	0x40028000
 8013e4c:	200001c0 	.word	0x200001c0
 8013e50:	20000260 	.word	0x20000260
 8013e54:	e000ed00 	.word	0xe000ed00
 8013e58:	e000ed90 	.word	0xe000ed90
 8013e5c:	40023800 	.word	0x40023800

08013e60 <prvInitMacAddresses>:

/*---------------------------------------------------------------------------*/

static void prvInitMacAddresses( ETH_HandleTypeDef * pxEthHandle,
                                 NetworkInterface_t * pxInterface )
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b088      	sub	sp, #32
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
    ETH_MACFilterConfigTypeDef xFilterConfig;

    ( void ) HAL_ETH_GetMACFilterConfig( pxEthHandle, &xFilterConfig );
 8013e6a:	f107 030c 	add.w	r3, r7, #12
 8013e6e:	4619      	mov	r1, r3
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7ef fb99 	bl	80035a8 <HAL_ETH_GetMACFilterConfig>
    xFilterConfig.ReceiveAllMode = DISABLE;
 8013e76:	2300      	movs	r3, #0
 8013e78:	737b      	strb	r3, [r7, #13]
    xFilterConfig.HachOrPerfectFilter = ENABLE;
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	73bb      	strb	r3, [r7, #14]
    xFilterConfig.SrcAddrFiltering = DISABLE;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	74bb      	strb	r3, [r7, #18]
    xFilterConfig.SrcAddrInverseFiltering = DISABLE;
 8013e82:	2300      	movs	r3, #0
 8013e84:	74fb      	strb	r3, [r7, #19]
    xFilterConfig.ControlPacketsFilter = ETH_CTRLPACKETS_BLOCK_ALL;
 8013e86:	2340      	movs	r3, #64	@ 0x40
 8013e88:	61bb      	str	r3, [r7, #24]
    xFilterConfig.BroadcastFilter = ENABLE;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	757b      	strb	r3, [r7, #21]
    xFilterConfig.PassAllMulticast = DISABLE;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	747b      	strb	r3, [r7, #17]
    xFilterConfig.DestAddrInverseFiltering = DISABLE;
 8013e92:	2300      	movs	r3, #0
 8013e94:	753b      	strb	r3, [r7, #20]
    xFilterConfig.HashMulticast = ENABLE;
 8013e96:	2301      	movs	r3, #1
 8013e98:	743b      	strb	r3, [r7, #16]
    xFilterConfig.HashUnicast = ENABLE;
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	73fb      	strb	r3, [r7, #15]
    xFilterConfig.PromiscuousMode = DISABLE;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	733b      	strb	r3, [r7, #12]
    ( void ) HAL_ETH_SetMACFilterConfig( pxEthHandle, &xFilterConfig );
 8013ea2:	f107 030c 	add.w	r3, r7, #12
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7ef fb27 	bl	80034fc <HAL_ETH_SetMACFilterConfig>

    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface ); pxEndPoint != NULL; pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8013eae:	6838      	ldr	r0, [r7, #0]
 8013eb0:	f7f8 fa5e 	bl	800c370 <FreeRTOS_FirstEndPoint>
 8013eb4:	61f8      	str	r0, [r7, #28]
 8013eb6:	e00a      	b.n	8013ece <prvInitMacAddresses+0x6e>
    {
        prvAddAllowedMACAddress( pxInterface, pxEndPoint->xMACAddress.ucBytes );
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	3338      	adds	r3, #56	@ 0x38
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	6838      	ldr	r0, [r7, #0]
 8013ec0:	f7ff fcfa 	bl	80138b8 <prvAddAllowedMACAddress>
    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface ); pxEndPoint != NULL; pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8013ec4:	69f9      	ldr	r1, [r7, #28]
 8013ec6:	6838      	ldr	r0, [r7, #0]
 8013ec8:	f7f8 fa9a 	bl	800c400 <FreeRTOS_NextEndPoint>
 8013ecc:	61f8      	str	r0, [r7, #28]
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d1f1      	bne.n	8013eb8 <prvInitMacAddresses+0x58>
        #endif
        #if ipconfigIS_ENABLED( ipconfigUSE_LLMNR )
            prvAddAllowedMACAddress( pxInterface, xLLMNR_MacAddressIPv6.ucBytes );
        #endif
    #endif
}
 8013ed4:	bf00      	nop
 8013ed6:	bf00      	nop
 8013ed8:	3720      	adds	r7, #32
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
	...

08013ee0 <prvPhyInit>:
#endif /* ifdef niEMAC_STM32HX */

/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyInit( EthernetPhy_t * pxPhyObject )
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	60fb      	str	r3, [r7, #12]

    vPhyInitialise( pxPhyObject, ( xApplicationPhyReadHook_t ) prvPhyReadReg, ( xApplicationPhyWriteHook_t ) prvPhyWriteReg );
 8013eec:	4a08      	ldr	r2, [pc, #32]	@ (8013f10 <prvPhyInit+0x30>)
 8013eee:	4909      	ldr	r1, [pc, #36]	@ (8013f14 <prvPhyInit+0x34>)
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7fe fea3 	bl	8012c3c <vPhyInitialise>

    if( xPhyDiscover( pxPhyObject ) != 0 )
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f7fe feb5 	bl	8012c66 <xPhyDiscover>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d001      	beq.n	8013f06 <prvPhyInit+0x26>
    {
        xResult = pdPASS;
 8013f02:	2301      	movs	r3, #1
 8013f04:	60fb      	str	r3, [r7, #12]
    }

    return xResult;
 8013f06:	68fb      	ldr	r3, [r7, #12]
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3710      	adds	r7, #16
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}
 8013f10:	08013579 	.word	0x08013579
 8013f14:	08013541 	.word	0x08013541

08013f18 <prvPhyStart>:

static BaseType_t prvPhyStart( ETH_HandleTypeDef * pxEthHandle,
                               NetworkInterface_t * pxInterface,
                               EthernetPhy_t * pxPhyObject )
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b086      	sub	sp, #24
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	60b9      	str	r1, [r7, #8]
 8013f22:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8013f24:	2300      	movs	r3, #0
 8013f26:	617b      	str	r3, [r7, #20]

    if( prvGetPhyLinkStatus( pxInterface ) == pdFALSE )
 8013f28:	68b8      	ldr	r0, [r7, #8]
 8013f2a:	f7ff fb41 	bl	80135b0 <prvGetPhyLinkStatus>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d11a      	bne.n	8013f6a <prvPhyStart+0x52>
    {
        const PhyProperties_t xPhyProperties =
 8013f34:	2300      	movs	r3, #0
 8013f36:	613b      	str	r3, [r7, #16]
 8013f38:	2303      	movs	r3, #3
 8013f3a:	743b      	strb	r3, [r7, #16]
 8013f3c:	2303      	movs	r3, #3
 8013f3e:	747b      	strb	r3, [r7, #17]
 8013f40:	2303      	movs	r3, #3
 8013f42:	74bb      	strb	r3, [r7, #18]
        #if ipconfigIS_DISABLED( niEMAC_AUTO_NEGOTIATION )
            pxPhyObject->xPhyPreferences.ucSpeed = xPhyProperties.ucSpeed;
            pxPhyObject->xPhyPreferences.ucDuplex = xPhyProperties.ucDuplex;
        #endif

        if( xPhyConfigure( pxPhyObject, &xPhyProperties ) == 0 )
 8013f44:	f107 0310 	add.w	r3, r7, #16
 8013f48:	4619      	mov	r1, r3
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f7fe ff71 	bl	8012e32 <xPhyConfigure>
 8013f50:	4603      	mov	r3, r0
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d10b      	bne.n	8013f6e <prvPhyStart+0x56>
        {
            if( prvMacUpdateConfig( pxEthHandle, pxPhyObject ) != pdFALSE )
 8013f56:	6879      	ldr	r1, [r7, #4]
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	f000 fa7f 	bl	801445c <prvMacUpdateConfig>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d004      	beq.n	8013f6e <prvPhyStart+0x56>
            {
                xResult = pdTRUE;
 8013f64:	2301      	movs	r3, #1
 8013f66:	617b      	str	r3, [r7, #20]
 8013f68:	e001      	b.n	8013f6e <prvPhyStart+0x56>
            }
        }
    }
    else
    {
        xResult = pdTRUE;
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8013f6e:	697b      	ldr	r3, [r7, #20]
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3718      	adds	r7, #24
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}

08013f78 <prvCalcCrc32>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvCalcCrc32( const uint8_t * const pucMACAddr )
{
 8013f78:	b480      	push	{r7}
 8013f7a:	b089      	sub	sp, #36	@ 0x24
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32 = 0xFFFFFFFFU;
 8013f80:	f04f 33ff 	mov.w	r3, #4294967295
 8013f84:	61fb      	str	r3, [r7, #28]

    uint32_t ucIndex;

    for( ucIndex = ipMAC_ADDRESS_LENGTH_BYTES; ucIndex > 0; --ucIndex )
 8013f86:	2306      	movs	r3, #6
 8013f88:	61bb      	str	r3, [r7, #24]
 8013f8a:	e028      	b.n	8013fde <prvCalcCrc32+0x66>
    {
        ulCRC32 ^= __RBIT( pucMACAddr[ ipMAC_ADDRESS_LENGTH_BYTES - ucIndex ] );
 8013f8c:	69bb      	ldr	r3, [r7, #24]
 8013f8e:	f1c3 0306 	rsb	r3, r3, #6
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	4413      	add	r3, r2
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	fa93 f3a3 	rbit	r3, r3
 8013fa0:	60fb      	str	r3, [r7, #12]
  return result;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	69fa      	ldr	r2, [r7, #28]
 8013fa6:	4053      	eors	r3, r2
 8013fa8:	61fb      	str	r3, [r7, #28]

        uint8_t ucJndex;

        for( ucJndex = 8; ucJndex > 0; --ucJndex )
 8013faa:	2308      	movs	r3, #8
 8013fac:	75fb      	strb	r3, [r7, #23]
 8013fae:	e010      	b.n	8013fd2 <prvCalcCrc32+0x5a>
        {
            if( ulCRC32 & 0x80000000U )
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	da07      	bge.n	8013fc6 <prvCalcCrc32+0x4e>
            {
                ulCRC32 <<= 1;
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	005b      	lsls	r3, r3, #1
 8013fba:	61fb      	str	r3, [r7, #28]
                ulCRC32 ^= niEMAC_CRC_POLY;
 8013fbc:	69fa      	ldr	r2, [r7, #28]
 8013fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8013ff4 <prvCalcCrc32+0x7c>)
 8013fc0:	4053      	eors	r3, r2
 8013fc2:	61fb      	str	r3, [r7, #28]
 8013fc4:	e002      	b.n	8013fcc <prvCalcCrc32+0x54>
            }
            else
            {
                ulCRC32 <<= 1;
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	005b      	lsls	r3, r3, #1
 8013fca:	61fb      	str	r3, [r7, #28]
        for( ucJndex = 8; ucJndex > 0; --ucJndex )
 8013fcc:	7dfb      	ldrb	r3, [r7, #23]
 8013fce:	3b01      	subs	r3, #1
 8013fd0:	75fb      	strb	r3, [r7, #23]
 8013fd2:	7dfb      	ldrb	r3, [r7, #23]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d1eb      	bne.n	8013fb0 <prvCalcCrc32+0x38>
    for( ucIndex = ipMAC_ADDRESS_LENGTH_BYTES; ucIndex > 0; --ucIndex )
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	3b01      	subs	r3, #1
 8013fdc:	61bb      	str	r3, [r7, #24]
 8013fde:	69bb      	ldr	r3, [r7, #24]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d1d3      	bne.n	8013f8c <prvCalcCrc32+0x14>
            }
        }
    }

    return ~ulCRC32;
 8013fe4:	69fb      	ldr	r3, [r7, #28]
 8013fe6:	43db      	mvns	r3, r3
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3724      	adds	r7, #36	@ 0x24
 8013fec:	46bd      	mov	sp, r7
 8013fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff2:	4770      	bx	lr
 8013ff4:	04c11db7 	.word	0x04c11db7

08013ff8 <prvGetMacHashIndex>:

/*---------------------------------------------------------------------------*/

static uint8_t prvGetMacHashIndex( const uint8_t * const pucMACAddr )
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b084      	sub	sp, #16
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
    const uint32_t ulHash = prvCalcCrc32( pucMACAddr );
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f7ff ffb9 	bl	8013f78 <prvCalcCrc32>
 8014006:	60f8      	str	r0, [r7, #12]
    const uint8_t ucHashIndex = ( ulHash >> 26 ) & 0x3FU;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	0e9b      	lsrs	r3, r3, #26
 801400c:	72fb      	strb	r3, [r7, #11]

    return ucHashIndex;
 801400e:	7afb      	ldrb	r3, [r7, #11]
}
 8014010:	4618      	mov	r0, r3
 8014012:	3710      	adds	r7, #16
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <prvHAL_ETH_SetDestMACAddrMatch>:

/* Needed since HAL Driver only provides source matching */
static void prvHAL_ETH_SetDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                            uint8_t ucIndex,
                                            const uint8_t * const pucMACAddr )
{
 8014018:	b480      	push	{r7}
 801401a:	b08b      	sub	sp, #44	@ 0x2c
 801401c:	af00      	add	r7, sp, #0
 801401e:	60f8      	str	r0, [r7, #12]
 8014020:	460b      	mov	r3, r1
 8014022:	607a      	str	r2, [r7, #4]
 8014024:	72fb      	strb	r3, [r7, #11]
    configASSERT( ucIndex < niEMAC_MAC_SRC_MATCH_COUNT );
 8014026:	7afb      	ldrb	r3, [r7, #11]
 8014028:	2b02      	cmp	r3, #2
 801402a:	d90d      	bls.n	8014048 <prvHAL_ETH_SetDestMACAddrMatch+0x30>
	__asm volatile
 801402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014030:	b672      	cpsid	i
 8014032:	f383 8811 	msr	BASEPRI, r3
 8014036:	f3bf 8f6f 	isb	sy
 801403a:	f3bf 8f4f 	dsb	sy
 801403e:	b662      	cpsie	i
 8014040:	617b      	str	r3, [r7, #20]
}
 8014042:	bf00      	nop
 8014044:	bf00      	nop
 8014046:	e7fd      	b.n	8014044 <prvHAL_ETH_SetDestMACAddrMatch+0x2c>
    const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	3305      	adds	r3, #5
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	021b      	lsls	r3, r3, #8
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	3204      	adds	r2, #4
 8014054:	7812      	ldrb	r2, [r2, #0]
 8014056:	4313      	orrs	r3, r2
 8014058:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	3303      	adds	r3, #3
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	061a      	lsls	r2, r3, #24
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	3302      	adds	r3, #2
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	041b      	lsls	r3, r3, #16
 801406a:	431a      	orrs	r2, r3
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	3301      	adds	r3, #1
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	021b      	lsls	r3, r3, #8
 8014074:	4313      	orrs	r3, r2
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	7812      	ldrb	r2, [r2, #0]
 801407a:	4313      	orrs	r3, r2
 801407c:	623b      	str	r3, [r7, #32]

    /* MACA0HR/MACA0LR reserved for the primary MAC-address. */
    const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	3348      	adds	r3, #72	@ 0x48
 8014082:	461a      	mov	r2, r3
 8014084:	7afb      	ldrb	r3, [r7, #11]
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	4413      	add	r3, r2
 801408a:	61fb      	str	r3, [r7, #28]
    const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	334c      	adds	r3, #76	@ 0x4c
 8014090:	461a      	mov	r2, r3
 8014092:	7afb      	ldrb	r3, [r7, #11]
 8014094:	00db      	lsls	r3, r3, #3
 8014096:	4413      	add	r3, r2
 8014098:	61bb      	str	r3, [r7, #24]
    ( *( __IO uint32_t * ) ulMacRegHigh ) = ETH_MACA1HR_AE | ulMacAddrHigh;
 801409a:	69fb      	ldr	r3, [r7, #28]
 801409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801409e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80140a2:	601a      	str	r2, [r3, #0]
    ( *( __IO uint32_t * ) ulMacRegLow ) = ulMacAddrLow;
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	6a3a      	ldr	r2, [r7, #32]
 80140a8:	601a      	str	r2, [r3, #0]
}
 80140aa:	bf00      	nop
 80140ac:	372c      	adds	r7, #44	@ 0x2c
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr

080140b6 <prvHAL_ETH_ClearDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static void prvHAL_ETH_ClearDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                              uint8_t ucIndex )
{
 80140b6:	b480      	push	{r7}
 80140b8:	b087      	sub	sp, #28
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	6078      	str	r0, [r7, #4]
 80140be:	460b      	mov	r3, r1
 80140c0:	70fb      	strb	r3, [r7, #3]
    configASSERT( ucIndex < niEMAC_MAC_SRC_MATCH_COUNT );
 80140c2:	78fb      	ldrb	r3, [r7, #3]
 80140c4:	2b02      	cmp	r3, #2
 80140c6:	d90d      	bls.n	80140e4 <prvHAL_ETH_ClearDestMACAddrMatch+0x2e>
	__asm volatile
 80140c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140cc:	b672      	cpsid	i
 80140ce:	f383 8811 	msr	BASEPRI, r3
 80140d2:	f3bf 8f6f 	isb	sy
 80140d6:	f3bf 8f4f 	dsb	sy
 80140da:	b662      	cpsie	i
 80140dc:	60fb      	str	r3, [r7, #12]
}
 80140de:	bf00      	nop
 80140e0:	bf00      	nop
 80140e2:	e7fd      	b.n	80140e0 <prvHAL_ETH_ClearDestMACAddrMatch+0x2a>
    const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	3348      	adds	r3, #72	@ 0x48
 80140e8:	461a      	mov	r2, r3
 80140ea:	78fb      	ldrb	r3, [r7, #3]
 80140ec:	00db      	lsls	r3, r3, #3
 80140ee:	4413      	add	r3, r2
 80140f0:	617b      	str	r3, [r7, #20]
    const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	334c      	adds	r3, #76	@ 0x4c
 80140f6:	461a      	mov	r2, r3
 80140f8:	78fb      	ldrb	r3, [r7, #3]
 80140fa:	00db      	lsls	r3, r3, #3
 80140fc:	4413      	add	r3, r2
 80140fe:	613b      	str	r3, [r7, #16]
    ( *( __IO uint32_t * ) ulMacRegHigh ) = 0U;
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	2200      	movs	r2, #0
 8014104:	601a      	str	r2, [r3, #0]
    ( *( __IO uint32_t * ) ulMacRegLow ) = 0U;
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	2200      	movs	r2, #0
 801410a:	601a      	str	r2, [r3, #0]
}
 801410c:	bf00      	nop
 801410e:	371c      	adds	r7, #28
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr

08014118 <prvAddDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvAddDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                          const uint8_t * const pucMACAddr )
{
 8014118:	b480      	push	{r7}
 801411a:	b089      	sub	sp, #36	@ 0x24
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8014122:	2300      	movs	r3, #0
 8014124:	61fb      	str	r3, [r7, #28]

    uint8_t ucIndex;

    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8014126:	2300      	movs	r3, #0
 8014128:	76fb      	strb	r3, [r7, #27]
 801412a:	e04e      	b.n	80141ca <prvAddDestMACAddrMatch+0xb2>
    {
        if( ucSrcMatchCounters[ ucIndex ] > 0U )
 801412c:	7efb      	ldrb	r3, [r7, #27]
 801412e:	4a2c      	ldr	r2, [pc, #176]	@ (80141e0 <prvAddDestMACAddrMatch+0xc8>)
 8014130:	5cd3      	ldrb	r3, [r2, r3]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d03f      	beq.n	80141b6 <prvAddDestMACAddrMatch+0x9e>
        {
            /* ETH_MACA1HR_MBC - Group Address Filtering */
            const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	3348      	adds	r3, #72	@ 0x48
 801413a:	461a      	mov	r2, r3
 801413c:	7efb      	ldrb	r3, [r7, #27]
 801413e:	00db      	lsls	r3, r3, #3
 8014140:	4413      	add	r3, r2
 8014142:	617b      	str	r3, [r7, #20]
            const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	334c      	adds	r3, #76	@ 0x4c
 8014148:	461a      	mov	r2, r3
 801414a:	7efb      	ldrb	r3, [r7, #27]
 801414c:	00db      	lsls	r3, r3, #3
 801414e:	4413      	add	r3, r2
 8014150:	613b      	str	r3, [r7, #16]

            const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	3305      	adds	r3, #5
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	021b      	lsls	r3, r3, #8
 801415a:	683a      	ldr	r2, [r7, #0]
 801415c:	3204      	adds	r2, #4
 801415e:	7812      	ldrb	r2, [r2, #0]
 8014160:	4313      	orrs	r3, r2
 8014162:	60fb      	str	r3, [r7, #12]
            const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	3303      	adds	r3, #3
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	061a      	lsls	r2, r3, #24
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	3302      	adds	r3, #2
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	041b      	lsls	r3, r3, #16
 8014174:	431a      	orrs	r2, r3
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	3301      	adds	r3, #1
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	021b      	lsls	r3, r3, #8
 801417e:	4313      	orrs	r3, r2
 8014180:	683a      	ldr	r2, [r7, #0]
 8014182:	7812      	ldrb	r2, [r2, #0]
 8014184:	4313      	orrs	r3, r2
 8014186:	60bb      	str	r3, [r7, #8]

            if( ( ulMacRegHigh == ulMacAddrHigh ) && ( ulMacRegLow == ulMacAddrLow ) )
 8014188:	697a      	ldr	r2, [r7, #20]
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	429a      	cmp	r2, r3
 801418e:	d119      	bne.n	80141c4 <prvAddDestMACAddrMatch+0xac>
 8014190:	693a      	ldr	r2, [r7, #16]
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	429a      	cmp	r2, r3
 8014196:	d115      	bne.n	80141c4 <prvAddDestMACAddrMatch+0xac>
            {
                if( ucSrcMatchCounters[ ucIndex ] < UINT8_MAX )
 8014198:	7efb      	ldrb	r3, [r7, #27]
 801419a:	4a11      	ldr	r2, [pc, #68]	@ (80141e0 <prvAddDestMACAddrMatch+0xc8>)
 801419c:	5cd3      	ldrb	r3, [r2, r3]
 801419e:	2bff      	cmp	r3, #255	@ 0xff
 80141a0:	d006      	beq.n	80141b0 <prvAddDestMACAddrMatch+0x98>
                {
                    ++( ucSrcMatchCounters[ ucIndex ] );
 80141a2:	7efb      	ldrb	r3, [r7, #27]
 80141a4:	4a0e      	ldr	r2, [pc, #56]	@ (80141e0 <prvAddDestMACAddrMatch+0xc8>)
 80141a6:	5cd2      	ldrb	r2, [r2, r3]
 80141a8:	3201      	adds	r2, #1
 80141aa:	b2d1      	uxtb	r1, r2
 80141ac:	4a0c      	ldr	r2, [pc, #48]	@ (80141e0 <prvAddDestMACAddrMatch+0xc8>)
 80141ae:	54d1      	strb	r1, [r2, r3]
                }

                xResult = pdTRUE;
 80141b0:	2301      	movs	r3, #1
 80141b2:	61fb      	str	r3, [r7, #28]
                break;
 80141b4:	e00c      	b.n	80141d0 <prvAddDestMACAddrMatch+0xb8>
            }
        }
        else if( uxMACEntryIndex > niEMAC_MAC_SRC_MATCH_COUNT )
 80141b6:	4b0b      	ldr	r3, [pc, #44]	@ (80141e4 <prvAddDestMACAddrMatch+0xcc>)
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	2b03      	cmp	r3, #3
 80141bc:	d902      	bls.n	80141c4 <prvAddDestMACAddrMatch+0xac>
        {
            uxMACEntryIndex = niEMAC_MAC_SRC_MATCH_COUNT;
 80141be:	4b09      	ldr	r3, [pc, #36]	@ (80141e4 <prvAddDestMACAddrMatch+0xcc>)
 80141c0:	2203      	movs	r2, #3
 80141c2:	701a      	strb	r2, [r3, #0]
    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 80141c4:	7efb      	ldrb	r3, [r7, #27]
 80141c6:	3301      	adds	r3, #1
 80141c8:	76fb      	strb	r3, [r7, #27]
 80141ca:	7efb      	ldrb	r3, [r7, #27]
 80141cc:	2b02      	cmp	r3, #2
 80141ce:	d9ad      	bls.n	801412c <prvAddDestMACAddrMatch+0x14>
        }
    }

    return xResult;
 80141d0:	69fb      	ldr	r3, [r7, #28]
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3724      	adds	r7, #36	@ 0x24
 80141d6:	46bd      	mov	sp, r7
 80141d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop
 80141e0:	20003524 	.word	0x20003524
 80141e4:	20003527 	.word	0x20003527

080141e8 <prvRemoveDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvRemoveDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                             const uint8_t * const pucMACAddr )
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b088      	sub	sp, #32
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 80141f2:	2300      	movs	r3, #0
 80141f4:	61fb      	str	r3, [r7, #28]

    uint8_t ucIndex;

    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 80141f6:	2300      	movs	r3, #0
 80141f8:	76fb      	strb	r3, [r7, #27]
 80141fa:	e050      	b.n	801429e <prvRemoveDestMACAddrMatch+0xb6>
    {
        if( ucSrcMatchCounters[ ucIndex ] > 0U )
 80141fc:	7efb      	ldrb	r3, [r7, #27]
 80141fe:	4a2c      	ldr	r2, [pc, #176]	@ (80142b0 <prvRemoveDestMACAddrMatch+0xc8>)
 8014200:	5cd3      	ldrb	r3, [r2, r3]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d048      	beq.n	8014298 <prvRemoveDestMACAddrMatch+0xb0>
        {
            /* ETH_MACA1HR_MBC - Group Address Filtering */
            const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	3348      	adds	r3, #72	@ 0x48
 801420a:	461a      	mov	r2, r3
 801420c:	7efb      	ldrb	r3, [r7, #27]
 801420e:	00db      	lsls	r3, r3, #3
 8014210:	4413      	add	r3, r2
 8014212:	617b      	str	r3, [r7, #20]
            const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	334c      	adds	r3, #76	@ 0x4c
 8014218:	461a      	mov	r2, r3
 801421a:	7efb      	ldrb	r3, [r7, #27]
 801421c:	00db      	lsls	r3, r3, #3
 801421e:	4413      	add	r3, r2
 8014220:	613b      	str	r3, [r7, #16]

            const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	3305      	adds	r3, #5
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	021b      	lsls	r3, r3, #8
 801422a:	683a      	ldr	r2, [r7, #0]
 801422c:	3204      	adds	r2, #4
 801422e:	7812      	ldrb	r2, [r2, #0]
 8014230:	4313      	orrs	r3, r2
 8014232:	60fb      	str	r3, [r7, #12]
            const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	3303      	adds	r3, #3
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	061a      	lsls	r2, r3, #24
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	3302      	adds	r3, #2
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	041b      	lsls	r3, r3, #16
 8014244:	431a      	orrs	r2, r3
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	3301      	adds	r3, #1
 801424a:	781b      	ldrb	r3, [r3, #0]
 801424c:	021b      	lsls	r3, r3, #8
 801424e:	4313      	orrs	r3, r2
 8014250:	683a      	ldr	r2, [r7, #0]
 8014252:	7812      	ldrb	r2, [r2, #0]
 8014254:	4313      	orrs	r3, r2
 8014256:	60bb      	str	r3, [r7, #8]

            if( ( ulMacRegHigh == ulMacAddrHigh ) && ( ulMacRegLow == ulMacAddrLow ) )
 8014258:	697a      	ldr	r2, [r7, #20]
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	429a      	cmp	r2, r3
 801425e:	d11b      	bne.n	8014298 <prvRemoveDestMACAddrMatch+0xb0>
 8014260:	693a      	ldr	r2, [r7, #16]
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	429a      	cmp	r2, r3
 8014266:	d117      	bne.n	8014298 <prvRemoveDestMACAddrMatch+0xb0>
            {
                if( ucSrcMatchCounters[ ucIndex ] < UINT8_MAX )
 8014268:	7efb      	ldrb	r3, [r7, #27]
 801426a:	4a11      	ldr	r2, [pc, #68]	@ (80142b0 <prvRemoveDestMACAddrMatch+0xc8>)
 801426c:	5cd3      	ldrb	r3, [r2, r3]
 801426e:	2bff      	cmp	r3, #255	@ 0xff
 8014270:	d00f      	beq.n	8014292 <prvRemoveDestMACAddrMatch+0xaa>
                {
                    if( --( ucSrcMatchCounters[ ucIndex ] ) == 0 )
 8014272:	7efb      	ldrb	r3, [r7, #27]
 8014274:	4a0e      	ldr	r2, [pc, #56]	@ (80142b0 <prvRemoveDestMACAddrMatch+0xc8>)
 8014276:	5cd2      	ldrb	r2, [r2, r3]
 8014278:	3a01      	subs	r2, #1
 801427a:	b2d1      	uxtb	r1, r2
 801427c:	4a0c      	ldr	r2, [pc, #48]	@ (80142b0 <prvRemoveDestMACAddrMatch+0xc8>)
 801427e:	54d1      	strb	r1, [r2, r3]
 8014280:	4a0b      	ldr	r2, [pc, #44]	@ (80142b0 <prvRemoveDestMACAddrMatch+0xc8>)
 8014282:	5cd3      	ldrb	r3, [r2, r3]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d104      	bne.n	8014292 <prvRemoveDestMACAddrMatch+0xaa>
                    {
                        prvHAL_ETH_ClearDestMACAddrMatch( pxEthInstance, ucIndex );
 8014288:	7efb      	ldrb	r3, [r7, #27]
 801428a:	4619      	mov	r1, r3
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7ff ff12 	bl	80140b6 <prvHAL_ETH_ClearDestMACAddrMatch>
                    }
                }

                xResult = pdTRUE;
 8014292:	2301      	movs	r3, #1
 8014294:	61fb      	str	r3, [r7, #28]
                break;
 8014296:	e005      	b.n	80142a4 <prvRemoveDestMACAddrMatch+0xbc>
    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8014298:	7efb      	ldrb	r3, [r7, #27]
 801429a:	3301      	adds	r3, #1
 801429c:	76fb      	strb	r3, [r7, #27]
 801429e:	7efb      	ldrb	r3, [r7, #27]
 80142a0:	2b02      	cmp	r3, #2
 80142a2:	d9ab      	bls.n	80141fc <prvRemoveDestMACAddrMatch+0x14>
            }
        }
    }

    return xResult;
 80142a4:	69fb      	ldr	r3, [r7, #28]
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3720      	adds	r7, #32
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	bf00      	nop
 80142b0:	20003524 	.word	0x20003524

080142b4 <prvSetNewDestMACAddrMatch>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvSetNewDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                             uint8_t ucHashIndex,
                                             const uint8_t * const pucMACAddr )
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b086      	sub	sp, #24
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	60f8      	str	r0, [r7, #12]
 80142bc:	460b      	mov	r3, r1
 80142be:	607a      	str	r2, [r7, #4]
 80142c0:	72fb      	strb	r3, [r7, #11]
    BaseType_t xResult = pdFALSE;
 80142c2:	2300      	movs	r3, #0
 80142c4:	617b      	str	r3, [r7, #20]

    if( uxMACEntryIndex < niEMAC_MAC_SRC_MATCH_COUNT )
 80142c6:	4b10      	ldr	r3, [pc, #64]	@ (8014308 <prvSetNewDestMACAddrMatch+0x54>)
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	2b02      	cmp	r3, #2
 80142cc:	d817      	bhi.n	80142fe <prvSetNewDestMACAddrMatch+0x4a>
    {
        if( ucAddrHashCounters[ ucHashIndex ] == 0U )
 80142ce:	7afb      	ldrb	r3, [r7, #11]
 80142d0:	4a0e      	ldr	r2, [pc, #56]	@ (801430c <prvSetNewDestMACAddrMatch+0x58>)
 80142d2:	5cd3      	ldrb	r3, [r2, r3]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d112      	bne.n	80142fe <prvSetNewDestMACAddrMatch+0x4a>
        {
            prvHAL_ETH_SetDestMACAddrMatch( pxEthInstance, uxMACEntryIndex, pucMACAddr );
 80142d8:	4b0b      	ldr	r3, [pc, #44]	@ (8014308 <prvSetNewDestMACAddrMatch+0x54>)
 80142da:	781b      	ldrb	r3, [r3, #0]
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	4619      	mov	r1, r3
 80142e0:	68f8      	ldr	r0, [r7, #12]
 80142e2:	f7ff fe99 	bl	8014018 <prvHAL_ETH_SetDestMACAddrMatch>
            ucSrcMatchCounters[ uxMACEntryIndex++ ] = 1U;
 80142e6:	4b08      	ldr	r3, [pc, #32]	@ (8014308 <prvSetNewDestMACAddrMatch+0x54>)
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	1c5a      	adds	r2, r3, #1
 80142ec:	b2d1      	uxtb	r1, r2
 80142ee:	4a06      	ldr	r2, [pc, #24]	@ (8014308 <prvSetNewDestMACAddrMatch+0x54>)
 80142f0:	7011      	strb	r1, [r2, #0]
 80142f2:	461a      	mov	r2, r3
 80142f4:	4b06      	ldr	r3, [pc, #24]	@ (8014310 <prvSetNewDestMACAddrMatch+0x5c>)
 80142f6:	2101      	movs	r1, #1
 80142f8:	5499      	strb	r1, [r3, r2]
            xResult = pdTRUE;
 80142fa:	2301      	movs	r3, #1
 80142fc:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 80142fe:	697b      	ldr	r3, [r7, #20]
}
 8014300:	4618      	mov	r0, r3
 8014302:	3718      	adds	r7, #24
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	20003527 	.word	0x20003527
 801430c:	20003530 	.word	0x20003530
 8014310:	20003524 	.word	0x20003524

08014314 <prvAddDestMACAddrHash>:

/*---------------------------------------------------------------------------*/

static void prvAddDestMACAddrHash( ETH_HandleTypeDef * pxEthHandle,
                                   uint8_t ucHashIndex )
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	460b      	mov	r3, r1
 801431e:	70fb      	strb	r3, [r7, #3]
    if( ucAddrHashCounters[ ucHashIndex ] == 0 )
 8014320:	78fb      	ldrb	r3, [r7, #3]
 8014322:	4a19      	ldr	r2, [pc, #100]	@ (8014388 <prvAddDestMACAddrHash+0x74>)
 8014324:	5cd3      	ldrb	r3, [r2, r3]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d11d      	bne.n	8014366 <prvAddDestMACAddrHash+0x52>
    {
        if( ucHashIndex & 0x20U )
 801432a:	78fb      	ldrb	r3, [r7, #3]
 801432c:	f003 0320 	and.w	r3, r3, #32
 8014330:	2b00      	cmp	r3, #0
 8014332:	d00b      	beq.n	801434c <prvAddDestMACAddrHash+0x38>
        {
            ulHashTable[ 1 ] |= ( 1U << ( ucHashIndex & 0x1FU ) );
 8014334:	4b15      	ldr	r3, [pc, #84]	@ (801438c <prvAddDestMACAddrHash+0x78>)
 8014336:	685a      	ldr	r2, [r3, #4]
 8014338:	78fb      	ldrb	r3, [r7, #3]
 801433a:	f003 031f 	and.w	r3, r3, #31
 801433e:	2101      	movs	r1, #1
 8014340:	fa01 f303 	lsl.w	r3, r1, r3
 8014344:	4313      	orrs	r3, r2
 8014346:	4a11      	ldr	r2, [pc, #68]	@ (801438c <prvAddDestMACAddrHash+0x78>)
 8014348:	6053      	str	r3, [r2, #4]
 801434a:	e008      	b.n	801435e <prvAddDestMACAddrHash+0x4a>
        }
        else
        {
            ulHashTable[ 0 ] |= ( 1U << ucHashIndex );
 801434c:	4b0f      	ldr	r3, [pc, #60]	@ (801438c <prvAddDestMACAddrHash+0x78>)
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	78fb      	ldrb	r3, [r7, #3]
 8014352:	2101      	movs	r1, #1
 8014354:	fa01 f303 	lsl.w	r3, r1, r3
 8014358:	4313      	orrs	r3, r2
 801435a:	4a0c      	ldr	r2, [pc, #48]	@ (801438c <prvAddDestMACAddrHash+0x78>)
 801435c:	6013      	str	r3, [r2, #0]
        }

        HAL_ETH_SetHashTable( pxEthHandle, ulHashTable );
 801435e:	490b      	ldr	r1, [pc, #44]	@ (801438c <prvAddDestMACAddrHash+0x78>)
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f7ef f9b6 	bl	80036d2 <HAL_ETH_SetHashTable>
    }

    if( ucAddrHashCounters[ ucHashIndex ] < UINT8_MAX )
 8014366:	78fb      	ldrb	r3, [r7, #3]
 8014368:	4a07      	ldr	r2, [pc, #28]	@ (8014388 <prvAddDestMACAddrHash+0x74>)
 801436a:	5cd3      	ldrb	r3, [r2, r3]
 801436c:	2bff      	cmp	r3, #255	@ 0xff
 801436e:	d006      	beq.n	801437e <prvAddDestMACAddrHash+0x6a>
    {
        ++( ucAddrHashCounters[ ucHashIndex ] );
 8014370:	78fb      	ldrb	r3, [r7, #3]
 8014372:	4a05      	ldr	r2, [pc, #20]	@ (8014388 <prvAddDestMACAddrHash+0x74>)
 8014374:	5cd2      	ldrb	r2, [r2, r3]
 8014376:	3201      	adds	r2, #1
 8014378:	b2d1      	uxtb	r1, r2
 801437a:	4a03      	ldr	r2, [pc, #12]	@ (8014388 <prvAddDestMACAddrHash+0x74>)
 801437c:	54d1      	strb	r1, [r2, r3]
    }
}
 801437e:	bf00      	nop
 8014380:	3708      	adds	r7, #8
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}
 8014386:	bf00      	nop
 8014388:	20003530 	.word	0x20003530
 801438c:	20003528 	.word	0x20003528

08014390 <prvRemoveDestMACAddrHash>:

/*---------------------------------------------------------------------------*/

static void prvRemoveDestMACAddrHash( ETH_HandleTypeDef * pxEthHandle,
                                      const uint8_t * const pucMACAddr )
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
    const uint8_t ucHashIndex = prvGetMacHashIndex( pucMACAddr );
 801439a:	6838      	ldr	r0, [r7, #0]
 801439c:	f7ff fe2c 	bl	8013ff8 <prvGetMacHashIndex>
 80143a0:	4603      	mov	r3, r0
 80143a2:	73fb      	strb	r3, [r7, #15]

    if( ucAddrHashCounters[ ucHashIndex ] > 0U )
 80143a4:	7bfb      	ldrb	r3, [r7, #15]
 80143a6:	4a1c      	ldr	r2, [pc, #112]	@ (8014418 <prvRemoveDestMACAddrHash+0x88>)
 80143a8:	5cd3      	ldrb	r3, [r2, r3]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d02f      	beq.n	801440e <prvRemoveDestMACAddrHash+0x7e>
    {
        if( ucAddrHashCounters[ ucHashIndex ] < UINT8_MAX )
 80143ae:	7bfb      	ldrb	r3, [r7, #15]
 80143b0:	4a19      	ldr	r2, [pc, #100]	@ (8014418 <prvRemoveDestMACAddrHash+0x88>)
 80143b2:	5cd3      	ldrb	r3, [r2, r3]
 80143b4:	2bff      	cmp	r3, #255	@ 0xff
 80143b6:	d02a      	beq.n	801440e <prvRemoveDestMACAddrHash+0x7e>
        {
            if( --( ucAddrHashCounters[ ucHashIndex ] ) == 0 )
 80143b8:	7bfb      	ldrb	r3, [r7, #15]
 80143ba:	4a17      	ldr	r2, [pc, #92]	@ (8014418 <prvRemoveDestMACAddrHash+0x88>)
 80143bc:	5cd2      	ldrb	r2, [r2, r3]
 80143be:	3a01      	subs	r2, #1
 80143c0:	b2d1      	uxtb	r1, r2
 80143c2:	4a15      	ldr	r2, [pc, #84]	@ (8014418 <prvRemoveDestMACAddrHash+0x88>)
 80143c4:	54d1      	strb	r1, [r2, r3]
 80143c6:	4a14      	ldr	r2, [pc, #80]	@ (8014418 <prvRemoveDestMACAddrHash+0x88>)
 80143c8:	5cd3      	ldrb	r3, [r2, r3]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d11f      	bne.n	801440e <prvRemoveDestMACAddrHash+0x7e>
            {
                if( ucHashIndex & 0x20U )
 80143ce:	7bfb      	ldrb	r3, [r7, #15]
 80143d0:	f003 0320 	and.w	r3, r3, #32
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d00c      	beq.n	80143f2 <prvRemoveDestMACAddrHash+0x62>
                {
                    ulHashTable[ 1 ] &= ~( 1U << ( ucHashIndex & 0x1FU ) );
 80143d8:	4b10      	ldr	r3, [pc, #64]	@ (801441c <prvRemoveDestMACAddrHash+0x8c>)
 80143da:	685a      	ldr	r2, [r3, #4]
 80143dc:	7bfb      	ldrb	r3, [r7, #15]
 80143de:	f003 031f 	and.w	r3, r3, #31
 80143e2:	2101      	movs	r1, #1
 80143e4:	fa01 f303 	lsl.w	r3, r1, r3
 80143e8:	43db      	mvns	r3, r3
 80143ea:	4013      	ands	r3, r2
 80143ec:	4a0b      	ldr	r2, [pc, #44]	@ (801441c <prvRemoveDestMACAddrHash+0x8c>)
 80143ee:	6053      	str	r3, [r2, #4]
 80143f0:	e009      	b.n	8014406 <prvRemoveDestMACAddrHash+0x76>
                }
                else
                {
                    ulHashTable[ 0 ] &= ~( 1U << ucHashIndex );
 80143f2:	4b0a      	ldr	r3, [pc, #40]	@ (801441c <prvRemoveDestMACAddrHash+0x8c>)
 80143f4:	681a      	ldr	r2, [r3, #0]
 80143f6:	7bfb      	ldrb	r3, [r7, #15]
 80143f8:	2101      	movs	r1, #1
 80143fa:	fa01 f303 	lsl.w	r3, r1, r3
 80143fe:	43db      	mvns	r3, r3
 8014400:	4013      	ands	r3, r2
 8014402:	4a06      	ldr	r2, [pc, #24]	@ (801441c <prvRemoveDestMACAddrHash+0x8c>)
 8014404:	6013      	str	r3, [r2, #0]
                }

                HAL_ETH_SetHashTable( pxEthHandle, ulHashTable );
 8014406:	4905      	ldr	r1, [pc, #20]	@ (801441c <prvRemoveDestMACAddrHash+0x8c>)
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7ef f962 	bl	80036d2 <HAL_ETH_SetHashTable>
            }
        }
    }
}
 801440e:	bf00      	nop
 8014410:	3710      	adds	r7, #16
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	20003530 	.word	0x20003530
 801441c:	20003528 	.word	0x20003528

08014420 <prvReleaseTxPacket>:
/*                              EMAC Helpers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static void prvReleaseTxPacket( ETH_HandleTypeDef * pxEthHandle )
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
    if( xSemaphoreTake( xTxMutex, pdMS_TO_TICKS( niEMAC_TX_MAX_BLOCK_TIME_MS ) ) != pdFALSE )
 8014428:	4b0b      	ldr	r3, [pc, #44]	@ (8014458 <prvReleaseTxPacket+0x38>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2114      	movs	r1, #20
 801442e:	4618      	mov	r0, r3
 8014430:	f001 faa8 	bl	8015984 <xQueueSemaphoreTake>
 8014434:	4603      	mov	r3, r0
 8014436:	2b00      	cmp	r3, #0
 8014438:	d009      	beq.n	801444e <prvReleaseTxPacket+0x2e>
    {
        ( void ) HAL_ETH_ReleaseTxPacket( pxEthHandle );
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7ee fc55 	bl	8002cea <HAL_ETH_ReleaseTxPacket>
        ( void ) xSemaphoreGive( xTxMutex );
 8014440:	4b05      	ldr	r3, [pc, #20]	@ (8014458 <prvReleaseTxPacket+0x38>)
 8014442:	6818      	ldr	r0, [r3, #0]
 8014444:	2300      	movs	r3, #0
 8014446:	2200      	movs	r2, #0
 8014448:	2100      	movs	r1, #0
 801444a:	f001 f805 	bl	8015458 <xQueueGenericSend>

    /* while( ETH_TX_DESC_CNT - uxQueueMessagesWaiting( ( QueueHandle_t ) xTxDescSem ) > pxEthHandle->TxDescList.BuffersInUse )
     * {
     *  ( void ) xSemaphoreGive( xTxDescSem );
     * } */
}
 801444e:	bf00      	nop
 8014450:	3708      	adds	r7, #8
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	20003514 	.word	0x20003514

0801445c <prvMacUpdateConfig>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvMacUpdateConfig( ETH_HandleTypeDef * pxEthHandle,
                                      EthernetPhy_t * pxPhyObject )
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b09c      	sub	sp, #112	@ 0x70
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8014466:	2300      	movs	r3, #0
 8014468:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if( pxEthHandle->gState == HAL_ETH_STATE_STARTED )
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014470:	2b40      	cmp	r3, #64	@ 0x40
 8014472:	d102      	bne.n	801447a <prvMacUpdateConfig+0x1e>
    {
        ( void ) HAL_ETH_Stop_IT( pxEthHandle );
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f7ee fa05 	bl	8002884 <HAL_ETH_Stop_IT>
    }

    ETH_MACConfigTypeDef xMACConfig;
    ( void ) HAL_ETH_GetMACConfig( pxEthHandle, &xMACConfig );
 801447a:	f107 0308 	add.w	r3, r7, #8
 801447e:	4619      	mov	r1, r3
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f7ee fdef 	bl	8003064 <HAL_ETH_GetMACConfig>

    #if ipconfigIS_ENABLED( niEMAC_AUTO_NEGOTIATION )
        ( void ) xPhyStartAutoNegotiation( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801448a:	2201      	movs	r2, #1
 801448c:	fa02 f303 	lsl.w	r3, r2, r3
 8014490:	3b01      	subs	r3, #1
 8014492:	4619      	mov	r1, r3
 8014494:	6838      	ldr	r0, [r7, #0]
 8014496:	f7fe fdc5 	bl	8013024 <xPhyStartAutoNegotiation>
    #else
        ( void ) xPhyFixedValue( pxPhyObject, xPhyGetMask( pxPhyObject ) );
    #endif
    xMACConfig.DuplexMode = ( pxPhyObject->xPhyProperties.ucDuplex == PHY_DUPLEX_FULL ) ? ETH_FULLDUPLEX_MODE : ETH_HALFDUPLEX_MODE;
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80144a0:	2b02      	cmp	r3, #2
 80144a2:	d102      	bne.n	80144aa <prvMacUpdateConfig+0x4e>
 80144a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80144a8:	e000      	b.n	80144ac <prvMacUpdateConfig+0x50>
 80144aa:	2300      	movs	r3, #0
 80144ac:	623b      	str	r3, [r7, #32]
    xMACConfig.Speed = ( pxPhyObject->xPhyProperties.ucSpeed == PHY_SPEED_10 ) ? ETH_SPEED_10M : ETH_SPEED_100M;
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80144b4:	2b01      	cmp	r3, #1
 80144b6:	d101      	bne.n	80144bc <prvMacUpdateConfig+0x60>
 80144b8:	2300      	movs	r3, #0
 80144ba:	e001      	b.n	80144c0 <prvMacUpdateConfig+0x64>
 80144bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80144c0:	61fb      	str	r3, [r7, #28]

    if( HAL_ETH_SetMACConfig( pxEthHandle, &xMACConfig ) == HAL_OK )
 80144c2:	f107 0308 	add.w	r3, r7, #8
 80144c6:	4619      	mov	r1, r3
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f7ee ffa1 	bl	8003410 <HAL_ETH_SetMACConfig>
 80144ce:	4603      	mov	r3, r0
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d101      	bne.n	80144d8 <prvMacUpdateConfig+0x7c>
    {
        xResult = pdTRUE;
 80144d4:	2301      	movs	r3, #1
 80144d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

    return xResult;
 80144d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3770      	adds	r7, #112	@ 0x70
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}

080144e2 <prvReleaseNetworkBufferDescriptor>:

/*---------------------------------------------------------------------------*/

static void prvReleaseNetworkBufferDescriptor( NetworkBufferDescriptor_t * const pxDescriptor )
{
 80144e2:	b580      	push	{r7, lr}
 80144e4:	b084      	sub	sp, #16
 80144e6:	af00      	add	r7, sp, #0
 80144e8:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxDescriptorToClear = pxDescriptor;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	60fb      	str	r3, [r7, #12]

    while( pxDescriptorToClear != NULL )
 80144ee:	e006      	b.n	80144fe <prvReleaseNetworkBufferDescriptor+0x1c>
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            NetworkBufferDescriptor_t * const pxNext = pxDescriptorToClear->pxNextBuffer;
        #else
            NetworkBufferDescriptor_t * const pxNext = NULL;
 80144f0:	2300      	movs	r3, #0
 80144f2:	60bb      	str	r3, [r7, #8]
        #endif
        vReleaseNetworkBufferAndDescriptor( pxDescriptorToClear );
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	f7fe faf9 	bl	8012aec <vReleaseNetworkBufferAndDescriptor>
        pxDescriptorToClear = pxNext;
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	60fb      	str	r3, [r7, #12]
    while( pxDescriptorToClear != NULL )
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d1f5      	bne.n	80144f0 <prvReleaseNetworkBufferDescriptor+0xe>
    }
}
 8014504:	bf00      	nop
 8014506:	bf00      	nop
 8014508:	3710      	adds	r7, #16
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}

0801450e <prvSendRxEvent>:

/*---------------------------------------------------------------------------*/

static void prvSendRxEvent( NetworkBufferDescriptor_t * const pxDescriptor )
{
 801450e:	b580      	push	{r7, lr}
 8014510:	b084      	sub	sp, #16
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
    const IPStackEvent_t xRxEvent =
 8014516:	2301      	movs	r3, #1
 8014518:	723b      	strb	r3, [r7, #8]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	60fb      	str	r3, [r7, #12]
    {
        .eEventType = eNetworkRxEvent,
        .pvData     = ( void * ) pxDescriptor
    };

    if( xSendEventStructToIPTask( &xRxEvent, pdMS_TO_TICKS( niEMAC_RX_MAX_BLOCK_TIME_MS ) ) != pdPASS )
 801451e:	f107 0308 	add.w	r3, r7, #8
 8014522:	2114      	movs	r1, #20
 8014524:	4618      	mov	r0, r3
 8014526:	f7f6 f8ed 	bl	800a704 <xSendEventStructToIPTask>
 801452a:	4603      	mov	r3, r0
 801452c:	2b01      	cmp	r3, #1
 801452e:	d002      	beq.n	8014536 <prvSendRxEvent+0x28>
    {
        iptraceETHERNET_RX_EVENT_LOST();
        FreeRTOS_debug_printf( ( "prvSendRxEvent: xSendEventStructToIPTask failed\n" ) );
        prvReleaseNetworkBufferDescriptor( pxDescriptor );
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f7ff ffd6 	bl	80144e2 <prvReleaseNetworkBufferDescriptor>
    }
}
 8014536:	bf00      	nop
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
	...

08014540 <prvAcceptPacket>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvAcceptPacket( const NetworkBufferDescriptor_t * const pxDescriptor,
                                   uint16_t usLength )
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b086      	sub	sp, #24
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	460b      	mov	r3, r1
 801454a:	807b      	strh	r3, [r7, #2]
    BaseType_t xResult = pdFALSE;
 801454c:	2300      	movs	r3, #0
 801454e:	617b      	str	r3, [r7, #20]

    do
    {
        if( pxDescriptor == NULL )
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d01c      	beq.n	8014590 <prvAcceptPacket+0x50>
            iptraceETHERNET_RX_EVENT_LOST();
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Null Descriptor\n" ) );
            break;
        }

        if( usLength > pxDescriptor->xDataLength )
 8014556:	887a      	ldrh	r2, [r7, #2]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801455c:	429a      	cmp	r2, r3
 801455e:	d819      	bhi.n	8014594 <prvAcceptPacket+0x54>
            iptraceETHERNET_RX_EVENT_LOST();
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Packet size overflow\n" ) );
            break;
        }

        ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8014560:	4b11      	ldr	r3, [pc, #68]	@ (80145a8 <prvAcceptPacket+0x68>)
 8014562:	613b      	str	r3, [r7, #16]
        uint32_t ulErrorCode = 0;
 8014564:	2300      	movs	r3, #0
 8014566:	60fb      	str	r3, [r7, #12]
        ( void ) HAL_ETH_GetRxDataErrorCode( pxEthHandle, &ulErrorCode );
 8014568:	f107 030c 	add.w	r3, r7, #12
 801456c:	4619      	mov	r1, r3
 801456e:	6938      	ldr	r0, [r7, #16]
 8014570:	f7ee fba8 	bl	8002cc4 <HAL_ETH_GetRxDataErrorCode>

        if( ulErrorCode != 0 )
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d10e      	bne.n	8014598 <prvAcceptPacket+0x58>
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Rx Data Error\n" ) );
            break;
        }

        #if ipconfigIS_ENABLED( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES )
            if( eConsiderFrameForProcessing( pxDescriptor->pucEthernetBuffer ) != eProcessBuffer )
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801457e:	4618      	mov	r0, r3
 8014580:	f7f6 f908 	bl	800a794 <eConsiderFrameForProcessing>
 8014584:	4603      	mov	r3, r0
 8014586:	2b01      	cmp	r3, #1
 8014588:	d108      	bne.n	801459c <prvAcceptPacket+0x5c>
                break;
            }
        }
        #endif /* if ipconfigIS_ENABLED( ipconfigETHERNET_DRIVER_FILTERS_PACKETS ) */

        xResult = pdTRUE;
 801458a:	2301      	movs	r3, #1
 801458c:	617b      	str	r3, [r7, #20]
 801458e:	e006      	b.n	801459e <prvAcceptPacket+0x5e>
            break;
 8014590:	bf00      	nop
 8014592:	e004      	b.n	801459e <prvAcceptPacket+0x5e>
            break;
 8014594:	bf00      	nop
 8014596:	e002      	b.n	801459e <prvAcceptPacket+0x5e>
            break;
 8014598:	bf00      	nop
 801459a:	e000      	b.n	801459e <prvAcceptPacket+0x5e>
                break;
 801459c:	bf00      	nop
    } while( pdFALSE );

    return xResult;
 801459e:	697b      	ldr	r3, [r7, #20]
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3718      	adds	r7, #24
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	20003420 	.word	0x20003420

080145ac <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80145b2:	4b0c      	ldr	r3, [pc, #48]	@ (80145e4 <ETH_IRQHandler+0x38>)
 80145b4:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 80145b6:	4b0c      	ldr	r3, [pc, #48]	@ (80145e8 <ETH_IRQHandler+0x3c>)
 80145b8:	2200      	movs	r2, #0
 80145ba:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f7ee fbf7 	bl	8002db0 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 80145c2:	4b09      	ldr	r3, [pc, #36]	@ (80145e8 <ETH_IRQHandler+0x3c>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d007      	beq.n	80145da <ETH_IRQHandler+0x2e>
 80145ca:	4b08      	ldr	r3, [pc, #32]	@ (80145ec <ETH_IRQHandler+0x40>)
 80145cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145d0:	601a      	str	r2, [r3, #0]
 80145d2:	f3bf 8f4f 	dsb	sy
 80145d6:	f3bf 8f6f 	isb	sy
}
 80145da:	bf00      	nop
 80145dc:	3708      	adds	r7, #8
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}
 80145e2:	bf00      	nop
 80145e4:	20003420 	.word	0x20003420
 80145e8:	2000351c 	.word	0x2000351c
 80145ec:	e000ed04 	.word	0xe000ed04

080145f0 <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af02      	add	r7, sp, #8
 80145f6:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 80145f8:	2300      	movs	r3, #0
 80145fa:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014602:	2be0      	cmp	r3, #224	@ 0xe0
 8014604:	d103      	bne.n	801460e <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 8014606:	7dfb      	ldrb	r3, [r7, #23]
 8014608:	f043 0320 	orr.w	r3, r3, #32
 801460c:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014614:	f003 0308 	and.w	r3, r3, #8
 8014618:	2b00      	cmp	r3, #0
 801461a:	d019      	beq.n	8014650 <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 801461c:	7dfb      	ldrb	r3, [r7, #23]
 801461e:	f043 0310 	orr.w	r3, r3, #16
 8014622:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801462a:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	f003 0304 	and.w	r3, r3, #4
 8014632:	2b00      	cmp	r3, #0
 8014634:	d003      	beq.n	801463e <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 8014636:	7dfb      	ldrb	r3, [r7, #23]
 8014638:	f043 0308 	orr.w	r3, r3, #8
 801463c:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014644:	2b00      	cmp	r3, #0
 8014646:	d003      	beq.n	8014650 <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 8014648:	7dfb      	ldrb	r3, [r7, #23]
 801464a:	f043 0304 	orr.w	r3, r3, #4
 801464e:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014656:	f003 0310 	and.w	r3, r3, #16
 801465a:	2b00      	cmp	r3, #0
 801465c:	d003      	beq.n	8014666 <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 801465e:	7dfb      	ldrb	r3, [r7, #23]
 8014660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014664:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 8014666:	4b0e      	ldr	r3, [pc, #56]	@ (80146a0 <HAL_ETH_ErrorCallback+0xb0>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d014      	beq.n	8014698 <HAL_ETH_ErrorCallback+0xa8>
 801466e:	7dfb      	ldrb	r3, [r7, #23]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d011      	beq.n	8014698 <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8014674:	2300      	movs	r3, #0
 8014676:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 8014678:	4b09      	ldr	r3, [pc, #36]	@ (80146a0 <HAL_ETH_ErrorCallback+0xb0>)
 801467a:	6818      	ldr	r0, [r3, #0]
 801467c:	7df9      	ldrb	r1, [r7, #23]
 801467e:	f107 030c 	add.w	r3, r7, #12
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	2300      	movs	r3, #0
 8014686:	2201      	movs	r2, #1
 8014688:	f002 fee4 	bl	8017454 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 801468c:	4b05      	ldr	r3, [pc, #20]	@ (80146a4 <HAL_ETH_ErrorCallback+0xb4>)
 801468e:	681a      	ldr	r2, [r3, #0]
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	4313      	orrs	r3, r2
 8014694:	4a03      	ldr	r2, [pc, #12]	@ (80146a4 <HAL_ETH_ErrorCallback+0xb4>)
 8014696:	6013      	str	r3, [r2, #0]
    }
}
 8014698:	bf00      	nop
 801469a:	3718      	adds	r7, #24
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	20003510 	.word	0x20003510
 80146a4:	2000351c 	.word	0x2000351c

080146a8 <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af02      	add	r7, sp, #8
 80146ae:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80146b4:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 80146b6:	4b11      	ldr	r3, [pc, #68]	@ (80146fc <HAL_ETH_RxCpltCallback+0x54>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	68fa      	ldr	r2, [r7, #12]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d902      	bls.n	80146c6 <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 80146c0:	4a0e      	ldr	r2, [pc, #56]	@ (80146fc <HAL_ETH_RxCpltCallback+0x54>)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 80146c6:	4b0e      	ldr	r3, [pc, #56]	@ (8014700 <HAL_ETH_RxCpltCallback+0x58>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d011      	beq.n	80146f2 <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80146ce:	2300      	movs	r3, #0
 80146d0:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 80146d2:	4b0b      	ldr	r3, [pc, #44]	@ (8014700 <HAL_ETH_RxCpltCallback+0x58>)
 80146d4:	6818      	ldr	r0, [r3, #0]
 80146d6:	f107 0308 	add.w	r3, r7, #8
 80146da:	9300      	str	r3, [sp, #0]
 80146dc:	2300      	movs	r3, #0
 80146de:	2201      	movs	r2, #1
 80146e0:	2101      	movs	r1, #1
 80146e2:	f002 feb7 	bl	8017454 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80146e6:	4b07      	ldr	r3, [pc, #28]	@ (8014704 <HAL_ETH_RxCpltCallback+0x5c>)
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	4313      	orrs	r3, r2
 80146ee:	4a05      	ldr	r2, [pc, #20]	@ (8014704 <HAL_ETH_RxCpltCallback+0x5c>)
 80146f0:	6013      	str	r3, [r2, #0]
    }
}
 80146f2:	bf00      	nop
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	200046b8 	.word	0x200046b8
 8014700:	20003510 	.word	0x20003510
 8014704:	2000351c 	.word	0x2000351c

08014708 <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b086      	sub	sp, #24
 801470c:	af02      	add	r7, sp, #8
 801470e:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014714:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 8014716:	4b11      	ldr	r3, [pc, #68]	@ (801475c <HAL_ETH_TxCpltCallback+0x54>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	68fa      	ldr	r2, [r7, #12]
 801471c:	429a      	cmp	r2, r3
 801471e:	d902      	bls.n	8014726 <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 8014720:	4a0e      	ldr	r2, [pc, #56]	@ (801475c <HAL_ETH_TxCpltCallback+0x54>)
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 8014726:	4b0e      	ldr	r3, [pc, #56]	@ (8014760 <HAL_ETH_TxCpltCallback+0x58>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d011      	beq.n	8014752 <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801472e:	2300      	movs	r3, #0
 8014730:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 8014732:	4b0b      	ldr	r3, [pc, #44]	@ (8014760 <HAL_ETH_TxCpltCallback+0x58>)
 8014734:	6818      	ldr	r0, [r3, #0]
 8014736:	f107 0308 	add.w	r3, r7, #8
 801473a:	9300      	str	r3, [sp, #0]
 801473c:	2300      	movs	r3, #0
 801473e:	2201      	movs	r2, #1
 8014740:	2102      	movs	r1, #2
 8014742:	f002 fe87 	bl	8017454 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8014746:	4b07      	ldr	r3, [pc, #28]	@ (8014764 <HAL_ETH_TxCpltCallback+0x5c>)
 8014748:	681a      	ldr	r2, [r3, #0]
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	4313      	orrs	r3, r2
 801474e:	4a05      	ldr	r2, [pc, #20]	@ (8014764 <HAL_ETH_TxCpltCallback+0x5c>)
 8014750:	6013      	str	r3, [r2, #0]
    }
}
 8014752:	bf00      	nop
 8014754:	3710      	adds	r7, #16
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	200046bc 	.word	0x200046bc
 8014760:	20003510 	.word	0x20003510
 8014764:	2000351c 	.word	0x2000351c

08014768 <HAL_ETH_RxAllocateCallback>:
/*                            HAL Tx/Rx Callbacks                            */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void HAL_ETH_RxAllocateCallback( uint8_t ** ppucBuff )
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b084      	sub	sp, #16
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
    const NetworkBufferDescriptor_t * pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( niEMAC_DATA_BUFFER_SIZE, pdMS_TO_TICKS( niEMAC_DESCRIPTOR_WAIT_TIME_MS ) );
 8014770:	2114      	movs	r1, #20
 8014772:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8014776:	f7fe f90d 	bl	8012994 <pxGetNetworkBufferWithDescriptor>
 801477a:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d003      	beq.n	801478a <HAL_ETH_RxAllocateCallback+0x22>
            if( niEMAC_CACHE_MAINTENANCE != 0 )
            {
                SCB_InvalidateDCache_by_Addr( ( uint32_t * ) pxBufferDescriptor->pucEthernetBuffer, pxBufferDescriptor->xDataLength );
            }
        #endif
        *ppucBuff = pxBufferDescriptor->pucEthernetBuffer;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	601a      	str	r2, [r3, #0]
    }
    else
    {
        FreeRTOS_debug_printf( ( "HAL_ETH_RxAllocateCallback: failed\n" ) );
    }
}
 801478a:	bf00      	nop
 801478c:	3710      	adds	r7, #16
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}

08014792 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback( void ** ppvStart,
                             void ** ppvEnd,
                             uint8_t * pucBuff,
                             uint16_t usLength )
{
 8014792:	b580      	push	{r7, lr}
 8014794:	b088      	sub	sp, #32
 8014796:	af00      	add	r7, sp, #0
 8014798:	60f8      	str	r0, [r7, #12]
 801479a:	60b9      	str	r1, [r7, #8]
 801479c:	607a      	str	r2, [r7, #4]
 801479e:	807b      	strh	r3, [r7, #2]
    NetworkBufferDescriptor_t ** const ppxStartDescriptor = ( NetworkBufferDescriptor_t ** ) ppvStart;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	61fb      	str	r3, [r7, #28]
    NetworkBufferDescriptor_t ** const ppxEndDescriptor = ( NetworkBufferDescriptor_t ** ) ppvEnd;
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	61bb      	str	r3, [r7, #24]
    NetworkBufferDescriptor_t * const pxCurDescriptor = pxPacketBuffer_to_NetworkBuffer( ( const void * ) pucBuff );
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f7f6 fecf 	bl	800b54c <pxPacketBuffer_to_NetworkBuffer>
 80147ae:	6178      	str	r0, [r7, #20]

    if( prvAcceptPacket( pxCurDescriptor, usLength ) == pdTRUE )
 80147b0:	887b      	ldrh	r3, [r7, #2]
 80147b2:	4619      	mov	r1, r3
 80147b4:	6978      	ldr	r0, [r7, #20]
 80147b6:	f7ff fec3 	bl	8014540 <prvAcceptPacket>
 80147ba:	4603      	mov	r3, r0
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d120      	bne.n	8014802 <HAL_ETH_RxLinkCallback+0x70>
    {
        pxCurDescriptor->xDataLength = usLength;
 80147c0:	887a      	ldrh	r2, [r7, #2]
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	629a      	str	r2, [r3, #40]	@ 0x28
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            pxCurDescriptor->pxNextBuffer = NULL;
        #endif

        if( *ppxStartDescriptor == NULL )
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d102      	bne.n	80147d4 <HAL_ETH_RxLinkCallback+0x42>
        {
            *ppxStartDescriptor = pxCurDescriptor;
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	697a      	ldr	r2, [r7, #20]
 80147d2:	601a      	str	r2, [r3, #0]
            else if( ppxEndDescriptor != NULL )
            {
                ( *ppxEndDescriptor )->pxNextBuffer = pxCurDescriptor;
            }
        #endif
        *ppxEndDescriptor = pxCurDescriptor;
 80147d4:	69bb      	ldr	r3, [r7, #24]
 80147d6:	697a      	ldr	r2, [r7, #20]
 80147d8:	601a      	str	r2, [r3, #0]
        /* Only single buffer packets are supported */
        configASSERT( *ppxStartDescriptor == *ppxEndDescriptor );
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	69bb      	ldr	r3, [r7, #24]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d010      	beq.n	8014808 <HAL_ETH_RxLinkCallback+0x76>
	__asm volatile
 80147e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147ea:	b672      	cpsid	i
 80147ec:	f383 8811 	msr	BASEPRI, r3
 80147f0:	f3bf 8f6f 	isb	sy
 80147f4:	f3bf 8f4f 	dsb	sy
 80147f8:	b662      	cpsie	i
 80147fa:	613b      	str	r3, [r7, #16]
}
 80147fc:	bf00      	nop
 80147fe:	bf00      	nop
 8014800:	e7fd      	b.n	80147fe <HAL_ETH_RxLinkCallback+0x6c>
        #endif
    }
    else
    {
        FreeRTOS_debug_printf( ( "HAL_ETH_RxLinkCallback: Buffer Dropped\n" ) );
        prvReleaseNetworkBufferDescriptor( pxCurDescriptor );
 8014802:	6978      	ldr	r0, [r7, #20]
 8014804:	f7ff fe6d 	bl	80144e2 <prvReleaseNetworkBufferDescriptor>
    }
}
 8014808:	bf00      	nop
 801480a:	3720      	adds	r7, #32
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}

08014810 <HAL_ETH_TxFreeCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxFreeCallback( uint32_t * pulBuff )
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * const pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) pulBuff;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	60fb      	str	r3, [r7, #12]

    prvReleaseNetworkBufferDescriptor( pxNetworkBuffer );
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f7ff fe60 	bl	80144e2 <prvReleaseNetworkBufferDescriptor>
    ( void ) xSemaphoreGive( xTxDescSem );
 8014822:	4b05      	ldr	r3, [pc, #20]	@ (8014838 <HAL_ETH_TxFreeCallback+0x28>)
 8014824:	6818      	ldr	r0, [r3, #0]
 8014826:	2300      	movs	r3, #0
 8014828:	2200      	movs	r2, #0
 801482a:	2100      	movs	r1, #0
 801482c:	f000 fe14 	bl	8015458 <xQueueGenericSend>
}
 8014830:	bf00      	nop
 8014832:	3710      	adds	r7, #16
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}
 8014838:	20003518 	.word	0x20003518

0801483c <pxSTM32_FillInterfaceDescriptor>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

NetworkInterface_t * pxSTM32_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                      NetworkInterface_t * pxInterface )
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b082      	sub	sp, #8
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	6039      	str	r1, [r7, #0]
    static char pcName[ 17 ];

    ( void ) snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	4a13      	ldr	r2, [pc, #76]	@ (8014898 <pxSTM32_FillInterfaceDescriptor+0x5c>)
 801484a:	2111      	movs	r1, #17
 801484c:	4813      	ldr	r0, [pc, #76]	@ (801489c <pxSTM32_FillInterfaceDescriptor+0x60>)
 801484e:	f004 f851 	bl	80188f4 <sniprintf>

    ( void ) memset( pxInterface, '\0', sizeof( *pxInterface ) );
 8014852:	2228      	movs	r2, #40	@ 0x28
 8014854:	2100      	movs	r1, #0
 8014856:	6838      	ldr	r0, [r7, #0]
 8014858:	f004 f984 	bl	8018b64 <memset>
    pxInterface->pcName = pcName;
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	4a0f      	ldr	r2, [pc, #60]	@ (801489c <pxSTM32_FillInterfaceDescriptor+0x60>)
 8014860:	601a      	str	r2, [r3, #0]
    /* TODO: use pvArgument to get xEMACData? */
    /* xEMACData.xEMACIndex = xEMACIndex; */
    /* pxInterface->pvArgument = ( void * ) &xEMACData; */
    /* pxInterface->pvArgument = pvPortMalloc( sizeof( EMACData_t ) ); */
    pxInterface->pvArgument = ( void * ) xEMACIndex;
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = prvNetworkInterfaceInitialise;
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	4a0d      	ldr	r2, [pc, #52]	@ (80148a0 <pxSTM32_FillInterfaceDescriptor+0x64>)
 801486c:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = prvNetworkInterfaceOutput;
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	4a0c      	ldr	r2, [pc, #48]	@ (80148a4 <pxSTM32_FillInterfaceDescriptor+0x68>)
 8014872:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = prvGetPhyLinkStatus;
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	4a0c      	ldr	r2, [pc, #48]	@ (80148a8 <pxSTM32_FillInterfaceDescriptor+0x6c>)
 8014878:	611a      	str	r2, [r3, #16]

    pxInterface->pfAddAllowedMAC = prvAddAllowedMACAddress;
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	4a0b      	ldr	r2, [pc, #44]	@ (80148ac <pxSTM32_FillInterfaceDescriptor+0x70>)
 801487e:	615a      	str	r2, [r3, #20]
    pxInterface->pfRemoveAllowedMAC = prvRemoveAllowedMACAddress;
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	4a0b      	ldr	r2, [pc, #44]	@ (80148b0 <pxSTM32_FillInterfaceDescriptor+0x74>)
 8014884:	619a      	str	r2, [r3, #24]

    return FreeRTOS_AddNetworkInterface( pxInterface );
 8014886:	6838      	ldr	r0, [r7, #0]
 8014888:	f7f7 fcbc 	bl	800c204 <FreeRTOS_AddNetworkInterface>
 801488c:	4603      	mov	r3, r0
}
 801488e:	4618      	mov	r0, r3
 8014890:	3708      	adds	r7, #8
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	08019da8 	.word	0x08019da8
 801489c:	200046c0 	.word	0x200046c0
 80148a0:	080135dd 	.word	0x080135dd
 80148a4:	080136dd 	.word	0x080136dd
 80148a8:	080135b1 	.word	0x080135b1
 80148ac:	080138b9 	.word	0x080138b9
 80148b0:	08013911 	.word	0x08013911

080148b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80148b4:	b480      	push	{r7}
 80148b6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80148b8:	bf00      	nop
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr
	...

080148c4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80148c4:	b480      	push	{r7}
 80148c6:	b085      	sub	sp, #20
 80148c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80148ca:	f3ef 8305 	mrs	r3, IPSR
 80148ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80148d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d10f      	bne.n	80148f6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80148d6:	f3ef 8310 	mrs	r3, PRIMASK
 80148da:	607b      	str	r3, [r7, #4]
  return(result);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d105      	bne.n	80148ee <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80148e2:	f3ef 8311 	mrs	r3, BASEPRI
 80148e6:	603b      	str	r3, [r7, #0]
  return(result);
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d007      	beq.n	80148fe <osKernelInitialize+0x3a>
 80148ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014928 <osKernelInitialize+0x64>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b02      	cmp	r3, #2
 80148f4:	d103      	bne.n	80148fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80148f6:	f06f 0305 	mvn.w	r3, #5
 80148fa:	60fb      	str	r3, [r7, #12]
 80148fc:	e00c      	b.n	8014918 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80148fe:	4b0a      	ldr	r3, [pc, #40]	@ (8014928 <osKernelInitialize+0x64>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d105      	bne.n	8014912 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014906:	4b08      	ldr	r3, [pc, #32]	@ (8014928 <osKernelInitialize+0x64>)
 8014908:	2201      	movs	r2, #1
 801490a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801490c:	2300      	movs	r3, #0
 801490e:	60fb      	str	r3, [r7, #12]
 8014910:	e002      	b.n	8014918 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8014912:	f04f 33ff 	mov.w	r3, #4294967295
 8014916:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8014918:	68fb      	ldr	r3, [r7, #12]
}
 801491a:	4618      	mov	r0, r3
 801491c:	3714      	adds	r7, #20
 801491e:	46bd      	mov	sp, r7
 8014920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop
 8014928:	200046d4 	.word	0x200046d4

0801492c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014932:	f3ef 8305 	mrs	r3, IPSR
 8014936:	60bb      	str	r3, [r7, #8]
  return(result);
 8014938:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801493a:	2b00      	cmp	r3, #0
 801493c:	d10f      	bne.n	801495e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801493e:	f3ef 8310 	mrs	r3, PRIMASK
 8014942:	607b      	str	r3, [r7, #4]
  return(result);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d105      	bne.n	8014956 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801494a:	f3ef 8311 	mrs	r3, BASEPRI
 801494e:	603b      	str	r3, [r7, #0]
  return(result);
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d007      	beq.n	8014966 <osKernelStart+0x3a>
 8014956:	4b0f      	ldr	r3, [pc, #60]	@ (8014994 <osKernelStart+0x68>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	2b02      	cmp	r3, #2
 801495c:	d103      	bne.n	8014966 <osKernelStart+0x3a>
    stat = osErrorISR;
 801495e:	f06f 0305 	mvn.w	r3, #5
 8014962:	60fb      	str	r3, [r7, #12]
 8014964:	e010      	b.n	8014988 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014966:	4b0b      	ldr	r3, [pc, #44]	@ (8014994 <osKernelStart+0x68>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	2b01      	cmp	r3, #1
 801496c:	d109      	bne.n	8014982 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801496e:	f7ff ffa1 	bl	80148b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014972:	4b08      	ldr	r3, [pc, #32]	@ (8014994 <osKernelStart+0x68>)
 8014974:	2202      	movs	r2, #2
 8014976:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014978:	f001 fd38 	bl	80163ec <vTaskStartScheduler>
      stat = osOK;
 801497c:	2300      	movs	r3, #0
 801497e:	60fb      	str	r3, [r7, #12]
 8014980:	e002      	b.n	8014988 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8014982:	f04f 33ff 	mov.w	r3, #4294967295
 8014986:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8014988:	68fb      	ldr	r3, [r7, #12]
}
 801498a:	4618      	mov	r0, r3
 801498c:	3710      	adds	r7, #16
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	200046d4 	.word	0x200046d4

08014998 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014998:	b580      	push	{r7, lr}
 801499a:	b090      	sub	sp, #64	@ 0x40
 801499c:	af04      	add	r7, sp, #16
 801499e:	60f8      	str	r0, [r7, #12]
 80149a0:	60b9      	str	r1, [r7, #8]
 80149a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80149a4:	2300      	movs	r3, #0
 80149a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80149a8:	f3ef 8305 	mrs	r3, IPSR
 80149ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80149ae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f040 8090 	bne.w	8014ad6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149b6:	f3ef 8310 	mrs	r3, PRIMASK
 80149ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d105      	bne.n	80149ce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80149c2:	f3ef 8311 	mrs	r3, BASEPRI
 80149c6:	617b      	str	r3, [r7, #20]
  return(result);
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d003      	beq.n	80149d6 <osThreadNew+0x3e>
 80149ce:	4b44      	ldr	r3, [pc, #272]	@ (8014ae0 <osThreadNew+0x148>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	2b02      	cmp	r3, #2
 80149d4:	d07f      	beq.n	8014ad6 <osThreadNew+0x13e>
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d07c      	beq.n	8014ad6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80149dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80149e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80149e2:	2318      	movs	r3, #24
 80149e4:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80149e6:	2300      	movs	r3, #0
 80149e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80149ea:	f04f 33ff 	mov.w	r3, #4294967295
 80149ee:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d045      	beq.n	8014a82 <osThreadNew+0xea>
      if (attr->name != NULL) {
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d002      	beq.n	8014a04 <osThreadNew+0x6c>
        name = attr->name;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	699b      	ldr	r3, [r3, #24]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d002      	beq.n	8014a12 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	699b      	ldr	r3, [r3, #24]
 8014a10:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d008      	beq.n	8014a2a <osThreadNew+0x92>
 8014a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a1a:	2b38      	cmp	r3, #56	@ 0x38
 8014a1c:	d805      	bhi.n	8014a2a <osThreadNew+0x92>
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	f003 0301 	and.w	r3, r3, #1
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d001      	beq.n	8014a2e <osThreadNew+0x96>
        return (NULL);
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	e054      	b.n	8014ad8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	695b      	ldr	r3, [r3, #20]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d003      	beq.n	8014a3e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	695b      	ldr	r3, [r3, #20]
 8014a3a:	089b      	lsrs	r3, r3, #2
 8014a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	689b      	ldr	r3, [r3, #8]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d00e      	beq.n	8014a64 <osThreadNew+0xcc>
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	2ba7      	cmp	r3, #167	@ 0xa7
 8014a4c:	d90a      	bls.n	8014a64 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d006      	beq.n	8014a64 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	695b      	ldr	r3, [r3, #20]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d002      	beq.n	8014a64 <osThreadNew+0xcc>
        mem = 1;
 8014a5e:	2301      	movs	r3, #1
 8014a60:	623b      	str	r3, [r7, #32]
 8014a62:	e010      	b.n	8014a86 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	689b      	ldr	r3, [r3, #8]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d10c      	bne.n	8014a86 <osThreadNew+0xee>
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d108      	bne.n	8014a86 <osThreadNew+0xee>
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	691b      	ldr	r3, [r3, #16]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d104      	bne.n	8014a86 <osThreadNew+0xee>
          mem = 0;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	623b      	str	r3, [r7, #32]
 8014a80:	e001      	b.n	8014a86 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8014a82:	2300      	movs	r3, #0
 8014a84:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8014a86:	6a3b      	ldr	r3, [r7, #32]
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d110      	bne.n	8014aae <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014a94:	9202      	str	r2, [sp, #8]
 8014a96:	9301      	str	r3, [sp, #4]
 8014a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a9a:	9300      	str	r3, [sp, #0]
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014aa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014aa2:	68f8      	ldr	r0, [r7, #12]
 8014aa4:	f001 faa4 	bl	8015ff0 <xTaskCreateStatic>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	613b      	str	r3, [r7, #16]
 8014aac:	e013      	b.n	8014ad6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8014aae:	6a3b      	ldr	r3, [r7, #32]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d110      	bne.n	8014ad6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	f107 0310 	add.w	r3, r7, #16
 8014abc:	9301      	str	r3, [sp, #4]
 8014abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ac0:	9300      	str	r3, [sp, #0]
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ac6:	68f8      	ldr	r0, [r7, #12]
 8014ac8:	f001 faf8 	bl	80160bc <xTaskCreate>
 8014acc:	4603      	mov	r3, r0
 8014ace:	2b01      	cmp	r3, #1
 8014ad0:	d001      	beq.n	8014ad6 <osThreadNew+0x13e>
          hTask = NULL;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014ad6:	693b      	ldr	r3, [r7, #16]
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3730      	adds	r7, #48	@ 0x30
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	200046d4 	.word	0x200046d4

08014ae4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b086      	sub	sp, #24
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014aec:	f3ef 8305 	mrs	r3, IPSR
 8014af0:	613b      	str	r3, [r7, #16]
  return(result);
 8014af2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d10f      	bne.n	8014b18 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014af8:	f3ef 8310 	mrs	r3, PRIMASK
 8014afc:	60fb      	str	r3, [r7, #12]
  return(result);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d105      	bne.n	8014b10 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014b04:	f3ef 8311 	mrs	r3, BASEPRI
 8014b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d007      	beq.n	8014b20 <osDelay+0x3c>
 8014b10:	4b0a      	ldr	r3, [pc, #40]	@ (8014b3c <osDelay+0x58>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2b02      	cmp	r3, #2
 8014b16:	d103      	bne.n	8014b20 <osDelay+0x3c>
    stat = osErrorISR;
 8014b18:	f06f 0305 	mvn.w	r3, #5
 8014b1c:	617b      	str	r3, [r7, #20]
 8014b1e:	e007      	b.n	8014b30 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8014b20:	2300      	movs	r3, #0
 8014b22:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d002      	beq.n	8014b30 <osDelay+0x4c>
      vTaskDelay(ticks);
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f001 fc26 	bl	801637c <vTaskDelay>
    }
  }

  return (stat);
 8014b30:	697b      	ldr	r3, [r7, #20]
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3718      	adds	r7, #24
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	200046d4 	.word	0x200046d4

08014b40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014b40:	b480      	push	{r7}
 8014b42:	b085      	sub	sp, #20
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	4a07      	ldr	r2, [pc, #28]	@ (8014b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8014b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	4a06      	ldr	r2, [pc, #24]	@ (8014b70 <vApplicationGetIdleTaskMemory+0x30>)
 8014b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014b5e:	601a      	str	r2, [r3, #0]
}
 8014b60:	bf00      	nop
 8014b62:	3714      	adds	r7, #20
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr
 8014b6c:	200046d8 	.word	0x200046d8
 8014b70:	20004780 	.word	0x20004780

08014b74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014b74:	b480      	push	{r7}
 8014b76:	b085      	sub	sp, #20
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	4a07      	ldr	r2, [pc, #28]	@ (8014ba0 <vApplicationGetTimerTaskMemory+0x2c>)
 8014b84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	4a06      	ldr	r2, [pc, #24]	@ (8014ba4 <vApplicationGetTimerTaskMemory+0x30>)
 8014b8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b92:	601a      	str	r2, [r3, #0]
}
 8014b94:	bf00      	nop
 8014b96:	3714      	adds	r7, #20
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr
 8014ba0:	20004b80 	.word	0x20004b80
 8014ba4:	20004c28 	.word	0x20004c28

08014ba8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b082      	sub	sp, #8
 8014bac:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8014bae:	2020      	movs	r0, #32
 8014bb0:	f003 fb3a 	bl	8018228 <pvPortMalloc>
 8014bb4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d00a      	beq.n	8014bd2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	3304      	adds	r3, #4
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f000 fa09 	bl	8014fde <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8014bd2:	687b      	ldr	r3, [r7, #4]
	}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3708      	adds	r7, #8
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}

08014bdc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b090      	sub	sp, #64	@ 0x40
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	60f8      	str	r0, [r7, #12]
 8014be4:	60b9      	str	r1, [r7, #8]
 8014be6:	607a      	str	r2, [r7, #4]
 8014be8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d10d      	bne.n	8014c18 <xEventGroupWaitBits+0x3c>
	__asm volatile
 8014bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c00:	b672      	cpsid	i
 8014c02:	f383 8811 	msr	BASEPRI, r3
 8014c06:	f3bf 8f6f 	isb	sy
 8014c0a:	f3bf 8f4f 	dsb	sy
 8014c0e:	b662      	cpsie	i
 8014c10:	623b      	str	r3, [r7, #32]
}
 8014c12:	bf00      	nop
 8014c14:	bf00      	nop
 8014c16:	e7fd      	b.n	8014c14 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014c1e:	d30d      	bcc.n	8014c3c <xEventGroupWaitBits+0x60>
	__asm volatile
 8014c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c24:	b672      	cpsid	i
 8014c26:	f383 8811 	msr	BASEPRI, r3
 8014c2a:	f3bf 8f6f 	isb	sy
 8014c2e:	f3bf 8f4f 	dsb	sy
 8014c32:	b662      	cpsie	i
 8014c34:	61fb      	str	r3, [r7, #28]
}
 8014c36:	bf00      	nop
 8014c38:	bf00      	nop
 8014c3a:	e7fd      	b.n	8014c38 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 8014c3c:	68bb      	ldr	r3, [r7, #8]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d10d      	bne.n	8014c5e <xEventGroupWaitBits+0x82>
	__asm volatile
 8014c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c46:	b672      	cpsid	i
 8014c48:	f383 8811 	msr	BASEPRI, r3
 8014c4c:	f3bf 8f6f 	isb	sy
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	b662      	cpsie	i
 8014c56:	61bb      	str	r3, [r7, #24]
}
 8014c58:	bf00      	nop
 8014c5a:	bf00      	nop
 8014c5c:	e7fd      	b.n	8014c5a <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c5e:	f002 f923 	bl	8016ea8 <xTaskGetSchedulerState>
 8014c62:	4603      	mov	r3, r0
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d102      	bne.n	8014c6e <xEventGroupWaitBits+0x92>
 8014c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d101      	bne.n	8014c72 <xEventGroupWaitBits+0x96>
 8014c6e:	2301      	movs	r3, #1
 8014c70:	e000      	b.n	8014c74 <xEventGroupWaitBits+0x98>
 8014c72:	2300      	movs	r3, #0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d10d      	bne.n	8014c94 <xEventGroupWaitBits+0xb8>
	__asm volatile
 8014c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c7c:	b672      	cpsid	i
 8014c7e:	f383 8811 	msr	BASEPRI, r3
 8014c82:	f3bf 8f6f 	isb	sy
 8014c86:	f3bf 8f4f 	dsb	sy
 8014c8a:	b662      	cpsie	i
 8014c8c:	617b      	str	r3, [r7, #20]
}
 8014c8e:	bf00      	nop
 8014c90:	bf00      	nop
 8014c92:	e7fd      	b.n	8014c90 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 8014c94:	f001 fc1e 	bl	80164d4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8014c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8014c9e:	683a      	ldr	r2, [r7, #0]
 8014ca0:	68b9      	ldr	r1, [r7, #8]
 8014ca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ca4:	f000 f979 	bl	8014f9a <prvTestWaitCondition>
 8014ca8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8014caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d00e      	beq.n	8014cce <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8014cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d028      	beq.n	8014d10 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8014cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cc0:	681a      	ldr	r2, [r3, #0]
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	43db      	mvns	r3, r3
 8014cc6:	401a      	ands	r2, r3
 8014cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cca:	601a      	str	r2, [r3, #0]
 8014ccc:	e020      	b.n	8014d10 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8014cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d104      	bne.n	8014cde <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8014cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	633b      	str	r3, [r7, #48]	@ 0x30
 8014cdc:	e018      	b.n	8014d10 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d003      	beq.n	8014cec <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8014ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014cea:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d003      	beq.n	8014cfa <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8014cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8014cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cfc:	1d18      	adds	r0, r3, #4
 8014cfe:	68ba      	ldr	r2, [r7, #8]
 8014d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d02:	4313      	orrs	r3, r2
 8014d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014d06:	4619      	mov	r1, r3
 8014d08:	f001 fdee 	bl	80168e8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8014d10:	f001 fbee 	bl	80164f0 <xTaskResumeAll>
 8014d14:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8014d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d031      	beq.n	8014d80 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 8014d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d107      	bne.n	8014d32 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 8014d22:	4b1a      	ldr	r3, [pc, #104]	@ (8014d8c <xEventGroupWaitBits+0x1b0>)
 8014d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014d28:	601a      	str	r2, [r3, #0]
 8014d2a:	f3bf 8f4f 	dsb	sy
 8014d2e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8014d32:	f002 fa3b 	bl	80171ac <uxTaskResetEventItemValue>
 8014d36:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8014d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d11a      	bne.n	8014d78 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 8014d42:	f003 f943 	bl	8017fcc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8014d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8014d4c:	683a      	ldr	r2, [r7, #0]
 8014d4e:	68b9      	ldr	r1, [r7, #8]
 8014d50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014d52:	f000 f922 	bl	8014f9a <prvTestWaitCondition>
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d009      	beq.n	8014d70 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d006      	beq.n	8014d70 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8014d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d64:	681a      	ldr	r2, [r3, #0]
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	43db      	mvns	r3, r3
 8014d6a:	401a      	ands	r2, r3
 8014d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d6e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8014d70:	2301      	movs	r3, #1
 8014d72:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8014d74:	f003 f960 	bl	8018038 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8014d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8014d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8014d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3740      	adds	r7, #64	@ 0x40
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	e000ed04 	.word	0xe000ed04

08014d90 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b086      	sub	sp, #24
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d10d      	bne.n	8014dc0 <xEventGroupClearBits+0x30>
	__asm volatile
 8014da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014da8:	b672      	cpsid	i
 8014daa:	f383 8811 	msr	BASEPRI, r3
 8014dae:	f3bf 8f6f 	isb	sy
 8014db2:	f3bf 8f4f 	dsb	sy
 8014db6:	b662      	cpsie	i
 8014db8:	60fb      	str	r3, [r7, #12]
}
 8014dba:	bf00      	nop
 8014dbc:	bf00      	nop
 8014dbe:	e7fd      	b.n	8014dbc <xEventGroupClearBits+0x2c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014dc6:	d30d      	bcc.n	8014de4 <xEventGroupClearBits+0x54>
	__asm volatile
 8014dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dcc:	b672      	cpsid	i
 8014dce:	f383 8811 	msr	BASEPRI, r3
 8014dd2:	f3bf 8f6f 	isb	sy
 8014dd6:	f3bf 8f4f 	dsb	sy
 8014dda:	b662      	cpsie	i
 8014ddc:	60bb      	str	r3, [r7, #8]
}
 8014dde:	bf00      	nop
 8014de0:	bf00      	nop
 8014de2:	e7fd      	b.n	8014de0 <xEventGroupClearBits+0x50>

	taskENTER_CRITICAL();
 8014de4:	f003 f8f2 	bl	8017fcc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	43db      	mvns	r3, r3
 8014df6:	401a      	ands	r2, r3
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8014dfc:	f003 f91c 	bl	8018038 <vPortExitCritical>

	return uxReturn;
 8014e00:	693b      	ldr	r3, [r7, #16]
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3718      	adds	r7, #24
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b08e      	sub	sp, #56	@ 0x38
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	6078      	str	r0, [r7, #4]
 8014e12:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8014e14:	2300      	movs	r3, #0
 8014e16:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d10d      	bne.n	8014e42 <xEventGroupSetBits+0x38>
	__asm volatile
 8014e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e2a:	b672      	cpsid	i
 8014e2c:	f383 8811 	msr	BASEPRI, r3
 8014e30:	f3bf 8f6f 	isb	sy
 8014e34:	f3bf 8f4f 	dsb	sy
 8014e38:	b662      	cpsie	i
 8014e3a:	613b      	str	r3, [r7, #16]
}
 8014e3c:	bf00      	nop
 8014e3e:	bf00      	nop
 8014e40:	e7fd      	b.n	8014e3e <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014e48:	d30d      	bcc.n	8014e66 <xEventGroupSetBits+0x5c>
	__asm volatile
 8014e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e4e:	b672      	cpsid	i
 8014e50:	f383 8811 	msr	BASEPRI, r3
 8014e54:	f3bf 8f6f 	isb	sy
 8014e58:	f3bf 8f4f 	dsb	sy
 8014e5c:	b662      	cpsie	i
 8014e5e:	60fb      	str	r3, [r7, #12]
}
 8014e60:	bf00      	nop
 8014e62:	bf00      	nop
 8014e64:	e7fd      	b.n	8014e62 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8014e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e68:	3304      	adds	r3, #4
 8014e6a:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e6e:	3308      	adds	r3, #8
 8014e70:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8014e72:	f001 fb2f 	bl	80164d4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8014e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e78:	68db      	ldr	r3, [r3, #12]
 8014e7a:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8014e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	431a      	orrs	r2, r3
 8014e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e86:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8014e88:	e03c      	b.n	8014f04 <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 8014e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8014e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8014e96:	2300      	movs	r3, #0
 8014e98:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8014e9a:	69bb      	ldr	r3, [r7, #24]
 8014e9c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8014ea0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8014ea2:	69bb      	ldr	r3, [r7, #24]
 8014ea4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8014ea8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d108      	bne.n	8014ec6 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8014eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	69bb      	ldr	r3, [r7, #24]
 8014eba:	4013      	ands	r3, r2
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00b      	beq.n	8014ed8 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ec4:	e008      	b.n	8014ed8 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8014ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	69bb      	ldr	r3, [r7, #24]
 8014ecc:	4013      	ands	r3, r2
 8014ece:	69ba      	ldr	r2, [r7, #24]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d101      	bne.n	8014ed8 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8014ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d010      	beq.n	8014f00 <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d003      	beq.n	8014ef0 <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8014ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	4313      	orrs	r3, r2
 8014eee:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8014ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014ef8:	4619      	mov	r1, r3
 8014efa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014efc:	f001 fdca 	bl	8016a94 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8014f00:	69fb      	ldr	r3, [r7, #28]
 8014f02:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8014f04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014f06:	6a3b      	ldr	r3, [r7, #32]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d1be      	bne.n	8014e8a <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8014f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f12:	43db      	mvns	r3, r3
 8014f14:	401a      	ands	r2, r3
 8014f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f18:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8014f1a:	f001 fae9 	bl	80164f0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8014f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f20:	681b      	ldr	r3, [r3, #0]
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3738      	adds	r7, #56	@ 0x38
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}

08014f2a <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8014f2a:	b580      	push	{r7, lr}
 8014f2c:	b086      	sub	sp, #24
 8014f2e:	af00      	add	r7, sp, #0
 8014f30:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	3304      	adds	r3, #4
 8014f3a:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8014f3c:	f001 faca 	bl	80164d4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8014f40:	e01a      	b.n	8014f78 <vEventGroupDelete+0x4e>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	68da      	ldr	r2, [r3, #12]
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	3308      	adds	r3, #8
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d10d      	bne.n	8014f6a <vEventGroupDelete+0x40>
	__asm volatile
 8014f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f52:	b672      	cpsid	i
 8014f54:	f383 8811 	msr	BASEPRI, r3
 8014f58:	f3bf 8f6f 	isb	sy
 8014f5c:	f3bf 8f4f 	dsb	sy
 8014f60:	b662      	cpsie	i
 8014f62:	60fb      	str	r3, [r7, #12]
}
 8014f64:	bf00      	nop
 8014f66:	bf00      	nop
 8014f68:	e7fd      	b.n	8014f66 <vEventGroupDelete+0x3c>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8014f6a:	693b      	ldr	r3, [r7, #16]
 8014f6c:	68db      	ldr	r3, [r3, #12]
 8014f6e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8014f72:	4618      	mov	r0, r3
 8014f74:	f001 fd8e 	bl	8016a94 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d1e0      	bne.n	8014f42 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	7f1b      	ldrb	r3, [r3, #28]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d102      	bne.n	8014f8e <vEventGroupDelete+0x64>
			{
				vPortFree( pxEventBits );
 8014f88:	6978      	ldr	r0, [r7, #20]
 8014f8a:	f003 fa1b 	bl	80183c4 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8014f8e:	f001 faaf 	bl	80164f0 <xTaskResumeAll>
}
 8014f92:	bf00      	nop
 8014f94:	3718      	adds	r7, #24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8014f9a:	b480      	push	{r7}
 8014f9c:	b087      	sub	sp, #28
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	60f8      	str	r0, [r7, #12]
 8014fa2:	60b9      	str	r1, [r7, #8]
 8014fa4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d107      	bne.n	8014fc0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	4013      	ands	r3, r2
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d00a      	beq.n	8014fd0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	617b      	str	r3, [r7, #20]
 8014fbe:	e007      	b.n	8014fd0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8014fc0:	68fa      	ldr	r2, [r7, #12]
 8014fc2:	68bb      	ldr	r3, [r7, #8]
 8014fc4:	4013      	ands	r3, r2
 8014fc6:	68ba      	ldr	r2, [r7, #8]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d101      	bne.n	8014fd0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014fcc:	2301      	movs	r3, #1
 8014fce:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8014fd0:	697b      	ldr	r3, [r7, #20]
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	371c      	adds	r7, #28
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fdc:	4770      	bx	lr

08014fde <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014fde:	b480      	push	{r7}
 8014fe0:	b083      	sub	sp, #12
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f103 0208 	add.w	r2, r3, #8
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8014ff6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f103 0208 	add.w	r2, r3, #8
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f103 0208 	add.w	r2, r3, #8
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2200      	movs	r2, #0
 8015010:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015012:	bf00      	nop
 8015014:	370c      	adds	r7, #12
 8015016:	46bd      	mov	sp, r7
 8015018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501c:	4770      	bx	lr

0801501e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801501e:	b480      	push	{r7}
 8015020:	b083      	sub	sp, #12
 8015022:	af00      	add	r7, sp, #0
 8015024:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2200      	movs	r2, #0
 801502a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801502c:	bf00      	nop
 801502e:	370c      	adds	r7, #12
 8015030:	46bd      	mov	sp, r7
 8015032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015036:	4770      	bx	lr

08015038 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015038:	b480      	push	{r7}
 801503a:	b085      	sub	sp, #20
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	68fa      	ldr	r2, [r7, #12]
 801504c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	689a      	ldr	r2, [r3, #8]
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	689b      	ldr	r3, [r3, #8]
 801505a:	683a      	ldr	r2, [r7, #0]
 801505c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	683a      	ldr	r2, [r7, #0]
 8015062:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	1c5a      	adds	r2, r3, #1
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	601a      	str	r2, [r3, #0]
}
 8015074:	bf00      	nop
 8015076:	3714      	adds	r7, #20
 8015078:	46bd      	mov	sp, r7
 801507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507e:	4770      	bx	lr

08015080 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015080:	b480      	push	{r7}
 8015082:	b085      	sub	sp, #20
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
 8015088:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015096:	d103      	bne.n	80150a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	691b      	ldr	r3, [r3, #16]
 801509c:	60fb      	str	r3, [r7, #12]
 801509e:	e00c      	b.n	80150ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	3308      	adds	r3, #8
 80150a4:	60fb      	str	r3, [r7, #12]
 80150a6:	e002      	b.n	80150ae <vListInsert+0x2e>
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	60fb      	str	r3, [r7, #12]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	685b      	ldr	r3, [r3, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	68ba      	ldr	r2, [r7, #8]
 80150b6:	429a      	cmp	r2, r3
 80150b8:	d2f6      	bcs.n	80150a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	685a      	ldr	r2, [r3, #4]
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	683a      	ldr	r2, [r7, #0]
 80150c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	68fa      	ldr	r2, [r7, #12]
 80150ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	683a      	ldr	r2, [r7, #0]
 80150d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	1c5a      	adds	r2, r3, #1
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	601a      	str	r2, [r3, #0]
}
 80150e6:	bf00      	nop
 80150e8:	3714      	adds	r7, #20
 80150ea:	46bd      	mov	sp, r7
 80150ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f0:	4770      	bx	lr

080150f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80150f2:	b480      	push	{r7}
 80150f4:	b085      	sub	sp, #20
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	691b      	ldr	r3, [r3, #16]
 80150fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	687a      	ldr	r2, [r7, #4]
 8015106:	6892      	ldr	r2, [r2, #8]
 8015108:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	689b      	ldr	r3, [r3, #8]
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	6852      	ldr	r2, [r2, #4]
 8015112:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	687a      	ldr	r2, [r7, #4]
 801511a:	429a      	cmp	r2, r3
 801511c:	d103      	bne.n	8015126 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	689a      	ldr	r2, [r3, #8]
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	1e5a      	subs	r2, r3, #1
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	681b      	ldr	r3, [r3, #0]
}
 801513a:	4618      	mov	r0, r3
 801513c:	3714      	adds	r7, #20
 801513e:	46bd      	mov	sp, r7
 8015140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015144:	4770      	bx	lr
	...

08015148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d10d      	bne.n	8015178 <xQueueGenericReset+0x30>
	__asm volatile
 801515c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015160:	b672      	cpsid	i
 8015162:	f383 8811 	msr	BASEPRI, r3
 8015166:	f3bf 8f6f 	isb	sy
 801516a:	f3bf 8f4f 	dsb	sy
 801516e:	b662      	cpsie	i
 8015170:	60bb      	str	r3, [r7, #8]
}
 8015172:	bf00      	nop
 8015174:	bf00      	nop
 8015176:	e7fd      	b.n	8015174 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8015178:	f002 ff28 	bl	8017fcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	681a      	ldr	r2, [r3, #0]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015184:	68f9      	ldr	r1, [r7, #12]
 8015186:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015188:	fb01 f303 	mul.w	r3, r1, r3
 801518c:	441a      	add	r2, r3
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2200      	movs	r2, #0
 8015196:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	681a      	ldr	r2, [r3, #0]
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	681a      	ldr	r2, [r3, #0]
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151a8:	3b01      	subs	r3, #1
 80151aa:	68f9      	ldr	r1, [r7, #12]
 80151ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80151ae:	fb01 f303 	mul.w	r3, r1, r3
 80151b2:	441a      	add	r2, r3
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	22ff      	movs	r2, #255	@ 0xff
 80151bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	22ff      	movs	r2, #255	@ 0xff
 80151c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d114      	bne.n	80151f8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	691b      	ldr	r3, [r3, #16]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d01a      	beq.n	801520c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	3310      	adds	r3, #16
 80151da:	4618      	mov	r0, r3
 80151dc:	f001 fbf4 	bl	80169c8 <xTaskRemoveFromEventList>
 80151e0:	4603      	mov	r3, r0
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d012      	beq.n	801520c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80151e6:	4b0d      	ldr	r3, [pc, #52]	@ (801521c <xQueueGenericReset+0xd4>)
 80151e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151ec:	601a      	str	r2, [r3, #0]
 80151ee:	f3bf 8f4f 	dsb	sy
 80151f2:	f3bf 8f6f 	isb	sy
 80151f6:	e009      	b.n	801520c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	3310      	adds	r3, #16
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7ff feee 	bl	8014fde <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	3324      	adds	r3, #36	@ 0x24
 8015206:	4618      	mov	r0, r3
 8015208:	f7ff fee9 	bl	8014fde <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801520c:	f002 ff14 	bl	8018038 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015210:	2301      	movs	r3, #1
}
 8015212:	4618      	mov	r0, r3
 8015214:	3710      	adds	r7, #16
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop
 801521c:	e000ed04 	.word	0xe000ed04

08015220 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015220:	b580      	push	{r7, lr}
 8015222:	b08e      	sub	sp, #56	@ 0x38
 8015224:	af02      	add	r7, sp, #8
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	60b9      	str	r1, [r7, #8]
 801522a:	607a      	str	r2, [r7, #4]
 801522c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d10d      	bne.n	8015250 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8015234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015238:	b672      	cpsid	i
 801523a:	f383 8811 	msr	BASEPRI, r3
 801523e:	f3bf 8f6f 	isb	sy
 8015242:	f3bf 8f4f 	dsb	sy
 8015246:	b662      	cpsie	i
 8015248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801524a:	bf00      	nop
 801524c:	bf00      	nop
 801524e:	e7fd      	b.n	801524c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d10d      	bne.n	8015272 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8015256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801525a:	b672      	cpsid	i
 801525c:	f383 8811 	msr	BASEPRI, r3
 8015260:	f3bf 8f6f 	isb	sy
 8015264:	f3bf 8f4f 	dsb	sy
 8015268:	b662      	cpsie	i
 801526a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801526c:	bf00      	nop
 801526e:	bf00      	nop
 8015270:	e7fd      	b.n	801526e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d002      	beq.n	801527e <xQueueGenericCreateStatic+0x5e>
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d001      	beq.n	8015282 <xQueueGenericCreateStatic+0x62>
 801527e:	2301      	movs	r3, #1
 8015280:	e000      	b.n	8015284 <xQueueGenericCreateStatic+0x64>
 8015282:	2300      	movs	r3, #0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d10d      	bne.n	80152a4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8015288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801528c:	b672      	cpsid	i
 801528e:	f383 8811 	msr	BASEPRI, r3
 8015292:	f3bf 8f6f 	isb	sy
 8015296:	f3bf 8f4f 	dsb	sy
 801529a:	b662      	cpsie	i
 801529c:	623b      	str	r3, [r7, #32]
}
 801529e:	bf00      	nop
 80152a0:	bf00      	nop
 80152a2:	e7fd      	b.n	80152a0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d102      	bne.n	80152b0 <xQueueGenericCreateStatic+0x90>
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d101      	bne.n	80152b4 <xQueueGenericCreateStatic+0x94>
 80152b0:	2301      	movs	r3, #1
 80152b2:	e000      	b.n	80152b6 <xQueueGenericCreateStatic+0x96>
 80152b4:	2300      	movs	r3, #0
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d10d      	bne.n	80152d6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80152ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152be:	b672      	cpsid	i
 80152c0:	f383 8811 	msr	BASEPRI, r3
 80152c4:	f3bf 8f6f 	isb	sy
 80152c8:	f3bf 8f4f 	dsb	sy
 80152cc:	b662      	cpsie	i
 80152ce:	61fb      	str	r3, [r7, #28]
}
 80152d0:	bf00      	nop
 80152d2:	bf00      	nop
 80152d4:	e7fd      	b.n	80152d2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80152d6:	2350      	movs	r3, #80	@ 0x50
 80152d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	2b50      	cmp	r3, #80	@ 0x50
 80152de:	d00d      	beq.n	80152fc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80152e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152e4:	b672      	cpsid	i
 80152e6:	f383 8811 	msr	BASEPRI, r3
 80152ea:	f3bf 8f6f 	isb	sy
 80152ee:	f3bf 8f4f 	dsb	sy
 80152f2:	b662      	cpsie	i
 80152f4:	61bb      	str	r3, [r7, #24]
}
 80152f6:	bf00      	nop
 80152f8:	bf00      	nop
 80152fa:	e7fd      	b.n	80152f8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80152fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8015302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015304:	2b00      	cmp	r3, #0
 8015306:	d00d      	beq.n	8015324 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530a:	2201      	movs	r2, #1
 801530c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015310:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8015314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015316:	9300      	str	r3, [sp, #0]
 8015318:	4613      	mov	r3, r2
 801531a:	687a      	ldr	r2, [r7, #4]
 801531c:	68b9      	ldr	r1, [r7, #8]
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	f000 f805 	bl	801532e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8015326:	4618      	mov	r0, r3
 8015328:	3730      	adds	r7, #48	@ 0x30
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}

0801532e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801532e:	b580      	push	{r7, lr}
 8015330:	b084      	sub	sp, #16
 8015332:	af00      	add	r7, sp, #0
 8015334:	60f8      	str	r0, [r7, #12]
 8015336:	60b9      	str	r1, [r7, #8]
 8015338:	607a      	str	r2, [r7, #4]
 801533a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d103      	bne.n	801534a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	69ba      	ldr	r2, [r7, #24]
 8015346:	601a      	str	r2, [r3, #0]
 8015348:	e002      	b.n	8015350 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801534a:	69bb      	ldr	r3, [r7, #24]
 801534c:	687a      	ldr	r2, [r7, #4]
 801534e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015350:	69bb      	ldr	r3, [r7, #24]
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015356:	69bb      	ldr	r3, [r7, #24]
 8015358:	68ba      	ldr	r2, [r7, #8]
 801535a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801535c:	2101      	movs	r1, #1
 801535e:	69b8      	ldr	r0, [r7, #24]
 8015360:	f7ff fef2 	bl	8015148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015364:	69bb      	ldr	r3, [r7, #24]
 8015366:	78fa      	ldrb	r2, [r7, #3]
 8015368:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801536c:	bf00      	nop
 801536e:	3710      	adds	r7, #16
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d00e      	beq.n	80153a0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2200      	movs	r2, #0
 8015386:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2200      	movs	r2, #0
 801538c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2200      	movs	r2, #0
 8015392:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015394:	2300      	movs	r3, #0
 8015396:	2200      	movs	r2, #0
 8015398:	2100      	movs	r1, #0
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f000 f85c 	bl	8015458 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80153a0:	bf00      	nop
 80153a2:	3708      	adds	r7, #8
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b088      	sub	sp, #32
 80153ac:	af02      	add	r7, sp, #8
 80153ae:	4603      	mov	r3, r0
 80153b0:	6039      	str	r1, [r7, #0]
 80153b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80153b4:	2301      	movs	r3, #1
 80153b6:	617b      	str	r3, [r7, #20]
 80153b8:	2300      	movs	r3, #0
 80153ba:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80153bc:	79fb      	ldrb	r3, [r7, #7]
 80153be:	9300      	str	r3, [sp, #0]
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	2200      	movs	r2, #0
 80153c4:	6939      	ldr	r1, [r7, #16]
 80153c6:	6978      	ldr	r0, [r7, #20]
 80153c8:	f7ff ff2a 	bl	8015220 <xQueueGenericCreateStatic>
 80153cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80153ce:	68f8      	ldr	r0, [r7, #12]
 80153d0:	f7ff ffd0 	bl	8015374 <prvInitialiseMutex>

		return xNewQueue;
 80153d4:	68fb      	ldr	r3, [r7, #12]
	}
 80153d6:	4618      	mov	r0, r3
 80153d8:	3718      	adds	r7, #24
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}

080153de <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80153de:	b580      	push	{r7, lr}
 80153e0:	b08a      	sub	sp, #40	@ 0x28
 80153e2:	af02      	add	r7, sp, #8
 80153e4:	60f8      	str	r0, [r7, #12]
 80153e6:	60b9      	str	r1, [r7, #8]
 80153e8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d10d      	bne.n	801540c <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80153f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153f4:	b672      	cpsid	i
 80153f6:	f383 8811 	msr	BASEPRI, r3
 80153fa:	f3bf 8f6f 	isb	sy
 80153fe:	f3bf 8f4f 	dsb	sy
 8015402:	b662      	cpsie	i
 8015404:	61bb      	str	r3, [r7, #24]
}
 8015406:	bf00      	nop
 8015408:	bf00      	nop
 801540a:	e7fd      	b.n	8015408 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	429a      	cmp	r2, r3
 8015412:	d90d      	bls.n	8015430 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8015414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015418:	b672      	cpsid	i
 801541a:	f383 8811 	msr	BASEPRI, r3
 801541e:	f3bf 8f6f 	isb	sy
 8015422:	f3bf 8f4f 	dsb	sy
 8015426:	b662      	cpsie	i
 8015428:	617b      	str	r3, [r7, #20]
}
 801542a:	bf00      	nop
 801542c:	bf00      	nop
 801542e:	e7fd      	b.n	801542c <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015430:	2302      	movs	r3, #2
 8015432:	9300      	str	r3, [sp, #0]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	2200      	movs	r2, #0
 8015438:	2100      	movs	r1, #0
 801543a:	68f8      	ldr	r0, [r7, #12]
 801543c:	f7ff fef0 	bl	8015220 <xQueueGenericCreateStatic>
 8015440:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015442:	69fb      	ldr	r3, [r7, #28]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d002      	beq.n	801544e <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	68ba      	ldr	r2, [r7, #8]
 801544c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801544e:	69fb      	ldr	r3, [r7, #28]
	}
 8015450:	4618      	mov	r0, r3
 8015452:	3720      	adds	r7, #32
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b08e      	sub	sp, #56	@ 0x38
 801545c:	af00      	add	r7, sp, #0
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	60b9      	str	r1, [r7, #8]
 8015462:	607a      	str	r2, [r7, #4]
 8015464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015466:	2300      	movs	r3, #0
 8015468:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015470:	2b00      	cmp	r3, #0
 8015472:	d10d      	bne.n	8015490 <xQueueGenericSend+0x38>
	__asm volatile
 8015474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015478:	b672      	cpsid	i
 801547a:	f383 8811 	msr	BASEPRI, r3
 801547e:	f3bf 8f6f 	isb	sy
 8015482:	f3bf 8f4f 	dsb	sy
 8015486:	b662      	cpsie	i
 8015488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801548a:	bf00      	nop
 801548c:	bf00      	nop
 801548e:	e7fd      	b.n	801548c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d103      	bne.n	801549e <xQueueGenericSend+0x46>
 8015496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801549a:	2b00      	cmp	r3, #0
 801549c:	d101      	bne.n	80154a2 <xQueueGenericSend+0x4a>
 801549e:	2301      	movs	r3, #1
 80154a0:	e000      	b.n	80154a4 <xQueueGenericSend+0x4c>
 80154a2:	2300      	movs	r3, #0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d10d      	bne.n	80154c4 <xQueueGenericSend+0x6c>
	__asm volatile
 80154a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154ac:	b672      	cpsid	i
 80154ae:	f383 8811 	msr	BASEPRI, r3
 80154b2:	f3bf 8f6f 	isb	sy
 80154b6:	f3bf 8f4f 	dsb	sy
 80154ba:	b662      	cpsie	i
 80154bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80154be:	bf00      	nop
 80154c0:	bf00      	nop
 80154c2:	e7fd      	b.n	80154c0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	2b02      	cmp	r3, #2
 80154c8:	d103      	bne.n	80154d2 <xQueueGenericSend+0x7a>
 80154ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80154ce:	2b01      	cmp	r3, #1
 80154d0:	d101      	bne.n	80154d6 <xQueueGenericSend+0x7e>
 80154d2:	2301      	movs	r3, #1
 80154d4:	e000      	b.n	80154d8 <xQueueGenericSend+0x80>
 80154d6:	2300      	movs	r3, #0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d10d      	bne.n	80154f8 <xQueueGenericSend+0xa0>
	__asm volatile
 80154dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154e0:	b672      	cpsid	i
 80154e2:	f383 8811 	msr	BASEPRI, r3
 80154e6:	f3bf 8f6f 	isb	sy
 80154ea:	f3bf 8f4f 	dsb	sy
 80154ee:	b662      	cpsie	i
 80154f0:	623b      	str	r3, [r7, #32]
}
 80154f2:	bf00      	nop
 80154f4:	bf00      	nop
 80154f6:	e7fd      	b.n	80154f4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80154f8:	f001 fcd6 	bl	8016ea8 <xTaskGetSchedulerState>
 80154fc:	4603      	mov	r3, r0
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d102      	bne.n	8015508 <xQueueGenericSend+0xb0>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d101      	bne.n	801550c <xQueueGenericSend+0xb4>
 8015508:	2301      	movs	r3, #1
 801550a:	e000      	b.n	801550e <xQueueGenericSend+0xb6>
 801550c:	2300      	movs	r3, #0
 801550e:	2b00      	cmp	r3, #0
 8015510:	d10d      	bne.n	801552e <xQueueGenericSend+0xd6>
	__asm volatile
 8015512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015516:	b672      	cpsid	i
 8015518:	f383 8811 	msr	BASEPRI, r3
 801551c:	f3bf 8f6f 	isb	sy
 8015520:	f3bf 8f4f 	dsb	sy
 8015524:	b662      	cpsie	i
 8015526:	61fb      	str	r3, [r7, #28]
}
 8015528:	bf00      	nop
 801552a:	bf00      	nop
 801552c:	e7fd      	b.n	801552a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801552e:	f002 fd4d 	bl	8017fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801553a:	429a      	cmp	r2, r3
 801553c:	d302      	bcc.n	8015544 <xQueueGenericSend+0xec>
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	2b02      	cmp	r3, #2
 8015542:	d129      	bne.n	8015598 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015544:	683a      	ldr	r2, [r7, #0]
 8015546:	68b9      	ldr	r1, [r7, #8]
 8015548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801554a:	f000 fbb8 	bl	8015cbe <prvCopyDataToQueue>
 801554e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015554:	2b00      	cmp	r3, #0
 8015556:	d010      	beq.n	801557a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801555a:	3324      	adds	r3, #36	@ 0x24
 801555c:	4618      	mov	r0, r3
 801555e:	f001 fa33 	bl	80169c8 <xTaskRemoveFromEventList>
 8015562:	4603      	mov	r3, r0
 8015564:	2b00      	cmp	r3, #0
 8015566:	d013      	beq.n	8015590 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015568:	4b3f      	ldr	r3, [pc, #252]	@ (8015668 <xQueueGenericSend+0x210>)
 801556a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801556e:	601a      	str	r2, [r3, #0]
 8015570:	f3bf 8f4f 	dsb	sy
 8015574:	f3bf 8f6f 	isb	sy
 8015578:	e00a      	b.n	8015590 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801557a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801557c:	2b00      	cmp	r3, #0
 801557e:	d007      	beq.n	8015590 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015580:	4b39      	ldr	r3, [pc, #228]	@ (8015668 <xQueueGenericSend+0x210>)
 8015582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015586:	601a      	str	r2, [r3, #0]
 8015588:	f3bf 8f4f 	dsb	sy
 801558c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015590:	f002 fd52 	bl	8018038 <vPortExitCritical>
				return pdPASS;
 8015594:	2301      	movs	r3, #1
 8015596:	e063      	b.n	8015660 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d103      	bne.n	80155a6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801559e:	f002 fd4b 	bl	8018038 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80155a2:	2300      	movs	r3, #0
 80155a4:	e05c      	b.n	8015660 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80155a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d106      	bne.n	80155ba <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80155ac:	f107 0314 	add.w	r3, r7, #20
 80155b0:	4618      	mov	r0, r3
 80155b2:	f001 fb01 	bl	8016bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80155b6:	2301      	movs	r3, #1
 80155b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80155ba:	f002 fd3d 	bl	8018038 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80155be:	f000 ff89 	bl	80164d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80155c2:	f002 fd03 	bl	8017fcc <vPortEnterCritical>
 80155c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80155cc:	b25b      	sxtb	r3, r3
 80155ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155d2:	d103      	bne.n	80155dc <xQueueGenericSend+0x184>
 80155d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155d6:	2200      	movs	r2, #0
 80155d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80155dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80155e2:	b25b      	sxtb	r3, r3
 80155e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155e8:	d103      	bne.n	80155f2 <xQueueGenericSend+0x19a>
 80155ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ec:	2200      	movs	r2, #0
 80155ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80155f2:	f002 fd21 	bl	8018038 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80155f6:	1d3a      	adds	r2, r7, #4
 80155f8:	f107 0314 	add.w	r3, r7, #20
 80155fc:	4611      	mov	r1, r2
 80155fe:	4618      	mov	r0, r3
 8015600:	f001 faf0 	bl	8016be4 <xTaskCheckForTimeOut>
 8015604:	4603      	mov	r3, r0
 8015606:	2b00      	cmp	r3, #0
 8015608:	d124      	bne.n	8015654 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801560a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801560c:	f000 fc4f 	bl	8015eae <prvIsQueueFull>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d018      	beq.n	8015648 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015618:	3310      	adds	r3, #16
 801561a:	687a      	ldr	r2, [r7, #4]
 801561c:	4611      	mov	r1, r2
 801561e:	4618      	mov	r0, r3
 8015620:	f001 f93a 	bl	8016898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015626:	f000 fbda 	bl	8015dde <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801562a:	f000 ff61 	bl	80164f0 <xTaskResumeAll>
 801562e:	4603      	mov	r3, r0
 8015630:	2b00      	cmp	r3, #0
 8015632:	f47f af7c 	bne.w	801552e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8015636:	4b0c      	ldr	r3, [pc, #48]	@ (8015668 <xQueueGenericSend+0x210>)
 8015638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801563c:	601a      	str	r2, [r3, #0]
 801563e:	f3bf 8f4f 	dsb	sy
 8015642:	f3bf 8f6f 	isb	sy
 8015646:	e772      	b.n	801552e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801564a:	f000 fbc8 	bl	8015dde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801564e:	f000 ff4f 	bl	80164f0 <xTaskResumeAll>
 8015652:	e76c      	b.n	801552e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015656:	f000 fbc2 	bl	8015dde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801565a:	f000 ff49 	bl	80164f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801565e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015660:	4618      	mov	r0, r3
 8015662:	3738      	adds	r7, #56	@ 0x38
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}
 8015668:	e000ed04 	.word	0xe000ed04

0801566c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b08e      	sub	sp, #56	@ 0x38
 8015670:	af00      	add	r7, sp, #0
 8015672:	60f8      	str	r0, [r7, #12]
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	607a      	str	r2, [r7, #4]
 8015678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015680:	2b00      	cmp	r3, #0
 8015682:	d10d      	bne.n	80156a0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8015684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015688:	b672      	cpsid	i
 801568a:	f383 8811 	msr	BASEPRI, r3
 801568e:	f3bf 8f6f 	isb	sy
 8015692:	f3bf 8f4f 	dsb	sy
 8015696:	b662      	cpsie	i
 8015698:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801569a:	bf00      	nop
 801569c:	bf00      	nop
 801569e:	e7fd      	b.n	801569c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d103      	bne.n	80156ae <xQueueGenericSendFromISR+0x42>
 80156a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d101      	bne.n	80156b2 <xQueueGenericSendFromISR+0x46>
 80156ae:	2301      	movs	r3, #1
 80156b0:	e000      	b.n	80156b4 <xQueueGenericSendFromISR+0x48>
 80156b2:	2300      	movs	r3, #0
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d10d      	bne.n	80156d4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80156b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156bc:	b672      	cpsid	i
 80156be:	f383 8811 	msr	BASEPRI, r3
 80156c2:	f3bf 8f6f 	isb	sy
 80156c6:	f3bf 8f4f 	dsb	sy
 80156ca:	b662      	cpsie	i
 80156cc:	623b      	str	r3, [r7, #32]
}
 80156ce:	bf00      	nop
 80156d0:	bf00      	nop
 80156d2:	e7fd      	b.n	80156d0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	2b02      	cmp	r3, #2
 80156d8:	d103      	bne.n	80156e2 <xQueueGenericSendFromISR+0x76>
 80156da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d101      	bne.n	80156e6 <xQueueGenericSendFromISR+0x7a>
 80156e2:	2301      	movs	r3, #1
 80156e4:	e000      	b.n	80156e8 <xQueueGenericSendFromISR+0x7c>
 80156e6:	2300      	movs	r3, #0
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d10d      	bne.n	8015708 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80156ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156f0:	b672      	cpsid	i
 80156f2:	f383 8811 	msr	BASEPRI, r3
 80156f6:	f3bf 8f6f 	isb	sy
 80156fa:	f3bf 8f4f 	dsb	sy
 80156fe:	b662      	cpsie	i
 8015700:	61fb      	str	r3, [r7, #28]
}
 8015702:	bf00      	nop
 8015704:	bf00      	nop
 8015706:	e7fd      	b.n	8015704 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015708:	f002 fd48 	bl	801819c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801570c:	f3ef 8211 	mrs	r2, BASEPRI
 8015710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015714:	b672      	cpsid	i
 8015716:	f383 8811 	msr	BASEPRI, r3
 801571a:	f3bf 8f6f 	isb	sy
 801571e:	f3bf 8f4f 	dsb	sy
 8015722:	b662      	cpsie	i
 8015724:	61ba      	str	r2, [r7, #24]
 8015726:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015728:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801572a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801572c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801572e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015734:	429a      	cmp	r2, r3
 8015736:	d302      	bcc.n	801573e <xQueueGenericSendFromISR+0xd2>
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	2b02      	cmp	r3, #2
 801573c:	d12c      	bne.n	8015798 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801573e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015744:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015748:	683a      	ldr	r2, [r7, #0]
 801574a:	68b9      	ldr	r1, [r7, #8]
 801574c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801574e:	f000 fab6 	bl	8015cbe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015752:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8015756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801575a:	d112      	bne.n	8015782 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015760:	2b00      	cmp	r3, #0
 8015762:	d016      	beq.n	8015792 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015766:	3324      	adds	r3, #36	@ 0x24
 8015768:	4618      	mov	r0, r3
 801576a:	f001 f92d 	bl	80169c8 <xTaskRemoveFromEventList>
 801576e:	4603      	mov	r3, r0
 8015770:	2b00      	cmp	r3, #0
 8015772:	d00e      	beq.n	8015792 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d00b      	beq.n	8015792 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2201      	movs	r2, #1
 801577e:	601a      	str	r2, [r3, #0]
 8015780:	e007      	b.n	8015792 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015782:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015786:	3301      	adds	r3, #1
 8015788:	b2db      	uxtb	r3, r3
 801578a:	b25a      	sxtb	r2, r3
 801578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801578e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015792:	2301      	movs	r3, #1
 8015794:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8015796:	e001      	b.n	801579c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015798:	2300      	movs	r3, #0
 801579a:	637b      	str	r3, [r7, #52]	@ 0x34
 801579c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801579e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80157a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80157a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3738      	adds	r7, #56	@ 0x38
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}
	...

080157b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b08c      	sub	sp, #48	@ 0x30
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80157c0:	2300      	movs	r3, #0
 80157c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80157c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d10d      	bne.n	80157ea <xQueueReceive+0x36>
	__asm volatile
 80157ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157d2:	b672      	cpsid	i
 80157d4:	f383 8811 	msr	BASEPRI, r3
 80157d8:	f3bf 8f6f 	isb	sy
 80157dc:	f3bf 8f4f 	dsb	sy
 80157e0:	b662      	cpsie	i
 80157e2:	623b      	str	r3, [r7, #32]
}
 80157e4:	bf00      	nop
 80157e6:	bf00      	nop
 80157e8:	e7fd      	b.n	80157e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d103      	bne.n	80157f8 <xQueueReceive+0x44>
 80157f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d101      	bne.n	80157fc <xQueueReceive+0x48>
 80157f8:	2301      	movs	r3, #1
 80157fa:	e000      	b.n	80157fe <xQueueReceive+0x4a>
 80157fc:	2300      	movs	r3, #0
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d10d      	bne.n	801581e <xQueueReceive+0x6a>
	__asm volatile
 8015802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015806:	b672      	cpsid	i
 8015808:	f383 8811 	msr	BASEPRI, r3
 801580c:	f3bf 8f6f 	isb	sy
 8015810:	f3bf 8f4f 	dsb	sy
 8015814:	b662      	cpsie	i
 8015816:	61fb      	str	r3, [r7, #28]
}
 8015818:	bf00      	nop
 801581a:	bf00      	nop
 801581c:	e7fd      	b.n	801581a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801581e:	f001 fb43 	bl	8016ea8 <xTaskGetSchedulerState>
 8015822:	4603      	mov	r3, r0
 8015824:	2b00      	cmp	r3, #0
 8015826:	d102      	bne.n	801582e <xQueueReceive+0x7a>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d101      	bne.n	8015832 <xQueueReceive+0x7e>
 801582e:	2301      	movs	r3, #1
 8015830:	e000      	b.n	8015834 <xQueueReceive+0x80>
 8015832:	2300      	movs	r3, #0
 8015834:	2b00      	cmp	r3, #0
 8015836:	d10d      	bne.n	8015854 <xQueueReceive+0xa0>
	__asm volatile
 8015838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801583c:	b672      	cpsid	i
 801583e:	f383 8811 	msr	BASEPRI, r3
 8015842:	f3bf 8f6f 	isb	sy
 8015846:	f3bf 8f4f 	dsb	sy
 801584a:	b662      	cpsie	i
 801584c:	61bb      	str	r3, [r7, #24]
}
 801584e:	bf00      	nop
 8015850:	bf00      	nop
 8015852:	e7fd      	b.n	8015850 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015854:	f002 fbba 	bl	8017fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801585a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801585c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015860:	2b00      	cmp	r3, #0
 8015862:	d01f      	beq.n	80158a4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015864:	68b9      	ldr	r1, [r7, #8]
 8015866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015868:	f000 fa93 	bl	8015d92 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801586e:	1e5a      	subs	r2, r3, #1
 8015870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015872:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015876:	691b      	ldr	r3, [r3, #16]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d00f      	beq.n	801589c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801587e:	3310      	adds	r3, #16
 8015880:	4618      	mov	r0, r3
 8015882:	f001 f8a1 	bl	80169c8 <xTaskRemoveFromEventList>
 8015886:	4603      	mov	r3, r0
 8015888:	2b00      	cmp	r3, #0
 801588a:	d007      	beq.n	801589c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801588c:	4b3c      	ldr	r3, [pc, #240]	@ (8015980 <xQueueReceive+0x1cc>)
 801588e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015892:	601a      	str	r2, [r3, #0]
 8015894:	f3bf 8f4f 	dsb	sy
 8015898:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801589c:	f002 fbcc 	bl	8018038 <vPortExitCritical>
				return pdPASS;
 80158a0:	2301      	movs	r3, #1
 80158a2:	e069      	b.n	8015978 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d103      	bne.n	80158b2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80158aa:	f002 fbc5 	bl	8018038 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80158ae:	2300      	movs	r3, #0
 80158b0:	e062      	b.n	8015978 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80158b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d106      	bne.n	80158c6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80158b8:	f107 0310 	add.w	r3, r7, #16
 80158bc:	4618      	mov	r0, r3
 80158be:	f001 f97b 	bl	8016bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80158c2:	2301      	movs	r3, #1
 80158c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80158c6:	f002 fbb7 	bl	8018038 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80158ca:	f000 fe03 	bl	80164d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80158ce:	f002 fb7d 	bl	8017fcc <vPortEnterCritical>
 80158d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80158d8:	b25b      	sxtb	r3, r3
 80158da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158de:	d103      	bne.n	80158e8 <xQueueReceive+0x134>
 80158e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158e2:	2200      	movs	r2, #0
 80158e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80158e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80158ee:	b25b      	sxtb	r3, r3
 80158f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158f4:	d103      	bne.n	80158fe <xQueueReceive+0x14a>
 80158f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158f8:	2200      	movs	r2, #0
 80158fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80158fe:	f002 fb9b 	bl	8018038 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015902:	1d3a      	adds	r2, r7, #4
 8015904:	f107 0310 	add.w	r3, r7, #16
 8015908:	4611      	mov	r1, r2
 801590a:	4618      	mov	r0, r3
 801590c:	f001 f96a 	bl	8016be4 <xTaskCheckForTimeOut>
 8015910:	4603      	mov	r3, r0
 8015912:	2b00      	cmp	r3, #0
 8015914:	d123      	bne.n	801595e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015918:	f000 fab3 	bl	8015e82 <prvIsQueueEmpty>
 801591c:	4603      	mov	r3, r0
 801591e:	2b00      	cmp	r3, #0
 8015920:	d017      	beq.n	8015952 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015924:	3324      	adds	r3, #36	@ 0x24
 8015926:	687a      	ldr	r2, [r7, #4]
 8015928:	4611      	mov	r1, r2
 801592a:	4618      	mov	r0, r3
 801592c:	f000 ffb4 	bl	8016898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015932:	f000 fa54 	bl	8015dde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015936:	f000 fddb 	bl	80164f0 <xTaskResumeAll>
 801593a:	4603      	mov	r3, r0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d189      	bne.n	8015854 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8015940:	4b0f      	ldr	r3, [pc, #60]	@ (8015980 <xQueueReceive+0x1cc>)
 8015942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015946:	601a      	str	r2, [r3, #0]
 8015948:	f3bf 8f4f 	dsb	sy
 801594c:	f3bf 8f6f 	isb	sy
 8015950:	e780      	b.n	8015854 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015954:	f000 fa43 	bl	8015dde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015958:	f000 fdca 	bl	80164f0 <xTaskResumeAll>
 801595c:	e77a      	b.n	8015854 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801595e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015960:	f000 fa3d 	bl	8015dde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015964:	f000 fdc4 	bl	80164f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801596a:	f000 fa8a 	bl	8015e82 <prvIsQueueEmpty>
 801596e:	4603      	mov	r3, r0
 8015970:	2b00      	cmp	r3, #0
 8015972:	f43f af6f 	beq.w	8015854 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015976:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015978:	4618      	mov	r0, r3
 801597a:	3730      	adds	r7, #48	@ 0x30
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}
 8015980:	e000ed04 	.word	0xe000ed04

08015984 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b08e      	sub	sp, #56	@ 0x38
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801598e:	2300      	movs	r3, #0
 8015990:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015996:	2300      	movs	r3, #0
 8015998:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801599c:	2b00      	cmp	r3, #0
 801599e:	d10d      	bne.n	80159bc <xQueueSemaphoreTake+0x38>
	__asm volatile
 80159a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159a4:	b672      	cpsid	i
 80159a6:	f383 8811 	msr	BASEPRI, r3
 80159aa:	f3bf 8f6f 	isb	sy
 80159ae:	f3bf 8f4f 	dsb	sy
 80159b2:	b662      	cpsie	i
 80159b4:	623b      	str	r3, [r7, #32]
}
 80159b6:	bf00      	nop
 80159b8:	bf00      	nop
 80159ba:	e7fd      	b.n	80159b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80159bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d00d      	beq.n	80159e0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80159c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159c8:	b672      	cpsid	i
 80159ca:	f383 8811 	msr	BASEPRI, r3
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	f3bf 8f4f 	dsb	sy
 80159d6:	b662      	cpsie	i
 80159d8:	61fb      	str	r3, [r7, #28]
}
 80159da:	bf00      	nop
 80159dc:	bf00      	nop
 80159de:	e7fd      	b.n	80159dc <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80159e0:	f001 fa62 	bl	8016ea8 <xTaskGetSchedulerState>
 80159e4:	4603      	mov	r3, r0
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d102      	bne.n	80159f0 <xQueueSemaphoreTake+0x6c>
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <xQueueSemaphoreTake+0x70>
 80159f0:	2301      	movs	r3, #1
 80159f2:	e000      	b.n	80159f6 <xQueueSemaphoreTake+0x72>
 80159f4:	2300      	movs	r3, #0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d10d      	bne.n	8015a16 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80159fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159fe:	b672      	cpsid	i
 8015a00:	f383 8811 	msr	BASEPRI, r3
 8015a04:	f3bf 8f6f 	isb	sy
 8015a08:	f3bf 8f4f 	dsb	sy
 8015a0c:	b662      	cpsie	i
 8015a0e:	61bb      	str	r3, [r7, #24]
}
 8015a10:	bf00      	nop
 8015a12:	bf00      	nop
 8015a14:	e7fd      	b.n	8015a12 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015a16:	f002 fad9 	bl	8017fcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a1e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d024      	beq.n	8015a70 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a28:	1e5a      	subs	r2, r3, #1
 8015a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a2c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d104      	bne.n	8015a40 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015a36:	f001 fbd1 	bl	80171dc <pvTaskIncrementMutexHeldCount>
 8015a3a:	4602      	mov	r2, r0
 8015a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a3e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a42:	691b      	ldr	r3, [r3, #16]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d00f      	beq.n	8015a68 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a4a:	3310      	adds	r3, #16
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f000 ffbb 	bl	80169c8 <xTaskRemoveFromEventList>
 8015a52:	4603      	mov	r3, r0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d007      	beq.n	8015a68 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015a58:	4b55      	ldr	r3, [pc, #340]	@ (8015bb0 <xQueueSemaphoreTake+0x22c>)
 8015a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a5e:	601a      	str	r2, [r3, #0]
 8015a60:	f3bf 8f4f 	dsb	sy
 8015a64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015a68:	f002 fae6 	bl	8018038 <vPortExitCritical>
				return pdPASS;
 8015a6c:	2301      	movs	r3, #1
 8015a6e:	e09a      	b.n	8015ba6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d114      	bne.n	8015aa0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d00d      	beq.n	8015a98 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8015a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a80:	b672      	cpsid	i
 8015a82:	f383 8811 	msr	BASEPRI, r3
 8015a86:	f3bf 8f6f 	isb	sy
 8015a8a:	f3bf 8f4f 	dsb	sy
 8015a8e:	b662      	cpsie	i
 8015a90:	617b      	str	r3, [r7, #20]
}
 8015a92:	bf00      	nop
 8015a94:	bf00      	nop
 8015a96:	e7fd      	b.n	8015a94 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015a98:	f002 face 	bl	8018038 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	e082      	b.n	8015ba6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d106      	bne.n	8015ab4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015aa6:	f107 030c 	add.w	r3, r7, #12
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f001 f884 	bl	8016bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015ab4:	f002 fac0 	bl	8018038 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015ab8:	f000 fd0c 	bl	80164d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015abc:	f002 fa86 	bl	8017fcc <vPortEnterCritical>
 8015ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015ac6:	b25b      	sxtb	r3, r3
 8015ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015acc:	d103      	bne.n	8015ad6 <xQueueSemaphoreTake+0x152>
 8015ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015adc:	b25b      	sxtb	r3, r3
 8015ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ae2:	d103      	bne.n	8015aec <xQueueSemaphoreTake+0x168>
 8015ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015aec:	f002 faa4 	bl	8018038 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015af0:	463a      	mov	r2, r7
 8015af2:	f107 030c 	add.w	r3, r7, #12
 8015af6:	4611      	mov	r1, r2
 8015af8:	4618      	mov	r0, r3
 8015afa:	f001 f873 	bl	8016be4 <xTaskCheckForTimeOut>
 8015afe:	4603      	mov	r3, r0
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d132      	bne.n	8015b6a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b06:	f000 f9bc 	bl	8015e82 <prvIsQueueEmpty>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d026      	beq.n	8015b5e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d109      	bne.n	8015b2c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8015b18:	f002 fa58 	bl	8017fcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b1e:	689b      	ldr	r3, [r3, #8]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f001 f9df 	bl	8016ee4 <xTaskPriorityInherit>
 8015b26:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8015b28:	f002 fa86 	bl	8018038 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b2e:	3324      	adds	r3, #36	@ 0x24
 8015b30:	683a      	ldr	r2, [r7, #0]
 8015b32:	4611      	mov	r1, r2
 8015b34:	4618      	mov	r0, r3
 8015b36:	f000 feaf 	bl	8016898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015b3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b3c:	f000 f94f 	bl	8015dde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015b40:	f000 fcd6 	bl	80164f0 <xTaskResumeAll>
 8015b44:	4603      	mov	r3, r0
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	f47f af65 	bne.w	8015a16 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8015b4c:	4b18      	ldr	r3, [pc, #96]	@ (8015bb0 <xQueueSemaphoreTake+0x22c>)
 8015b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b52:	601a      	str	r2, [r3, #0]
 8015b54:	f3bf 8f4f 	dsb	sy
 8015b58:	f3bf 8f6f 	isb	sy
 8015b5c:	e75b      	b.n	8015a16 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015b5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b60:	f000 f93d 	bl	8015dde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b64:	f000 fcc4 	bl	80164f0 <xTaskResumeAll>
 8015b68:	e755      	b.n	8015a16 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015b6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b6c:	f000 f937 	bl	8015dde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015b70:	f000 fcbe 	bl	80164f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b76:	f000 f984 	bl	8015e82 <prvIsQueueEmpty>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	f43f af4a 	beq.w	8015a16 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d00d      	beq.n	8015ba4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8015b88:	f002 fa20 	bl	8017fcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015b8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b8e:	f000 f87e 	bl	8015c8e <prvGetDisinheritPriorityAfterTimeout>
 8015b92:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b96:	689b      	ldr	r3, [r3, #8]
 8015b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f001 fa7e 	bl	801709c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015ba0:	f002 fa4a 	bl	8018038 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015ba4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3738      	adds	r7, #56	@ 0x38
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	e000ed04 	.word	0xe000ed04

08015bb4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b084      	sub	sp, #16
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d10d      	bne.n	8015bde <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8015bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bc6:	b672      	cpsid	i
 8015bc8:	f383 8811 	msr	BASEPRI, r3
 8015bcc:	f3bf 8f6f 	isb	sy
 8015bd0:	f3bf 8f4f 	dsb	sy
 8015bd4:	b662      	cpsie	i
 8015bd6:	60bb      	str	r3, [r7, #8]
}
 8015bd8:	bf00      	nop
 8015bda:	bf00      	nop
 8015bdc:	e7fd      	b.n	8015bda <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015bde:	f002 f9f5 	bl	8017fcc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015be6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015be8:	f002 fa26 	bl	8018038 <vPortExitCritical>

	return uxReturn;
 8015bec:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3710      	adds	r7, #16
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}

08015bf6 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8015bf6:	b580      	push	{r7, lr}
 8015bf8:	b086      	sub	sp, #24
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015c02:	697b      	ldr	r3, [r7, #20]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d10d      	bne.n	8015c24 <uxQueueSpacesAvailable+0x2e>
	__asm volatile
 8015c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c0c:	b672      	cpsid	i
 8015c0e:	f383 8811 	msr	BASEPRI, r3
 8015c12:	f3bf 8f6f 	isb	sy
 8015c16:	f3bf 8f4f 	dsb	sy
 8015c1a:	b662      	cpsie	i
 8015c1c:	60fb      	str	r3, [r7, #12]
}
 8015c1e:	bf00      	nop
 8015c20:	bf00      	nop
 8015c22:	e7fd      	b.n	8015c20 <uxQueueSpacesAvailable+0x2a>

	taskENTER_CRITICAL();
 8015c24:	f002 f9d2 	bl	8017fcc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015c2c:	697b      	ldr	r3, [r7, #20]
 8015c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c30:	1ad3      	subs	r3, r2, r3
 8015c32:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8015c34:	f002 fa00 	bl	8018038 <vPortExitCritical>

	return uxReturn;
 8015c38:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3718      	adds	r7, #24
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}

08015c42 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015c42:	b580      	push	{r7, lr}
 8015c44:	b084      	sub	sp, #16
 8015c46:	af00      	add	r7, sp, #0
 8015c48:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d10d      	bne.n	8015c70 <vQueueDelete+0x2e>
	__asm volatile
 8015c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c58:	b672      	cpsid	i
 8015c5a:	f383 8811 	msr	BASEPRI, r3
 8015c5e:	f3bf 8f6f 	isb	sy
 8015c62:	f3bf 8f4f 	dsb	sy
 8015c66:	b662      	cpsie	i
 8015c68:	60bb      	str	r3, [r7, #8]
}
 8015c6a:	bf00      	nop
 8015c6c:	bf00      	nop
 8015c6e:	e7fd      	b.n	8015c6c <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015c70:	68f8      	ldr	r0, [r7, #12]
 8015c72:	f000 f95f 	bl	8015f34 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d102      	bne.n	8015c86 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8015c80:	68f8      	ldr	r0, [r7, #12]
 8015c82:	f002 fb9f 	bl	80183c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015c86:	bf00      	nop
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}

08015c8e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015c8e:	b480      	push	{r7}
 8015c90:	b085      	sub	sp, #20
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d006      	beq.n	8015cac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8015ca8:	60fb      	str	r3, [r7, #12]
 8015caa:	e001      	b.n	8015cb0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015cac:	2300      	movs	r3, #0
 8015cae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
	}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3714      	adds	r7, #20
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbc:	4770      	bx	lr

08015cbe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015cbe:	b580      	push	{r7, lr}
 8015cc0:	b086      	sub	sp, #24
 8015cc2:	af00      	add	r7, sp, #0
 8015cc4:	60f8      	str	r0, [r7, #12]
 8015cc6:	60b9      	str	r1, [r7, #8]
 8015cc8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cd2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d10d      	bne.n	8015cf8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d14d      	bne.n	8015d80 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	689b      	ldr	r3, [r3, #8]
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f001 f963 	bl	8016fb4 <xTaskPriorityDisinherit>
 8015cee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	609a      	str	r2, [r3, #8]
 8015cf6:	e043      	b.n	8015d80 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d119      	bne.n	8015d32 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	6858      	ldr	r0, [r3, #4]
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d06:	461a      	mov	r2, r3
 8015d08:	68b9      	ldr	r1, [r7, #8]
 8015d0a:	f003 f806 	bl	8018d1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	685a      	ldr	r2, [r3, #4]
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d16:	441a      	add	r2, r3
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	685a      	ldr	r2, [r3, #4]
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	689b      	ldr	r3, [r3, #8]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d32b      	bcc.n	8015d80 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	605a      	str	r2, [r3, #4]
 8015d30:	e026      	b.n	8015d80 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	68d8      	ldr	r0, [r3, #12]
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d3a:	461a      	mov	r2, r3
 8015d3c:	68b9      	ldr	r1, [r7, #8]
 8015d3e:	f002 ffec 	bl	8018d1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	68da      	ldr	r2, [r3, #12]
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d4a:	425b      	negs	r3, r3
 8015d4c:	441a      	add	r2, r3
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	68da      	ldr	r2, [r3, #12]
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d207      	bcs.n	8015d6e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	689a      	ldr	r2, [r3, #8]
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d66:	425b      	negs	r3, r3
 8015d68:	441a      	add	r2, r3
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2b02      	cmp	r3, #2
 8015d72:	d105      	bne.n	8015d80 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d002      	beq.n	8015d80 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	3b01      	subs	r3, #1
 8015d7e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	1c5a      	adds	r2, r3, #1
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015d88:	697b      	ldr	r3, [r7, #20]
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3718      	adds	r7, #24
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}

08015d92 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015d92:	b580      	push	{r7, lr}
 8015d94:	b082      	sub	sp, #8
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
 8015d9a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d018      	beq.n	8015dd6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	68da      	ldr	r2, [r3, #12]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015dac:	441a      	add	r2, r3
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	68da      	ldr	r2, [r3, #12]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	689b      	ldr	r3, [r3, #8]
 8015dba:	429a      	cmp	r2, r3
 8015dbc:	d303      	bcc.n	8015dc6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681a      	ldr	r2, [r3, #0]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	68d9      	ldr	r1, [r3, #12]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015dce:	461a      	mov	r2, r3
 8015dd0:	6838      	ldr	r0, [r7, #0]
 8015dd2:	f002 ffa2 	bl	8018d1a <memcpy>
	}
}
 8015dd6:	bf00      	nop
 8015dd8:	3708      	adds	r7, #8
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}

08015dde <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015dde:	b580      	push	{r7, lr}
 8015de0:	b084      	sub	sp, #16
 8015de2:	af00      	add	r7, sp, #0
 8015de4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015de6:	f002 f8f1 	bl	8017fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015df0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015df2:	e011      	b.n	8015e18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d012      	beq.n	8015e22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	3324      	adds	r3, #36	@ 0x24
 8015e00:	4618      	mov	r0, r3
 8015e02:	f000 fde1 	bl	80169c8 <xTaskRemoveFromEventList>
 8015e06:	4603      	mov	r3, r0
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d001      	beq.n	8015e10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015e0c:	f000 ff52 	bl	8016cb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015e10:	7bfb      	ldrb	r3, [r7, #15]
 8015e12:	3b01      	subs	r3, #1
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	dce9      	bgt.n	8015df4 <prvUnlockQueue+0x16>
 8015e20:	e000      	b.n	8015e24 <prvUnlockQueue+0x46>
					break;
 8015e22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	22ff      	movs	r2, #255	@ 0xff
 8015e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015e2c:	f002 f904 	bl	8018038 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015e30:	f002 f8cc 	bl	8017fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015e3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015e3c:	e011      	b.n	8015e62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	691b      	ldr	r3, [r3, #16]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d012      	beq.n	8015e6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	3310      	adds	r3, #16
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f000 fdbc 	bl	80169c8 <xTaskRemoveFromEventList>
 8015e50:	4603      	mov	r3, r0
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d001      	beq.n	8015e5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015e56:	f000 ff2d 	bl	8016cb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015e5a:	7bbb      	ldrb	r3, [r7, #14]
 8015e5c:	3b01      	subs	r3, #1
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	dce9      	bgt.n	8015e3e <prvUnlockQueue+0x60>
 8015e6a:	e000      	b.n	8015e6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015e6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	22ff      	movs	r2, #255	@ 0xff
 8015e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015e76:	f002 f8df 	bl	8018038 <vPortExitCritical>
}
 8015e7a:	bf00      	nop
 8015e7c:	3710      	adds	r7, #16
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}

08015e82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015e82:	b580      	push	{r7, lr}
 8015e84:	b084      	sub	sp, #16
 8015e86:	af00      	add	r7, sp, #0
 8015e88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015e8a:	f002 f89f 	bl	8017fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d102      	bne.n	8015e9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015e96:	2301      	movs	r3, #1
 8015e98:	60fb      	str	r3, [r7, #12]
 8015e9a:	e001      	b.n	8015ea0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015ea0:	f002 f8ca 	bl	8018038 <vPortExitCritical>

	return xReturn;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
}
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	3710      	adds	r7, #16
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}

08015eae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015eae:	b580      	push	{r7, lr}
 8015eb0:	b084      	sub	sp, #16
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015eb6:	f002 f889 	bl	8017fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d102      	bne.n	8015ecc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	60fb      	str	r3, [r7, #12]
 8015eca:	e001      	b.n	8015ed0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015ed0:	f002 f8b2 	bl	8018038 <vPortExitCritical>

	return xReturn;
 8015ed4:	68fb      	ldr	r3, [r7, #12]
}
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	3710      	adds	r7, #16
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}
	...

08015ee0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b085      	sub	sp, #20
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015eea:	2300      	movs	r3, #0
 8015eec:	60fb      	str	r3, [r7, #12]
 8015eee:	e014      	b.n	8015f1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8015f30 <vQueueAddToRegistry+0x50>)
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10b      	bne.n	8015f14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015efc:	490c      	ldr	r1, [pc, #48]	@ (8015f30 <vQueueAddToRegistry+0x50>)
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	683a      	ldr	r2, [r7, #0]
 8015f02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015f06:	4a0a      	ldr	r2, [pc, #40]	@ (8015f30 <vQueueAddToRegistry+0x50>)
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	00db      	lsls	r3, r3, #3
 8015f0c:	4413      	add	r3, r2
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015f12:	e006      	b.n	8015f22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	3301      	adds	r3, #1
 8015f18:	60fb      	str	r3, [r7, #12]
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	2b07      	cmp	r3, #7
 8015f1e:	d9e7      	bls.n	8015ef0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015f20:	bf00      	nop
 8015f22:	bf00      	nop
 8015f24:	3714      	adds	r7, #20
 8015f26:	46bd      	mov	sp, r7
 8015f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2c:	4770      	bx	lr
 8015f2e:	bf00      	nop
 8015f30:	20005428 	.word	0x20005428

08015f34 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015f34:	b480      	push	{r7}
 8015f36:	b085      	sub	sp, #20
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	60fb      	str	r3, [r7, #12]
 8015f40:	e016      	b.n	8015f70 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015f42:	4a10      	ldr	r2, [pc, #64]	@ (8015f84 <vQueueUnregisterQueue+0x50>)
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	00db      	lsls	r3, r3, #3
 8015f48:	4413      	add	r3, r2
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	687a      	ldr	r2, [r7, #4]
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	d10b      	bne.n	8015f6a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015f52:	4a0c      	ldr	r2, [pc, #48]	@ (8015f84 <vQueueUnregisterQueue+0x50>)
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2100      	movs	r1, #0
 8015f58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015f5c:	4a09      	ldr	r2, [pc, #36]	@ (8015f84 <vQueueUnregisterQueue+0x50>)
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	00db      	lsls	r3, r3, #3
 8015f62:	4413      	add	r3, r2
 8015f64:	2200      	movs	r2, #0
 8015f66:	605a      	str	r2, [r3, #4]
				break;
 8015f68:	e006      	b.n	8015f78 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	3301      	adds	r3, #1
 8015f6e:	60fb      	str	r3, [r7, #12]
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	2b07      	cmp	r3, #7
 8015f74:	d9e5      	bls.n	8015f42 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015f76:	bf00      	nop
 8015f78:	bf00      	nop
 8015f7a:	3714      	adds	r7, #20
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr
 8015f84:	20005428 	.word	0x20005428

08015f88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b086      	sub	sp, #24
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	60f8      	str	r0, [r7, #12]
 8015f90:	60b9      	str	r1, [r7, #8]
 8015f92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015f98:	f002 f818 	bl	8017fcc <vPortEnterCritical>
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015fa2:	b25b      	sxtb	r3, r3
 8015fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fa8:	d103      	bne.n	8015fb2 <vQueueWaitForMessageRestricted+0x2a>
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	2200      	movs	r2, #0
 8015fae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015fb8:	b25b      	sxtb	r3, r3
 8015fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fbe:	d103      	bne.n	8015fc8 <vQueueWaitForMessageRestricted+0x40>
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015fc8:	f002 f836 	bl	8018038 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d106      	bne.n	8015fe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015fd4:	697b      	ldr	r3, [r7, #20]
 8015fd6:	3324      	adds	r3, #36	@ 0x24
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	68b9      	ldr	r1, [r7, #8]
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f000 fcc5 	bl	801696c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015fe2:	6978      	ldr	r0, [r7, #20]
 8015fe4:	f7ff fefb 	bl	8015dde <prvUnlockQueue>
	}
 8015fe8:	bf00      	nop
 8015fea:	3718      	adds	r7, #24
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}

08015ff0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b08e      	sub	sp, #56	@ 0x38
 8015ff4:	af04      	add	r7, sp, #16
 8015ff6:	60f8      	str	r0, [r7, #12]
 8015ff8:	60b9      	str	r1, [r7, #8]
 8015ffa:	607a      	str	r2, [r7, #4]
 8015ffc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016000:	2b00      	cmp	r3, #0
 8016002:	d10d      	bne.n	8016020 <xTaskCreateStatic+0x30>
	__asm volatile
 8016004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016008:	b672      	cpsid	i
 801600a:	f383 8811 	msr	BASEPRI, r3
 801600e:	f3bf 8f6f 	isb	sy
 8016012:	f3bf 8f4f 	dsb	sy
 8016016:	b662      	cpsie	i
 8016018:	623b      	str	r3, [r7, #32]
}
 801601a:	bf00      	nop
 801601c:	bf00      	nop
 801601e:	e7fd      	b.n	801601c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8016020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016022:	2b00      	cmp	r3, #0
 8016024:	d10d      	bne.n	8016042 <xTaskCreateStatic+0x52>
	__asm volatile
 8016026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801602a:	b672      	cpsid	i
 801602c:	f383 8811 	msr	BASEPRI, r3
 8016030:	f3bf 8f6f 	isb	sy
 8016034:	f3bf 8f4f 	dsb	sy
 8016038:	b662      	cpsie	i
 801603a:	61fb      	str	r3, [r7, #28]
}
 801603c:	bf00      	nop
 801603e:	bf00      	nop
 8016040:	e7fd      	b.n	801603e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016042:	23a8      	movs	r3, #168	@ 0xa8
 8016044:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	2ba8      	cmp	r3, #168	@ 0xa8
 801604a:	d00d      	beq.n	8016068 <xTaskCreateStatic+0x78>
	__asm volatile
 801604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016050:	b672      	cpsid	i
 8016052:	f383 8811 	msr	BASEPRI, r3
 8016056:	f3bf 8f6f 	isb	sy
 801605a:	f3bf 8f4f 	dsb	sy
 801605e:	b662      	cpsie	i
 8016060:	61bb      	str	r3, [r7, #24]
}
 8016062:	bf00      	nop
 8016064:	bf00      	nop
 8016066:	e7fd      	b.n	8016064 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016068:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801606a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801606c:	2b00      	cmp	r3, #0
 801606e:	d01e      	beq.n	80160ae <xTaskCreateStatic+0xbe>
 8016070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016072:	2b00      	cmp	r3, #0
 8016074:	d01b      	beq.n	80160ae <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016078:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801607c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801607e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016082:	2202      	movs	r2, #2
 8016084:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016088:	2300      	movs	r3, #0
 801608a:	9303      	str	r3, [sp, #12]
 801608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801608e:	9302      	str	r3, [sp, #8]
 8016090:	f107 0314 	add.w	r3, r7, #20
 8016094:	9301      	str	r3, [sp, #4]
 8016096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016098:	9300      	str	r3, [sp, #0]
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	687a      	ldr	r2, [r7, #4]
 801609e:	68b9      	ldr	r1, [r7, #8]
 80160a0:	68f8      	ldr	r0, [r7, #12]
 80160a2:	f000 f851 	bl	8016148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80160a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80160a8:	f000 f8f8 	bl	801629c <prvAddNewTaskToReadyList>
 80160ac:	e001      	b.n	80160b2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80160ae:	2300      	movs	r3, #0
 80160b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80160b2:	697b      	ldr	r3, [r7, #20]
	}
 80160b4:	4618      	mov	r0, r3
 80160b6:	3728      	adds	r7, #40	@ 0x28
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}

080160bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b08c      	sub	sp, #48	@ 0x30
 80160c0:	af04      	add	r7, sp, #16
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	603b      	str	r3, [r7, #0]
 80160c8:	4613      	mov	r3, r2
 80160ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80160cc:	88fb      	ldrh	r3, [r7, #6]
 80160ce:	009b      	lsls	r3, r3, #2
 80160d0:	4618      	mov	r0, r3
 80160d2:	f002 f8a9 	bl	8018228 <pvPortMalloc>
 80160d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80160d8:	697b      	ldr	r3, [r7, #20]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d00e      	beq.n	80160fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80160de:	20a8      	movs	r0, #168	@ 0xa8
 80160e0:	f002 f8a2 	bl	8018228 <pvPortMalloc>
 80160e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80160e6:	69fb      	ldr	r3, [r7, #28]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d003      	beq.n	80160f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80160ec:	69fb      	ldr	r3, [r7, #28]
 80160ee:	697a      	ldr	r2, [r7, #20]
 80160f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80160f2:	e005      	b.n	8016100 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80160f4:	6978      	ldr	r0, [r7, #20]
 80160f6:	f002 f965 	bl	80183c4 <vPortFree>
 80160fa:	e001      	b.n	8016100 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80160fc:	2300      	movs	r3, #0
 80160fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016100:	69fb      	ldr	r3, [r7, #28]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d017      	beq.n	8016136 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016106:	69fb      	ldr	r3, [r7, #28]
 8016108:	2200      	movs	r2, #0
 801610a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801610e:	88fa      	ldrh	r2, [r7, #6]
 8016110:	2300      	movs	r3, #0
 8016112:	9303      	str	r3, [sp, #12]
 8016114:	69fb      	ldr	r3, [r7, #28]
 8016116:	9302      	str	r3, [sp, #8]
 8016118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801611a:	9301      	str	r3, [sp, #4]
 801611c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801611e:	9300      	str	r3, [sp, #0]
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	68b9      	ldr	r1, [r7, #8]
 8016124:	68f8      	ldr	r0, [r7, #12]
 8016126:	f000 f80f 	bl	8016148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801612a:	69f8      	ldr	r0, [r7, #28]
 801612c:	f000 f8b6 	bl	801629c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016130:	2301      	movs	r3, #1
 8016132:	61bb      	str	r3, [r7, #24]
 8016134:	e002      	b.n	801613c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016136:	f04f 33ff 	mov.w	r3, #4294967295
 801613a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801613c:	69bb      	ldr	r3, [r7, #24]
	}
 801613e:	4618      	mov	r0, r3
 8016140:	3720      	adds	r7, #32
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
	...

08016148 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b088      	sub	sp, #32
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	60b9      	str	r1, [r7, #8]
 8016152:	607a      	str	r2, [r7, #4]
 8016154:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016158:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	009b      	lsls	r3, r3, #2
 801615e:	461a      	mov	r2, r3
 8016160:	21a5      	movs	r1, #165	@ 0xa5
 8016162:	f002 fcff 	bl	8018b64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801616a:	6879      	ldr	r1, [r7, #4]
 801616c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016170:	440b      	add	r3, r1
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	4413      	add	r3, r2
 8016176:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016178:	69bb      	ldr	r3, [r7, #24]
 801617a:	f023 0307 	bic.w	r3, r3, #7
 801617e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016180:	69bb      	ldr	r3, [r7, #24]
 8016182:	f003 0307 	and.w	r3, r3, #7
 8016186:	2b00      	cmp	r3, #0
 8016188:	d00d      	beq.n	80161a6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 801618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801618e:	b672      	cpsid	i
 8016190:	f383 8811 	msr	BASEPRI, r3
 8016194:	f3bf 8f6f 	isb	sy
 8016198:	f3bf 8f4f 	dsb	sy
 801619c:	b662      	cpsie	i
 801619e:	617b      	str	r3, [r7, #20]
}
 80161a0:	bf00      	nop
 80161a2:	bf00      	nop
 80161a4:	e7fd      	b.n	80161a2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80161a6:	68bb      	ldr	r3, [r7, #8]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d01f      	beq.n	80161ec <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80161ac:	2300      	movs	r3, #0
 80161ae:	61fb      	str	r3, [r7, #28]
 80161b0:	e012      	b.n	80161d8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80161b2:	68ba      	ldr	r2, [r7, #8]
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	4413      	add	r3, r2
 80161b8:	7819      	ldrb	r1, [r3, #0]
 80161ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161bc:	69fb      	ldr	r3, [r7, #28]
 80161be:	4413      	add	r3, r2
 80161c0:	3334      	adds	r3, #52	@ 0x34
 80161c2:	460a      	mov	r2, r1
 80161c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80161c6:	68ba      	ldr	r2, [r7, #8]
 80161c8:	69fb      	ldr	r3, [r7, #28]
 80161ca:	4413      	add	r3, r2
 80161cc:	781b      	ldrb	r3, [r3, #0]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d006      	beq.n	80161e0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80161d2:	69fb      	ldr	r3, [r7, #28]
 80161d4:	3301      	adds	r3, #1
 80161d6:	61fb      	str	r3, [r7, #28]
 80161d8:	69fb      	ldr	r3, [r7, #28]
 80161da:	2b0f      	cmp	r3, #15
 80161dc:	d9e9      	bls.n	80161b2 <prvInitialiseNewTask+0x6a>
 80161de:	e000      	b.n	80161e2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80161e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80161e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161e4:	2200      	movs	r2, #0
 80161e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80161ea:	e003      	b.n	80161f4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80161ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ee:	2200      	movs	r2, #0
 80161f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80161f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161f6:	2b37      	cmp	r3, #55	@ 0x37
 80161f8:	d901      	bls.n	80161fe <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80161fa:	2337      	movs	r3, #55	@ 0x37
 80161fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80161fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016202:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016208:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801620c:	2200      	movs	r2, #0
 801620e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016212:	3304      	adds	r3, #4
 8016214:	4618      	mov	r0, r3
 8016216:	f7fe ff02 	bl	801501e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801621c:	3318      	adds	r3, #24
 801621e:	4618      	mov	r0, r3
 8016220:	f7fe fefd 	bl	801501e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016228:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801622c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016232:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016238:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801623c:	2200      	movs	r2, #0
 801623e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016244:	2200      	movs	r2, #0
 8016246:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801624c:	3354      	adds	r3, #84	@ 0x54
 801624e:	224c      	movs	r2, #76	@ 0x4c
 8016250:	2100      	movs	r1, #0
 8016252:	4618      	mov	r0, r3
 8016254:	f002 fc86 	bl	8018b64 <memset>
 8016258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801625a:	4a0d      	ldr	r2, [pc, #52]	@ (8016290 <prvInitialiseNewTask+0x148>)
 801625c:	659a      	str	r2, [r3, #88]	@ 0x58
 801625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016260:	4a0c      	ldr	r2, [pc, #48]	@ (8016294 <prvInitialiseNewTask+0x14c>)
 8016262:	65da      	str	r2, [r3, #92]	@ 0x5c
 8016264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016266:	4a0c      	ldr	r2, [pc, #48]	@ (8016298 <prvInitialiseNewTask+0x150>)
 8016268:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801626a:	683a      	ldr	r2, [r7, #0]
 801626c:	68f9      	ldr	r1, [r7, #12]
 801626e:	69b8      	ldr	r0, [r7, #24]
 8016270:	f001 fd9a 	bl	8017da8 <pxPortInitialiseStack>
 8016274:	4602      	mov	r2, r0
 8016276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016278:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801627c:	2b00      	cmp	r3, #0
 801627e:	d002      	beq.n	8016286 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016286:	bf00      	nop
 8016288:	3720      	adds	r7, #32
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	200096b4 	.word	0x200096b4
 8016294:	2000971c 	.word	0x2000971c
 8016298:	20009784 	.word	0x20009784

0801629c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80162a4:	f001 fe92 	bl	8017fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80162a8:	4b2d      	ldr	r3, [pc, #180]	@ (8016360 <prvAddNewTaskToReadyList+0xc4>)
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	3301      	adds	r3, #1
 80162ae:	4a2c      	ldr	r2, [pc, #176]	@ (8016360 <prvAddNewTaskToReadyList+0xc4>)
 80162b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80162b2:	4b2c      	ldr	r3, [pc, #176]	@ (8016364 <prvAddNewTaskToReadyList+0xc8>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d109      	bne.n	80162ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80162ba:	4a2a      	ldr	r2, [pc, #168]	@ (8016364 <prvAddNewTaskToReadyList+0xc8>)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80162c0:	4b27      	ldr	r3, [pc, #156]	@ (8016360 <prvAddNewTaskToReadyList+0xc4>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	2b01      	cmp	r3, #1
 80162c6:	d110      	bne.n	80162ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80162c8:	f000 fd18 	bl	8016cfc <prvInitialiseTaskLists>
 80162cc:	e00d      	b.n	80162ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80162ce:	4b26      	ldr	r3, [pc, #152]	@ (8016368 <prvAddNewTaskToReadyList+0xcc>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d109      	bne.n	80162ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80162d6:	4b23      	ldr	r3, [pc, #140]	@ (8016364 <prvAddNewTaskToReadyList+0xc8>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d802      	bhi.n	80162ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80162e4:	4a1f      	ldr	r2, [pc, #124]	@ (8016364 <prvAddNewTaskToReadyList+0xc8>)
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80162ea:	4b20      	ldr	r3, [pc, #128]	@ (801636c <prvAddNewTaskToReadyList+0xd0>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	3301      	adds	r3, #1
 80162f0:	4a1e      	ldr	r2, [pc, #120]	@ (801636c <prvAddNewTaskToReadyList+0xd0>)
 80162f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80162f4:	4b1d      	ldr	r3, [pc, #116]	@ (801636c <prvAddNewTaskToReadyList+0xd0>)
 80162f6:	681a      	ldr	r2, [r3, #0]
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016300:	4b1b      	ldr	r3, [pc, #108]	@ (8016370 <prvAddNewTaskToReadyList+0xd4>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	429a      	cmp	r2, r3
 8016306:	d903      	bls.n	8016310 <prvAddNewTaskToReadyList+0x74>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801630c:	4a18      	ldr	r2, [pc, #96]	@ (8016370 <prvAddNewTaskToReadyList+0xd4>)
 801630e:	6013      	str	r3, [r2, #0]
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016314:	4613      	mov	r3, r2
 8016316:	009b      	lsls	r3, r3, #2
 8016318:	4413      	add	r3, r2
 801631a:	009b      	lsls	r3, r3, #2
 801631c:	4a15      	ldr	r2, [pc, #84]	@ (8016374 <prvAddNewTaskToReadyList+0xd8>)
 801631e:	441a      	add	r2, r3
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	3304      	adds	r3, #4
 8016324:	4619      	mov	r1, r3
 8016326:	4610      	mov	r0, r2
 8016328:	f7fe fe86 	bl	8015038 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801632c:	f001 fe84 	bl	8018038 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016330:	4b0d      	ldr	r3, [pc, #52]	@ (8016368 <prvAddNewTaskToReadyList+0xcc>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d00e      	beq.n	8016356 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016338:	4b0a      	ldr	r3, [pc, #40]	@ (8016364 <prvAddNewTaskToReadyList+0xc8>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016342:	429a      	cmp	r2, r3
 8016344:	d207      	bcs.n	8016356 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016346:	4b0c      	ldr	r3, [pc, #48]	@ (8016378 <prvAddNewTaskToReadyList+0xdc>)
 8016348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801634c:	601a      	str	r2, [r3, #0]
 801634e:	f3bf 8f4f 	dsb	sy
 8016352:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016356:	bf00      	nop
 8016358:	3708      	adds	r7, #8
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
 801635e:	bf00      	nop
 8016360:	2000593c 	.word	0x2000593c
 8016364:	20005468 	.word	0x20005468
 8016368:	20005948 	.word	0x20005948
 801636c:	20005958 	.word	0x20005958
 8016370:	20005944 	.word	0x20005944
 8016374:	2000546c 	.word	0x2000546c
 8016378:	e000ed04 	.word	0xe000ed04

0801637c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016384:	2300      	movs	r3, #0
 8016386:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d01a      	beq.n	80163c4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801638e:	4b15      	ldr	r3, [pc, #84]	@ (80163e4 <vTaskDelay+0x68>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d00d      	beq.n	80163b2 <vTaskDelay+0x36>
	__asm volatile
 8016396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801639a:	b672      	cpsid	i
 801639c:	f383 8811 	msr	BASEPRI, r3
 80163a0:	f3bf 8f6f 	isb	sy
 80163a4:	f3bf 8f4f 	dsb	sy
 80163a8:	b662      	cpsie	i
 80163aa:	60bb      	str	r3, [r7, #8]
}
 80163ac:	bf00      	nop
 80163ae:	bf00      	nop
 80163b0:	e7fd      	b.n	80163ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 80163b2:	f000 f88f 	bl	80164d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80163b6:	2100      	movs	r1, #0
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f001 f939 	bl	8017630 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80163be:	f000 f897 	bl	80164f0 <xTaskResumeAll>
 80163c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d107      	bne.n	80163da <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80163ca:	4b07      	ldr	r3, [pc, #28]	@ (80163e8 <vTaskDelay+0x6c>)
 80163cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80163d0:	601a      	str	r2, [r3, #0]
 80163d2:	f3bf 8f4f 	dsb	sy
 80163d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80163da:	bf00      	nop
 80163dc:	3710      	adds	r7, #16
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	20005964 	.word	0x20005964
 80163e8:	e000ed04 	.word	0xe000ed04

080163ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b08a      	sub	sp, #40	@ 0x28
 80163f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80163f2:	2300      	movs	r3, #0
 80163f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80163f6:	2300      	movs	r3, #0
 80163f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80163fa:	463a      	mov	r2, r7
 80163fc:	1d39      	adds	r1, r7, #4
 80163fe:	f107 0308 	add.w	r3, r7, #8
 8016402:	4618      	mov	r0, r3
 8016404:	f7fe fb9c 	bl	8014b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016408:	6839      	ldr	r1, [r7, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	68ba      	ldr	r2, [r7, #8]
 801640e:	9202      	str	r2, [sp, #8]
 8016410:	9301      	str	r3, [sp, #4]
 8016412:	2300      	movs	r3, #0
 8016414:	9300      	str	r3, [sp, #0]
 8016416:	2300      	movs	r3, #0
 8016418:	460a      	mov	r2, r1
 801641a:	4926      	ldr	r1, [pc, #152]	@ (80164b4 <vTaskStartScheduler+0xc8>)
 801641c:	4826      	ldr	r0, [pc, #152]	@ (80164b8 <vTaskStartScheduler+0xcc>)
 801641e:	f7ff fde7 	bl	8015ff0 <xTaskCreateStatic>
 8016422:	4603      	mov	r3, r0
 8016424:	4a25      	ldr	r2, [pc, #148]	@ (80164bc <vTaskStartScheduler+0xd0>)
 8016426:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016428:	4b24      	ldr	r3, [pc, #144]	@ (80164bc <vTaskStartScheduler+0xd0>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d002      	beq.n	8016436 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016430:	2301      	movs	r3, #1
 8016432:	617b      	str	r3, [r7, #20]
 8016434:	e001      	b.n	801643a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016436:	2300      	movs	r3, #0
 8016438:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801643a:	697b      	ldr	r3, [r7, #20]
 801643c:	2b01      	cmp	r3, #1
 801643e:	d102      	bne.n	8016446 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016440:	f001 f94a 	bl	80176d8 <xTimerCreateTimerTask>
 8016444:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	2b01      	cmp	r3, #1
 801644a:	d11d      	bne.n	8016488 <vTaskStartScheduler+0x9c>
	__asm volatile
 801644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016450:	b672      	cpsid	i
 8016452:	f383 8811 	msr	BASEPRI, r3
 8016456:	f3bf 8f6f 	isb	sy
 801645a:	f3bf 8f4f 	dsb	sy
 801645e:	b662      	cpsie	i
 8016460:	613b      	str	r3, [r7, #16]
}
 8016462:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016464:	4b16      	ldr	r3, [pc, #88]	@ (80164c0 <vTaskStartScheduler+0xd4>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	3354      	adds	r3, #84	@ 0x54
 801646a:	4a16      	ldr	r2, [pc, #88]	@ (80164c4 <vTaskStartScheduler+0xd8>)
 801646c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801646e:	4b16      	ldr	r3, [pc, #88]	@ (80164c8 <vTaskStartScheduler+0xdc>)
 8016470:	f04f 32ff 	mov.w	r2, #4294967295
 8016474:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016476:	4b15      	ldr	r3, [pc, #84]	@ (80164cc <vTaskStartScheduler+0xe0>)
 8016478:	2201      	movs	r2, #1
 801647a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801647c:	4b14      	ldr	r3, [pc, #80]	@ (80164d0 <vTaskStartScheduler+0xe4>)
 801647e:	2200      	movs	r2, #0
 8016480:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016482:	f001 fd25 	bl	8017ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016486:	e011      	b.n	80164ac <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801648e:	d10d      	bne.n	80164ac <vTaskStartScheduler+0xc0>
	__asm volatile
 8016490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016494:	b672      	cpsid	i
 8016496:	f383 8811 	msr	BASEPRI, r3
 801649a:	f3bf 8f6f 	isb	sy
 801649e:	f3bf 8f4f 	dsb	sy
 80164a2:	b662      	cpsie	i
 80164a4:	60fb      	str	r3, [r7, #12]
}
 80164a6:	bf00      	nop
 80164a8:	bf00      	nop
 80164aa:	e7fd      	b.n	80164a8 <vTaskStartScheduler+0xbc>
}
 80164ac:	bf00      	nop
 80164ae:	3718      	adds	r7, #24
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	08019db0 	.word	0x08019db0
 80164b8:	08016ccd 	.word	0x08016ccd
 80164bc:	20005960 	.word	0x20005960
 80164c0:	20005468 	.word	0x20005468
 80164c4:	2000002c 	.word	0x2000002c
 80164c8:	2000595c 	.word	0x2000595c
 80164cc:	20005948 	.word	0x20005948
 80164d0:	20005940 	.word	0x20005940

080164d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80164d4:	b480      	push	{r7}
 80164d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80164d8:	4b04      	ldr	r3, [pc, #16]	@ (80164ec <vTaskSuspendAll+0x18>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	3301      	adds	r3, #1
 80164de:	4a03      	ldr	r2, [pc, #12]	@ (80164ec <vTaskSuspendAll+0x18>)
 80164e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80164e2:	bf00      	nop
 80164e4:	46bd      	mov	sp, r7
 80164e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ea:	4770      	bx	lr
 80164ec:	20005964 	.word	0x20005964

080164f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b084      	sub	sp, #16
 80164f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80164f6:	2300      	movs	r3, #0
 80164f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80164fa:	2300      	movs	r3, #0
 80164fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80164fe:	4b43      	ldr	r3, [pc, #268]	@ (801660c <xTaskResumeAll+0x11c>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d10d      	bne.n	8016522 <xTaskResumeAll+0x32>
	__asm volatile
 8016506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801650a:	b672      	cpsid	i
 801650c:	f383 8811 	msr	BASEPRI, r3
 8016510:	f3bf 8f6f 	isb	sy
 8016514:	f3bf 8f4f 	dsb	sy
 8016518:	b662      	cpsie	i
 801651a:	603b      	str	r3, [r7, #0]
}
 801651c:	bf00      	nop
 801651e:	bf00      	nop
 8016520:	e7fd      	b.n	801651e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016522:	f001 fd53 	bl	8017fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016526:	4b39      	ldr	r3, [pc, #228]	@ (801660c <xTaskResumeAll+0x11c>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	3b01      	subs	r3, #1
 801652c:	4a37      	ldr	r2, [pc, #220]	@ (801660c <xTaskResumeAll+0x11c>)
 801652e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016530:	4b36      	ldr	r3, [pc, #216]	@ (801660c <xTaskResumeAll+0x11c>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d162      	bne.n	80165fe <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016538:	4b35      	ldr	r3, [pc, #212]	@ (8016610 <xTaskResumeAll+0x120>)
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d05e      	beq.n	80165fe <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016540:	e02f      	b.n	80165a2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016542:	4b34      	ldr	r3, [pc, #208]	@ (8016614 <xTaskResumeAll+0x124>)
 8016544:	68db      	ldr	r3, [r3, #12]
 8016546:	68db      	ldr	r3, [r3, #12]
 8016548:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	3318      	adds	r3, #24
 801654e:	4618      	mov	r0, r3
 8016550:	f7fe fdcf 	bl	80150f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	3304      	adds	r3, #4
 8016558:	4618      	mov	r0, r3
 801655a:	f7fe fdca 	bl	80150f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016562:	4b2d      	ldr	r3, [pc, #180]	@ (8016618 <xTaskResumeAll+0x128>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	429a      	cmp	r2, r3
 8016568:	d903      	bls.n	8016572 <xTaskResumeAll+0x82>
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801656e:	4a2a      	ldr	r2, [pc, #168]	@ (8016618 <xTaskResumeAll+0x128>)
 8016570:	6013      	str	r3, [r2, #0]
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016576:	4613      	mov	r3, r2
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	4413      	add	r3, r2
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	4a27      	ldr	r2, [pc, #156]	@ (801661c <xTaskResumeAll+0x12c>)
 8016580:	441a      	add	r2, r3
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	3304      	adds	r3, #4
 8016586:	4619      	mov	r1, r3
 8016588:	4610      	mov	r0, r2
 801658a:	f7fe fd55 	bl	8015038 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016592:	4b23      	ldr	r3, [pc, #140]	@ (8016620 <xTaskResumeAll+0x130>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016598:	429a      	cmp	r2, r3
 801659a:	d302      	bcc.n	80165a2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 801659c:	4b21      	ldr	r3, [pc, #132]	@ (8016624 <xTaskResumeAll+0x134>)
 801659e:	2201      	movs	r2, #1
 80165a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80165a2:	4b1c      	ldr	r3, [pc, #112]	@ (8016614 <xTaskResumeAll+0x124>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d1cb      	bne.n	8016542 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d001      	beq.n	80165b4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80165b0:	f000 fc4a 	bl	8016e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80165b4:	4b1c      	ldr	r3, [pc, #112]	@ (8016628 <xTaskResumeAll+0x138>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d010      	beq.n	80165e2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80165c0:	f000 f846 	bl	8016650 <xTaskIncrementTick>
 80165c4:	4603      	mov	r3, r0
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d002      	beq.n	80165d0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80165ca:	4b16      	ldr	r3, [pc, #88]	@ (8016624 <xTaskResumeAll+0x134>)
 80165cc:	2201      	movs	r2, #1
 80165ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	3b01      	subs	r3, #1
 80165d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d1f1      	bne.n	80165c0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80165dc:	4b12      	ldr	r3, [pc, #72]	@ (8016628 <xTaskResumeAll+0x138>)
 80165de:	2200      	movs	r2, #0
 80165e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80165e2:	4b10      	ldr	r3, [pc, #64]	@ (8016624 <xTaskResumeAll+0x134>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d009      	beq.n	80165fe <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80165ea:	2301      	movs	r3, #1
 80165ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80165ee:	4b0f      	ldr	r3, [pc, #60]	@ (801662c <xTaskResumeAll+0x13c>)
 80165f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80165f4:	601a      	str	r2, [r3, #0]
 80165f6:	f3bf 8f4f 	dsb	sy
 80165fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80165fe:	f001 fd1b 	bl	8018038 <vPortExitCritical>

	return xAlreadyYielded;
 8016602:	68bb      	ldr	r3, [r7, #8]
}
 8016604:	4618      	mov	r0, r3
 8016606:	3710      	adds	r7, #16
 8016608:	46bd      	mov	sp, r7
 801660a:	bd80      	pop	{r7, pc}
 801660c:	20005964 	.word	0x20005964
 8016610:	2000593c 	.word	0x2000593c
 8016614:	200058fc 	.word	0x200058fc
 8016618:	20005944 	.word	0x20005944
 801661c:	2000546c 	.word	0x2000546c
 8016620:	20005468 	.word	0x20005468
 8016624:	20005950 	.word	0x20005950
 8016628:	2000594c 	.word	0x2000594c
 801662c:	e000ed04 	.word	0xe000ed04

08016630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016630:	b480      	push	{r7}
 8016632:	b083      	sub	sp, #12
 8016634:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016636:	4b05      	ldr	r3, [pc, #20]	@ (801664c <xTaskGetTickCount+0x1c>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801663c:	687b      	ldr	r3, [r7, #4]
}
 801663e:	4618      	mov	r0, r3
 8016640:	370c      	adds	r7, #12
 8016642:	46bd      	mov	sp, r7
 8016644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016648:	4770      	bx	lr
 801664a:	bf00      	nop
 801664c:	20005940 	.word	0x20005940

08016650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b086      	sub	sp, #24
 8016654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016656:	2300      	movs	r3, #0
 8016658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801665a:	4b50      	ldr	r3, [pc, #320]	@ (801679c <xTaskIncrementTick+0x14c>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	2b00      	cmp	r3, #0
 8016660:	f040 808c 	bne.w	801677c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016664:	4b4e      	ldr	r3, [pc, #312]	@ (80167a0 <xTaskIncrementTick+0x150>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	3301      	adds	r3, #1
 801666a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801666c:	4a4c      	ldr	r2, [pc, #304]	@ (80167a0 <xTaskIncrementTick+0x150>)
 801666e:	693b      	ldr	r3, [r7, #16]
 8016670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d123      	bne.n	80166c0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8016678:	4b4a      	ldr	r3, [pc, #296]	@ (80167a4 <xTaskIncrementTick+0x154>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00d      	beq.n	801669e <xTaskIncrementTick+0x4e>
	__asm volatile
 8016682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016686:	b672      	cpsid	i
 8016688:	f383 8811 	msr	BASEPRI, r3
 801668c:	f3bf 8f6f 	isb	sy
 8016690:	f3bf 8f4f 	dsb	sy
 8016694:	b662      	cpsie	i
 8016696:	603b      	str	r3, [r7, #0]
}
 8016698:	bf00      	nop
 801669a:	bf00      	nop
 801669c:	e7fd      	b.n	801669a <xTaskIncrementTick+0x4a>
 801669e:	4b41      	ldr	r3, [pc, #260]	@ (80167a4 <xTaskIncrementTick+0x154>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	60fb      	str	r3, [r7, #12]
 80166a4:	4b40      	ldr	r3, [pc, #256]	@ (80167a8 <xTaskIncrementTick+0x158>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	4a3e      	ldr	r2, [pc, #248]	@ (80167a4 <xTaskIncrementTick+0x154>)
 80166aa:	6013      	str	r3, [r2, #0]
 80166ac:	4a3e      	ldr	r2, [pc, #248]	@ (80167a8 <xTaskIncrementTick+0x158>)
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	6013      	str	r3, [r2, #0]
 80166b2:	4b3e      	ldr	r3, [pc, #248]	@ (80167ac <xTaskIncrementTick+0x15c>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	3301      	adds	r3, #1
 80166b8:	4a3c      	ldr	r2, [pc, #240]	@ (80167ac <xTaskIncrementTick+0x15c>)
 80166ba:	6013      	str	r3, [r2, #0]
 80166bc:	f000 fbc4 	bl	8016e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80166c0:	4b3b      	ldr	r3, [pc, #236]	@ (80167b0 <xTaskIncrementTick+0x160>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	693a      	ldr	r2, [r7, #16]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d349      	bcc.n	801675e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80166ca:	4b36      	ldr	r3, [pc, #216]	@ (80167a4 <xTaskIncrementTick+0x154>)
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d104      	bne.n	80166de <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166d4:	4b36      	ldr	r3, [pc, #216]	@ (80167b0 <xTaskIncrementTick+0x160>)
 80166d6:	f04f 32ff 	mov.w	r2, #4294967295
 80166da:	601a      	str	r2, [r3, #0]
					break;
 80166dc:	e03f      	b.n	801675e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166de:	4b31      	ldr	r3, [pc, #196]	@ (80167a4 <xTaskIncrementTick+0x154>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	68db      	ldr	r3, [r3, #12]
 80166e4:	68db      	ldr	r3, [r3, #12]
 80166e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	685b      	ldr	r3, [r3, #4]
 80166ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80166ee:	693a      	ldr	r2, [r7, #16]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d203      	bcs.n	80166fe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80166f6:	4a2e      	ldr	r2, [pc, #184]	@ (80167b0 <xTaskIncrementTick+0x160>)
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80166fc:	e02f      	b.n	801675e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166fe:	68bb      	ldr	r3, [r7, #8]
 8016700:	3304      	adds	r3, #4
 8016702:	4618      	mov	r0, r3
 8016704:	f7fe fcf5 	bl	80150f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801670c:	2b00      	cmp	r3, #0
 801670e:	d004      	beq.n	801671a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	3318      	adds	r3, #24
 8016714:	4618      	mov	r0, r3
 8016716:	f7fe fcec 	bl	80150f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801671a:	68bb      	ldr	r3, [r7, #8]
 801671c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801671e:	4b25      	ldr	r3, [pc, #148]	@ (80167b4 <xTaskIncrementTick+0x164>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	429a      	cmp	r2, r3
 8016724:	d903      	bls.n	801672e <xTaskIncrementTick+0xde>
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801672a:	4a22      	ldr	r2, [pc, #136]	@ (80167b4 <xTaskIncrementTick+0x164>)
 801672c:	6013      	str	r3, [r2, #0]
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016732:	4613      	mov	r3, r2
 8016734:	009b      	lsls	r3, r3, #2
 8016736:	4413      	add	r3, r2
 8016738:	009b      	lsls	r3, r3, #2
 801673a:	4a1f      	ldr	r2, [pc, #124]	@ (80167b8 <xTaskIncrementTick+0x168>)
 801673c:	441a      	add	r2, r3
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	3304      	adds	r3, #4
 8016742:	4619      	mov	r1, r3
 8016744:	4610      	mov	r0, r2
 8016746:	f7fe fc77 	bl	8015038 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801674e:	4b1b      	ldr	r3, [pc, #108]	@ (80167bc <xTaskIncrementTick+0x16c>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016754:	429a      	cmp	r2, r3
 8016756:	d3b8      	bcc.n	80166ca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8016758:	2301      	movs	r3, #1
 801675a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801675c:	e7b5      	b.n	80166ca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801675e:	4b17      	ldr	r3, [pc, #92]	@ (80167bc <xTaskIncrementTick+0x16c>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016764:	4914      	ldr	r1, [pc, #80]	@ (80167b8 <xTaskIncrementTick+0x168>)
 8016766:	4613      	mov	r3, r2
 8016768:	009b      	lsls	r3, r3, #2
 801676a:	4413      	add	r3, r2
 801676c:	009b      	lsls	r3, r3, #2
 801676e:	440b      	add	r3, r1
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	2b01      	cmp	r3, #1
 8016774:	d907      	bls.n	8016786 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8016776:	2301      	movs	r3, #1
 8016778:	617b      	str	r3, [r7, #20]
 801677a:	e004      	b.n	8016786 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801677c:	4b10      	ldr	r3, [pc, #64]	@ (80167c0 <xTaskIncrementTick+0x170>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	3301      	adds	r3, #1
 8016782:	4a0f      	ldr	r2, [pc, #60]	@ (80167c0 <xTaskIncrementTick+0x170>)
 8016784:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016786:	4b0f      	ldr	r3, [pc, #60]	@ (80167c4 <xTaskIncrementTick+0x174>)
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d001      	beq.n	8016792 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 801678e:	2301      	movs	r3, #1
 8016790:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016792:	697b      	ldr	r3, [r7, #20]
}
 8016794:	4618      	mov	r0, r3
 8016796:	3718      	adds	r7, #24
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}
 801679c:	20005964 	.word	0x20005964
 80167a0:	20005940 	.word	0x20005940
 80167a4:	200058f4 	.word	0x200058f4
 80167a8:	200058f8 	.word	0x200058f8
 80167ac:	20005954 	.word	0x20005954
 80167b0:	2000595c 	.word	0x2000595c
 80167b4:	20005944 	.word	0x20005944
 80167b8:	2000546c 	.word	0x2000546c
 80167bc:	20005468 	.word	0x20005468
 80167c0:	2000594c 	.word	0x2000594c
 80167c4:	20005950 	.word	0x20005950

080167c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80167c8:	b480      	push	{r7}
 80167ca:	b085      	sub	sp, #20
 80167cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80167ce:	4b2c      	ldr	r3, [pc, #176]	@ (8016880 <vTaskSwitchContext+0xb8>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d003      	beq.n	80167de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80167d6:	4b2b      	ldr	r3, [pc, #172]	@ (8016884 <vTaskSwitchContext+0xbc>)
 80167d8:	2201      	movs	r2, #1
 80167da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80167dc:	e049      	b.n	8016872 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80167de:	4b29      	ldr	r3, [pc, #164]	@ (8016884 <vTaskSwitchContext+0xbc>)
 80167e0:	2200      	movs	r2, #0
 80167e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167e4:	4b28      	ldr	r3, [pc, #160]	@ (8016888 <vTaskSwitchContext+0xc0>)
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	60fb      	str	r3, [r7, #12]
 80167ea:	e013      	b.n	8016814 <vTaskSwitchContext+0x4c>
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d10d      	bne.n	801680e <vTaskSwitchContext+0x46>
	__asm volatile
 80167f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167f6:	b672      	cpsid	i
 80167f8:	f383 8811 	msr	BASEPRI, r3
 80167fc:	f3bf 8f6f 	isb	sy
 8016800:	f3bf 8f4f 	dsb	sy
 8016804:	b662      	cpsie	i
 8016806:	607b      	str	r3, [r7, #4]
}
 8016808:	bf00      	nop
 801680a:	bf00      	nop
 801680c:	e7fd      	b.n	801680a <vTaskSwitchContext+0x42>
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	3b01      	subs	r3, #1
 8016812:	60fb      	str	r3, [r7, #12]
 8016814:	491d      	ldr	r1, [pc, #116]	@ (801688c <vTaskSwitchContext+0xc4>)
 8016816:	68fa      	ldr	r2, [r7, #12]
 8016818:	4613      	mov	r3, r2
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	4413      	add	r3, r2
 801681e:	009b      	lsls	r3, r3, #2
 8016820:	440b      	add	r3, r1
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d0e1      	beq.n	80167ec <vTaskSwitchContext+0x24>
 8016828:	68fa      	ldr	r2, [r7, #12]
 801682a:	4613      	mov	r3, r2
 801682c:	009b      	lsls	r3, r3, #2
 801682e:	4413      	add	r3, r2
 8016830:	009b      	lsls	r3, r3, #2
 8016832:	4a16      	ldr	r2, [pc, #88]	@ (801688c <vTaskSwitchContext+0xc4>)
 8016834:	4413      	add	r3, r2
 8016836:	60bb      	str	r3, [r7, #8]
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	685a      	ldr	r2, [r3, #4]
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	605a      	str	r2, [r3, #4]
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	685a      	ldr	r2, [r3, #4]
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	3308      	adds	r3, #8
 801684a:	429a      	cmp	r2, r3
 801684c:	d104      	bne.n	8016858 <vTaskSwitchContext+0x90>
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	685a      	ldr	r2, [r3, #4]
 8016854:	68bb      	ldr	r3, [r7, #8]
 8016856:	605a      	str	r2, [r3, #4]
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	68db      	ldr	r3, [r3, #12]
 801685e:	4a0c      	ldr	r2, [pc, #48]	@ (8016890 <vTaskSwitchContext+0xc8>)
 8016860:	6013      	str	r3, [r2, #0]
 8016862:	4a09      	ldr	r2, [pc, #36]	@ (8016888 <vTaskSwitchContext+0xc0>)
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016868:	4b09      	ldr	r3, [pc, #36]	@ (8016890 <vTaskSwitchContext+0xc8>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	3354      	adds	r3, #84	@ 0x54
 801686e:	4a09      	ldr	r2, [pc, #36]	@ (8016894 <vTaskSwitchContext+0xcc>)
 8016870:	6013      	str	r3, [r2, #0]
}
 8016872:	bf00      	nop
 8016874:	3714      	adds	r7, #20
 8016876:	46bd      	mov	sp, r7
 8016878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop
 8016880:	20005964 	.word	0x20005964
 8016884:	20005950 	.word	0x20005950
 8016888:	20005944 	.word	0x20005944
 801688c:	2000546c 	.word	0x2000546c
 8016890:	20005468 	.word	0x20005468
 8016894:	2000002c 	.word	0x2000002c

08016898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b084      	sub	sp, #16
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d10d      	bne.n	80168c4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80168a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168ac:	b672      	cpsid	i
 80168ae:	f383 8811 	msr	BASEPRI, r3
 80168b2:	f3bf 8f6f 	isb	sy
 80168b6:	f3bf 8f4f 	dsb	sy
 80168ba:	b662      	cpsie	i
 80168bc:	60fb      	str	r3, [r7, #12]
}
 80168be:	bf00      	nop
 80168c0:	bf00      	nop
 80168c2:	e7fd      	b.n	80168c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80168c4:	4b07      	ldr	r3, [pc, #28]	@ (80168e4 <vTaskPlaceOnEventList+0x4c>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	3318      	adds	r3, #24
 80168ca:	4619      	mov	r1, r3
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	f7fe fbd7 	bl	8015080 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80168d2:	2101      	movs	r1, #1
 80168d4:	6838      	ldr	r0, [r7, #0]
 80168d6:	f000 feab 	bl	8017630 <prvAddCurrentTaskToDelayedList>
}
 80168da:	bf00      	nop
 80168dc:	3710      	adds	r7, #16
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	20005468 	.word	0x20005468

080168e8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b086      	sub	sp, #24
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	60f8      	str	r0, [r7, #12]
 80168f0:	60b9      	str	r1, [r7, #8]
 80168f2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d10d      	bne.n	8016916 <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 80168fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168fe:	b672      	cpsid	i
 8016900:	f383 8811 	msr	BASEPRI, r3
 8016904:	f3bf 8f6f 	isb	sy
 8016908:	f3bf 8f4f 	dsb	sy
 801690c:	b662      	cpsie	i
 801690e:	617b      	str	r3, [r7, #20]
}
 8016910:	bf00      	nop
 8016912:	bf00      	nop
 8016914:	e7fd      	b.n	8016912 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8016916:	4b13      	ldr	r3, [pc, #76]	@ (8016964 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d10d      	bne.n	801693a <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 801691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016922:	b672      	cpsid	i
 8016924:	f383 8811 	msr	BASEPRI, r3
 8016928:	f3bf 8f6f 	isb	sy
 801692c:	f3bf 8f4f 	dsb	sy
 8016930:	b662      	cpsie	i
 8016932:	613b      	str	r3, [r7, #16]
}
 8016934:	bf00      	nop
 8016936:	bf00      	nop
 8016938:	e7fd      	b.n	8016936 <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801693a:	4b0b      	ldr	r3, [pc, #44]	@ (8016968 <vTaskPlaceOnUnorderedEventList+0x80>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	68ba      	ldr	r2, [r7, #8]
 8016940:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8016944:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016946:	4b08      	ldr	r3, [pc, #32]	@ (8016968 <vTaskPlaceOnUnorderedEventList+0x80>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	3318      	adds	r3, #24
 801694c:	4619      	mov	r1, r3
 801694e:	68f8      	ldr	r0, [r7, #12]
 8016950:	f7fe fb72 	bl	8015038 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016954:	2101      	movs	r1, #1
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f000 fe6a 	bl	8017630 <prvAddCurrentTaskToDelayedList>
}
 801695c:	bf00      	nop
 801695e:	3718      	adds	r7, #24
 8016960:	46bd      	mov	sp, r7
 8016962:	bd80      	pop	{r7, pc}
 8016964:	20005964 	.word	0x20005964
 8016968:	20005468 	.word	0x20005468

0801696c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801696c:	b580      	push	{r7, lr}
 801696e:	b086      	sub	sp, #24
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d10d      	bne.n	801699a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 801697e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016982:	b672      	cpsid	i
 8016984:	f383 8811 	msr	BASEPRI, r3
 8016988:	f3bf 8f6f 	isb	sy
 801698c:	f3bf 8f4f 	dsb	sy
 8016990:	b662      	cpsie	i
 8016992:	617b      	str	r3, [r7, #20]
}
 8016994:	bf00      	nop
 8016996:	bf00      	nop
 8016998:	e7fd      	b.n	8016996 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801699a:	4b0a      	ldr	r3, [pc, #40]	@ (80169c4 <vTaskPlaceOnEventListRestricted+0x58>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	3318      	adds	r3, #24
 80169a0:	4619      	mov	r1, r3
 80169a2:	68f8      	ldr	r0, [r7, #12]
 80169a4:	f7fe fb48 	bl	8015038 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d002      	beq.n	80169b4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80169ae:	f04f 33ff 	mov.w	r3, #4294967295
 80169b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80169b4:	6879      	ldr	r1, [r7, #4]
 80169b6:	68b8      	ldr	r0, [r7, #8]
 80169b8:	f000 fe3a 	bl	8017630 <prvAddCurrentTaskToDelayedList>
	}
 80169bc:	bf00      	nop
 80169be:	3718      	adds	r7, #24
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bd80      	pop	{r7, pc}
 80169c4:	20005468 	.word	0x20005468

080169c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b086      	sub	sp, #24
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	68db      	ldr	r3, [r3, #12]
 80169d4:	68db      	ldr	r3, [r3, #12]
 80169d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80169d8:	693b      	ldr	r3, [r7, #16]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d10d      	bne.n	80169fa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80169de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169e2:	b672      	cpsid	i
 80169e4:	f383 8811 	msr	BASEPRI, r3
 80169e8:	f3bf 8f6f 	isb	sy
 80169ec:	f3bf 8f4f 	dsb	sy
 80169f0:	b662      	cpsie	i
 80169f2:	60fb      	str	r3, [r7, #12]
}
 80169f4:	bf00      	nop
 80169f6:	bf00      	nop
 80169f8:	e7fd      	b.n	80169f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80169fa:	693b      	ldr	r3, [r7, #16]
 80169fc:	3318      	adds	r3, #24
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7fe fb77 	bl	80150f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a04:	4b1d      	ldr	r3, [pc, #116]	@ (8016a7c <xTaskRemoveFromEventList+0xb4>)
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d11d      	bne.n	8016a48 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	3304      	adds	r3, #4
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7fe fb6e 	bl	80150f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016a16:	693b      	ldr	r3, [r7, #16]
 8016a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a1a:	4b19      	ldr	r3, [pc, #100]	@ (8016a80 <xTaskRemoveFromEventList+0xb8>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	d903      	bls.n	8016a2a <xTaskRemoveFromEventList+0x62>
 8016a22:	693b      	ldr	r3, [r7, #16]
 8016a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a26:	4a16      	ldr	r2, [pc, #88]	@ (8016a80 <xTaskRemoveFromEventList+0xb8>)
 8016a28:	6013      	str	r3, [r2, #0]
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a2e:	4613      	mov	r3, r2
 8016a30:	009b      	lsls	r3, r3, #2
 8016a32:	4413      	add	r3, r2
 8016a34:	009b      	lsls	r3, r3, #2
 8016a36:	4a13      	ldr	r2, [pc, #76]	@ (8016a84 <xTaskRemoveFromEventList+0xbc>)
 8016a38:	441a      	add	r2, r3
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	3304      	adds	r3, #4
 8016a3e:	4619      	mov	r1, r3
 8016a40:	4610      	mov	r0, r2
 8016a42:	f7fe faf9 	bl	8015038 <vListInsertEnd>
 8016a46:	e005      	b.n	8016a54 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	3318      	adds	r3, #24
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	480e      	ldr	r0, [pc, #56]	@ (8016a88 <xTaskRemoveFromEventList+0xc0>)
 8016a50:	f7fe faf2 	bl	8015038 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016a54:	693b      	ldr	r3, [r7, #16]
 8016a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a58:	4b0c      	ldr	r3, [pc, #48]	@ (8016a8c <xTaskRemoveFromEventList+0xc4>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d905      	bls.n	8016a6e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016a62:	2301      	movs	r3, #1
 8016a64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016a66:	4b0a      	ldr	r3, [pc, #40]	@ (8016a90 <xTaskRemoveFromEventList+0xc8>)
 8016a68:	2201      	movs	r2, #1
 8016a6a:	601a      	str	r2, [r3, #0]
 8016a6c:	e001      	b.n	8016a72 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016a72:	697b      	ldr	r3, [r7, #20]
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3718      	adds	r7, #24
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}
 8016a7c:	20005964 	.word	0x20005964
 8016a80:	20005944 	.word	0x20005944
 8016a84:	2000546c 	.word	0x2000546c
 8016a88:	200058fc 	.word	0x200058fc
 8016a8c:	20005468 	.word	0x20005468
 8016a90:	20005950 	.word	0x20005950

08016a94 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b086      	sub	sp, #24
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8016a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8016b50 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d10d      	bne.n	8016ac2 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 8016aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aaa:	b672      	cpsid	i
 8016aac:	f383 8811 	msr	BASEPRI, r3
 8016ab0:	f3bf 8f6f 	isb	sy
 8016ab4:	f3bf 8f4f 	dsb	sy
 8016ab8:	b662      	cpsie	i
 8016aba:	613b      	str	r3, [r7, #16]
}
 8016abc:	bf00      	nop
 8016abe:	bf00      	nop
 8016ac0:	e7fd      	b.n	8016abe <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	68db      	ldr	r3, [r3, #12]
 8016ad0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d10d      	bne.n	8016af4 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 8016ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016adc:	b672      	cpsid	i
 8016ade:	f383 8811 	msr	BASEPRI, r3
 8016ae2:	f3bf 8f6f 	isb	sy
 8016ae6:	f3bf 8f4f 	dsb	sy
 8016aea:	b662      	cpsie	i
 8016aec:	60fb      	str	r3, [r7, #12]
}
 8016aee:	bf00      	nop
 8016af0:	bf00      	nop
 8016af2:	e7fd      	b.n	8016af0 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f7fe fafc 	bl	80150f2 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	3304      	adds	r3, #4
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7fe faf7 	bl	80150f2 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b08:	4b12      	ldr	r3, [pc, #72]	@ (8016b54 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d903      	bls.n	8016b18 <vTaskRemoveFromUnorderedEventList+0x84>
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b14:	4a0f      	ldr	r2, [pc, #60]	@ (8016b54 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8016b16:	6013      	str	r3, [r2, #0]
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	4413      	add	r3, r2
 8016b22:	009b      	lsls	r3, r3, #2
 8016b24:	4a0c      	ldr	r2, [pc, #48]	@ (8016b58 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8016b26:	441a      	add	r2, r3
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	3304      	adds	r3, #4
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	4610      	mov	r0, r2
 8016b30:	f7fe fa82 	bl	8015038 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b38:	4b08      	ldr	r3, [pc, #32]	@ (8016b5c <vTaskRemoveFromUnorderedEventList+0xc8>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	d902      	bls.n	8016b48 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8016b42:	4b07      	ldr	r3, [pc, #28]	@ (8016b60 <vTaskRemoveFromUnorderedEventList+0xcc>)
 8016b44:	2201      	movs	r2, #1
 8016b46:	601a      	str	r2, [r3, #0]
	}
}
 8016b48:	bf00      	nop
 8016b4a:	3718      	adds	r7, #24
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	20005964 	.word	0x20005964
 8016b54:	20005944 	.word	0x20005944
 8016b58:	2000546c 	.word	0x2000546c
 8016b5c:	20005468 	.word	0x20005468
 8016b60:	20005950 	.word	0x20005950

08016b64 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b084      	sub	sp, #16
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d10d      	bne.n	8016b8e <vTaskSetTimeOutState+0x2a>
	__asm volatile
 8016b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b76:	b672      	cpsid	i
 8016b78:	f383 8811 	msr	BASEPRI, r3
 8016b7c:	f3bf 8f6f 	isb	sy
 8016b80:	f3bf 8f4f 	dsb	sy
 8016b84:	b662      	cpsie	i
 8016b86:	60fb      	str	r3, [r7, #12]
}
 8016b88:	bf00      	nop
 8016b8a:	bf00      	nop
 8016b8c:	e7fd      	b.n	8016b8a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8016b8e:	f001 fa1d 	bl	8017fcc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016b92:	4b07      	ldr	r3, [pc, #28]	@ (8016bb0 <vTaskSetTimeOutState+0x4c>)
 8016b94:	681a      	ldr	r2, [r3, #0]
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8016b9a:	4b06      	ldr	r3, [pc, #24]	@ (8016bb4 <vTaskSetTimeOutState+0x50>)
 8016b9c:	681a      	ldr	r2, [r3, #0]
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8016ba2:	f001 fa49 	bl	8018038 <vPortExitCritical>
}
 8016ba6:	bf00      	nop
 8016ba8:	3710      	adds	r7, #16
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}
 8016bae:	bf00      	nop
 8016bb0:	20005954 	.word	0x20005954
 8016bb4:	20005940 	.word	0x20005940

08016bb8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016bb8:	b480      	push	{r7}
 8016bba:	b083      	sub	sp, #12
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016bc0:	4b06      	ldr	r3, [pc, #24]	@ (8016bdc <vTaskInternalSetTimeOutState+0x24>)
 8016bc2:	681a      	ldr	r2, [r3, #0]
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016bc8:	4b05      	ldr	r3, [pc, #20]	@ (8016be0 <vTaskInternalSetTimeOutState+0x28>)
 8016bca:	681a      	ldr	r2, [r3, #0]
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	605a      	str	r2, [r3, #4]
}
 8016bd0:	bf00      	nop
 8016bd2:	370c      	adds	r7, #12
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bda:	4770      	bx	lr
 8016bdc:	20005954 	.word	0x20005954
 8016be0:	20005940 	.word	0x20005940

08016be4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b088      	sub	sp, #32
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
 8016bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d10d      	bne.n	8016c10 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8016bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bf8:	b672      	cpsid	i
 8016bfa:	f383 8811 	msr	BASEPRI, r3
 8016bfe:	f3bf 8f6f 	isb	sy
 8016c02:	f3bf 8f4f 	dsb	sy
 8016c06:	b662      	cpsie	i
 8016c08:	613b      	str	r3, [r7, #16]
}
 8016c0a:	bf00      	nop
 8016c0c:	bf00      	nop
 8016c0e:	e7fd      	b.n	8016c0c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d10d      	bne.n	8016c32 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8016c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c1a:	b672      	cpsid	i
 8016c1c:	f383 8811 	msr	BASEPRI, r3
 8016c20:	f3bf 8f6f 	isb	sy
 8016c24:	f3bf 8f4f 	dsb	sy
 8016c28:	b662      	cpsie	i
 8016c2a:	60fb      	str	r3, [r7, #12]
}
 8016c2c:	bf00      	nop
 8016c2e:	bf00      	nop
 8016c30:	e7fd      	b.n	8016c2e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8016c32:	f001 f9cb 	bl	8017fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016c36:	4b1d      	ldr	r3, [pc, #116]	@ (8016cac <xTaskCheckForTimeOut+0xc8>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	69ba      	ldr	r2, [r7, #24]
 8016c42:	1ad3      	subs	r3, r2, r3
 8016c44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c4e:	d102      	bne.n	8016c56 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016c50:	2300      	movs	r3, #0
 8016c52:	61fb      	str	r3, [r7, #28]
 8016c54:	e023      	b.n	8016c9e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	4b15      	ldr	r3, [pc, #84]	@ (8016cb0 <xTaskCheckForTimeOut+0xcc>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d007      	beq.n	8016c72 <xTaskCheckForTimeOut+0x8e>
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	69ba      	ldr	r2, [r7, #24]
 8016c68:	429a      	cmp	r2, r3
 8016c6a:	d302      	bcc.n	8016c72 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	61fb      	str	r3, [r7, #28]
 8016c70:	e015      	b.n	8016c9e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	697a      	ldr	r2, [r7, #20]
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	d20b      	bcs.n	8016c94 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	1ad2      	subs	r2, r2, r3
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f7ff ff95 	bl	8016bb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	61fb      	str	r3, [r7, #28]
 8016c92:	e004      	b.n	8016c9e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	2200      	movs	r2, #0
 8016c98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016c9e:	f001 f9cb 	bl	8018038 <vPortExitCritical>

	return xReturn;
 8016ca2:	69fb      	ldr	r3, [r7, #28]
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	3720      	adds	r7, #32
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	20005940 	.word	0x20005940
 8016cb0:	20005954 	.word	0x20005954

08016cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016cb4:	b480      	push	{r7}
 8016cb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016cb8:	4b03      	ldr	r3, [pc, #12]	@ (8016cc8 <vTaskMissedYield+0x14>)
 8016cba:	2201      	movs	r2, #1
 8016cbc:	601a      	str	r2, [r3, #0]
}
 8016cbe:	bf00      	nop
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr
 8016cc8:	20005950 	.word	0x20005950

08016ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016cd4:	f000 f852 	bl	8016d7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016cd8:	4b06      	ldr	r3, [pc, #24]	@ (8016cf4 <prvIdleTask+0x28>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2b01      	cmp	r3, #1
 8016cde:	d9f9      	bls.n	8016cd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016ce0:	4b05      	ldr	r3, [pc, #20]	@ (8016cf8 <prvIdleTask+0x2c>)
 8016ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016ce6:	601a      	str	r2, [r3, #0]
 8016ce8:	f3bf 8f4f 	dsb	sy
 8016cec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016cf0:	e7f0      	b.n	8016cd4 <prvIdleTask+0x8>
 8016cf2:	bf00      	nop
 8016cf4:	2000546c 	.word	0x2000546c
 8016cf8:	e000ed04 	.word	0xe000ed04

08016cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b082      	sub	sp, #8
 8016d00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016d02:	2300      	movs	r3, #0
 8016d04:	607b      	str	r3, [r7, #4]
 8016d06:	e00c      	b.n	8016d22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016d08:	687a      	ldr	r2, [r7, #4]
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	009b      	lsls	r3, r3, #2
 8016d0e:	4413      	add	r3, r2
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	4a12      	ldr	r2, [pc, #72]	@ (8016d5c <prvInitialiseTaskLists+0x60>)
 8016d14:	4413      	add	r3, r2
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7fe f961 	bl	8014fde <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	3301      	adds	r3, #1
 8016d20:	607b      	str	r3, [r7, #4]
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	2b37      	cmp	r3, #55	@ 0x37
 8016d26:	d9ef      	bls.n	8016d08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016d28:	480d      	ldr	r0, [pc, #52]	@ (8016d60 <prvInitialiseTaskLists+0x64>)
 8016d2a:	f7fe f958 	bl	8014fde <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016d2e:	480d      	ldr	r0, [pc, #52]	@ (8016d64 <prvInitialiseTaskLists+0x68>)
 8016d30:	f7fe f955 	bl	8014fde <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016d34:	480c      	ldr	r0, [pc, #48]	@ (8016d68 <prvInitialiseTaskLists+0x6c>)
 8016d36:	f7fe f952 	bl	8014fde <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016d3a:	480c      	ldr	r0, [pc, #48]	@ (8016d6c <prvInitialiseTaskLists+0x70>)
 8016d3c:	f7fe f94f 	bl	8014fde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016d40:	480b      	ldr	r0, [pc, #44]	@ (8016d70 <prvInitialiseTaskLists+0x74>)
 8016d42:	f7fe f94c 	bl	8014fde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016d46:	4b0b      	ldr	r3, [pc, #44]	@ (8016d74 <prvInitialiseTaskLists+0x78>)
 8016d48:	4a05      	ldr	r2, [pc, #20]	@ (8016d60 <prvInitialiseTaskLists+0x64>)
 8016d4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8016d78 <prvInitialiseTaskLists+0x7c>)
 8016d4e:	4a05      	ldr	r2, [pc, #20]	@ (8016d64 <prvInitialiseTaskLists+0x68>)
 8016d50:	601a      	str	r2, [r3, #0]
}
 8016d52:	bf00      	nop
 8016d54:	3708      	adds	r7, #8
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	bf00      	nop
 8016d5c:	2000546c 	.word	0x2000546c
 8016d60:	200058cc 	.word	0x200058cc
 8016d64:	200058e0 	.word	0x200058e0
 8016d68:	200058fc 	.word	0x200058fc
 8016d6c:	20005910 	.word	0x20005910
 8016d70:	20005928 	.word	0x20005928
 8016d74:	200058f4 	.word	0x200058f4
 8016d78:	200058f8 	.word	0x200058f8

08016d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016d82:	e019      	b.n	8016db8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016d84:	f001 f922 	bl	8017fcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d88:	4b10      	ldr	r3, [pc, #64]	@ (8016dcc <prvCheckTasksWaitingTermination+0x50>)
 8016d8a:	68db      	ldr	r3, [r3, #12]
 8016d8c:	68db      	ldr	r3, [r3, #12]
 8016d8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	3304      	adds	r3, #4
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7fe f9ac 	bl	80150f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8016dd0 <prvCheckTasksWaitingTermination+0x54>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	3b01      	subs	r3, #1
 8016da0:	4a0b      	ldr	r2, [pc, #44]	@ (8016dd0 <prvCheckTasksWaitingTermination+0x54>)
 8016da2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016da4:	4b0b      	ldr	r3, [pc, #44]	@ (8016dd4 <prvCheckTasksWaitingTermination+0x58>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	3b01      	subs	r3, #1
 8016daa:	4a0a      	ldr	r2, [pc, #40]	@ (8016dd4 <prvCheckTasksWaitingTermination+0x58>)
 8016dac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016dae:	f001 f943 	bl	8018038 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016db2:	6878      	ldr	r0, [r7, #4]
 8016db4:	f000 f810 	bl	8016dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016db8:	4b06      	ldr	r3, [pc, #24]	@ (8016dd4 <prvCheckTasksWaitingTermination+0x58>)
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d1e1      	bne.n	8016d84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016dc0:	bf00      	nop
 8016dc2:	bf00      	nop
 8016dc4:	3708      	adds	r7, #8
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}
 8016dca:	bf00      	nop
 8016dcc:	20005910 	.word	0x20005910
 8016dd0:	2000593c 	.word	0x2000593c
 8016dd4:	20005924 	.word	0x20005924

08016dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b084      	sub	sp, #16
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	3354      	adds	r3, #84	@ 0x54
 8016de4:	4618      	mov	r0, r3
 8016de6:	f001 fee9 	bl	8018bbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d108      	bne.n	8016e06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f001 fae3 	bl	80183c4 <vPortFree>
				vPortFree( pxTCB );
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f001 fae0 	bl	80183c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016e04:	e01b      	b.n	8016e3e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016e0c:	2b01      	cmp	r3, #1
 8016e0e:	d103      	bne.n	8016e18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	f001 fad7 	bl	80183c4 <vPortFree>
	}
 8016e16:	e012      	b.n	8016e3e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016e1e:	2b02      	cmp	r3, #2
 8016e20:	d00d      	beq.n	8016e3e <prvDeleteTCB+0x66>
	__asm volatile
 8016e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e26:	b672      	cpsid	i
 8016e28:	f383 8811 	msr	BASEPRI, r3
 8016e2c:	f3bf 8f6f 	isb	sy
 8016e30:	f3bf 8f4f 	dsb	sy
 8016e34:	b662      	cpsie	i
 8016e36:	60fb      	str	r3, [r7, #12]
}
 8016e38:	bf00      	nop
 8016e3a:	bf00      	nop
 8016e3c:	e7fd      	b.n	8016e3a <prvDeleteTCB+0x62>
	}
 8016e3e:	bf00      	nop
 8016e40:	3710      	adds	r7, #16
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}
	...

08016e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8016e80 <prvResetNextTaskUnblockTime+0x38>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d104      	bne.n	8016e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016e58:	4b0a      	ldr	r3, [pc, #40]	@ (8016e84 <prvResetNextTaskUnblockTime+0x3c>)
 8016e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016e60:	e008      	b.n	8016e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e62:	4b07      	ldr	r3, [pc, #28]	@ (8016e80 <prvResetNextTaskUnblockTime+0x38>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	68db      	ldr	r3, [r3, #12]
 8016e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	685b      	ldr	r3, [r3, #4]
 8016e70:	4a04      	ldr	r2, [pc, #16]	@ (8016e84 <prvResetNextTaskUnblockTime+0x3c>)
 8016e72:	6013      	str	r3, [r2, #0]
}
 8016e74:	bf00      	nop
 8016e76:	370c      	adds	r7, #12
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr
 8016e80:	200058f4 	.word	0x200058f4
 8016e84:	2000595c 	.word	0x2000595c

08016e88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016e88:	b480      	push	{r7}
 8016e8a:	b083      	sub	sp, #12
 8016e8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016e8e:	4b05      	ldr	r3, [pc, #20]	@ (8016ea4 <xTaskGetCurrentTaskHandle+0x1c>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016e94:	687b      	ldr	r3, [r7, #4]
	}
 8016e96:	4618      	mov	r0, r3
 8016e98:	370c      	adds	r7, #12
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea0:	4770      	bx	lr
 8016ea2:	bf00      	nop
 8016ea4:	20005468 	.word	0x20005468

08016ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016ea8:	b480      	push	{r7}
 8016eaa:	b083      	sub	sp, #12
 8016eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016eae:	4b0b      	ldr	r3, [pc, #44]	@ (8016edc <xTaskGetSchedulerState+0x34>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d102      	bne.n	8016ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	607b      	str	r3, [r7, #4]
 8016eba:	e008      	b.n	8016ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016ebc:	4b08      	ldr	r3, [pc, #32]	@ (8016ee0 <xTaskGetSchedulerState+0x38>)
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d102      	bne.n	8016eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016ec4:	2302      	movs	r3, #2
 8016ec6:	607b      	str	r3, [r7, #4]
 8016ec8:	e001      	b.n	8016ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016eca:	2300      	movs	r3, #0
 8016ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016ece:	687b      	ldr	r3, [r7, #4]
	}
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	370c      	adds	r7, #12
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eda:	4770      	bx	lr
 8016edc:	20005948 	.word	0x20005948
 8016ee0:	20005964 	.word	0x20005964

08016ee4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b084      	sub	sp, #16
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d051      	beq.n	8016f9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016efe:	4b2a      	ldr	r3, [pc, #168]	@ (8016fa8 <xTaskPriorityInherit+0xc4>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d241      	bcs.n	8016f8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	699b      	ldr	r3, [r3, #24]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	db06      	blt.n	8016f1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f10:	4b25      	ldr	r3, [pc, #148]	@ (8016fa8 <xTaskPriorityInherit+0xc4>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	6959      	ldr	r1, [r3, #20]
 8016f22:	68bb      	ldr	r3, [r7, #8]
 8016f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016f26:	4613      	mov	r3, r2
 8016f28:	009b      	lsls	r3, r3, #2
 8016f2a:	4413      	add	r3, r2
 8016f2c:	009b      	lsls	r3, r3, #2
 8016f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8016fac <xTaskPriorityInherit+0xc8>)
 8016f30:	4413      	add	r3, r2
 8016f32:	4299      	cmp	r1, r3
 8016f34:	d122      	bne.n	8016f7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	3304      	adds	r3, #4
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7fe f8d9 	bl	80150f2 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016f40:	4b19      	ldr	r3, [pc, #100]	@ (8016fa8 <xTaskPriorityInherit+0xc4>)
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016f4e:	4b18      	ldr	r3, [pc, #96]	@ (8016fb0 <xTaskPriorityInherit+0xcc>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d903      	bls.n	8016f5e <xTaskPriorityInherit+0x7a>
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f5a:	4a15      	ldr	r2, [pc, #84]	@ (8016fb0 <xTaskPriorityInherit+0xcc>)
 8016f5c:	6013      	str	r3, [r2, #0]
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016f62:	4613      	mov	r3, r2
 8016f64:	009b      	lsls	r3, r3, #2
 8016f66:	4413      	add	r3, r2
 8016f68:	009b      	lsls	r3, r3, #2
 8016f6a:	4a10      	ldr	r2, [pc, #64]	@ (8016fac <xTaskPriorityInherit+0xc8>)
 8016f6c:	441a      	add	r2, r3
 8016f6e:	68bb      	ldr	r3, [r7, #8]
 8016f70:	3304      	adds	r3, #4
 8016f72:	4619      	mov	r1, r3
 8016f74:	4610      	mov	r0, r2
 8016f76:	f7fe f85f 	bl	8015038 <vListInsertEnd>
 8016f7a:	e004      	b.n	8016f86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8016fa8 <xTaskPriorityInherit+0xc4>)
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016f86:	2301      	movs	r3, #1
 8016f88:	60fb      	str	r3, [r7, #12]
 8016f8a:	e008      	b.n	8016f9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016f90:	4b05      	ldr	r3, [pc, #20]	@ (8016fa8 <xTaskPriorityInherit+0xc4>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d201      	bcs.n	8016f9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016f9e:	68fb      	ldr	r3, [r7, #12]
	}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3710      	adds	r7, #16
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}
 8016fa8:	20005468 	.word	0x20005468
 8016fac:	2000546c 	.word	0x2000546c
 8016fb0:	20005944 	.word	0x20005944

08016fb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b086      	sub	sp, #24
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d05c      	beq.n	8017084 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016fca:	4b31      	ldr	r3, [pc, #196]	@ (8017090 <xTaskPriorityDisinherit+0xdc>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	693a      	ldr	r2, [r7, #16]
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d00d      	beq.n	8016ff0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8016fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fd8:	b672      	cpsid	i
 8016fda:	f383 8811 	msr	BASEPRI, r3
 8016fde:	f3bf 8f6f 	isb	sy
 8016fe2:	f3bf 8f4f 	dsb	sy
 8016fe6:	b662      	cpsie	i
 8016fe8:	60fb      	str	r3, [r7, #12]
}
 8016fea:	bf00      	nop
 8016fec:	bf00      	nop
 8016fee:	e7fd      	b.n	8016fec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d10d      	bne.n	8017014 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8016ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ffc:	b672      	cpsid	i
 8016ffe:	f383 8811 	msr	BASEPRI, r3
 8017002:	f3bf 8f6f 	isb	sy
 8017006:	f3bf 8f4f 	dsb	sy
 801700a:	b662      	cpsie	i
 801700c:	60bb      	str	r3, [r7, #8]
}
 801700e:	bf00      	nop
 8017010:	bf00      	nop
 8017012:	e7fd      	b.n	8017010 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8017014:	693b      	ldr	r3, [r7, #16]
 8017016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017018:	1e5a      	subs	r2, r3, #1
 801701a:	693b      	ldr	r3, [r7, #16]
 801701c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801701e:	693b      	ldr	r3, [r7, #16]
 8017020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017026:	429a      	cmp	r2, r3
 8017028:	d02c      	beq.n	8017084 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801702e:	2b00      	cmp	r3, #0
 8017030:	d128      	bne.n	8017084 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017032:	693b      	ldr	r3, [r7, #16]
 8017034:	3304      	adds	r3, #4
 8017036:	4618      	mov	r0, r3
 8017038:	f7fe f85b 	bl	80150f2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017040:	693b      	ldr	r3, [r7, #16]
 8017042:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017044:	693b      	ldr	r3, [r7, #16]
 8017046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017048:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017050:	693b      	ldr	r3, [r7, #16]
 8017052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017054:	4b0f      	ldr	r3, [pc, #60]	@ (8017094 <xTaskPriorityDisinherit+0xe0>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	429a      	cmp	r2, r3
 801705a:	d903      	bls.n	8017064 <xTaskPriorityDisinherit+0xb0>
 801705c:	693b      	ldr	r3, [r7, #16]
 801705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017060:	4a0c      	ldr	r2, [pc, #48]	@ (8017094 <xTaskPriorityDisinherit+0xe0>)
 8017062:	6013      	str	r3, [r2, #0]
 8017064:	693b      	ldr	r3, [r7, #16]
 8017066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017068:	4613      	mov	r3, r2
 801706a:	009b      	lsls	r3, r3, #2
 801706c:	4413      	add	r3, r2
 801706e:	009b      	lsls	r3, r3, #2
 8017070:	4a09      	ldr	r2, [pc, #36]	@ (8017098 <xTaskPriorityDisinherit+0xe4>)
 8017072:	441a      	add	r2, r3
 8017074:	693b      	ldr	r3, [r7, #16]
 8017076:	3304      	adds	r3, #4
 8017078:	4619      	mov	r1, r3
 801707a:	4610      	mov	r0, r2
 801707c:	f7fd ffdc 	bl	8015038 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017080:	2301      	movs	r3, #1
 8017082:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017084:	697b      	ldr	r3, [r7, #20]
	}
 8017086:	4618      	mov	r0, r3
 8017088:	3718      	adds	r7, #24
 801708a:	46bd      	mov	sp, r7
 801708c:	bd80      	pop	{r7, pc}
 801708e:	bf00      	nop
 8017090:	20005468 	.word	0x20005468
 8017094:	20005944 	.word	0x20005944
 8017098:	2000546c 	.word	0x2000546c

0801709c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801709c:	b580      	push	{r7, lr}
 801709e:	b088      	sub	sp, #32
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80170aa:	2301      	movs	r3, #1
 80170ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d070      	beq.n	8017196 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80170b4:	69bb      	ldr	r3, [r7, #24]
 80170b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d10d      	bne.n	80170d8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80170bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170c0:	b672      	cpsid	i
 80170c2:	f383 8811 	msr	BASEPRI, r3
 80170c6:	f3bf 8f6f 	isb	sy
 80170ca:	f3bf 8f4f 	dsb	sy
 80170ce:	b662      	cpsie	i
 80170d0:	60fb      	str	r3, [r7, #12]
}
 80170d2:	bf00      	nop
 80170d4:	bf00      	nop
 80170d6:	e7fd      	b.n	80170d4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80170d8:	69bb      	ldr	r3, [r7, #24]
 80170da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80170dc:	683a      	ldr	r2, [r7, #0]
 80170de:	429a      	cmp	r2, r3
 80170e0:	d902      	bls.n	80170e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	61fb      	str	r3, [r7, #28]
 80170e6:	e002      	b.n	80170ee <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80170e8:	69bb      	ldr	r3, [r7, #24]
 80170ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80170ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80170ee:	69bb      	ldr	r3, [r7, #24]
 80170f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170f2:	69fa      	ldr	r2, [r7, #28]
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d04e      	beq.n	8017196 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80170f8:	69bb      	ldr	r3, [r7, #24]
 80170fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170fc:	697a      	ldr	r2, [r7, #20]
 80170fe:	429a      	cmp	r2, r3
 8017100:	d149      	bne.n	8017196 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017102:	4b27      	ldr	r3, [pc, #156]	@ (80171a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	69ba      	ldr	r2, [r7, #24]
 8017108:	429a      	cmp	r2, r3
 801710a:	d10d      	bne.n	8017128 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 801710c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017110:	b672      	cpsid	i
 8017112:	f383 8811 	msr	BASEPRI, r3
 8017116:	f3bf 8f6f 	isb	sy
 801711a:	f3bf 8f4f 	dsb	sy
 801711e:	b662      	cpsie	i
 8017120:	60bb      	str	r3, [r7, #8]
}
 8017122:	bf00      	nop
 8017124:	bf00      	nop
 8017126:	e7fd      	b.n	8017124 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017128:	69bb      	ldr	r3, [r7, #24]
 801712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801712c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801712e:	69bb      	ldr	r3, [r7, #24]
 8017130:	69fa      	ldr	r2, [r7, #28]
 8017132:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017134:	69bb      	ldr	r3, [r7, #24]
 8017136:	699b      	ldr	r3, [r3, #24]
 8017138:	2b00      	cmp	r3, #0
 801713a:	db04      	blt.n	8017146 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801713c:	69fb      	ldr	r3, [r7, #28]
 801713e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017142:	69bb      	ldr	r3, [r7, #24]
 8017144:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017146:	69bb      	ldr	r3, [r7, #24]
 8017148:	6959      	ldr	r1, [r3, #20]
 801714a:	693a      	ldr	r2, [r7, #16]
 801714c:	4613      	mov	r3, r2
 801714e:	009b      	lsls	r3, r3, #2
 8017150:	4413      	add	r3, r2
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	4a13      	ldr	r2, [pc, #76]	@ (80171a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8017156:	4413      	add	r3, r2
 8017158:	4299      	cmp	r1, r3
 801715a:	d11c      	bne.n	8017196 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801715c:	69bb      	ldr	r3, [r7, #24]
 801715e:	3304      	adds	r3, #4
 8017160:	4618      	mov	r0, r3
 8017162:	f7fd ffc6 	bl	80150f2 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017166:	69bb      	ldr	r3, [r7, #24]
 8017168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801716a:	4b0f      	ldr	r3, [pc, #60]	@ (80171a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	429a      	cmp	r2, r3
 8017170:	d903      	bls.n	801717a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8017172:	69bb      	ldr	r3, [r7, #24]
 8017174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017176:	4a0c      	ldr	r2, [pc, #48]	@ (80171a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8017178:	6013      	str	r3, [r2, #0]
 801717a:	69bb      	ldr	r3, [r7, #24]
 801717c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801717e:	4613      	mov	r3, r2
 8017180:	009b      	lsls	r3, r3, #2
 8017182:	4413      	add	r3, r2
 8017184:	009b      	lsls	r3, r3, #2
 8017186:	4a07      	ldr	r2, [pc, #28]	@ (80171a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8017188:	441a      	add	r2, r3
 801718a:	69bb      	ldr	r3, [r7, #24]
 801718c:	3304      	adds	r3, #4
 801718e:	4619      	mov	r1, r3
 8017190:	4610      	mov	r0, r2
 8017192:	f7fd ff51 	bl	8015038 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017196:	bf00      	nop
 8017198:	3720      	adds	r7, #32
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}
 801719e:	bf00      	nop
 80171a0:	20005468 	.word	0x20005468
 80171a4:	2000546c 	.word	0x2000546c
 80171a8:	20005944 	.word	0x20005944

080171ac <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80171ac:	b480      	push	{r7}
 80171ae:	b083      	sub	sp, #12
 80171b0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80171b2:	4b09      	ldr	r3, [pc, #36]	@ (80171d8 <uxTaskResetEventItemValue+0x2c>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	699b      	ldr	r3, [r3, #24]
 80171b8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80171ba:	4b07      	ldr	r3, [pc, #28]	@ (80171d8 <uxTaskResetEventItemValue+0x2c>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80171c0:	4b05      	ldr	r3, [pc, #20]	@ (80171d8 <uxTaskResetEventItemValue+0x2c>)
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80171c8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80171ca:	687b      	ldr	r3, [r7, #4]
}
 80171cc:	4618      	mov	r0, r3
 80171ce:	370c      	adds	r7, #12
 80171d0:	46bd      	mov	sp, r7
 80171d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d6:	4770      	bx	lr
 80171d8:	20005468 	.word	0x20005468

080171dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80171dc:	b480      	push	{r7}
 80171de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80171e0:	4b07      	ldr	r3, [pc, #28]	@ (8017200 <pvTaskIncrementMutexHeldCount+0x24>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d004      	beq.n	80171f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80171e8:	4b05      	ldr	r3, [pc, #20]	@ (8017200 <pvTaskIncrementMutexHeldCount+0x24>)
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80171ee:	3201      	adds	r2, #1
 80171f0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80171f2:	4b03      	ldr	r3, [pc, #12]	@ (8017200 <pvTaskIncrementMutexHeldCount+0x24>)
 80171f4:	681b      	ldr	r3, [r3, #0]
	}
 80171f6:	4618      	mov	r0, r3
 80171f8:	46bd      	mov	sp, r7
 80171fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fe:	4770      	bx	lr
 8017200:	20005468 	.word	0x20005468

08017204 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8017204:	b580      	push	{r7, lr}
 8017206:	b086      	sub	sp, #24
 8017208:	af00      	add	r7, sp, #0
 801720a:	60f8      	str	r0, [r7, #12]
 801720c:	60b9      	str	r1, [r7, #8]
 801720e:	607a      	str	r2, [r7, #4]
 8017210:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8017212:	f000 fedb 	bl	8017fcc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017216:	4b29      	ldr	r3, [pc, #164]	@ (80172bc <xTaskNotifyWait+0xb8>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801721e:	b2db      	uxtb	r3, r3
 8017220:	2b02      	cmp	r3, #2
 8017222:	d01c      	beq.n	801725e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8017224:	4b25      	ldr	r3, [pc, #148]	@ (80172bc <xTaskNotifyWait+0xb8>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801722c:	68fa      	ldr	r2, [r7, #12]
 801722e:	43d2      	mvns	r2, r2
 8017230:	400a      	ands	r2, r1
 8017232:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017236:	4b21      	ldr	r3, [pc, #132]	@ (80172bc <xTaskNotifyWait+0xb8>)
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	2201      	movs	r2, #1
 801723c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d00b      	beq.n	801725e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017246:	2101      	movs	r1, #1
 8017248:	6838      	ldr	r0, [r7, #0]
 801724a:	f000 f9f1 	bl	8017630 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801724e:	4b1c      	ldr	r3, [pc, #112]	@ (80172c0 <xTaskNotifyWait+0xbc>)
 8017250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017254:	601a      	str	r2, [r3, #0]
 8017256:	f3bf 8f4f 	dsb	sy
 801725a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801725e:	f000 feeb 	bl	8018038 <vPortExitCritical>

		taskENTER_CRITICAL();
 8017262:	f000 feb3 	bl	8017fcc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d005      	beq.n	8017278 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801726c:	4b13      	ldr	r3, [pc, #76]	@ (80172bc <xTaskNotifyWait+0xb8>)
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017278:	4b10      	ldr	r3, [pc, #64]	@ (80172bc <xTaskNotifyWait+0xb8>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8017280:	b2db      	uxtb	r3, r3
 8017282:	2b02      	cmp	r3, #2
 8017284:	d002      	beq.n	801728c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8017286:	2300      	movs	r3, #0
 8017288:	617b      	str	r3, [r7, #20]
 801728a:	e00a      	b.n	80172a2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801728c:	4b0b      	ldr	r3, [pc, #44]	@ (80172bc <xTaskNotifyWait+0xb8>)
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8017294:	68ba      	ldr	r2, [r7, #8]
 8017296:	43d2      	mvns	r2, r2
 8017298:	400a      	ands	r2, r1
 801729a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 801729e:	2301      	movs	r3, #1
 80172a0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80172a2:	4b06      	ldr	r3, [pc, #24]	@ (80172bc <xTaskNotifyWait+0xb8>)
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	2200      	movs	r2, #0
 80172a8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80172ac:	f000 fec4 	bl	8018038 <vPortExitCritical>

		return xReturn;
 80172b0:	697b      	ldr	r3, [r7, #20]
	}
 80172b2:	4618      	mov	r0, r3
 80172b4:	3718      	adds	r7, #24
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bd80      	pop	{r7, pc}
 80172ba:	bf00      	nop
 80172bc:	20005468 	.word	0x20005468
 80172c0:	e000ed04 	.word	0xe000ed04

080172c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b08a      	sub	sp, #40	@ 0x28
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	60f8      	str	r0, [r7, #12]
 80172cc:	60b9      	str	r1, [r7, #8]
 80172ce:	603b      	str	r3, [r7, #0]
 80172d0:	4613      	mov	r3, r2
 80172d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80172d4:	2301      	movs	r3, #1
 80172d6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d10d      	bne.n	80172fa <xTaskGenericNotify+0x36>
	__asm volatile
 80172de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172e2:	b672      	cpsid	i
 80172e4:	f383 8811 	msr	BASEPRI, r3
 80172e8:	f3bf 8f6f 	isb	sy
 80172ec:	f3bf 8f4f 	dsb	sy
 80172f0:	b662      	cpsie	i
 80172f2:	61bb      	str	r3, [r7, #24]
}
 80172f4:	bf00      	nop
 80172f6:	bf00      	nop
 80172f8:	e7fd      	b.n	80172f6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80172fe:	f000 fe65 	bl	8017fcc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d004      	beq.n	8017312 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017308:	6a3b      	ldr	r3, [r7, #32]
 801730a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017312:	6a3b      	ldr	r3, [r7, #32]
 8017314:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8017318:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801731a:	6a3b      	ldr	r3, [r7, #32]
 801731c:	2202      	movs	r2, #2
 801731e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8017322:	79fb      	ldrb	r3, [r7, #7]
 8017324:	2b04      	cmp	r3, #4
 8017326:	d82e      	bhi.n	8017386 <xTaskGenericNotify+0xc2>
 8017328:	a201      	add	r2, pc, #4	@ (adr r2, 8017330 <xTaskGenericNotify+0x6c>)
 801732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801732e:	bf00      	nop
 8017330:	080173af 	.word	0x080173af
 8017334:	08017345 	.word	0x08017345
 8017338:	08017357 	.word	0x08017357
 801733c:	08017367 	.word	0x08017367
 8017340:	08017371 	.word	0x08017371
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017344:	6a3b      	ldr	r3, [r7, #32]
 8017346:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801734a:	68bb      	ldr	r3, [r7, #8]
 801734c:	431a      	orrs	r2, r3
 801734e:	6a3b      	ldr	r3, [r7, #32]
 8017350:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8017354:	e02e      	b.n	80173b4 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017356:	6a3b      	ldr	r3, [r7, #32]
 8017358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801735c:	1c5a      	adds	r2, r3, #1
 801735e:	6a3b      	ldr	r3, [r7, #32]
 8017360:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8017364:	e026      	b.n	80173b4 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017366:	6a3b      	ldr	r3, [r7, #32]
 8017368:	68ba      	ldr	r2, [r7, #8]
 801736a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801736e:	e021      	b.n	80173b4 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017370:	7ffb      	ldrb	r3, [r7, #31]
 8017372:	2b02      	cmp	r3, #2
 8017374:	d004      	beq.n	8017380 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017376:	6a3b      	ldr	r3, [r7, #32]
 8017378:	68ba      	ldr	r2, [r7, #8]
 801737a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801737e:	e019      	b.n	80173b4 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8017380:	2300      	movs	r3, #0
 8017382:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8017384:	e016      	b.n	80173b4 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017386:	6a3b      	ldr	r3, [r7, #32]
 8017388:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801738c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017390:	d00f      	beq.n	80173b2 <xTaskGenericNotify+0xee>
	__asm volatile
 8017392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017396:	b672      	cpsid	i
 8017398:	f383 8811 	msr	BASEPRI, r3
 801739c:	f3bf 8f6f 	isb	sy
 80173a0:	f3bf 8f4f 	dsb	sy
 80173a4:	b662      	cpsie	i
 80173a6:	617b      	str	r3, [r7, #20]
}
 80173a8:	bf00      	nop
 80173aa:	bf00      	nop
 80173ac:	e7fd      	b.n	80173aa <xTaskGenericNotify+0xe6>
					break;
 80173ae:	bf00      	nop
 80173b0:	e000      	b.n	80173b4 <xTaskGenericNotify+0xf0>

					break;
 80173b2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80173b4:	7ffb      	ldrb	r3, [r7, #31]
 80173b6:	2b01      	cmp	r3, #1
 80173b8:	d13d      	bne.n	8017436 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80173ba:	6a3b      	ldr	r3, [r7, #32]
 80173bc:	3304      	adds	r3, #4
 80173be:	4618      	mov	r0, r3
 80173c0:	f7fd fe97 	bl	80150f2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80173c4:	6a3b      	ldr	r3, [r7, #32]
 80173c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80173c8:	4b1e      	ldr	r3, [pc, #120]	@ (8017444 <xTaskGenericNotify+0x180>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d903      	bls.n	80173d8 <xTaskGenericNotify+0x114>
 80173d0:	6a3b      	ldr	r3, [r7, #32]
 80173d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173d4:	4a1b      	ldr	r2, [pc, #108]	@ (8017444 <xTaskGenericNotify+0x180>)
 80173d6:	6013      	str	r3, [r2, #0]
 80173d8:	6a3b      	ldr	r3, [r7, #32]
 80173da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80173dc:	4613      	mov	r3, r2
 80173de:	009b      	lsls	r3, r3, #2
 80173e0:	4413      	add	r3, r2
 80173e2:	009b      	lsls	r3, r3, #2
 80173e4:	4a18      	ldr	r2, [pc, #96]	@ (8017448 <xTaskGenericNotify+0x184>)
 80173e6:	441a      	add	r2, r3
 80173e8:	6a3b      	ldr	r3, [r7, #32]
 80173ea:	3304      	adds	r3, #4
 80173ec:	4619      	mov	r1, r3
 80173ee:	4610      	mov	r0, r2
 80173f0:	f7fd fe22 	bl	8015038 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80173f4:	6a3b      	ldr	r3, [r7, #32]
 80173f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d00d      	beq.n	8017418 <xTaskGenericNotify+0x154>
	__asm volatile
 80173fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017400:	b672      	cpsid	i
 8017402:	f383 8811 	msr	BASEPRI, r3
 8017406:	f3bf 8f6f 	isb	sy
 801740a:	f3bf 8f4f 	dsb	sy
 801740e:	b662      	cpsie	i
 8017410:	613b      	str	r3, [r7, #16]
}
 8017412:	bf00      	nop
 8017414:	bf00      	nop
 8017416:	e7fd      	b.n	8017414 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017418:	6a3b      	ldr	r3, [r7, #32]
 801741a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801741c:	4b0b      	ldr	r3, [pc, #44]	@ (801744c <xTaskGenericNotify+0x188>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017422:	429a      	cmp	r2, r3
 8017424:	d907      	bls.n	8017436 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8017426:	4b0a      	ldr	r3, [pc, #40]	@ (8017450 <xTaskGenericNotify+0x18c>)
 8017428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801742c:	601a      	str	r2, [r3, #0]
 801742e:	f3bf 8f4f 	dsb	sy
 8017432:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017436:	f000 fdff 	bl	8018038 <vPortExitCritical>

		return xReturn;
 801743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801743c:	4618      	mov	r0, r3
 801743e:	3728      	adds	r7, #40	@ 0x28
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}
 8017444:	20005944 	.word	0x20005944
 8017448:	2000546c 	.word	0x2000546c
 801744c:	20005468 	.word	0x20005468
 8017450:	e000ed04 	.word	0xe000ed04

08017454 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017454:	b580      	push	{r7, lr}
 8017456:	b08e      	sub	sp, #56	@ 0x38
 8017458:	af00      	add	r7, sp, #0
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	60b9      	str	r1, [r7, #8]
 801745e:	603b      	str	r3, [r7, #0]
 8017460:	4613      	mov	r3, r2
 8017462:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8017464:	2301      	movs	r3, #1
 8017466:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d10d      	bne.n	801748a <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 801746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017472:	b672      	cpsid	i
 8017474:	f383 8811 	msr	BASEPRI, r3
 8017478:	f3bf 8f6f 	isb	sy
 801747c:	f3bf 8f4f 	dsb	sy
 8017480:	b662      	cpsie	i
 8017482:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8017484:	bf00      	nop
 8017486:	bf00      	nop
 8017488:	e7fd      	b.n	8017486 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801748a:	f000 fe87 	bl	801819c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8017492:	f3ef 8211 	mrs	r2, BASEPRI
 8017496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801749a:	b672      	cpsid	i
 801749c:	f383 8811 	msr	BASEPRI, r3
 80174a0:	f3bf 8f6f 	isb	sy
 80174a4:	f3bf 8f4f 	dsb	sy
 80174a8:	b662      	cpsie	i
 80174aa:	623a      	str	r2, [r7, #32]
 80174ac:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80174ae:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80174b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d004      	beq.n	80174c2 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80174b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80174c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174c4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80174c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80174cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174ce:	2202      	movs	r2, #2
 80174d0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80174d4:	79fb      	ldrb	r3, [r7, #7]
 80174d6:	2b04      	cmp	r3, #4
 80174d8:	d82e      	bhi.n	8017538 <xTaskGenericNotifyFromISR+0xe4>
 80174da:	a201      	add	r2, pc, #4	@ (adr r2, 80174e0 <xTaskGenericNotifyFromISR+0x8c>)
 80174dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174e0:	08017561 	.word	0x08017561
 80174e4:	080174f5 	.word	0x080174f5
 80174e8:	08017507 	.word	0x08017507
 80174ec:	08017517 	.word	0x08017517
 80174f0:	08017521 	.word	0x08017521
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80174f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	431a      	orrs	r2, r3
 80174fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017500:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8017504:	e02f      	b.n	8017566 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801750c:	1c5a      	adds	r2, r3, #1
 801750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017510:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8017514:	e027      	b.n	8017566 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017518:	68ba      	ldr	r2, [r7, #8]
 801751a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801751e:	e022      	b.n	8017566 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017520:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017524:	2b02      	cmp	r3, #2
 8017526:	d004      	beq.n	8017532 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801752a:	68ba      	ldr	r2, [r7, #8]
 801752c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017530:	e019      	b.n	8017566 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8017532:	2300      	movs	r3, #0
 8017534:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8017536:	e016      	b.n	8017566 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801753a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017542:	d00f      	beq.n	8017564 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8017544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017548:	b672      	cpsid	i
 801754a:	f383 8811 	msr	BASEPRI, r3
 801754e:	f3bf 8f6f 	isb	sy
 8017552:	f3bf 8f4f 	dsb	sy
 8017556:	b662      	cpsie	i
 8017558:	61bb      	str	r3, [r7, #24]
}
 801755a:	bf00      	nop
 801755c:	bf00      	nop
 801755e:	e7fd      	b.n	801755c <xTaskGenericNotifyFromISR+0x108>
					break;
 8017560:	bf00      	nop
 8017562:	e000      	b.n	8017566 <xTaskGenericNotifyFromISR+0x112>
					break;
 8017564:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017566:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801756a:	2b01      	cmp	r3, #1
 801756c:	d149      	bne.n	8017602 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017572:	2b00      	cmp	r3, #0
 8017574:	d00d      	beq.n	8017592 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8017576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801757a:	b672      	cpsid	i
 801757c:	f383 8811 	msr	BASEPRI, r3
 8017580:	f3bf 8f6f 	isb	sy
 8017584:	f3bf 8f4f 	dsb	sy
 8017588:	b662      	cpsie	i
 801758a:	617b      	str	r3, [r7, #20]
}
 801758c:	bf00      	nop
 801758e:	bf00      	nop
 8017590:	e7fd      	b.n	801758e <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017592:	4b21      	ldr	r3, [pc, #132]	@ (8017618 <xTaskGenericNotifyFromISR+0x1c4>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d11d      	bne.n	80175d6 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801759c:	3304      	adds	r3, #4
 801759e:	4618      	mov	r0, r3
 80175a0:	f7fd fda7 	bl	80150f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80175a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80175a8:	4b1c      	ldr	r3, [pc, #112]	@ (801761c <xTaskGenericNotifyFromISR+0x1c8>)
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d903      	bls.n	80175b8 <xTaskGenericNotifyFromISR+0x164>
 80175b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80175b4:	4a19      	ldr	r2, [pc, #100]	@ (801761c <xTaskGenericNotifyFromISR+0x1c8>)
 80175b6:	6013      	str	r3, [r2, #0]
 80175b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80175bc:	4613      	mov	r3, r2
 80175be:	009b      	lsls	r3, r3, #2
 80175c0:	4413      	add	r3, r2
 80175c2:	009b      	lsls	r3, r3, #2
 80175c4:	4a16      	ldr	r2, [pc, #88]	@ (8017620 <xTaskGenericNotifyFromISR+0x1cc>)
 80175c6:	441a      	add	r2, r3
 80175c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175ca:	3304      	adds	r3, #4
 80175cc:	4619      	mov	r1, r3
 80175ce:	4610      	mov	r0, r2
 80175d0:	f7fd fd32 	bl	8015038 <vListInsertEnd>
 80175d4:	e005      	b.n	80175e2 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80175d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175d8:	3318      	adds	r3, #24
 80175da:	4619      	mov	r1, r3
 80175dc:	4811      	ldr	r0, [pc, #68]	@ (8017624 <xTaskGenericNotifyFromISR+0x1d0>)
 80175de:	f7fd fd2b 	bl	8015038 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80175e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80175e6:	4b10      	ldr	r3, [pc, #64]	@ (8017628 <xTaskGenericNotifyFromISR+0x1d4>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d908      	bls.n	8017602 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80175f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d002      	beq.n	80175fc <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80175f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175f8:	2201      	movs	r2, #1
 80175fa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80175fc:	4b0b      	ldr	r3, [pc, #44]	@ (801762c <xTaskGenericNotifyFromISR+0x1d8>)
 80175fe:	2201      	movs	r2, #1
 8017600:	601a      	str	r2, [r3, #0]
 8017602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017604:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017606:	693b      	ldr	r3, [r7, #16]
 8017608:	f383 8811 	msr	BASEPRI, r3
}
 801760c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801760e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8017610:	4618      	mov	r0, r3
 8017612:	3738      	adds	r7, #56	@ 0x38
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}
 8017618:	20005964 	.word	0x20005964
 801761c:	20005944 	.word	0x20005944
 8017620:	2000546c 	.word	0x2000546c
 8017624:	200058fc 	.word	0x200058fc
 8017628:	20005468 	.word	0x20005468
 801762c:	20005950 	.word	0x20005950

08017630 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b084      	sub	sp, #16
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
 8017638:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801763a:	4b21      	ldr	r3, [pc, #132]	@ (80176c0 <prvAddCurrentTaskToDelayedList+0x90>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017640:	4b20      	ldr	r3, [pc, #128]	@ (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	3304      	adds	r3, #4
 8017646:	4618      	mov	r0, r3
 8017648:	f7fd fd53 	bl	80150f2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017652:	d10a      	bne.n	801766a <prvAddCurrentTaskToDelayedList+0x3a>
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d007      	beq.n	801766a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801765a:	4b1a      	ldr	r3, [pc, #104]	@ (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	3304      	adds	r3, #4
 8017660:	4619      	mov	r1, r3
 8017662:	4819      	ldr	r0, [pc, #100]	@ (80176c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8017664:	f7fd fce8 	bl	8015038 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017668:	e026      	b.n	80176b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801766a:	68fa      	ldr	r2, [r7, #12]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	4413      	add	r3, r2
 8017670:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017672:	4b14      	ldr	r3, [pc, #80]	@ (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	68ba      	ldr	r2, [r7, #8]
 8017678:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801767a:	68ba      	ldr	r2, [r7, #8]
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	429a      	cmp	r2, r3
 8017680:	d209      	bcs.n	8017696 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017682:	4b12      	ldr	r3, [pc, #72]	@ (80176cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	4b0f      	ldr	r3, [pc, #60]	@ (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	3304      	adds	r3, #4
 801768c:	4619      	mov	r1, r3
 801768e:	4610      	mov	r0, r2
 8017690:	f7fd fcf6 	bl	8015080 <vListInsert>
}
 8017694:	e010      	b.n	80176b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017696:	4b0e      	ldr	r3, [pc, #56]	@ (80176d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017698:	681a      	ldr	r2, [r3, #0]
 801769a:	4b0a      	ldr	r3, [pc, #40]	@ (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	3304      	adds	r3, #4
 80176a0:	4619      	mov	r1, r3
 80176a2:	4610      	mov	r0, r2
 80176a4:	f7fd fcec 	bl	8015080 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80176a8:	4b0a      	ldr	r3, [pc, #40]	@ (80176d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	68ba      	ldr	r2, [r7, #8]
 80176ae:	429a      	cmp	r2, r3
 80176b0:	d202      	bcs.n	80176b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80176b2:	4a08      	ldr	r2, [pc, #32]	@ (80176d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	6013      	str	r3, [r2, #0]
}
 80176b8:	bf00      	nop
 80176ba:	3710      	adds	r7, #16
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}
 80176c0:	20005940 	.word	0x20005940
 80176c4:	20005468 	.word	0x20005468
 80176c8:	20005928 	.word	0x20005928
 80176cc:	200058f8 	.word	0x200058f8
 80176d0:	200058f4 	.word	0x200058f4
 80176d4:	2000595c 	.word	0x2000595c

080176d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b08a      	sub	sp, #40	@ 0x28
 80176dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80176de:	2300      	movs	r3, #0
 80176e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80176e2:	f000 fb21 	bl	8017d28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80176e6:	4b1e      	ldr	r3, [pc, #120]	@ (8017760 <xTimerCreateTimerTask+0x88>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d021      	beq.n	8017732 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80176ee:	2300      	movs	r3, #0
 80176f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80176f2:	2300      	movs	r3, #0
 80176f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80176f6:	1d3a      	adds	r2, r7, #4
 80176f8:	f107 0108 	add.w	r1, r7, #8
 80176fc:	f107 030c 	add.w	r3, r7, #12
 8017700:	4618      	mov	r0, r3
 8017702:	f7fd fa37 	bl	8014b74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017706:	6879      	ldr	r1, [r7, #4]
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	68fa      	ldr	r2, [r7, #12]
 801770c:	9202      	str	r2, [sp, #8]
 801770e:	9301      	str	r3, [sp, #4]
 8017710:	2302      	movs	r3, #2
 8017712:	9300      	str	r3, [sp, #0]
 8017714:	2300      	movs	r3, #0
 8017716:	460a      	mov	r2, r1
 8017718:	4912      	ldr	r1, [pc, #72]	@ (8017764 <xTimerCreateTimerTask+0x8c>)
 801771a:	4813      	ldr	r0, [pc, #76]	@ (8017768 <xTimerCreateTimerTask+0x90>)
 801771c:	f7fe fc68 	bl	8015ff0 <xTaskCreateStatic>
 8017720:	4603      	mov	r3, r0
 8017722:	4a12      	ldr	r2, [pc, #72]	@ (801776c <xTimerCreateTimerTask+0x94>)
 8017724:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017726:	4b11      	ldr	r3, [pc, #68]	@ (801776c <xTimerCreateTimerTask+0x94>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d001      	beq.n	8017732 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801772e:	2301      	movs	r3, #1
 8017730:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017732:	697b      	ldr	r3, [r7, #20]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d10d      	bne.n	8017754 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8017738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801773c:	b672      	cpsid	i
 801773e:	f383 8811 	msr	BASEPRI, r3
 8017742:	f3bf 8f6f 	isb	sy
 8017746:	f3bf 8f4f 	dsb	sy
 801774a:	b662      	cpsie	i
 801774c:	613b      	str	r3, [r7, #16]
}
 801774e:	bf00      	nop
 8017750:	bf00      	nop
 8017752:	e7fd      	b.n	8017750 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8017754:	697b      	ldr	r3, [r7, #20]
}
 8017756:	4618      	mov	r0, r3
 8017758:	3718      	adds	r7, #24
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	20005998 	.word	0x20005998
 8017764:	08019db8 	.word	0x08019db8
 8017768:	080178b1 	.word	0x080178b1
 801776c:	2000599c 	.word	0x2000599c

08017770 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b08a      	sub	sp, #40	@ 0x28
 8017774:	af00      	add	r7, sp, #0
 8017776:	60f8      	str	r0, [r7, #12]
 8017778:	60b9      	str	r1, [r7, #8]
 801777a:	607a      	str	r2, [r7, #4]
 801777c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801777e:	2300      	movs	r3, #0
 8017780:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d10d      	bne.n	80177a4 <xTimerGenericCommand+0x34>
	__asm volatile
 8017788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801778c:	b672      	cpsid	i
 801778e:	f383 8811 	msr	BASEPRI, r3
 8017792:	f3bf 8f6f 	isb	sy
 8017796:	f3bf 8f4f 	dsb	sy
 801779a:	b662      	cpsie	i
 801779c:	623b      	str	r3, [r7, #32]
}
 801779e:	bf00      	nop
 80177a0:	bf00      	nop
 80177a2:	e7fd      	b.n	80177a0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80177a4:	4b19      	ldr	r3, [pc, #100]	@ (801780c <xTimerGenericCommand+0x9c>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d02a      	beq.n	8017802 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80177ac:	68bb      	ldr	r3, [r7, #8]
 80177ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80177b8:	68bb      	ldr	r3, [r7, #8]
 80177ba:	2b05      	cmp	r3, #5
 80177bc:	dc18      	bgt.n	80177f0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80177be:	f7ff fb73 	bl	8016ea8 <xTaskGetSchedulerState>
 80177c2:	4603      	mov	r3, r0
 80177c4:	2b02      	cmp	r3, #2
 80177c6:	d109      	bne.n	80177dc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80177c8:	4b10      	ldr	r3, [pc, #64]	@ (801780c <xTimerGenericCommand+0x9c>)
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	f107 0110 	add.w	r1, r7, #16
 80177d0:	2300      	movs	r3, #0
 80177d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80177d4:	f7fd fe40 	bl	8015458 <xQueueGenericSend>
 80177d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80177da:	e012      	b.n	8017802 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80177dc:	4b0b      	ldr	r3, [pc, #44]	@ (801780c <xTimerGenericCommand+0x9c>)
 80177de:	6818      	ldr	r0, [r3, #0]
 80177e0:	f107 0110 	add.w	r1, r7, #16
 80177e4:	2300      	movs	r3, #0
 80177e6:	2200      	movs	r2, #0
 80177e8:	f7fd fe36 	bl	8015458 <xQueueGenericSend>
 80177ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80177ee:	e008      	b.n	8017802 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80177f0:	4b06      	ldr	r3, [pc, #24]	@ (801780c <xTimerGenericCommand+0x9c>)
 80177f2:	6818      	ldr	r0, [r3, #0]
 80177f4:	f107 0110 	add.w	r1, r7, #16
 80177f8:	2300      	movs	r3, #0
 80177fa:	683a      	ldr	r2, [r7, #0]
 80177fc:	f7fd ff36 	bl	801566c <xQueueGenericSendFromISR>
 8017800:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017804:	4618      	mov	r0, r3
 8017806:	3728      	adds	r7, #40	@ 0x28
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}
 801780c:	20005998 	.word	0x20005998

08017810 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b088      	sub	sp, #32
 8017814:	af02      	add	r7, sp, #8
 8017816:	6078      	str	r0, [r7, #4]
 8017818:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801781a:	4b24      	ldr	r3, [pc, #144]	@ (80178ac <prvProcessExpiredTimer+0x9c>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	68db      	ldr	r3, [r3, #12]
 8017820:	68db      	ldr	r3, [r3, #12]
 8017822:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017824:	697b      	ldr	r3, [r7, #20]
 8017826:	3304      	adds	r3, #4
 8017828:	4618      	mov	r0, r3
 801782a:	f7fd fc62 	bl	80150f2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017834:	f003 0304 	and.w	r3, r3, #4
 8017838:	2b00      	cmp	r3, #0
 801783a:	d025      	beq.n	8017888 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	699a      	ldr	r2, [r3, #24]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	18d1      	adds	r1, r2, r3
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	683a      	ldr	r2, [r7, #0]
 8017848:	6978      	ldr	r0, [r7, #20]
 801784a:	f000 f8d7 	bl	80179fc <prvInsertTimerInActiveList>
 801784e:	4603      	mov	r3, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d022      	beq.n	801789a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017854:	2300      	movs	r3, #0
 8017856:	9300      	str	r3, [sp, #0]
 8017858:	2300      	movs	r3, #0
 801785a:	687a      	ldr	r2, [r7, #4]
 801785c:	2100      	movs	r1, #0
 801785e:	6978      	ldr	r0, [r7, #20]
 8017860:	f7ff ff86 	bl	8017770 <xTimerGenericCommand>
 8017864:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017866:	693b      	ldr	r3, [r7, #16]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d116      	bne.n	801789a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 801786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017870:	b672      	cpsid	i
 8017872:	f383 8811 	msr	BASEPRI, r3
 8017876:	f3bf 8f6f 	isb	sy
 801787a:	f3bf 8f4f 	dsb	sy
 801787e:	b662      	cpsie	i
 8017880:	60fb      	str	r3, [r7, #12]
}
 8017882:	bf00      	nop
 8017884:	bf00      	nop
 8017886:	e7fd      	b.n	8017884 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017888:	697b      	ldr	r3, [r7, #20]
 801788a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801788e:	f023 0301 	bic.w	r3, r3, #1
 8017892:	b2da      	uxtb	r2, r3
 8017894:	697b      	ldr	r3, [r7, #20]
 8017896:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	6a1b      	ldr	r3, [r3, #32]
 801789e:	6978      	ldr	r0, [r7, #20]
 80178a0:	4798      	blx	r3
}
 80178a2:	bf00      	nop
 80178a4:	3718      	adds	r7, #24
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	20005990 	.word	0x20005990

080178b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80178b8:	f107 0308 	add.w	r3, r7, #8
 80178bc:	4618      	mov	r0, r3
 80178be:	f000 f859 	bl	8017974 <prvGetNextExpireTime>
 80178c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	4619      	mov	r1, r3
 80178c8:	68f8      	ldr	r0, [r7, #12]
 80178ca:	f000 f805 	bl	80178d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80178ce:	f000 f8d7 	bl	8017a80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80178d2:	bf00      	nop
 80178d4:	e7f0      	b.n	80178b8 <prvTimerTask+0x8>
	...

080178d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b084      	sub	sp, #16
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
 80178e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80178e2:	f7fe fdf7 	bl	80164d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80178e6:	f107 0308 	add.w	r3, r7, #8
 80178ea:	4618      	mov	r0, r3
 80178ec:	f000 f866 	bl	80179bc <prvSampleTimeNow>
 80178f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80178f2:	68bb      	ldr	r3, [r7, #8]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d130      	bne.n	801795a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d10a      	bne.n	8017914 <prvProcessTimerOrBlockTask+0x3c>
 80178fe:	687a      	ldr	r2, [r7, #4]
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	429a      	cmp	r2, r3
 8017904:	d806      	bhi.n	8017914 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017906:	f7fe fdf3 	bl	80164f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801790a:	68f9      	ldr	r1, [r7, #12]
 801790c:	6878      	ldr	r0, [r7, #4]
 801790e:	f7ff ff7f 	bl	8017810 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017912:	e024      	b.n	801795e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017914:	683b      	ldr	r3, [r7, #0]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d008      	beq.n	801792c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801791a:	4b13      	ldr	r3, [pc, #76]	@ (8017968 <prvProcessTimerOrBlockTask+0x90>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d101      	bne.n	8017928 <prvProcessTimerOrBlockTask+0x50>
 8017924:	2301      	movs	r3, #1
 8017926:	e000      	b.n	801792a <prvProcessTimerOrBlockTask+0x52>
 8017928:	2300      	movs	r3, #0
 801792a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801792c:	4b0f      	ldr	r3, [pc, #60]	@ (801796c <prvProcessTimerOrBlockTask+0x94>)
 801792e:	6818      	ldr	r0, [r3, #0]
 8017930:	687a      	ldr	r2, [r7, #4]
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	1ad3      	subs	r3, r2, r3
 8017936:	683a      	ldr	r2, [r7, #0]
 8017938:	4619      	mov	r1, r3
 801793a:	f7fe fb25 	bl	8015f88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801793e:	f7fe fdd7 	bl	80164f0 <xTaskResumeAll>
 8017942:	4603      	mov	r3, r0
 8017944:	2b00      	cmp	r3, #0
 8017946:	d10a      	bne.n	801795e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017948:	4b09      	ldr	r3, [pc, #36]	@ (8017970 <prvProcessTimerOrBlockTask+0x98>)
 801794a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801794e:	601a      	str	r2, [r3, #0]
 8017950:	f3bf 8f4f 	dsb	sy
 8017954:	f3bf 8f6f 	isb	sy
}
 8017958:	e001      	b.n	801795e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801795a:	f7fe fdc9 	bl	80164f0 <xTaskResumeAll>
}
 801795e:	bf00      	nop
 8017960:	3710      	adds	r7, #16
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
 8017966:	bf00      	nop
 8017968:	20005994 	.word	0x20005994
 801796c:	20005998 	.word	0x20005998
 8017970:	e000ed04 	.word	0xe000ed04

08017974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017974:	b480      	push	{r7}
 8017976:	b085      	sub	sp, #20
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801797c:	4b0e      	ldr	r3, [pc, #56]	@ (80179b8 <prvGetNextExpireTime+0x44>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d101      	bne.n	801798a <prvGetNextExpireTime+0x16>
 8017986:	2201      	movs	r2, #1
 8017988:	e000      	b.n	801798c <prvGetNextExpireTime+0x18>
 801798a:	2200      	movs	r2, #0
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d105      	bne.n	80179a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017998:	4b07      	ldr	r3, [pc, #28]	@ (80179b8 <prvGetNextExpireTime+0x44>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	68db      	ldr	r3, [r3, #12]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	60fb      	str	r3, [r7, #12]
 80179a2:	e001      	b.n	80179a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80179a4:	2300      	movs	r3, #0
 80179a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80179a8:	68fb      	ldr	r3, [r7, #12]
}
 80179aa:	4618      	mov	r0, r3
 80179ac:	3714      	adds	r7, #20
 80179ae:	46bd      	mov	sp, r7
 80179b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b4:	4770      	bx	lr
 80179b6:	bf00      	nop
 80179b8:	20005990 	.word	0x20005990

080179bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b084      	sub	sp, #16
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80179c4:	f7fe fe34 	bl	8016630 <xTaskGetTickCount>
 80179c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80179ca:	4b0b      	ldr	r3, [pc, #44]	@ (80179f8 <prvSampleTimeNow+0x3c>)
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	68fa      	ldr	r2, [r7, #12]
 80179d0:	429a      	cmp	r2, r3
 80179d2:	d205      	bcs.n	80179e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80179d4:	f000 f940 	bl	8017c58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2201      	movs	r2, #1
 80179dc:	601a      	str	r2, [r3, #0]
 80179de:	e002      	b.n	80179e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2200      	movs	r2, #0
 80179e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80179e6:	4a04      	ldr	r2, [pc, #16]	@ (80179f8 <prvSampleTimeNow+0x3c>)
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80179ec:	68fb      	ldr	r3, [r7, #12]
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	3710      	adds	r7, #16
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}
 80179f6:	bf00      	nop
 80179f8:	200059a0 	.word	0x200059a0

080179fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b086      	sub	sp, #24
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	60f8      	str	r0, [r7, #12]
 8017a04:	60b9      	str	r1, [r7, #8]
 8017a06:	607a      	str	r2, [r7, #4]
 8017a08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	68ba      	ldr	r2, [r7, #8]
 8017a12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	68fa      	ldr	r2, [r7, #12]
 8017a18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017a1a:	68ba      	ldr	r2, [r7, #8]
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	d812      	bhi.n	8017a48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a22:	687a      	ldr	r2, [r7, #4]
 8017a24:	683b      	ldr	r3, [r7, #0]
 8017a26:	1ad2      	subs	r2, r2, r3
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	699b      	ldr	r3, [r3, #24]
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d302      	bcc.n	8017a36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017a30:	2301      	movs	r3, #1
 8017a32:	617b      	str	r3, [r7, #20]
 8017a34:	e01b      	b.n	8017a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017a36:	4b10      	ldr	r3, [pc, #64]	@ (8017a78 <prvInsertTimerInActiveList+0x7c>)
 8017a38:	681a      	ldr	r2, [r3, #0]
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	3304      	adds	r3, #4
 8017a3e:	4619      	mov	r1, r3
 8017a40:	4610      	mov	r0, r2
 8017a42:	f7fd fb1d 	bl	8015080 <vListInsert>
 8017a46:	e012      	b.n	8017a6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	429a      	cmp	r2, r3
 8017a4e:	d206      	bcs.n	8017a5e <prvInsertTimerInActiveList+0x62>
 8017a50:	68ba      	ldr	r2, [r7, #8]
 8017a52:	683b      	ldr	r3, [r7, #0]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d302      	bcc.n	8017a5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017a58:	2301      	movs	r3, #1
 8017a5a:	617b      	str	r3, [r7, #20]
 8017a5c:	e007      	b.n	8017a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017a5e:	4b07      	ldr	r3, [pc, #28]	@ (8017a7c <prvInsertTimerInActiveList+0x80>)
 8017a60:	681a      	ldr	r2, [r3, #0]
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	3304      	adds	r3, #4
 8017a66:	4619      	mov	r1, r3
 8017a68:	4610      	mov	r0, r2
 8017a6a:	f7fd fb09 	bl	8015080 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017a6e:	697b      	ldr	r3, [r7, #20]
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	3718      	adds	r7, #24
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	20005994 	.word	0x20005994
 8017a7c:	20005990 	.word	0x20005990

08017a80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b08e      	sub	sp, #56	@ 0x38
 8017a84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017a86:	e0d4      	b.n	8017c32 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	da1b      	bge.n	8017ac6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017a8e:	1d3b      	adds	r3, r7, #4
 8017a90:	3304      	adds	r3, #4
 8017a92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d10d      	bne.n	8017ab6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8017a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a9e:	b672      	cpsid	i
 8017aa0:	f383 8811 	msr	BASEPRI, r3
 8017aa4:	f3bf 8f6f 	isb	sy
 8017aa8:	f3bf 8f4f 	dsb	sy
 8017aac:	b662      	cpsie	i
 8017aae:	61fb      	str	r3, [r7, #28]
}
 8017ab0:	bf00      	nop
 8017ab2:	bf00      	nop
 8017ab4:	e7fd      	b.n	8017ab2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017abc:	6850      	ldr	r0, [r2, #4]
 8017abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017ac0:	6892      	ldr	r2, [r2, #8]
 8017ac2:	4611      	mov	r1, r2
 8017ac4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	f2c0 80b2 	blt.w	8017c32 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad4:	695b      	ldr	r3, [r3, #20]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d004      	beq.n	8017ae4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017adc:	3304      	adds	r3, #4
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f7fd fb07 	bl	80150f2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017ae4:	463b      	mov	r3, r7
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7ff ff68 	bl	80179bc <prvSampleTimeNow>
 8017aec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	2b09      	cmp	r3, #9
 8017af2:	f200 809b 	bhi.w	8017c2c <prvProcessReceivedCommands+0x1ac>
 8017af6:	a201      	add	r2, pc, #4	@ (adr r2, 8017afc <prvProcessReceivedCommands+0x7c>)
 8017af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017afc:	08017b25 	.word	0x08017b25
 8017b00:	08017b25 	.word	0x08017b25
 8017b04:	08017b25 	.word	0x08017b25
 8017b08:	08017b9f 	.word	0x08017b9f
 8017b0c:	08017bb3 	.word	0x08017bb3
 8017b10:	08017c03 	.word	0x08017c03
 8017b14:	08017b25 	.word	0x08017b25
 8017b18:	08017b25 	.word	0x08017b25
 8017b1c:	08017b9f 	.word	0x08017b9f
 8017b20:	08017bb3 	.word	0x08017bb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017b2a:	f043 0301 	orr.w	r3, r3, #1
 8017b2e:	b2da      	uxtb	r2, r3
 8017b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017b36:	68ba      	ldr	r2, [r7, #8]
 8017b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b3a:	699b      	ldr	r3, [r3, #24]
 8017b3c:	18d1      	adds	r1, r2, r3
 8017b3e:	68bb      	ldr	r3, [r7, #8]
 8017b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017b44:	f7ff ff5a 	bl	80179fc <prvInsertTimerInActiveList>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d070      	beq.n	8017c30 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b50:	6a1b      	ldr	r3, [r3, #32]
 8017b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017b54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017b5c:	f003 0304 	and.w	r3, r3, #4
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d065      	beq.n	8017c30 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017b64:	68ba      	ldr	r2, [r7, #8]
 8017b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b68:	699b      	ldr	r3, [r3, #24]
 8017b6a:	441a      	add	r2, r3
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	9300      	str	r3, [sp, #0]
 8017b70:	2300      	movs	r3, #0
 8017b72:	2100      	movs	r1, #0
 8017b74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017b76:	f7ff fdfb 	bl	8017770 <xTimerGenericCommand>
 8017b7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017b7c:	6a3b      	ldr	r3, [r7, #32]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d156      	bne.n	8017c30 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8017b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b86:	b672      	cpsid	i
 8017b88:	f383 8811 	msr	BASEPRI, r3
 8017b8c:	f3bf 8f6f 	isb	sy
 8017b90:	f3bf 8f4f 	dsb	sy
 8017b94:	b662      	cpsie	i
 8017b96:	61bb      	str	r3, [r7, #24]
}
 8017b98:	bf00      	nop
 8017b9a:	bf00      	nop
 8017b9c:	e7fd      	b.n	8017b9a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017ba4:	f023 0301 	bic.w	r3, r3, #1
 8017ba8:	b2da      	uxtb	r2, r3
 8017baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017bb0:	e03f      	b.n	8017c32 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017bb8:	f043 0301 	orr.w	r3, r3, #1
 8017bbc:	b2da      	uxtb	r2, r3
 8017bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017bc4:	68ba      	ldr	r2, [r7, #8]
 8017bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bcc:	699b      	ldr	r3, [r3, #24]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d10d      	bne.n	8017bee <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8017bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bd6:	b672      	cpsid	i
 8017bd8:	f383 8811 	msr	BASEPRI, r3
 8017bdc:	f3bf 8f6f 	isb	sy
 8017be0:	f3bf 8f4f 	dsb	sy
 8017be4:	b662      	cpsie	i
 8017be6:	617b      	str	r3, [r7, #20]
}
 8017be8:	bf00      	nop
 8017bea:	bf00      	nop
 8017bec:	e7fd      	b.n	8017bea <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bf0:	699a      	ldr	r2, [r3, #24]
 8017bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bf4:	18d1      	adds	r1, r2, r3
 8017bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017bfc:	f7ff fefe 	bl	80179fc <prvInsertTimerInActiveList>
					break;
 8017c00:	e017      	b.n	8017c32 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017c08:	f003 0302 	and.w	r3, r3, #2
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d103      	bne.n	8017c18 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8017c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017c12:	f000 fbd7 	bl	80183c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017c16:	e00c      	b.n	8017c32 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017c1e:	f023 0301 	bic.w	r3, r3, #1
 8017c22:	b2da      	uxtb	r2, r3
 8017c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017c2a:	e002      	b.n	8017c32 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8017c2c:	bf00      	nop
 8017c2e:	e000      	b.n	8017c32 <prvProcessReceivedCommands+0x1b2>
					break;
 8017c30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017c32:	4b08      	ldr	r3, [pc, #32]	@ (8017c54 <prvProcessReceivedCommands+0x1d4>)
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	1d39      	adds	r1, r7, #4
 8017c38:	2200      	movs	r2, #0
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7fd fdba 	bl	80157b4 <xQueueReceive>
 8017c40:	4603      	mov	r3, r0
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	f47f af20 	bne.w	8017a88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017c48:	bf00      	nop
 8017c4a:	bf00      	nop
 8017c4c:	3730      	adds	r7, #48	@ 0x30
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}
 8017c52:	bf00      	nop
 8017c54:	20005998 	.word	0x20005998

08017c58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b088      	sub	sp, #32
 8017c5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017c5e:	e04b      	b.n	8017cf8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017c60:	4b2f      	ldr	r3, [pc, #188]	@ (8017d20 <prvSwitchTimerLists+0xc8>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	68db      	ldr	r3, [r3, #12]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8017d20 <prvSwitchTimerLists+0xc8>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	68db      	ldr	r3, [r3, #12]
 8017c70:	68db      	ldr	r3, [r3, #12]
 8017c72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	3304      	adds	r3, #4
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f7fd fa3a 	bl	80150f2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	6a1b      	ldr	r3, [r3, #32]
 8017c82:	68f8      	ldr	r0, [r7, #12]
 8017c84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017c8c:	f003 0304 	and.w	r3, r3, #4
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d031      	beq.n	8017cf8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	699b      	ldr	r3, [r3, #24]
 8017c98:	693a      	ldr	r2, [r7, #16]
 8017c9a:	4413      	add	r3, r2
 8017c9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017c9e:	68ba      	ldr	r2, [r7, #8]
 8017ca0:	693b      	ldr	r3, [r7, #16]
 8017ca2:	429a      	cmp	r2, r3
 8017ca4:	d90e      	bls.n	8017cc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	68ba      	ldr	r2, [r7, #8]
 8017caa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	68fa      	ldr	r2, [r7, #12]
 8017cb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8017d20 <prvSwitchTimerLists+0xc8>)
 8017cb4:	681a      	ldr	r2, [r3, #0]
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	3304      	adds	r3, #4
 8017cba:	4619      	mov	r1, r3
 8017cbc:	4610      	mov	r0, r2
 8017cbe:	f7fd f9df 	bl	8015080 <vListInsert>
 8017cc2:	e019      	b.n	8017cf8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	9300      	str	r3, [sp, #0]
 8017cc8:	2300      	movs	r3, #0
 8017cca:	693a      	ldr	r2, [r7, #16]
 8017ccc:	2100      	movs	r1, #0
 8017cce:	68f8      	ldr	r0, [r7, #12]
 8017cd0:	f7ff fd4e 	bl	8017770 <xTimerGenericCommand>
 8017cd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d10d      	bne.n	8017cf8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8017cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ce0:	b672      	cpsid	i
 8017ce2:	f383 8811 	msr	BASEPRI, r3
 8017ce6:	f3bf 8f6f 	isb	sy
 8017cea:	f3bf 8f4f 	dsb	sy
 8017cee:	b662      	cpsie	i
 8017cf0:	603b      	str	r3, [r7, #0]
}
 8017cf2:	bf00      	nop
 8017cf4:	bf00      	nop
 8017cf6:	e7fd      	b.n	8017cf4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017cf8:	4b09      	ldr	r3, [pc, #36]	@ (8017d20 <prvSwitchTimerLists+0xc8>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d1ae      	bne.n	8017c60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017d02:	4b07      	ldr	r3, [pc, #28]	@ (8017d20 <prvSwitchTimerLists+0xc8>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017d08:	4b06      	ldr	r3, [pc, #24]	@ (8017d24 <prvSwitchTimerLists+0xcc>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	4a04      	ldr	r2, [pc, #16]	@ (8017d20 <prvSwitchTimerLists+0xc8>)
 8017d0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017d10:	4a04      	ldr	r2, [pc, #16]	@ (8017d24 <prvSwitchTimerLists+0xcc>)
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	6013      	str	r3, [r2, #0]
}
 8017d16:	bf00      	nop
 8017d18:	3718      	adds	r7, #24
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd80      	pop	{r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	20005990 	.word	0x20005990
 8017d24:	20005994 	.word	0x20005994

08017d28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b082      	sub	sp, #8
 8017d2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017d2e:	f000 f94d 	bl	8017fcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017d32:	4b15      	ldr	r3, [pc, #84]	@ (8017d88 <prvCheckForValidListAndQueue+0x60>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d120      	bne.n	8017d7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017d3a:	4814      	ldr	r0, [pc, #80]	@ (8017d8c <prvCheckForValidListAndQueue+0x64>)
 8017d3c:	f7fd f94f 	bl	8014fde <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017d40:	4813      	ldr	r0, [pc, #76]	@ (8017d90 <prvCheckForValidListAndQueue+0x68>)
 8017d42:	f7fd f94c 	bl	8014fde <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017d46:	4b13      	ldr	r3, [pc, #76]	@ (8017d94 <prvCheckForValidListAndQueue+0x6c>)
 8017d48:	4a10      	ldr	r2, [pc, #64]	@ (8017d8c <prvCheckForValidListAndQueue+0x64>)
 8017d4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017d4c:	4b12      	ldr	r3, [pc, #72]	@ (8017d98 <prvCheckForValidListAndQueue+0x70>)
 8017d4e:	4a10      	ldr	r2, [pc, #64]	@ (8017d90 <prvCheckForValidListAndQueue+0x68>)
 8017d50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017d52:	2300      	movs	r3, #0
 8017d54:	9300      	str	r3, [sp, #0]
 8017d56:	4b11      	ldr	r3, [pc, #68]	@ (8017d9c <prvCheckForValidListAndQueue+0x74>)
 8017d58:	4a11      	ldr	r2, [pc, #68]	@ (8017da0 <prvCheckForValidListAndQueue+0x78>)
 8017d5a:	2110      	movs	r1, #16
 8017d5c:	200a      	movs	r0, #10
 8017d5e:	f7fd fa5f 	bl	8015220 <xQueueGenericCreateStatic>
 8017d62:	4603      	mov	r3, r0
 8017d64:	4a08      	ldr	r2, [pc, #32]	@ (8017d88 <prvCheckForValidListAndQueue+0x60>)
 8017d66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017d68:	4b07      	ldr	r3, [pc, #28]	@ (8017d88 <prvCheckForValidListAndQueue+0x60>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d005      	beq.n	8017d7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017d70:	4b05      	ldr	r3, [pc, #20]	@ (8017d88 <prvCheckForValidListAndQueue+0x60>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	490b      	ldr	r1, [pc, #44]	@ (8017da4 <prvCheckForValidListAndQueue+0x7c>)
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7fe f8b2 	bl	8015ee0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017d7c:	f000 f95c 	bl	8018038 <vPortExitCritical>
}
 8017d80:	bf00      	nop
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	20005998 	.word	0x20005998
 8017d8c:	20005968 	.word	0x20005968
 8017d90:	2000597c 	.word	0x2000597c
 8017d94:	20005990 	.word	0x20005990
 8017d98:	20005994 	.word	0x20005994
 8017d9c:	20005a44 	.word	0x20005a44
 8017da0:	200059a4 	.word	0x200059a4
 8017da4:	08019dc0 	.word	0x08019dc0

08017da8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017da8:	b480      	push	{r7}
 8017daa:	b085      	sub	sp, #20
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	60f8      	str	r0, [r7, #12]
 8017db0:	60b9      	str	r1, [r7, #8]
 8017db2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	3b04      	subs	r3, #4
 8017db8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8017dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	3b04      	subs	r3, #4
 8017dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	f023 0201 	bic.w	r2, r3, #1
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	3b04      	subs	r3, #4
 8017dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8017e0c <pxPortInitialiseStack+0x64>)
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	3b14      	subs	r3, #20
 8017de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017de4:	687a      	ldr	r2, [r7, #4]
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	3b04      	subs	r3, #4
 8017dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	f06f 0202 	mvn.w	r2, #2
 8017df6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	3b20      	subs	r3, #32
 8017dfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	3714      	adds	r7, #20
 8017e04:	46bd      	mov	sp, r7
 8017e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0a:	4770      	bx	lr
 8017e0c:	08017e11 	.word	0x08017e11

08017e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017e10:	b480      	push	{r7}
 8017e12:	b085      	sub	sp, #20
 8017e14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017e16:	2300      	movs	r3, #0
 8017e18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017e1a:	4b15      	ldr	r3, [pc, #84]	@ (8017e70 <prvTaskExitError+0x60>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e22:	d00d      	beq.n	8017e40 <prvTaskExitError+0x30>
	__asm volatile
 8017e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e28:	b672      	cpsid	i
 8017e2a:	f383 8811 	msr	BASEPRI, r3
 8017e2e:	f3bf 8f6f 	isb	sy
 8017e32:	f3bf 8f4f 	dsb	sy
 8017e36:	b662      	cpsie	i
 8017e38:	60fb      	str	r3, [r7, #12]
}
 8017e3a:	bf00      	nop
 8017e3c:	bf00      	nop
 8017e3e:	e7fd      	b.n	8017e3c <prvTaskExitError+0x2c>
	__asm volatile
 8017e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e44:	b672      	cpsid	i
 8017e46:	f383 8811 	msr	BASEPRI, r3
 8017e4a:	f3bf 8f6f 	isb	sy
 8017e4e:	f3bf 8f4f 	dsb	sy
 8017e52:	b662      	cpsie	i
 8017e54:	60bb      	str	r3, [r7, #8]
}
 8017e56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017e58:	bf00      	nop
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d0fc      	beq.n	8017e5a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017e60:	bf00      	nop
 8017e62:	bf00      	nop
 8017e64:	3714      	adds	r7, #20
 8017e66:	46bd      	mov	sp, r7
 8017e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6c:	4770      	bx	lr
 8017e6e:	bf00      	nop
 8017e70:	2000001c 	.word	0x2000001c
	...

08017e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017e80:	4b07      	ldr	r3, [pc, #28]	@ (8017ea0 <pxCurrentTCBConst2>)
 8017e82:	6819      	ldr	r1, [r3, #0]
 8017e84:	6808      	ldr	r0, [r1, #0]
 8017e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e8a:	f380 8809 	msr	PSP, r0
 8017e8e:	f3bf 8f6f 	isb	sy
 8017e92:	f04f 0000 	mov.w	r0, #0
 8017e96:	f380 8811 	msr	BASEPRI, r0
 8017e9a:	4770      	bx	lr
 8017e9c:	f3af 8000 	nop.w

08017ea0 <pxCurrentTCBConst2>:
 8017ea0:	20005468 	.word	0x20005468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017ea4:	bf00      	nop
 8017ea6:	bf00      	nop

08017ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017ea8:	4808      	ldr	r0, [pc, #32]	@ (8017ecc <prvPortStartFirstTask+0x24>)
 8017eaa:	6800      	ldr	r0, [r0, #0]
 8017eac:	6800      	ldr	r0, [r0, #0]
 8017eae:	f380 8808 	msr	MSP, r0
 8017eb2:	f04f 0000 	mov.w	r0, #0
 8017eb6:	f380 8814 	msr	CONTROL, r0
 8017eba:	b662      	cpsie	i
 8017ebc:	b661      	cpsie	f
 8017ebe:	f3bf 8f4f 	dsb	sy
 8017ec2:	f3bf 8f6f 	isb	sy
 8017ec6:	df00      	svc	0
 8017ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017eca:	bf00      	nop
 8017ecc:	e000ed08 	.word	0xe000ed08

08017ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b084      	sub	sp, #16
 8017ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017ed6:	4b37      	ldr	r3, [pc, #220]	@ (8017fb4 <xPortStartScheduler+0xe4>)
 8017ed8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	781b      	ldrb	r3, [r3, #0]
 8017ede:	b2db      	uxtb	r3, r3
 8017ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	22ff      	movs	r2, #255	@ 0xff
 8017ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	781b      	ldrb	r3, [r3, #0]
 8017eec:	b2db      	uxtb	r3, r3
 8017eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017ef0:	78fb      	ldrb	r3, [r7, #3]
 8017ef2:	b2db      	uxtb	r3, r3
 8017ef4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8017ef8:	b2da      	uxtb	r2, r3
 8017efa:	4b2f      	ldr	r3, [pc, #188]	@ (8017fb8 <xPortStartScheduler+0xe8>)
 8017efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017efe:	4b2f      	ldr	r3, [pc, #188]	@ (8017fbc <xPortStartScheduler+0xec>)
 8017f00:	2207      	movs	r2, #7
 8017f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017f04:	e009      	b.n	8017f1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017f06:	4b2d      	ldr	r3, [pc, #180]	@ (8017fbc <xPortStartScheduler+0xec>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	3b01      	subs	r3, #1
 8017f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8017fbc <xPortStartScheduler+0xec>)
 8017f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017f10:	78fb      	ldrb	r3, [r7, #3]
 8017f12:	b2db      	uxtb	r3, r3
 8017f14:	005b      	lsls	r3, r3, #1
 8017f16:	b2db      	uxtb	r3, r3
 8017f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017f1a:	78fb      	ldrb	r3, [r7, #3]
 8017f1c:	b2db      	uxtb	r3, r3
 8017f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017f22:	2b80      	cmp	r3, #128	@ 0x80
 8017f24:	d0ef      	beq.n	8017f06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017f26:	4b25      	ldr	r3, [pc, #148]	@ (8017fbc <xPortStartScheduler+0xec>)
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	f1c3 0307 	rsb	r3, r3, #7
 8017f2e:	2b04      	cmp	r3, #4
 8017f30:	d00d      	beq.n	8017f4e <xPortStartScheduler+0x7e>
	__asm volatile
 8017f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f36:	b672      	cpsid	i
 8017f38:	f383 8811 	msr	BASEPRI, r3
 8017f3c:	f3bf 8f6f 	isb	sy
 8017f40:	f3bf 8f4f 	dsb	sy
 8017f44:	b662      	cpsie	i
 8017f46:	60bb      	str	r3, [r7, #8]
}
 8017f48:	bf00      	nop
 8017f4a:	bf00      	nop
 8017f4c:	e7fd      	b.n	8017f4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8017fbc <xPortStartScheduler+0xec>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	021b      	lsls	r3, r3, #8
 8017f54:	4a19      	ldr	r2, [pc, #100]	@ (8017fbc <xPortStartScheduler+0xec>)
 8017f56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017f58:	4b18      	ldr	r3, [pc, #96]	@ (8017fbc <xPortStartScheduler+0xec>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017f60:	4a16      	ldr	r2, [pc, #88]	@ (8017fbc <xPortStartScheduler+0xec>)
 8017f62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	b2da      	uxtb	r2, r3
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017f6c:	4b14      	ldr	r3, [pc, #80]	@ (8017fc0 <xPortStartScheduler+0xf0>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	4a13      	ldr	r2, [pc, #76]	@ (8017fc0 <xPortStartScheduler+0xf0>)
 8017f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8017f76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017f78:	4b11      	ldr	r3, [pc, #68]	@ (8017fc0 <xPortStartScheduler+0xf0>)
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	4a10      	ldr	r2, [pc, #64]	@ (8017fc0 <xPortStartScheduler+0xf0>)
 8017f7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017f82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017f84:	f000 f8dc 	bl	8018140 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017f88:	4b0e      	ldr	r3, [pc, #56]	@ (8017fc4 <xPortStartScheduler+0xf4>)
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017f8e:	f000 f8fb 	bl	8018188 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017f92:	4b0d      	ldr	r3, [pc, #52]	@ (8017fc8 <xPortStartScheduler+0xf8>)
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	4a0c      	ldr	r2, [pc, #48]	@ (8017fc8 <xPortStartScheduler+0xf8>)
 8017f98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8017f9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017f9e:	f7ff ff83 	bl	8017ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017fa2:	f7fe fc11 	bl	80167c8 <vTaskSwitchContext>
	prvTaskExitError();
 8017fa6:	f7ff ff33 	bl	8017e10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017faa:	2300      	movs	r3, #0
}
 8017fac:	4618      	mov	r0, r3
 8017fae:	3710      	adds	r7, #16
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}
 8017fb4:	e000e400 	.word	0xe000e400
 8017fb8:	20005a94 	.word	0x20005a94
 8017fbc:	20005a98 	.word	0x20005a98
 8017fc0:	e000ed20 	.word	0xe000ed20
 8017fc4:	2000001c 	.word	0x2000001c
 8017fc8:	e000ef34 	.word	0xe000ef34

08017fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b083      	sub	sp, #12
 8017fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8017fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fd6:	b672      	cpsid	i
 8017fd8:	f383 8811 	msr	BASEPRI, r3
 8017fdc:	f3bf 8f6f 	isb	sy
 8017fe0:	f3bf 8f4f 	dsb	sy
 8017fe4:	b662      	cpsie	i
 8017fe6:	607b      	str	r3, [r7, #4]
}
 8017fe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017fea:	4b11      	ldr	r3, [pc, #68]	@ (8018030 <vPortEnterCritical+0x64>)
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	3301      	adds	r3, #1
 8017ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8018030 <vPortEnterCritical+0x64>)
 8017ff2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8018030 <vPortEnterCritical+0x64>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	2b01      	cmp	r3, #1
 8017ffa:	d112      	bne.n	8018022 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8018034 <vPortEnterCritical+0x68>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	b2db      	uxtb	r3, r3
 8018002:	2b00      	cmp	r3, #0
 8018004:	d00d      	beq.n	8018022 <vPortEnterCritical+0x56>
	__asm volatile
 8018006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801800a:	b672      	cpsid	i
 801800c:	f383 8811 	msr	BASEPRI, r3
 8018010:	f3bf 8f6f 	isb	sy
 8018014:	f3bf 8f4f 	dsb	sy
 8018018:	b662      	cpsie	i
 801801a:	603b      	str	r3, [r7, #0]
}
 801801c:	bf00      	nop
 801801e:	bf00      	nop
 8018020:	e7fd      	b.n	801801e <vPortEnterCritical+0x52>
	}
}
 8018022:	bf00      	nop
 8018024:	370c      	adds	r7, #12
 8018026:	46bd      	mov	sp, r7
 8018028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802c:	4770      	bx	lr
 801802e:	bf00      	nop
 8018030:	2000001c 	.word	0x2000001c
 8018034:	e000ed04 	.word	0xe000ed04

08018038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018038:	b480      	push	{r7}
 801803a:	b083      	sub	sp, #12
 801803c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801803e:	4b13      	ldr	r3, [pc, #76]	@ (801808c <vPortExitCritical+0x54>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d10d      	bne.n	8018062 <vPortExitCritical+0x2a>
	__asm volatile
 8018046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801804a:	b672      	cpsid	i
 801804c:	f383 8811 	msr	BASEPRI, r3
 8018050:	f3bf 8f6f 	isb	sy
 8018054:	f3bf 8f4f 	dsb	sy
 8018058:	b662      	cpsie	i
 801805a:	607b      	str	r3, [r7, #4]
}
 801805c:	bf00      	nop
 801805e:	bf00      	nop
 8018060:	e7fd      	b.n	801805e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8018062:	4b0a      	ldr	r3, [pc, #40]	@ (801808c <vPortExitCritical+0x54>)
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	3b01      	subs	r3, #1
 8018068:	4a08      	ldr	r2, [pc, #32]	@ (801808c <vPortExitCritical+0x54>)
 801806a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801806c:	4b07      	ldr	r3, [pc, #28]	@ (801808c <vPortExitCritical+0x54>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d105      	bne.n	8018080 <vPortExitCritical+0x48>
 8018074:	2300      	movs	r3, #0
 8018076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018078:	683b      	ldr	r3, [r7, #0]
 801807a:	f383 8811 	msr	BASEPRI, r3
}
 801807e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018080:	bf00      	nop
 8018082:	370c      	adds	r7, #12
 8018084:	46bd      	mov	sp, r7
 8018086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808a:	4770      	bx	lr
 801808c:	2000001c 	.word	0x2000001c

08018090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018090:	f3ef 8009 	mrs	r0, PSP
 8018094:	f3bf 8f6f 	isb	sy
 8018098:	4b15      	ldr	r3, [pc, #84]	@ (80180f0 <pxCurrentTCBConst>)
 801809a:	681a      	ldr	r2, [r3, #0]
 801809c:	f01e 0f10 	tst.w	lr, #16
 80180a0:	bf08      	it	eq
 80180a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80180a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180aa:	6010      	str	r0, [r2, #0]
 80180ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80180b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80180b4:	b672      	cpsid	i
 80180b6:	f380 8811 	msr	BASEPRI, r0
 80180ba:	f3bf 8f4f 	dsb	sy
 80180be:	f3bf 8f6f 	isb	sy
 80180c2:	b662      	cpsie	i
 80180c4:	f7fe fb80 	bl	80167c8 <vTaskSwitchContext>
 80180c8:	f04f 0000 	mov.w	r0, #0
 80180cc:	f380 8811 	msr	BASEPRI, r0
 80180d0:	bc09      	pop	{r0, r3}
 80180d2:	6819      	ldr	r1, [r3, #0]
 80180d4:	6808      	ldr	r0, [r1, #0]
 80180d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180da:	f01e 0f10 	tst.w	lr, #16
 80180de:	bf08      	it	eq
 80180e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80180e4:	f380 8809 	msr	PSP, r0
 80180e8:	f3bf 8f6f 	isb	sy
 80180ec:	4770      	bx	lr
 80180ee:	bf00      	nop

080180f0 <pxCurrentTCBConst>:
 80180f0:	20005468 	.word	0x20005468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80180f4:	bf00      	nop
 80180f6:	bf00      	nop

080180f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b082      	sub	sp, #8
 80180fc:	af00      	add	r7, sp, #0
	__asm volatile
 80180fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018102:	b672      	cpsid	i
 8018104:	f383 8811 	msr	BASEPRI, r3
 8018108:	f3bf 8f6f 	isb	sy
 801810c:	f3bf 8f4f 	dsb	sy
 8018110:	b662      	cpsie	i
 8018112:	607b      	str	r3, [r7, #4]
}
 8018114:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018116:	f7fe fa9b 	bl	8016650 <xTaskIncrementTick>
 801811a:	4603      	mov	r3, r0
 801811c:	2b00      	cmp	r3, #0
 801811e:	d003      	beq.n	8018128 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018120:	4b06      	ldr	r3, [pc, #24]	@ (801813c <SysTick_Handler+0x44>)
 8018122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018126:	601a      	str	r2, [r3, #0]
 8018128:	2300      	movs	r3, #0
 801812a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801812c:	683b      	ldr	r3, [r7, #0]
 801812e:	f383 8811 	msr	BASEPRI, r3
}
 8018132:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018134:	bf00      	nop
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}
 801813c:	e000ed04 	.word	0xe000ed04

08018140 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018140:	b480      	push	{r7}
 8018142:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018144:	4b0b      	ldr	r3, [pc, #44]	@ (8018174 <vPortSetupTimerInterrupt+0x34>)
 8018146:	2200      	movs	r2, #0
 8018148:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801814a:	4b0b      	ldr	r3, [pc, #44]	@ (8018178 <vPortSetupTimerInterrupt+0x38>)
 801814c:	2200      	movs	r2, #0
 801814e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018150:	4b0a      	ldr	r3, [pc, #40]	@ (801817c <vPortSetupTimerInterrupt+0x3c>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	4a0a      	ldr	r2, [pc, #40]	@ (8018180 <vPortSetupTimerInterrupt+0x40>)
 8018156:	fba2 2303 	umull	r2, r3, r2, r3
 801815a:	099b      	lsrs	r3, r3, #6
 801815c:	4a09      	ldr	r2, [pc, #36]	@ (8018184 <vPortSetupTimerInterrupt+0x44>)
 801815e:	3b01      	subs	r3, #1
 8018160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018162:	4b04      	ldr	r3, [pc, #16]	@ (8018174 <vPortSetupTimerInterrupt+0x34>)
 8018164:	2207      	movs	r2, #7
 8018166:	601a      	str	r2, [r3, #0]
}
 8018168:	bf00      	nop
 801816a:	46bd      	mov	sp, r7
 801816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018170:	4770      	bx	lr
 8018172:	bf00      	nop
 8018174:	e000e010 	.word	0xe000e010
 8018178:	e000e018 	.word	0xe000e018
 801817c:	20000000 	.word	0x20000000
 8018180:	10624dd3 	.word	0x10624dd3
 8018184:	e000e014 	.word	0xe000e014

08018188 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018188:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018198 <vPortEnableVFP+0x10>
 801818c:	6801      	ldr	r1, [r0, #0]
 801818e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8018192:	6001      	str	r1, [r0, #0]
 8018194:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018196:	bf00      	nop
 8018198:	e000ed88 	.word	0xe000ed88

0801819c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801819c:	b480      	push	{r7}
 801819e:	b085      	sub	sp, #20
 80181a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80181a2:	f3ef 8305 	mrs	r3, IPSR
 80181a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	2b0f      	cmp	r3, #15
 80181ac:	d917      	bls.n	80181de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80181ae:	4a1a      	ldr	r2, [pc, #104]	@ (8018218 <vPortValidateInterruptPriority+0x7c>)
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	4413      	add	r3, r2
 80181b4:	781b      	ldrb	r3, [r3, #0]
 80181b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80181b8:	4b18      	ldr	r3, [pc, #96]	@ (801821c <vPortValidateInterruptPriority+0x80>)
 80181ba:	781b      	ldrb	r3, [r3, #0]
 80181bc:	7afa      	ldrb	r2, [r7, #11]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d20d      	bcs.n	80181de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80181c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181c6:	b672      	cpsid	i
 80181c8:	f383 8811 	msr	BASEPRI, r3
 80181cc:	f3bf 8f6f 	isb	sy
 80181d0:	f3bf 8f4f 	dsb	sy
 80181d4:	b662      	cpsie	i
 80181d6:	607b      	str	r3, [r7, #4]
}
 80181d8:	bf00      	nop
 80181da:	bf00      	nop
 80181dc:	e7fd      	b.n	80181da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80181de:	4b10      	ldr	r3, [pc, #64]	@ (8018220 <vPortValidateInterruptPriority+0x84>)
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80181e6:	4b0f      	ldr	r3, [pc, #60]	@ (8018224 <vPortValidateInterruptPriority+0x88>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d90d      	bls.n	801820a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80181ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181f2:	b672      	cpsid	i
 80181f4:	f383 8811 	msr	BASEPRI, r3
 80181f8:	f3bf 8f6f 	isb	sy
 80181fc:	f3bf 8f4f 	dsb	sy
 8018200:	b662      	cpsie	i
 8018202:	603b      	str	r3, [r7, #0]
}
 8018204:	bf00      	nop
 8018206:	bf00      	nop
 8018208:	e7fd      	b.n	8018206 <vPortValidateInterruptPriority+0x6a>
	}
 801820a:	bf00      	nop
 801820c:	3714      	adds	r7, #20
 801820e:	46bd      	mov	sp, r7
 8018210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018214:	4770      	bx	lr
 8018216:	bf00      	nop
 8018218:	e000e3f0 	.word	0xe000e3f0
 801821c:	20005a94 	.word	0x20005a94
 8018220:	e000ed0c 	.word	0xe000ed0c
 8018224:	20005a98 	.word	0x20005a98

08018228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b08a      	sub	sp, #40	@ 0x28
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018230:	2300      	movs	r3, #0
 8018232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018234:	f7fe f94e 	bl	80164d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018238:	4b5d      	ldr	r3, [pc, #372]	@ (80183b0 <pvPortMalloc+0x188>)
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d101      	bne.n	8018244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018240:	f000 f92c 	bl	801849c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018244:	4b5b      	ldr	r3, [pc, #364]	@ (80183b4 <pvPortMalloc+0x18c>)
 8018246:	681a      	ldr	r2, [r3, #0]
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	4013      	ands	r3, r2
 801824c:	2b00      	cmp	r3, #0
 801824e:	f040 8094 	bne.w	801837a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d020      	beq.n	801829a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8018258:	2208      	movs	r2, #8
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	4413      	add	r3, r2
 801825e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	f003 0307 	and.w	r3, r3, #7
 8018266:	2b00      	cmp	r3, #0
 8018268:	d017      	beq.n	801829a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f023 0307 	bic.w	r3, r3, #7
 8018270:	3308      	adds	r3, #8
 8018272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f003 0307 	and.w	r3, r3, #7
 801827a:	2b00      	cmp	r3, #0
 801827c:	d00d      	beq.n	801829a <pvPortMalloc+0x72>
	__asm volatile
 801827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018282:	b672      	cpsid	i
 8018284:	f383 8811 	msr	BASEPRI, r3
 8018288:	f3bf 8f6f 	isb	sy
 801828c:	f3bf 8f4f 	dsb	sy
 8018290:	b662      	cpsie	i
 8018292:	617b      	str	r3, [r7, #20]
}
 8018294:	bf00      	nop
 8018296:	bf00      	nop
 8018298:	e7fd      	b.n	8018296 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d06c      	beq.n	801837a <pvPortMalloc+0x152>
 80182a0:	4b45      	ldr	r3, [pc, #276]	@ (80183b8 <pvPortMalloc+0x190>)
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d867      	bhi.n	801837a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80182aa:	4b44      	ldr	r3, [pc, #272]	@ (80183bc <pvPortMalloc+0x194>)
 80182ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80182ae:	4b43      	ldr	r3, [pc, #268]	@ (80183bc <pvPortMalloc+0x194>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80182b4:	e004      	b.n	80182c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80182b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80182ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80182c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c2:	685b      	ldr	r3, [r3, #4]
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	429a      	cmp	r2, r3
 80182c8:	d903      	bls.n	80182d2 <pvPortMalloc+0xaa>
 80182ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d1f1      	bne.n	80182b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80182d2:	4b37      	ldr	r3, [pc, #220]	@ (80183b0 <pvPortMalloc+0x188>)
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80182d8:	429a      	cmp	r2, r3
 80182da:	d04e      	beq.n	801837a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80182dc:	6a3b      	ldr	r3, [r7, #32]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	2208      	movs	r2, #8
 80182e2:	4413      	add	r3, r2
 80182e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80182e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182e8:	681a      	ldr	r2, [r3, #0]
 80182ea:	6a3b      	ldr	r3, [r7, #32]
 80182ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80182ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182f0:	685a      	ldr	r2, [r3, #4]
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	1ad2      	subs	r2, r2, r3
 80182f6:	2308      	movs	r3, #8
 80182f8:	005b      	lsls	r3, r3, #1
 80182fa:	429a      	cmp	r2, r3
 80182fc:	d922      	bls.n	8018344 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80182fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	4413      	add	r3, r2
 8018304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018306:	69bb      	ldr	r3, [r7, #24]
 8018308:	f003 0307 	and.w	r3, r3, #7
 801830c:	2b00      	cmp	r3, #0
 801830e:	d00d      	beq.n	801832c <pvPortMalloc+0x104>
	__asm volatile
 8018310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018314:	b672      	cpsid	i
 8018316:	f383 8811 	msr	BASEPRI, r3
 801831a:	f3bf 8f6f 	isb	sy
 801831e:	f3bf 8f4f 	dsb	sy
 8018322:	b662      	cpsie	i
 8018324:	613b      	str	r3, [r7, #16]
}
 8018326:	bf00      	nop
 8018328:	bf00      	nop
 801832a:	e7fd      	b.n	8018328 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801832e:	685a      	ldr	r2, [r3, #4]
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	1ad2      	subs	r2, r2, r3
 8018334:	69bb      	ldr	r3, [r7, #24]
 8018336:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801833a:	687a      	ldr	r2, [r7, #4]
 801833c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801833e:	69b8      	ldr	r0, [r7, #24]
 8018340:	f000 f90e 	bl	8018560 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018344:	4b1c      	ldr	r3, [pc, #112]	@ (80183b8 <pvPortMalloc+0x190>)
 8018346:	681a      	ldr	r2, [r3, #0]
 8018348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801834a:	685b      	ldr	r3, [r3, #4]
 801834c:	1ad3      	subs	r3, r2, r3
 801834e:	4a1a      	ldr	r2, [pc, #104]	@ (80183b8 <pvPortMalloc+0x190>)
 8018350:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018352:	4b19      	ldr	r3, [pc, #100]	@ (80183b8 <pvPortMalloc+0x190>)
 8018354:	681a      	ldr	r2, [r3, #0]
 8018356:	4b1a      	ldr	r3, [pc, #104]	@ (80183c0 <pvPortMalloc+0x198>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	429a      	cmp	r2, r3
 801835c:	d203      	bcs.n	8018366 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801835e:	4b16      	ldr	r3, [pc, #88]	@ (80183b8 <pvPortMalloc+0x190>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	4a17      	ldr	r2, [pc, #92]	@ (80183c0 <pvPortMalloc+0x198>)
 8018364:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018368:	685a      	ldr	r2, [r3, #4]
 801836a:	4b12      	ldr	r3, [pc, #72]	@ (80183b4 <pvPortMalloc+0x18c>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	431a      	orrs	r2, r3
 8018370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018372:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018376:	2200      	movs	r2, #0
 8018378:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801837a:	f7fe f8b9 	bl	80164f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801837e:	69fb      	ldr	r3, [r7, #28]
 8018380:	f003 0307 	and.w	r3, r3, #7
 8018384:	2b00      	cmp	r3, #0
 8018386:	d00d      	beq.n	80183a4 <pvPortMalloc+0x17c>
	__asm volatile
 8018388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801838c:	b672      	cpsid	i
 801838e:	f383 8811 	msr	BASEPRI, r3
 8018392:	f3bf 8f6f 	isb	sy
 8018396:	f3bf 8f4f 	dsb	sy
 801839a:	b662      	cpsie	i
 801839c:	60fb      	str	r3, [r7, #12]
}
 801839e:	bf00      	nop
 80183a0:	bf00      	nop
 80183a2:	e7fd      	b.n	80183a0 <pvPortMalloc+0x178>
	return pvReturn;
 80183a4:	69fb      	ldr	r3, [r7, #28]
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3728      	adds	r7, #40	@ 0x28
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	200096a4 	.word	0x200096a4
 80183b4:	200096b0 	.word	0x200096b0
 80183b8:	200096a8 	.word	0x200096a8
 80183bc:	2000969c 	.word	0x2000969c
 80183c0:	200096ac 	.word	0x200096ac

080183c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b086      	sub	sp, #24
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d04e      	beq.n	8018474 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80183d6:	2308      	movs	r3, #8
 80183d8:	425b      	negs	r3, r3
 80183da:	697a      	ldr	r2, [r7, #20]
 80183dc:	4413      	add	r3, r2
 80183de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80183e4:	693b      	ldr	r3, [r7, #16]
 80183e6:	685a      	ldr	r2, [r3, #4]
 80183e8:	4b24      	ldr	r3, [pc, #144]	@ (801847c <vPortFree+0xb8>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	4013      	ands	r3, r2
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d10d      	bne.n	801840e <vPortFree+0x4a>
	__asm volatile
 80183f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183f6:	b672      	cpsid	i
 80183f8:	f383 8811 	msr	BASEPRI, r3
 80183fc:	f3bf 8f6f 	isb	sy
 8018400:	f3bf 8f4f 	dsb	sy
 8018404:	b662      	cpsie	i
 8018406:	60fb      	str	r3, [r7, #12]
}
 8018408:	bf00      	nop
 801840a:	bf00      	nop
 801840c:	e7fd      	b.n	801840a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801840e:	693b      	ldr	r3, [r7, #16]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d00d      	beq.n	8018432 <vPortFree+0x6e>
	__asm volatile
 8018416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801841a:	b672      	cpsid	i
 801841c:	f383 8811 	msr	BASEPRI, r3
 8018420:	f3bf 8f6f 	isb	sy
 8018424:	f3bf 8f4f 	dsb	sy
 8018428:	b662      	cpsie	i
 801842a:	60bb      	str	r3, [r7, #8]
}
 801842c:	bf00      	nop
 801842e:	bf00      	nop
 8018430:	e7fd      	b.n	801842e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018432:	693b      	ldr	r3, [r7, #16]
 8018434:	685a      	ldr	r2, [r3, #4]
 8018436:	4b11      	ldr	r3, [pc, #68]	@ (801847c <vPortFree+0xb8>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	4013      	ands	r3, r2
 801843c:	2b00      	cmp	r3, #0
 801843e:	d019      	beq.n	8018474 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018440:	693b      	ldr	r3, [r7, #16]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d115      	bne.n	8018474 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018448:	693b      	ldr	r3, [r7, #16]
 801844a:	685a      	ldr	r2, [r3, #4]
 801844c:	4b0b      	ldr	r3, [pc, #44]	@ (801847c <vPortFree+0xb8>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	43db      	mvns	r3, r3
 8018452:	401a      	ands	r2, r3
 8018454:	693b      	ldr	r3, [r7, #16]
 8018456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018458:	f7fe f83c 	bl	80164d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801845c:	693b      	ldr	r3, [r7, #16]
 801845e:	685a      	ldr	r2, [r3, #4]
 8018460:	4b07      	ldr	r3, [pc, #28]	@ (8018480 <vPortFree+0xbc>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	4413      	add	r3, r2
 8018466:	4a06      	ldr	r2, [pc, #24]	@ (8018480 <vPortFree+0xbc>)
 8018468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801846a:	6938      	ldr	r0, [r7, #16]
 801846c:	f000 f878 	bl	8018560 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018470:	f7fe f83e 	bl	80164f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018474:	bf00      	nop
 8018476:	3718      	adds	r7, #24
 8018478:	46bd      	mov	sp, r7
 801847a:	bd80      	pop	{r7, pc}
 801847c:	200096b0 	.word	0x200096b0
 8018480:	200096a8 	.word	0x200096a8

08018484 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8018484:	b480      	push	{r7}
 8018486:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8018488:	4b03      	ldr	r3, [pc, #12]	@ (8018498 <xPortGetFreeHeapSize+0x14>)
 801848a:	681b      	ldr	r3, [r3, #0]
}
 801848c:	4618      	mov	r0, r3
 801848e:	46bd      	mov	sp, r7
 8018490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop
 8018498:	200096a8 	.word	0x200096a8

0801849c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801849c:	b480      	push	{r7}
 801849e:	b085      	sub	sp, #20
 80184a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80184a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80184a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80184a8:	4b27      	ldr	r3, [pc, #156]	@ (8018548 <prvHeapInit+0xac>)
 80184aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	f003 0307 	and.w	r3, r3, #7
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d00c      	beq.n	80184d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	3307      	adds	r3, #7
 80184ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	f023 0307 	bic.w	r3, r3, #7
 80184c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80184c4:	68ba      	ldr	r2, [r7, #8]
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	1ad3      	subs	r3, r2, r3
 80184ca:	4a1f      	ldr	r2, [pc, #124]	@ (8018548 <prvHeapInit+0xac>)
 80184cc:	4413      	add	r3, r2
 80184ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80184d4:	4a1d      	ldr	r2, [pc, #116]	@ (801854c <prvHeapInit+0xb0>)
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80184da:	4b1c      	ldr	r3, [pc, #112]	@ (801854c <prvHeapInit+0xb0>)
 80184dc:	2200      	movs	r2, #0
 80184de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	68ba      	ldr	r2, [r7, #8]
 80184e4:	4413      	add	r3, r2
 80184e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80184e8:	2208      	movs	r2, #8
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	1a9b      	subs	r3, r3, r2
 80184ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	f023 0307 	bic.w	r3, r3, #7
 80184f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	4a15      	ldr	r2, [pc, #84]	@ (8018550 <prvHeapInit+0xb4>)
 80184fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80184fe:	4b14      	ldr	r3, [pc, #80]	@ (8018550 <prvHeapInit+0xb4>)
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	2200      	movs	r2, #0
 8018504:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018506:	4b12      	ldr	r3, [pc, #72]	@ (8018550 <prvHeapInit+0xb4>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	2200      	movs	r2, #0
 801850c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	68fa      	ldr	r2, [r7, #12]
 8018516:	1ad2      	subs	r2, r2, r3
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801851c:	4b0c      	ldr	r3, [pc, #48]	@ (8018550 <prvHeapInit+0xb4>)
 801851e:	681a      	ldr	r2, [r3, #0]
 8018520:	683b      	ldr	r3, [r7, #0]
 8018522:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	685b      	ldr	r3, [r3, #4]
 8018528:	4a0a      	ldr	r2, [pc, #40]	@ (8018554 <prvHeapInit+0xb8>)
 801852a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	685b      	ldr	r3, [r3, #4]
 8018530:	4a09      	ldr	r2, [pc, #36]	@ (8018558 <prvHeapInit+0xbc>)
 8018532:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018534:	4b09      	ldr	r3, [pc, #36]	@ (801855c <prvHeapInit+0xc0>)
 8018536:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801853a:	601a      	str	r2, [r3, #0]
}
 801853c:	bf00      	nop
 801853e:	3714      	adds	r7, #20
 8018540:	46bd      	mov	sp, r7
 8018542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018546:	4770      	bx	lr
 8018548:	20005a9c 	.word	0x20005a9c
 801854c:	2000969c 	.word	0x2000969c
 8018550:	200096a4 	.word	0x200096a4
 8018554:	200096ac 	.word	0x200096ac
 8018558:	200096a8 	.word	0x200096a8
 801855c:	200096b0 	.word	0x200096b0

08018560 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018560:	b480      	push	{r7}
 8018562:	b085      	sub	sp, #20
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018568:	4b28      	ldr	r3, [pc, #160]	@ (801860c <prvInsertBlockIntoFreeList+0xac>)
 801856a:	60fb      	str	r3, [r7, #12]
 801856c:	e002      	b.n	8018574 <prvInsertBlockIntoFreeList+0x14>
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	60fb      	str	r3, [r7, #12]
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	687a      	ldr	r2, [r7, #4]
 801857a:	429a      	cmp	r2, r3
 801857c:	d8f7      	bhi.n	801856e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	685b      	ldr	r3, [r3, #4]
 8018586:	68ba      	ldr	r2, [r7, #8]
 8018588:	4413      	add	r3, r2
 801858a:	687a      	ldr	r2, [r7, #4]
 801858c:	429a      	cmp	r2, r3
 801858e:	d108      	bne.n	80185a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	685a      	ldr	r2, [r3, #4]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	685b      	ldr	r3, [r3, #4]
 8018598:	441a      	add	r2, r3
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	685b      	ldr	r3, [r3, #4]
 80185aa:	68ba      	ldr	r2, [r7, #8]
 80185ac:	441a      	add	r2, r3
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d118      	bne.n	80185e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	681a      	ldr	r2, [r3, #0]
 80185ba:	4b15      	ldr	r3, [pc, #84]	@ (8018610 <prvInsertBlockIntoFreeList+0xb0>)
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	429a      	cmp	r2, r3
 80185c0:	d00d      	beq.n	80185de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	685a      	ldr	r2, [r3, #4]
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	685b      	ldr	r3, [r3, #4]
 80185cc:	441a      	add	r2, r3
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	681a      	ldr	r2, [r3, #0]
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	601a      	str	r2, [r3, #0]
 80185dc:	e008      	b.n	80185f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80185de:	4b0c      	ldr	r3, [pc, #48]	@ (8018610 <prvInsertBlockIntoFreeList+0xb0>)
 80185e0:	681a      	ldr	r2, [r3, #0]
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	601a      	str	r2, [r3, #0]
 80185e6:	e003      	b.n	80185f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	681a      	ldr	r2, [r3, #0]
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80185f0:	68fa      	ldr	r2, [r7, #12]
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d002      	beq.n	80185fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	687a      	ldr	r2, [r7, #4]
 80185fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80185fe:	bf00      	nop
 8018600:	3714      	adds	r7, #20
 8018602:	46bd      	mov	sp, r7
 8018604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018608:	4770      	bx	lr
 801860a:	bf00      	nop
 801860c:	2000969c 	.word	0x2000969c
 8018610:	200096a4 	.word	0x200096a4

08018614 <rand>:
 8018614:	4b16      	ldr	r3, [pc, #88]	@ (8018670 <rand+0x5c>)
 8018616:	b510      	push	{r4, lr}
 8018618:	681c      	ldr	r4, [r3, #0]
 801861a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801861c:	b9b3      	cbnz	r3, 801864c <rand+0x38>
 801861e:	2018      	movs	r0, #24
 8018620:	f000 fbf2 	bl	8018e08 <malloc>
 8018624:	4602      	mov	r2, r0
 8018626:	6320      	str	r0, [r4, #48]	@ 0x30
 8018628:	b920      	cbnz	r0, 8018634 <rand+0x20>
 801862a:	4b12      	ldr	r3, [pc, #72]	@ (8018674 <rand+0x60>)
 801862c:	4812      	ldr	r0, [pc, #72]	@ (8018678 <rand+0x64>)
 801862e:	2152      	movs	r1, #82	@ 0x52
 8018630:	f000 fb82 	bl	8018d38 <__assert_func>
 8018634:	4911      	ldr	r1, [pc, #68]	@ (801867c <rand+0x68>)
 8018636:	4b12      	ldr	r3, [pc, #72]	@ (8018680 <rand+0x6c>)
 8018638:	e9c0 1300 	strd	r1, r3, [r0]
 801863c:	4b11      	ldr	r3, [pc, #68]	@ (8018684 <rand+0x70>)
 801863e:	6083      	str	r3, [r0, #8]
 8018640:	230b      	movs	r3, #11
 8018642:	8183      	strh	r3, [r0, #12]
 8018644:	2100      	movs	r1, #0
 8018646:	2001      	movs	r0, #1
 8018648:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801864c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801864e:	480e      	ldr	r0, [pc, #56]	@ (8018688 <rand+0x74>)
 8018650:	690b      	ldr	r3, [r1, #16]
 8018652:	694c      	ldr	r4, [r1, #20]
 8018654:	4a0d      	ldr	r2, [pc, #52]	@ (801868c <rand+0x78>)
 8018656:	4358      	muls	r0, r3
 8018658:	fb02 0004 	mla	r0, r2, r4, r0
 801865c:	fba3 3202 	umull	r3, r2, r3, r2
 8018660:	3301      	adds	r3, #1
 8018662:	eb40 0002 	adc.w	r0, r0, r2
 8018666:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801866a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801866e:	bd10      	pop	{r4, pc}
 8018670:	2000002c 	.word	0x2000002c
 8018674:	08019eec 	.word	0x08019eec
 8018678:	08019f03 	.word	0x08019f03
 801867c:	abcd330e 	.word	0xabcd330e
 8018680:	e66d1234 	.word	0xe66d1234
 8018684:	0005deec 	.word	0x0005deec
 8018688:	5851f42d 	.word	0x5851f42d
 801868c:	4c957f2d 	.word	0x4c957f2d

08018690 <std>:
 8018690:	2300      	movs	r3, #0
 8018692:	b510      	push	{r4, lr}
 8018694:	4604      	mov	r4, r0
 8018696:	e9c0 3300 	strd	r3, r3, [r0]
 801869a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801869e:	6083      	str	r3, [r0, #8]
 80186a0:	8181      	strh	r1, [r0, #12]
 80186a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80186a4:	81c2      	strh	r2, [r0, #14]
 80186a6:	6183      	str	r3, [r0, #24]
 80186a8:	4619      	mov	r1, r3
 80186aa:	2208      	movs	r2, #8
 80186ac:	305c      	adds	r0, #92	@ 0x5c
 80186ae:	f000 fa59 	bl	8018b64 <memset>
 80186b2:	4b0d      	ldr	r3, [pc, #52]	@ (80186e8 <std+0x58>)
 80186b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80186b6:	4b0d      	ldr	r3, [pc, #52]	@ (80186ec <std+0x5c>)
 80186b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80186ba:	4b0d      	ldr	r3, [pc, #52]	@ (80186f0 <std+0x60>)
 80186bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80186be:	4b0d      	ldr	r3, [pc, #52]	@ (80186f4 <std+0x64>)
 80186c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80186c2:	4b0d      	ldr	r3, [pc, #52]	@ (80186f8 <std+0x68>)
 80186c4:	6224      	str	r4, [r4, #32]
 80186c6:	429c      	cmp	r4, r3
 80186c8:	d006      	beq.n	80186d8 <std+0x48>
 80186ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80186ce:	4294      	cmp	r4, r2
 80186d0:	d002      	beq.n	80186d8 <std+0x48>
 80186d2:	33d0      	adds	r3, #208	@ 0xd0
 80186d4:	429c      	cmp	r4, r3
 80186d6:	d105      	bne.n	80186e4 <std+0x54>
 80186d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80186dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186e0:	f000 bb18 	b.w	8018d14 <__retarget_lock_init_recursive>
 80186e4:	bd10      	pop	{r4, pc}
 80186e6:	bf00      	nop
 80186e8:	08018961 	.word	0x08018961
 80186ec:	08018983 	.word	0x08018983
 80186f0:	080189bb 	.word	0x080189bb
 80186f4:	080189df 	.word	0x080189df
 80186f8:	200096b4 	.word	0x200096b4

080186fc <stdio_exit_handler>:
 80186fc:	4a02      	ldr	r2, [pc, #8]	@ (8018708 <stdio_exit_handler+0xc>)
 80186fe:	4903      	ldr	r1, [pc, #12]	@ (801870c <stdio_exit_handler+0x10>)
 8018700:	4803      	ldr	r0, [pc, #12]	@ (8018710 <stdio_exit_handler+0x14>)
 8018702:	f000 b869 	b.w	80187d8 <_fwalk_sglue>
 8018706:	bf00      	nop
 8018708:	20000020 	.word	0x20000020
 801870c:	080198c9 	.word	0x080198c9
 8018710:	20000030 	.word	0x20000030

08018714 <cleanup_stdio>:
 8018714:	6841      	ldr	r1, [r0, #4]
 8018716:	4b0c      	ldr	r3, [pc, #48]	@ (8018748 <cleanup_stdio+0x34>)
 8018718:	4299      	cmp	r1, r3
 801871a:	b510      	push	{r4, lr}
 801871c:	4604      	mov	r4, r0
 801871e:	d001      	beq.n	8018724 <cleanup_stdio+0x10>
 8018720:	f001 f8d2 	bl	80198c8 <_fflush_r>
 8018724:	68a1      	ldr	r1, [r4, #8]
 8018726:	4b09      	ldr	r3, [pc, #36]	@ (801874c <cleanup_stdio+0x38>)
 8018728:	4299      	cmp	r1, r3
 801872a:	d002      	beq.n	8018732 <cleanup_stdio+0x1e>
 801872c:	4620      	mov	r0, r4
 801872e:	f001 f8cb 	bl	80198c8 <_fflush_r>
 8018732:	68e1      	ldr	r1, [r4, #12]
 8018734:	4b06      	ldr	r3, [pc, #24]	@ (8018750 <cleanup_stdio+0x3c>)
 8018736:	4299      	cmp	r1, r3
 8018738:	d004      	beq.n	8018744 <cleanup_stdio+0x30>
 801873a:	4620      	mov	r0, r4
 801873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018740:	f001 b8c2 	b.w	80198c8 <_fflush_r>
 8018744:	bd10      	pop	{r4, pc}
 8018746:	bf00      	nop
 8018748:	200096b4 	.word	0x200096b4
 801874c:	2000971c 	.word	0x2000971c
 8018750:	20009784 	.word	0x20009784

08018754 <global_stdio_init.part.0>:
 8018754:	b510      	push	{r4, lr}
 8018756:	4b0b      	ldr	r3, [pc, #44]	@ (8018784 <global_stdio_init.part.0+0x30>)
 8018758:	4c0b      	ldr	r4, [pc, #44]	@ (8018788 <global_stdio_init.part.0+0x34>)
 801875a:	4a0c      	ldr	r2, [pc, #48]	@ (801878c <global_stdio_init.part.0+0x38>)
 801875c:	601a      	str	r2, [r3, #0]
 801875e:	4620      	mov	r0, r4
 8018760:	2200      	movs	r2, #0
 8018762:	2104      	movs	r1, #4
 8018764:	f7ff ff94 	bl	8018690 <std>
 8018768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801876c:	2201      	movs	r2, #1
 801876e:	2109      	movs	r1, #9
 8018770:	f7ff ff8e 	bl	8018690 <std>
 8018774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018778:	2202      	movs	r2, #2
 801877a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801877e:	2112      	movs	r1, #18
 8018780:	f7ff bf86 	b.w	8018690 <std>
 8018784:	200097ec 	.word	0x200097ec
 8018788:	200096b4 	.word	0x200096b4
 801878c:	080186fd 	.word	0x080186fd

08018790 <__sfp_lock_acquire>:
 8018790:	4801      	ldr	r0, [pc, #4]	@ (8018798 <__sfp_lock_acquire+0x8>)
 8018792:	f000 bac0 	b.w	8018d16 <__retarget_lock_acquire_recursive>
 8018796:	bf00      	nop
 8018798:	200097f5 	.word	0x200097f5

0801879c <__sfp_lock_release>:
 801879c:	4801      	ldr	r0, [pc, #4]	@ (80187a4 <__sfp_lock_release+0x8>)
 801879e:	f000 babb 	b.w	8018d18 <__retarget_lock_release_recursive>
 80187a2:	bf00      	nop
 80187a4:	200097f5 	.word	0x200097f5

080187a8 <__sinit>:
 80187a8:	b510      	push	{r4, lr}
 80187aa:	4604      	mov	r4, r0
 80187ac:	f7ff fff0 	bl	8018790 <__sfp_lock_acquire>
 80187b0:	6a23      	ldr	r3, [r4, #32]
 80187b2:	b11b      	cbz	r3, 80187bc <__sinit+0x14>
 80187b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187b8:	f7ff bff0 	b.w	801879c <__sfp_lock_release>
 80187bc:	4b04      	ldr	r3, [pc, #16]	@ (80187d0 <__sinit+0x28>)
 80187be:	6223      	str	r3, [r4, #32]
 80187c0:	4b04      	ldr	r3, [pc, #16]	@ (80187d4 <__sinit+0x2c>)
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d1f5      	bne.n	80187b4 <__sinit+0xc>
 80187c8:	f7ff ffc4 	bl	8018754 <global_stdio_init.part.0>
 80187cc:	e7f2      	b.n	80187b4 <__sinit+0xc>
 80187ce:	bf00      	nop
 80187d0:	08018715 	.word	0x08018715
 80187d4:	200097ec 	.word	0x200097ec

080187d8 <_fwalk_sglue>:
 80187d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187dc:	4607      	mov	r7, r0
 80187de:	4688      	mov	r8, r1
 80187e0:	4614      	mov	r4, r2
 80187e2:	2600      	movs	r6, #0
 80187e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80187e8:	f1b9 0901 	subs.w	r9, r9, #1
 80187ec:	d505      	bpl.n	80187fa <_fwalk_sglue+0x22>
 80187ee:	6824      	ldr	r4, [r4, #0]
 80187f0:	2c00      	cmp	r4, #0
 80187f2:	d1f7      	bne.n	80187e4 <_fwalk_sglue+0xc>
 80187f4:	4630      	mov	r0, r6
 80187f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187fa:	89ab      	ldrh	r3, [r5, #12]
 80187fc:	2b01      	cmp	r3, #1
 80187fe:	d907      	bls.n	8018810 <_fwalk_sglue+0x38>
 8018800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018804:	3301      	adds	r3, #1
 8018806:	d003      	beq.n	8018810 <_fwalk_sglue+0x38>
 8018808:	4629      	mov	r1, r5
 801880a:	4638      	mov	r0, r7
 801880c:	47c0      	blx	r8
 801880e:	4306      	orrs	r6, r0
 8018810:	3568      	adds	r5, #104	@ 0x68
 8018812:	e7e9      	b.n	80187e8 <_fwalk_sglue+0x10>

08018814 <iprintf>:
 8018814:	b40f      	push	{r0, r1, r2, r3}
 8018816:	b507      	push	{r0, r1, r2, lr}
 8018818:	4906      	ldr	r1, [pc, #24]	@ (8018834 <iprintf+0x20>)
 801881a:	ab04      	add	r3, sp, #16
 801881c:	6808      	ldr	r0, [r1, #0]
 801881e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018822:	6881      	ldr	r1, [r0, #8]
 8018824:	9301      	str	r3, [sp, #4]
 8018826:	f000 fd27 	bl	8019278 <_vfiprintf_r>
 801882a:	b003      	add	sp, #12
 801882c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018830:	b004      	add	sp, #16
 8018832:	4770      	bx	lr
 8018834:	2000002c 	.word	0x2000002c

08018838 <_puts_r>:
 8018838:	6a03      	ldr	r3, [r0, #32]
 801883a:	b570      	push	{r4, r5, r6, lr}
 801883c:	6884      	ldr	r4, [r0, #8]
 801883e:	4605      	mov	r5, r0
 8018840:	460e      	mov	r6, r1
 8018842:	b90b      	cbnz	r3, 8018848 <_puts_r+0x10>
 8018844:	f7ff ffb0 	bl	80187a8 <__sinit>
 8018848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801884a:	07db      	lsls	r3, r3, #31
 801884c:	d405      	bmi.n	801885a <_puts_r+0x22>
 801884e:	89a3      	ldrh	r3, [r4, #12]
 8018850:	0598      	lsls	r0, r3, #22
 8018852:	d402      	bmi.n	801885a <_puts_r+0x22>
 8018854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018856:	f000 fa5e 	bl	8018d16 <__retarget_lock_acquire_recursive>
 801885a:	89a3      	ldrh	r3, [r4, #12]
 801885c:	0719      	lsls	r1, r3, #28
 801885e:	d502      	bpl.n	8018866 <_puts_r+0x2e>
 8018860:	6923      	ldr	r3, [r4, #16]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d135      	bne.n	80188d2 <_puts_r+0x9a>
 8018866:	4621      	mov	r1, r4
 8018868:	4628      	mov	r0, r5
 801886a:	f000 f8fb 	bl	8018a64 <__swsetup_r>
 801886e:	b380      	cbz	r0, 80188d2 <_puts_r+0x9a>
 8018870:	f04f 35ff 	mov.w	r5, #4294967295
 8018874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018876:	07da      	lsls	r2, r3, #31
 8018878:	d405      	bmi.n	8018886 <_puts_r+0x4e>
 801887a:	89a3      	ldrh	r3, [r4, #12]
 801887c:	059b      	lsls	r3, r3, #22
 801887e:	d402      	bmi.n	8018886 <_puts_r+0x4e>
 8018880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018882:	f000 fa49 	bl	8018d18 <__retarget_lock_release_recursive>
 8018886:	4628      	mov	r0, r5
 8018888:	bd70      	pop	{r4, r5, r6, pc}
 801888a:	2b00      	cmp	r3, #0
 801888c:	da04      	bge.n	8018898 <_puts_r+0x60>
 801888e:	69a2      	ldr	r2, [r4, #24]
 8018890:	429a      	cmp	r2, r3
 8018892:	dc17      	bgt.n	80188c4 <_puts_r+0x8c>
 8018894:	290a      	cmp	r1, #10
 8018896:	d015      	beq.n	80188c4 <_puts_r+0x8c>
 8018898:	6823      	ldr	r3, [r4, #0]
 801889a:	1c5a      	adds	r2, r3, #1
 801889c:	6022      	str	r2, [r4, #0]
 801889e:	7019      	strb	r1, [r3, #0]
 80188a0:	68a3      	ldr	r3, [r4, #8]
 80188a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80188a6:	3b01      	subs	r3, #1
 80188a8:	60a3      	str	r3, [r4, #8]
 80188aa:	2900      	cmp	r1, #0
 80188ac:	d1ed      	bne.n	801888a <_puts_r+0x52>
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	da11      	bge.n	80188d6 <_puts_r+0x9e>
 80188b2:	4622      	mov	r2, r4
 80188b4:	210a      	movs	r1, #10
 80188b6:	4628      	mov	r0, r5
 80188b8:	f000 f895 	bl	80189e6 <__swbuf_r>
 80188bc:	3001      	adds	r0, #1
 80188be:	d0d7      	beq.n	8018870 <_puts_r+0x38>
 80188c0:	250a      	movs	r5, #10
 80188c2:	e7d7      	b.n	8018874 <_puts_r+0x3c>
 80188c4:	4622      	mov	r2, r4
 80188c6:	4628      	mov	r0, r5
 80188c8:	f000 f88d 	bl	80189e6 <__swbuf_r>
 80188cc:	3001      	adds	r0, #1
 80188ce:	d1e7      	bne.n	80188a0 <_puts_r+0x68>
 80188d0:	e7ce      	b.n	8018870 <_puts_r+0x38>
 80188d2:	3e01      	subs	r6, #1
 80188d4:	e7e4      	b.n	80188a0 <_puts_r+0x68>
 80188d6:	6823      	ldr	r3, [r4, #0]
 80188d8:	1c5a      	adds	r2, r3, #1
 80188da:	6022      	str	r2, [r4, #0]
 80188dc:	220a      	movs	r2, #10
 80188de:	701a      	strb	r2, [r3, #0]
 80188e0:	e7ee      	b.n	80188c0 <_puts_r+0x88>
	...

080188e4 <puts>:
 80188e4:	4b02      	ldr	r3, [pc, #8]	@ (80188f0 <puts+0xc>)
 80188e6:	4601      	mov	r1, r0
 80188e8:	6818      	ldr	r0, [r3, #0]
 80188ea:	f7ff bfa5 	b.w	8018838 <_puts_r>
 80188ee:	bf00      	nop
 80188f0:	2000002c 	.word	0x2000002c

080188f4 <sniprintf>:
 80188f4:	b40c      	push	{r2, r3}
 80188f6:	b530      	push	{r4, r5, lr}
 80188f8:	4b18      	ldr	r3, [pc, #96]	@ (801895c <sniprintf+0x68>)
 80188fa:	1e0c      	subs	r4, r1, #0
 80188fc:	681d      	ldr	r5, [r3, #0]
 80188fe:	b09d      	sub	sp, #116	@ 0x74
 8018900:	da08      	bge.n	8018914 <sniprintf+0x20>
 8018902:	238b      	movs	r3, #139	@ 0x8b
 8018904:	602b      	str	r3, [r5, #0]
 8018906:	f04f 30ff 	mov.w	r0, #4294967295
 801890a:	b01d      	add	sp, #116	@ 0x74
 801890c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018910:	b002      	add	sp, #8
 8018912:	4770      	bx	lr
 8018914:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018918:	f8ad 3014 	strh.w	r3, [sp, #20]
 801891c:	f04f 0300 	mov.w	r3, #0
 8018920:	931b      	str	r3, [sp, #108]	@ 0x6c
 8018922:	bf14      	ite	ne
 8018924:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018928:	4623      	moveq	r3, r4
 801892a:	9304      	str	r3, [sp, #16]
 801892c:	9307      	str	r3, [sp, #28]
 801892e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018932:	9002      	str	r0, [sp, #8]
 8018934:	9006      	str	r0, [sp, #24]
 8018936:	f8ad 3016 	strh.w	r3, [sp, #22]
 801893a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801893c:	ab21      	add	r3, sp, #132	@ 0x84
 801893e:	a902      	add	r1, sp, #8
 8018940:	4628      	mov	r0, r5
 8018942:	9301      	str	r3, [sp, #4]
 8018944:	f000 fb72 	bl	801902c <_svfiprintf_r>
 8018948:	1c43      	adds	r3, r0, #1
 801894a:	bfbc      	itt	lt
 801894c:	238b      	movlt	r3, #139	@ 0x8b
 801894e:	602b      	strlt	r3, [r5, #0]
 8018950:	2c00      	cmp	r4, #0
 8018952:	d0da      	beq.n	801890a <sniprintf+0x16>
 8018954:	9b02      	ldr	r3, [sp, #8]
 8018956:	2200      	movs	r2, #0
 8018958:	701a      	strb	r2, [r3, #0]
 801895a:	e7d6      	b.n	801890a <sniprintf+0x16>
 801895c:	2000002c 	.word	0x2000002c

08018960 <__sread>:
 8018960:	b510      	push	{r4, lr}
 8018962:	460c      	mov	r4, r1
 8018964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018968:	f000 f998 	bl	8018c9c <_read_r>
 801896c:	2800      	cmp	r0, #0
 801896e:	bfab      	itete	ge
 8018970:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018972:	89a3      	ldrhlt	r3, [r4, #12]
 8018974:	181b      	addge	r3, r3, r0
 8018976:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801897a:	bfac      	ite	ge
 801897c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801897e:	81a3      	strhlt	r3, [r4, #12]
 8018980:	bd10      	pop	{r4, pc}

08018982 <__swrite>:
 8018982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018986:	461f      	mov	r7, r3
 8018988:	898b      	ldrh	r3, [r1, #12]
 801898a:	05db      	lsls	r3, r3, #23
 801898c:	4605      	mov	r5, r0
 801898e:	460c      	mov	r4, r1
 8018990:	4616      	mov	r6, r2
 8018992:	d505      	bpl.n	80189a0 <__swrite+0x1e>
 8018994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018998:	2302      	movs	r3, #2
 801899a:	2200      	movs	r2, #0
 801899c:	f000 f96c 	bl	8018c78 <_lseek_r>
 80189a0:	89a3      	ldrh	r3, [r4, #12]
 80189a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80189aa:	81a3      	strh	r3, [r4, #12]
 80189ac:	4632      	mov	r2, r6
 80189ae:	463b      	mov	r3, r7
 80189b0:	4628      	mov	r0, r5
 80189b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189b6:	f7e7 bfd9 	b.w	800096c <_write_r>

080189ba <__sseek>:
 80189ba:	b510      	push	{r4, lr}
 80189bc:	460c      	mov	r4, r1
 80189be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189c2:	f000 f959 	bl	8018c78 <_lseek_r>
 80189c6:	1c43      	adds	r3, r0, #1
 80189c8:	89a3      	ldrh	r3, [r4, #12]
 80189ca:	bf15      	itete	ne
 80189cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80189ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80189d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80189d6:	81a3      	strheq	r3, [r4, #12]
 80189d8:	bf18      	it	ne
 80189da:	81a3      	strhne	r3, [r4, #12]
 80189dc:	bd10      	pop	{r4, pc}

080189de <__sclose>:
 80189de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189e2:	f000 b8db 	b.w	8018b9c <_close_r>

080189e6 <__swbuf_r>:
 80189e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189e8:	460e      	mov	r6, r1
 80189ea:	4614      	mov	r4, r2
 80189ec:	4605      	mov	r5, r0
 80189ee:	b118      	cbz	r0, 80189f8 <__swbuf_r+0x12>
 80189f0:	6a03      	ldr	r3, [r0, #32]
 80189f2:	b90b      	cbnz	r3, 80189f8 <__swbuf_r+0x12>
 80189f4:	f7ff fed8 	bl	80187a8 <__sinit>
 80189f8:	69a3      	ldr	r3, [r4, #24]
 80189fa:	60a3      	str	r3, [r4, #8]
 80189fc:	89a3      	ldrh	r3, [r4, #12]
 80189fe:	071a      	lsls	r2, r3, #28
 8018a00:	d501      	bpl.n	8018a06 <__swbuf_r+0x20>
 8018a02:	6923      	ldr	r3, [r4, #16]
 8018a04:	b943      	cbnz	r3, 8018a18 <__swbuf_r+0x32>
 8018a06:	4621      	mov	r1, r4
 8018a08:	4628      	mov	r0, r5
 8018a0a:	f000 f82b 	bl	8018a64 <__swsetup_r>
 8018a0e:	b118      	cbz	r0, 8018a18 <__swbuf_r+0x32>
 8018a10:	f04f 37ff 	mov.w	r7, #4294967295
 8018a14:	4638      	mov	r0, r7
 8018a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a18:	6823      	ldr	r3, [r4, #0]
 8018a1a:	6922      	ldr	r2, [r4, #16]
 8018a1c:	1a98      	subs	r0, r3, r2
 8018a1e:	6963      	ldr	r3, [r4, #20]
 8018a20:	b2f6      	uxtb	r6, r6
 8018a22:	4283      	cmp	r3, r0
 8018a24:	4637      	mov	r7, r6
 8018a26:	dc05      	bgt.n	8018a34 <__swbuf_r+0x4e>
 8018a28:	4621      	mov	r1, r4
 8018a2a:	4628      	mov	r0, r5
 8018a2c:	f000 ff4c 	bl	80198c8 <_fflush_r>
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d1ed      	bne.n	8018a10 <__swbuf_r+0x2a>
 8018a34:	68a3      	ldr	r3, [r4, #8]
 8018a36:	3b01      	subs	r3, #1
 8018a38:	60a3      	str	r3, [r4, #8]
 8018a3a:	6823      	ldr	r3, [r4, #0]
 8018a3c:	1c5a      	adds	r2, r3, #1
 8018a3e:	6022      	str	r2, [r4, #0]
 8018a40:	701e      	strb	r6, [r3, #0]
 8018a42:	6962      	ldr	r2, [r4, #20]
 8018a44:	1c43      	adds	r3, r0, #1
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d004      	beq.n	8018a54 <__swbuf_r+0x6e>
 8018a4a:	89a3      	ldrh	r3, [r4, #12]
 8018a4c:	07db      	lsls	r3, r3, #31
 8018a4e:	d5e1      	bpl.n	8018a14 <__swbuf_r+0x2e>
 8018a50:	2e0a      	cmp	r6, #10
 8018a52:	d1df      	bne.n	8018a14 <__swbuf_r+0x2e>
 8018a54:	4621      	mov	r1, r4
 8018a56:	4628      	mov	r0, r5
 8018a58:	f000 ff36 	bl	80198c8 <_fflush_r>
 8018a5c:	2800      	cmp	r0, #0
 8018a5e:	d0d9      	beq.n	8018a14 <__swbuf_r+0x2e>
 8018a60:	e7d6      	b.n	8018a10 <__swbuf_r+0x2a>
	...

08018a64 <__swsetup_r>:
 8018a64:	b538      	push	{r3, r4, r5, lr}
 8018a66:	4b29      	ldr	r3, [pc, #164]	@ (8018b0c <__swsetup_r+0xa8>)
 8018a68:	4605      	mov	r5, r0
 8018a6a:	6818      	ldr	r0, [r3, #0]
 8018a6c:	460c      	mov	r4, r1
 8018a6e:	b118      	cbz	r0, 8018a78 <__swsetup_r+0x14>
 8018a70:	6a03      	ldr	r3, [r0, #32]
 8018a72:	b90b      	cbnz	r3, 8018a78 <__swsetup_r+0x14>
 8018a74:	f7ff fe98 	bl	80187a8 <__sinit>
 8018a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a7c:	0719      	lsls	r1, r3, #28
 8018a7e:	d422      	bmi.n	8018ac6 <__swsetup_r+0x62>
 8018a80:	06da      	lsls	r2, r3, #27
 8018a82:	d407      	bmi.n	8018a94 <__swsetup_r+0x30>
 8018a84:	2209      	movs	r2, #9
 8018a86:	602a      	str	r2, [r5, #0]
 8018a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a8c:	81a3      	strh	r3, [r4, #12]
 8018a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a92:	e033      	b.n	8018afc <__swsetup_r+0x98>
 8018a94:	0758      	lsls	r0, r3, #29
 8018a96:	d512      	bpl.n	8018abe <__swsetup_r+0x5a>
 8018a98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a9a:	b141      	cbz	r1, 8018aae <__swsetup_r+0x4a>
 8018a9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018aa0:	4299      	cmp	r1, r3
 8018aa2:	d002      	beq.n	8018aaa <__swsetup_r+0x46>
 8018aa4:	4628      	mov	r0, r5
 8018aa6:	f000 f965 	bl	8018d74 <_free_r>
 8018aaa:	2300      	movs	r3, #0
 8018aac:	6363      	str	r3, [r4, #52]	@ 0x34
 8018aae:	89a3      	ldrh	r3, [r4, #12]
 8018ab0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018ab4:	81a3      	strh	r3, [r4, #12]
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	6063      	str	r3, [r4, #4]
 8018aba:	6923      	ldr	r3, [r4, #16]
 8018abc:	6023      	str	r3, [r4, #0]
 8018abe:	89a3      	ldrh	r3, [r4, #12]
 8018ac0:	f043 0308 	orr.w	r3, r3, #8
 8018ac4:	81a3      	strh	r3, [r4, #12]
 8018ac6:	6923      	ldr	r3, [r4, #16]
 8018ac8:	b94b      	cbnz	r3, 8018ade <__swsetup_r+0x7a>
 8018aca:	89a3      	ldrh	r3, [r4, #12]
 8018acc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018ad4:	d003      	beq.n	8018ade <__swsetup_r+0x7a>
 8018ad6:	4621      	mov	r1, r4
 8018ad8:	4628      	mov	r0, r5
 8018ada:	f000 ff55 	bl	8019988 <__smakebuf_r>
 8018ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ae2:	f013 0201 	ands.w	r2, r3, #1
 8018ae6:	d00a      	beq.n	8018afe <__swsetup_r+0x9a>
 8018ae8:	2200      	movs	r2, #0
 8018aea:	60a2      	str	r2, [r4, #8]
 8018aec:	6962      	ldr	r2, [r4, #20]
 8018aee:	4252      	negs	r2, r2
 8018af0:	61a2      	str	r2, [r4, #24]
 8018af2:	6922      	ldr	r2, [r4, #16]
 8018af4:	b942      	cbnz	r2, 8018b08 <__swsetup_r+0xa4>
 8018af6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018afa:	d1c5      	bne.n	8018a88 <__swsetup_r+0x24>
 8018afc:	bd38      	pop	{r3, r4, r5, pc}
 8018afe:	0799      	lsls	r1, r3, #30
 8018b00:	bf58      	it	pl
 8018b02:	6962      	ldrpl	r2, [r4, #20]
 8018b04:	60a2      	str	r2, [r4, #8]
 8018b06:	e7f4      	b.n	8018af2 <__swsetup_r+0x8e>
 8018b08:	2000      	movs	r0, #0
 8018b0a:	e7f7      	b.n	8018afc <__swsetup_r+0x98>
 8018b0c:	2000002c 	.word	0x2000002c

08018b10 <memcmp>:
 8018b10:	b510      	push	{r4, lr}
 8018b12:	3901      	subs	r1, #1
 8018b14:	4402      	add	r2, r0
 8018b16:	4290      	cmp	r0, r2
 8018b18:	d101      	bne.n	8018b1e <memcmp+0xe>
 8018b1a:	2000      	movs	r0, #0
 8018b1c:	e005      	b.n	8018b2a <memcmp+0x1a>
 8018b1e:	7803      	ldrb	r3, [r0, #0]
 8018b20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018b24:	42a3      	cmp	r3, r4
 8018b26:	d001      	beq.n	8018b2c <memcmp+0x1c>
 8018b28:	1b18      	subs	r0, r3, r4
 8018b2a:	bd10      	pop	{r4, pc}
 8018b2c:	3001      	adds	r0, #1
 8018b2e:	e7f2      	b.n	8018b16 <memcmp+0x6>

08018b30 <memmove>:
 8018b30:	4288      	cmp	r0, r1
 8018b32:	b510      	push	{r4, lr}
 8018b34:	eb01 0402 	add.w	r4, r1, r2
 8018b38:	d902      	bls.n	8018b40 <memmove+0x10>
 8018b3a:	4284      	cmp	r4, r0
 8018b3c:	4623      	mov	r3, r4
 8018b3e:	d807      	bhi.n	8018b50 <memmove+0x20>
 8018b40:	1e43      	subs	r3, r0, #1
 8018b42:	42a1      	cmp	r1, r4
 8018b44:	d008      	beq.n	8018b58 <memmove+0x28>
 8018b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018b4e:	e7f8      	b.n	8018b42 <memmove+0x12>
 8018b50:	4402      	add	r2, r0
 8018b52:	4601      	mov	r1, r0
 8018b54:	428a      	cmp	r2, r1
 8018b56:	d100      	bne.n	8018b5a <memmove+0x2a>
 8018b58:	bd10      	pop	{r4, pc}
 8018b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018b62:	e7f7      	b.n	8018b54 <memmove+0x24>

08018b64 <memset>:
 8018b64:	4402      	add	r2, r0
 8018b66:	4603      	mov	r3, r0
 8018b68:	4293      	cmp	r3, r2
 8018b6a:	d100      	bne.n	8018b6e <memset+0xa>
 8018b6c:	4770      	bx	lr
 8018b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8018b72:	e7f9      	b.n	8018b68 <memset+0x4>

08018b74 <strncpy>:
 8018b74:	b510      	push	{r4, lr}
 8018b76:	3901      	subs	r1, #1
 8018b78:	4603      	mov	r3, r0
 8018b7a:	b132      	cbz	r2, 8018b8a <strncpy+0x16>
 8018b7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018b80:	f803 4b01 	strb.w	r4, [r3], #1
 8018b84:	3a01      	subs	r2, #1
 8018b86:	2c00      	cmp	r4, #0
 8018b88:	d1f7      	bne.n	8018b7a <strncpy+0x6>
 8018b8a:	441a      	add	r2, r3
 8018b8c:	2100      	movs	r1, #0
 8018b8e:	4293      	cmp	r3, r2
 8018b90:	d100      	bne.n	8018b94 <strncpy+0x20>
 8018b92:	bd10      	pop	{r4, pc}
 8018b94:	f803 1b01 	strb.w	r1, [r3], #1
 8018b98:	e7f9      	b.n	8018b8e <strncpy+0x1a>
	...

08018b9c <_close_r>:
 8018b9c:	b538      	push	{r3, r4, r5, lr}
 8018b9e:	4d06      	ldr	r5, [pc, #24]	@ (8018bb8 <_close_r+0x1c>)
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	4604      	mov	r4, r0
 8018ba4:	4608      	mov	r0, r1
 8018ba6:	602b      	str	r3, [r5, #0]
 8018ba8:	f7e8 ffe2 	bl	8001b70 <_close>
 8018bac:	1c43      	adds	r3, r0, #1
 8018bae:	d102      	bne.n	8018bb6 <_close_r+0x1a>
 8018bb0:	682b      	ldr	r3, [r5, #0]
 8018bb2:	b103      	cbz	r3, 8018bb6 <_close_r+0x1a>
 8018bb4:	6023      	str	r3, [r4, #0]
 8018bb6:	bd38      	pop	{r3, r4, r5, pc}
 8018bb8:	200097f0 	.word	0x200097f0

08018bbc <_reclaim_reent>:
 8018bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8018c74 <_reclaim_reent+0xb8>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	4283      	cmp	r3, r0
 8018bc2:	b570      	push	{r4, r5, r6, lr}
 8018bc4:	4604      	mov	r4, r0
 8018bc6:	d053      	beq.n	8018c70 <_reclaim_reent+0xb4>
 8018bc8:	69c3      	ldr	r3, [r0, #28]
 8018bca:	b31b      	cbz	r3, 8018c14 <_reclaim_reent+0x58>
 8018bcc:	68db      	ldr	r3, [r3, #12]
 8018bce:	b163      	cbz	r3, 8018bea <_reclaim_reent+0x2e>
 8018bd0:	2500      	movs	r5, #0
 8018bd2:	69e3      	ldr	r3, [r4, #28]
 8018bd4:	68db      	ldr	r3, [r3, #12]
 8018bd6:	5959      	ldr	r1, [r3, r5]
 8018bd8:	b9b1      	cbnz	r1, 8018c08 <_reclaim_reent+0x4c>
 8018bda:	3504      	adds	r5, #4
 8018bdc:	2d80      	cmp	r5, #128	@ 0x80
 8018bde:	d1f8      	bne.n	8018bd2 <_reclaim_reent+0x16>
 8018be0:	69e3      	ldr	r3, [r4, #28]
 8018be2:	4620      	mov	r0, r4
 8018be4:	68d9      	ldr	r1, [r3, #12]
 8018be6:	f000 f8c5 	bl	8018d74 <_free_r>
 8018bea:	69e3      	ldr	r3, [r4, #28]
 8018bec:	6819      	ldr	r1, [r3, #0]
 8018bee:	b111      	cbz	r1, 8018bf6 <_reclaim_reent+0x3a>
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	f000 f8bf 	bl	8018d74 <_free_r>
 8018bf6:	69e3      	ldr	r3, [r4, #28]
 8018bf8:	689d      	ldr	r5, [r3, #8]
 8018bfa:	b15d      	cbz	r5, 8018c14 <_reclaim_reent+0x58>
 8018bfc:	4629      	mov	r1, r5
 8018bfe:	4620      	mov	r0, r4
 8018c00:	682d      	ldr	r5, [r5, #0]
 8018c02:	f000 f8b7 	bl	8018d74 <_free_r>
 8018c06:	e7f8      	b.n	8018bfa <_reclaim_reent+0x3e>
 8018c08:	680e      	ldr	r6, [r1, #0]
 8018c0a:	4620      	mov	r0, r4
 8018c0c:	f000 f8b2 	bl	8018d74 <_free_r>
 8018c10:	4631      	mov	r1, r6
 8018c12:	e7e1      	b.n	8018bd8 <_reclaim_reent+0x1c>
 8018c14:	6961      	ldr	r1, [r4, #20]
 8018c16:	b111      	cbz	r1, 8018c1e <_reclaim_reent+0x62>
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f000 f8ab 	bl	8018d74 <_free_r>
 8018c1e:	69e1      	ldr	r1, [r4, #28]
 8018c20:	b111      	cbz	r1, 8018c28 <_reclaim_reent+0x6c>
 8018c22:	4620      	mov	r0, r4
 8018c24:	f000 f8a6 	bl	8018d74 <_free_r>
 8018c28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018c2a:	b111      	cbz	r1, 8018c32 <_reclaim_reent+0x76>
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	f000 f8a1 	bl	8018d74 <_free_r>
 8018c32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018c34:	b111      	cbz	r1, 8018c3c <_reclaim_reent+0x80>
 8018c36:	4620      	mov	r0, r4
 8018c38:	f000 f89c 	bl	8018d74 <_free_r>
 8018c3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018c3e:	b111      	cbz	r1, 8018c46 <_reclaim_reent+0x8a>
 8018c40:	4620      	mov	r0, r4
 8018c42:	f000 f897 	bl	8018d74 <_free_r>
 8018c46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018c48:	b111      	cbz	r1, 8018c50 <_reclaim_reent+0x94>
 8018c4a:	4620      	mov	r0, r4
 8018c4c:	f000 f892 	bl	8018d74 <_free_r>
 8018c50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018c52:	b111      	cbz	r1, 8018c5a <_reclaim_reent+0x9e>
 8018c54:	4620      	mov	r0, r4
 8018c56:	f000 f88d 	bl	8018d74 <_free_r>
 8018c5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018c5c:	b111      	cbz	r1, 8018c64 <_reclaim_reent+0xa8>
 8018c5e:	4620      	mov	r0, r4
 8018c60:	f000 f888 	bl	8018d74 <_free_r>
 8018c64:	6a23      	ldr	r3, [r4, #32]
 8018c66:	b11b      	cbz	r3, 8018c70 <_reclaim_reent+0xb4>
 8018c68:	4620      	mov	r0, r4
 8018c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c6e:	4718      	bx	r3
 8018c70:	bd70      	pop	{r4, r5, r6, pc}
 8018c72:	bf00      	nop
 8018c74:	2000002c 	.word	0x2000002c

08018c78 <_lseek_r>:
 8018c78:	b538      	push	{r3, r4, r5, lr}
 8018c7a:	4d07      	ldr	r5, [pc, #28]	@ (8018c98 <_lseek_r+0x20>)
 8018c7c:	4604      	mov	r4, r0
 8018c7e:	4608      	mov	r0, r1
 8018c80:	4611      	mov	r1, r2
 8018c82:	2200      	movs	r2, #0
 8018c84:	602a      	str	r2, [r5, #0]
 8018c86:	461a      	mov	r2, r3
 8018c88:	f7e8 ff99 	bl	8001bbe <_lseek>
 8018c8c:	1c43      	adds	r3, r0, #1
 8018c8e:	d102      	bne.n	8018c96 <_lseek_r+0x1e>
 8018c90:	682b      	ldr	r3, [r5, #0]
 8018c92:	b103      	cbz	r3, 8018c96 <_lseek_r+0x1e>
 8018c94:	6023      	str	r3, [r4, #0]
 8018c96:	bd38      	pop	{r3, r4, r5, pc}
 8018c98:	200097f0 	.word	0x200097f0

08018c9c <_read_r>:
 8018c9c:	b538      	push	{r3, r4, r5, lr}
 8018c9e:	4d07      	ldr	r5, [pc, #28]	@ (8018cbc <_read_r+0x20>)
 8018ca0:	4604      	mov	r4, r0
 8018ca2:	4608      	mov	r0, r1
 8018ca4:	4611      	mov	r1, r2
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	602a      	str	r2, [r5, #0]
 8018caa:	461a      	mov	r2, r3
 8018cac:	f7e8 ff43 	bl	8001b36 <_read>
 8018cb0:	1c43      	adds	r3, r0, #1
 8018cb2:	d102      	bne.n	8018cba <_read_r+0x1e>
 8018cb4:	682b      	ldr	r3, [r5, #0]
 8018cb6:	b103      	cbz	r3, 8018cba <_read_r+0x1e>
 8018cb8:	6023      	str	r3, [r4, #0]
 8018cba:	bd38      	pop	{r3, r4, r5, pc}
 8018cbc:	200097f0 	.word	0x200097f0

08018cc0 <__errno>:
 8018cc0:	4b01      	ldr	r3, [pc, #4]	@ (8018cc8 <__errno+0x8>)
 8018cc2:	6818      	ldr	r0, [r3, #0]
 8018cc4:	4770      	bx	lr
 8018cc6:	bf00      	nop
 8018cc8:	2000002c 	.word	0x2000002c

08018ccc <__libc_init_array>:
 8018ccc:	b570      	push	{r4, r5, r6, lr}
 8018cce:	4d0d      	ldr	r5, [pc, #52]	@ (8018d04 <__libc_init_array+0x38>)
 8018cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8018d08 <__libc_init_array+0x3c>)
 8018cd2:	1b64      	subs	r4, r4, r5
 8018cd4:	10a4      	asrs	r4, r4, #2
 8018cd6:	2600      	movs	r6, #0
 8018cd8:	42a6      	cmp	r6, r4
 8018cda:	d109      	bne.n	8018cf0 <__libc_init_array+0x24>
 8018cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8018d0c <__libc_init_array+0x40>)
 8018cde:	4c0c      	ldr	r4, [pc, #48]	@ (8018d10 <__libc_init_array+0x44>)
 8018ce0:	f000 ff42 	bl	8019b68 <_init>
 8018ce4:	1b64      	subs	r4, r4, r5
 8018ce6:	10a4      	asrs	r4, r4, #2
 8018ce8:	2600      	movs	r6, #0
 8018cea:	42a6      	cmp	r6, r4
 8018cec:	d105      	bne.n	8018cfa <__libc_init_array+0x2e>
 8018cee:	bd70      	pop	{r4, r5, r6, pc}
 8018cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8018cf4:	4798      	blx	r3
 8018cf6:	3601      	adds	r6, #1
 8018cf8:	e7ee      	b.n	8018cd8 <__libc_init_array+0xc>
 8018cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8018cfe:	4798      	blx	r3
 8018d00:	3601      	adds	r6, #1
 8018d02:	e7f2      	b.n	8018cea <__libc_init_array+0x1e>
 8018d04:	08019fd4 	.word	0x08019fd4
 8018d08:	08019fd4 	.word	0x08019fd4
 8018d0c:	08019fd4 	.word	0x08019fd4
 8018d10:	08019fd8 	.word	0x08019fd8

08018d14 <__retarget_lock_init_recursive>:
 8018d14:	4770      	bx	lr

08018d16 <__retarget_lock_acquire_recursive>:
 8018d16:	4770      	bx	lr

08018d18 <__retarget_lock_release_recursive>:
 8018d18:	4770      	bx	lr

08018d1a <memcpy>:
 8018d1a:	440a      	add	r2, r1
 8018d1c:	4291      	cmp	r1, r2
 8018d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018d22:	d100      	bne.n	8018d26 <memcpy+0xc>
 8018d24:	4770      	bx	lr
 8018d26:	b510      	push	{r4, lr}
 8018d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018d30:	4291      	cmp	r1, r2
 8018d32:	d1f9      	bne.n	8018d28 <memcpy+0xe>
 8018d34:	bd10      	pop	{r4, pc}
	...

08018d38 <__assert_func>:
 8018d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018d3a:	4614      	mov	r4, r2
 8018d3c:	461a      	mov	r2, r3
 8018d3e:	4b09      	ldr	r3, [pc, #36]	@ (8018d64 <__assert_func+0x2c>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	4605      	mov	r5, r0
 8018d44:	68d8      	ldr	r0, [r3, #12]
 8018d46:	b14c      	cbz	r4, 8018d5c <__assert_func+0x24>
 8018d48:	4b07      	ldr	r3, [pc, #28]	@ (8018d68 <__assert_func+0x30>)
 8018d4a:	9100      	str	r1, [sp, #0]
 8018d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018d50:	4906      	ldr	r1, [pc, #24]	@ (8018d6c <__assert_func+0x34>)
 8018d52:	462b      	mov	r3, r5
 8018d54:	f000 fde0 	bl	8019918 <fiprintf>
 8018d58:	f000 fe84 	bl	8019a64 <abort>
 8018d5c:	4b04      	ldr	r3, [pc, #16]	@ (8018d70 <__assert_func+0x38>)
 8018d5e:	461c      	mov	r4, r3
 8018d60:	e7f3      	b.n	8018d4a <__assert_func+0x12>
 8018d62:	bf00      	nop
 8018d64:	2000002c 	.word	0x2000002c
 8018d68:	08019f5b 	.word	0x08019f5b
 8018d6c:	08019f68 	.word	0x08019f68
 8018d70:	08019f96 	.word	0x08019f96

08018d74 <_free_r>:
 8018d74:	b538      	push	{r3, r4, r5, lr}
 8018d76:	4605      	mov	r5, r0
 8018d78:	2900      	cmp	r1, #0
 8018d7a:	d041      	beq.n	8018e00 <_free_r+0x8c>
 8018d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d80:	1f0c      	subs	r4, r1, #4
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	bfb8      	it	lt
 8018d86:	18e4      	addlt	r4, r4, r3
 8018d88:	f000 f8e8 	bl	8018f5c <__malloc_lock>
 8018d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8018e04 <_free_r+0x90>)
 8018d8e:	6813      	ldr	r3, [r2, #0]
 8018d90:	b933      	cbnz	r3, 8018da0 <_free_r+0x2c>
 8018d92:	6063      	str	r3, [r4, #4]
 8018d94:	6014      	str	r4, [r2, #0]
 8018d96:	4628      	mov	r0, r5
 8018d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d9c:	f000 b8e4 	b.w	8018f68 <__malloc_unlock>
 8018da0:	42a3      	cmp	r3, r4
 8018da2:	d908      	bls.n	8018db6 <_free_r+0x42>
 8018da4:	6820      	ldr	r0, [r4, #0]
 8018da6:	1821      	adds	r1, r4, r0
 8018da8:	428b      	cmp	r3, r1
 8018daa:	bf01      	itttt	eq
 8018dac:	6819      	ldreq	r1, [r3, #0]
 8018dae:	685b      	ldreq	r3, [r3, #4]
 8018db0:	1809      	addeq	r1, r1, r0
 8018db2:	6021      	streq	r1, [r4, #0]
 8018db4:	e7ed      	b.n	8018d92 <_free_r+0x1e>
 8018db6:	461a      	mov	r2, r3
 8018db8:	685b      	ldr	r3, [r3, #4]
 8018dba:	b10b      	cbz	r3, 8018dc0 <_free_r+0x4c>
 8018dbc:	42a3      	cmp	r3, r4
 8018dbe:	d9fa      	bls.n	8018db6 <_free_r+0x42>
 8018dc0:	6811      	ldr	r1, [r2, #0]
 8018dc2:	1850      	adds	r0, r2, r1
 8018dc4:	42a0      	cmp	r0, r4
 8018dc6:	d10b      	bne.n	8018de0 <_free_r+0x6c>
 8018dc8:	6820      	ldr	r0, [r4, #0]
 8018dca:	4401      	add	r1, r0
 8018dcc:	1850      	adds	r0, r2, r1
 8018dce:	4283      	cmp	r3, r0
 8018dd0:	6011      	str	r1, [r2, #0]
 8018dd2:	d1e0      	bne.n	8018d96 <_free_r+0x22>
 8018dd4:	6818      	ldr	r0, [r3, #0]
 8018dd6:	685b      	ldr	r3, [r3, #4]
 8018dd8:	6053      	str	r3, [r2, #4]
 8018dda:	4408      	add	r0, r1
 8018ddc:	6010      	str	r0, [r2, #0]
 8018dde:	e7da      	b.n	8018d96 <_free_r+0x22>
 8018de0:	d902      	bls.n	8018de8 <_free_r+0x74>
 8018de2:	230c      	movs	r3, #12
 8018de4:	602b      	str	r3, [r5, #0]
 8018de6:	e7d6      	b.n	8018d96 <_free_r+0x22>
 8018de8:	6820      	ldr	r0, [r4, #0]
 8018dea:	1821      	adds	r1, r4, r0
 8018dec:	428b      	cmp	r3, r1
 8018dee:	bf04      	itt	eq
 8018df0:	6819      	ldreq	r1, [r3, #0]
 8018df2:	685b      	ldreq	r3, [r3, #4]
 8018df4:	6063      	str	r3, [r4, #4]
 8018df6:	bf04      	itt	eq
 8018df8:	1809      	addeq	r1, r1, r0
 8018dfa:	6021      	streq	r1, [r4, #0]
 8018dfc:	6054      	str	r4, [r2, #4]
 8018dfe:	e7ca      	b.n	8018d96 <_free_r+0x22>
 8018e00:	bd38      	pop	{r3, r4, r5, pc}
 8018e02:	bf00      	nop
 8018e04:	200097fc 	.word	0x200097fc

08018e08 <malloc>:
 8018e08:	4b02      	ldr	r3, [pc, #8]	@ (8018e14 <malloc+0xc>)
 8018e0a:	4601      	mov	r1, r0
 8018e0c:	6818      	ldr	r0, [r3, #0]
 8018e0e:	f000 b825 	b.w	8018e5c <_malloc_r>
 8018e12:	bf00      	nop
 8018e14:	2000002c 	.word	0x2000002c

08018e18 <sbrk_aligned>:
 8018e18:	b570      	push	{r4, r5, r6, lr}
 8018e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8018e58 <sbrk_aligned+0x40>)
 8018e1c:	460c      	mov	r4, r1
 8018e1e:	6831      	ldr	r1, [r6, #0]
 8018e20:	4605      	mov	r5, r0
 8018e22:	b911      	cbnz	r1, 8018e2a <sbrk_aligned+0x12>
 8018e24:	f000 fe0e 	bl	8019a44 <_sbrk_r>
 8018e28:	6030      	str	r0, [r6, #0]
 8018e2a:	4621      	mov	r1, r4
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	f000 fe09 	bl	8019a44 <_sbrk_r>
 8018e32:	1c43      	adds	r3, r0, #1
 8018e34:	d103      	bne.n	8018e3e <sbrk_aligned+0x26>
 8018e36:	f04f 34ff 	mov.w	r4, #4294967295
 8018e3a:	4620      	mov	r0, r4
 8018e3c:	bd70      	pop	{r4, r5, r6, pc}
 8018e3e:	1cc4      	adds	r4, r0, #3
 8018e40:	f024 0403 	bic.w	r4, r4, #3
 8018e44:	42a0      	cmp	r0, r4
 8018e46:	d0f8      	beq.n	8018e3a <sbrk_aligned+0x22>
 8018e48:	1a21      	subs	r1, r4, r0
 8018e4a:	4628      	mov	r0, r5
 8018e4c:	f000 fdfa 	bl	8019a44 <_sbrk_r>
 8018e50:	3001      	adds	r0, #1
 8018e52:	d1f2      	bne.n	8018e3a <sbrk_aligned+0x22>
 8018e54:	e7ef      	b.n	8018e36 <sbrk_aligned+0x1e>
 8018e56:	bf00      	nop
 8018e58:	200097f8 	.word	0x200097f8

08018e5c <_malloc_r>:
 8018e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e60:	1ccd      	adds	r5, r1, #3
 8018e62:	f025 0503 	bic.w	r5, r5, #3
 8018e66:	3508      	adds	r5, #8
 8018e68:	2d0c      	cmp	r5, #12
 8018e6a:	bf38      	it	cc
 8018e6c:	250c      	movcc	r5, #12
 8018e6e:	2d00      	cmp	r5, #0
 8018e70:	4606      	mov	r6, r0
 8018e72:	db01      	blt.n	8018e78 <_malloc_r+0x1c>
 8018e74:	42a9      	cmp	r1, r5
 8018e76:	d904      	bls.n	8018e82 <_malloc_r+0x26>
 8018e78:	230c      	movs	r3, #12
 8018e7a:	6033      	str	r3, [r6, #0]
 8018e7c:	2000      	movs	r0, #0
 8018e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018f58 <_malloc_r+0xfc>
 8018e86:	f000 f869 	bl	8018f5c <__malloc_lock>
 8018e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8018e8e:	461c      	mov	r4, r3
 8018e90:	bb44      	cbnz	r4, 8018ee4 <_malloc_r+0x88>
 8018e92:	4629      	mov	r1, r5
 8018e94:	4630      	mov	r0, r6
 8018e96:	f7ff ffbf 	bl	8018e18 <sbrk_aligned>
 8018e9a:	1c43      	adds	r3, r0, #1
 8018e9c:	4604      	mov	r4, r0
 8018e9e:	d158      	bne.n	8018f52 <_malloc_r+0xf6>
 8018ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8018ea4:	4627      	mov	r7, r4
 8018ea6:	2f00      	cmp	r7, #0
 8018ea8:	d143      	bne.n	8018f32 <_malloc_r+0xd6>
 8018eaa:	2c00      	cmp	r4, #0
 8018eac:	d04b      	beq.n	8018f46 <_malloc_r+0xea>
 8018eae:	6823      	ldr	r3, [r4, #0]
 8018eb0:	4639      	mov	r1, r7
 8018eb2:	4630      	mov	r0, r6
 8018eb4:	eb04 0903 	add.w	r9, r4, r3
 8018eb8:	f000 fdc4 	bl	8019a44 <_sbrk_r>
 8018ebc:	4581      	cmp	r9, r0
 8018ebe:	d142      	bne.n	8018f46 <_malloc_r+0xea>
 8018ec0:	6821      	ldr	r1, [r4, #0]
 8018ec2:	1a6d      	subs	r5, r5, r1
 8018ec4:	4629      	mov	r1, r5
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	f7ff ffa6 	bl	8018e18 <sbrk_aligned>
 8018ecc:	3001      	adds	r0, #1
 8018ece:	d03a      	beq.n	8018f46 <_malloc_r+0xea>
 8018ed0:	6823      	ldr	r3, [r4, #0]
 8018ed2:	442b      	add	r3, r5
 8018ed4:	6023      	str	r3, [r4, #0]
 8018ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8018eda:	685a      	ldr	r2, [r3, #4]
 8018edc:	bb62      	cbnz	r2, 8018f38 <_malloc_r+0xdc>
 8018ede:	f8c8 7000 	str.w	r7, [r8]
 8018ee2:	e00f      	b.n	8018f04 <_malloc_r+0xa8>
 8018ee4:	6822      	ldr	r2, [r4, #0]
 8018ee6:	1b52      	subs	r2, r2, r5
 8018ee8:	d420      	bmi.n	8018f2c <_malloc_r+0xd0>
 8018eea:	2a0b      	cmp	r2, #11
 8018eec:	d917      	bls.n	8018f1e <_malloc_r+0xc2>
 8018eee:	1961      	adds	r1, r4, r5
 8018ef0:	42a3      	cmp	r3, r4
 8018ef2:	6025      	str	r5, [r4, #0]
 8018ef4:	bf18      	it	ne
 8018ef6:	6059      	strne	r1, [r3, #4]
 8018ef8:	6863      	ldr	r3, [r4, #4]
 8018efa:	bf08      	it	eq
 8018efc:	f8c8 1000 	streq.w	r1, [r8]
 8018f00:	5162      	str	r2, [r4, r5]
 8018f02:	604b      	str	r3, [r1, #4]
 8018f04:	4630      	mov	r0, r6
 8018f06:	f000 f82f 	bl	8018f68 <__malloc_unlock>
 8018f0a:	f104 000b 	add.w	r0, r4, #11
 8018f0e:	1d23      	adds	r3, r4, #4
 8018f10:	f020 0007 	bic.w	r0, r0, #7
 8018f14:	1ac2      	subs	r2, r0, r3
 8018f16:	bf1c      	itt	ne
 8018f18:	1a1b      	subne	r3, r3, r0
 8018f1a:	50a3      	strne	r3, [r4, r2]
 8018f1c:	e7af      	b.n	8018e7e <_malloc_r+0x22>
 8018f1e:	6862      	ldr	r2, [r4, #4]
 8018f20:	42a3      	cmp	r3, r4
 8018f22:	bf0c      	ite	eq
 8018f24:	f8c8 2000 	streq.w	r2, [r8]
 8018f28:	605a      	strne	r2, [r3, #4]
 8018f2a:	e7eb      	b.n	8018f04 <_malloc_r+0xa8>
 8018f2c:	4623      	mov	r3, r4
 8018f2e:	6864      	ldr	r4, [r4, #4]
 8018f30:	e7ae      	b.n	8018e90 <_malloc_r+0x34>
 8018f32:	463c      	mov	r4, r7
 8018f34:	687f      	ldr	r7, [r7, #4]
 8018f36:	e7b6      	b.n	8018ea6 <_malloc_r+0x4a>
 8018f38:	461a      	mov	r2, r3
 8018f3a:	685b      	ldr	r3, [r3, #4]
 8018f3c:	42a3      	cmp	r3, r4
 8018f3e:	d1fb      	bne.n	8018f38 <_malloc_r+0xdc>
 8018f40:	2300      	movs	r3, #0
 8018f42:	6053      	str	r3, [r2, #4]
 8018f44:	e7de      	b.n	8018f04 <_malloc_r+0xa8>
 8018f46:	230c      	movs	r3, #12
 8018f48:	6033      	str	r3, [r6, #0]
 8018f4a:	4630      	mov	r0, r6
 8018f4c:	f000 f80c 	bl	8018f68 <__malloc_unlock>
 8018f50:	e794      	b.n	8018e7c <_malloc_r+0x20>
 8018f52:	6005      	str	r5, [r0, #0]
 8018f54:	e7d6      	b.n	8018f04 <_malloc_r+0xa8>
 8018f56:	bf00      	nop
 8018f58:	200097fc 	.word	0x200097fc

08018f5c <__malloc_lock>:
 8018f5c:	4801      	ldr	r0, [pc, #4]	@ (8018f64 <__malloc_lock+0x8>)
 8018f5e:	f7ff beda 	b.w	8018d16 <__retarget_lock_acquire_recursive>
 8018f62:	bf00      	nop
 8018f64:	200097f4 	.word	0x200097f4

08018f68 <__malloc_unlock>:
 8018f68:	4801      	ldr	r0, [pc, #4]	@ (8018f70 <__malloc_unlock+0x8>)
 8018f6a:	f7ff bed5 	b.w	8018d18 <__retarget_lock_release_recursive>
 8018f6e:	bf00      	nop
 8018f70:	200097f4 	.word	0x200097f4

08018f74 <__ssputs_r>:
 8018f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f78:	688e      	ldr	r6, [r1, #8]
 8018f7a:	461f      	mov	r7, r3
 8018f7c:	42be      	cmp	r6, r7
 8018f7e:	680b      	ldr	r3, [r1, #0]
 8018f80:	4682      	mov	sl, r0
 8018f82:	460c      	mov	r4, r1
 8018f84:	4690      	mov	r8, r2
 8018f86:	d82d      	bhi.n	8018fe4 <__ssputs_r+0x70>
 8018f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018f90:	d026      	beq.n	8018fe0 <__ssputs_r+0x6c>
 8018f92:	6965      	ldr	r5, [r4, #20]
 8018f94:	6909      	ldr	r1, [r1, #16]
 8018f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f9a:	eba3 0901 	sub.w	r9, r3, r1
 8018f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018fa2:	1c7b      	adds	r3, r7, #1
 8018fa4:	444b      	add	r3, r9
 8018fa6:	106d      	asrs	r5, r5, #1
 8018fa8:	429d      	cmp	r5, r3
 8018faa:	bf38      	it	cc
 8018fac:	461d      	movcc	r5, r3
 8018fae:	0553      	lsls	r3, r2, #21
 8018fb0:	d527      	bpl.n	8019002 <__ssputs_r+0x8e>
 8018fb2:	4629      	mov	r1, r5
 8018fb4:	f7ff ff52 	bl	8018e5c <_malloc_r>
 8018fb8:	4606      	mov	r6, r0
 8018fba:	b360      	cbz	r0, 8019016 <__ssputs_r+0xa2>
 8018fbc:	6921      	ldr	r1, [r4, #16]
 8018fbe:	464a      	mov	r2, r9
 8018fc0:	f7ff feab 	bl	8018d1a <memcpy>
 8018fc4:	89a3      	ldrh	r3, [r4, #12]
 8018fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018fce:	81a3      	strh	r3, [r4, #12]
 8018fd0:	6126      	str	r6, [r4, #16]
 8018fd2:	6165      	str	r5, [r4, #20]
 8018fd4:	444e      	add	r6, r9
 8018fd6:	eba5 0509 	sub.w	r5, r5, r9
 8018fda:	6026      	str	r6, [r4, #0]
 8018fdc:	60a5      	str	r5, [r4, #8]
 8018fde:	463e      	mov	r6, r7
 8018fe0:	42be      	cmp	r6, r7
 8018fe2:	d900      	bls.n	8018fe6 <__ssputs_r+0x72>
 8018fe4:	463e      	mov	r6, r7
 8018fe6:	6820      	ldr	r0, [r4, #0]
 8018fe8:	4632      	mov	r2, r6
 8018fea:	4641      	mov	r1, r8
 8018fec:	f7ff fda0 	bl	8018b30 <memmove>
 8018ff0:	68a3      	ldr	r3, [r4, #8]
 8018ff2:	1b9b      	subs	r3, r3, r6
 8018ff4:	60a3      	str	r3, [r4, #8]
 8018ff6:	6823      	ldr	r3, [r4, #0]
 8018ff8:	4433      	add	r3, r6
 8018ffa:	6023      	str	r3, [r4, #0]
 8018ffc:	2000      	movs	r0, #0
 8018ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019002:	462a      	mov	r2, r5
 8019004:	f000 fd35 	bl	8019a72 <_realloc_r>
 8019008:	4606      	mov	r6, r0
 801900a:	2800      	cmp	r0, #0
 801900c:	d1e0      	bne.n	8018fd0 <__ssputs_r+0x5c>
 801900e:	6921      	ldr	r1, [r4, #16]
 8019010:	4650      	mov	r0, sl
 8019012:	f7ff feaf 	bl	8018d74 <_free_r>
 8019016:	230c      	movs	r3, #12
 8019018:	f8ca 3000 	str.w	r3, [sl]
 801901c:	89a3      	ldrh	r3, [r4, #12]
 801901e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019022:	81a3      	strh	r3, [r4, #12]
 8019024:	f04f 30ff 	mov.w	r0, #4294967295
 8019028:	e7e9      	b.n	8018ffe <__ssputs_r+0x8a>
	...

0801902c <_svfiprintf_r>:
 801902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019030:	4698      	mov	r8, r3
 8019032:	898b      	ldrh	r3, [r1, #12]
 8019034:	061b      	lsls	r3, r3, #24
 8019036:	b09d      	sub	sp, #116	@ 0x74
 8019038:	4607      	mov	r7, r0
 801903a:	460d      	mov	r5, r1
 801903c:	4614      	mov	r4, r2
 801903e:	d510      	bpl.n	8019062 <_svfiprintf_r+0x36>
 8019040:	690b      	ldr	r3, [r1, #16]
 8019042:	b973      	cbnz	r3, 8019062 <_svfiprintf_r+0x36>
 8019044:	2140      	movs	r1, #64	@ 0x40
 8019046:	f7ff ff09 	bl	8018e5c <_malloc_r>
 801904a:	6028      	str	r0, [r5, #0]
 801904c:	6128      	str	r0, [r5, #16]
 801904e:	b930      	cbnz	r0, 801905e <_svfiprintf_r+0x32>
 8019050:	230c      	movs	r3, #12
 8019052:	603b      	str	r3, [r7, #0]
 8019054:	f04f 30ff 	mov.w	r0, #4294967295
 8019058:	b01d      	add	sp, #116	@ 0x74
 801905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801905e:	2340      	movs	r3, #64	@ 0x40
 8019060:	616b      	str	r3, [r5, #20]
 8019062:	2300      	movs	r3, #0
 8019064:	9309      	str	r3, [sp, #36]	@ 0x24
 8019066:	2320      	movs	r3, #32
 8019068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801906c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019070:	2330      	movs	r3, #48	@ 0x30
 8019072:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019210 <_svfiprintf_r+0x1e4>
 8019076:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801907a:	f04f 0901 	mov.w	r9, #1
 801907e:	4623      	mov	r3, r4
 8019080:	469a      	mov	sl, r3
 8019082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019086:	b10a      	cbz	r2, 801908c <_svfiprintf_r+0x60>
 8019088:	2a25      	cmp	r2, #37	@ 0x25
 801908a:	d1f9      	bne.n	8019080 <_svfiprintf_r+0x54>
 801908c:	ebba 0b04 	subs.w	fp, sl, r4
 8019090:	d00b      	beq.n	80190aa <_svfiprintf_r+0x7e>
 8019092:	465b      	mov	r3, fp
 8019094:	4622      	mov	r2, r4
 8019096:	4629      	mov	r1, r5
 8019098:	4638      	mov	r0, r7
 801909a:	f7ff ff6b 	bl	8018f74 <__ssputs_r>
 801909e:	3001      	adds	r0, #1
 80190a0:	f000 80a7 	beq.w	80191f2 <_svfiprintf_r+0x1c6>
 80190a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80190a6:	445a      	add	r2, fp
 80190a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80190aa:	f89a 3000 	ldrb.w	r3, [sl]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	f000 809f 	beq.w	80191f2 <_svfiprintf_r+0x1c6>
 80190b4:	2300      	movs	r3, #0
 80190b6:	f04f 32ff 	mov.w	r2, #4294967295
 80190ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190be:	f10a 0a01 	add.w	sl, sl, #1
 80190c2:	9304      	str	r3, [sp, #16]
 80190c4:	9307      	str	r3, [sp, #28]
 80190c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80190ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80190cc:	4654      	mov	r4, sl
 80190ce:	2205      	movs	r2, #5
 80190d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190d4:	484e      	ldr	r0, [pc, #312]	@ (8019210 <_svfiprintf_r+0x1e4>)
 80190d6:	f7e7 f8cb 	bl	8000270 <memchr>
 80190da:	9a04      	ldr	r2, [sp, #16]
 80190dc:	b9d8      	cbnz	r0, 8019116 <_svfiprintf_r+0xea>
 80190de:	06d0      	lsls	r0, r2, #27
 80190e0:	bf44      	itt	mi
 80190e2:	2320      	movmi	r3, #32
 80190e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80190e8:	0711      	lsls	r1, r2, #28
 80190ea:	bf44      	itt	mi
 80190ec:	232b      	movmi	r3, #43	@ 0x2b
 80190ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80190f2:	f89a 3000 	ldrb.w	r3, [sl]
 80190f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80190f8:	d015      	beq.n	8019126 <_svfiprintf_r+0xfa>
 80190fa:	9a07      	ldr	r2, [sp, #28]
 80190fc:	4654      	mov	r4, sl
 80190fe:	2000      	movs	r0, #0
 8019100:	f04f 0c0a 	mov.w	ip, #10
 8019104:	4621      	mov	r1, r4
 8019106:	f811 3b01 	ldrb.w	r3, [r1], #1
 801910a:	3b30      	subs	r3, #48	@ 0x30
 801910c:	2b09      	cmp	r3, #9
 801910e:	d94b      	bls.n	80191a8 <_svfiprintf_r+0x17c>
 8019110:	b1b0      	cbz	r0, 8019140 <_svfiprintf_r+0x114>
 8019112:	9207      	str	r2, [sp, #28]
 8019114:	e014      	b.n	8019140 <_svfiprintf_r+0x114>
 8019116:	eba0 0308 	sub.w	r3, r0, r8
 801911a:	fa09 f303 	lsl.w	r3, r9, r3
 801911e:	4313      	orrs	r3, r2
 8019120:	9304      	str	r3, [sp, #16]
 8019122:	46a2      	mov	sl, r4
 8019124:	e7d2      	b.n	80190cc <_svfiprintf_r+0xa0>
 8019126:	9b03      	ldr	r3, [sp, #12]
 8019128:	1d19      	adds	r1, r3, #4
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	9103      	str	r1, [sp, #12]
 801912e:	2b00      	cmp	r3, #0
 8019130:	bfbb      	ittet	lt
 8019132:	425b      	neglt	r3, r3
 8019134:	f042 0202 	orrlt.w	r2, r2, #2
 8019138:	9307      	strge	r3, [sp, #28]
 801913a:	9307      	strlt	r3, [sp, #28]
 801913c:	bfb8      	it	lt
 801913e:	9204      	strlt	r2, [sp, #16]
 8019140:	7823      	ldrb	r3, [r4, #0]
 8019142:	2b2e      	cmp	r3, #46	@ 0x2e
 8019144:	d10a      	bne.n	801915c <_svfiprintf_r+0x130>
 8019146:	7863      	ldrb	r3, [r4, #1]
 8019148:	2b2a      	cmp	r3, #42	@ 0x2a
 801914a:	d132      	bne.n	80191b2 <_svfiprintf_r+0x186>
 801914c:	9b03      	ldr	r3, [sp, #12]
 801914e:	1d1a      	adds	r2, r3, #4
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	9203      	str	r2, [sp, #12]
 8019154:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019158:	3402      	adds	r4, #2
 801915a:	9305      	str	r3, [sp, #20]
 801915c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019220 <_svfiprintf_r+0x1f4>
 8019160:	7821      	ldrb	r1, [r4, #0]
 8019162:	2203      	movs	r2, #3
 8019164:	4650      	mov	r0, sl
 8019166:	f7e7 f883 	bl	8000270 <memchr>
 801916a:	b138      	cbz	r0, 801917c <_svfiprintf_r+0x150>
 801916c:	9b04      	ldr	r3, [sp, #16]
 801916e:	eba0 000a 	sub.w	r0, r0, sl
 8019172:	2240      	movs	r2, #64	@ 0x40
 8019174:	4082      	lsls	r2, r0
 8019176:	4313      	orrs	r3, r2
 8019178:	3401      	adds	r4, #1
 801917a:	9304      	str	r3, [sp, #16]
 801917c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019180:	4824      	ldr	r0, [pc, #144]	@ (8019214 <_svfiprintf_r+0x1e8>)
 8019182:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019186:	2206      	movs	r2, #6
 8019188:	f7e7 f872 	bl	8000270 <memchr>
 801918c:	2800      	cmp	r0, #0
 801918e:	d036      	beq.n	80191fe <_svfiprintf_r+0x1d2>
 8019190:	4b21      	ldr	r3, [pc, #132]	@ (8019218 <_svfiprintf_r+0x1ec>)
 8019192:	bb1b      	cbnz	r3, 80191dc <_svfiprintf_r+0x1b0>
 8019194:	9b03      	ldr	r3, [sp, #12]
 8019196:	3307      	adds	r3, #7
 8019198:	f023 0307 	bic.w	r3, r3, #7
 801919c:	3308      	adds	r3, #8
 801919e:	9303      	str	r3, [sp, #12]
 80191a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191a2:	4433      	add	r3, r6
 80191a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80191a6:	e76a      	b.n	801907e <_svfiprintf_r+0x52>
 80191a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80191ac:	460c      	mov	r4, r1
 80191ae:	2001      	movs	r0, #1
 80191b0:	e7a8      	b.n	8019104 <_svfiprintf_r+0xd8>
 80191b2:	2300      	movs	r3, #0
 80191b4:	3401      	adds	r4, #1
 80191b6:	9305      	str	r3, [sp, #20]
 80191b8:	4619      	mov	r1, r3
 80191ba:	f04f 0c0a 	mov.w	ip, #10
 80191be:	4620      	mov	r0, r4
 80191c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191c4:	3a30      	subs	r2, #48	@ 0x30
 80191c6:	2a09      	cmp	r2, #9
 80191c8:	d903      	bls.n	80191d2 <_svfiprintf_r+0x1a6>
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d0c6      	beq.n	801915c <_svfiprintf_r+0x130>
 80191ce:	9105      	str	r1, [sp, #20]
 80191d0:	e7c4      	b.n	801915c <_svfiprintf_r+0x130>
 80191d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80191d6:	4604      	mov	r4, r0
 80191d8:	2301      	movs	r3, #1
 80191da:	e7f0      	b.n	80191be <_svfiprintf_r+0x192>
 80191dc:	ab03      	add	r3, sp, #12
 80191de:	9300      	str	r3, [sp, #0]
 80191e0:	462a      	mov	r2, r5
 80191e2:	4b0e      	ldr	r3, [pc, #56]	@ (801921c <_svfiprintf_r+0x1f0>)
 80191e4:	a904      	add	r1, sp, #16
 80191e6:	4638      	mov	r0, r7
 80191e8:	f3af 8000 	nop.w
 80191ec:	1c42      	adds	r2, r0, #1
 80191ee:	4606      	mov	r6, r0
 80191f0:	d1d6      	bne.n	80191a0 <_svfiprintf_r+0x174>
 80191f2:	89ab      	ldrh	r3, [r5, #12]
 80191f4:	065b      	lsls	r3, r3, #25
 80191f6:	f53f af2d 	bmi.w	8019054 <_svfiprintf_r+0x28>
 80191fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80191fc:	e72c      	b.n	8019058 <_svfiprintf_r+0x2c>
 80191fe:	ab03      	add	r3, sp, #12
 8019200:	9300      	str	r3, [sp, #0]
 8019202:	462a      	mov	r2, r5
 8019204:	4b05      	ldr	r3, [pc, #20]	@ (801921c <_svfiprintf_r+0x1f0>)
 8019206:	a904      	add	r1, sp, #16
 8019208:	4638      	mov	r0, r7
 801920a:	f000 f9bb 	bl	8019584 <_printf_i>
 801920e:	e7ed      	b.n	80191ec <_svfiprintf_r+0x1c0>
 8019210:	08019f97 	.word	0x08019f97
 8019214:	08019fa1 	.word	0x08019fa1
 8019218:	00000000 	.word	0x00000000
 801921c:	08018f75 	.word	0x08018f75
 8019220:	08019f9d 	.word	0x08019f9d

08019224 <__sfputc_r>:
 8019224:	6893      	ldr	r3, [r2, #8]
 8019226:	3b01      	subs	r3, #1
 8019228:	2b00      	cmp	r3, #0
 801922a:	b410      	push	{r4}
 801922c:	6093      	str	r3, [r2, #8]
 801922e:	da08      	bge.n	8019242 <__sfputc_r+0x1e>
 8019230:	6994      	ldr	r4, [r2, #24]
 8019232:	42a3      	cmp	r3, r4
 8019234:	db01      	blt.n	801923a <__sfputc_r+0x16>
 8019236:	290a      	cmp	r1, #10
 8019238:	d103      	bne.n	8019242 <__sfputc_r+0x1e>
 801923a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801923e:	f7ff bbd2 	b.w	80189e6 <__swbuf_r>
 8019242:	6813      	ldr	r3, [r2, #0]
 8019244:	1c58      	adds	r0, r3, #1
 8019246:	6010      	str	r0, [r2, #0]
 8019248:	7019      	strb	r1, [r3, #0]
 801924a:	4608      	mov	r0, r1
 801924c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019250:	4770      	bx	lr

08019252 <__sfputs_r>:
 8019252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019254:	4606      	mov	r6, r0
 8019256:	460f      	mov	r7, r1
 8019258:	4614      	mov	r4, r2
 801925a:	18d5      	adds	r5, r2, r3
 801925c:	42ac      	cmp	r4, r5
 801925e:	d101      	bne.n	8019264 <__sfputs_r+0x12>
 8019260:	2000      	movs	r0, #0
 8019262:	e007      	b.n	8019274 <__sfputs_r+0x22>
 8019264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019268:	463a      	mov	r2, r7
 801926a:	4630      	mov	r0, r6
 801926c:	f7ff ffda 	bl	8019224 <__sfputc_r>
 8019270:	1c43      	adds	r3, r0, #1
 8019272:	d1f3      	bne.n	801925c <__sfputs_r+0xa>
 8019274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019278 <_vfiprintf_r>:
 8019278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801927c:	460d      	mov	r5, r1
 801927e:	b09d      	sub	sp, #116	@ 0x74
 8019280:	4614      	mov	r4, r2
 8019282:	4698      	mov	r8, r3
 8019284:	4606      	mov	r6, r0
 8019286:	b118      	cbz	r0, 8019290 <_vfiprintf_r+0x18>
 8019288:	6a03      	ldr	r3, [r0, #32]
 801928a:	b90b      	cbnz	r3, 8019290 <_vfiprintf_r+0x18>
 801928c:	f7ff fa8c 	bl	80187a8 <__sinit>
 8019290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019292:	07d9      	lsls	r1, r3, #31
 8019294:	d405      	bmi.n	80192a2 <_vfiprintf_r+0x2a>
 8019296:	89ab      	ldrh	r3, [r5, #12]
 8019298:	059a      	lsls	r2, r3, #22
 801929a:	d402      	bmi.n	80192a2 <_vfiprintf_r+0x2a>
 801929c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801929e:	f7ff fd3a 	bl	8018d16 <__retarget_lock_acquire_recursive>
 80192a2:	89ab      	ldrh	r3, [r5, #12]
 80192a4:	071b      	lsls	r3, r3, #28
 80192a6:	d501      	bpl.n	80192ac <_vfiprintf_r+0x34>
 80192a8:	692b      	ldr	r3, [r5, #16]
 80192aa:	b99b      	cbnz	r3, 80192d4 <_vfiprintf_r+0x5c>
 80192ac:	4629      	mov	r1, r5
 80192ae:	4630      	mov	r0, r6
 80192b0:	f7ff fbd8 	bl	8018a64 <__swsetup_r>
 80192b4:	b170      	cbz	r0, 80192d4 <_vfiprintf_r+0x5c>
 80192b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80192b8:	07dc      	lsls	r4, r3, #31
 80192ba:	d504      	bpl.n	80192c6 <_vfiprintf_r+0x4e>
 80192bc:	f04f 30ff 	mov.w	r0, #4294967295
 80192c0:	b01d      	add	sp, #116	@ 0x74
 80192c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192c6:	89ab      	ldrh	r3, [r5, #12]
 80192c8:	0598      	lsls	r0, r3, #22
 80192ca:	d4f7      	bmi.n	80192bc <_vfiprintf_r+0x44>
 80192cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80192ce:	f7ff fd23 	bl	8018d18 <__retarget_lock_release_recursive>
 80192d2:	e7f3      	b.n	80192bc <_vfiprintf_r+0x44>
 80192d4:	2300      	movs	r3, #0
 80192d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80192d8:	2320      	movs	r3, #32
 80192da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80192de:	f8cd 800c 	str.w	r8, [sp, #12]
 80192e2:	2330      	movs	r3, #48	@ 0x30
 80192e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019494 <_vfiprintf_r+0x21c>
 80192e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80192ec:	f04f 0901 	mov.w	r9, #1
 80192f0:	4623      	mov	r3, r4
 80192f2:	469a      	mov	sl, r3
 80192f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192f8:	b10a      	cbz	r2, 80192fe <_vfiprintf_r+0x86>
 80192fa:	2a25      	cmp	r2, #37	@ 0x25
 80192fc:	d1f9      	bne.n	80192f2 <_vfiprintf_r+0x7a>
 80192fe:	ebba 0b04 	subs.w	fp, sl, r4
 8019302:	d00b      	beq.n	801931c <_vfiprintf_r+0xa4>
 8019304:	465b      	mov	r3, fp
 8019306:	4622      	mov	r2, r4
 8019308:	4629      	mov	r1, r5
 801930a:	4630      	mov	r0, r6
 801930c:	f7ff ffa1 	bl	8019252 <__sfputs_r>
 8019310:	3001      	adds	r0, #1
 8019312:	f000 80a7 	beq.w	8019464 <_vfiprintf_r+0x1ec>
 8019316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019318:	445a      	add	r2, fp
 801931a:	9209      	str	r2, [sp, #36]	@ 0x24
 801931c:	f89a 3000 	ldrb.w	r3, [sl]
 8019320:	2b00      	cmp	r3, #0
 8019322:	f000 809f 	beq.w	8019464 <_vfiprintf_r+0x1ec>
 8019326:	2300      	movs	r3, #0
 8019328:	f04f 32ff 	mov.w	r2, #4294967295
 801932c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019330:	f10a 0a01 	add.w	sl, sl, #1
 8019334:	9304      	str	r3, [sp, #16]
 8019336:	9307      	str	r3, [sp, #28]
 8019338:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801933c:	931a      	str	r3, [sp, #104]	@ 0x68
 801933e:	4654      	mov	r4, sl
 8019340:	2205      	movs	r2, #5
 8019342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019346:	4853      	ldr	r0, [pc, #332]	@ (8019494 <_vfiprintf_r+0x21c>)
 8019348:	f7e6 ff92 	bl	8000270 <memchr>
 801934c:	9a04      	ldr	r2, [sp, #16]
 801934e:	b9d8      	cbnz	r0, 8019388 <_vfiprintf_r+0x110>
 8019350:	06d1      	lsls	r1, r2, #27
 8019352:	bf44      	itt	mi
 8019354:	2320      	movmi	r3, #32
 8019356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801935a:	0713      	lsls	r3, r2, #28
 801935c:	bf44      	itt	mi
 801935e:	232b      	movmi	r3, #43	@ 0x2b
 8019360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019364:	f89a 3000 	ldrb.w	r3, [sl]
 8019368:	2b2a      	cmp	r3, #42	@ 0x2a
 801936a:	d015      	beq.n	8019398 <_vfiprintf_r+0x120>
 801936c:	9a07      	ldr	r2, [sp, #28]
 801936e:	4654      	mov	r4, sl
 8019370:	2000      	movs	r0, #0
 8019372:	f04f 0c0a 	mov.w	ip, #10
 8019376:	4621      	mov	r1, r4
 8019378:	f811 3b01 	ldrb.w	r3, [r1], #1
 801937c:	3b30      	subs	r3, #48	@ 0x30
 801937e:	2b09      	cmp	r3, #9
 8019380:	d94b      	bls.n	801941a <_vfiprintf_r+0x1a2>
 8019382:	b1b0      	cbz	r0, 80193b2 <_vfiprintf_r+0x13a>
 8019384:	9207      	str	r2, [sp, #28]
 8019386:	e014      	b.n	80193b2 <_vfiprintf_r+0x13a>
 8019388:	eba0 0308 	sub.w	r3, r0, r8
 801938c:	fa09 f303 	lsl.w	r3, r9, r3
 8019390:	4313      	orrs	r3, r2
 8019392:	9304      	str	r3, [sp, #16]
 8019394:	46a2      	mov	sl, r4
 8019396:	e7d2      	b.n	801933e <_vfiprintf_r+0xc6>
 8019398:	9b03      	ldr	r3, [sp, #12]
 801939a:	1d19      	adds	r1, r3, #4
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	9103      	str	r1, [sp, #12]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	bfbb      	ittet	lt
 80193a4:	425b      	neglt	r3, r3
 80193a6:	f042 0202 	orrlt.w	r2, r2, #2
 80193aa:	9307      	strge	r3, [sp, #28]
 80193ac:	9307      	strlt	r3, [sp, #28]
 80193ae:	bfb8      	it	lt
 80193b0:	9204      	strlt	r2, [sp, #16]
 80193b2:	7823      	ldrb	r3, [r4, #0]
 80193b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80193b6:	d10a      	bne.n	80193ce <_vfiprintf_r+0x156>
 80193b8:	7863      	ldrb	r3, [r4, #1]
 80193ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80193bc:	d132      	bne.n	8019424 <_vfiprintf_r+0x1ac>
 80193be:	9b03      	ldr	r3, [sp, #12]
 80193c0:	1d1a      	adds	r2, r3, #4
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	9203      	str	r2, [sp, #12]
 80193c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80193ca:	3402      	adds	r4, #2
 80193cc:	9305      	str	r3, [sp, #20]
 80193ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80194a4 <_vfiprintf_r+0x22c>
 80193d2:	7821      	ldrb	r1, [r4, #0]
 80193d4:	2203      	movs	r2, #3
 80193d6:	4650      	mov	r0, sl
 80193d8:	f7e6 ff4a 	bl	8000270 <memchr>
 80193dc:	b138      	cbz	r0, 80193ee <_vfiprintf_r+0x176>
 80193de:	9b04      	ldr	r3, [sp, #16]
 80193e0:	eba0 000a 	sub.w	r0, r0, sl
 80193e4:	2240      	movs	r2, #64	@ 0x40
 80193e6:	4082      	lsls	r2, r0
 80193e8:	4313      	orrs	r3, r2
 80193ea:	3401      	adds	r4, #1
 80193ec:	9304      	str	r3, [sp, #16]
 80193ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193f2:	4829      	ldr	r0, [pc, #164]	@ (8019498 <_vfiprintf_r+0x220>)
 80193f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80193f8:	2206      	movs	r2, #6
 80193fa:	f7e6 ff39 	bl	8000270 <memchr>
 80193fe:	2800      	cmp	r0, #0
 8019400:	d03f      	beq.n	8019482 <_vfiprintf_r+0x20a>
 8019402:	4b26      	ldr	r3, [pc, #152]	@ (801949c <_vfiprintf_r+0x224>)
 8019404:	bb1b      	cbnz	r3, 801944e <_vfiprintf_r+0x1d6>
 8019406:	9b03      	ldr	r3, [sp, #12]
 8019408:	3307      	adds	r3, #7
 801940a:	f023 0307 	bic.w	r3, r3, #7
 801940e:	3308      	adds	r3, #8
 8019410:	9303      	str	r3, [sp, #12]
 8019412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019414:	443b      	add	r3, r7
 8019416:	9309      	str	r3, [sp, #36]	@ 0x24
 8019418:	e76a      	b.n	80192f0 <_vfiprintf_r+0x78>
 801941a:	fb0c 3202 	mla	r2, ip, r2, r3
 801941e:	460c      	mov	r4, r1
 8019420:	2001      	movs	r0, #1
 8019422:	e7a8      	b.n	8019376 <_vfiprintf_r+0xfe>
 8019424:	2300      	movs	r3, #0
 8019426:	3401      	adds	r4, #1
 8019428:	9305      	str	r3, [sp, #20]
 801942a:	4619      	mov	r1, r3
 801942c:	f04f 0c0a 	mov.w	ip, #10
 8019430:	4620      	mov	r0, r4
 8019432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019436:	3a30      	subs	r2, #48	@ 0x30
 8019438:	2a09      	cmp	r2, #9
 801943a:	d903      	bls.n	8019444 <_vfiprintf_r+0x1cc>
 801943c:	2b00      	cmp	r3, #0
 801943e:	d0c6      	beq.n	80193ce <_vfiprintf_r+0x156>
 8019440:	9105      	str	r1, [sp, #20]
 8019442:	e7c4      	b.n	80193ce <_vfiprintf_r+0x156>
 8019444:	fb0c 2101 	mla	r1, ip, r1, r2
 8019448:	4604      	mov	r4, r0
 801944a:	2301      	movs	r3, #1
 801944c:	e7f0      	b.n	8019430 <_vfiprintf_r+0x1b8>
 801944e:	ab03      	add	r3, sp, #12
 8019450:	9300      	str	r3, [sp, #0]
 8019452:	462a      	mov	r2, r5
 8019454:	4b12      	ldr	r3, [pc, #72]	@ (80194a0 <_vfiprintf_r+0x228>)
 8019456:	a904      	add	r1, sp, #16
 8019458:	4630      	mov	r0, r6
 801945a:	f3af 8000 	nop.w
 801945e:	4607      	mov	r7, r0
 8019460:	1c78      	adds	r0, r7, #1
 8019462:	d1d6      	bne.n	8019412 <_vfiprintf_r+0x19a>
 8019464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019466:	07d9      	lsls	r1, r3, #31
 8019468:	d405      	bmi.n	8019476 <_vfiprintf_r+0x1fe>
 801946a:	89ab      	ldrh	r3, [r5, #12]
 801946c:	059a      	lsls	r2, r3, #22
 801946e:	d402      	bmi.n	8019476 <_vfiprintf_r+0x1fe>
 8019470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019472:	f7ff fc51 	bl	8018d18 <__retarget_lock_release_recursive>
 8019476:	89ab      	ldrh	r3, [r5, #12]
 8019478:	065b      	lsls	r3, r3, #25
 801947a:	f53f af1f 	bmi.w	80192bc <_vfiprintf_r+0x44>
 801947e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019480:	e71e      	b.n	80192c0 <_vfiprintf_r+0x48>
 8019482:	ab03      	add	r3, sp, #12
 8019484:	9300      	str	r3, [sp, #0]
 8019486:	462a      	mov	r2, r5
 8019488:	4b05      	ldr	r3, [pc, #20]	@ (80194a0 <_vfiprintf_r+0x228>)
 801948a:	a904      	add	r1, sp, #16
 801948c:	4630      	mov	r0, r6
 801948e:	f000 f879 	bl	8019584 <_printf_i>
 8019492:	e7e4      	b.n	801945e <_vfiprintf_r+0x1e6>
 8019494:	08019f97 	.word	0x08019f97
 8019498:	08019fa1 	.word	0x08019fa1
 801949c:	00000000 	.word	0x00000000
 80194a0:	08019253 	.word	0x08019253
 80194a4:	08019f9d 	.word	0x08019f9d

080194a8 <_printf_common>:
 80194a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194ac:	4616      	mov	r6, r2
 80194ae:	4698      	mov	r8, r3
 80194b0:	688a      	ldr	r2, [r1, #8]
 80194b2:	690b      	ldr	r3, [r1, #16]
 80194b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80194b8:	4293      	cmp	r3, r2
 80194ba:	bfb8      	it	lt
 80194bc:	4613      	movlt	r3, r2
 80194be:	6033      	str	r3, [r6, #0]
 80194c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80194c4:	4607      	mov	r7, r0
 80194c6:	460c      	mov	r4, r1
 80194c8:	b10a      	cbz	r2, 80194ce <_printf_common+0x26>
 80194ca:	3301      	adds	r3, #1
 80194cc:	6033      	str	r3, [r6, #0]
 80194ce:	6823      	ldr	r3, [r4, #0]
 80194d0:	0699      	lsls	r1, r3, #26
 80194d2:	bf42      	ittt	mi
 80194d4:	6833      	ldrmi	r3, [r6, #0]
 80194d6:	3302      	addmi	r3, #2
 80194d8:	6033      	strmi	r3, [r6, #0]
 80194da:	6825      	ldr	r5, [r4, #0]
 80194dc:	f015 0506 	ands.w	r5, r5, #6
 80194e0:	d106      	bne.n	80194f0 <_printf_common+0x48>
 80194e2:	f104 0a19 	add.w	sl, r4, #25
 80194e6:	68e3      	ldr	r3, [r4, #12]
 80194e8:	6832      	ldr	r2, [r6, #0]
 80194ea:	1a9b      	subs	r3, r3, r2
 80194ec:	42ab      	cmp	r3, r5
 80194ee:	dc26      	bgt.n	801953e <_printf_common+0x96>
 80194f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80194f4:	6822      	ldr	r2, [r4, #0]
 80194f6:	3b00      	subs	r3, #0
 80194f8:	bf18      	it	ne
 80194fa:	2301      	movne	r3, #1
 80194fc:	0692      	lsls	r2, r2, #26
 80194fe:	d42b      	bmi.n	8019558 <_printf_common+0xb0>
 8019500:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019504:	4641      	mov	r1, r8
 8019506:	4638      	mov	r0, r7
 8019508:	47c8      	blx	r9
 801950a:	3001      	adds	r0, #1
 801950c:	d01e      	beq.n	801954c <_printf_common+0xa4>
 801950e:	6823      	ldr	r3, [r4, #0]
 8019510:	6922      	ldr	r2, [r4, #16]
 8019512:	f003 0306 	and.w	r3, r3, #6
 8019516:	2b04      	cmp	r3, #4
 8019518:	bf02      	ittt	eq
 801951a:	68e5      	ldreq	r5, [r4, #12]
 801951c:	6833      	ldreq	r3, [r6, #0]
 801951e:	1aed      	subeq	r5, r5, r3
 8019520:	68a3      	ldr	r3, [r4, #8]
 8019522:	bf0c      	ite	eq
 8019524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019528:	2500      	movne	r5, #0
 801952a:	4293      	cmp	r3, r2
 801952c:	bfc4      	itt	gt
 801952e:	1a9b      	subgt	r3, r3, r2
 8019530:	18ed      	addgt	r5, r5, r3
 8019532:	2600      	movs	r6, #0
 8019534:	341a      	adds	r4, #26
 8019536:	42b5      	cmp	r5, r6
 8019538:	d11a      	bne.n	8019570 <_printf_common+0xc8>
 801953a:	2000      	movs	r0, #0
 801953c:	e008      	b.n	8019550 <_printf_common+0xa8>
 801953e:	2301      	movs	r3, #1
 8019540:	4652      	mov	r2, sl
 8019542:	4641      	mov	r1, r8
 8019544:	4638      	mov	r0, r7
 8019546:	47c8      	blx	r9
 8019548:	3001      	adds	r0, #1
 801954a:	d103      	bne.n	8019554 <_printf_common+0xac>
 801954c:	f04f 30ff 	mov.w	r0, #4294967295
 8019550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019554:	3501      	adds	r5, #1
 8019556:	e7c6      	b.n	80194e6 <_printf_common+0x3e>
 8019558:	18e1      	adds	r1, r4, r3
 801955a:	1c5a      	adds	r2, r3, #1
 801955c:	2030      	movs	r0, #48	@ 0x30
 801955e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019562:	4422      	add	r2, r4
 8019564:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019568:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801956c:	3302      	adds	r3, #2
 801956e:	e7c7      	b.n	8019500 <_printf_common+0x58>
 8019570:	2301      	movs	r3, #1
 8019572:	4622      	mov	r2, r4
 8019574:	4641      	mov	r1, r8
 8019576:	4638      	mov	r0, r7
 8019578:	47c8      	blx	r9
 801957a:	3001      	adds	r0, #1
 801957c:	d0e6      	beq.n	801954c <_printf_common+0xa4>
 801957e:	3601      	adds	r6, #1
 8019580:	e7d9      	b.n	8019536 <_printf_common+0x8e>
	...

08019584 <_printf_i>:
 8019584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019588:	7e0f      	ldrb	r7, [r1, #24]
 801958a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801958c:	2f78      	cmp	r7, #120	@ 0x78
 801958e:	4691      	mov	r9, r2
 8019590:	4680      	mov	r8, r0
 8019592:	460c      	mov	r4, r1
 8019594:	469a      	mov	sl, r3
 8019596:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801959a:	d807      	bhi.n	80195ac <_printf_i+0x28>
 801959c:	2f62      	cmp	r7, #98	@ 0x62
 801959e:	d80a      	bhi.n	80195b6 <_printf_i+0x32>
 80195a0:	2f00      	cmp	r7, #0
 80195a2:	f000 80d1 	beq.w	8019748 <_printf_i+0x1c4>
 80195a6:	2f58      	cmp	r7, #88	@ 0x58
 80195a8:	f000 80b8 	beq.w	801971c <_printf_i+0x198>
 80195ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80195b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80195b4:	e03a      	b.n	801962c <_printf_i+0xa8>
 80195b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80195ba:	2b15      	cmp	r3, #21
 80195bc:	d8f6      	bhi.n	80195ac <_printf_i+0x28>
 80195be:	a101      	add	r1, pc, #4	@ (adr r1, 80195c4 <_printf_i+0x40>)
 80195c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80195c4:	0801961d 	.word	0x0801961d
 80195c8:	08019631 	.word	0x08019631
 80195cc:	080195ad 	.word	0x080195ad
 80195d0:	080195ad 	.word	0x080195ad
 80195d4:	080195ad 	.word	0x080195ad
 80195d8:	080195ad 	.word	0x080195ad
 80195dc:	08019631 	.word	0x08019631
 80195e0:	080195ad 	.word	0x080195ad
 80195e4:	080195ad 	.word	0x080195ad
 80195e8:	080195ad 	.word	0x080195ad
 80195ec:	080195ad 	.word	0x080195ad
 80195f0:	0801972f 	.word	0x0801972f
 80195f4:	0801965b 	.word	0x0801965b
 80195f8:	080196e9 	.word	0x080196e9
 80195fc:	080195ad 	.word	0x080195ad
 8019600:	080195ad 	.word	0x080195ad
 8019604:	08019751 	.word	0x08019751
 8019608:	080195ad 	.word	0x080195ad
 801960c:	0801965b 	.word	0x0801965b
 8019610:	080195ad 	.word	0x080195ad
 8019614:	080195ad 	.word	0x080195ad
 8019618:	080196f1 	.word	0x080196f1
 801961c:	6833      	ldr	r3, [r6, #0]
 801961e:	1d1a      	adds	r2, r3, #4
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	6032      	str	r2, [r6, #0]
 8019624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019628:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801962c:	2301      	movs	r3, #1
 801962e:	e09c      	b.n	801976a <_printf_i+0x1e6>
 8019630:	6833      	ldr	r3, [r6, #0]
 8019632:	6820      	ldr	r0, [r4, #0]
 8019634:	1d19      	adds	r1, r3, #4
 8019636:	6031      	str	r1, [r6, #0]
 8019638:	0606      	lsls	r6, r0, #24
 801963a:	d501      	bpl.n	8019640 <_printf_i+0xbc>
 801963c:	681d      	ldr	r5, [r3, #0]
 801963e:	e003      	b.n	8019648 <_printf_i+0xc4>
 8019640:	0645      	lsls	r5, r0, #25
 8019642:	d5fb      	bpl.n	801963c <_printf_i+0xb8>
 8019644:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019648:	2d00      	cmp	r5, #0
 801964a:	da03      	bge.n	8019654 <_printf_i+0xd0>
 801964c:	232d      	movs	r3, #45	@ 0x2d
 801964e:	426d      	negs	r5, r5
 8019650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019654:	4858      	ldr	r0, [pc, #352]	@ (80197b8 <_printf_i+0x234>)
 8019656:	230a      	movs	r3, #10
 8019658:	e011      	b.n	801967e <_printf_i+0xfa>
 801965a:	6821      	ldr	r1, [r4, #0]
 801965c:	6833      	ldr	r3, [r6, #0]
 801965e:	0608      	lsls	r0, r1, #24
 8019660:	f853 5b04 	ldr.w	r5, [r3], #4
 8019664:	d402      	bmi.n	801966c <_printf_i+0xe8>
 8019666:	0649      	lsls	r1, r1, #25
 8019668:	bf48      	it	mi
 801966a:	b2ad      	uxthmi	r5, r5
 801966c:	2f6f      	cmp	r7, #111	@ 0x6f
 801966e:	4852      	ldr	r0, [pc, #328]	@ (80197b8 <_printf_i+0x234>)
 8019670:	6033      	str	r3, [r6, #0]
 8019672:	bf14      	ite	ne
 8019674:	230a      	movne	r3, #10
 8019676:	2308      	moveq	r3, #8
 8019678:	2100      	movs	r1, #0
 801967a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801967e:	6866      	ldr	r6, [r4, #4]
 8019680:	60a6      	str	r6, [r4, #8]
 8019682:	2e00      	cmp	r6, #0
 8019684:	db05      	blt.n	8019692 <_printf_i+0x10e>
 8019686:	6821      	ldr	r1, [r4, #0]
 8019688:	432e      	orrs	r6, r5
 801968a:	f021 0104 	bic.w	r1, r1, #4
 801968e:	6021      	str	r1, [r4, #0]
 8019690:	d04b      	beq.n	801972a <_printf_i+0x1a6>
 8019692:	4616      	mov	r6, r2
 8019694:	fbb5 f1f3 	udiv	r1, r5, r3
 8019698:	fb03 5711 	mls	r7, r3, r1, r5
 801969c:	5dc7      	ldrb	r7, [r0, r7]
 801969e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80196a2:	462f      	mov	r7, r5
 80196a4:	42bb      	cmp	r3, r7
 80196a6:	460d      	mov	r5, r1
 80196a8:	d9f4      	bls.n	8019694 <_printf_i+0x110>
 80196aa:	2b08      	cmp	r3, #8
 80196ac:	d10b      	bne.n	80196c6 <_printf_i+0x142>
 80196ae:	6823      	ldr	r3, [r4, #0]
 80196b0:	07df      	lsls	r7, r3, #31
 80196b2:	d508      	bpl.n	80196c6 <_printf_i+0x142>
 80196b4:	6923      	ldr	r3, [r4, #16]
 80196b6:	6861      	ldr	r1, [r4, #4]
 80196b8:	4299      	cmp	r1, r3
 80196ba:	bfde      	ittt	le
 80196bc:	2330      	movle	r3, #48	@ 0x30
 80196be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80196c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80196c6:	1b92      	subs	r2, r2, r6
 80196c8:	6122      	str	r2, [r4, #16]
 80196ca:	f8cd a000 	str.w	sl, [sp]
 80196ce:	464b      	mov	r3, r9
 80196d0:	aa03      	add	r2, sp, #12
 80196d2:	4621      	mov	r1, r4
 80196d4:	4640      	mov	r0, r8
 80196d6:	f7ff fee7 	bl	80194a8 <_printf_common>
 80196da:	3001      	adds	r0, #1
 80196dc:	d14a      	bne.n	8019774 <_printf_i+0x1f0>
 80196de:	f04f 30ff 	mov.w	r0, #4294967295
 80196e2:	b004      	add	sp, #16
 80196e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196e8:	6823      	ldr	r3, [r4, #0]
 80196ea:	f043 0320 	orr.w	r3, r3, #32
 80196ee:	6023      	str	r3, [r4, #0]
 80196f0:	4832      	ldr	r0, [pc, #200]	@ (80197bc <_printf_i+0x238>)
 80196f2:	2778      	movs	r7, #120	@ 0x78
 80196f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	6831      	ldr	r1, [r6, #0]
 80196fc:	061f      	lsls	r7, r3, #24
 80196fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8019702:	d402      	bmi.n	801970a <_printf_i+0x186>
 8019704:	065f      	lsls	r7, r3, #25
 8019706:	bf48      	it	mi
 8019708:	b2ad      	uxthmi	r5, r5
 801970a:	6031      	str	r1, [r6, #0]
 801970c:	07d9      	lsls	r1, r3, #31
 801970e:	bf44      	itt	mi
 8019710:	f043 0320 	orrmi.w	r3, r3, #32
 8019714:	6023      	strmi	r3, [r4, #0]
 8019716:	b11d      	cbz	r5, 8019720 <_printf_i+0x19c>
 8019718:	2310      	movs	r3, #16
 801971a:	e7ad      	b.n	8019678 <_printf_i+0xf4>
 801971c:	4826      	ldr	r0, [pc, #152]	@ (80197b8 <_printf_i+0x234>)
 801971e:	e7e9      	b.n	80196f4 <_printf_i+0x170>
 8019720:	6823      	ldr	r3, [r4, #0]
 8019722:	f023 0320 	bic.w	r3, r3, #32
 8019726:	6023      	str	r3, [r4, #0]
 8019728:	e7f6      	b.n	8019718 <_printf_i+0x194>
 801972a:	4616      	mov	r6, r2
 801972c:	e7bd      	b.n	80196aa <_printf_i+0x126>
 801972e:	6833      	ldr	r3, [r6, #0]
 8019730:	6825      	ldr	r5, [r4, #0]
 8019732:	6961      	ldr	r1, [r4, #20]
 8019734:	1d18      	adds	r0, r3, #4
 8019736:	6030      	str	r0, [r6, #0]
 8019738:	062e      	lsls	r6, r5, #24
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	d501      	bpl.n	8019742 <_printf_i+0x1be>
 801973e:	6019      	str	r1, [r3, #0]
 8019740:	e002      	b.n	8019748 <_printf_i+0x1c4>
 8019742:	0668      	lsls	r0, r5, #25
 8019744:	d5fb      	bpl.n	801973e <_printf_i+0x1ba>
 8019746:	8019      	strh	r1, [r3, #0]
 8019748:	2300      	movs	r3, #0
 801974a:	6123      	str	r3, [r4, #16]
 801974c:	4616      	mov	r6, r2
 801974e:	e7bc      	b.n	80196ca <_printf_i+0x146>
 8019750:	6833      	ldr	r3, [r6, #0]
 8019752:	1d1a      	adds	r2, r3, #4
 8019754:	6032      	str	r2, [r6, #0]
 8019756:	681e      	ldr	r6, [r3, #0]
 8019758:	6862      	ldr	r2, [r4, #4]
 801975a:	2100      	movs	r1, #0
 801975c:	4630      	mov	r0, r6
 801975e:	f7e6 fd87 	bl	8000270 <memchr>
 8019762:	b108      	cbz	r0, 8019768 <_printf_i+0x1e4>
 8019764:	1b80      	subs	r0, r0, r6
 8019766:	6060      	str	r0, [r4, #4]
 8019768:	6863      	ldr	r3, [r4, #4]
 801976a:	6123      	str	r3, [r4, #16]
 801976c:	2300      	movs	r3, #0
 801976e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019772:	e7aa      	b.n	80196ca <_printf_i+0x146>
 8019774:	6923      	ldr	r3, [r4, #16]
 8019776:	4632      	mov	r2, r6
 8019778:	4649      	mov	r1, r9
 801977a:	4640      	mov	r0, r8
 801977c:	47d0      	blx	sl
 801977e:	3001      	adds	r0, #1
 8019780:	d0ad      	beq.n	80196de <_printf_i+0x15a>
 8019782:	6823      	ldr	r3, [r4, #0]
 8019784:	079b      	lsls	r3, r3, #30
 8019786:	d413      	bmi.n	80197b0 <_printf_i+0x22c>
 8019788:	68e0      	ldr	r0, [r4, #12]
 801978a:	9b03      	ldr	r3, [sp, #12]
 801978c:	4298      	cmp	r0, r3
 801978e:	bfb8      	it	lt
 8019790:	4618      	movlt	r0, r3
 8019792:	e7a6      	b.n	80196e2 <_printf_i+0x15e>
 8019794:	2301      	movs	r3, #1
 8019796:	4632      	mov	r2, r6
 8019798:	4649      	mov	r1, r9
 801979a:	4640      	mov	r0, r8
 801979c:	47d0      	blx	sl
 801979e:	3001      	adds	r0, #1
 80197a0:	d09d      	beq.n	80196de <_printf_i+0x15a>
 80197a2:	3501      	adds	r5, #1
 80197a4:	68e3      	ldr	r3, [r4, #12]
 80197a6:	9903      	ldr	r1, [sp, #12]
 80197a8:	1a5b      	subs	r3, r3, r1
 80197aa:	42ab      	cmp	r3, r5
 80197ac:	dcf2      	bgt.n	8019794 <_printf_i+0x210>
 80197ae:	e7eb      	b.n	8019788 <_printf_i+0x204>
 80197b0:	2500      	movs	r5, #0
 80197b2:	f104 0619 	add.w	r6, r4, #25
 80197b6:	e7f5      	b.n	80197a4 <_printf_i+0x220>
 80197b8:	08019fa8 	.word	0x08019fa8
 80197bc:	08019fb9 	.word	0x08019fb9

080197c0 <__sflush_r>:
 80197c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80197c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197c8:	0716      	lsls	r6, r2, #28
 80197ca:	4605      	mov	r5, r0
 80197cc:	460c      	mov	r4, r1
 80197ce:	d454      	bmi.n	801987a <__sflush_r+0xba>
 80197d0:	684b      	ldr	r3, [r1, #4]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	dc02      	bgt.n	80197dc <__sflush_r+0x1c>
 80197d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80197d8:	2b00      	cmp	r3, #0
 80197da:	dd48      	ble.n	801986e <__sflush_r+0xae>
 80197dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80197de:	2e00      	cmp	r6, #0
 80197e0:	d045      	beq.n	801986e <__sflush_r+0xae>
 80197e2:	2300      	movs	r3, #0
 80197e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80197e8:	682f      	ldr	r7, [r5, #0]
 80197ea:	6a21      	ldr	r1, [r4, #32]
 80197ec:	602b      	str	r3, [r5, #0]
 80197ee:	d030      	beq.n	8019852 <__sflush_r+0x92>
 80197f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80197f2:	89a3      	ldrh	r3, [r4, #12]
 80197f4:	0759      	lsls	r1, r3, #29
 80197f6:	d505      	bpl.n	8019804 <__sflush_r+0x44>
 80197f8:	6863      	ldr	r3, [r4, #4]
 80197fa:	1ad2      	subs	r2, r2, r3
 80197fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80197fe:	b10b      	cbz	r3, 8019804 <__sflush_r+0x44>
 8019800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019802:	1ad2      	subs	r2, r2, r3
 8019804:	2300      	movs	r3, #0
 8019806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019808:	6a21      	ldr	r1, [r4, #32]
 801980a:	4628      	mov	r0, r5
 801980c:	47b0      	blx	r6
 801980e:	1c43      	adds	r3, r0, #1
 8019810:	89a3      	ldrh	r3, [r4, #12]
 8019812:	d106      	bne.n	8019822 <__sflush_r+0x62>
 8019814:	6829      	ldr	r1, [r5, #0]
 8019816:	291d      	cmp	r1, #29
 8019818:	d82b      	bhi.n	8019872 <__sflush_r+0xb2>
 801981a:	4a2a      	ldr	r2, [pc, #168]	@ (80198c4 <__sflush_r+0x104>)
 801981c:	40ca      	lsrs	r2, r1
 801981e:	07d6      	lsls	r6, r2, #31
 8019820:	d527      	bpl.n	8019872 <__sflush_r+0xb2>
 8019822:	2200      	movs	r2, #0
 8019824:	6062      	str	r2, [r4, #4]
 8019826:	04d9      	lsls	r1, r3, #19
 8019828:	6922      	ldr	r2, [r4, #16]
 801982a:	6022      	str	r2, [r4, #0]
 801982c:	d504      	bpl.n	8019838 <__sflush_r+0x78>
 801982e:	1c42      	adds	r2, r0, #1
 8019830:	d101      	bne.n	8019836 <__sflush_r+0x76>
 8019832:	682b      	ldr	r3, [r5, #0]
 8019834:	b903      	cbnz	r3, 8019838 <__sflush_r+0x78>
 8019836:	6560      	str	r0, [r4, #84]	@ 0x54
 8019838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801983a:	602f      	str	r7, [r5, #0]
 801983c:	b1b9      	cbz	r1, 801986e <__sflush_r+0xae>
 801983e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019842:	4299      	cmp	r1, r3
 8019844:	d002      	beq.n	801984c <__sflush_r+0x8c>
 8019846:	4628      	mov	r0, r5
 8019848:	f7ff fa94 	bl	8018d74 <_free_r>
 801984c:	2300      	movs	r3, #0
 801984e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019850:	e00d      	b.n	801986e <__sflush_r+0xae>
 8019852:	2301      	movs	r3, #1
 8019854:	4628      	mov	r0, r5
 8019856:	47b0      	blx	r6
 8019858:	4602      	mov	r2, r0
 801985a:	1c50      	adds	r0, r2, #1
 801985c:	d1c9      	bne.n	80197f2 <__sflush_r+0x32>
 801985e:	682b      	ldr	r3, [r5, #0]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d0c6      	beq.n	80197f2 <__sflush_r+0x32>
 8019864:	2b1d      	cmp	r3, #29
 8019866:	d001      	beq.n	801986c <__sflush_r+0xac>
 8019868:	2b16      	cmp	r3, #22
 801986a:	d11e      	bne.n	80198aa <__sflush_r+0xea>
 801986c:	602f      	str	r7, [r5, #0]
 801986e:	2000      	movs	r0, #0
 8019870:	e022      	b.n	80198b8 <__sflush_r+0xf8>
 8019872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019876:	b21b      	sxth	r3, r3
 8019878:	e01b      	b.n	80198b2 <__sflush_r+0xf2>
 801987a:	690f      	ldr	r7, [r1, #16]
 801987c:	2f00      	cmp	r7, #0
 801987e:	d0f6      	beq.n	801986e <__sflush_r+0xae>
 8019880:	0793      	lsls	r3, r2, #30
 8019882:	680e      	ldr	r6, [r1, #0]
 8019884:	bf08      	it	eq
 8019886:	694b      	ldreq	r3, [r1, #20]
 8019888:	600f      	str	r7, [r1, #0]
 801988a:	bf18      	it	ne
 801988c:	2300      	movne	r3, #0
 801988e:	eba6 0807 	sub.w	r8, r6, r7
 8019892:	608b      	str	r3, [r1, #8]
 8019894:	f1b8 0f00 	cmp.w	r8, #0
 8019898:	dde9      	ble.n	801986e <__sflush_r+0xae>
 801989a:	6a21      	ldr	r1, [r4, #32]
 801989c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801989e:	4643      	mov	r3, r8
 80198a0:	463a      	mov	r2, r7
 80198a2:	4628      	mov	r0, r5
 80198a4:	47b0      	blx	r6
 80198a6:	2800      	cmp	r0, #0
 80198a8:	dc08      	bgt.n	80198bc <__sflush_r+0xfc>
 80198aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80198b2:	81a3      	strh	r3, [r4, #12]
 80198b4:	f04f 30ff 	mov.w	r0, #4294967295
 80198b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198bc:	4407      	add	r7, r0
 80198be:	eba8 0800 	sub.w	r8, r8, r0
 80198c2:	e7e7      	b.n	8019894 <__sflush_r+0xd4>
 80198c4:	20400001 	.word	0x20400001

080198c8 <_fflush_r>:
 80198c8:	b538      	push	{r3, r4, r5, lr}
 80198ca:	690b      	ldr	r3, [r1, #16]
 80198cc:	4605      	mov	r5, r0
 80198ce:	460c      	mov	r4, r1
 80198d0:	b913      	cbnz	r3, 80198d8 <_fflush_r+0x10>
 80198d2:	2500      	movs	r5, #0
 80198d4:	4628      	mov	r0, r5
 80198d6:	bd38      	pop	{r3, r4, r5, pc}
 80198d8:	b118      	cbz	r0, 80198e2 <_fflush_r+0x1a>
 80198da:	6a03      	ldr	r3, [r0, #32]
 80198dc:	b90b      	cbnz	r3, 80198e2 <_fflush_r+0x1a>
 80198de:	f7fe ff63 	bl	80187a8 <__sinit>
 80198e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d0f3      	beq.n	80198d2 <_fflush_r+0xa>
 80198ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80198ec:	07d0      	lsls	r0, r2, #31
 80198ee:	d404      	bmi.n	80198fa <_fflush_r+0x32>
 80198f0:	0599      	lsls	r1, r3, #22
 80198f2:	d402      	bmi.n	80198fa <_fflush_r+0x32>
 80198f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80198f6:	f7ff fa0e 	bl	8018d16 <__retarget_lock_acquire_recursive>
 80198fa:	4628      	mov	r0, r5
 80198fc:	4621      	mov	r1, r4
 80198fe:	f7ff ff5f 	bl	80197c0 <__sflush_r>
 8019902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019904:	07da      	lsls	r2, r3, #31
 8019906:	4605      	mov	r5, r0
 8019908:	d4e4      	bmi.n	80198d4 <_fflush_r+0xc>
 801990a:	89a3      	ldrh	r3, [r4, #12]
 801990c:	059b      	lsls	r3, r3, #22
 801990e:	d4e1      	bmi.n	80198d4 <_fflush_r+0xc>
 8019910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019912:	f7ff fa01 	bl	8018d18 <__retarget_lock_release_recursive>
 8019916:	e7dd      	b.n	80198d4 <_fflush_r+0xc>

08019918 <fiprintf>:
 8019918:	b40e      	push	{r1, r2, r3}
 801991a:	b503      	push	{r0, r1, lr}
 801991c:	4601      	mov	r1, r0
 801991e:	ab03      	add	r3, sp, #12
 8019920:	4805      	ldr	r0, [pc, #20]	@ (8019938 <fiprintf+0x20>)
 8019922:	f853 2b04 	ldr.w	r2, [r3], #4
 8019926:	6800      	ldr	r0, [r0, #0]
 8019928:	9301      	str	r3, [sp, #4]
 801992a:	f7ff fca5 	bl	8019278 <_vfiprintf_r>
 801992e:	b002      	add	sp, #8
 8019930:	f85d eb04 	ldr.w	lr, [sp], #4
 8019934:	b003      	add	sp, #12
 8019936:	4770      	bx	lr
 8019938:	2000002c 	.word	0x2000002c

0801993c <__swhatbuf_r>:
 801993c:	b570      	push	{r4, r5, r6, lr}
 801993e:	460c      	mov	r4, r1
 8019940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019944:	2900      	cmp	r1, #0
 8019946:	b096      	sub	sp, #88	@ 0x58
 8019948:	4615      	mov	r5, r2
 801994a:	461e      	mov	r6, r3
 801994c:	da0d      	bge.n	801996a <__swhatbuf_r+0x2e>
 801994e:	89a3      	ldrh	r3, [r4, #12]
 8019950:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019954:	f04f 0100 	mov.w	r1, #0
 8019958:	bf14      	ite	ne
 801995a:	2340      	movne	r3, #64	@ 0x40
 801995c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019960:	2000      	movs	r0, #0
 8019962:	6031      	str	r1, [r6, #0]
 8019964:	602b      	str	r3, [r5, #0]
 8019966:	b016      	add	sp, #88	@ 0x58
 8019968:	bd70      	pop	{r4, r5, r6, pc}
 801996a:	466a      	mov	r2, sp
 801996c:	f000 f848 	bl	8019a00 <_fstat_r>
 8019970:	2800      	cmp	r0, #0
 8019972:	dbec      	blt.n	801994e <__swhatbuf_r+0x12>
 8019974:	9901      	ldr	r1, [sp, #4]
 8019976:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801997a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801997e:	4259      	negs	r1, r3
 8019980:	4159      	adcs	r1, r3
 8019982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019986:	e7eb      	b.n	8019960 <__swhatbuf_r+0x24>

08019988 <__smakebuf_r>:
 8019988:	898b      	ldrh	r3, [r1, #12]
 801998a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801998c:	079d      	lsls	r5, r3, #30
 801998e:	4606      	mov	r6, r0
 8019990:	460c      	mov	r4, r1
 8019992:	d507      	bpl.n	80199a4 <__smakebuf_r+0x1c>
 8019994:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019998:	6023      	str	r3, [r4, #0]
 801999a:	6123      	str	r3, [r4, #16]
 801999c:	2301      	movs	r3, #1
 801999e:	6163      	str	r3, [r4, #20]
 80199a0:	b003      	add	sp, #12
 80199a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199a4:	ab01      	add	r3, sp, #4
 80199a6:	466a      	mov	r2, sp
 80199a8:	f7ff ffc8 	bl	801993c <__swhatbuf_r>
 80199ac:	9f00      	ldr	r7, [sp, #0]
 80199ae:	4605      	mov	r5, r0
 80199b0:	4639      	mov	r1, r7
 80199b2:	4630      	mov	r0, r6
 80199b4:	f7ff fa52 	bl	8018e5c <_malloc_r>
 80199b8:	b948      	cbnz	r0, 80199ce <__smakebuf_r+0x46>
 80199ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199be:	059a      	lsls	r2, r3, #22
 80199c0:	d4ee      	bmi.n	80199a0 <__smakebuf_r+0x18>
 80199c2:	f023 0303 	bic.w	r3, r3, #3
 80199c6:	f043 0302 	orr.w	r3, r3, #2
 80199ca:	81a3      	strh	r3, [r4, #12]
 80199cc:	e7e2      	b.n	8019994 <__smakebuf_r+0xc>
 80199ce:	89a3      	ldrh	r3, [r4, #12]
 80199d0:	6020      	str	r0, [r4, #0]
 80199d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80199d6:	81a3      	strh	r3, [r4, #12]
 80199d8:	9b01      	ldr	r3, [sp, #4]
 80199da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80199de:	b15b      	cbz	r3, 80199f8 <__smakebuf_r+0x70>
 80199e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199e4:	4630      	mov	r0, r6
 80199e6:	f000 f81d 	bl	8019a24 <_isatty_r>
 80199ea:	b128      	cbz	r0, 80199f8 <__smakebuf_r+0x70>
 80199ec:	89a3      	ldrh	r3, [r4, #12]
 80199ee:	f023 0303 	bic.w	r3, r3, #3
 80199f2:	f043 0301 	orr.w	r3, r3, #1
 80199f6:	81a3      	strh	r3, [r4, #12]
 80199f8:	89a3      	ldrh	r3, [r4, #12]
 80199fa:	431d      	orrs	r5, r3
 80199fc:	81a5      	strh	r5, [r4, #12]
 80199fe:	e7cf      	b.n	80199a0 <__smakebuf_r+0x18>

08019a00 <_fstat_r>:
 8019a00:	b538      	push	{r3, r4, r5, lr}
 8019a02:	4d07      	ldr	r5, [pc, #28]	@ (8019a20 <_fstat_r+0x20>)
 8019a04:	2300      	movs	r3, #0
 8019a06:	4604      	mov	r4, r0
 8019a08:	4608      	mov	r0, r1
 8019a0a:	4611      	mov	r1, r2
 8019a0c:	602b      	str	r3, [r5, #0]
 8019a0e:	f7e8 f8bb 	bl	8001b88 <_fstat>
 8019a12:	1c43      	adds	r3, r0, #1
 8019a14:	d102      	bne.n	8019a1c <_fstat_r+0x1c>
 8019a16:	682b      	ldr	r3, [r5, #0]
 8019a18:	b103      	cbz	r3, 8019a1c <_fstat_r+0x1c>
 8019a1a:	6023      	str	r3, [r4, #0]
 8019a1c:	bd38      	pop	{r3, r4, r5, pc}
 8019a1e:	bf00      	nop
 8019a20:	200097f0 	.word	0x200097f0

08019a24 <_isatty_r>:
 8019a24:	b538      	push	{r3, r4, r5, lr}
 8019a26:	4d06      	ldr	r5, [pc, #24]	@ (8019a40 <_isatty_r+0x1c>)
 8019a28:	2300      	movs	r3, #0
 8019a2a:	4604      	mov	r4, r0
 8019a2c:	4608      	mov	r0, r1
 8019a2e:	602b      	str	r3, [r5, #0]
 8019a30:	f7e8 f8ba 	bl	8001ba8 <_isatty>
 8019a34:	1c43      	adds	r3, r0, #1
 8019a36:	d102      	bne.n	8019a3e <_isatty_r+0x1a>
 8019a38:	682b      	ldr	r3, [r5, #0]
 8019a3a:	b103      	cbz	r3, 8019a3e <_isatty_r+0x1a>
 8019a3c:	6023      	str	r3, [r4, #0]
 8019a3e:	bd38      	pop	{r3, r4, r5, pc}
 8019a40:	200097f0 	.word	0x200097f0

08019a44 <_sbrk_r>:
 8019a44:	b538      	push	{r3, r4, r5, lr}
 8019a46:	4d06      	ldr	r5, [pc, #24]	@ (8019a60 <_sbrk_r+0x1c>)
 8019a48:	2300      	movs	r3, #0
 8019a4a:	4604      	mov	r4, r0
 8019a4c:	4608      	mov	r0, r1
 8019a4e:	602b      	str	r3, [r5, #0]
 8019a50:	f7e8 f8c2 	bl	8001bd8 <_sbrk>
 8019a54:	1c43      	adds	r3, r0, #1
 8019a56:	d102      	bne.n	8019a5e <_sbrk_r+0x1a>
 8019a58:	682b      	ldr	r3, [r5, #0]
 8019a5a:	b103      	cbz	r3, 8019a5e <_sbrk_r+0x1a>
 8019a5c:	6023      	str	r3, [r4, #0]
 8019a5e:	bd38      	pop	{r3, r4, r5, pc}
 8019a60:	200097f0 	.word	0x200097f0

08019a64 <abort>:
 8019a64:	b508      	push	{r3, lr}
 8019a66:	2006      	movs	r0, #6
 8019a68:	f000 f85a 	bl	8019b20 <raise>
 8019a6c:	2001      	movs	r0, #1
 8019a6e:	f7e8 f857 	bl	8001b20 <_exit>

08019a72 <_realloc_r>:
 8019a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a76:	4607      	mov	r7, r0
 8019a78:	4614      	mov	r4, r2
 8019a7a:	460d      	mov	r5, r1
 8019a7c:	b921      	cbnz	r1, 8019a88 <_realloc_r+0x16>
 8019a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a82:	4611      	mov	r1, r2
 8019a84:	f7ff b9ea 	b.w	8018e5c <_malloc_r>
 8019a88:	b92a      	cbnz	r2, 8019a96 <_realloc_r+0x24>
 8019a8a:	f7ff f973 	bl	8018d74 <_free_r>
 8019a8e:	4625      	mov	r5, r4
 8019a90:	4628      	mov	r0, r5
 8019a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a96:	f000 f85f 	bl	8019b58 <_malloc_usable_size_r>
 8019a9a:	4284      	cmp	r4, r0
 8019a9c:	4606      	mov	r6, r0
 8019a9e:	d802      	bhi.n	8019aa6 <_realloc_r+0x34>
 8019aa0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019aa4:	d8f4      	bhi.n	8019a90 <_realloc_r+0x1e>
 8019aa6:	4621      	mov	r1, r4
 8019aa8:	4638      	mov	r0, r7
 8019aaa:	f7ff f9d7 	bl	8018e5c <_malloc_r>
 8019aae:	4680      	mov	r8, r0
 8019ab0:	b908      	cbnz	r0, 8019ab6 <_realloc_r+0x44>
 8019ab2:	4645      	mov	r5, r8
 8019ab4:	e7ec      	b.n	8019a90 <_realloc_r+0x1e>
 8019ab6:	42b4      	cmp	r4, r6
 8019ab8:	4622      	mov	r2, r4
 8019aba:	4629      	mov	r1, r5
 8019abc:	bf28      	it	cs
 8019abe:	4632      	movcs	r2, r6
 8019ac0:	f7ff f92b 	bl	8018d1a <memcpy>
 8019ac4:	4629      	mov	r1, r5
 8019ac6:	4638      	mov	r0, r7
 8019ac8:	f7ff f954 	bl	8018d74 <_free_r>
 8019acc:	e7f1      	b.n	8019ab2 <_realloc_r+0x40>

08019ace <_raise_r>:
 8019ace:	291f      	cmp	r1, #31
 8019ad0:	b538      	push	{r3, r4, r5, lr}
 8019ad2:	4605      	mov	r5, r0
 8019ad4:	460c      	mov	r4, r1
 8019ad6:	d904      	bls.n	8019ae2 <_raise_r+0x14>
 8019ad8:	2316      	movs	r3, #22
 8019ada:	6003      	str	r3, [r0, #0]
 8019adc:	f04f 30ff 	mov.w	r0, #4294967295
 8019ae0:	bd38      	pop	{r3, r4, r5, pc}
 8019ae2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019ae4:	b112      	cbz	r2, 8019aec <_raise_r+0x1e>
 8019ae6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019aea:	b94b      	cbnz	r3, 8019b00 <_raise_r+0x32>
 8019aec:	4628      	mov	r0, r5
 8019aee:	f000 f831 	bl	8019b54 <_getpid_r>
 8019af2:	4622      	mov	r2, r4
 8019af4:	4601      	mov	r1, r0
 8019af6:	4628      	mov	r0, r5
 8019af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019afc:	f000 b818 	b.w	8019b30 <_kill_r>
 8019b00:	2b01      	cmp	r3, #1
 8019b02:	d00a      	beq.n	8019b1a <_raise_r+0x4c>
 8019b04:	1c59      	adds	r1, r3, #1
 8019b06:	d103      	bne.n	8019b10 <_raise_r+0x42>
 8019b08:	2316      	movs	r3, #22
 8019b0a:	6003      	str	r3, [r0, #0]
 8019b0c:	2001      	movs	r0, #1
 8019b0e:	e7e7      	b.n	8019ae0 <_raise_r+0x12>
 8019b10:	2100      	movs	r1, #0
 8019b12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019b16:	4620      	mov	r0, r4
 8019b18:	4798      	blx	r3
 8019b1a:	2000      	movs	r0, #0
 8019b1c:	e7e0      	b.n	8019ae0 <_raise_r+0x12>
	...

08019b20 <raise>:
 8019b20:	4b02      	ldr	r3, [pc, #8]	@ (8019b2c <raise+0xc>)
 8019b22:	4601      	mov	r1, r0
 8019b24:	6818      	ldr	r0, [r3, #0]
 8019b26:	f7ff bfd2 	b.w	8019ace <_raise_r>
 8019b2a:	bf00      	nop
 8019b2c:	2000002c 	.word	0x2000002c

08019b30 <_kill_r>:
 8019b30:	b538      	push	{r3, r4, r5, lr}
 8019b32:	4d07      	ldr	r5, [pc, #28]	@ (8019b50 <_kill_r+0x20>)
 8019b34:	2300      	movs	r3, #0
 8019b36:	4604      	mov	r4, r0
 8019b38:	4608      	mov	r0, r1
 8019b3a:	4611      	mov	r1, r2
 8019b3c:	602b      	str	r3, [r5, #0]
 8019b3e:	f7e7 ffdf 	bl	8001b00 <_kill>
 8019b42:	1c43      	adds	r3, r0, #1
 8019b44:	d102      	bne.n	8019b4c <_kill_r+0x1c>
 8019b46:	682b      	ldr	r3, [r5, #0]
 8019b48:	b103      	cbz	r3, 8019b4c <_kill_r+0x1c>
 8019b4a:	6023      	str	r3, [r4, #0]
 8019b4c:	bd38      	pop	{r3, r4, r5, pc}
 8019b4e:	bf00      	nop
 8019b50:	200097f0 	.word	0x200097f0

08019b54 <_getpid_r>:
 8019b54:	f7e7 bfcc 	b.w	8001af0 <_getpid>

08019b58 <_malloc_usable_size_r>:
 8019b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b5c:	1f18      	subs	r0, r3, #4
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	bfbc      	itt	lt
 8019b62:	580b      	ldrlt	r3, [r1, r0]
 8019b64:	18c0      	addlt	r0, r0, r3
 8019b66:	4770      	bx	lr

08019b68 <_init>:
 8019b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b6a:	bf00      	nop
 8019b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b6e:	bc08      	pop	{r3}
 8019b70:	469e      	mov	lr, r3
 8019b72:	4770      	bx	lr

08019b74 <_fini>:
 8019b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b76:	bf00      	nop
 8019b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b7a:	bc08      	pop	{r3}
 8019b7c:	469e      	mov	lr, r3
 8019b7e:	4770      	bx	lr
