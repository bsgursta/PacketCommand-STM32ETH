
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018250  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08018450  08018450  00019450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080187d8  080187d8  0001a300  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080187d8  080187d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080187e0  080187e0  0001a300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080187e0  080187e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080187e4  080187e4  000197e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080187e8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08018864  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08018904  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDescripSection 000000a0  200001c0  080189a4  0001a1c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 12 .RxDescripSection 000000a0  20000260  08018a44  0001a260  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00009544  20000300  08018ae4  0001a300  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  20009844  08018ae4  0001a844  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  0001a300  2**0
                  CONTENTS, READONLY
 16 .debug_info   00055cde  00000000  00000000  0001a32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000bd5f  00000000  00000000  0007000c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003288  00000000  00000000  0007bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002740  00000000  00000000  0007eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003e30c  00000000  00000000  00081738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00052db7  00000000  00000000  000bfa44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00122125  00000000  00000000  001127fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  00234920  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000d9a4  00000000  00000000  00234964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000004a  00000000  00000000  00242308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000300 	.word	0x20000300
 800021c:	00000000 	.word	0x00000000
 8000220:	08018438 	.word	0x08018438

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000304 	.word	0x20000304
 800023c:	08018438 	.word	0x08018438

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <_DoInit+0xa0>)
 8000644:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000646:	22a8      	movs	r2, #168	@ 0xa8
 8000648:	2100      	movs	r1, #0
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f016 fe61 	bl	8017312 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2203      	movs	r2, #3
 8000654:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2203      	movs	r2, #3
 800065a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	4a20      	ldr	r2, [pc, #128]	@ (80006e0 <_DoInit+0xa4>)
 8000660:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <_DoInit+0xa8>)
 8000666:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <_DoInit+0xa4>)
 8000686:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <_DoInit+0xac>)
 800068c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2210      	movs	r2, #16
 8000692:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006a6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e00c      	b.n	80006ca <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f1c3 030f 	rsb	r3, r3, #15
 80006b6:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <_DoInit+0xb0>)
 80006b8:	5cd1      	ldrb	r1, [r2, r3]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	460a      	mov	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3301      	adds	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d9ef      	bls.n	80006b0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006d0:	f3bf 8f5f 	dmb	sy
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000031c 	.word	0x2000031c
 80006e0:	08018450 	.word	0x08018450
 80006e4:	200003c4 	.word	0x200003c4
 80006e8:	200007c4 	.word	0x200007c4
 80006ec:	080185f8 	.word	0x080185f8

080006f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	429a      	cmp	r2, r3
 8000712:	d905      	bls.n	8000720 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	3b01      	subs	r3, #1
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
 800071e:	e007      	b.n	8000730 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	69b9      	ldr	r1, [r7, #24]
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	1acb      	subs	r3, r1, r3
 800072a:	4413      	add	r3, r2
 800072c:	3b01      	subs	r3, #1
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800073a:	4293      	cmp	r3, r2
 800073c:	bf28      	it	cs
 800073e:	4613      	movcs	r3, r2
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4293      	cmp	r3, r2
 8000748:	bf28      	it	cs
 800074a:	4613      	movcs	r3, r2
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	4413      	add	r3, r2
 8000756:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	6978      	ldr	r0, [r7, #20]
 800075e:	f016 feb2 	bl	80174c6 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000762:	6a3a      	ldr	r2, [r7, #32]
 8000764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000766:	4413      	add	r3, r2
 8000768:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076e:	4413      	add	r3, r2
 8000770:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800077a:	69fa      	ldr	r2, [r7, #28]
 800077c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077e:	4413      	add	r3, r2
 8000780:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	429a      	cmp	r2, r3
 800078a:	d101      	bne.n	8000790 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000790:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1b2      	bne.n	8000706 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80007a0:	6a3b      	ldr	r3, [r7, #32]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3728      	adds	r7, #40	@ 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b088      	sub	sp, #32
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d911      	bls.n	80007f2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	4413      	add	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	6938      	ldr	r0, [r7, #16]
 80007de:	f016 fe72 	bl	80174c6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80007e2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	441a      	add	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80007f0:	e01f      	b.n	8000832 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	4413      	add	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	6938      	ldr	r0, [r7, #16]
 8000806:	f016 fe5e 	bl	80174c6 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	4619      	mov	r1, r3
 8000822:	6938      	ldr	r0, [r7, #16]
 8000824:	f016 fe4f 	bl	80174c6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000828:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	60da      	str	r2, [r3, #12]
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800083a:	b480      	push	{r7}
 800083c:	b087      	sub	sp, #28
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	429a      	cmp	r2, r3
 8000854:	d808      	bhi.n	8000868 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	1ad2      	subs	r2, r2, r3
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	4413      	add	r3, r2
 8000862:	3b01      	subs	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e004      	b.n	8000872 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	3b01      	subs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000872:	697b      	ldr	r3, [r7, #20]
}
 8000874:	4618      	mov	r0, r3
 8000876:	371c      	adds	r7, #28
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	4613      	mov	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a1f      	ldr	r2, [pc, #124]	@ (800091c <SEGGER_RTT_WriteNoLock+0x9c>)
 800089e:	4413      	add	r3, r2
 80008a0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d029      	beq.n	80008fe <SEGGER_RTT_WriteNoLock+0x7e>
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d82e      	bhi.n	800090c <SEGGER_RTT_WriteNoLock+0x8c>
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <SEGGER_RTT_WriteNoLock+0x38>
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d013      	beq.n	80008de <SEGGER_RTT_WriteNoLock+0x5e>
 80008b6:	e029      	b.n	800090c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008b8:	6978      	ldr	r0, [r7, #20]
 80008ba:	f7ff ffbe 	bl	800083a <_GetAvailWriteSpace>
 80008be:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d202      	bcs.n	80008ce <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80008cc:	e021      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	69b9      	ldr	r1, [r7, #24]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff67 	bl	80007aa <_WriteNoCheck>
    break;
 80008dc:	e019      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ffab 	bl	800083a <_GetAvailWriteSpace>
 80008e4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	4293      	cmp	r3, r2
 80008ec:	bf28      	it	cs
 80008ee:	4613      	movcs	r3, r2
 80008f0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	69b9      	ldr	r1, [r7, #24]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff57 	bl	80007aa <_WriteNoCheck>
    break;
 80008fc:	e009      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	69b9      	ldr	r1, [r7, #24]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff fef4 	bl	80006f0 <_WriteBlocking>
 8000908:	61f8      	str	r0, [r7, #28]
    break;
 800090a:	e002      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    break;
 8000910:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000912:	69fb      	ldr	r3, [r7, #28]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000031c 	.word	0x2000031c

08000920 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <SEGGER_RTT_Write+0x48>)
 800092e:	61fb      	str	r3, [r7, #28]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b53      	cmp	r3, #83	@ 0x53
 8000938:	d001      	beq.n	800093e <SEGGER_RTT_Write+0x1e>
 800093a:	f7ff fe7f 	bl	800063c <_DoInit>
  SEGGER_RTT_LOCK();
 800093e:	f3ef 8311 	mrs	r3, BASEPRI
 8000942:	f04f 0120 	mov.w	r1, #32
 8000946:	f381 8811 	msr	BASEPRI, r1
 800094a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff ff95 	bl	8000880 <SEGGER_RTT_WriteNoLock>
 8000956:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800095e:	697b      	ldr	r3, [r7, #20]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000031c 	.word	0x2000031c

0800096c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ffce 	bl	8000920 <SEGGER_RTT_Write>
  return len;
 8000984:	683b      	ldr	r3, [r7, #0]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d80e      	bhi.n	80009ca <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	78fa      	ldrb	r2, [r7, #3]
 80009b6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d115      	bne.n	8000a02 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6918      	ldr	r0, [r3, #16]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6819      	ldr	r1, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	461a      	mov	r2, r3
 80009e4:	f7ff ff9c 	bl	8000920 <SEGGER_RTT_Write>
 80009e8:	4602      	mov	r2, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d004      	beq.n	80009fc <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80009fa:	e002      	b.n	8000a02 <_StoreChar+0x74>
      p->Cnt = 0u;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a26:	e007      	b.n	8000a38 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000a28:	6a3a      	ldr	r2, [r7, #32]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	623b      	str	r3, [r7, #32]
    Width++;
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3301      	adds	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d2f3      	bcs.n	8000a28 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d901      	bls.n	8000a4c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d125      	bne.n	8000aa2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d022      	beq.n	8000aa2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <_PrintUnsigned+0x66>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_PrintUnsigned+0x66>
        c = '0';
 8000a6c:	2330      	movs	r3, #48	@ 0x30
 8000a6e:	76fb      	strb	r3, [r7, #27]
 8000a70:	e001      	b.n	8000a76 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000a72:	2320      	movs	r3, #32
 8000a74:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a76:	e00b      	b.n	8000a90 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8000a7e:	7efb      	ldrb	r3, [r7, #27]
 8000a80:	4619      	mov	r1, r3
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff ff83 	bl	800098e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db07      	blt.n	8000aa0 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d005      	beq.n	8000aa2 <_PrintUnsigned+0x96>
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3ec      	bcc.n	8000a78 <_PrintUnsigned+0x6c>
 8000a9e:	e000      	b.n	8000aa2 <_PrintUnsigned+0x96>
          break;
 8000aa0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db55      	blt.n	8000b56 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d903      	bls.n	8000ab8 <_PrintUnsigned+0xac>
        NumDigits--;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	e009      	b.n	8000acc <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac0:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d200      	bcs.n	8000acc <_PrintUnsigned+0xc0>
          break;
 8000aca:	e005      	b.n	8000ad8 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000ad6:	e7e8      	b.n	8000aaa <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <_PrintUnsigned+0x154>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	4413      	add	r3, r2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff ff47 	bl	800098e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db08      	blt.n	8000b1a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1df      	bne.n	8000ad8 <_PrintUnsigned+0xcc>
 8000b18:	e000      	b.n	8000b1c <_PrintUnsigned+0x110>
        break;
 8000b1a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d017      	beq.n	8000b56 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d014      	beq.n	8000b56 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b2c:	e00a      	b.n	8000b44 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b30:	3b01      	subs	r3, #1
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000b34:	2120      	movs	r1, #32
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff ff29 	bl	800098e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db07      	blt.n	8000b54 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <_PrintUnsigned+0x14a>
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3ed      	bcc.n	8000b2e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000b52:	e000      	b.n	8000b56 <_PrintUnsigned+0x14a>
            break;
 8000b54:	bf00      	nop
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	0801860c 	.word	0x0801860c

08000b64 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bfb8      	it	lt
 8000b78:	425b      	neglt	r3, r3
 8000b7a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b80:	e007      	b.n	8000b92 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b8a:	613b      	str	r3, [r7, #16]
    Width++;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	daf3      	bge.n	8000b82 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d901      	bls.n	8000ba6 <_PrintInt+0x42>
    Width = NumDigits;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00a      	beq.n	8000bc2 <_PrintInt+0x5e>
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db04      	blt.n	8000bbc <_PrintInt+0x58>
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <_PrintInt+0x5e>
    FieldWidth--;
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <_PrintInt+0x6e>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d01c      	beq.n	8000c0c <_PrintInt+0xa8>
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d117      	bne.n	8000c0c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d014      	beq.n	8000c0c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000be2:	e00a      	b.n	8000bfa <_PrintInt+0x96>
        FieldWidth--;
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000bea:	2120      	movs	r1, #32
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fece 	bl	800098e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db07      	blt.n	8000c0a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d005      	beq.n	8000c0c <_PrintInt+0xa8>
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d3ed      	bcc.n	8000be4 <_PrintInt+0x80>
 8000c08:	e000      	b.n	8000c0c <_PrintInt+0xa8>
          break;
 8000c0a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db4a      	blt.n	8000caa <_PrintInt+0x146>
    if (v < 0) {
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da07      	bge.n	8000c2a <_PrintInt+0xc6>
      v = -v;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000c20:	212d      	movs	r1, #45	@ 0x2d
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff feb3 	bl	800098e <_StoreChar>
 8000c28:	e008      	b.n	8000c3c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000c34:	212b      	movs	r1, #43	@ 0x2b
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff fea9 	bl	800098e <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db32      	blt.n	8000caa <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <_PrintInt+0x12a>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11a      	bne.n	8000c8e <_PrintInt+0x12a>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d117      	bne.n	8000c8e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d014      	beq.n	8000c8e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c64:	e00a      	b.n	8000c7c <_PrintInt+0x118>
            FieldWidth--;
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000c6c:	2130      	movs	r1, #48	@ 0x30
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fe8d 	bl	800098e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db07      	blt.n	8000c8c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <_PrintInt+0x12a>
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3ed      	bcc.n	8000c66 <_PrintInt+0x102>
 8000c8a:	e000      	b.n	8000c8e <_PrintInt+0x12a>
              break;
 8000c8c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db09      	blt.n	8000caa <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff feb1 	bl	8000a0c <_PrintUnsigned>
      }
    }
  }
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0a4      	sub	sp, #144	@ 0x90
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
 8000cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000ce4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 81d9 	beq.w	80010a0 <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 8000cee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cf2:	2b25      	cmp	r3, #37	@ 0x25
 8000cf4:	f040 81c7 	bne.w	8001086 <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 8000d0a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d0e:	3b23      	subs	r3, #35	@ 0x23
 8000d10:	2b0d      	cmp	r3, #13
 8000d12:	d83f      	bhi.n	8000d94 <SEGGER_RTT_vprintf+0xe0>
 8000d14:	a201      	add	r2, pc, #4	@ (adr r2, 8000d1c <SEGGER_RTT_vprintf+0x68>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d85 	.word	0x08000d85
 8000d20:	08000d95 	.word	0x08000d95
 8000d24:	08000d95 	.word	0x08000d95
 8000d28:	08000d95 	.word	0x08000d95
 8000d2c:	08000d95 	.word	0x08000d95
 8000d30:	08000d95 	.word	0x08000d95
 8000d34:	08000d95 	.word	0x08000d95
 8000d38:	08000d95 	.word	0x08000d95
 8000d3c:	08000d75 	.word	0x08000d75
 8000d40:	08000d95 	.word	0x08000d95
 8000d44:	08000d55 	.word	0x08000d55
 8000d48:	08000d95 	.word	0x08000d95
 8000d4c:	08000d95 	.word	0x08000d95
 8000d50:	08000d65 	.word	0x08000d65
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	e01b      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	e013      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	e00b      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	e003      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d9a:	bf00      	nop
        }
      } while (v);
 8000d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1ae      	bne.n	8000d02 <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000da4:	2300      	movs	r3, #0
 8000da6:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 8000db0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000db4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000db6:	d912      	bls.n	8000dde <SEGGER_RTT_vprintf+0x12a>
 8000db8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000dbc:	2b39      	cmp	r3, #57	@ 0x39
 8000dbe:	d80e      	bhi.n	8000dde <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000dc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b30      	subs	r3, #48	@ 0x30
 8000dda:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8000ddc:	e7e4      	b.n	8000da8 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 8000de4:	2300      	movs	r3, #0
 8000de6:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 8000df0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000df6:	d132      	bne.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e04:	d10d      	bne.n	8000e22 <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1d19      	adds	r1, r3, #4
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6011      	str	r1, [r2, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e20:	e01d      	b.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 8000e2a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e30:	d915      	bls.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
 8000e32:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e36:	2b39      	cmp	r3, #57	@ 0x39
 8000e38:	d811      	bhi.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 8000e46:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	461a      	mov	r2, r3
 8000e52:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e56:	4413      	add	r3, r2
 8000e58:	3b30      	subs	r3, #48	@ 0x30
 8000e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8000e5c:	e7e1      	b.n	8000e22 <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 8000e66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e6a:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e6c:	d003      	beq.n	8000e76 <SEGGER_RTT_vprintf+0x1c2>
 8000e6e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e72:	2b68      	cmp	r3, #104	@ 0x68
 8000e74:	d107      	bne.n	8000e86 <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 8000e84:	e7ef      	b.n	8000e66 <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000e86:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e8a:	2b25      	cmp	r3, #37	@ 0x25
 8000e8c:	f000 80ef 	beq.w	800106e <SEGGER_RTT_vprintf+0x3ba>
 8000e90:	2b25      	cmp	r3, #37	@ 0x25
 8000e92:	f2c0 80f3 	blt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000e96:	2b78      	cmp	r3, #120	@ 0x78
 8000e98:	f300 80f0 	bgt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000e9c:	2b58      	cmp	r3, #88	@ 0x58
 8000e9e:	f2c0 80ed 	blt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000ea2:	3b58      	subs	r3, #88	@ 0x58
 8000ea4:	2b20      	cmp	r3, #32
 8000ea6:	f200 80e9 	bhi.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb0 <SEGGER_RTT_vprintf+0x1fc>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000fb3 	.word	0x08000fb3
 8000eb4:	0800107d 	.word	0x0800107d
 8000eb8:	0800107d 	.word	0x0800107d
 8000ebc:	0800107d 	.word	0x0800107d
 8000ec0:	0800107d 	.word	0x0800107d
 8000ec4:	0800107d 	.word	0x0800107d
 8000ec8:	0800107d 	.word	0x0800107d
 8000ecc:	0800107d 	.word	0x0800107d
 8000ed0:	0800107d 	.word	0x0800107d
 8000ed4:	0800107d 	.word	0x0800107d
 8000ed8:	0800107d 	.word	0x0800107d
 8000edc:	08000f35 	.word	0x08000f35
 8000ee0:	08000f5f 	.word	0x08000f5f
 8000ee4:	0800107d 	.word	0x0800107d
 8000ee8:	0800107d 	.word	0x0800107d
 8000eec:	0800107d 	.word	0x0800107d
 8000ef0:	0800107d 	.word	0x0800107d
 8000ef4:	0800107d 	.word	0x0800107d
 8000ef8:	0800107d 	.word	0x0800107d
 8000efc:	0800107d 	.word	0x0800107d
 8000f00:	0800107d 	.word	0x0800107d
 8000f04:	0800107d 	.word	0x0800107d
 8000f08:	0800107d 	.word	0x0800107d
 8000f0c:	0800107d 	.word	0x0800107d
 8000f10:	08001045 	.word	0x08001045
 8000f14:	0800107d 	.word	0x0800107d
 8000f18:	0800107d 	.word	0x0800107d
 8000f1c:	08000fdd 	.word	0x08000fdd
 8000f20:	0800107d 	.word	0x0800107d
 8000f24:	08000f89 	.word	0x08000f89
 8000f28:	0800107d 	.word	0x0800107d
 8000f2c:	0800107d 	.word	0x0800107d
 8000f30:	08000fb3 	.word	0x08000fb3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1d19      	adds	r1, r3, #4
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6011      	str	r1, [r2, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 8000f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f48:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 8000f4c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000f50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fd19 	bl	800098e <_StoreChar>
        break;
 8000f5c:	e08f      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1d19      	adds	r1, r3, #4
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6011      	str	r1, [r2, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 8000f6e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f82:	f7ff fdef 	bl	8000b64 <_PrintInt>
        break;
 8000f86:	e07a      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1d19      	adds	r1, r3, #4
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6011      	str	r1, [r2, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8000f98:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f9c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000faa:	220a      	movs	r2, #10
 8000fac:	f7ff fd2e 	bl	8000a0c <_PrintUnsigned>
        break;
 8000fb0:	e065      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1d19      	adds	r1, r3, #4
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6011      	str	r1, [r2, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 8000fc2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000fc6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	f7ff fd19 	bl	8000a0c <_PrintUnsigned>
        break;
 8000fda:	e050      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1d19      	adds	r1, r3, #4
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6011      	str	r1, [r2, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8000fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d104      	bne.n	8000ffa <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8000ff0:	4b37      	ldr	r3, [pc, #220]	@ (80010d0 <SEGGER_RTT_vprintf+0x41c>)
 8000ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 8000ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 8001002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001004:	3301      	adds	r3, #1
 8001006:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8001008:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800100c:	2b00      	cmp	r3, #0
 800100e:	d015      	beq.n	800103c <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8001010:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <SEGGER_RTT_vprintf+0x36a>
 8001018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800101a:	2b00      	cmp	r3, #0
 800101c:	d010      	beq.n	8001040 <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 800101e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001022:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fcb0 	bl	800098e <_StoreChar>
            Precision--;
 800102e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001030:	3b01      	subs	r3, #1
 8001032:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 8001034:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001036:	2b00      	cmp	r3, #0
 8001038:	dadf      	bge.n	8000ffa <SEGGER_RTT_vprintf+0x346>
        }
        break;
 800103a:	e020      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
              break;
 800103c:	bf00      	nop
 800103e:	e01e      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
              break;
 8001040:	bf00      	nop
        break;
 8001042:	e01c      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1d19      	adds	r1, r3, #4
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6011      	str	r1, [r2, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8001054:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001058:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800105c:	2300      	movs	r3, #0
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2308      	movs	r3, #8
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2308      	movs	r3, #8
 8001066:	2210      	movs	r2, #16
 8001068:	f7ff fcd0 	bl	8000a0c <_PrintUnsigned>
        break;
 800106c:	e007      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800106e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001072:	2125      	movs	r1, #37	@ 0x25
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fc8a 	bl	800098e <_StoreChar>
        break;
 800107a:	e000      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 800107c:	bf00      	nop
      }
      sFormat++;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	e007      	b.n	8001096 <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 8001086:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800108a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fc7c 	bl	800098e <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8001096:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001098:	2b00      	cmp	r3, #0
 800109a:	f6bf ae1c 	bge.w	8000cd6 <SEGGER_RTT_vprintf+0x22>
 800109e:	e000      	b.n	80010a2 <SEGGER_RTT_vprintf+0x3ee>
      break;
 80010a0:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80010a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd0d      	ble.n	80010c4 <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80010a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80010ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff fc32 	bl	8000920 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80010bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80010c0:	4413      	add	r3, r2
 80010c2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 80010c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3788      	adds	r7, #136	@ 0x88
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0801845c 	.word	0x0801845c

080010d4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80010d4:	b40e      	push	{r1, r2, r3}
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	461a      	mov	r2, r3
 80010ea:	69f9      	ldr	r1, [r7, #28]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fde1 	bl	8000cb4 <SEGGER_RTT_vprintf>
 80010f2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001100:	b003      	add	sp, #12
 8001102:	4770      	bx	lr

08001104 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_ETH_Init+0x84>)
 800110a:	4a20      	ldr	r2, [pc, #128]	@ (800118c <MX_ETH_Init+0x88>)
 800110c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x02;
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001110:	2202      	movs	r2, #2
 8001112:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x00;
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001116:	2200      	movs	r2, #0
 8001118:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0x00;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_ETH_Init+0x8c>)
 800111c:	2200      	movs	r2, #0
 800111e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0xFA;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001122:	22fa      	movs	r2, #250	@ 0xfa
 8001124:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x15;
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001128:	2215      	movs	r2, #21
 800112a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x47;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_ETH_Init+0x8c>)
 800112e:	2247      	movs	r2, #71	@ 0x47
 8001130:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_ETH_Init+0x84>)
 8001134:	4a16      	ldr	r2, [pc, #88]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001136:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_ETH_Init+0x84>)
 800113a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800113e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_ETH_Init+0x84>)
 8001142:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <MX_ETH_Init+0x90>)
 8001144:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_ETH_Init+0x84>)
 8001148:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_ETH_Init+0x94>)
 800114a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_ETH_Init+0x84>)
 800114e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001152:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <MX_ETH_Init+0x84>)
 8001156:	f001 fa73 	bl	8002640 <HAL_ETH_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001160:	f000 fb56 	bl	8001810 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001164:	2238      	movs	r2, #56	@ 0x38
 8001166:	2100      	movs	r1, #0
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <MX_ETH_Init+0x98>)
 800116a:	f016 f8d2 	bl	8017312 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <MX_ETH_Init+0x98>)
 8001170:	2221      	movs	r2, #33	@ 0x21
 8001172:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_ETH_Init+0x98>)
 8001176:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800117a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <MX_ETH_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000080c 	.word	0x2000080c
 800118c:	40028000 	.word	0x40028000
 8001190:	200008bc 	.word	0x200008bc
 8001194:	2000011c 	.word	0x2000011c
 8001198:	2000007c 	.word	0x2000007c
 800119c:	200007d4 	.word	0x200007d4

080011a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	@ (80012f8 <HAL_ETH_MspInit+0x158>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	f040 8096 	bne.w	80012f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011c4:	4b4d      	ldr	r3, [pc, #308]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d0:	4b4a      	ldr	r3, [pc, #296]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	4a46      	ldr	r2, [pc, #280]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e8:	4b44      	ldr	r3, [pc, #272]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	4b41      	ldr	r3, [pc, #260]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	4a40      	ldr	r2, [pc, #256]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001200:	4b3e      	ldr	r3, [pc, #248]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	4b3b      	ldr	r3, [pc, #236]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	4a3a      	ldr	r2, [pc, #232]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6313      	str	r3, [r2, #48]	@ 0x30
 8001218:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a34      	ldr	r2, [pc, #208]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001230:	4b32      	ldr	r3, [pc, #200]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a2e      	ldr	r2, [pc, #184]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800125a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800126c:	233a      	movs	r3, #58	@ 0x3a
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127c:	230b      	movs	r3, #11
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	481e      	ldr	r0, [pc, #120]	@ (8001300 <HAL_ETH_MspInit+0x160>)
 8001288:	f002 fe5a 	bl	8003f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 800128c:	238e      	movs	r3, #142	@ 0x8e
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4817      	ldr	r0, [pc, #92]	@ (8001304 <HAL_ETH_MspInit+0x164>)
 80012a8:	f002 fe4a 	bl	8003f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80012ac:	f242 0301 	movw	r3, #8193	@ 0x2001
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012be:	230b      	movs	r3, #11
 80012c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	480f      	ldr	r0, [pc, #60]	@ (8001308 <HAL_ETH_MspInit+0x168>)
 80012ca:	f002 fe39 	bl	8003f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ce:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e0:	230b      	movs	r3, #11
 80012e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4808      	ldr	r0, [pc, #32]	@ (800130c <HAL_ETH_MspInit+0x16c>)
 80012ec:	f002 fe28 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3738      	adds	r7, #56	@ 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40028000 	.word	0x40028000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	40021800 	.word	0x40021800

08001310 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <MX_FREERTOS_Init+0x18>)
 8001316:	2100      	movs	r1, #0
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <MX_FREERTOS_Init+0x1c>)
 800131a:	f012 f825 	bl	8013368 <osThreadNew>
 800131e:	4603      	mov	r3, r0
 8001320:	4a03      	ldr	r2, [pc, #12]	@ (8001330 <MX_FREERTOS_Init+0x20>)
 8001322:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801861c 	.word	0x0801861c
 800132c:	08001335 	.word	0x08001335
 8001330:	200008c4 	.word	0x200008c4

08001334 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 AppMain();
 800133c:	f000 fe8a 	bl	8002054 <AppMain>
    osDelay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f012 f8b7 	bl	80134b4 <osDelay>
	 AppMain();
 8001346:	bf00      	nop
 8001348:	e7f8      	b.n	800133c <StartDefaultTask+0x8>
	...

0800134c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b63      	ldr	r3, [pc, #396]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a62      	ldr	r2, [pc, #392]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b60      	ldr	r3, [pc, #384]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	4b5d      	ldr	r3, [pc, #372]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a5c      	ldr	r2, [pc, #368]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b5a      	ldr	r3, [pc, #360]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b57      	ldr	r3, [pc, #348]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a56      	ldr	r2, [pc, #344]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b54      	ldr	r3, [pc, #336]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a50      	ldr	r2, [pc, #320]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b4e      	ldr	r3, [pc, #312]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	4b4b      	ldr	r3, [pc, #300]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a4a      	ldr	r2, [pc, #296]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	4b45      	ldr	r3, [pc, #276]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a44      	ldr	r2, [pc, #272]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b42      	ldr	r3, [pc, #264]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2101      	movs	r1, #1
 80013f6:	483f      	ldr	r0, [pc, #252]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 80013f8:	f002 ff4e 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2104      	movs	r1, #4
 8001400:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001402:	f002 ff49 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800140c:	483a      	ldr	r0, [pc, #232]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 800140e:	f002 ff43 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	@ 0x40
 8001416:	4839      	ldr	r0, [pc, #228]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 8001418:	f002 ff3e 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	21c0      	movs	r1, #192	@ 0xc0
 8001420:	4837      	ldr	r0, [pc, #220]	@ (8001500 <MX_GPIO_Init+0x1b4>)
 8001422:	f002 ff39 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	482d      	ldr	r0, [pc, #180]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 800143e:	f002 fd7f 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001442:	2301      	movs	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4826      	ldr	r0, [pc, #152]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 800145a:	f002 fd71 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145e:	2304      	movs	r3, #4
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4820      	ldr	r0, [pc, #128]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001476:	f002 fd63 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800147a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4819      	ldr	r0, [pc, #100]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001494:	f002 fd54 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4813      	ldr	r0, [pc, #76]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 80014b0:	f002 fd46 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 80014c8:	f002 fd3a 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014cc:	23c0      	movs	r3, #192	@ 0xc0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <MX_GPIO_Init+0x1b4>)
 80014e4:	f002 fd2c 	bl	8003f40 <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	@ 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40020c00 	.word	0x40020c00

08001504 <MX_I2S1_Init>:

I2S_HandleTypeDef hi2s1;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_I2S1_Init+0x4c>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <MX_I2S1_Init+0x50>)
 800150c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001510:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001514:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_32B;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_I2S1_Init+0x4c>)
 800151e:	2205      	movs	r2, #5
 8001520:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_I2S1_Init+0x4c>)
 800152a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800152e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_HIGH;
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001532:	2208      	movs	r2, #8
 8001534:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001538:	2202      	movs	r2, #2
 800153a:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <MX_I2S1_Init+0x4c>)
 800153e:	f002 fec5 	bl	80042cc <HAL_I2S_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 8001548:	f000 f962 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200008c8 	.word	0x200008c8
 8001554:	40013000 	.word	0x40013000

08001558 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0ae      	sub	sp, #184	@ 0xb8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2290      	movs	r2, #144	@ 0x90
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f015 feca 	bl	8017312 <memset>
  if(i2sHandle->Instance==SPI1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a36      	ldr	r2, [pc, #216]	@ (800165c <HAL_I2S_MspInit+0x104>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d165      	bne.n	8001654 <HAL_I2S_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001588:	2301      	movs	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800158c:	23c0      	movs	r3, #192	@ 0xc0
 800158e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80015a0:	2300      	movs	r3, #0
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fe61 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2S_MspInit+0x60>
    {
      Error_Handler();
 80015b4:	f000 f92c 	bl	8001810 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015bc:	4a28      	ldr	r2, [pc, #160]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c4:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	4a22      	ldr	r2, [pc, #136]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6313      	str	r3, [r2, #48]	@ 0x30
 80015dc:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001600:	2330      	movs	r3, #48	@ 0x30
 8001602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001618:	2305      	movs	r3, #5
 800161a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	@ (8001664 <HAL_I2S_MspInit+0x10c>)
 8001626:	f002 fc8b 	bl	8003f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800162a:	2320      	movs	r3, #32
 800162c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001642:	2305      	movs	r3, #5
 8001644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <HAL_I2S_MspInit+0x110>)
 8001650:	f002 fc76 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001654:	bf00      	nop
 8001656:	37b8      	adds	r7, #184	@ 0xb8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013000 	.word	0x40013000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001670:	f000 f88e 	bl	8001790 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001674:	f000 fe2a 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001678:	f000 f818 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167c:	f7ff fe66 	bl	800134c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001680:	f000 fb1a 	bl	8001cb8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001684:	f000 fba8 	bl	8001dd8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8001688:	f000 f910 	bl	80018ac <MX_SPI2_Init>
  MX_ETH_Init();
 800168c:	f7ff fd3a 	bl	8001104 <MX_ETH_Init>
  MX_RNG_Init();
 8001690:	f000 f8c4 	bl	800181c <MX_RNG_Init>
  MX_I2S1_Init();
 8001694:	f7ff ff36 	bl	8001504 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001698:	f011 fdfc 	bl	8013294 <osKernelInitialize>
  MX_FREERTOS_Init();
 800169c:	f7ff fe38 	bl	8001310 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016a0:	f011 fe2c 	bl	80132fc <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 80016a4:	f000 fcd6 	bl	8002054 <AppMain>
 80016a8:	e7fc      	b.n	80016a4 <main+0x38>
	...

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	@ 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2234      	movs	r2, #52	@ 0x34
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f015 fe29 	bl	8017312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016d0:	f003 f868 	bl	80047a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <SystemClock_Config+0xdc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <SystemClock_Config+0xdc>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <SystemClock_Config+0xdc>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016ec:	4b27      	ldr	r3, [pc, #156]	@ (800178c <SystemClock_Config+0xe0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016f4:	4a25      	ldr	r2, [pc, #148]	@ (800178c <SystemClock_Config+0xe0>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <SystemClock_Config+0xe0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001708:	2301      	movs	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800170c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001712:	2302      	movs	r3, #2
 8001714:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800171a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800171c:	2304      	movs	r3, #4
 800171e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001720:	2360      	movs	r3, #96	@ 0x60
 8001722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001724:	2302      	movs	r3, #2
 8001726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001728:	2304      	movs	r3, #4
 800172a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800172c:	2302      	movs	r3, #2
 800172e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4618      	mov	r0, r3
 8001736:	f003 f895 	bl	8004864 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001740:	f000 f866 	bl	8001810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001744:	f003 f83e 	bl	80047c4 <HAL_PWREx_EnableOverDrive>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800174e:	f000 f85f 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	2103      	movs	r1, #3
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fb26 	bl	8004dc0 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800177a:	f000 f849 	bl	8001810 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	@ 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000

08001790 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017a2:	f000 fed5 	bl	8002550 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MPU_Config+0x58>)
 80017b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80017b2:	230d      	movs	r3, #13
 80017b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80017be:	2303      	movs	r3, #3
 80017c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017d2:	463b      	mov	r3, r7
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fef3 	bl	80025c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80017da:	2006      	movs	r0, #6
 80017dc:	f000 fed0 	bl	8002580 <HAL_MPU_Enable>

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2007c000 	.word	0x2007c000

080017ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80017fe:	f000 fd81 	bl	8002304 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40001000 	.word	0x40001000

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <Error_Handler+0x8>

0800181c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_RNG_Init+0x20>)
 8001822:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <MX_RNG_Init+0x24>)
 8001824:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <MX_RNG_Init+0x20>)
 8001828:	f004 f94a 	bl	8005ac0 <HAL_RNG_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001832:	f7ff ffed 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000908 	.word	0x20000908
 8001840:	50060800 	.word	0x50060800

08001844 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0a8      	sub	sp, #160	@ 0xa0
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	2290      	movs	r2, #144	@ 0x90
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f015 fd5c 	bl	8017312 <memset>
  if(rngHandle->Instance==RNG)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <HAL_RNG_MspInit+0x60>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d11b      	bne.n	800189c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001864:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001868:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fcfb 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001880:	f7ff ffc6 	bl	8001810 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_RNG_MspInit+0x64>)
 8001886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001888:	4a07      	ldr	r2, [pc, #28]	@ (80018a8 <HAL_RNG_MspInit+0x64>)
 800188a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800188e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RNG_MspInit+0x64>)
 8001892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800189c:	bf00      	nop
 800189e:	37a0      	adds	r7, #160	@ 0xa0
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50060800 	.word	0x50060800
 80018a8:	40023800 	.word	0x40023800

080018ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001924 <MX_SPI2_Init+0x78>)
 80018b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018e2:	2238      	movs	r2, #56	@ 0x38
 80018e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018fa:	2207      	movs	r2, #7
 80018fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <MX_SPI2_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <MX_SPI2_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_SPI2_Init+0x74>)
 800190c:	f004 f902 	bl	8005b14 <HAL_SPI_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001916:	f7ff ff7b 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000918 	.word	0x20000918
 8001924:	40003800 	.word	0x40003800

08001928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <HAL_SPI_MspInit+0x7c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d128      	bne.n	800199c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800197a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800198c:	2305      	movs	r3, #5
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4805      	ldr	r0, [pc, #20]	@ (80019ac <HAL_SPI_MspInit+0x84>)
 8001998:	f002 fad2 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	@ 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40003800 	.word	0x40003800
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <HAL_MspInit+0x4c>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210f      	movs	r1, #15
 80019ea:	f06f 0001 	mvn.w	r0, #1
 80019ee:	f000 fd85 	bl	80024fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	@ 0x38
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a10:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	4a32      	ldr	r2, [pc, #200]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a28:	f107 0210 	add.w	r2, r7, #16
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fbea 	bl	800520c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a42:	f003 fbbb 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8001a46:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a48:	e004      	b.n	8001a54 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a4a:	f003 fbb7 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a56:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <HAL_InitTick+0xe4>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9b      	lsrs	r3, r3, #18
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a64:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <HAL_InitTick+0xec>)
 8001a66:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a88:	4817      	ldr	r0, [pc, #92]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a8a:	f004 fbed 	bl	8006268 <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a9c:	4812      	ldr	r0, [pc, #72]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a9e:	f004 fc45 	bl	800632c <HAL_TIM_Base_Start_IT>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d111      	bne.n	8001ad4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ab0:	2036      	movs	r0, #54	@ 0x36
 8001ab2:	f000 fd3f 	bl	8002534 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d808      	bhi.n	8001ace <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	2036      	movs	r0, #54	@ 0x36
 8001ac2:	f000 fd1b 	bl	80024fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <HAL_InitTick+0xf0>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e002      	b.n	8001ad4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3738      	adds	r7, #56	@ 0x38
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	2000097c 	.word	0x2000097c
 8001aec:	40001000 	.word	0x40001000
 8001af0:	20000004 	.word	0x20000004

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <NMI_Handler+0x4>

08001afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <TIM6_DAC_IRQHandler+0x10>)
 8001b32:	f004 fc73 	bl	800641c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000097c 	.word	0x2000097c

08001b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_kill>:

int _kill(int pid, int sig)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5a:	f015 fc87 	bl	801746c <__errno>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2216      	movs	r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
  return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_exit>:

void _exit (int status)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffe7 	bl	8001b50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b82:	bf00      	nop
 8001b84:	e7fd      	b.n	8001b82 <_exit+0x12>

08001b86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e00a      	b.n	8001bae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b98:	f3af 8000 	nop.w
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbf0      	blt.n	8001b98 <_read+0x12>
  }

  return len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_isatty>:

int _isatty(int file)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f015 fc08 	bl	801746c <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2007c000 	.word	0x2007c000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	200009c8 	.word	0x200009c8
 8001c90:	20009848 	.word	0x20009848

08001c94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <MX_USART3_UART_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cfc:	f004 fd82 	bl	8006804 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d06:	f7ff fd83 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200009cc 	.word	0x200009cc
 8001d14:	40004800 	.word	0x40004800

08001d18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0ae      	sub	sp, #184	@ 0xb8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2290      	movs	r2, #144	@ 0x90
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f015 faea 	bl	8017312 <memset>
  if(uartHandle->Instance==USART3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <HAL_UART_MspInit+0xb4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d13c      	bne.n	8001dc2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fa8a 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d62:	f7ff fd55 	bl	8001810 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a19      	ldr	r2, [pc, #100]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db0:	2307      	movs	r3, #7
 8001db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <HAL_UART_MspInit+0xbc>)
 8001dbe:	f002 f8bf 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	37b8      	adds	r7, #184	@ 0xb8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020c00 	.word	0x40020c00

08001dd8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dde:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001de2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de6:	2206      	movs	r2, #6
 8001de8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df8:	2202      	movs	r2, #2
 8001dfa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1c:	f002 fb88 	bl	8004530 <HAL_PCD_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e26:	f7ff fcf3 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000a54 	.word	0x20000a54

08001e34 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0ae      	sub	sp, #184	@ 0xb8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2290      	movs	r2, #144	@ 0x90
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f015 fa5c 	bl	8017312 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e62:	d159      	bne.n	8001f18 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 f9fb 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e80:	f7ff fcc6 	bl	8001810 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	4a25      	ldr	r2, [pc, #148]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e9c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4818      	ldr	r0, [pc, #96]	@ (8001f24 <HAL_PCD_MspInit+0xf0>)
 8001ec4:	f002 f83c 	bl	8003f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4810      	ldr	r0, [pc, #64]	@ (8001f24 <HAL_PCD_MspInit+0xf0>)
 8001ee4:	f002 f82c 	bl	8003f40 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eec:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef2:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f04:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001f18:	bf00      	nop
 8001f1a:	37b8      	adds	r7, #184	@ 0xb8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000

08001f28 <initializeNetworkInterface>:

//client socket
static Socket_t xClientSocket;

//create a network interface, telling the stack what hardware is available
void initializeNetworkInterface(void){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af04      	add	r7, sp, #16

	//set macAddress according to STM32 initialization
	memcpy(macAddress, heth.Init.MACAddr, 6);
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <initializeNetworkInterface+0x5c>)
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <initializeNetworkInterface+0x60>)
 8001f34:	6810      	ldr	r0, [r2, #0]
 8001f36:	6018      	str	r0, [r3, #0]
 8001f38:	8892      	ldrh	r2, [r2, #4]
 8001f3a:	809a      	strh	r2, [r3, #4]

	//set EMAC idx to the first 0, and pass in ptr
	pxSTM32_FillInterfaceDescriptor( 0, &( xInterfaces[0]));
 8001f3c:	4913      	ldr	r1, [pc, #76]	@ (8001f8c <initializeNetworkInterface+0x64>)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f011 f964 	bl	801320c <pxSTM32_FillInterfaceDescriptor>

	//create endpoint, tells how to configure interface
    FreeRTOS_FillEndPoint( &( xInterfaces[0] ), &(xEndPoints[0]), ipAddress,
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <initializeNetworkInterface+0x60>)
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <initializeNetworkInterface+0x68>)
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <initializeNetworkInterface+0x6c>)
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <initializeNetworkInterface+0x70>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <initializeNetworkInterface+0x74>)
 8001f54:	4912      	ldr	r1, [pc, #72]	@ (8001fa0 <initializeNetworkInterface+0x78>)
 8001f56:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <initializeNetworkInterface+0x64>)
 8001f58:	f008 ffcf 	bl	800aefa <FreeRTOS_FillEndPoint>
        /* End-point 0 wants to use DHCPv4. */
        xEndPoints[ 0 ].bits.bWantDHCP = pdTRUE;
    }

    #endif /* ( ipconfigUSE_DHCP != 0 ) */
	BaseType_t xResult = FreeRTOS_IPInit_Multi();
 8001f5c:	f007 fb9c 	bl	8009698 <FreeRTOS_IPInit_Multi>
 8001f60:	6078      	str	r0, [r7, #4]
	if (xResult == pdPASS) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d104      	bne.n	8001f72 <initializeNetworkInterface+0x4a>
		SEGGER_RTT_printf(0,"Network stack initialized successfully\n");
 8001f68:	490e      	ldr	r1, [pc, #56]	@ (8001fa4 <initializeNetworkInterface+0x7c>)
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff f8b2 	bl	80010d4 <SEGGER_RTT_printf>
	} else {
		SEGGER_RTT_printf(0,"Network initialization failed\n");
	}
}
 8001f70:	e003      	b.n	8001f7a <initializeNetworkInterface+0x52>
		SEGGER_RTT_printf(0,"Network initialization failed\n");
 8001f72:	490d      	ldr	r1, [pc, #52]	@ (8001fa8 <initializeNetworkInterface+0x80>)
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff f8ad 	bl	80010d4 <SEGGER_RTT_printf>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000080c 	.word	0x2000080c
 8001f88:	20000f34 	.word	0x20000f34
 8001f8c:	20000f3c 	.word	0x20000f3c
 8001f90:	08018664 	.word	0x08018664
 8001f94:	08018660 	.word	0x08018660
 8001f98:	0801865c 	.word	0x0801865c
 8001f9c:	08018658 	.word	0x08018658
 8001fa0:	20000f64 	.word	0x20000f64
 8001fa4:	08018470 	.word	0x08018470
 8001fa8:	08018498 	.word	0x08018498

08001fac <ConfigTCPClientSocket>:

//tasks to create/config socket -> create socket, set timeout for Rx and Tx and bind socket to port #
void ConfigTCPClientSocket(void){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af02      	add	r7, sp, #8
	socklen_t xSize = sizeof( struct freertos_sockaddr );
 8001fb2:	2318      	movs	r3, #24
 8001fb4:	607b      	str	r3, [r7, #4]
	static const TickType_t xTimeOut = pdMS_TO_TICKS( 2000 );

    xClientSocket = FreeRTOS_socket(FREERTOS_AF_INET, //ipv4 family
 8001fb6:	2206      	movs	r2, #6
 8001fb8:	2101      	movs	r1, #1
 8001fba:	2002      	movs	r0, #2
 8001fbc:	f009 fa88 	bl	800b4d0 <FreeRTOS_socket>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4a20      	ldr	r2, [pc, #128]	@ (8002044 <ConfigTCPClientSocket+0x98>)
 8001fc4:	6013      	str	r3, [r2, #0]
    								FREERTOS_SOCK_STREAM,  /* SOCK_STREAM for TCP. */

									 FREERTOS_IPPROTO_TCP  ); //TCP protocol

    //check if socket was created
    configASSERT( xClientSocket != FREERTOS_INVALID_SOCKET );
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <ConfigTCPClientSocket+0x98>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d10d      	bne.n	8001fec <ConfigTCPClientSocket+0x40>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd4:	b672      	cpsid	i
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	b662      	cpsie	i
 8001fe4:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <ConfigTCPClientSocket+0x3c>

    //set socket options for the given socket
        /* Set send and receive time outs. */

        //set timeout for receiving data
        FreeRTOS_setsockopt( xClientSocket,
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <ConfigTCPClientSocket+0x98>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <ConfigTCPClientSocket+0x9c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f009 ff23 	bl	800be44 <FreeRTOS_setsockopt>
                             FREERTOS_SO_RCVTIMEO,
                             &xTimeOut,
                             sizeof( xTimeOut ) );

        //set timeout for sending data out of socket
        FreeRTOS_setsockopt( xClientSocket,
 8001ffe:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <ConfigTCPClientSocket+0x98>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	2304      	movs	r3, #4
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <ConfigTCPClientSocket+0x9c>)
 8002008:	2201      	movs	r2, #1
 800200a:	2100      	movs	r1, #0
 800200c:	f009 ff1a 	bl	800be44 <FreeRTOS_setsockopt>
                             FREERTOS_SO_SNDTIMEO,
                             &xTimeOut,
                             sizeof( xTimeOut ) );

        //bind socket to port num, NULL means FreeRTOS choose port #
        FreeRTOS_bind( xClientSocket, NULL, xSize );
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <ConfigTCPClientSocket+0x98>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f009 fafa 	bl	800b612 <FreeRTOS_bind>

        if (xClientSocket == FREERTOS_INVALID_SOCKET) {
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <ConfigTCPClientSocket+0x98>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d104      	bne.n	8002032 <ConfigTCPClientSocket+0x86>
        	SEGGER_RTT_printf(0,"Client socket is invalid!\n");
 8002028:	4908      	ldr	r1, [pc, #32]	@ (800204c <ConfigTCPClientSocket+0xa0>)
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff f852 	bl	80010d4 <SEGGER_RTT_printf>
        } else {
        	SEGGER_RTT_printf(0,"Client socket is valid\n");
        }

}
 8002030:	e003      	b.n	800203a <ConfigTCPClientSocket+0x8e>
        	SEGGER_RTT_printf(0,"Client socket is valid\n");
 8002032:	4907      	ldr	r1, [pc, #28]	@ (8002050 <ConfigTCPClientSocket+0xa4>)
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff f84d 	bl	80010d4 <SEGGER_RTT_printf>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000fd8 	.word	0x20000fd8
 8002048:	08018668 	.word	0x08018668
 800204c:	080184b8 	.word	0x080184b8
 8002050:	080184d4 	.word	0x080184d4

08002054 <AppMain>:
#include "TCP_IP.h"
#include "proj_tasks.h"
#include "mic.h"


void AppMain(void){
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af02      	add	r7, sp, #8

	//Task to create network interface and socket
	xTaskCreate(vInterfaceSocketTask, "Task Initialize Interface & Socket",
 800205a:	2300      	movs	r3, #0
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2328      	movs	r3, #40	@ 0x28
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002068:	490b      	ldr	r1, [pc, #44]	@ (8002098 <AppMain+0x44>)
 800206a:	480c      	ldr	r0, [pc, #48]	@ (800209c <AppMain+0x48>)
 800206c:	f012 fd0e 	bl	8014a8c <xTaskCreate>

	//test LCD

	//configureI2S();
	//getAudio();
	lcd_4SPI_init();
 8002070:	f000 f8da 	bl	8002228 <lcd_4SPI_init>
	setPageaddressing();
 8002074:	f000 f864 	bl	8002140 <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 8002078:	2001      	movs	r0, #1
 800207a:	f000 f877 	bl	800216c <lcd_setpage_address>
	lcd_setcolumn_address(32);
 800207e:	2020      	movs	r0, #32
 8002080:	f000 f88e 	bl	80021a0 <lcd_setcolumn_address>

	while(1){
		SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
 8002084:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <AppMain+0x4c>)
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff f824 	bl	80010d4 <SEGGER_RTT_printf>
		HAL_Delay(5000);
 800208c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002090:	f000 f958 	bl	8002344 <HAL_Delay>
		SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
 8002094:	bf00      	nop
 8002096:	e7f5      	b.n	8002084 <AppMain+0x30>
 8002098:	080184ec 	.word	0x080184ec
 800209c:	0800225d 	.word	0x0800225d
 80020a0:	08018510 	.word	0x08018510

080020a4 <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2140      	movs	r1, #64	@ 0x40
 80020b2:	480b      	ldr	r0, [pc, #44]	@ (80020e0 <lcd_transfer+0x3c>)
 80020b4:	f002 f8f0 	bl	8004298 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80020b8:	1df9      	adds	r1, r7, #7
 80020ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020be:	2201      	movs	r2, #1
 80020c0:	4808      	ldr	r0, [pc, #32]	@ (80020e4 <lcd_transfer+0x40>)
 80020c2:	f003 fdd2 	bl	8005c6a <HAL_SPI_Transmit>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2140      	movs	r1, #64	@ 0x40
 80020ce:	4804      	ldr	r0, [pc, #16]	@ (80020e0 <lcd_transfer+0x3c>)
 80020d0:	f002 f8e2 	bl	8004298 <HAL_GPIO_WritePin>

	return HAL_OK;
 80020d4:	2300      	movs	r3, #0

}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	20000918 	.word	0x20000918

080020e8 <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 80020ee:	23af      	movs	r3, #175	@ 0xaf
 80020f0:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2180      	movs	r1, #128	@ 0x80
 80020f6:	4806      	ldr	r0, [pc, #24]	@ (8002110 <onLCD+0x28>)
 80020f8:	f002 f8ce 	bl	8004298 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ffd0 	bl	80020a4 <lcd_transfer>
 8002104:	4603      	mov	r3, r0

}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40020c00 	.word	0x40020c00

08002114 <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 800211a:	23ae      	movs	r3, #174	@ 0xae
 800211c:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2180      	movs	r1, #128	@ 0x80
 8002122:	4806      	ldr	r0, [pc, #24]	@ (800213c <offLCD+0x28>)
 8002124:	f002 f8b8 	bl	8004298 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ffba 	bl	80020a4 <lcd_transfer>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40020c00 	.word	0x40020c00

08002140 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 8002146:	2320      	movs	r3, #32
 8002148:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	2180      	movs	r1, #128	@ 0x80
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <setPageaddressing+0x28>)
 8002150:	f002 f8a2 	bl	8004298 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ffa4 	bl	80020a4 <lcd_transfer>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40020c00 	.word	0x40020c00

0800216c <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800217e:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2180      	movs	r1, #128	@ 0x80
 8002184:	4805      	ldr	r0, [pc, #20]	@ (800219c <lcd_setpage_address+0x30>)
 8002186:	f002 f887 	bl	8004298 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 800218a:	7bbb      	ldrb	r3, [r7, #14]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff89 	bl	80020a4 <lcd_transfer>
 8002192:	4603      	mov	r3, r0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40020c00 	.word	0x40020c00

080021a0 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80021ac:	dc02      	bgt.n	80021b4 <lcd_setcolumn_address+0x14>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da01      	bge.n	80021b8 <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e030      	b.n	800221a <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 80021bc:	2310      	movs	r3, #16
 80021be:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 80021c0:	2300      	movs	r3, #0
 80021c2:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	b25a      	sxtb	r2, r3
 80021cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	b25a      	sxtb	r2, r3
 80021e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2180      	movs	r1, #128	@ 0x80
 80021ee:	480d      	ldr	r0, [pc, #52]	@ (8002224 <lcd_setcolumn_address+0x84>)
 80021f0:	f002 f852 	bl	8004298 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 80021f4:	7bbb      	ldrb	r3, [r7, #14]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff54 	bl	80020a4 <lcd_transfer>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e009      	b.n	800221a <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 8002206:	7b7b      	ldrb	r3, [r7, #13]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff4b 	bl	80020a4 <lcd_transfer>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40020c00 	.word	0x40020c00

08002228 <lcd_4SPI_init>:
}

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800222c:	2201      	movs	r2, #1
 800222e:	2140      	movs	r1, #64	@ 0x40
 8002230:	4808      	ldr	r0, [pc, #32]	@ (8002254 <lcd_4SPI_init+0x2c>)
 8002232:	f002 f831 	bl	8004298 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002236:	2201      	movs	r2, #1
 8002238:	2101      	movs	r1, #1
 800223a:	4807      	ldr	r0, [pc, #28]	@ (8002258 <lcd_4SPI_init+0x30>)
 800223c:	f002 f82c 	bl	8004298 <HAL_GPIO_WritePin>

	//dummy transmission for SPI

	onLCD();
 8002240:	f7ff ff52 	bl	80020e8 <onLCD>
	offLCD();
 8002244:	f7ff ff66 	bl	8002114 <offLCD>

	//this is the column where the lcd starts
	lcd_setcolumn_address(32);
 8002248:	2020      	movs	r0, #32
 800224a:	f7ff ffa9 	bl	80021a0 <lcd_setcolumn_address>

	return HAL_OK;
 800224e:	2300      	movs	r3, #0

}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40020c00 	.word	0x40020c00
 8002258:	40020800 	.word	0x40020800

0800225c <vInterfaceSocketTask>:
#include "FreeRTOS.h"
#include "FreeRTOS_Sockets.h"
#include "FreeRTOS_IP.h"
#include "TCP_IP.h"

void vInterfaceSocketTask(void * argument) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	 //Initialize networkInterface
	 initializeNetworkInterface();
 8002264:	f7ff fe60 	bl	8001f28 <initializeNetworkInterface>

	//Initialize Socket
	ConfigTCPClientSocket();
 8002268:	f7ff fea0 	bl	8001fac <ConfigTCPClientSocket>

    for(;;) {
        vTaskDelay(1000);
 800226c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002270:	f012 fd6c 	bl	8014d4c <vTaskDelay>
 8002274:	e7fa      	b.n	800226c <vInterfaceSocketTask+0x10>
	...

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800227c:	f7ff fd0a 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002280:	480c      	ldr	r0, [pc, #48]	@ (80022b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002282:	490d      	ldr	r1, [pc, #52]	@ (80022b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002284:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002298:	4c0a      	ldr	r4, [pc, #40]	@ (80022c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f015 f8e7 	bl	8017478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7ff f9df 	bl	800166c <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b0:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80022bc:	080187e8 	.word	0x080187e8
  ldr r2, =_sbss
 80022c0:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 80022c4:	20009844 	.word	0x20009844

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_Init+0x34>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <HAL_Init+0x34>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022da:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022dc:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <HAL_Init+0x34>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a07      	ldr	r2, [pc, #28]	@ (8002300 <HAL_Init+0x34>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f000 f8fc 	bl	80024e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ee:	200f      	movs	r0, #15
 80022f0:	f7ff fb86 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f4:	f7ff fb5c 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00

08002304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x20>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x24>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <HAL_IncTick+0x24>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008
 8002328:	20000fdc 	.word	0x20000fdc

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_GetTick+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000fdc 	.word	0x20000fdc

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff ffee 	bl	800232c <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_Delay+0x44>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800236a:	bf00      	nop
 800236c:	f7ff ffde 	bl	800232c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <__NVIC_SetPriorityGrouping+0x40>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <__NVIC_SetPriorityGrouping+0x40>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	05fa0000 	.word	0x05fa0000

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	@ (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	@ (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	@ (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	@ 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	@ 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff4c 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250e:	f7ff ff61 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f7ff ffb1 	bl	8002480 <NVIC_EncodePriority>
 800251e:	4602      	mov	r2, r0
 8002520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff80 	bl	800242c <__NVIC_SetPriority>
}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ff54 	bl	80023f0 <__NVIC_EnableIRQ>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002554:	f3bf 8f5f 	dmb	sy
}
 8002558:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800255a:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <HAL_MPU_Disable+0x28>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	4a06      	ldr	r2, [pc, #24]	@ (8002578 <HAL_MPU_Disable+0x28>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002564:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_MPU_Disable+0x2c>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00
 800257c:	e000ed90 	.word	0xe000ed90

08002580 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002588:	4a0b      	ldr	r2, [pc, #44]	@ (80025b8 <HAL_MPU_Enable+0x38>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002592:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <HAL_MPU_Enable+0x3c>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	4a09      	ldr	r2, [pc, #36]	@ (80025bc <HAL_MPU_Enable+0x3c>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800259e:	f3bf 8f4f 	dsb	sy
}
 80025a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025a4:	f3bf 8f6f 	isb	sy
}
 80025a8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed90 	.word	0xe000ed90
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	785a      	ldrb	r2, [r3, #1]
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_MPU_ConfigRegion+0x7c>)
 80025ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <HAL_MPU_ConfigRegion+0x7c>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4a19      	ldr	r2, [pc, #100]	@ (800263c <HAL_MPU_ConfigRegion+0x7c>)
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80025dc:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_MPU_ConfigRegion+0x7c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7b1b      	ldrb	r3, [r3, #12]
 80025e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7adb      	ldrb	r3, [r3, #11]
 80025ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7a9b      	ldrb	r3, [r3, #10]
 80025f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7b5b      	ldrb	r3, [r3, #13]
 80025fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002600:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7b9b      	ldrb	r3, [r3, #14]
 8002606:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002608:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7bdb      	ldrb	r3, [r3, #15]
 800260e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002610:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7a5b      	ldrb	r3, [r3, #9]
 8002616:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002618:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7a1b      	ldrb	r3, [r3, #8]
 800261e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002620:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002628:	4a04      	ldr	r2, [pc, #16]	@ (800263c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800262a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800262c:	6113      	str	r3, [r2, #16]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed90 	.word	0xe000ed90

08002640 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e086      	b.n	8002760 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7fe fd9b 	bl	80011a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	4b3f      	ldr	r3, [pc, #252]	@ (8002768 <HAL_ETH_Init+0x128>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	4a3e      	ldr	r2, [pc, #248]	@ (8002768 <HAL_ETH_Init+0x128>)
 8002670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002674:	6453      	str	r3, [r2, #68]	@ 0x44
 8002676:	4b3c      	ldr	r3, [pc, #240]	@ (8002768 <HAL_ETH_Init+0x128>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002682:	4b3a      	ldr	r3, [pc, #232]	@ (800276c <HAL_ETH_Init+0x12c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4a39      	ldr	r2, [pc, #228]	@ (800276c <HAL_ETH_Init+0x12c>)
 8002688:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800268c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800268e:	4b37      	ldr	r3, [pc, #220]	@ (800276c <HAL_ETH_Init+0x12c>)
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4935      	ldr	r1, [pc, #212]	@ (800276c <HAL_ETH_Init+0x12c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800269c:	4b33      	ldr	r3, [pc, #204]	@ (800276c <HAL_ETH_Init+0x12c>)
 800269e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b8:	f7ff fe38 	bl	800232c <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026be:	e011      	b.n	80026e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026c0:	f7ff fe34 	bl	800232c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026ce:	d909      	bls.n	80026e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2204      	movs	r2, #4
 80026d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	22e0      	movs	r2, #224	@ 0xe0
 80026dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e03d      	b.n	8002760 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e4      	bne.n	80026c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f001 f966 	bl	80039c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f001 fa11 	bl	8003b24 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f001 fa67 	bl	8003bd6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	461a      	mov	r2, r3
 800270e:	2100      	movs	r1, #0
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f001 f9cf 	bl	8003ab4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002724:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <HAL_ETH_Init+0x130>)
 8002734:	430b      	orrs	r3, r1
 8002736:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800274a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2210      	movs	r2, #16
 800275a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	00020060 	.word	0x00020060

08002774 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002782:	2b10      	cmp	r3, #16
 8002784:	d15f      	bne.n	8002846 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2204      	movs	r2, #4
 8002798:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f9f6 	bl	8002b8c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7ff fdcb 	bl	8002344 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027cc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027e4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 ff8a 	bl	8003700 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0208 	orr.w	r2, r2, #8
 80027fa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002804:	2001      	movs	r0, #1
 8002806:	f7ff fd9d 	bl	8002344 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0204 	orr.w	r2, r2, #4
 8002820:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282a:	69d9      	ldr	r1, [r3, #28]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <HAL_ETH_Start_IT+0xdc>)
 8002832:	430b      	orrs	r3, r1
 8002834:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002838:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2240      	movs	r2, #64	@ 0x40
 800283e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	0001a0c1 	.word	0x0001a0c1

08002854 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002862:	2b40      	cmp	r3, #64	@ 0x40
 8002864:	d16e      	bne.n	8002944 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002876:	69d9      	ldr	r1, [r3, #28]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b34      	ldr	r3, [pc, #208]	@ (8002950 <HAL_ETH_Stop_IT+0xfc>)
 800287e:	400b      	ands	r3, r1
 8002880:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002884:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002898:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800289c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	f023 0302 	bic.w	r3, r3, #2
 80028b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028b4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0204 	bic.w	r2, r2, #4
 80028c4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7ff fd38 	bl	8002344 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 ff0f 	bl	8003700 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0208 	bic.w	r2, r2, #8
 80028f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028fa:	2001      	movs	r0, #1
 80028fc:	f7ff fd22 	bl	8002344 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e00e      	b.n	800292c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	3212      	adds	r2, #18
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d9ed      	bls.n	800290e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2210      	movs	r2, #16
 800293c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	fffe5f3e 	.word	0xfffe5f3e

08002954 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e045      	b.n	8002a04 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800297e:	2b40      	cmp	r3, #64	@ 0x40
 8002980:	d13f      	bne.n	8002a02 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800298a:	2201      	movs	r2, #1
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f001 f990 	bl	8003cb4 <ETH_Prepare_Tx_Descriptors>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	f043 0202 	orr.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e02a      	b.n	8002a04 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80029ae:	f3bf 8f4f 	dsb	sy
}
 80029b2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d904      	bls.n	80029d0 <HAL_ETH_Transmit_IT+0x7c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	1f1a      	subs	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00d      	beq.n	80029fe <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ea:	461a      	mov	r2, r3
 80029ec:	2304      	movs	r3, #4
 80029ee:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f8:	461a      	mov	r2, r3
 80029fa:	2300      	movs	r3, #0
 80029fc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0a4      	b.n	8002b82 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3e:	2b40      	cmp	r3, #64	@ 0x40
 8002a40:	d001      	beq.n	8002a46 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e09d      	b.n	8002b82 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	3212      	adds	r2, #18
 8002a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a56:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a5c:	f1c3 0304 	rsb	r3, r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a62:	e066      	b.n	8002b32 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_ETH_ReadData+0x88>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d03c      	beq.n	8002b0e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002ab6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f010 fb38 	bl	8013162 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	441a      	add	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d902      	bls.n	8002b20 <HAL_ETH_ReadData+0x114>
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3b04      	subs	r3, #4
 8002b1e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	3212      	adds	r2, #18
 8002b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db06      	blt.n	8002b48 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d202      	bcs.n	8002b48 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d08d      	beq.n	8002a64 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	441a      	add	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f815 	bl	8002b8c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	3212      	adds	r2, #18
 8002ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bb2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002bb4:	e042      	b.n	8002c3c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d112      	bne.n	8002be4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002bbe:	f107 0308 	add.w	r3, r7, #8
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f010 fab8 	bl	8013138 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	74fb      	strb	r3, [r7, #19]
 8002bd2:	e007      	b.n	8002be4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	461a      	mov	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d028      	beq.n	8002c3c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	4b26      	ldr	r3, [pc, #152]	@ (8002c90 <ETH_UpdateDescriptor+0x104>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	6053      	str	r3, [r2, #4]
 8002bfe:	e005      	b.n	8002c0c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d902      	bls.n	8002c2a <ETH_UpdateDescriptor+0x9e>
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	3b04      	subs	r3, #4
 8002c28:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	3212      	adds	r2, #18
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	617b      	str	r3, [r7, #20]
      desccount--;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <ETH_UpdateDescriptor+0xbc>
 8002c42:	7cfb      	ldrb	r3, [r7, #19]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1b6      	bne.n	8002bb6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d01a      	beq.n	8002c88 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3303      	adds	r3, #3
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c5c:	f3bf 8f5f 	dmb	sy
}
 8002c60:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6919      	ldr	r1, [r3, #16]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	18ca      	adds	r2, r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c7a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002c88:	bf00      	nop
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	80004000 	.word	0x80004000

08002c94 <HAL_ETH_GetRxDataErrorCode>:
  *         the configuration information for ETHERNET module
  * @param  pErrorCode: pointer to uint32_t to hold the error code
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataErrorCode(const ETH_HandleTypeDef *heth, uint32_t *pErrorCode)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  /* Get error bits. */
  *pErrorCode = READ_BIT(heth->RxDescList.pRxLastRxDesc, ETH_DMARXDESC_ERRORS_MASK);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ca2:	f644 03de 	movw	r3, #18654	@ 0x48de
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3318      	adds	r3, #24
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002cd8:	e047      	b.n	8002d6a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d902      	bls.n	8002d06 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	3b04      	subs	r3, #4
 8002d04:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002d0a:	7bbb      	ldrb	r3, [r7, #14]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d02c      	beq.n	8002d6a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68d9      	ldr	r1, [r3, #12]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db1f      	blt.n	8002d66 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f010 fa54 	bl	80131e0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	2200      	movs	r2, #0
 8002d44:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d902      	bls.n	8002d58 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	3b04      	subs	r3, #4
 8002d56:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d64:	e001      	b.n	8002d6a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1b1      	bne.n	8002cda <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002da8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed8 <HAL_ETH_IRQHandler+0x158>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <HAL_ETH_IRQHandler+0x56>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <HAL_ETH_IRQHandler+0x15c>)
 8002dce:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f010 f951 	bl	8013078 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00f      	beq.n	8002e00 <HAL_ETH_IRQHandler+0x80>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df2:	461a      	mov	r2, r3
 8002df4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002df8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f010 f96c 	bl	80130d8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d042      	beq.n	8002e90 <HAL_ETH_IRQHandler+0x110>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d03d      	beq.n	8002e90 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1a:	f043 0208 	orr.w	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01a      	beq.n	8002e64 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <HAL_ETH_IRQHandler+0x160>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002e54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e58:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	22e0      	movs	r2, #224	@ 0xe0
 8002e5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e62:	e012      	b.n	8002e8a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e82:	461a      	mov	r2, r3
 8002e84:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002e88:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f010 f898 	bl	8012fc0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f81a 	bl	8002ee4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_ETH_IRQHandler+0x158>)
 8002ec4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ec8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f814 	bl	8002ef8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40013c00 	.word	0x40013c00
 8002edc:	00010040 	.word	0x00010040
 8002ee0:	007e2000 	.word	0x007e2000

08002ee4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 031c 	and.w	r3, r3, #28
 8002f28:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	02db      	lsls	r3, r3, #11
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0302 	bic.w	r3, r3, #2
 8002f4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002f5c:	f7ff f9e6 	bl	800232c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f62:	e00d      	b.n	8002f80 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002f64:	f7ff f9e2 	bl	800232c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f72:	d301      	bcc.n	8002f78 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e010      	b.n	8002f9a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1ec      	bne.n	8002f64 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 031c 	and.w	r3, r3, #28
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	02db      	lsls	r3, r3, #11
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	019b      	lsls	r3, r3, #6
 8002fd0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ffc:	f7ff f996 	bl	800232c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003002:	e00d      	b.n	8003020 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003004:	f7ff f992 	bl	800232c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003012:	d301      	bcc.n	8003018 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e009      	b.n	800302c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ec      	bne.n	8003004 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0e6      	b.n	8003216 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf0c      	ite	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	2300      	movne	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf14      	ite	ne
 8003162:	2301      	movne	r3, #1
 8003164:	2300      	moveq	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf14      	ite	ne
 80031ea:	2301      	movne	r3, #1
 80031ec:	2300      	moveq	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_ETH_GetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetDMAConfig(const ETH_HandleTypeDef *heth, ETH_DMAConfigTypeDef *dmaconf)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ETH_GetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0ca      	b.n	80033ce <HAL_ETH_GetDMAConfig+0x1aa>
  }

  dmaconf->DMAArbitration = READ_BIT(heth->Instance->DMABMR,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	f24c 0302 	movw	r3, #49154	@ 0xc002
 8003246:	4013      	ands	r3, r2
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	6013      	str	r3, [r2, #0]
                                     (ETH_DMAARBITRATION_RXPRIORTX | ETH_DMAARBITRATION_ROUNDROBIN_RXTX_4_1));
  dmaconf->AddressAlignedBeats = ((READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_AAB) >> 25U) > 0U) ? ENABLE : DISABLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	711a      	strb	r2, [r3, #4]
  dmaconf->BurstMode = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_FB | ETH_DMABMR_MB);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b59      	ldr	r3, [pc, #356]	@ (80033dc <HAL_ETH_GetDMAConfig+0x1b8>)
 8003276:	4013      	ands	r3, r2
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	6093      	str	r3, [r2, #8]
  dmaconf->RxDMABurstLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_RDP);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 02fc 	and.w	r2, r3, #8257536	@ 0x7e0000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	619a      	str	r2, [r3, #24]
  dmaconf->TxDMABurstLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_PBL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 527c 	and.w	r2, r3, #16128	@ 0x3f00
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	611a      	str	r2, [r3, #16]
  dmaconf->EnhancedDescriptorFormat = ((READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_EDE) >> 7) > 0U) ? ENABLE : DISABLE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bf14      	ite	ne
 80032b2:	2301      	movne	r3, #1
 80032b4:	2300      	moveq	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  dmaconf->DescriptorSkipLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_DSL) >> 2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28

  dmaconf->DropTCPIPChecksumErrorFrame = ((READ_BIT(heth->Instance->DMAOMR,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032dc:	699b      	ldr	r3, [r3, #24]
                                                    ETH_DMAOMR_DTCEFD) >> 26) > 0U) ? DISABLE : ENABLE;
 80032de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
  dmaconf->DropTCPIPChecksumErrorFrame = ((READ_BIT(heth->Instance->DMAOMR,
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	731a      	strb	r2, [r3, #12]
  dmaconf->ReceiveStoreForward = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_RSF) >> 25) > 0U) ? ENABLE : DISABLE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	735a      	strb	r2, [r3, #13]
  dmaconf->FlushRxPacket = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_FTF) >> 20) > 0U) ? DISABLE : ENABLE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	775a      	strb	r2, [r3, #29]
  dmaconf->TransmitStoreForward = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_TSF) >> 21) > 0U) ? ENABLE : DISABLE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	739a      	strb	r2, [r3, #14]
  dmaconf->TransmitThresholdControl = READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_TTC);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f403 32e0 	and.w	r2, r3, #114688	@ 0x1c000
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	615a      	str	r2, [r3, #20]
  dmaconf->ForwardErrorFrames = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_FEF) >> 7) > 0U) ? ENABLE : DISABLE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	771a      	strb	r2, [r3, #28]
  dmaconf->ForwardUndersizedGoodFrames = ((READ_BIT(heth->Instance->DMAOMR,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003384:	699b      	ldr	r3, [r3, #24]
                                                    ETH_DMAOMR_FUGF) >> 6) > 0U) ? ENABLE : DISABLE;
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
  dmaconf->ForwardUndersizedGoodFrames = ((READ_BIT(heth->Instance->DMAOMR,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	779a      	strb	r2, [r3, #30]
  dmaconf->ReceiveThresholdControl = READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_RTC);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0218 	and.w	r2, r3, #24
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	621a      	str	r2, [r3, #32]
  dmaconf->SecondFrameOperate = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_OSF) >> 2) > 0U) ? ENABLE : DISABLE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	04010000 	.word	0x04010000

080033e0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e00b      	b.n	800340c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d105      	bne.n	800340a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f9a3 	bl	800374c <ETH_SetMACConfig>

    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e00b      	b.n	8003440 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800342e:	2b10      	cmp	r3, #16
 8003430:	d105      	bne.n	800343e <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa3d 	bl	80038b4 <ETH_SetDMAConfig>

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 031c 	bic.w	r3, r3, #28
 800345e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003460:	f001 fea0 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 8003464:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4a14      	ldr	r2, [pc, #80]	@ (80034bc <HAL_ETH_SetMDIOClockRange+0x74>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d804      	bhi.n	8003478 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f043 0308 	orr.w	r3, r3, #8
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e019      	b.n	80034ac <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4a11      	ldr	r2, [pc, #68]	@ (80034c0 <HAL_ETH_SetMDIOClockRange+0x78>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d204      	bcs.n	800348a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f043 030c 	orr.w	r3, r3, #12
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e010      	b.n	80034ac <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d90c      	bls.n	80034ac <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4a0c      	ldr	r2, [pc, #48]	@ (80034c8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d804      	bhi.n	80034a4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	e003      	b.n	80034ac <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f043 0310 	orr.w	r3, r3, #16
 80034aa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	611a      	str	r2, [r3, #16]
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	02160ebf 	.word	0x02160ebf
 80034c0:	03938700 	.word	0x03938700
 80034c4:	05f5e0ff 	.word	0x05f5e0ff
 80034c8:	08f0d17f 	.word	0x08f0d17f

080034cc <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;
  uint32_t tmpreg1;

  if (pFilterConfig == NULL)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e044      	b.n	800356a <HAL_ETH_SetMACFilterConfig+0x9e>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	78db      	ldrb	r3, [r3, #3]
 80034ea:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80034ec:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	791b      	ldrb	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80034f4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	7a1b      	ldrb	r3, [r3, #8]
 80034fa:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80034fc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	795b      	ldrb	r3, [r3, #5]
 8003502:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003504:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == ENABLE) ? 1U : 0U) << 5) |
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	7a52      	ldrb	r2, [r2, #9]
 800350a:	2a01      	cmp	r2, #1
 800350c:	d101      	bne.n	8003512 <HAL_ETH_SetMACFilterConfig+0x46>
 800350e:	2220      	movs	r2, #32
 8003510:	e000      	b.n	8003514 <HAL_ETH_SetMACFilterConfig+0x48>
 8003512:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8003514:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	79db      	ldrb	r3, [r3, #7]
 800351a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == ENABLE) ? 1U : 0U) << 5) |
 800351c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	799b      	ldrb	r3, [r3, #6]
 8003522:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003524:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	789b      	ldrb	r3, [r3, #2]
 800352a:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800352c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8003534:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACFFR, ETH_MACFFR_MASK, filterconfig);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_ETH_SetMACFilterConfig+0xa8>)
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	68f9      	ldr	r1, [r7, #12]
 800354e:	430b      	orrs	r3, r1
 8003550:	6053      	str	r3, [r2, #4]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60bb      	str	r3, [r7, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800355a:	2001      	movs	r0, #1
 800355c:	f7fe fef2 	bl	8002344 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	7ffff800 	.word	0x7ffff800

08003578 <HAL_ETH_GetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that will hold
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetMACFilterConfig(const ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  if (pFilterConfig == NULL)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_ETH_GetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e084      	b.n	8003696 <HAL_ETH_GetMACFilterConfig+0x11e>
  }

  pFilterConfig->PromiscuousMode = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PM)) > 0U) ? ENABLE : DISABLE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	701a      	strb	r2, [r3, #0]
  pFilterConfig->HashUnicast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HU) >> 1) > 0U) ? ENABLE : DISABLE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	70da      	strb	r2, [r3, #3]
  pFilterConfig->HashMulticast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HM) >> 2) > 0U) ? ENABLE : DISABLE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf14      	ite	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	2300      	moveq	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	711a      	strb	r2, [r3, #4]
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
                                                       ETH_MACFFR_DAIF) >> 3) > 0U) ? ENABLE : DISABLE;
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	721a      	strb	r2, [r3, #8]
  pFilterConfig->PassAllMulticast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PAM) >> 4) > 0U) ? ENABLE : DISABLE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	715a      	strb	r2, [r3, #5]
  pFilterConfig->BroadcastFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_BFD) >> 5) > 0U) ? ENABLE : DISABLE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	725a      	strb	r2, [r3, #9]
  pFilterConfig->ControlPacketsFilter = READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PCF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	60da      	str	r2, [r3, #12]
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
                                                      ETH_MACFFR_SAIF) >> 8) > 0U) ? ENABLE : DISABLE;
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	71da      	strb	r2, [r3, #7]
  pFilterConfig->SrcAddrFiltering = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_SAF) >> 9) > 0U) ? ENABLE : DISABLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	719a      	strb	r2, [r3, #6]
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HPF) >> 10) > 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
                                       ? ENABLE : DISABLE;
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HPF) >> 10) > 0U)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	709a      	strb	r2, [r3, #2]
  pFilterConfig->ReceiveAllMode = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_RA) >> 31) > 0U) ? ENABLE : DISABLE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0fdb      	lsrs	r3, r3, #31
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	705a      	strb	r2, [r3, #1]

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_ETH_SetHashTable>:
  * @param  pHashTable: pointer to a table of two 32 bit values, that contains
  *         the 64 bits of the hash table.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetHashTable(ETH_HandleTypeDef *heth, uint32_t *pHashTable)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  if (pHashTable == NULL)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_ETH_SetHashTable+0x14>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e020      	b.n	80036f8 <HAL_ETH_SetHashTable+0x56>
  }

  heth->Instance->MACHTHR = pHashTable[0];
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	609a      	str	r2, [r3, #8]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACHTHR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036c8:	2001      	movs	r0, #1
 80036ca:	f7fe fe3b 	bl	8002344 <HAL_Delay>
  (heth->Instance)->MACHTHR = tmpreg1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	609a      	str	r2, [r3, #8]

  heth->Instance->MACHTLR = pHashTable[1];
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6852      	ldr	r2, [r2, #4]
 80036de:	60da      	str	r2, [r3, #12]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACHTLR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7fe fe2b 	bl	8002344 <HAL_Delay>
  (heth->Instance)->MACHTLR = tmpreg1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800371e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003722:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003730:	2001      	movs	r0, #1
 8003732:	f7fe fe07 	bl	8002344 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003740:	6193      	str	r3, [r2, #24]
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4b53      	ldr	r3, [pc, #332]	@ (80038b0 <ETH_SetMACConfig+0x164>)
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	7b9b      	ldrb	r3, [r3, #14]
 800376a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	7c12      	ldrb	r2, [r2, #16]
 8003770:	2a00      	cmp	r2, #0
 8003772:	d102      	bne.n	800377a <ETH_SetMACConfig+0x2e>
 8003774:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003778:	e000      	b.n	800377c <ETH_SetMACConfig+0x30>
 800377a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800377c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	7c52      	ldrb	r2, [r2, #17]
 8003782:	2a00      	cmp	r2, #0
 8003784:	d102      	bne.n	800378c <ETH_SetMACConfig+0x40>
 8003786:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800378a:	e000      	b.n	800378e <ETH_SetMACConfig+0x42>
 800378c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800378e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003794:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	7fdb      	ldrb	r3, [r3, #31]
 800379a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800379c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80037a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	7f92      	ldrb	r2, [r2, #30]
 80037a8:	2a00      	cmp	r2, #0
 80037aa:	d102      	bne.n	80037b2 <ETH_SetMACConfig+0x66>
 80037ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037b0:	e000      	b.n	80037b4 <ETH_SetMACConfig+0x68>
 80037b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80037b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	7f1b      	ldrb	r3, [r3, #28]
 80037ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80037bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80037c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	791b      	ldrb	r3, [r3, #4]
 80037c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80037ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80037d2:	2a00      	cmp	r2, #0
 80037d4:	d102      	bne.n	80037dc <ETH_SetMACConfig+0x90>
 80037d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037da:	e000      	b.n	80037de <ETH_SetMACConfig+0x92>
 80037dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80037de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	7bdb      	ldrb	r3, [r3, #15]
 80037e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80037e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80037ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80037f6:	4313      	orrs	r3, r2
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800380e:	2001      	movs	r0, #1
 8003810:	f7fe fd98 	bl	8002344 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800382a:	4013      	ands	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003832:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800383a:	2a00      	cmp	r2, #0
 800383c:	d101      	bne.n	8003842 <ETH_SetMACConfig+0xf6>
 800383e:	2280      	movs	r2, #128	@ 0x80
 8003840:	e000      	b.n	8003844 <ETH_SetMACConfig+0xf8>
 8003842:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003844:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800384a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003852:	2a01      	cmp	r2, #1
 8003854:	d101      	bne.n	800385a <ETH_SetMACConfig+0x10e>
 8003856:	2208      	movs	r2, #8
 8003858:	e000      	b.n	800385c <ETH_SetMACConfig+0x110>
 800385a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800385c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003864:	2a01      	cmp	r2, #1
 8003866:	d101      	bne.n	800386c <ETH_SetMACConfig+0x120>
 8003868:	2204      	movs	r2, #4
 800386a:	e000      	b.n	800386e <ETH_SetMACConfig+0x122>
 800386c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800386e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003876:	2a01      	cmp	r2, #1
 8003878:	d101      	bne.n	800387e <ETH_SetMACConfig+0x132>
 800387a:	2202      	movs	r2, #2
 800387c:	e000      	b.n	8003880 <ETH_SetMACConfig+0x134>
 800387e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003880:	4313      	orrs	r3, r2
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003898:	2001      	movs	r0, #1
 800389a:	f7fe fd53 	bl	8002344 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	fd20810f 	.word	0xfd20810f

080038b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4b3d      	ldr	r3, [pc, #244]	@ (80039c4 <ETH_SetDMAConfig+0x110>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	7b1b      	ldrb	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <ETH_SetDMAConfig+0x2c>
 80038da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80038de:	e000      	b.n	80038e2 <ETH_SetDMAConfig+0x2e>
 80038e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	7b5b      	ldrb	r3, [r3, #13]
 80038e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80038e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	7f52      	ldrb	r2, [r2, #29]
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	d102      	bne.n	80038f8 <ETH_SetDMAConfig+0x44>
 80038f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80038f6:	e000      	b.n	80038fa <ETH_SetDMAConfig+0x46>
 80038f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80038fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	7b9b      	ldrb	r3, [r3, #14]
 8003900:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003902:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003908:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	7f1b      	ldrb	r3, [r3, #28]
 800390e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003910:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	7f9b      	ldrb	r3, [r3, #30]
 8003916:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003918:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800391e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003926:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003928:	4313      	orrs	r3, r2
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003938:	461a      	mov	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800394a:	2001      	movs	r0, #1
 800394c:	f7fe fcfa 	bl	8002344 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	791b      	ldrb	r3, [r3, #4]
 8003962:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003968:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800396e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003974:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800397c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800397e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003986:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800398c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003996:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800399a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039a8:	2001      	movs	r0, #1
 80039aa:	f7fe fccb 	bl	8002344 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	f8de3f23 	.word	0xf8de3f23

080039c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0a6      	sub	sp, #152	@ 0x98
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80039dc:	2300      	movs	r3, #0
 80039de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003a30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a34:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003a36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003a42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fe7f 	bl	800374c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003a84:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a88:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a8e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003a9e:	f107 0308 	add.w	r3, r7, #8
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff05 	bl	80038b4 <ETH_SetDMAConfig>
}
 8003aaa:	bf00      	nop
 8003aac:	3798      	adds	r7, #152	@ 0x98
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3305      	adds	r3, #5
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	3204      	adds	r2, #4
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <ETH_MACAddressConfig+0x68>)
 8003ad6:	4413      	add	r3, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3303      	adds	r3, #3
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	061a      	lsls	r2, r3, #24
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3301      	adds	r3, #1
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	4313      	orrs	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <ETH_MACAddressConfig+0x6c>)
 8003b06:	4413      	add	r3, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	6013      	str	r3, [r2, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40028040 	.word	0x40028040
 8003b20:	40028044 	.word	0x40028044

08003b24 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e03e      	b.n	8003bb0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68d9      	ldr	r1, [r3, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	440b      	add	r3, r1
 8003b42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	3206      	adds	r2, #6
 8003b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d80c      	bhi.n	8003b94 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68d9      	ldr	r1, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	440b      	add	r3, r1
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	e004      	b.n	8003b9e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3301      	adds	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d9bd      	bls.n	8003b32 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bc8:	611a      	str	r2, [r3, #16]
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e048      	b.n	8003c76 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6919      	ldr	r1, [r3, #16]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	440b      	add	r3, r1
 8003bf4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2200      	movs	r2, #0
 8003c18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c20:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	3212      	adds	r2, #18
 8003c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d80c      	bhi.n	8003c66 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6919      	ldr	r1, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	e004      	b.n	8003c70 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d9b3      	bls.n	8003be4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca6:	60da      	str	r2, [r3, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b091      	sub	sp, #68	@ 0x44
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cde:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cf6:	d007      	beq.n	8003d08 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e111      	b.n	8003f30 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0e:	3301      	adds	r3, #1
 8003d10:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	4b86      	ldr	r3, [pc, #536]	@ (8003f3c <ETH_Prepare_Tx_Descriptors+0x288>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d26:	6852      	ldr	r2, [r2, #4]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d68:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003d8e:	e082      	b.n	8003e96 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d006      	beq.n	8003db0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	e005      	b.n	8003dbc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d902      	bls.n	8003dce <ETH_Prepare_Tx_Descriptors+0x11a>
 8003dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003de4:	d007      	beq.n	8003df6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dea:	3304      	adds	r3, #4
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d029      	beq.n	8003e4a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e02:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e08:	e019      	b.n	8003e3e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003e0a:	f3bf 8f5f 	dmb	sy
}
 8003e0e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1e:	3301      	adds	r3, #1
 8003e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d902      	bls.n	8003e2e <ETH_Prepare_Tx_Descriptors+0x17a>
 8003e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d3e1      	bcc.n	8003e0a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	e072      	b.n	8003f30 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e58:	3301      	adds	r3, #1
 8003e5a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	4b32      	ldr	r3, [pc, #200]	@ (8003f3c <ETH_Prepare_Tx_Descriptors+0x288>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e76:	6852      	ldr	r2, [r2, #4]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	3301      	adds	r3, #1
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003e84:	f3bf 8f5f 	dmb	sy
}
 8003e88:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f47f af78 	bne.w	8003d90 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e005      	b.n	8003ec0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003ed6:	f3bf 8f5f 	dmb	sy
}
 8003eda:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003efc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efe:	f3ef 8310 	mrs	r3, PRIMASK
 8003f02:	613b      	str	r3, [r7, #16]
  return(result);
 8003f04:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f383 8810 	msr	PRIMASK, r3
}
 8003f12:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	4413      	add	r3, r2
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3744      	adds	r7, #68	@ 0x44
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	ffffe000 	.word	0xffffe000

08003f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	@ 0x24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	e175      	b.n	800424c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003f60:	2201      	movs	r2, #1
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	f040 8164 	bne.w	8004246 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d005      	beq.n	8003f96 <HAL_GPIO_Init+0x56>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d130      	bne.n	8003ff8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fcc:	2201      	movs	r2, #1
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 0201 	and.w	r2, r3, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	2b03      	cmp	r3, #3
 8004002:	d017      	beq.n	8004034 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	2203      	movs	r2, #3
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d123      	bne.n	8004088 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	08da      	lsrs	r2, r3, #3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3208      	adds	r2, #8
 8004048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	220f      	movs	r2, #15
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	08da      	lsrs	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3208      	adds	r2, #8
 8004082:	69b9      	ldr	r1, [r7, #24]
 8004084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0203 	and.w	r2, r3, #3
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80be 	beq.w	8004246 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ca:	4b66      	ldr	r3, [pc, #408]	@ (8004264 <HAL_GPIO_Init+0x324>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	4a65      	ldr	r2, [pc, #404]	@ (8004264 <HAL_GPIO_Init+0x324>)
 80040d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040d6:	4b63      	ldr	r3, [pc, #396]	@ (8004264 <HAL_GPIO_Init+0x324>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80040e2:	4a61      	ldr	r2, [pc, #388]	@ (8004268 <HAL_GPIO_Init+0x328>)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	3302      	adds	r3, #2
 80040ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	220f      	movs	r2, #15
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a58      	ldr	r2, [pc, #352]	@ (800426c <HAL_GPIO_Init+0x32c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d037      	beq.n	800417e <HAL_GPIO_Init+0x23e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a57      	ldr	r2, [pc, #348]	@ (8004270 <HAL_GPIO_Init+0x330>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d031      	beq.n	800417a <HAL_GPIO_Init+0x23a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a56      	ldr	r2, [pc, #344]	@ (8004274 <HAL_GPIO_Init+0x334>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02b      	beq.n	8004176 <HAL_GPIO_Init+0x236>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a55      	ldr	r2, [pc, #340]	@ (8004278 <HAL_GPIO_Init+0x338>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d025      	beq.n	8004172 <HAL_GPIO_Init+0x232>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a54      	ldr	r2, [pc, #336]	@ (800427c <HAL_GPIO_Init+0x33c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01f      	beq.n	800416e <HAL_GPIO_Init+0x22e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a53      	ldr	r2, [pc, #332]	@ (8004280 <HAL_GPIO_Init+0x340>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d019      	beq.n	800416a <HAL_GPIO_Init+0x22a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a52      	ldr	r2, [pc, #328]	@ (8004284 <HAL_GPIO_Init+0x344>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_GPIO_Init+0x226>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a51      	ldr	r2, [pc, #324]	@ (8004288 <HAL_GPIO_Init+0x348>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00d      	beq.n	8004162 <HAL_GPIO_Init+0x222>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a50      	ldr	r2, [pc, #320]	@ (800428c <HAL_GPIO_Init+0x34c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <HAL_GPIO_Init+0x21e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a4f      	ldr	r2, [pc, #316]	@ (8004290 <HAL_GPIO_Init+0x350>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_GPIO_Init+0x21a>
 8004156:	2309      	movs	r3, #9
 8004158:	e012      	b.n	8004180 <HAL_GPIO_Init+0x240>
 800415a:	230a      	movs	r3, #10
 800415c:	e010      	b.n	8004180 <HAL_GPIO_Init+0x240>
 800415e:	2308      	movs	r3, #8
 8004160:	e00e      	b.n	8004180 <HAL_GPIO_Init+0x240>
 8004162:	2307      	movs	r3, #7
 8004164:	e00c      	b.n	8004180 <HAL_GPIO_Init+0x240>
 8004166:	2306      	movs	r3, #6
 8004168:	e00a      	b.n	8004180 <HAL_GPIO_Init+0x240>
 800416a:	2305      	movs	r3, #5
 800416c:	e008      	b.n	8004180 <HAL_GPIO_Init+0x240>
 800416e:	2304      	movs	r3, #4
 8004170:	e006      	b.n	8004180 <HAL_GPIO_Init+0x240>
 8004172:	2303      	movs	r3, #3
 8004174:	e004      	b.n	8004180 <HAL_GPIO_Init+0x240>
 8004176:	2302      	movs	r3, #2
 8004178:	e002      	b.n	8004180 <HAL_GPIO_Init+0x240>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_GPIO_Init+0x240>
 800417e:	2300      	movs	r3, #0
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	f002 0203 	and.w	r2, r2, #3
 8004186:	0092      	lsls	r2, r2, #2
 8004188:	4093      	lsls	r3, r2
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004190:	4935      	ldr	r1, [pc, #212]	@ (8004268 <HAL_GPIO_Init+0x328>)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3302      	adds	r3, #2
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800419e:	4b3d      	ldr	r3, [pc, #244]	@ (8004294 <HAL_GPIO_Init+0x354>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041c2:	4a34      	ldr	r2, [pc, #208]	@ (8004294 <HAL_GPIO_Init+0x354>)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041c8:	4b32      	ldr	r3, [pc, #200]	@ (8004294 <HAL_GPIO_Init+0x354>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041ec:	4a29      	ldr	r2, [pc, #164]	@ (8004294 <HAL_GPIO_Init+0x354>)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041f2:	4b28      	ldr	r3, [pc, #160]	@ (8004294 <HAL_GPIO_Init+0x354>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004216:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <HAL_GPIO_Init+0x354>)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800421c:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <HAL_GPIO_Init+0x354>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004240:	4a14      	ldr	r2, [pc, #80]	@ (8004294 <HAL_GPIO_Init+0x354>)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3301      	adds	r3, #1
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b0f      	cmp	r3, #15
 8004250:	f67f ae86 	bls.w	8003f60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3724      	adds	r7, #36	@ 0x24
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	40013800 	.word	0x40013800
 800426c:	40020000 	.word	0x40020000
 8004270:	40020400 	.word	0x40020400
 8004274:	40020800 	.word	0x40020800
 8004278:	40020c00 	.word	0x40020c00
 800427c:	40021000 	.word	0x40021000
 8004280:	40021400 	.word	0x40021400
 8004284:	40021800 	.word	0x40021800
 8004288:	40021c00 	.word	0x40021c00
 800428c:	40022000 	.word	0x40022000
 8004290:	40022400 	.word	0x40022400
 8004294:	40013c00 	.word	0x40013c00

08004298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	807b      	strh	r3, [r7, #2]
 80042a4:	4613      	mov	r3, r2
 80042a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042a8:	787b      	ldrb	r3, [r7, #1]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042b4:	e003      	b.n	80042be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	041a      	lsls	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	619a      	str	r2, [r3, #24]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0d2      	b.n	8004484 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fd f930 	bl	8001558 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69d9      	ldr	r1, [r3, #28]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b60      	ldr	r3, [pc, #384]	@ (800448c <HAL_I2S_Init+0x1c0>)
 800430c:	400b      	ands	r3, r1
 800430e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2202      	movs	r2, #2
 8004316:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d067      	beq.n	80043f0 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004328:	2310      	movs	r3, #16
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e001      	b.n	8004332 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800432e:	2320      	movs	r3, #32
 8004330:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b20      	cmp	r3, #32
 8004338:	d802      	bhi.n	8004340 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d102      	bne.n	800434e <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8004348:	4b51      	ldr	r3, [pc, #324]	@ (8004490 <HAL_I2S_Init+0x1c4>)
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e003      	b.n	8004356 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8a2 	bl	8004498 <I2S_GetClockFreq>
 8004354:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800435e:	d125      	bne.n	80043ac <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d010      	beq.n	800438a <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	461a      	mov	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	3305      	adds	r3, #5
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e01f      	b.n	80043ca <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	fbb2 f2f3 	udiv	r2, r2, r3
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	3305      	adds	r3, #5
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	e00e      	b.n	80043ca <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	3305      	adds	r3, #5
 80043c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4a31      	ldr	r2, [pc, #196]	@ (8004494 <HAL_I2S_Init+0x1c8>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	08db      	lsrs	r3, r3, #3
 80043d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e003      	b.n	80043f8 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80043f0:	2302      	movs	r3, #2
 80043f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d902      	bls.n	8004404 <HAL_I2S_Init+0x138>
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2bff      	cmp	r3, #255	@ 0xff
 8004402:	d907      	bls.n	8004414 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004408:	f043 0210 	orr.w	r2, r3, #16
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e037      	b.n	8004484 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	ea42 0103 	orr.w	r1, r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	430a      	orrs	r2, r1
 8004426:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	4b17      	ldr	r3, [pc, #92]	@ (800448c <HAL_I2S_Init+0x1c0>)
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6851      	ldr	r1, [r2, #4]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68d2      	ldr	r2, [r2, #12]
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6992      	ldr	r2, [r2, #24]
 8004446:	430a      	orrs	r2, r1
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004452:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b30      	cmp	r3, #48	@ 0x30
 800445a:	d003      	beq.n	8004464 <HAL_I2S_Init+0x198>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2bb0      	cmp	r3, #176	@ 0xb0
 8004462:	d107      	bne.n	8004474 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004472:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	fffff040 	.word	0xfffff040
 8004490:	00bb8000 	.word	0x00bb8000
 8004494:	cccccccd 	.word	0xcccccccd

08004498 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d02d      	beq.n	8004504 <I2S_GetClockFreq+0x6c>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d12e      	bne.n	800450a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80044ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004520 <I2S_GetClockFreq+0x88>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d108      	bne.n	80044ca <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044b8:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <I2S_GetClockFreq+0x88>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044c0:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <I2S_GetClockFreq+0x8c>)
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e007      	b.n	80044da <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80044ca:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <I2S_GetClockFreq+0x88>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d2:	4a15      	ldr	r2, [pc, #84]	@ (8004528 <I2S_GetClockFreq+0x90>)
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80044da:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <I2S_GetClockFreq+0x88>)
 80044dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e0:	0f1b      	lsrs	r3, r3, #28
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80044e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <I2S_GetClockFreq+0x88>)
 80044ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	fb03 f202 	mul.w	r2, r3, r2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	613b      	str	r3, [r7, #16]

      break;
 8004502:	e005      	b.n	8004510 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8004504:	4b09      	ldr	r3, [pc, #36]	@ (800452c <I2S_GetClockFreq+0x94>)
 8004506:	613b      	str	r3, [r7, #16]
      break;
 8004508:	e002      	b.n	8004510 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
      break;
 800450e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8004510:	693b      	ldr	r3, [r7, #16]
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	00f42400 	.word	0x00f42400
 8004528:	007a1200 	.word	0x007a1200
 800452c:	00bb8000 	.word	0x00bb8000

08004530 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e108      	b.n	8004754 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fd fc69 	bl	8001e34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2203      	movs	r2, #3
 8004566:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004570:	d102      	bne.n	8004578 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f002 fe69 	bl	8007254 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7c1a      	ldrb	r2, [r3, #16]
 800458a:	f88d 2000 	strb.w	r2, [sp]
 800458e:	3304      	adds	r3, #4
 8004590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004592:	f002 fe05 	bl	80071a0 <USB_CoreInit>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0d5      	b.n	8004754 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2100      	movs	r1, #0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f002 fe61 	bl	8007276 <USB_SetCurrentMode>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0c6      	b.n	8004754 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	e04a      	b.n	8004662 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045cc:	7bfa      	ldrb	r2, [r7, #15]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	3315      	adds	r3, #21
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045e0:	7bfa      	ldrb	r2, [r7, #15]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	3314      	adds	r3, #20
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045f4:	7bfa      	ldrb	r2, [r7, #15]
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	b298      	uxth	r0, r3
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	332e      	adds	r3, #46	@ 0x2e
 8004608:	4602      	mov	r2, r0
 800460a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800460c:	7bfa      	ldrb	r2, [r7, #15]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3318      	adds	r3, #24
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	331c      	adds	r3, #28
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	3320      	adds	r3, #32
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	3324      	adds	r3, #36	@ 0x24
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	3301      	adds	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	791b      	ldrb	r3, [r3, #4]
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	429a      	cmp	r2, r3
 800466a:	d3af      	bcc.n	80045cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466c:	2300      	movs	r3, #0
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e044      	b.n	80046fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004672:	7bfa      	ldrb	r2, [r7, #15]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800469e:	7bfa      	ldrb	r2, [r7, #15]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046e0:	7bfa      	ldrb	r2, [r7, #15]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	3301      	adds	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	791b      	ldrb	r3, [r3, #4]
 8004700:	7bfa      	ldrb	r2, [r7, #15]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3b5      	bcc.n	8004672 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7c1a      	ldrb	r2, [r3, #16]
 800470e:	f88d 2000 	strb.w	r2, [sp]
 8004712:	3304      	adds	r3, #4
 8004714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004716:	f002 fdfb 	bl	8007310 <USB_DevInit>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e013      	b.n	8004754 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7b1b      	ldrb	r3, [r3, #12]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f80a 	bl	800475c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f002 ffb6 	bl	80076be <USB_DevDisconnect>

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800478a:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800478c:	4313      	orrs	r3, r2
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	10000003 	.word	0x10000003

080047a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a04      	ldr	r2, [pc, #16]	@ (80047c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047b2:	6013      	str	r3, [r2, #0]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40007000 	.word	0x40007000

080047c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	4b23      	ldr	r3, [pc, #140]	@ (800485c <HAL_PWREx_EnableOverDrive+0x98>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	4a22      	ldr	r2, [pc, #136]	@ (800485c <HAL_PWREx_EnableOverDrive+0x98>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047da:	4b20      	ldr	r3, [pc, #128]	@ (800485c <HAL_PWREx_EnableOverDrive+0x98>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004860 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004860 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047f2:	f7fd fd9b 	bl	800232c <HAL_GetTick>
 80047f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047f8:	e009      	b.n	800480e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047fa:	f7fd fd97 	bl	800232c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004808:	d901      	bls.n	800480e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e022      	b.n	8004854 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800480e:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800481a:	d1ee      	bne.n	80047fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800481c:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <HAL_PWREx_EnableOverDrive+0x9c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0f      	ldr	r2, [pc, #60]	@ (8004860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004826:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004828:	f7fd fd80 	bl	800232c <HAL_GetTick>
 800482c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800482e:	e009      	b.n	8004844 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004830:	f7fd fd7c 	bl	800232c <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800483e:	d901      	bls.n	8004844 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e007      	b.n	8004854 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004844:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004850:	d1ee      	bne.n	8004830 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000

08004864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e29b      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8087 	beq.w	8004996 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004888:	4b96      	ldr	r3, [pc, #600]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b04      	cmp	r3, #4
 8004892:	d00c      	beq.n	80048ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004894:	4b93      	ldr	r3, [pc, #588]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d112      	bne.n	80048c6 <HAL_RCC_OscConfig+0x62>
 80048a0:	4b90      	ldr	r3, [pc, #576]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ac:	d10b      	bne.n	80048c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ae:	4b8d      	ldr	r3, [pc, #564]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d06c      	beq.n	8004994 <HAL_RCC_OscConfig+0x130>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d168      	bne.n	8004994 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e275      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ce:	d106      	bne.n	80048de <HAL_RCC_OscConfig+0x7a>
 80048d0:	4b84      	ldr	r3, [pc, #528]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a83      	ldr	r2, [pc, #524]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e02e      	b.n	800493c <HAL_RCC_OscConfig+0xd8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x9c>
 80048e6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7e      	ldr	r2, [pc, #504]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7b      	ldr	r2, [pc, #492]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xd8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0xc0>
 800490a:	4b76      	ldr	r3, [pc, #472]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a75      	ldr	r2, [pc, #468]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b73      	ldr	r3, [pc, #460]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a72      	ldr	r2, [pc, #456]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xd8>
 8004924:	4b6f      	ldr	r3, [pc, #444]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6e      	ldr	r2, [pc, #440]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b6c      	ldr	r3, [pc, #432]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd fcf2 	bl	800232c <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494c:	f7fd fcee 	bl	800232c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	@ 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e229      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b61      	ldr	r3, [pc, #388]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xe8>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd fcde 	bl	800232c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd fcda 	bl	800232c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e215      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	4b57      	ldr	r3, [pc, #348]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x110>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d069      	beq.n	8004a76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049a2:	4b50      	ldr	r3, [pc, #320]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x190>
 80049ba:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	4b47      	ldr	r3, [pc, #284]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_RCC_OscConfig+0x17a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e1e9      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049de:	4b41      	ldr	r3, [pc, #260]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	493d      	ldr	r1, [pc, #244]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f2:	e040      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d023      	beq.n	8004a44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b39      	ldr	r3, [pc, #228]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a38      	ldr	r2, [pc, #224]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fd fc90 	bl	800232c <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a10:	f7fd fc8c 	bl	800232c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e1c7      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a22:	4b30      	ldr	r3, [pc, #192]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4929      	ldr	r1, [pc, #164]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
 8004a42:	e018      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a44:	4b27      	ldr	r3, [pc, #156]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a26      	ldr	r2, [pc, #152]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fc6c 	bl	800232c <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fd fc68 	bl	800232c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e1a3      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d038      	beq.n	8004af4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d019      	beq.n	8004abe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8a:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7fd fc49 	bl	800232c <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9e:	f7fd fc45 	bl	800232c <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e180      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x23a>
 8004abc:	e01a      	b.n	8004af4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004abe:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac2:	4a08      	ldr	r2, [pc, #32]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aca:	f7fd fc2f 	bl	800232c <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad2:	f7fd fc2b 	bl	800232c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d903      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e166      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
 8004ae4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae8:	4b92      	ldr	r3, [pc, #584]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ee      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80a4 	beq.w	8004c4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b02:	4b8c      	ldr	r3, [pc, #560]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10d      	bne.n	8004b2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	4b89      	ldr	r3, [pc, #548]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	4a88      	ldr	r2, [pc, #544]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b1a:	4b86      	ldr	r3, [pc, #536]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b2a:	4b83      	ldr	r3, [pc, #524]	@ (8004d38 <HAL_RCC_OscConfig+0x4d4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d118      	bne.n	8004b68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b36:	4b80      	ldr	r3, [pc, #512]	@ (8004d38 <HAL_RCC_OscConfig+0x4d4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7f      	ldr	r2, [pc, #508]	@ (8004d38 <HAL_RCC_OscConfig+0x4d4>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b42:	f7fd fbf3 	bl	800232c <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4a:	f7fd fbef 	bl	800232c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b64      	cmp	r3, #100	@ 0x64
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e12a      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5c:	4b76      	ldr	r3, [pc, #472]	@ (8004d38 <HAL_RCC_OscConfig+0x4d4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCC_OscConfig+0x31a>
 8004b70:	4b70      	ldr	r3, [pc, #448]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b74:	4a6f      	ldr	r2, [pc, #444]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b7c:	e02d      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x33c>
 8004b86:	4b6b      	ldr	r3, [pc, #428]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8a:	4a6a      	ldr	r2, [pc, #424]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b92:	4b68      	ldr	r3, [pc, #416]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b96:	4a67      	ldr	r2, [pc, #412]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b98:	f023 0304 	bic.w	r3, r3, #4
 8004b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b9e:	e01c      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x35e>
 8004ba8:	4b62      	ldr	r3, [pc, #392]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bac:	4a61      	ldr	r2, [pc, #388]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb8:	4a5e      	ldr	r2, [pc, #376]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc0:	e00b      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
 8004bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bce:	4b59      	ldr	r3, [pc, #356]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd2:	4a58      	ldr	r2, [pc, #352]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d015      	beq.n	8004c0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fd fba3 	bl	800232c <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	e00a      	b.n	8004c00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fd fb9f 	bl	800232c <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0d8      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c00:	4b4c      	ldr	r3, [pc, #304]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ee      	beq.n	8004bea <HAL_RCC_OscConfig+0x386>
 8004c0c:	e014      	b.n	8004c38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0e:	f7fd fb8d 	bl	800232c <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fd fb89 	bl	800232c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0c2      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2c:	4b41      	ldr	r3, [pc, #260]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ee      	bne.n	8004c16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	4a3c      	ldr	r2, [pc, #240]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80ae 	beq.w	8004db0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c54:	4b37      	ldr	r3, [pc, #220]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d06d      	beq.n	8004d3c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d14b      	bne.n	8004d00 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c68:	4b32      	ldr	r3, [pc, #200]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a31      	ldr	r2, [pc, #196]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fb5a 	bl	800232c <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fd fb56 	bl	800232c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e091      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	4b29      	ldr	r3, [pc, #164]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	491b      	ldr	r1, [pc, #108]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fd fb28 	bl	800232c <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fd fb24 	bl	800232c <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e05f      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf2:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x47c>
 8004cfe:	e057      	b.n	8004db0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d00:	4b0c      	ldr	r3, [pc, #48]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a0b      	ldr	r2, [pc, #44]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fd fb0e 	bl	800232c <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fd fb0a 	bl	800232c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e045      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d26:	4b03      	ldr	r3, [pc, #12]	@ (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4b0>
 8004d32:	e03d      	b.n	8004db0 <HAL_RCC_OscConfig+0x54c>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dbc <HAL_RCC_OscConfig+0x558>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d030      	beq.n	8004dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d129      	bne.n	8004dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d122      	bne.n	8004dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d119      	bne.n	8004dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	3b01      	subs	r3, #1
 8004d86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d10f      	bne.n	8004dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d107      	bne.n	8004dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800

08004dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0d0      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d910      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b67      	ldr	r3, [pc, #412]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 020f 	bic.w	r2, r3, #15
 8004dee:	4965      	ldr	r1, [pc, #404]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b63      	ldr	r3, [pc, #396]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0b8      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e20:	4b59      	ldr	r3, [pc, #356]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4a58      	ldr	r2, [pc, #352]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e38:	4b53      	ldr	r3, [pc, #332]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4a52      	ldr	r2, [pc, #328]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e44:	4b50      	ldr	r3, [pc, #320]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	494d      	ldr	r1, [pc, #308]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d040      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d107      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	4b47      	ldr	r3, [pc, #284]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d115      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e07f      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d107      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	4b41      	ldr	r3, [pc, #260]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e073      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e92:	4b3d      	ldr	r3, [pc, #244]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06b      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ea2:	4b39      	ldr	r3, [pc, #228]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 0203 	bic.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4936      	ldr	r1, [pc, #216]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb4:	f7fd fa3a 	bl	800232c <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7fd fa36 	bl	800232c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e053      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 020c 	and.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d1eb      	bne.n	8004ebc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d210      	bcs.n	8004f14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b24      	ldr	r3, [pc, #144]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 020f 	bic.w	r2, r3, #15
 8004efa:	4922      	ldr	r1, [pc, #136]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b20      	ldr	r3, [pc, #128]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e032      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f20:	4b19      	ldr	r3, [pc, #100]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4916      	ldr	r1, [pc, #88]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f3e:	4b12      	ldr	r3, [pc, #72]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	490e      	ldr	r1, [pc, #56]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f52:	f000 f821 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8004f56:	4602      	mov	r2, r0
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	490a      	ldr	r1, [pc, #40]	@ (8004f8c <HAL_RCC_ClockConfig+0x1cc>)
 8004f64:	5ccb      	ldrb	r3, [r1, r3]
 8004f66:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6a:	4a09      	ldr	r2, [pc, #36]	@ (8004f90 <HAL_RCC_ClockConfig+0x1d0>)
 8004f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f6e:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <HAL_RCC_ClockConfig+0x1d4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fc fd44 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40023c00 	.word	0x40023c00
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	08018640 	.word	0x08018640
 8004f90:	20000000 	.word	0x20000000
 8004f94:	20000004 	.word	0x20000004

08004f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f9c:	b094      	sub	sp, #80	@ 0x50
 8004f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa8:	2300      	movs	r3, #0
 8004faa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb0:	4b79      	ldr	r3, [pc, #484]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d00d      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	f200 80e1 	bhi.w	8005184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x34>
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d003      	beq.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fca:	e0db      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fcc:	4b73      	ldr	r3, [pc, #460]	@ (800519c <HAL_RCC_GetSysClockFreq+0x204>)
 8004fce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fd0:	e0db      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fd2:	4b73      	ldr	r3, [pc, #460]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fd6:	e0d8      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fe0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d063      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fee:	4b6a      	ldr	r3, [pc, #424]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	099b      	lsrs	r3, r3, #6
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ff8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005000:	633b      	str	r3, [r7, #48]	@ 0x30
 8005002:	2300      	movs	r3, #0
 8005004:	637b      	str	r3, [r7, #52]	@ 0x34
 8005006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800500a:	4622      	mov	r2, r4
 800500c:	462b      	mov	r3, r5
 800500e:	f04f 0000 	mov.w	r0, #0
 8005012:	f04f 0100 	mov.w	r1, #0
 8005016:	0159      	lsls	r1, r3, #5
 8005018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800501c:	0150      	lsls	r0, r2, #5
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4621      	mov	r1, r4
 8005024:	1a51      	subs	r1, r2, r1
 8005026:	6139      	str	r1, [r7, #16]
 8005028:	4629      	mov	r1, r5
 800502a:	eb63 0301 	sbc.w	r3, r3, r1
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800503c:	4659      	mov	r1, fp
 800503e:	018b      	lsls	r3, r1, #6
 8005040:	4651      	mov	r1, sl
 8005042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005046:	4651      	mov	r1, sl
 8005048:	018a      	lsls	r2, r1, #6
 800504a:	4651      	mov	r1, sl
 800504c:	ebb2 0801 	subs.w	r8, r2, r1
 8005050:	4659      	mov	r1, fp
 8005052:	eb63 0901 	sbc.w	r9, r3, r1
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800506a:	4690      	mov	r8, r2
 800506c:	4699      	mov	r9, r3
 800506e:	4623      	mov	r3, r4
 8005070:	eb18 0303 	adds.w	r3, r8, r3
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	462b      	mov	r3, r5
 8005078:	eb49 0303 	adc.w	r3, r9, r3
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800508a:	4629      	mov	r1, r5
 800508c:	024b      	lsls	r3, r1, #9
 800508e:	4621      	mov	r1, r4
 8005090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005094:	4621      	mov	r1, r4
 8005096:	024a      	lsls	r2, r1, #9
 8005098:	4610      	mov	r0, r2
 800509a:	4619      	mov	r1, r3
 800509c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800509e:	2200      	movs	r2, #0
 80050a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050a8:	f7fb f932 	bl	8000310 <__aeabi_uldivmod>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4613      	mov	r3, r2
 80050b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b4:	e058      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b6:	4b38      	ldr	r3, [pc, #224]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	099b      	lsrs	r3, r3, #6
 80050bc:	2200      	movs	r2, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	4611      	mov	r1, r2
 80050c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	2300      	movs	r3, #0
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80050cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	f04f 0000 	mov.w	r0, #0
 80050d8:	f04f 0100 	mov.w	r1, #0
 80050dc:	0159      	lsls	r1, r3, #5
 80050de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050e2:	0150      	lsls	r0, r2, #5
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4641      	mov	r1, r8
 80050ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ee:	4649      	mov	r1, r9
 80050f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005108:	ebb2 040a 	subs.w	r4, r2, sl
 800510c:	eb63 050b 	sbc.w	r5, r3, fp
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	00eb      	lsls	r3, r5, #3
 800511a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800511e:	00e2      	lsls	r2, r4, #3
 8005120:	4614      	mov	r4, r2
 8005122:	461d      	mov	r5, r3
 8005124:	4643      	mov	r3, r8
 8005126:	18e3      	adds	r3, r4, r3
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	464b      	mov	r3, r9
 800512c:	eb45 0303 	adc.w	r3, r5, r3
 8005130:	607b      	str	r3, [r7, #4]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800513e:	4629      	mov	r1, r5
 8005140:	028b      	lsls	r3, r1, #10
 8005142:	4621      	mov	r1, r4
 8005144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005148:	4621      	mov	r1, r4
 800514a:	028a      	lsls	r2, r1, #10
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005152:	2200      	movs	r2, #0
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	61fa      	str	r2, [r7, #28]
 8005158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800515c:	f7fb f8d8 	bl	8000310 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x200>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	0c1b      	lsrs	r3, r3, #16
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	3301      	adds	r3, #1
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800517a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005182:	e002      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <HAL_RCC_GetSysClockFreq+0x204>)
 8005186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800518a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800518c:	4618      	mov	r0, r3
 800518e:	3750      	adds	r7, #80	@ 0x50
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005196:	bf00      	nop
 8005198:	40023800 	.word	0x40023800
 800519c:	00f42400 	.word	0x00f42400
 80051a0:	007a1200 	.word	0x007a1200

080051a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a8:	4b03      	ldr	r3, [pc, #12]	@ (80051b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000000 	.word	0x20000000

080051bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051c0:	f7ff fff0 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	0a9b      	lsrs	r3, r3, #10
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	4903      	ldr	r1, [pc, #12]	@ (80051e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d2:	5ccb      	ldrb	r3, [r1, r3]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40023800 	.word	0x40023800
 80051e0:	08018650 	.word	0x08018650

080051e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051e8:	f7ff ffdc 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	0b5b      	lsrs	r3, r3, #13
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	4903      	ldr	r1, [pc, #12]	@ (8005208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40023800 	.word	0x40023800
 8005208:	08018650 	.word	0x08018650

0800520c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	220f      	movs	r2, #15
 800521a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800521c:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <HAL_RCC_GetClockConfig+0x5c>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0203 	and.w	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005228:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <HAL_RCC_GetClockConfig+0x5c>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005234:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <HAL_RCC_GetClockConfig+0x5c>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005240:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <HAL_RCC_GetClockConfig+0x5c>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	08db      	lsrs	r3, r3, #3
 8005246:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800524e:	4b07      	ldr	r3, [pc, #28]	@ (800526c <HAL_RCC_GetClockConfig+0x60>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 020f 	and.w	r2, r3, #15
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	601a      	str	r2, [r3, #0]
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40023c00 	.word	0x40023c00

08005270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d012      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005298:	4b69      	ldr	r3, [pc, #420]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	4a68      	ldr	r2, [pc, #416]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80052a2:	6093      	str	r3, [r2, #8]
 80052a4:	4b66      	ldr	r3, [pc, #408]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ac:	4964      	ldr	r1, [pc, #400]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	4959      	ldr	r1, [pc, #356]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e8:	d101      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052ea:	2301      	movs	r3, #1
 80052ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005306:	4b4e      	ldr	r3, [pc, #312]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800530c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005314:	494a      	ldr	r1, [pc, #296]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005324:	d101      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005326:	2301      	movs	r3, #1
 8005328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005332:	2301      	movs	r3, #1
 8005334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005342:	2301      	movs	r3, #1
 8005344:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 808b 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005354:	4b3a      	ldr	r3, [pc, #232]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	4a39      	ldr	r2, [pc, #228]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800535e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005360:	4b37      	ldr	r3, [pc, #220]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800536c:	4b35      	ldr	r3, [pc, #212]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a34      	ldr	r2, [pc, #208]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005378:	f7fc ffd8 	bl	800232c <HAL_GetTick>
 800537c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005380:	f7fc ffd4 	bl	800232c <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	@ 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e38f      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005392:	4b2c      	ldr	r3, [pc, #176]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800539e:	4b28      	ldr	r3, [pc, #160]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d035      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d02e      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053bc:	4b20      	ldr	r3, [pc, #128]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80053de:	4a18      	ldr	r2, [pc, #96]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053e4:	4b16      	ldr	r3, [pc, #88]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d114      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fc ff9c 	bl	800232c <HAL_GetTick>
 80053f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f6:	e00a      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053f8:	f7fc ff98 	bl	800232c <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e351      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540e:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0ee      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005426:	d111      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005428:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005434:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005436:	400b      	ands	r3, r1
 8005438:	4901      	ldr	r1, [pc, #4]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
 800543e:	e00b      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005440:	40023800 	.word	0x40023800
 8005444:	40007000 	.word	0x40007000
 8005448:	0ffffcff 	.word	0x0ffffcff
 800544c:	4bac      	ldr	r3, [pc, #688]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4aab      	ldr	r2, [pc, #684]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005452:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005456:	6093      	str	r3, [r2, #8]
 8005458:	4ba9      	ldr	r3, [pc, #676]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005464:	49a6      	ldr	r1, [pc, #664]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005466:	4313      	orrs	r3, r2
 8005468:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b00      	cmp	r3, #0
 8005474:	d010      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005476:	4ba2      	ldr	r3, [pc, #648]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800547c:	4aa0      	ldr	r2, [pc, #640]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005482:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005486:	4b9e      	ldr	r3, [pc, #632]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005488:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	499b      	ldr	r1, [pc, #620]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a4:	4b96      	ldr	r3, [pc, #600]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054b2:	4993      	ldr	r1, [pc, #588]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d4:	498a      	ldr	r1, [pc, #552]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054e8:	4b85      	ldr	r3, [pc, #532]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f6:	4982      	ldr	r1, [pc, #520]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800550a:	4b7d      	ldr	r3, [pc, #500]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005510:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005518:	4979      	ldr	r1, [pc, #484]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800552c:	4b74      	ldr	r3, [pc, #464]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005532:	f023 0203 	bic.w	r2, r3, #3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	4971      	ldr	r1, [pc, #452]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800554e:	4b6c      	ldr	r3, [pc, #432]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005554:	f023 020c 	bic.w	r2, r3, #12
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555c:	4968      	ldr	r1, [pc, #416]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005570:	4b63      	ldr	r3, [pc, #396]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005576:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557e:	4960      	ldr	r1, [pc, #384]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005592:	4b5b      	ldr	r3, [pc, #364]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005598:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a0:	4957      	ldr	r1, [pc, #348]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055b4:	4b52      	ldr	r3, [pc, #328]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c2:	494f      	ldr	r1, [pc, #316]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80055d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e4:	4946      	ldr	r1, [pc, #280]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055f8:	4b41      	ldr	r3, [pc, #260]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005606:	493e      	ldr	r1, [pc, #248]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800561a:	4b39      	ldr	r3, [pc, #228]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005620:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005628:	4935      	ldr	r1, [pc, #212]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800563c:	4b30      	ldr	r3, [pc, #192]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005642:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800564a:	492d      	ldr	r1, [pc, #180]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d011      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800565e:	4b28      	ldr	r3, [pc, #160]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005664:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800566c:	4924      	ldr	r1, [pc, #144]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800567c:	d101      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800567e:	2301      	movs	r3, #1
 8005680:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800568e:	2301      	movs	r3, #1
 8005690:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800569e:	4b18      	ldr	r3, [pc, #96]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ac:	4914      	ldr	r1, [pc, #80]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056d0:	490b      	ldr	r1, [pc, #44]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00f      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80056e4:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f4:	4902      	ldr	r1, [pc, #8]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056fc:	e002      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005710:	4b8a      	ldr	r3, [pc, #552]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005716:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005720:	4986      	ldr	r1, [pc, #536]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005734:	4b81      	ldr	r3, [pc, #516]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800573a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005744:	497d      	ldr	r1, [pc, #500]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d006      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80d6 	beq.w	800590c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005760:	4b76      	ldr	r3, [pc, #472]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a75      	ldr	r2, [pc, #468]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005766:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800576a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576c:	f7fc fdde 	bl	800232c <HAL_GetTick>
 8005770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005774:	f7fc fdda 	bl	800232c <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	@ 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e195      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005786:	4b6d      	ldr	r3, [pc, #436]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d021      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d11d      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057a6:	4b65      	ldr	r3, [pc, #404]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057b4:	4b61      	ldr	r3, [pc, #388]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ba:	0e1b      	lsrs	r3, r3, #24
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	019a      	lsls	r2, r3, #6
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	061b      	lsls	r3, r3, #24
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	071b      	lsls	r3, r3, #28
 80057da:	4958      	ldr	r1, [pc, #352]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f6:	d00a      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005800:	2b00      	cmp	r3, #0
 8005802:	d02e      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580c:	d129      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800580e:	4b4b      	ldr	r3, [pc, #300]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005814:	0c1b      	lsrs	r3, r3, #16
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800581c:	4b47      	ldr	r3, [pc, #284]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005822:	0f1b      	lsrs	r3, r3, #28
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	019a      	lsls	r2, r3, #6
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	061b      	lsls	r3, r3, #24
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	071b      	lsls	r3, r3, #28
 8005842:	493e      	ldr	r1, [pc, #248]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800584a:	4b3c      	ldr	r3, [pc, #240]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005850:	f023 021f 	bic.w	r2, r3, #31
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	3b01      	subs	r3, #1
 800585a:	4938      	ldr	r1, [pc, #224]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01d      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800586e:	4b33      	ldr	r3, [pc, #204]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005874:	0e1b      	lsrs	r3, r3, #24
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800587c:	4b2f      	ldr	r3, [pc, #188]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800587e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005882:	0f1b      	lsrs	r3, r3, #28
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	019a      	lsls	r2, r3, #6
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	431a      	orrs	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	061b      	lsls	r3, r3, #24
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	071b      	lsls	r3, r3, #28
 80058a2:	4926      	ldr	r1, [pc, #152]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d011      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	019a      	lsls	r2, r3, #6
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	041b      	lsls	r3, r3, #16
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	061b      	lsls	r3, r3, #24
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	071b      	lsls	r3, r3, #28
 80058d2:	491a      	ldr	r1, [pc, #104]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058da:	4b18      	ldr	r3, [pc, #96]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e6:	f7fc fd21 	bl	800232c <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058ec:	e008      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ee:	f7fc fd1d 	bl	800232c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b64      	cmp	r3, #100	@ 0x64
 80058fa:	d901      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e0d8      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005900:	4b0e      	ldr	r3, [pc, #56]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f0      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b01      	cmp	r3, #1
 8005910:	f040 80ce 	bne.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005914:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a08      	ldr	r2, [pc, #32]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800591e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005920:	f7fc fd04 	bl	800232c <HAL_GetTick>
 8005924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005926:	e00b      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005928:	f7fc fd00 	bl	800232c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b64      	cmp	r3, #100	@ 0x64
 8005934:	d904      	bls.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e0bb      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005940:	4b5e      	ldr	r3, [pc, #376]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800594c:	d0ec      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800596a:	2b00      	cmp	r3, #0
 800596c:	d02e      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d12a      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005976:	4b51      	ldr	r3, [pc, #324]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597c:	0c1b      	lsrs	r3, r3, #16
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005984:	4b4d      	ldr	r3, [pc, #308]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	0f1b      	lsrs	r3, r3, #28
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	019a      	lsls	r2, r3, #6
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	041b      	lsls	r3, r3, #16
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	061b      	lsls	r3, r3, #24
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	071b      	lsls	r3, r3, #28
 80059aa:	4944      	ldr	r1, [pc, #272]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059b2:	4b42      	ldr	r3, [pc, #264]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	3b01      	subs	r3, #1
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	493d      	ldr	r1, [pc, #244]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d022      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059e0:	d11d      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059e2:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e8:	0e1b      	lsrs	r3, r3, #24
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059f0:	4b32      	ldr	r3, [pc, #200]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f6:	0f1b      	lsrs	r3, r3, #28
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	019a      	lsls	r2, r3, #6
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	071b      	lsls	r3, r3, #28
 8005a16:	4929      	ldr	r1, [pc, #164]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d028      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a2a:	4b24      	ldr	r3, [pc, #144]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a30:	0e1b      	lsrs	r3, r3, #24
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a38:	4b20      	ldr	r3, [pc, #128]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	019a      	lsls	r2, r3, #6
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	041b      	lsls	r3, r3, #16
 8005a50:	431a      	orrs	r2, r3
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	061b      	lsls	r3, r3, #24
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	071b      	lsls	r3, r3, #28
 8005a5e:	4917      	ldr	r1, [pc, #92]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a66:	4b15      	ldr	r3, [pc, #84]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	4911      	ldr	r1, [pc, #68]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a0e      	ldr	r2, [pc, #56]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a88:	f7fc fc50 	bl	800232c <HAL_GetTick>
 8005a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a90:	f7fc fc4c 	bl	800232c <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	@ 0x64
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e007      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aa2:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aae:	d1ef      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40023800 	.word	0x40023800

08005ac0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e01c      	b.n	8005b0c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	795b      	ldrb	r3, [r3, #5]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fb feae 	bl	8001844 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0204 	orr.w	r2, r2, #4
 8005afc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e09d      	b.n	8005c62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d108      	bne.n	8005b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b36:	d009      	beq.n	8005b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	61da      	str	r2, [r3, #28]
 8005b3e:	e005      	b.n	8005b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fb fede 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b8c:	d902      	bls.n	8005b94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e002      	b.n	8005b9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ba2:	d007      	beq.n	8005bb4 <HAL_SPI_Init+0xa0>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bac:	d002      	beq.n	8005bb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf6:	ea42 0103 	orr.w	r1, r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	0c1b      	lsrs	r3, r3, #16
 8005c10:	f003 0204 	and.w	r2, r3, #4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c30:	ea42 0103 	orr.w	r1, r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b088      	sub	sp, #32
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c7a:	f7fc fb57 	bl	800232c <HAL_GetTick>
 8005c7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d001      	beq.n	8005c94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e15c      	b.n	8005f4e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_SPI_Transmit+0x36>
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e154      	b.n	8005f4e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_SPI_Transmit+0x48>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e14d      	b.n	8005f4e <HAL_SPI_Transmit+0x2e4>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	88fa      	ldrh	r2, [r7, #6]
 8005cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d04:	d10f      	bne.n	8005d26 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d007      	beq.n	8005d44 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d4c:	d952      	bls.n	8005df4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_SPI_Transmit+0xf2>
 8005d56:	8b7b      	ldrh	r3, [r7, #26]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d145      	bne.n	8005de8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d60:	881a      	ldrh	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6c:	1c9a      	adds	r2, r3, #2
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d80:	e032      	b.n	8005de8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d112      	bne.n	8005db6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	1c9a      	adds	r2, r3, #2
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005db4:	e018      	b.n	8005de8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db6:	f7fc fab9 	bl	800232c <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d803      	bhi.n	8005dce <HAL_SPI_Transmit+0x164>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d102      	bne.n	8005dd4 <HAL_SPI_Transmit+0x16a>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e0b2      	b.n	8005f4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1c7      	bne.n	8005d82 <HAL_SPI_Transmit+0x118>
 8005df2:	e083      	b.n	8005efc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_SPI_Transmit+0x198>
 8005dfc:	8b7b      	ldrh	r3, [r7, #26]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d177      	bne.n	8005ef2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d912      	bls.n	8005e32 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1c:	1c9a      	adds	r2, r3, #2
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b02      	subs	r3, #2
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e30:	e05f      	b.n	8005ef2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e58:	e04b      	b.n	8005ef2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d12b      	bne.n	8005ec0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d912      	bls.n	8005e98 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e76:	881a      	ldrh	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b02      	subs	r3, #2
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e96:	e02c      	b.n	8005ef2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ebe:	e018      	b.n	8005ef2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec0:	f7fc fa34 	bl	800232c <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d803      	bhi.n	8005ed8 <HAL_SPI_Transmit+0x26e>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d102      	bne.n	8005ede <HAL_SPI_Transmit+0x274>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e02d      	b.n	8005f4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1ae      	bne.n	8005e5a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f947 	bl	8006194 <SPI_EndRxTxTransaction>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
  }
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f68:	f7fc f9e0 	bl	800232c <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	4413      	add	r3, r2
 8005f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f78:	f7fc f9d8 	bl	800232c <HAL_GetTick>
 8005f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f7e:	4b39      	ldr	r3, [pc, #228]	@ (8006064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	015b      	lsls	r3, r3, #5
 8005f84:	0d1b      	lsrs	r3, r3, #20
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f8e:	e055      	b.n	800603c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d051      	beq.n	800603c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f98:	f7fc f9c8 	bl	800232c <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d902      	bls.n	8005fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d13d      	bne.n	800602a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fc6:	d111      	bne.n	8005fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd0:	d004      	beq.n	8005fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fda:	d107      	bne.n	8005fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff4:	d10f      	bne.n	8006016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e018      	b.n	800605c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	e002      	b.n	800603c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	3b01      	subs	r3, #1
 800603a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d19a      	bne.n	8005f90 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3720      	adds	r7, #32
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000000 	.word	0x20000000

08006068 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	@ 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800607a:	f7fc f957 	bl	800232c <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	4413      	add	r3, r2
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800608a:	f7fc f94f 	bl	800232c <HAL_GetTick>
 800608e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006098:	4b3d      	ldr	r3, [pc, #244]	@ (8006190 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	00da      	lsls	r2, r3, #3
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	0d1b      	lsrs	r3, r3, #20
 80060a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060b0:	e061      	b.n	8006176 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80060b8:	d107      	bne.n	80060ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d051      	beq.n	8006176 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060d2:	f7fc f92b 	bl	800232c <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060de:	429a      	cmp	r2, r3
 80060e0:	d902      	bls.n	80060e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d13d      	bne.n	8006164 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006100:	d111      	bne.n	8006126 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800610a:	d004      	beq.n	8006116 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006114:	d107      	bne.n	8006126 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006124:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612e:	d10f      	bne.n	8006150 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800614e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e011      	b.n	8006188 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
 800616e:	e002      	b.n	8006176 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	3b01      	subs	r3, #1
 8006174:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4013      	ands	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d195      	bne.n	80060b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3728      	adds	r7, #40	@ 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20000000 	.word	0x20000000

08006194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7ff ff5b 	bl	8006068 <SPI_WaitFifoStateUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061bc:	f043 0220 	orr.w	r2, r3, #32
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e046      	b.n	8006256 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061c8:	4b25      	ldr	r3, [pc, #148]	@ (8006260 <SPI_EndRxTxTransaction+0xcc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a25      	ldr	r2, [pc, #148]	@ (8006264 <SPI_EndRxTxTransaction+0xd0>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	0d5b      	lsrs	r3, r3, #21
 80061d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e6:	d112      	bne.n	800620e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2200      	movs	r2, #0
 80061f0:	2180      	movs	r1, #128	@ 0x80
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7ff feb0 	bl	8005f58 <SPI_WaitFlagStateUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d016      	beq.n	800622c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006202:	f043 0220 	orr.w	r2, r3, #32
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e023      	b.n	8006256 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	3b01      	subs	r3, #1
 8006218:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006224:	2b80      	cmp	r3, #128	@ 0x80
 8006226:	d0f2      	beq.n	800620e <SPI_EndRxTxTransaction+0x7a>
 8006228:	e000      	b.n	800622c <SPI_EndRxTxTransaction+0x98>
        break;
 800622a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff ff15 	bl	8006068 <SPI_WaitFifoStateUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006248:	f043 0220 	orr.w	r2, r3, #32
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e000      	b.n	8006256 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000000 	.word	0x20000000
 8006264:	165e9f81 	.word	0x165e9f81

08006268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e049      	b.n	800630e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f841 	bl	8006316 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f000 f9e8 	bl	800667c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	d001      	beq.n	8006344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e054      	b.n	80063ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0201 	orr.w	r2, r2, #1
 800635a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a26      	ldr	r2, [pc, #152]	@ (80063fc <HAL_TIM_Base_Start_IT+0xd0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d022      	beq.n	80063ac <HAL_TIM_Base_Start_IT+0x80>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800636e:	d01d      	beq.n	80063ac <HAL_TIM_Base_Start_IT+0x80>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a22      	ldr	r2, [pc, #136]	@ (8006400 <HAL_TIM_Base_Start_IT+0xd4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d018      	beq.n	80063ac <HAL_TIM_Base_Start_IT+0x80>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a21      	ldr	r2, [pc, #132]	@ (8006404 <HAL_TIM_Base_Start_IT+0xd8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <HAL_TIM_Base_Start_IT+0x80>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1f      	ldr	r2, [pc, #124]	@ (8006408 <HAL_TIM_Base_Start_IT+0xdc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00e      	beq.n	80063ac <HAL_TIM_Base_Start_IT+0x80>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1e      	ldr	r2, [pc, #120]	@ (800640c <HAL_TIM_Base_Start_IT+0xe0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d009      	beq.n	80063ac <HAL_TIM_Base_Start_IT+0x80>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1c      	ldr	r2, [pc, #112]	@ (8006410 <HAL_TIM_Base_Start_IT+0xe4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_TIM_Base_Start_IT+0x80>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006414 <HAL_TIM_Base_Start_IT+0xe8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d115      	bne.n	80063d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	4b19      	ldr	r3, [pc, #100]	@ (8006418 <HAL_TIM_Base_Start_IT+0xec>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b06      	cmp	r3, #6
 80063bc:	d015      	beq.n	80063ea <HAL_TIM_Base_Start_IT+0xbe>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c4:	d011      	beq.n	80063ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0201 	orr.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d6:	e008      	b.n	80063ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e000      	b.n	80063ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40010400 	.word	0x40010400
 8006410:	40014000 	.word	0x40014000
 8006414:	40001800 	.word	0x40001800
 8006418:	00010007 	.word	0x00010007

0800641c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d020      	beq.n	8006480 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01b      	beq.n	8006480 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0202 	mvn.w	r2, #2
 8006450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f8e9 	bl	800663e <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8db 	bl	800662a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8ec 	bl	8006652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d020      	beq.n	80064cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0204 	mvn.w	r2, #4
 800649c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f8c3 	bl	800663e <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f8b5 	bl	800662a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8c6 	bl	8006652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d020      	beq.n	8006518 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01b      	beq.n	8006518 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0208 	mvn.w	r2, #8
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2204      	movs	r2, #4
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f89d 	bl	800663e <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f88f 	bl	800662a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8a0 	bl	8006652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b00      	cmp	r3, #0
 8006520:	d020      	beq.n	8006564 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01b      	beq.n	8006564 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0210 	mvn.w	r2, #16
 8006534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2208      	movs	r2, #8
 800653a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f877 	bl	800663e <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f869 	bl	800662a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f87a 	bl	8006652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0201 	mvn.w	r2, #1
 8006580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb f932 	bl	80017ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f913 	bl	80067dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f90b 	bl	80067f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00c      	beq.n	80065fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f834 	bl	8006666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f06f 0220 	mvn.w	r2, #32
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f8d3 	bl	80067c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a43      	ldr	r2, [pc, #268]	@ (800679c <TIM_Base_SetConfig+0x120>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d013      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800669a:	d00f      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a40      	ldr	r2, [pc, #256]	@ (80067a0 <TIM_Base_SetConfig+0x124>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00b      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a3f      	ldr	r2, [pc, #252]	@ (80067a4 <TIM_Base_SetConfig+0x128>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a3e      	ldr	r2, [pc, #248]	@ (80067a8 <TIM_Base_SetConfig+0x12c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3d      	ldr	r2, [pc, #244]	@ (80067ac <TIM_Base_SetConfig+0x130>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d108      	bne.n	80066ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a32      	ldr	r2, [pc, #200]	@ (800679c <TIM_Base_SetConfig+0x120>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d02b      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066dc:	d027      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2f      	ldr	r2, [pc, #188]	@ (80067a0 <TIM_Base_SetConfig+0x124>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d023      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2e      	ldr	r2, [pc, #184]	@ (80067a4 <TIM_Base_SetConfig+0x128>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d01f      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2d      	ldr	r2, [pc, #180]	@ (80067a8 <TIM_Base_SetConfig+0x12c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01b      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2c      	ldr	r2, [pc, #176]	@ (80067ac <TIM_Base_SetConfig+0x130>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d017      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a2b      	ldr	r2, [pc, #172]	@ (80067b0 <TIM_Base_SetConfig+0x134>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d013      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2a      	ldr	r2, [pc, #168]	@ (80067b4 <TIM_Base_SetConfig+0x138>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00f      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a29      	ldr	r2, [pc, #164]	@ (80067b8 <TIM_Base_SetConfig+0x13c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00b      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a28      	ldr	r2, [pc, #160]	@ (80067bc <TIM_Base_SetConfig+0x140>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d007      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a27      	ldr	r2, [pc, #156]	@ (80067c0 <TIM_Base_SetConfig+0x144>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a26      	ldr	r2, [pc, #152]	@ (80067c4 <TIM_Base_SetConfig+0x148>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d108      	bne.n	8006740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a0e      	ldr	r2, [pc, #56]	@ (800679c <TIM_Base_SetConfig+0x120>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_Base_SetConfig+0xf2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a10      	ldr	r2, [pc, #64]	@ (80067ac <TIM_Base_SetConfig+0x130>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d103      	bne.n	8006776 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f043 0204 	orr.w	r2, r3, #4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	601a      	str	r2, [r3, #0]
}
 800678e:	bf00      	nop
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40010000 	.word	0x40010000
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800
 80067a8:	40000c00 	.word	0x40000c00
 80067ac:	40010400 	.word	0x40010400
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800
 80067bc:	40001800 	.word	0x40001800
 80067c0:	40001c00 	.word	0x40001c00
 80067c4:	40002000 	.word	0x40002000

080067c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e040      	b.n	8006898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb fa76 	bl	8001d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2224      	movs	r2, #36	@ 0x24
 8006830:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa8c 	bl	8006d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f825 	bl	80068a0 <UART_SetConfig>
 8006856:	4603      	mov	r3, r0
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e01b      	b.n	8006898 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800686e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800687e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fb0b 	bl	8006eac <UART_CheckIdleState>
 8006896:	4603      	mov	r3, r0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4ba6      	ldr	r3, [pc, #664]	@ (8006b64 <UART_SetConfig+0x2c4>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	6979      	ldr	r1, [r7, #20]
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	430a      	orrs	r2, r1
 8006910:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a94      	ldr	r2, [pc, #592]	@ (8006b68 <UART_SetConfig+0x2c8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d120      	bne.n	800695e <UART_SetConfig+0xbe>
 800691c:	4b93      	ldr	r3, [pc, #588]	@ (8006b6c <UART_SetConfig+0x2cc>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b03      	cmp	r3, #3
 8006928:	d816      	bhi.n	8006958 <UART_SetConfig+0xb8>
 800692a:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <UART_SetConfig+0x90>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006941 	.word	0x08006941
 8006934:	0800694d 	.word	0x0800694d
 8006938:	08006947 	.word	0x08006947
 800693c:	08006953 	.word	0x08006953
 8006940:	2301      	movs	r3, #1
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e150      	b.n	8006be8 <UART_SetConfig+0x348>
 8006946:	2302      	movs	r3, #2
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e14d      	b.n	8006be8 <UART_SetConfig+0x348>
 800694c:	2304      	movs	r3, #4
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e14a      	b.n	8006be8 <UART_SetConfig+0x348>
 8006952:	2308      	movs	r3, #8
 8006954:	77fb      	strb	r3, [r7, #31]
 8006956:	e147      	b.n	8006be8 <UART_SetConfig+0x348>
 8006958:	2310      	movs	r3, #16
 800695a:	77fb      	strb	r3, [r7, #31]
 800695c:	e144      	b.n	8006be8 <UART_SetConfig+0x348>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a83      	ldr	r2, [pc, #524]	@ (8006b70 <UART_SetConfig+0x2d0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d132      	bne.n	80069ce <UART_SetConfig+0x12e>
 8006968:	4b80      	ldr	r3, [pc, #512]	@ (8006b6c <UART_SetConfig+0x2cc>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696e:	f003 030c 	and.w	r3, r3, #12
 8006972:	2b0c      	cmp	r3, #12
 8006974:	d828      	bhi.n	80069c8 <UART_SetConfig+0x128>
 8006976:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <UART_SetConfig+0xdc>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069b1 	.word	0x080069b1
 8006980:	080069c9 	.word	0x080069c9
 8006984:	080069c9 	.word	0x080069c9
 8006988:	080069c9 	.word	0x080069c9
 800698c:	080069bd 	.word	0x080069bd
 8006990:	080069c9 	.word	0x080069c9
 8006994:	080069c9 	.word	0x080069c9
 8006998:	080069c9 	.word	0x080069c9
 800699c:	080069b7 	.word	0x080069b7
 80069a0:	080069c9 	.word	0x080069c9
 80069a4:	080069c9 	.word	0x080069c9
 80069a8:	080069c9 	.word	0x080069c9
 80069ac:	080069c3 	.word	0x080069c3
 80069b0:	2300      	movs	r3, #0
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e118      	b.n	8006be8 <UART_SetConfig+0x348>
 80069b6:	2302      	movs	r3, #2
 80069b8:	77fb      	strb	r3, [r7, #31]
 80069ba:	e115      	b.n	8006be8 <UART_SetConfig+0x348>
 80069bc:	2304      	movs	r3, #4
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e112      	b.n	8006be8 <UART_SetConfig+0x348>
 80069c2:	2308      	movs	r3, #8
 80069c4:	77fb      	strb	r3, [r7, #31]
 80069c6:	e10f      	b.n	8006be8 <UART_SetConfig+0x348>
 80069c8:	2310      	movs	r3, #16
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e10c      	b.n	8006be8 <UART_SetConfig+0x348>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a68      	ldr	r2, [pc, #416]	@ (8006b74 <UART_SetConfig+0x2d4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d120      	bne.n	8006a1a <UART_SetConfig+0x17a>
 80069d8:	4b64      	ldr	r3, [pc, #400]	@ (8006b6c <UART_SetConfig+0x2cc>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069e2:	2b30      	cmp	r3, #48	@ 0x30
 80069e4:	d013      	beq.n	8006a0e <UART_SetConfig+0x16e>
 80069e6:	2b30      	cmp	r3, #48	@ 0x30
 80069e8:	d814      	bhi.n	8006a14 <UART_SetConfig+0x174>
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d009      	beq.n	8006a02 <UART_SetConfig+0x162>
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	d810      	bhi.n	8006a14 <UART_SetConfig+0x174>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <UART_SetConfig+0x15c>
 80069f6:	2b10      	cmp	r3, #16
 80069f8:	d006      	beq.n	8006a08 <UART_SetConfig+0x168>
 80069fa:	e00b      	b.n	8006a14 <UART_SetConfig+0x174>
 80069fc:	2300      	movs	r3, #0
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e0f2      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a02:	2302      	movs	r3, #2
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e0ef      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e0ec      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a0e:	2308      	movs	r3, #8
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e0e9      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a14:	2310      	movs	r3, #16
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e0e6      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a56      	ldr	r2, [pc, #344]	@ (8006b78 <UART_SetConfig+0x2d8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d120      	bne.n	8006a66 <UART_SetConfig+0x1c6>
 8006a24:	4b51      	ldr	r3, [pc, #324]	@ (8006b6c <UART_SetConfig+0x2cc>)
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a30:	d013      	beq.n	8006a5a <UART_SetConfig+0x1ba>
 8006a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a34:	d814      	bhi.n	8006a60 <UART_SetConfig+0x1c0>
 8006a36:	2b80      	cmp	r3, #128	@ 0x80
 8006a38:	d009      	beq.n	8006a4e <UART_SetConfig+0x1ae>
 8006a3a:	2b80      	cmp	r3, #128	@ 0x80
 8006a3c:	d810      	bhi.n	8006a60 <UART_SetConfig+0x1c0>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <UART_SetConfig+0x1a8>
 8006a42:	2b40      	cmp	r3, #64	@ 0x40
 8006a44:	d006      	beq.n	8006a54 <UART_SetConfig+0x1b4>
 8006a46:	e00b      	b.n	8006a60 <UART_SetConfig+0x1c0>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e0cc      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e0c9      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a54:	2304      	movs	r3, #4
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e0c6      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a5a:	2308      	movs	r3, #8
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e0c3      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a60:	2310      	movs	r3, #16
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e0c0      	b.n	8006be8 <UART_SetConfig+0x348>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a44      	ldr	r2, [pc, #272]	@ (8006b7c <UART_SetConfig+0x2dc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d125      	bne.n	8006abc <UART_SetConfig+0x21c>
 8006a70:	4b3e      	ldr	r3, [pc, #248]	@ (8006b6c <UART_SetConfig+0x2cc>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a7e:	d017      	beq.n	8006ab0 <UART_SetConfig+0x210>
 8006a80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a84:	d817      	bhi.n	8006ab6 <UART_SetConfig+0x216>
 8006a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a8a:	d00b      	beq.n	8006aa4 <UART_SetConfig+0x204>
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a90:	d811      	bhi.n	8006ab6 <UART_SetConfig+0x216>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <UART_SetConfig+0x1fe>
 8006a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a9a:	d006      	beq.n	8006aaa <UART_SetConfig+0x20a>
 8006a9c:	e00b      	b.n	8006ab6 <UART_SetConfig+0x216>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e0a1      	b.n	8006be8 <UART_SetConfig+0x348>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e09e      	b.n	8006be8 <UART_SetConfig+0x348>
 8006aaa:	2304      	movs	r3, #4
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e09b      	b.n	8006be8 <UART_SetConfig+0x348>
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e098      	b.n	8006be8 <UART_SetConfig+0x348>
 8006ab6:	2310      	movs	r3, #16
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e095      	b.n	8006be8 <UART_SetConfig+0x348>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8006b80 <UART_SetConfig+0x2e0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d125      	bne.n	8006b12 <UART_SetConfig+0x272>
 8006ac6:	4b29      	ldr	r3, [pc, #164]	@ (8006b6c <UART_SetConfig+0x2cc>)
 8006ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006acc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ad0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ad4:	d017      	beq.n	8006b06 <UART_SetConfig+0x266>
 8006ad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ada:	d817      	bhi.n	8006b0c <UART_SetConfig+0x26c>
 8006adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ae0:	d00b      	beq.n	8006afa <UART_SetConfig+0x25a>
 8006ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ae6:	d811      	bhi.n	8006b0c <UART_SetConfig+0x26c>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <UART_SetConfig+0x254>
 8006aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006af0:	d006      	beq.n	8006b00 <UART_SetConfig+0x260>
 8006af2:	e00b      	b.n	8006b0c <UART_SetConfig+0x26c>
 8006af4:	2301      	movs	r3, #1
 8006af6:	77fb      	strb	r3, [r7, #31]
 8006af8:	e076      	b.n	8006be8 <UART_SetConfig+0x348>
 8006afa:	2302      	movs	r3, #2
 8006afc:	77fb      	strb	r3, [r7, #31]
 8006afe:	e073      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b00:	2304      	movs	r3, #4
 8006b02:	77fb      	strb	r3, [r7, #31]
 8006b04:	e070      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b06:	2308      	movs	r3, #8
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e06d      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e06a      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a1b      	ldr	r2, [pc, #108]	@ (8006b84 <UART_SetConfig+0x2e4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d138      	bne.n	8006b8e <UART_SetConfig+0x2ee>
 8006b1c:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <UART_SetConfig+0x2cc>)
 8006b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006b26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b2a:	d017      	beq.n	8006b5c <UART_SetConfig+0x2bc>
 8006b2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b30:	d82a      	bhi.n	8006b88 <UART_SetConfig+0x2e8>
 8006b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b36:	d00b      	beq.n	8006b50 <UART_SetConfig+0x2b0>
 8006b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b3c:	d824      	bhi.n	8006b88 <UART_SetConfig+0x2e8>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <UART_SetConfig+0x2aa>
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b46:	d006      	beq.n	8006b56 <UART_SetConfig+0x2b6>
 8006b48:	e01e      	b.n	8006b88 <UART_SetConfig+0x2e8>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e04b      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b50:	2302      	movs	r3, #2
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e048      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b56:	2304      	movs	r3, #4
 8006b58:	77fb      	strb	r3, [r7, #31]
 8006b5a:	e045      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	e042      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b62:	bf00      	nop
 8006b64:	efff69f3 	.word	0xefff69f3
 8006b68:	40011000 	.word	0x40011000
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40004400 	.word	0x40004400
 8006b74:	40004800 	.word	0x40004800
 8006b78:	40004c00 	.word	0x40004c00
 8006b7c:	40005000 	.word	0x40005000
 8006b80:	40011400 	.word	0x40011400
 8006b84:	40007800 	.word	0x40007800
 8006b88:	2310      	movs	r3, #16
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e02c      	b.n	8006be8 <UART_SetConfig+0x348>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a72      	ldr	r2, [pc, #456]	@ (8006d5c <UART_SetConfig+0x4bc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d125      	bne.n	8006be4 <UART_SetConfig+0x344>
 8006b98:	4b71      	ldr	r3, [pc, #452]	@ (8006d60 <UART_SetConfig+0x4c0>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006ba2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006ba6:	d017      	beq.n	8006bd8 <UART_SetConfig+0x338>
 8006ba8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006bac:	d817      	bhi.n	8006bde <UART_SetConfig+0x33e>
 8006bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb2:	d00b      	beq.n	8006bcc <UART_SetConfig+0x32c>
 8006bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb8:	d811      	bhi.n	8006bde <UART_SetConfig+0x33e>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <UART_SetConfig+0x326>
 8006bbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bc2:	d006      	beq.n	8006bd2 <UART_SetConfig+0x332>
 8006bc4:	e00b      	b.n	8006bde <UART_SetConfig+0x33e>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e00d      	b.n	8006be8 <UART_SetConfig+0x348>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e00a      	b.n	8006be8 <UART_SetConfig+0x348>
 8006bd2:	2304      	movs	r3, #4
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e007      	b.n	8006be8 <UART_SetConfig+0x348>
 8006bd8:	2308      	movs	r3, #8
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e004      	b.n	8006be8 <UART_SetConfig+0x348>
 8006bde:	2310      	movs	r3, #16
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e001      	b.n	8006be8 <UART_SetConfig+0x348>
 8006be4:	2310      	movs	r3, #16
 8006be6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bf0:	d15b      	bne.n	8006caa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006bf2:	7ffb      	ldrb	r3, [r7, #31]
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d828      	bhi.n	8006c4a <UART_SetConfig+0x3aa>
 8006bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8006c00 <UART_SetConfig+0x360>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c25 	.word	0x08006c25
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c35 	.word	0x08006c35
 8006c0c:	08006c4b 	.word	0x08006c4b
 8006c10:	08006c3b 	.word	0x08006c3b
 8006c14:	08006c4b 	.word	0x08006c4b
 8006c18:	08006c4b 	.word	0x08006c4b
 8006c1c:	08006c4b 	.word	0x08006c4b
 8006c20:	08006c43 	.word	0x08006c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c24:	f7fe faca 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8006c28:	61b8      	str	r0, [r7, #24]
        break;
 8006c2a:	e013      	b.n	8006c54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2c:	f7fe fada 	bl	80051e4 <HAL_RCC_GetPCLK2Freq>
 8006c30:	61b8      	str	r0, [r7, #24]
        break;
 8006c32:	e00f      	b.n	8006c54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c34:	4b4b      	ldr	r3, [pc, #300]	@ (8006d64 <UART_SetConfig+0x4c4>)
 8006c36:	61bb      	str	r3, [r7, #24]
        break;
 8006c38:	e00c      	b.n	8006c54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7fe f9ad 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8006c3e:	61b8      	str	r0, [r7, #24]
        break;
 8006c40:	e008      	b.n	8006c54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c46:	61bb      	str	r3, [r7, #24]
        break;
 8006c48:	e004      	b.n	8006c54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	77bb      	strb	r3, [r7, #30]
        break;
 8006c52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d074      	beq.n	8006d44 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	005a      	lsls	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b0f      	cmp	r3, #15
 8006c74:	d916      	bls.n	8006ca4 <UART_SetConfig+0x404>
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c7c:	d212      	bcs.n	8006ca4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f023 030f 	bic.w	r3, r3, #15
 8006c86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	89fb      	ldrh	r3, [r7, #14]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	89fa      	ldrh	r2, [r7, #14]
 8006ca0:	60da      	str	r2, [r3, #12]
 8006ca2:	e04f      	b.n	8006d44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	77bb      	strb	r3, [r7, #30]
 8006ca8:	e04c      	b.n	8006d44 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006caa:	7ffb      	ldrb	r3, [r7, #31]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d828      	bhi.n	8006d02 <UART_SetConfig+0x462>
 8006cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <UART_SetConfig+0x418>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ced 	.word	0x08006ced
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006d03 	.word	0x08006d03
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f7fe fa6e 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8006ce0:	61b8      	str	r0, [r7, #24]
        break;
 8006ce2:	e013      	b.n	8006d0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fe fa7e 	bl	80051e4 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	61b8      	str	r0, [r7, #24]
        break;
 8006cea:	e00f      	b.n	8006d0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b1d      	ldr	r3, [pc, #116]	@ (8006d64 <UART_SetConfig+0x4c4>)
 8006cee:	61bb      	str	r3, [r7, #24]
        break;
 8006cf0:	e00c      	b.n	8006d0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fe f951 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8006cf6:	61b8      	str	r0, [r7, #24]
        break;
 8006cf8:	e008      	b.n	8006d0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cfe:	61bb      	str	r3, [r7, #24]
        break;
 8006d00:	e004      	b.n	8006d0c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	77bb      	strb	r3, [r7, #30]
        break;
 8006d0a:	bf00      	nop
    }

    if (pclk != 0U)
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d018      	beq.n	8006d44 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	085a      	lsrs	r2, r3, #1
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	441a      	add	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b0f      	cmp	r3, #15
 8006d2a:	d909      	bls.n	8006d40 <UART_SetConfig+0x4a0>
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d32:	d205      	bcs.n	8006d40 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60da      	str	r2, [r3, #12]
 8006d3e:	e001      	b.n	8006d44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d50:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3720      	adds	r7, #32
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40007c00 	.word	0x40007c00
 8006d60:	40023800 	.word	0x40023800
 8006d64:	00f42400 	.word	0x00f42400

08006d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e66:	d10a      	bne.n	8006e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b098      	sub	sp, #96	@ 0x60
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ebc:	f7fb fa36 	bl	800232c <HAL_GetTick>
 8006ec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d12e      	bne.n	8006f2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f88c 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d021      	beq.n	8006f2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e062      	b.n	8006ff4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d149      	bne.n	8006fd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f44:	2200      	movs	r2, #0
 8006f46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f856 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d03c      	beq.n	8006fd0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	623b      	str	r3, [r7, #32]
   return(result);
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e6      	bne.n	8006f56 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa8:	61fa      	str	r2, [r7, #28]
 8006faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e5      	bne.n	8006f88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e011      	b.n	8006ff4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3758      	adds	r7, #88	@ 0x58
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700c:	e04f      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d04b      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007016:	f7fb f989 	bl	800232c <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	429a      	cmp	r2, r3
 8007024:	d302      	bcc.n	800702c <UART_WaitOnFlagUntilTimeout+0x30>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e04e      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d037      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b80      	cmp	r3, #128	@ 0x80
 8007042:	d034      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b40      	cmp	r3, #64	@ 0x40
 8007048:	d031      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b08      	cmp	r3, #8
 8007056:	d110      	bne.n	800707a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2208      	movs	r2, #8
 800705e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f838 	bl	80070d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2208      	movs	r2, #8
 800706a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e029      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007088:	d111      	bne.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f81e 	bl	80070d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e00f      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4013      	ands	r3, r2
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d0a0      	beq.n	800700e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b095      	sub	sp, #84	@ 0x54
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007102:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e6      	bne.n	80070de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f023 0301 	bic.w	r3, r3, #1
 8007126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3308      	adds	r3, #8
 800712e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007130:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e5      	bne.n	8007110 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007148:	2b01      	cmp	r3, #1
 800714a:	d118      	bne.n	800717e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	60bb      	str	r3, [r7, #8]
   return(result);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f023 0310 	bic.w	r3, r3, #16
 8007160:	647b      	str	r3, [r7, #68]	@ 0x44
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6979      	ldr	r1, [r7, #20]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	613b      	str	r3, [r7, #16]
   return(result);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e6      	bne.n	800714c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007192:	bf00      	nop
 8007194:	3754      	adds	r7, #84	@ 0x54
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071a0:	b084      	sub	sp, #16
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	f107 001c 	add.w	r0, r7, #28
 80071ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d121      	bne.n	80071fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	4b21      	ldr	r3, [pc, #132]	@ (8007250 <USB_CoreInit+0xb0>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d105      	bne.n	80071f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa92 	bl	800771c <USB_CoreReset>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
 80071fc:	e010      	b.n	8007220 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa86 	bl	800771c <USB_CoreReset>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007220:	7fbb      	ldrb	r3, [r7, #30]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d10b      	bne.n	800723e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f043 0206 	orr.w	r2, r3, #6
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f043 0220 	orr.w	r2, r3, #32
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800724a:	b004      	add	sp, #16
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	ffbdffbf 	.word	0xffbdffbf

08007254 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f023 0201 	bic.w	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d115      	bne.n	80072c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072a4:	200a      	movs	r0, #10
 80072a6:	f7fb f84d 	bl	8002344 <HAL_Delay>
      ms += 10U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	330a      	adds	r3, #10
 80072ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa25 	bl	8007700 <USB_GetMode>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d01e      	beq.n	80072fa <USB_SetCurrentMode+0x84>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2bc7      	cmp	r3, #199	@ 0xc7
 80072c0:	d9f0      	bls.n	80072a4 <USB_SetCurrentMode+0x2e>
 80072c2:	e01a      	b.n	80072fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d115      	bne.n	80072f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072d6:	200a      	movs	r0, #10
 80072d8:	f7fb f834 	bl	8002344 <HAL_Delay>
      ms += 10U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	330a      	adds	r3, #10
 80072e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa0c 	bl	8007700 <USB_GetMode>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <USB_SetCurrentMode+0x84>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80072f2:	d9f0      	bls.n	80072d6 <USB_SetCurrentMode+0x60>
 80072f4:	e001      	b.n	80072fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e005      	b.n	8007306 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2bc8      	cmp	r3, #200	@ 0xc8
 80072fe:	d101      	bne.n	8007304 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007310:	b084      	sub	sp, #16
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800731e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800732a:	2300      	movs	r3, #0
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	e009      	b.n	8007344 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	3340      	adds	r3, #64	@ 0x40
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	2200      	movs	r2, #0
 800733c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3301      	adds	r3, #1
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b0e      	cmp	r3, #14
 8007348:	d9f2      	bls.n	8007330 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800734a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800734e:	2b00      	cmp	r3, #0
 8007350:	d11c      	bne.n	800738c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007360:	f043 0302 	orr.w	r3, r3, #2
 8007364:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	e005      	b.n	8007398 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800739e:	461a      	mov	r2, r3
 80073a0:	2300      	movs	r3, #0
 80073a2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073a4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10d      	bne.n	80073c8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073b4:	2100      	movs	r1, #0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f968 	bl	800768c <USB_SetDevSpeed>
 80073bc:	e008      	b.n	80073d0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073be:	2101      	movs	r1, #1
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f963 	bl	800768c <USB_SetDevSpeed>
 80073c6:	e003      	b.n	80073d0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073c8:	2103      	movs	r1, #3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f95e 	bl	800768c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073d0:	2110      	movs	r1, #16
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8fa 	bl	80075cc <USB_FlushTxFifo>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f924 	bl	8007630 <USB_FlushRxFifo>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f8:	461a      	mov	r2, r3
 80073fa:	2300      	movs	r3, #0
 80073fc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007404:	461a      	mov	r2, r3
 8007406:	2300      	movs	r3, #0
 8007408:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007410:	461a      	mov	r2, r3
 8007412:	2300      	movs	r3, #0
 8007414:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]
 800741a:	e043      	b.n	80074a4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800742e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007432:	d118      	bne.n	8007466 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007446:	461a      	mov	r2, r3
 8007448:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	e013      	b.n	8007478 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745c:	461a      	mov	r2, r3
 800745e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	e008      	b.n	8007478 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007472:	461a      	mov	r2, r3
 8007474:	2300      	movs	r3, #0
 8007476:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007484:	461a      	mov	r2, r3
 8007486:	2300      	movs	r3, #0
 8007488:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007496:	461a      	mov	r2, r3
 8007498:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800749c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3301      	adds	r3, #1
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074a8:	461a      	mov	r2, r3
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d3b5      	bcc.n	800741c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	e043      	b.n	800753e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074cc:	d118      	bne.n	8007500 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e0:	461a      	mov	r2, r3
 80074e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	e013      	b.n	8007512 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f6:	461a      	mov	r2, r3
 80074f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e008      	b.n	8007512 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750c:	461a      	mov	r2, r3
 800750e:	2300      	movs	r3, #0
 8007510:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751e:	461a      	mov	r2, r3
 8007520:	2300      	movs	r3, #0
 8007522:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007530:	461a      	mov	r2, r3
 8007532:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007536:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	3301      	adds	r3, #1
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007542:	461a      	mov	r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4293      	cmp	r3, r2
 8007548:	d3b5      	bcc.n	80074b6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800755c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800756a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800756c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007570:	2b00      	cmp	r3, #0
 8007572:	d105      	bne.n	8007580 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	f043 0210 	orr.w	r2, r3, #16
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	4b0f      	ldr	r3, [pc, #60]	@ (80075c4 <USB_DevInit+0x2b4>)
 8007586:	4313      	orrs	r3, r2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800758c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f043 0208 	orr.w	r2, r3, #8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d105      	bne.n	80075b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <USB_DevInit+0x2b8>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075c0:	b004      	add	sp, #16
 80075c2:	4770      	bx	lr
 80075c4:	803c3800 	.word	0x803c3800
 80075c8:	40000004 	.word	0x40000004

080075cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e6:	d901      	bls.n	80075ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e01b      	b.n	8007624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	daf2      	bge.n	80075da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	019b      	lsls	r3, r3, #6
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007610:	d901      	bls.n	8007616 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e006      	b.n	8007624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b20      	cmp	r3, #32
 8007620:	d0f0      	beq.n	8007604 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007648:	d901      	bls.n	800764e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e018      	b.n	8007680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	daf2      	bge.n	800763c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2210      	movs	r2, #16
 800765e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3301      	adds	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800766c:	d901      	bls.n	8007672 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e006      	b.n	8007680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b10      	cmp	r3, #16
 800767c:	d0f0      	beq.n	8007660 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	68f9      	ldr	r1, [r7, #12]
 80076a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076ac:	4313      	orrs	r3, r2
 80076ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076d8:	f023 0303 	bic.w	r3, r3, #3
 80076dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ec:	f043 0302 	orr.w	r3, r3, #2
 80076f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	f003 0301 	and.w	r3, r3, #1
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3301      	adds	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007734:	d901      	bls.n	800773a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e022      	b.n	8007780 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	daf2      	bge.n	8007728 <USB_CoreReset+0xc>

  count = 10U;
 8007742:	230a      	movs	r3, #10
 8007744:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007746:	e002      	b.n	800774e <USB_CoreReset+0x32>
  {
    count--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3b01      	subs	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1f9      	bne.n	8007748 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f043 0201 	orr.w	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3301      	adds	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800776c:	d901      	bls.n	8007772 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e006      	b.n	8007780 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b01      	cmp	r3, #1
 800777c:	d0f0      	beq.n	8007760 <USB_CoreReset+0x44>

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800778c:	b580      	push	{r7, lr}
 800778e:	b090      	sub	sp, #64	@ 0x40
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007798:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800779a:	2300      	movs	r3, #0
 800779c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a4:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	330e      	adds	r3, #14
 80077aa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	f040 80ee 	bne.w	8007994 <eARPProcessPacket+0x208>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80077b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ba:	885b      	ldrh	r3, [r3, #2]
 80077bc:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80077be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077c2:	f040 80e7 	bne.w	8007994 <eARPProcessPacket+0x208>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80077ca:	2b06      	cmp	r3, #6
 80077cc:	f040 80e2 	bne.w	8007994 <eARPProcessPacket+0x208>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	f040 80dd 	bne.w	8007994 <eARPProcessPacket+0x208>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	330e      	adds	r3, #14
 80077de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 80077e0:	f107 0320 	add.w	r3, r7, #32
 80077e4:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 80077e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ee:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 80077f6:	4b6a      	ldr	r3, [pc, #424]	@ (80079a0 <eARPProcessPacket+0x214>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 80077fe:	4969      	ldr	r1, [pc, #420]	@ (80079a4 <eARPProcessPacket+0x218>)
 8007800:	4869      	ldr	r0, [pc, #420]	@ (80079a8 <eARPProcessPacket+0x21c>)
 8007802:	f00d fed7 	bl	80155b4 <xTaskCheckForTimeOut>
 8007806:	4603      	mov	r3, r0
 8007808:	2b01      	cmp	r3, #1
 800780a:	d102      	bne.n	8007812 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 800780c:	4b64      	ldr	r3, [pc, #400]	@ (80079a0 <eARPProcessPacket+0x214>)
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	7a1b      	ldrb	r3, [r3, #8]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	f040 80ba 	bne.w	8007994 <eARPProcessPacket+0x208>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8007826:	d303      	bcc.n	8007830 <eARPProcessPacket+0xa4>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8007828:	6a3b      	ldr	r3, [r7, #32]
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 800782a:	2b00      	cmp	r3, #0
 800782c:	f280 80b2 	bge.w	8007994 <eARPProcessPacket+0x208>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8007830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007832:	2b00      	cmp	r3, #0
 8007834:	d021      	beq.n	800787a <eARPProcessPacket+0xee>
 8007836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	429a      	cmp	r2, r3
 800783e:	d11c      	bne.n	800787a <eARPProcessPacket+0xee>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8007840:	4b57      	ldr	r3, [pc, #348]	@ (80079a0 <eARPProcessPacket+0x214>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f040 80a5 	bne.w	8007994 <eARPProcessPacket+0x208>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 800784a:	4b55      	ldr	r3, [pc, #340]	@ (80079a0 <eARPProcessPacket+0x214>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3301      	adds	r3, #1
 8007850:	4a53      	ldr	r2, [pc, #332]	@ (80079a0 <eARPProcessPacket+0x214>)
 8007852:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8007854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800785c:	f000 fcd4 	bl	8008208 <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8007860:	f00d fbce 	bl	8015000 <xTaskGetTickCount>
 8007864:	4603      	mov	r3, r0
 8007866:	4a51      	ldr	r2, [pc, #324]	@ (80079ac <eARPProcessPacket+0x220>)
 8007868:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 800786a:	484f      	ldr	r0, [pc, #316]	@ (80079a8 <eARPProcessPacket+0x21c>)
 800786c:	f00d fe62 	bl	8015534 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8007870:	4b4c      	ldr	r3, [pc, #304]	@ (80079a4 <eARPProcessPacket+0x218>)
 8007872:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007876:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8007878:	e08c      	b.n	8007994 <eARPProcessPacket+0x208>
            {
                iptraceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	88db      	ldrh	r3, [r3, #6]
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 800787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b01      	cmp	r3, #1
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8007886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8083 	beq.w	8007994 <eARPProcessPacket+0x208>
 800788e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007890:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d07a      	beq.n	8007994 <eARPProcessPacket+0x208>
                {
                    switch( pxARPHeader->usOperation )
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	88db      	ldrh	r3, [r3, #6]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d002      	beq.n	80078ae <eARPProcessPacket+0x122>
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d06b      	beq.n	8007984 <eARPProcessPacket+0x1f8>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 80078ac:	e072      	b.n	8007994 <eARPProcessPacket+0x208>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 80078ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d115      	bne.n	80078e4 <eARPProcessPacket+0x158>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 80078b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ba:	f103 0038 	add.w	r0, r3, #56	@ 0x38
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 80078c2:	2206      	movs	r2, #6
 80078c4:	4619      	mov	r1, r3
 80078c6:	f00f fcfa 	bl	80172be <memcmp>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d060      	beq.n	8007992 <eARPProcessPacket+0x206>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	461a      	mov	r2, r3
 80078d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80078d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078d8:	f000 f86e 	bl	80079b8 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 80078dc:	2302      	movs	r3, #2
 80078de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 80078e2:	e056      	b.n	8007992 <eARPProcessPacket+0x206>
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d152      	bne.n	8007992 <eARPProcessPacket+0x206>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	405a      	eors	r2, r3
 80078f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d149      	bne.n	8007992 <eARPProcessPacket+0x206>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 80078fe:	4a2c      	ldr	r2, [pc, #176]	@ (80079b0 <eARPProcessPacket+0x224>)
 8007900:	f107 0318 	add.w	r3, r7, #24
 8007904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007908:	6018      	str	r0, [r3, #0]
 800790a:	3304      	adds	r3, #4
 800790c:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	3312      	adds	r3, #18
 8007912:	2206      	movs	r2, #6
 8007914:	4927      	ldr	r1, [pc, #156]	@ (80079b4 <eARPProcessPacket+0x228>)
 8007916:	4618      	mov	r0, r3
 8007918:	f00f fcd1 	bl	80172be <memcmp>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <eARPProcessPacket+0x1ac>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	3312      	adds	r3, #18
 8007926:	f107 0118 	add.w	r1, r7, #24
 800792a:	2206      	movs	r2, #6
 800792c:	4618      	mov	r0, r3
 800792e:	f00f fcc6 	bl	80172be <memcmp>
 8007932:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8007934:	2b00      	cmp	r3, #0
 8007936:	d12c      	bne.n	8007992 <eARPProcessPacket+0x206>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8007938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	3308      	adds	r3, #8
 8007942:	2206      	movs	r2, #6
 8007944:	4619      	mov	r1, r3
 8007946:	f00f fcba 	bl	80172be <memcmp>
 800794a:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 800794c:	2b00      	cmp	r3, #0
 800794e:	d020      	beq.n	8007992 <eARPProcessPacket+0x206>
                                    pxCachedEndPoint = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eResolutionCacheHit )
 8007954:	f107 020c 	add.w	r2, r7, #12
 8007958:	f107 0110 	add.w	r1, r7, #16
 800795c:	f107 0320 	add.w	r3, r7, #32
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fa87 	bl	8007e74 <eARPGetCacheEntry>
 8007966:	4603      	mov	r3, r0
 8007968:	2b01      	cmp	r3, #1
 800796a:	d112      	bne.n	8007992 <eARPProcessPacket+0x206>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007970:	429a      	cmp	r2, r3
 8007972:	d10e      	bne.n	8007992 <eARPProcessPacket+0x206>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	3308      	adds	r3, #8
 8007978:	6a39      	ldr	r1, [r7, #32]
 800797a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f967 	bl	8007c50 <vARPRefreshCacheEntry>
                            break;
 8007982:	e006      	b.n	8007992 <eARPProcessPacket+0x206>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	461a      	mov	r2, r3
 8007988:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800798a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800798c:	f000 f852 	bl	8007a34 <vARPProcessPacketReply>
                            break;
 8007990:	e000      	b.n	8007994 <eARPProcessPacket+0x208>
                            break;
 8007992:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8007994:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8007998:	4618      	mov	r0, r3
 800799a:	3740      	adds	r7, #64	@ 0x40
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	20001084 	.word	0x20001084
 80079a4:	2000000c 	.word	0x2000000c
 80079a8:	20001088 	.word	0x20001088
 80079ac:	20001080 	.word	0x20001080
 80079b0:	08018520 	.word	0x08018520
 80079b4:	080186b4 	.word	0x080186b4

080079b8 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	330e      	adds	r3, #14
 80079c8:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	3308      	adds	r3, #8
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 f93c 	bl	8007c50 <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	2200      	movs	r2, #0
 80079dc:	f042 0202 	orr.w	r2, r2, #2
 80079e0:	719a      	strb	r2, [r3, #6]
 80079e2:	2200      	movs	r2, #0
 80079e4:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	3308      	adds	r3, #8
 80079ea:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	3312      	adds	r3, #18
 80079f0:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80079f2:	2206      	movs	r2, #6
 80079f4:	69b9      	ldr	r1, [r7, #24]
 80079f6:	6978      	ldr	r0, [r7, #20]
 80079f8:	f00f fd65 	bl	80174c6 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	3338      	adds	r3, #56	@ 0x38
 8007a06:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007a0e:	2206      	movs	r2, #6
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	6978      	ldr	r0, [r7, #20]
 8007a14:	f00f fd57 	bl	80174c6 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	330e      	adds	r3, #14
 8007a20:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	601a      	str	r2, [r3, #0]
    }
 8007a2c:	bf00      	nop
 8007a2e:	3720      	adds	r7, #32
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08c      	sub	sp, #48	@ 0x30
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	330e      	adds	r3, #14
 8007a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d005      	beq.n	8007a62 <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f844 	bl	8007ae4 <xIsIPInARPCache>
 8007a5c:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d106      	bne.n	8007a70 <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a64:	3308      	adds	r3, #8
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f8f0 	bl	8007c50 <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8007a70:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <vARPProcessPacketReply+0xac>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d02e      	beq.n	8007ad6 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8007a78:	4b19      	ldr	r3, [pc, #100]	@ (8007ae0 <vARPProcessPacketReply+0xac>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f002 fa15 	bl	8009eac <uxIPHeaderSizePacket>
 8007a82:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8007a84:	2b14      	cmp	r3, #20
 8007a86:	d126      	bne.n	8007ad6 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8007a88:	4b15      	ldr	r3, [pc, #84]	@ (8007ae0 <vARPProcessPacketReply+0xac>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8e:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	330e      	adds	r3, #14
 8007a94:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d11a      	bne.n	8007ad6 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <vARPProcessPacketReply+0xac>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 8007aae:	f107 0314 	add.w	r3, r7, #20
 8007ab2:	69f9      	ldr	r1, [r7, #28]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fe71 	bl	800979c <xSendEventStructToIPTask>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d004      	beq.n	8007aca <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8007ac0:	4b07      	ldr	r3, [pc, #28]	@ (8007ae0 <vARPProcessPacketReply+0xac>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f009 fcf9 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8007aca:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <vARPProcessPacketReply+0xac>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f002 fc41 	bl	800a358 <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8007ad6:	bf00      	nop
 8007ad8:	3730      	adds	r7, #48	@ 0x30
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20001300 	.word	0x20001300

08007ae4 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
    BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
    {
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
        BaseType_t x, xReturn = pdFALSE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60bb      	str	r3, [r7, #8]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e017      	b.n	8007b26 <xIsIPInARPCache+0x42>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007af6:	4a12      	ldr	r2, [pc, #72]	@ (8007b40 <xIsIPInARPCache+0x5c>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	4413      	add	r3, r2
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d10c      	bne.n	8007b20 <xIsIPInARPCache+0x3c>
            {
                xReturn = pdTRUE;
 8007b06:	2301      	movs	r3, #1
 8007b08:	60bb      	str	r3, [r7, #8]

                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b40 <xIsIPInARPCache+0x5c>)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	4413      	add	r3, r2
 8007b12:	330b      	adds	r3, #11
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d109      	bne.n	8007b2e <xIsIPInARPCache+0x4a>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    xReturn = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60bb      	str	r3, [r7, #8]
                }

                break;
 8007b1e:	e006      	b.n	8007b2e <xIsIPInARPCache+0x4a>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	dde4      	ble.n	8007af6 <xIsIPInARPCache+0x12>
 8007b2c:	e000      	b.n	8007b30 <xIsIPInARPCache+0x4c>
                break;
 8007b2e:	bf00      	nop
            }
        }

        return xReturn;
 8007b30:	68bb      	ldr	r3, [r7, #8]
    }
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000fe0 	.word	0x20000fe0

08007b44 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
    BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
        BaseType_t xNeedsARPResolution = pdFALSE;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b54:	61bb      	str	r3, [r7, #24]
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	330e      	adds	r3, #14
 8007b5a:	617b      	str	r3, [r7, #20]
        const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b60:	613b      	str	r3, [r7, #16]

        configASSERT( ( pxIPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) || ( pxIPPacket->xEthernetHeader.usFrameType == ipARP_FRAME_TYPE ) );
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	899b      	ldrh	r3, [r3, #12]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b6c:	d006      	beq.n	8007b7c <xCheckRequiresARPResolution+0x38>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	899b      	ldrh	r3, [r3, #12]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f640 0206 	movw	r2, #2054	@ 0x806
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d101      	bne.n	8007b80 <xCheckRequiresARPResolution+0x3c>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e000      	b.n	8007b82 <xCheckRequiresARPResolution+0x3e>
 8007b80:	2300      	movs	r3, #0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10d      	bne.n	8007ba2 <xCheckRequiresARPResolution+0x5e>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8a:	b672      	cpsid	i
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	b662      	cpsie	i
 8007b9a:	60fb      	str	r3, [r7, #12]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <xCheckRequiresARPResolution+0x5a>

        if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	405a      	eors	r2, r3
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d111      	bne.n	8007bda <xCheckRequiresARPResolution+0x96>
        {
            /* If the IP is on the same subnet and we do not have an ARP entry already,
             * then we should send out ARP for finding the MAC address. */
            if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff ff92 	bl	8007ae4 <xIsIPInARPCache>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <xCheckRequiresARPResolution+0x96>
            {
                FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f000 fb19 	bl	8008208 <FreeRTOS_OutputARPRequest_Multi>

                /* This packet needs resolution since this is on the same subnet
                 * but not in the ARP cache. */
                xNeedsARPResolution = pdTRUE;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
            }
        }

        return xNeedsARPResolution;
 8007bda:	69fb      	ldr	r3, [r7, #28]
    }
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3720      	adds	r7, #32
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
    void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                                   const uint32_t ulIPAddress )
    {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
        BaseType_t x;

        if( pxMACAddress != NULL )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d026      	beq.n	8007c42 <vARPRefreshCacheEntryAge+0x5e>
        {
            /* Loop through each entry in the ARP cache. */
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	e020      	b.n	8007c3c <vARPRefreshCacheEntryAge+0x58>
            {
                /* Does this line in the cache table hold an entry for the IP
                 * address being queried? */
                if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007bfa:	4a14      	ldr	r2, [pc, #80]	@ (8007c4c <vARPRefreshCacheEntryAge+0x68>)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	4413      	add	r3, r2
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d115      	bne.n	8007c36 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* Does this cache entry have the same MAC address? */
                    if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8007c4c <vARPRefreshCacheEntryAge+0x68>)
 8007c10:	4413      	add	r3, r2
 8007c12:	3304      	adds	r3, #4
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	2206      	movs	r2, #6
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f00f fb50 	bl	80172be <memcmp>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d108      	bne.n	8007c36 <vARPRefreshCacheEntryAge+0x52>
                    {
                        /* The IP address and the MAC matched, update this entry age. */
                        xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007c24:	4a09      	ldr	r2, [pc, #36]	@ (8007c4c <vARPRefreshCacheEntryAge+0x68>)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	4413      	add	r3, r2
 8007c2c:	330a      	adds	r3, #10
 8007c2e:	2296      	movs	r2, #150	@ 0x96
 8007c30:	701a      	strb	r2, [r3, #0]
                        break;
 8007c32:	bf00      	nop
                    }
                }
            }
        }
    }
 8007c34:	e005      	b.n	8007c42 <vARPRefreshCacheEntryAge+0x5e>
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b09      	cmp	r3, #9
 8007c40:	dddb      	ble.n	8007bfa <vARPRefreshCacheEntryAge+0x16>
    }
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20000fe0 	.word	0x20000fe0

08007c50 <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
    void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                                const uint32_t ulIPAddress,
                                struct xNetworkEndPoint * pxEndPoint )
    {
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
        #endif
        {
            CacheLocation_t xLocation;
            BaseType_t xReady;

            xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8007c5c:	f107 0310 	add.w	r3, r7, #16
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 f85b 	bl	8007d20 <prvFindCacheEntry>
 8007c6a:	61f8      	str	r0, [r7, #28]

            if( xReady == pdFALSE )
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d150      	bne.n	8007d14 <vARPRefreshCacheEntry+0xc4>
            {
                if( xLocation.xMacEntry >= 0 )
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	db0e      	blt.n	8007c96 <vARPRefreshCacheEntry+0x46>
                {
                    xLocation.xUseEntry = xLocation.xMacEntry;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	61bb      	str	r3, [r7, #24]

                    if( xLocation.xIpEntry >= 0 )
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	db0e      	blt.n	8007ca0 <vARPRefreshCacheEntry+0x50>
                    {
                        /* Both the MAC address as well as the IP address were found in
                         * different locations: clear the entry which matches the
                         * IP-address */
                        ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	4a25      	ldr	r2, [pc, #148]	@ (8007d1c <vARPRefreshCacheEntry+0xcc>)
 8007c88:	4413      	add	r3, r2
 8007c8a:	2210      	movs	r2, #16
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f00f fb3f 	bl	8017312 <memset>
 8007c94:	e004      	b.n	8007ca0 <vARPRefreshCacheEntry+0x50>
                    }
                }
                else if( xLocation.xIpEntry >= 0 )
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db01      	blt.n	8007ca0 <vARPRefreshCacheEntry+0x50>
                {
                    /* An entry containing the IP-address was found, but it had a different MAC address */
                    xLocation.xUseEntry = xLocation.xIpEntry;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	61bb      	str	r3, [r7, #24]
                {
                    /* No matching entry found. */
                }

                /* If the entry was not found, we use the oldest entry and set the IPaddress */
                xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d1c <vARPRefreshCacheEntry+0xcc>)
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	4413      	add	r3, r2
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	601a      	str	r2, [r3, #0]

                if( pxMACAddress != NULL )
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01f      	beq.n	8007cf2 <vARPRefreshCacheEntry+0xa2>
                {
                    ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	011b      	lsls	r3, r3, #4
 8007cb6:	4a19      	ldr	r2, [pc, #100]	@ (8007d1c <vARPRefreshCacheEntry+0xcc>)
 8007cb8:	4413      	add	r3, r2
 8007cba:	3304      	adds	r3, #4
 8007cbc:	68f9      	ldr	r1, [r7, #12]
 8007cbe:	2206      	movs	r2, #6
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f00f fc00 	bl	80174c6 <memcpy>

                    iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                    /* And this entry does not need immediate attention */
                    xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	4a14      	ldr	r2, [pc, #80]	@ (8007d1c <vARPRefreshCacheEntry+0xcc>)
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	4413      	add	r3, r2
 8007cce:	330a      	adds	r3, #10
 8007cd0:	2296      	movs	r2, #150	@ 0x96
 8007cd2:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	4a11      	ldr	r2, [pc, #68]	@ (8007d1c <vARPRefreshCacheEntry+0xcc>)
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	4413      	add	r3, r2
 8007cdc:	330b      	adds	r3, #11
 8007cde:	2201      	movs	r2, #1
 8007ce0:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8007d1c <vARPRefreshCacheEntry+0xcc>)
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	4413      	add	r3, r2
 8007cea:	330c      	adds	r3, #12
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	601a      	str	r2, [r3, #0]
                {
                    /* Nothing will be stored. */
                }
            }
        }
    }
 8007cf0:	e010      	b.n	8007d14 <vARPRefreshCacheEntry+0xc4>
                else if( xLocation.xIpEntry < 0 )
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	da0d      	bge.n	8007d14 <vARPRefreshCacheEntry+0xc4>
                    xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	4a08      	ldr	r2, [pc, #32]	@ (8007d1c <vARPRefreshCacheEntry+0xcc>)
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	4413      	add	r3, r2
 8007d00:	330a      	adds	r3, #10
 8007d02:	2200      	movs	r2, #0
 8007d04:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	4a04      	ldr	r2, [pc, #16]	@ (8007d1c <vARPRefreshCacheEntry+0xcc>)
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	4413      	add	r3, r2
 8007d0e:	330b      	adds	r3, #11
 8007d10:	2200      	movs	r2, #0
 8007d12:	701a      	strb	r2, [r3, #0]
    }
 8007d14:	bf00      	nop
 8007d16:	3720      	adds	r7, #32
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000fe0 	.word	0x20000fe0

08007d20 <prvFindCacheEntry>:
 */
    static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                         const uint32_t ulIPAddress,
                                         struct xNetworkEndPoint * pxEndPoint,
                                         CacheLocation_t * pxLocation )
    {
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	@ 0x28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
        BaseType_t x = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucMinAgeFound = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        BaseType_t xReturn = pdFALSE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61fb      	str	r3, [r7, #28]

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007d3c:	68b8      	ldr	r0, [r7, #8]
 8007d3e:	f003 f9e9 	bl	800b114 <FreeRTOS_FindEndPointOnNetMask>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf14      	ite	ne
 8007d48:	2301      	movne	r3, #1
 8007d4a:	2300      	moveq	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	617b      	str	r3, [r7, #20]
        #endif

        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 8007d50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d54:	3b01      	subs	r3, #1
 8007d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        pxLocation->xIpEntry = -1;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d60:	601a      	str	r2, [r3, #0]
        pxLocation->xMacEntry = -1;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295
 8007d68:	605a      	str	r2, [r3, #4]
        pxLocation->xUseEntry = 0;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	609a      	str	r2, [r3, #8]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d70:	2300      	movs	r3, #0
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d74:	e073      	b.n	8007e5e <prvFindCacheEntry+0x13e>
        {
            BaseType_t xMatchingMAC = pdFALSE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61bb      	str	r3, [r7, #24]

            if( pxMACAddress != NULL )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <prvFindCacheEntry+0x7e>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	4a3a      	ldr	r2, [pc, #232]	@ (8007e70 <prvFindCacheEntry+0x150>)
 8007d86:	4413      	add	r3, r2
 8007d88:	3304      	adds	r3, #4
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	2206      	movs	r2, #6
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f00f fa95 	bl	80172be <memcmp>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <prvFindCacheEntry+0x7e>
                {
                    xMatchingMAC = pdTRUE;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	61bb      	str	r3, [r7, #24]
                }
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007d9e:	4a34      	ldr	r2, [pc, #208]	@ (8007e70 <prvFindCacheEntry+0x150>)
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	4413      	add	r3, r2
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d125      	bne.n	8007dfa <prvFindCacheEntry+0xda>
            {
                if( pxMACAddress == NULL )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <prvFindCacheEntry+0x9c>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    pxLocation->xIpEntry = x;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007db8:	601a      	str	r2, [r3, #0]
                    break;
 8007dba:	e053      	b.n	8007e64 <prvFindCacheEntry+0x144>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d017      	beq.n	8007df2 <prvFindCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * This is by far the most common path. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8007e70 <prvFindCacheEntry+0x150>)
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	4413      	add	r3, r2
 8007dca:	330a      	adds	r3, #10
 8007dcc:	2296      	movs	r2, #150	@ 0x96
 8007dce:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8007dd0:	4a27      	ldr	r2, [pc, #156]	@ (8007e70 <prvFindCacheEntry+0x150>)
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	4413      	add	r3, r2
 8007dd8:	330b      	adds	r3, #11
 8007dda:	2201      	movs	r2, #1
 8007ddc:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].pxEndPoint = pxEndPoint;
 8007dde:	4a24      	ldr	r2, [pc, #144]	@ (8007e70 <prvFindCacheEntry+0x150>)
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	4413      	add	r3, r2
 8007de6:	330c      	adds	r3, #12
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]
                    /* Indicate to the caller that the entry is updated. */
                    xReturn = pdTRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	61fb      	str	r3, [r7, #28]
                    break;
 8007df0:	e038      	b.n	8007e64 <prvFindCacheEntry+0x144>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                pxLocation->xIpEntry = x;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	e02e      	b.n	8007e58 <prvFindCacheEntry+0x138>
            }
            else if( xMatchingMAC != pdFALSE )
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d016      	beq.n	8007e2e <prvFindCacheEntry+0x10e>
                #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
                {
                    /* If ARP stores the MAC address of IP addresses outside the
                     * network, than the MAC address of the gateway should not be
                     * overwritten. */
                    BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007e00:	4a1b      	ldr	r2, [pc, #108]	@ (8007e70 <prvFindCacheEntry+0x150>)
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	4413      	add	r3, r2
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f003 f982 	bl	800b114 <FreeRTOS_FindEndPointOnNetMask>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	613b      	str	r3, [r7, #16]

                    if( xAddressIsLocal == xOtherIsLocal )
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d118      	bne.n	8007e58 <prvFindCacheEntry+0x138>
                    {
                        pxLocation->xMacEntry = x;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e2a:	605a      	str	r2, [r3, #4]
 8007e2c:	e014      	b.n	8007e58 <prvFindCacheEntry+0x138>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8007e2e:	4a10      	ldr	r2, [pc, #64]	@ (8007e70 <prvFindCacheEntry+0x150>)
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	4413      	add	r3, r2
 8007e36:	330a      	adds	r3, #10
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d90a      	bls.n	8007e58 <prvFindCacheEntry+0x138>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8007e42:	4a0b      	ldr	r2, [pc, #44]	@ (8007e70 <prvFindCacheEntry+0x150>)
 8007e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	4413      	add	r3, r2
 8007e4a:	330a      	adds	r3, #10
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pxLocation->xUseEntry = x;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e56:	609a      	str	r2, [r3, #8]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	2b09      	cmp	r3, #9
 8007e62:	dd88      	ble.n	8007d76 <prvFindCacheEntry+0x56>
            {
                /* Nothing happens to this cache entry for now. */
            }
        } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

        return xReturn;
 8007e64:	69fb      	ldr	r3, [r7, #28]
    }
 8007e66:	4618      	mov	r0, r3
 8007e68:	3728      	adds	r7, #40	@ 0x28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000fe0 	.word	0x20000fe0

08007e74 <eARPGetCacheEntry>:
 *         eResolutionFailed.
 */
    eResolutionLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                                 MACAddress_t * const pxMACAddress,
                                                 struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08a      	sub	sp, #40	@ 0x28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
        eResolutionLookupResult_t eReturn = eResolutionFailed;
 8007e80:	2302      	movs	r3, #2
 8007e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	623b      	str	r3, [r7, #32]

        configASSERT( pxMACAddress != NULL );
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10d      	bne.n	8007eac <eARPGetCacheEntry+0x38>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e94:	b672      	cpsid	i
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	b662      	cpsie	i
 8007ea4:	61bb      	str	r3, [r7, #24]
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <eARPGetCacheEntry+0x34>
        configASSERT( pulIPAddress != NULL );
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10d      	bne.n	8007ece <eARPGetCacheEntry+0x5a>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb6:	b672      	cpsid	i
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	b662      	cpsie	i
 8007ec6:	617b      	str	r3, [r7, #20]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <eARPGetCacheEntry+0x56>
        configASSERT( ppxEndPoint != NULL );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10d      	bne.n	8007ef0 <eARPGetCacheEntry+0x7c>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	b672      	cpsid	i
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	b662      	cpsie	i
 8007ee8:	613b      	str	r3, [r7, #16]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <eARPGetCacheEntry+0x78>

        *( ppxEndPoint ) = NULL;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	61fb      	str	r3, [r7, #28]

        if( xIsIPv4Loopback( ulAddressToLookup ) != 0 )
 8007efc:	69f8      	ldr	r0, [r7, #28]
 8007efe:	f002 fe77 	bl	800abf0 <xIsIPv4Loopback>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d014      	beq.n	8007f32 <eARPGetCacheEntry+0xbe>
        {
            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup );
 8007f08:	69f8      	ldr	r0, [r7, #28]
 8007f0a:	f003 f8c7 	bl	800b09c <FreeRTOS_FindEndPointOnIP_IPv4>
 8007f0e:	6238      	str	r0, [r7, #32]

            if( pxEndPoint != NULL )
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d04d      	beq.n	8007fb2 <eARPGetCacheEntry+0x13e>
            {
                /* For multi-cast, use the first IPv4 end-point. */
                ( void ) memcpy( pxMACAddress->ucBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007f16:	68b8      	ldr	r0, [r7, #8]
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	3338      	adds	r3, #56	@ 0x38
 8007f1c:	2206      	movs	r2, #6
 8007f1e:	4619      	mov	r1, r3
 8007f20:	f00f fad1 	bl	80174c6 <memcpy>
                *( ppxEndPoint ) = pxEndPoint;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a3a      	ldr	r2, [r7, #32]
 8007f28:	601a      	str	r2, [r3, #0]
                eReturn = eResolutionCacheHit;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007f30:	e03f      	b.n	8007fb2 <eARPGetCacheEntry+0x13e>
            }
        }
        else if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8007f32:	69f8      	ldr	r0, [r7, #28]
 8007f34:	f002 fde4 	bl	800ab00 <xIsIPv4Multicast>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d020      	beq.n	8007f80 <eARPGetCacheEntry+0x10c>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	69f8      	ldr	r0, [r7, #28]
 8007f42:	f002 ffb3 	bl	800aeac <vSetMultiCastIPv4MacAddress>

            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8007f46:	2000      	movs	r0, #0
 8007f48:	f003 f90e 	bl	800b168 <FreeRTOS_FirstEndPoint>
 8007f4c:	6238      	str	r0, [r7, #32]

            for( ;
 8007f4e:	e013      	b.n	8007f78 <eARPGetCacheEntry+0x104>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d106      	bne.n	8007f6e <eARPGetCacheEntry+0xfa>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	601a      	str	r2, [r3, #0]
                    eReturn = eResolutionCacheHit;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 8007f6c:	e021      	b.n	8007fb2 <eARPGetCacheEntry+0x13e>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8007f6e:	6a39      	ldr	r1, [r7, #32]
 8007f70:	2000      	movs	r0, #0
 8007f72:	f003 f941 	bl	800b1f8 <FreeRTOS_NextEndPoint>
 8007f76:	6238      	str	r0, [r7, #32]
                 pxEndPoint != NULL;
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e8      	bne.n	8007f50 <eARPGetCacheEntry+0xdc>
 8007f7e:	e018      	b.n	8007fb2 <eARPGetCacheEntry+0x13e>
                }
            }
        }
        else if( xIsIPv4Broadcast( ulAddressToLookup, ppxEndPoint ) == pdTRUE )
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	69f8      	ldr	r0, [r7, #28]
 8007f84:	f002 fdd6 	bl	800ab34 <xIsIPv4Broadcast>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d109      	bne.n	8007fa2 <eARPGetCacheEntry+0x12e>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	4a0b      	ldr	r2, [pc, #44]	@ (8007fc0 <eARPGetCacheEntry+0x14c>)
 8007f92:	6811      	ldr	r1, [r2, #0]
 8007f94:	6019      	str	r1, [r3, #0]
 8007f96:	8892      	ldrh	r2, [r2, #4]
 8007f98:	809a      	strh	r2, [r3, #4]
            /* Note that xIsIPv4Broadcast() already filled in ppxEndPoint with the corresponding endpoint
             * or the first IPv4 endpoint in case ulAddressToLookup was FREERTOS_INADDR_BROADCAST.
             * It is also safe to call xIsIPv4Broadcast() with a null pointer so no need to use
             * the intermediary pxEndPoint */

            eReturn = eResolutionCacheHit;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007fa0:	e007      	b.n	8007fb2 <eARPGetCacheEntry+0x13e>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f80c 	bl	8007fc4 <eARPGetCacheEntryGateWay>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        return eReturn;
 8007fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3728      	adds	r7, #40	@ 0x28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	080186b4 	.word	0x080186b4

08007fc4 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eResolutionLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                               MACAddress_t * const pxMACAddress,
                                                               struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
        eResolutionLookupResult_t eReturn = eResolutionCacheMiss;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup );
 8007fe0:	69b8      	ldr	r0, [r7, #24]
 8007fe2:	f003 f897 	bl	800b114 <FreeRTOS_FindEndPointOnNetMask>
 8007fe6:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d11b      	bne.n	8008026 <eARPGetCacheEntryGateWay+0x62>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	69b8      	ldr	r0, [r7, #24]
 8007ff4:	f000 f836 	bl	8008064 <prvCacheLookup>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eResolutionCacheHit )
 8007ffc:	7ffb      	ldrb	r3, [r7, #31]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d017      	beq.n	8008032 <eARPGetCacheEntryGateWay+0x6e>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8008002:	2040      	movs	r0, #64	@ 0x40
 8008004:	f003 f894 	bl	800b130 <FreeRTOS_FindGateWay>
 8008008:	4602      	mov	r2, r0
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <eARPGetCacheEntryGateWay+0x5c>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	e008      	b.n	8008032 <eARPGetCacheEntryGateWay+0x6e>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	61bb      	str	r3, [r7, #24]
 8008024:	e005      	b.n	8008032 <eARPGetCacheEntryGateWay+0x6e>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eResolutionCacheMiss )
 8008032:	7ffb      	ldrb	r3, [r7, #31]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10f      	bne.n	8008058 <eARPGetCacheEntryGateWay+0x94>
        #endif
        {
            if( ulAddressToLookup == 0U )
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d102      	bne.n	8008044 <eARPGetCacheEntryGateWay+0x80>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eResolutionFailed;
 800803e:	2302      	movs	r3, #2
 8008040:	77fb      	strb	r3, [r7, #31]
 8008042:	e009      	b.n	8008058 <eARPGetCacheEntryGateWay+0x94>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	69b8      	ldr	r0, [r7, #24]
 800804a:	f000 f80b 	bl	8008064 <prvCacheLookup>
 800804e:	4603      	mov	r3, r0
 8008050:	77fb      	strb	r3, [r7, #31]
                                             ( eReturn == eResolutionCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 8008058:	7ffb      	ldrb	r3, [r7, #31]
    }
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eResolutionFailed.
 */
    static eResolutionLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                                     MACAddress_t * const pxMACAddress,
                                                     NetworkEndPoint_t ** ppxEndPoint )
    {
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eResolutionLookupResult_t eReturn = eResolutionCacheMiss;
 8008070:	2300      	movs	r3, #0
 8008072:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e02a      	b.n	80080d0 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800807a:	4a19      	ldr	r2, [pc, #100]	@ (80080e0 <prvCacheLookup+0x7c>)
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	4413      	add	r3, r2
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	429a      	cmp	r2, r3
 8008088:	d11f      	bne.n	80080ca <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800808a:	4a15      	ldr	r2, [pc, #84]	@ (80080e0 <prvCacheLookup+0x7c>)
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	4413      	add	r3, r2
 8008092:	330b      	adds	r3, #11
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eResolutionFailed;
 800809a:	2302      	movs	r3, #2
 800809c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eResolutionCacheHit;
                }

                break;
 800809e:	e01a      	b.n	80080d6 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80080a0:	68b8      	ldr	r0, [r7, #8]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	4a0e      	ldr	r2, [pc, #56]	@ (80080e0 <prvCacheLookup+0x7c>)
 80080a8:	4413      	add	r3, r2
 80080aa:	3304      	adds	r3, #4
 80080ac:	2206      	movs	r2, #6
 80080ae:	4619      	mov	r1, r3
 80080b0:	f00f fa09 	bl	80174c6 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 80080b4:	4a0a      	ldr	r2, [pc, #40]	@ (80080e0 <prvCacheLookup+0x7c>)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	4413      	add	r3, r2
 80080bc:	330c      	adds	r3, #12
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
                    eReturn = eResolutionCacheHit;
 80080c4:	2301      	movs	r3, #1
 80080c6:	74fb      	strb	r3, [r7, #19]
                break;
 80080c8:	e005      	b.n	80080d6 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	3301      	adds	r3, #1
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2b09      	cmp	r3, #9
 80080d4:	ddd1      	ble.n	800807a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 80080d6:	7cfb      	ldrb	r3, [r7, #19]
    }
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20000fe0 	.word	0x20000fe0

080080e4 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e048      	b.n	8008182 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 80080f0:	4a42      	ldr	r2, [pc, #264]	@ (80081fc <vARPAgeCache+0x118>)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	4413      	add	r3, r2
 80080f8:	330a      	adds	r3, #10
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d03d      	beq.n	800817c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8008100:	4a3e      	ldr	r2, [pc, #248]	@ (80081fc <vARPAgeCache+0x118>)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	4413      	add	r3, r2
 8008108:	330a      	adds	r3, #10
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	3b01      	subs	r3, #1
 800810e:	b2d9      	uxtb	r1, r3
 8008110:	4a3a      	ldr	r2, [pc, #232]	@ (80081fc <vARPAgeCache+0x118>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	4413      	add	r3, r2
 8008118:	330a      	adds	r3, #10
 800811a:	460a      	mov	r2, r1
 800811c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800811e:	4a37      	ldr	r2, [pc, #220]	@ (80081fc <vARPAgeCache+0x118>)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	4413      	add	r3, r2
 8008126:	330b      	adds	r3, #11
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d108      	bne.n	8008140 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800812e:	4a33      	ldr	r2, [pc, #204]	@ (80081fc <vARPAgeCache+0x118>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	4413      	add	r3, r2
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f8c9 	bl	80082d0 <FreeRTOS_OutputARPRequest>
 800813e:	e00f      	b.n	8008160 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8008140:	4a2e      	ldr	r2, [pc, #184]	@ (80081fc <vARPAgeCache+0x118>)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	4413      	add	r3, r2
 8008148:	330a      	adds	r3, #10
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d807      	bhi.n	8008160 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008150:	4a2a      	ldr	r2, [pc, #168]	@ (80081fc <vARPAgeCache+0x118>)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	4413      	add	r3, r2
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f8b8 	bl	80082d0 <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8008160:	4a26      	ldr	r2, [pc, #152]	@ (80081fc <vARPAgeCache+0x118>)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	4413      	add	r3, r2
 8008168:	330a      	adds	r3, #10
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d105      	bne.n	800817c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8008170:	4a22      	ldr	r2, [pc, #136]	@ (80081fc <vARPAgeCache+0x118>)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	4413      	add	r3, r2
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b09      	cmp	r3, #9
 8008186:	ddb3      	ble.n	80080f0 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8008188:	f00c ff3a 	bl	8015000 <xTaskGetTickCount>
 800818c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800818e:	4b1c      	ldr	r3, [pc, #112]	@ (8008200 <vARPAgeCache+0x11c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <vARPAgeCache+0xc2>
 8008196:	4b1a      	ldr	r3, [pc, #104]	@ (8008200 <vARPAgeCache+0x11c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d926      	bls.n	80081f4 <vARPAgeCache+0x110>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80081a6:	4b17      	ldr	r3, [pc, #92]	@ (8008204 <vARPAgeCache+0x120>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 80081ac:	e01c      	b.n	80081e8 <vARPAgeCache+0x104>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d011      	beq.n	80081e2 <vARPAgeCache+0xfe>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00d      	beq.n	80081e2 <vARPAgeCache+0xfe>
                {
                    if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) /* LCOV_EXCL_BR_LINE */
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d105      	bne.n	80081e2 <vARPAgeCache+0xfe>
                    {
                        FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4619      	mov	r1, r3
 80081dc:	68b8      	ldr	r0, [r7, #8]
 80081de:	f000 f813 	bl	8008208 <FreeRTOS_OutputARPRequest_Multi>
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e6:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1df      	bne.n	80081ae <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 80081ee:	4a04      	ldr	r2, [pc, #16]	@ (8008200 <vARPAgeCache+0x11c>)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6013      	str	r3, [r2, #0]
        }
    }
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000fe0 	.word	0x20000fe0
 8008200:	20001080 	.word	0x20001080
 8008204:	20002680 	.word	0x20002680

08008208 <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d152      	bne.n	80082c8 <FreeRTOS_OutputARPRequest_Multi+0xc0>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8008226:	2b00      	cmp	r3, #0
 8008228:	d04e      	beq.n	80082c8 <FreeRTOS_OutputARPRequest_Multi+0xc0>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800822a:	2100      	movs	r1, #0
 800822c:	202a      	movs	r0, #42	@ 0x2a
 800822e:	f009 f899 	bl	8011364 <pxGetNetworkBufferWithDescriptor>
 8008232:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d046      	beq.n	80082c8 <FreeRTOS_OutputARPRequest_Multi+0xc0>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 800824e:	6938      	ldr	r0, [r7, #16]
 8008250:	f000 f852 	bl	80082f8 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008258:	2b3b      	cmp	r3, #59	@ 0x3b
 800825a:	d812      	bhi.n	8008282 <FreeRTOS_OutputARPRequest_Multi+0x7a>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e008      	b.n	8008276 <FreeRTOS_OutputARPRequest_Multi+0x6e>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	4413      	add	r3, r2
 800826c:	2200      	movs	r2, #0
 800826e:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	3301      	adds	r3, #1
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b3b      	cmp	r3, #59	@ 0x3b
 800827a:	ddf3      	ble.n	8008264 <FreeRTOS_OutputARPRequest_Multi+0x5c>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	223c      	movs	r2, #60	@ 0x3c
 8008280:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8008282:	f002 f938 	bl	800a4f6 <xIsCallingFromIPTask>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00c      	beq.n	80082a6 <FreeRTOS_OutputARPRequest_Multi+0x9e>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d019      	beq.n	80082c8 <FreeRTOS_OutputARPRequest_Multi+0xc0>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800829e:	2201      	movs	r2, #1
 80082a0:	6939      	ldr	r1, [r7, #16]
 80082a2:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 80082a4:	e010      	b.n	80082c8 <FreeRTOS_OutputARPRequest_Multi+0xc0>
                    xSendEvent.eEventType = eNetworkTxEvent;
 80082a6:	2302      	movs	r3, #2
 80082a8:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80082ae:	f107 0308 	add.w	r3, r7, #8
 80082b2:	f04f 31ff 	mov.w	r1, #4294967295
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 fa70 	bl	800979c <xSendEventStructToIPTask>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d102      	bne.n	80082c8 <FreeRTOS_OutputARPRequest_Multi+0xc0>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80082c2:	6938      	ldr	r0, [r7, #16]
 80082c4:	f009 f8fa 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
    }
 80082c8:	bf00      	nop
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress );
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f002 ff1b 	bl	800b114 <FreeRTOS_FindEndPointOnNetMask>
 80082de:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <FreeRTOS_OutputARPRequest+0x1e>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7ff ff8d 	bl	8008208 <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 80082ee:	bf00      	nop
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10d      	bne.n	8008322 <vARPGenerateRequestPacket+0x2a>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830a:	b672      	cpsid	i
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	b662      	cpsie	i
 800831a:	613b      	str	r3, [r7, #16]
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	e7fd      	b.n	800831e <vARPGenerateRequestPacket+0x26>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008326:	2b29      	cmp	r3, #41	@ 0x29
 8008328:	d80d      	bhi.n	8008346 <vARPGenerateRequestPacket+0x4e>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832e:	b672      	cpsid	i
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	b662      	cpsie	i
 800833e:	60fb      	str	r3, [r7, #12]
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	e7fd      	b.n	8008342 <vARPGenerateRequestPacket+0x4a>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10d      	bne.n	800836a <vARPGenerateRequestPacket+0x72>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	b672      	cpsid	i
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	b662      	cpsie	i
 8008362:	60bb      	str	r3, [r7, #8]
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	e7fd      	b.n	8008366 <vARPGenerateRequestPacket+0x6e>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836e:	61fb      	str	r3, [r7, #28]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8008370:	4b1b      	ldr	r3, [pc, #108]	@ (80083e0 <vARPGenerateRequestPacket+0xe8>)
 8008372:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8008378:	2226      	movs	r2, #38	@ 0x26
 800837a:	69b9      	ldr	r1, [r7, #24]
 800837c:	6978      	ldr	r0, [r7, #20]
 800837e:	f00f f8a2 	bl	80174c6 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008386:	3338      	adds	r3, #56	@ 0x38
 8008388:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	3306      	adds	r3, #6
 800838e:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8008390:	2206      	movs	r2, #6
 8008392:	69b9      	ldr	r1, [r7, #24]
 8008394:	6978      	ldr	r0, [r7, #20]
 8008396:	f00f f896 	bl	80174c6 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839e:	3338      	adds	r3, #56	@ 0x38
 80083a0:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	3316      	adds	r3, #22
 80083a6:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80083a8:	2206      	movs	r2, #6
 80083aa:	69b9      	ldr	r1, [r7, #24]
 80083ac:	6978      	ldr	r0, [r7, #20]
 80083ae:	f00f f88a 	bl	80174c6 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	331c      	adds	r3, #28
 80083bc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695a      	ldr	r2, [r3, #20]
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	222a      	movs	r2, #42	@ 0x2a
 80083d6:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 80083d8:	bf00      	nop
 80083da:	3720      	adds	r7, #32
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	0801866c 	.word	0x0801866c

080083e4 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
    void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
    {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
        if( pxEndPoint != NULL )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d01b      	beq.n	800842a <FreeRTOS_ClearARP+0x46>
        {
            BaseType_t x;

            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e014      	b.n	8008422 <FreeRTOS_ClearARP+0x3e>
            {
                if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 80083f8:	4a10      	ldr	r2, [pc, #64]	@ (800843c <FreeRTOS_ClearARP+0x58>)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	4413      	add	r3, r2
 8008400:	330c      	adds	r3, #12
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	429a      	cmp	r2, r3
 8008408:	d108      	bne.n	800841c <FreeRTOS_ClearARP+0x38>
                {
                    ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	4a0b      	ldr	r2, [pc, #44]	@ (800843c <FreeRTOS_ClearARP+0x58>)
 8008410:	4413      	add	r3, r2
 8008412:	2210      	movs	r2, #16
 8008414:	2100      	movs	r1, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f00e ff7b 	bl	8017312 <memset>
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3301      	adds	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b09      	cmp	r3, #9
 8008426:	dde7      	ble.n	80083f8 <FreeRTOS_ClearARP+0x14>
        }
        else
        {
            ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
        }
    }
 8008428:	e004      	b.n	8008434 <FreeRTOS_ClearARP+0x50>
            ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 800842a:	22a0      	movs	r2, #160	@ 0xa0
 800842c:	2100      	movs	r1, #0
 800842e:	4803      	ldr	r0, [pc, #12]	@ (800843c <FreeRTOS_ClearARP+0x58>)
 8008430:	f00e ff6f 	bl	8017312 <memset>
    }
 8008434:	bf00      	nop
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	20000fe0 	.word	0x20000fe0

08008440 <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8008444:	f000 fb84 	bl	8008b50 <vDNSCallbackInitialise>
        }
 8008448:	bf00      	nop
 800844a:	bd80      	pop	{r7, pc}

0800844c <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	61fb      	str	r3, [r7, #28]
        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        /* 'pcName' might not be used when DNS cache is disabled. */
        ( void ) pcName;

        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 800845c:	2058      	movs	r0, #88	@ 0x58
 800845e:	f00e fbcb 	bl	8016bf8 <pvPortMalloc>
 8008462:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d033      	beq.n	80084d2 <pxNew_AddrInfo+0x86>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800846e:	2258      	movs	r2, #88	@ 0x58
 8008470:	2100      	movs	r1, #0
 8008472:	69f8      	ldr	r0, [r7, #28]
 8008474:	f00e ff4d 	bl	8017312 <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	3338      	adds	r3, #56	@ 0x38
 8008486:	221d      	movs	r2, #29
 8008488:	68f9      	ldr	r1, [r7, #12]
 800848a:	4618      	mov	r0, r3
 800848c:	f00e ff49 	bl	8017322 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f103 0220 	add.w	r2, r3, #32
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d10e      	bne.n	80084c6 <pxNew_AddrInfo+0x7a>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f002 fa7d 	bl	800a9a8 <ulChar2u32>
 80084ae:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	2202      	movs	r2, #2
 80084bc:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	2204      	movs	r2, #4
 80084c2:	611a      	str	r2, [r3, #16]
                       }
                       break;
 80084c4:	e005      	b.n	80084d2 <pxNew_AddrInfo+0x86>

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );

                    vPortFree( pvBuffer );
 80084c6:	69b8      	ldr	r0, [r7, #24]
 80084c8:	f00e fc64 	bl	8016d94 <vPortFree>
                    pxAddrInfo = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61fb      	str	r3, [r7, #28]

                    break;
 80084d0:	bf00      	nop
            }
        }

        return pxAddrInfo;
 80084d2:	69fb      	ldr	r3, [r7, #28]
    }
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00b      	beq.n	8008506 <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 80084ee:	e007      	b.n	8008500 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f00e fc4c 	bl	8016d94 <vPortFree>
                pxIterator = pxNext;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f4      	bne.n	80084f0 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800850e:	b580      	push	{r7, lr}
 8008510:	b088      	sub	sp, #32
 8008512:	af02      	add	r7, sp, #8
 8008514:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fcc8 	bl	8009eac <uxIPHeaderSizePacket>
 800851c:	4603      	mov	r3, r0
 800851e:	3316      	adds	r3, #22
 8008520:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	429a      	cmp	r2, r3
 800852a:	d81f      	bhi.n	800856c <ulDNSHandlePacket+0x5e>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b0b      	cmp	r3, #11
 800853a:	d917      	bls.n	800856c <ulDNSHandlePacket+0x5e>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	4413      	add	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 800854e:	f107 0208 	add.w	r2, r7, #8
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	2300      	movs	r3, #0
 8008556:	6939      	ldr	r1, [r7, #16]
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fbdf 	bl	8008d1c <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <ulDNSHandlePacket+0x5e>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff ffb8 	bl	80084dc <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 800856c:	2300      	movs	r3, #0
    }
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008576:	b580      	push	{r7, lr}
 8008578:	b086      	sub	sp, #24
 800857a:	af02      	add	r7, sp, #8
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	607a      	str	r2, [r7, #4]
 8008582:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	2300      	movs	r3, #0
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 f818 	bl	80085c4 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8008594:	2301      	movs	r3, #1
    }
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 80085a4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80085a8:	2100      	movs	r1, #0
 80085aa:	4804      	ldr	r0, [pc, #16]	@ (80085bc <FreeRTOS_dnsclear+0x1c>)
 80085ac:	f00e feb1 	bl	8017312 <memset>
        uxFreeEntry = 0U;
 80085b0:	4b03      	ldr	r3, [pc, #12]	@ (80085c0 <FreeRTOS_dnsclear+0x20>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
    }
 80085b6:	bf00      	nop
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20001090 	.word	0x20001090
 80085c0:	200012e8 	.word	0x200012e8

080085c4 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b098      	sub	sp, #96	@ 0x60
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 80085d2:	f00c fd15 	bl	8015000 <xTaskGetTickCount>
 80085d6:	65f8      	str	r0, [r7, #92]	@ 0x5c
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10d      	bne.n	80085fa <FreeRTOS_ProcessDNSCache+0x36>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	b672      	cpsid	i
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	b662      	cpsie	i
 80085f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <FreeRTOS_ProcessDNSCache+0x32>

        if( xLookUp != pdFALSE )
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <FreeRTOS_ProcessDNSCache+0x42>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / configTICK_RATE_HZ ) );
 8008606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008608:	4a26      	ldr	r2, [pc, #152]	@ (80086a4 <FreeRTOS_ProcessDNSCache+0xe0>)
 800860a:	fba2 2303 	umull	r2, r3, r2, r3
 800860e:	099b      	lsrs	r3, r3, #6
 8008610:	65bb      	str	r3, [r7, #88]	@ 0x58
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8008612:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008616:	461a      	mov	r2, r3
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f844 	bl	80086a8 <prvFindEntryIndex>
 8008620:	6578      	str	r0, [r7, #84]	@ 0x54

        if( xResult == pdTRUE )
 8008622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008624:	2b01      	cmp	r3, #1
 8008626:	d110      	bne.n	800864a <FreeRTOS_ProcessDNSCache+0x86>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d106      	bne.n	800863c <FreeRTOS_ProcessDNSCache+0x78>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 800862e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008632:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	f000 f87f 	bl	8008738 <prvGetCacheIPEntry>
 800863a:	e013      	b.n	8008664 <FreeRTOS_ProcessDNSCache+0xa0>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 800863c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800863e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	f000 f8ca 	bl	80087dc <prvUpdateCacheEntry>
 8008648:	e00c      	b.n	8008664 <FreeRTOS_ProcessDNSCache+0xa0>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d103      	bne.n	8008658 <FreeRTOS_ProcessDNSCache+0x94>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e005      	b.n	8008664 <FreeRTOS_ProcessDNSCache+0xa0>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8008658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f8f2 	bl	8008848 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <FreeRTOS_ProcessDNSCache+0xae>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d012      	beq.n	8008698 <FreeRTOS_ProcessDNSCache+0xd4>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 8008672:	2302      	movs	r3, #2
 8008674:	653b      	str	r3, [r7, #80]	@ 0x50

                switch( pxIP->xIs_IPv6 )
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d103      	bne.n	8008686 <FreeRTOS_ProcessDNSCache+0xc2>
                            break;
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	63bb      	str	r3, [r7, #56]	@ 0x38
                            break;
 8008684:	e000      	b.n	8008688 <FreeRTOS_ProcessDNSCache+0xc4>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
                        break;
 8008686:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8008688:	f107 0210 	add.w	r2, r7, #16
 800868c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8008690:	2328      	movs	r3, #40	@ 0x28
 8008692:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008694:	f003 fdb0 	bl	800c1f8 <FreeRTOS_inet_ntop>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 8008698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    }
 800869a:	4618      	mov	r0, r3
 800869c:	3760      	adds	r7, #96	@ 0x60
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	10624dd3 	.word	0x10624dd3

080086a8 <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 80086b8:	2300      	movs	r3, #0
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	e031      	b.n	8008722 <prvFindEntryIndex+0x7a>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 80086be:	491d      	ldr	r1, [pc, #116]	@ (8008734 <prvFindEntryIndex+0x8c>)
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4613      	mov	r3, r2
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	1a9b      	subs	r3, r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	3314      	adds	r3, #20
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d022      	beq.n	800871a <prvFindEntryIndex+0x72>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	4613      	mov	r3, r2
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	3310      	adds	r3, #16
 80086e0:	4a14      	ldr	r2, [pc, #80]	@ (8008734 <prvFindEntryIndex+0x8c>)
 80086e2:	4413      	add	r3, r2
 80086e4:	3304      	adds	r3, #4
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7f7 fda9 	bl	8000240 <strcmp>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d113      	bne.n	800871c <prvFindEntryIndex+0x74>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	6919      	ldr	r1, [r3, #16]
 80086f8:	480e      	ldr	r0, [pc, #56]	@ (8008734 <prvFindEntryIndex+0x8c>)
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4613      	mov	r3, r2
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4403      	add	r3, r0
 8008706:	3310      	adds	r3, #16
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4299      	cmp	r1, r3
 800870c:	d106      	bne.n	800871c <prvFindEntryIndex+0x74>
                {
                    xReturn = pdTRUE;
 800870e:	2301      	movs	r3, #1
 8008710:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	601a      	str	r2, [r3, #0]
                    break;
 8008718:	e006      	b.n	8008728 <prvFindEntryIndex+0x80>
                continue;
 800871a:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	3301      	adds	r3, #1
 8008720:	613b      	str	r3, [r7, #16]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b09      	cmp	r3, #9
 8008726:	d9ca      	bls.n	80086be <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8008728:	697b      	ldr	r3, [r7, #20]
    }
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20001090 	.word	0x20001090

08008738 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 800874a:	4923      	ldr	r1, [pc, #140]	@ (80087d8 <prvGetCacheIPEntry+0xa0>)
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4613      	mov	r3, r2
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	1a9b      	subs	r3, r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	440b      	add	r3, r1
 8008758:	3338      	adds	r3, #56	@ 0x38
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 8008762:	491d      	ldr	r1, [pc, #116]	@ (80087d8 <prvGetCacheIPEntry+0xa0>)
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4613      	mov	r3, r2
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	3334      	adds	r3, #52	@ 0x34
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	429a      	cmp	r2, r3
 8008778:	d21d      	bcs.n	80087b6 <prvGetCacheIPEntry+0x7e>
                ulIPAddressIndex = ucIndex;

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	461a      	mov	r2, r3
 800877e:	0092      	lsls	r2, r2, #2
 8008780:	441a      	add	r2, r3
 8008782:	0093      	lsls	r3, r2, #2
 8008784:	461a      	mov	r2, r3
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	460b      	mov	r3, r1
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	1a5b      	subs	r3, r3, r1
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	4a11      	ldr	r2, [pc, #68]	@ (80087d8 <prvGetCacheIPEntry+0xa0>)
 8008794:	4413      	add	r3, r2
 8008796:	2214      	movs	r2, #20
 8008798:	4619      	mov	r1, r3
 800879a:	68b8      	ldr	r0, [r7, #8]
 800879c:	f00e fe93 	bl	80174c6 <memcpy>
            isRead = pdTRUE;
 80087a0:	2301      	movs	r3, #1
 80087a2:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d011      	beq.n	80087ce <prvGetCacheIPEntry+0x96>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f89e 	bl	80088f0 <prvReadDNSCache>
 80087b4:	e00b      	b.n	80087ce <prvGetCacheIPEntry+0x96>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 80087b6:	4908      	ldr	r1, [pc, #32]	@ (80087d8 <prvGetCacheIPEntry+0xa0>)
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4613      	mov	r3, r2
 80087bc:	011b      	lsls	r3, r3, #4
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	3314      	adds	r3, #20
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 80087ce:	69fb      	ldr	r3, [r7, #28]
    }
 80087d0:	4618      	mov	r0, r3
 80087d2:	3720      	adds	r7, #32
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20001090 	.word	0x20001090

080087dc <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	461a      	mov	r2, r3
 80087f2:	0092      	lsls	r2, r2, #2
 80087f4:	441a      	add	r2, r3
 80087f6:	0093      	lsls	r3, r2, #2
 80087f8:	461a      	mov	r2, r3
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	460b      	mov	r3, r1
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	1a5b      	subs	r3, r3, r1
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	4a0f      	ldr	r2, [pc, #60]	@ (8008844 <prvUpdateCacheEntry+0x68>)
 8008808:	4413      	add	r3, r2
 800880a:	2214      	movs	r2, #20
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4618      	mov	r0, r3
 8008810:	f00e fe59 	bl	80174c6 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8008814:	490b      	ldr	r1, [pc, #44]	@ (8008844 <prvUpdateCacheEntry+0x68>)
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4613      	mov	r3, r2
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	1a9b      	subs	r3, r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	3334      	adds	r3, #52	@ 0x34
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008828:	4906      	ldr	r1, [pc, #24]	@ (8008844 <prvUpdateCacheEntry+0x68>)
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4613      	mov	r3, r2
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	1a9b      	subs	r3, r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	3338      	adds	r3, #56	@ 0x38
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	601a      	str	r2, [r3, #0]
    }
 800883c:	bf00      	nop
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20001090 	.word	0x20001090

08008848 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7f7 fcfc 	bl	8000254 <strlen>
 800885c:	4603      	mov	r3, r0
 800885e:	2b1d      	cmp	r3, #29
 8008860:	d83d      	bhi.n	80088de <prvInsertCacheEntry+0x96>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 8008862:	4b21      	ldr	r3, [pc, #132]	@ (80088e8 <prvInsertCacheEntry+0xa0>)
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	4613      	mov	r3, r2
 8008868:	011b      	lsls	r3, r3, #4
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	3310      	adds	r3, #16
 8008870:	4a1e      	ldr	r2, [pc, #120]	@ (80088ec <prvInsertCacheEntry+0xa4>)
 8008872:	4413      	add	r3, r2
 8008874:	3304      	adds	r3, #4
 8008876:	221e      	movs	r2, #30
 8008878:	68f9      	ldr	r1, [r7, #12]
 800887a:	4618      	mov	r0, r3
 800887c:	f00e fd51 	bl	8017322 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8008880:	4b19      	ldr	r3, [pc, #100]	@ (80088e8 <prvInsertCacheEntry+0xa0>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4a17      	ldr	r2, [pc, #92]	@ (80088ec <prvInsertCacheEntry+0xa4>)
 800888e:	4413      	add	r3, r2
 8008890:	2214      	movs	r2, #20
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4618      	mov	r0, r3
 8008896:	f00e fe16 	bl	80174c6 <memcpy>

            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 800889a:	4b13      	ldr	r3, [pc, #76]	@ (80088e8 <prvInsertCacheEntry+0xa0>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4913      	ldr	r1, [pc, #76]	@ (80088ec <prvInsertCacheEntry+0xa4>)
 80088a0:	4613      	mov	r3, r2
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	3334      	adds	r3, #52	@ 0x34
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80088b0:	4b0d      	ldr	r3, [pc, #52]	@ (80088e8 <prvInsertCacheEntry+0xa0>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	490d      	ldr	r1, [pc, #52]	@ (80088ec <prvInsertCacheEntry+0xa4>)
 80088b6:	4613      	mov	r3, r2
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	3338      	adds	r3, #56	@ 0x38
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	601a      	str	r2, [r3, #0]
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 80088c6:	4b08      	ldr	r3, [pc, #32]	@ (80088e8 <prvInsertCacheEntry+0xa0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3301      	adds	r3, #1
 80088cc:	4a06      	ldr	r2, [pc, #24]	@ (80088e8 <prvInsertCacheEntry+0xa0>)
 80088ce:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 80088d0:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <prvInsertCacheEntry+0xa0>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b0a      	cmp	r3, #10
 80088d6:	d102      	bne.n	80088de <prvInsertCacheEntry+0x96>
            {
                uxFreeEntry = 0;
 80088d8:	4b03      	ldr	r3, [pc, #12]	@ (80088e8 <prvInsertCacheEntry+0xa0>)
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80088de:	bf00      	nop
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	200012e8 	.word	0x200012e8
 80088ec:	20001090 	.word	0x20001090

080088f0 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 80088fa:	2301      	movs	r3, #1
 80088fc:	613b      	str	r3, [r7, #16]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	61bb      	str	r3, [r7, #24]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	617b      	str	r3, [r7, #20]
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8008906:	2300      	movs	r3, #0
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	e031      	b.n	8008970 <prvReadDNSCache+0x80>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	461a      	mov	r2, r3
 8008910:	0092      	lsls	r2, r2, #2
 8008912:	441a      	add	r2, r3
 8008914:	0093      	lsls	r3, r2, #2
 8008916:	461a      	mov	r2, r3
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	1a5b      	subs	r3, r3, r1
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	4a17      	ldr	r2, [pc, #92]	@ (8008984 <prvReadDNSCache+0x94>)
 8008926:	4413      	add	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d111      	bne.n	8008956 <prvReadDNSCache+0x66>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	3310      	adds	r3, #16
 8008942:	4a10      	ldr	r2, [pc, #64]	@ (8008984 <prvReadDNSCache+0x94>)
 8008944:	4413      	add	r3, r2
 8008946:	3304      	adds	r3, #4
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	2102      	movs	r1, #2
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fd7d 	bl	800844c <pxNew_AddrInfo>
 8008952:	61b8      	str	r0, [r7, #24]
                       }
                       break;
 8008954:	e000      	b.n	8008958 <prvReadDNSCache+0x68>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8008956:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00d      	beq.n	800897a <prvReadDNSCache+0x8a>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	331c      	adds	r3, #28
 8008968:	617b      	str	r3, [r7, #20]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	3301      	adds	r3, #1
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	429a      	cmp	r2, r3
 8008976:	d3c9      	bcc.n	800890c <prvReadDNSCache+0x1c>
        }
    }
 8008978:	e000      	b.n	800897c <prvReadDNSCache+0x8c>
                break;
 800897a:	bf00      	nop
    }
 800897c:	bf00      	nop
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	20001090 	.word	0x20001090

08008988 <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	@ 0x28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8008992:	2300      	movs	r3, #0
 8008994:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xCallbackList );
 8008996:	4b28      	ldr	r3, [pc, #160]	@ (8008a38 <xDNSDoCallback+0xb0>)
 8008998:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 80089ac:	f00c fa7a 	bl	8014ea4 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xCallbackList );
 80089b0:	4b22      	ldr	r3, [pc, #136]	@ (8008a3c <xDNSDoCallback+0xb4>)
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	623b      	str	r3, [r7, #32]
 80089b6:	e029      	b.n	8008a0c <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) pxEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d101      	bne.n	80089cc <xDNSDoCallback+0x44>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <xDNSDoCallback+0x46>
 80089cc:	2300      	movs	r3, #0
 80089ce:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d117      	bne.n	8008a06 <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3314      	adds	r3, #20
 80089e6:	4618      	mov	r0, r3
 80089e8:	f00b f86b 	bl	8013ac2 <uxListRemove>
                    vPortFree( pxCallback );
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f00e f9d1 	bl	8016d94 <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80089f2:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <xDNSDoCallback+0xb4>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 80089fa:	2000      	movs	r0, #0
 80089fc:	f001 fcc6 	bl	800a38c <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8008a00:	2301      	movs	r3, #1
 8008a02:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8008a04:	e006      	b.n	8008a14 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) pxEnd;
 8008a0c:	6a3a      	ldr	r2, [r7, #32]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d1d1      	bne.n	80089b8 <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008a14:	f00c fa54 	bl	8014ec0 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d006      	beq.n	8008a2c <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	69b9      	ldr	r1, [r7, #24]
 8008a2a:	4798      	blx	r3
        }

        return xResult;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3728      	adds	r7, #40	@ 0x28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	200012f4 	.word	0x200012f4
 8008a3c:	200012ec 	.word	0x200012ec

08008a40 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08c      	sub	sp, #48	@ 0x30
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xCallbackList );
 8008a48:	4b3f      	ldr	r3, [pc, #252]	@ (8008b48 <vDNSCheckCallBack+0x108>)
 8008a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8008a4c:	f107 030c 	add.w	r3, r7, #12
 8008a50:	4618      	mov	r0, r3
 8008a52:	f00a ffac 	bl	80139ae <vListInitialise>

        vTaskSuspendAll();
 8008a56:	f00c fa25 	bl	8014ea4 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xCallbackList );
 8008a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8008b4c <vDNSCheckCallBack+0x10c>)
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a60:	e02e      	b.n	8008ac0 <vDNSCheckCallBack+0x80>
                 pxIterator != pxEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00d      	beq.n	8008a90 <vDNSCheckCallBack+0x50>
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d108      	bne.n	8008a90 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	3314      	adds	r3, #20
 8008a82:	4618      	mov	r0, r3
 8008a84:	f00b f81d 	bl	8013ac2 <uxListRemove>
                    vPortFree( pxCallback );
 8008a88:	6a38      	ldr	r0, [r7, #32]
 8008a8a:	f00e f983 	bl	8016d94 <vPortFree>
 8008a8e:	e017      	b.n	8008ac0 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	3308      	adds	r3, #8
 8008a94:	6a3a      	ldr	r2, [r7, #32]
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f00c fd8b 	bl	80155b4 <xTaskCheckForTimeOut>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00d      	beq.n	8008ac0 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	3314      	adds	r3, #20
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f00b f80a 	bl	8013ac2 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	f103 0214 	add.w	r2, r3, #20
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f00a ffa4 	bl	8013a08 <vListInsertEnd>
                 pxIterator != pxEnd; )
 8008ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d1cc      	bne.n	8008a62 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008ac8:	f00c f9fa 	bl	8014ec0 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d02f      	beq.n	8008b32 <vDNSCheckCallBack+0xf2>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            pxEnd = listGET_END_MARKER( &xTempList );
 8008ad2:	f107 030c 	add.w	r3, r7, #12
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xTempList );
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ade:	e024      	b.n	8008b2a <vDNSCheckCallBack+0xea>
                 pxIterator != pxEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8008ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8008aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d009      	beq.n	8008b08 <vDNSCheckCallBack+0xc8>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008afa:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b00:	6911      	ldr	r1, [r2, #16]
 8008b02:	2200      	movs	r2, #0
 8008b04:	4798      	blx	r3
 8008b06:	e008      	b.n	8008b1a <vDNSCheckCallBack+0xda>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 8008b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b0e:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b14:	6911      	ldr	r1, [r2, #16]
 8008b16:	2200      	movs	r2, #0
 8008b18:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	3314      	adds	r3, #20
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f00a ffcf 	bl	8013ac2 <uxListRemove>
                vPortFree( pxCallback );
 8008b24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b26:	f00e f935 	bl	8016d94 <vPortFree>
                 pxIterator != pxEnd;
 8008b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d1d6      	bne.n	8008ae0 <vDNSCheckCallBack+0xa0>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008b32:	4b06      	ldr	r3, [pc, #24]	@ (8008b4c <vDNSCheckCallBack+0x10c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <vDNSCheckCallBack+0x100>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	f001 fc26 	bl	800a38c <vIPSetDNSTimerEnableState>
        }
    }
 8008b40:	bf00      	nop
 8008b42:	3730      	adds	r7, #48	@ 0x30
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	200012f4 	.word	0x200012f4
 8008b4c:	200012ec 	.word	0x200012ec

08008b50 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 8008b54:	4802      	ldr	r0, [pc, #8]	@ (8008b60 <vDNSCallbackInitialise+0x10>)
 8008b56:	f00a ff2a 	bl	80139ae <vListInitialise>
    }
 8008b5a:	bf00      	nop
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	200012ec 	.word	0x200012ec

08008b64 <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
        size_t DNS_ReadNameField( ParseSet_t * pxSet,
                                  size_t uxDestLen )
        {
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	@ 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
            size_t uxNameLen = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61fb      	str	r3, [r7, #28]
            size_t uxIndex = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61bb      	str	r3, [r7, #24]
            size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	613b      	str	r3, [r7, #16]
            const uint8_t * pucByte = pxSet->pucByte;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	60fb      	str	r3, [r7, #12]

            /* uxCount gets the values from pucByte and counts down to 0.
             * No need to have a different type than that of pucByte */
            size_t uxCount;

            if( uxSourceLen == ( size_t ) 0U )
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <DNS_ReadNameField+0x2a>
            {
                /* Return 0 value in case of error. */
                uxIndex = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	e069      	b.n	8008c62 <DNS_ReadNameField+0xfe>
            }

            /* Determine if the name is the fully coded name, or an offset to the name
             * elsewhere in the message. */
            else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	4413      	add	r3, r2
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008b9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b9c:	d144      	bne.n	8008c28 <DNS_ReadNameField+0xc4>
            {
                /* Jump over the two byte offset. */
                if( uxSourceLen > sizeof( uint16_t ) )
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d903      	bls.n	8008bac <DNS_ReadNameField+0x48>
                {
                    uxIndex += sizeof( uint16_t );
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	3302      	adds	r3, #2
 8008ba8:	61bb      	str	r3, [r7, #24]
 8008baa:	e05a      	b.n	8008c62 <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61bb      	str	r3, [r7, #24]
 8008bb0:	e057      	b.n	8008c62 <DNS_ReadNameField+0xfe>
                /* 'uxIndex' points to the full name. Walk over the string. */
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
                {
                    /* If this is not the first time through the loop, then add a
                     * separator in the output. */
                    if( ( uxNameLen > 0U ) )
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d008      	beq.n	8008bca <DNS_ReadNameField+0x66>
                    {
                        /*
                         * uxNameLen can never be greater than uxDestLen, since there are checks
                         * outside this condition, so the check is removed.
                         */
                        pxSet->pcName[ uxNameLen ] = '.';
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	332c      	adds	r3, #44	@ 0x2c
 8008bc0:	222e      	movs	r2, #46	@ 0x2e
 8008bc2:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
                    }

                    /* Process the first/next sub-string. */
                    uxCount = ( size_t ) pucByte[ uxIndex ];
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	4413      	add	r3, r2
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	617b      	str	r3, [r7, #20]

                    /* uxIndex should point to the first character now, unless uxCount
                     * is an offset field. */
                    uxIndex++;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	61bb      	str	r3, [r7, #24]

                    if( ( uxIndex + uxCount ) > uxSourceLen )
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	4413      	add	r3, r2
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d202      	bcs.n	8008bec <DNS_ReadNameField+0x88>
                    {
                        uxIndex = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	61bb      	str	r3, [r7, #24]
                        break;
 8008bea:	e027      	b.n	8008c3c <DNS_ReadNameField+0xd8>
                    }

                    if( ( uxNameLen + uxCount ) >= uxDestLen )
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d812      	bhi.n	8008c1e <DNS_ReadNameField+0xba>
                    {
                        uxIndex = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61bb      	str	r3, [r7, #24]
                        break;
 8008bfc:	e01e      	b.n	8008c3c <DNS_ReadNameField+0xd8>
                    {
                        /*
                         * uxNameLen can never be greater than uxDestLen, since there are checks
                         * outside this condition, so the check is removed.
                         */
                        pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	4413      	add	r3, r2
 8008c04:	7819      	ldrb	r1, [r3, #0]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	332c      	adds	r3, #44	@ 0x2c
 8008c0e:	460a      	mov	r2, r1
 8008c10:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	3301      	adds	r3, #1
 8008c16:	61fb      	str	r3, [r7, #28]
                        uxIndex++;
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	61bb      	str	r3, [r7, #24]
                    while( uxCount-- != 0U )
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	1e5a      	subs	r2, r3, #1
 8008c22:	617a      	str	r2, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1ea      	bne.n	8008bfe <DNS_ReadNameField+0x9a>
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d205      	bcs.n	8008c3c <DNS_ReadNameField+0xd8>
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	4413      	add	r3, r2
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1ba      	bne.n	8008bb2 <DNS_ReadNameField+0x4e>
                    }
                }

                /* Confirm that a fully formed name was found. */
                if( uxIndex > 0U )
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00f      	beq.n	8008c62 <DNS_ReadNameField+0xfe>
                     * failing above check. Whenever we exit the loop otherwise, either
                     * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                     * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                     * case).
                     */
                    if( uxIndex < uxSourceLen )
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d209      	bcs.n	8008c5e <DNS_ReadNameField+0xfa>
                    {
                        pxSet->pcName[ uxNameLen ] = '\0';
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	332c      	adds	r3, #44	@ 0x2c
 8008c52:	2200      	movs	r2, #0
 8008c54:	701a      	strb	r2, [r3, #0]
                        uxIndex++;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	61bb      	str	r3, [r7, #24]
 8008c5c:	e001      	b.n	8008c62 <DNS_ReadNameField+0xfe>
                    }
                    else
                    {
                        uxIndex = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61bb      	str	r3, [r7, #24]
                    }
                }
            }

            return uxIndex;
 8008c62:	69bb      	ldr	r3, [r7, #24]
        }
 8008c64:	4618      	mov	r0, r3
 8008c66:	3724      	adds	r7, #36	@ 0x24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	613b      	str	r3, [r7, #16]
 8008c8c:	e03f      	b.n	8008d0e <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	4413      	add	r3, r2
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c9c:	d11f      	bne.n	8008cde <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d903      	bls.n	8008cac <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	3302      	adds	r3, #2
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	e030      	b.n	8008d0e <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	613b      	str	r3, [r7, #16]
 8008cb0:	e02d      	b.n	8008d0e <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d908      	bls.n	8008cd8 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	e002      	b.n	8008cde <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	613b      	str	r3, [r7, #16]
                    break;
 8008cdc:	e008      	b.n	8008cf0 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <DNS_SkipNameField+0x80>
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d8e0      	bhi.n	8008cb2 <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00b      	beq.n	8008d0e <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3301      	adds	r3, #1
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	e001      	b.n	8008d0e <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008d0e:	693b      	ldr	r3, [r7, #16]
    }
 8008d10:	4618      	mov	r0, r3
 8008d12:	371c      	adds	r7, #28
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b0a0      	sub	sp, #128	@ 0x80
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	67bb      	str	r3, [r7, #120]	@ 0x78
        uint32_t ulIPAddress = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	677b      	str	r3, [r7, #116]	@ 0x74
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8008d32:	f107 0318 	add.w	r3, r7, #24
 8008d36:	2254      	movs	r2, #84	@ 0x54
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f00e fae9 	bl	8017312 <memset>
        xSet.usPortNumber = usPort;
 8008d40:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008d44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8008d46:	f107 0318 	add.w	r3, r7, #24
 8008d4a:	334c      	adds	r3, #76	@ 0x4c
 8008d4c:	66bb      	str	r3, [r7, #104]	@ 0x68

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b0b      	cmp	r3, #11
 8008d56:	d802      	bhi.n	8008d5e <DNS_ParseDNSReply+0x42>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d5c:	e08d      	b.n	8008e7a <DNS_ParseDNSReply+0x15e>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	62bb      	str	r3, [r7, #40]	@ 0x28
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	61bb      	str	r3, [r7, #24]
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	623b      	str	r3, [r7, #32]
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	627b      	str	r3, [r7, #36]	@ 0x24
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8008d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7e:	3b0c      	subs	r3, #12
 8008d80:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	83bb      	strh	r3, [r7, #28]
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	88db      	ldrh	r3, [r3, #6]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	83fb      	strh	r3, [r7, #30]

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	885b      	ldrh	r3, [r3, #2]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	f248 030f 	movw	r3, #32783	@ 0x800f
 8008d9e:	4013      	ands	r3, r2
 8008da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008da4:	d112      	bne.n	8008dcc <DNS_ParseDNSReply+0xb0>
                {
                    xIsResponse = pdTRUE;
 8008da6:	2301      	movs	r3, #1
 8008da8:	66fb      	str	r3, [r7, #108]	@ 0x6c

                    if( xSet.usAnswers == 0U )
 8008daa:	8bfb      	ldrh	r3, [r7, #30]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <DNS_ParseDNSReply+0x9a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8008db0:	2300      	movs	r3, #0
 8008db2:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8008db4:	e061      	b.n	8008e7a <DNS_ParseDNSReply+0x15e>
                    }

                    if( xSet.usQuestions == 0U )
 8008db6:	8bbb      	ldrh	r3, [r7, #28]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10d      	bne.n	8008dd8 <DNS_ParseDNSReply+0xbc>
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 8008dbc:	f107 0318 	add.w	r3, r7, #24
 8008dc0:	211e      	movs	r1, #30
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fece 	bl	8008b64 <DNS_ReadNameField>
 8008dc8:	6738      	str	r0, [r7, #112]	@ 0x70
 8008dca:	e005      	b.n	8008dd8 <DNS_ParseDNSReply+0xbc>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8008dcc:	8bbb      	ldrh	r3, [r7, #28]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <DNS_ParseDNSReply+0xbc>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8008dd6:	e050      	b.n	8008e7a <DNS_ParseDNSReply+0x15e>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8008dde:	e036      	b.n	8008e4e <DNS_ParseDNSReply+0x132>
                        }
                    }
                    #endif

                    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                        if( x == 0U )
 8008de0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d107      	bne.n	8008df8 <DNS_ParseDNSReply+0xdc>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8008de8:	f107 0318 	add.w	r3, r7, #24
 8008dec:	211e      	movs	r1, #30
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff feb8 	bl	8008b64 <DNS_ReadNameField>
 8008df4:	6738      	str	r0, [r7, #112]	@ 0x70
 8008df6:	e006      	b.n	8008e06 <DNS_ParseDNSReply+0xea>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS || ipconfigUSE_MDNS || ipconfigUSE_LLMNR */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff ff36 	bl	8008c70 <DNS_SkipNameField>
 8008e04:	6738      	str	r0, [r7, #112]	@ 0x70
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8008e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <DNS_ParseDNSReply+0xf6>
                    {
                        xReturn = pdFALSE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8008e10:	e022      	b.n	8008e58 <DNS_ParseDNSReply+0x13c>
                    }

                    uxBytesRead += uxResult;
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e16:	4413      	add	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e1e:	4413      	add	r3, r2
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d906      	bls.n	8008e3e <DNS_ParseDNSReply+0x122>
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	3304      	adds	r3, #4
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e38:	3b04      	subs	r3, #4
 8008e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e3c:	e002      	b.n	8008e44 <DNS_ParseDNSReply+0x128>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8008e42:	e009      	b.n	8008e58 <DNS_ParseDNSReply+0x13c>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008e44:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8008e48:	3301      	adds	r3, #1
 8008e4a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8008e4e:	8bbb      	ldrh	r3, [r7, #28]
 8008e50:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d3c3      	bcc.n	8008de0 <DNS_ParseDNSReply+0xc4>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8008e58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <DNS_ParseDNSReply+0x15c>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d10a      	bne.n	8008e7a <DNS_ParseDNSReply+0x15e>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8008e64:	f107 0214 	add.w	r2, r7, #20
 8008e68:	f107 0318 	add.w	r3, r7, #24
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f813 	bl	8008e9a <parseDNSAnswer>
 8008e74:	6778      	str	r0, [r7, #116]	@ 0x74
 8008e76:	e000      	b.n	8008e7a <DNS_ParseDNSReply+0x15e>
                    break;
 8008e78:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d102      	bne.n	8008e86 <DNS_ParseDNSReply+0x16a>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008e80:	2300      	movs	r3, #0
 8008e82:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e84:	e004      	b.n	8008e90 <DNS_ParseDNSReply+0x174>
        }
        else if( xExpected == pdFALSE )
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <DNS_ParseDNSReply+0x174>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	677b      	str	r3, [r7, #116]	@ 0x74
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8008e90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
    }
 8008e92:	4618      	mov	r0, r3
 8008e94:	3780      	adds	r7, #128	@ 0x80
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8008e9a:	b590      	push	{r4, r7, lr}
 8008e9c:	b0a7      	sub	sp, #156	@ 0x9c
 8008e9e:	af02      	add	r7, sp, #8
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008eac:	2301      	movs	r3, #1
 8008eae:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008ec4:	e16b      	b.n	800919e <parseDNSAnswer+0x304>
        {
            BaseType_t xDoAccept = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008ece:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	f240 816b 	bls.w	80091ae <parseDNSAnswer+0x314>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f7ff fec4 	bl	8008c70 <DNS_SkipNameField>
 8008ee8:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8008eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d103      	bne.n	8008ef8 <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008ef6:	e15b      	b.n	80091b0 <parseDNSAnswer+0x316>
            }

            if( uxBytesRead != NULL )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d005      	beq.n	8008f0a <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f04:	441a      	add	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f10:	441a      	add	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	695a      	ldr	r2, [r3, #20]
 8008f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f1c:	1ad2      	subs	r2, r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d803      	bhi.n	8008f32 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008f30:	e13e      	b.n	80091b0 <parseDNSAnswer+0x316>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 fd51 	bl	800a9de <usChar2u16>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	461a      	mov	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8b1b      	ldrh	r3, [r3, #24]
 8008f48:	2b1c      	cmp	r3, #28
 8008f4a:	d10c      	bne.n	8008f66 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2210      	movs	r2, #16
 8008f50:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	695a      	ldr	r2, [r3, #20]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	330a      	adds	r3, #10
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d323      	bcc.n	8008fa8 <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f64:	e020      	b.n	8008fa8 <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8b1b      	ldrh	r3, [r3, #24]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d11c      	bne.n	8008fa8 <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2204      	movs	r2, #4
 8008f72:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	695a      	ldr	r2, [r3, #20]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	330a      	adds	r3, #10
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d312      	bcc.n	8008fa8 <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	330a      	adds	r3, #10
 8008f88:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 8008f8a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008f98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f9a:	f00e fa94 	bl	80174c6 <memcpy>

                    if( ulTestAddress != 0U )
 8008f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 8008fa8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 80bf 	beq.w	800912e <parseDNSAnswer+0x294>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008fb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fb8:	891b      	ldrh	r3, [r3, #8]
 8008fba:	b29a      	uxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	f040 80a1 	bne.w	800910a <parseDNSAnswer+0x270>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d11c      	bne.n	800900a <parseDNSAnswer+0x170>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 8008fd6:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	6859      	ldr	r1, [r3, #4]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                            if( ppxAddressInfo != NULL )
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d009      	beq.n	8008ffe <parseDNSAnswer+0x164>
                            {
                                pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	332c      	adds	r3, #44	@ 0x2c
 8008fee:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8008ff2:	210a      	movs	r1, #10
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff fa29 	bl	800844c <pxNew_AddrInfo>
 8008ffa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                            }
                        #endif

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8008ffe:	2301      	movs	r3, #1
 8009000:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	61da      	str	r2, [r3, #28]
 8009008:	e021      	b.n	800904e <parseDNSAnswer+0x1b4>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	330a      	adds	r3, #10
 8009010:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	331c      	adds	r3, #28
 8009016:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	461a      	mov	r2, r3
 800901e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009020:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009022:	f00e fa50 	bl	80174c6 <memcpy>

                        #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                            if( ppxAddressInfo != NULL )
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <parseDNSAnswer+0x1aa>
                            {
                                const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	331c      	adds	r3, #28
 8009030:	65bb      	str	r3, [r7, #88]	@ 0x58

                                pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	332c      	adds	r3, #44	@ 0x2c
 8009036:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009038:	2102      	movs	r1, #2
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fa06 	bl	800844c <pxNew_AddrInfo>
 8009040:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                            }
                        #endif

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 800904a:	2300      	movs	r3, #0
 800904c:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 800904e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009052:	2b00      	cmp	r3, #0
 8009054:	d013      	beq.n	800907e <parseDNSAnswer+0x1e4>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <parseDNSAnswer+0x1ce>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	e004      	b.n	8009072 <parseDNSAnswer+0x1d8>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800906c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009070:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8009072:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009076:	f103 021c 	add.w	r2, r3, #28
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	651a      	str	r2, [r3, #80]	@ 0x50

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <parseDNSAnswer+0x1f0>
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	e000      	b.n	800908c <parseDNSAnswer+0x1f2>
 800908a:	2300      	movs	r3, #0
 800908c:	4619      	mov	r1, r3
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7ff fc7a 	bl	8008988 <xDNSDoCallback>
 8009094:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 8009096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <parseDNSAnswer+0x208>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	629a      	str	r2, [r3, #40]	@ 0x28
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d011      	beq.n	80090ce <parseDNSAnswer+0x234>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 80090b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090b2:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 80090b4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80090b8:	2300      	movs	r3, #0
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	2300      	movs	r3, #0
 80090be:	f7ff fa5a 	bl	8008576 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80090c6:	3301      	adds	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8b1b      	ldrh	r3, [r3, #24]
 80090d2:	2b1c      	cmp	r3, #28
 80090d4:	d108      	bne.n	80090e8 <parseDNSAnswer+0x24e>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 80090d6:	f107 0214 	add.w	r2, r7, #20
 80090da:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80090de:	2328      	movs	r3, #40	@ 0x28
 80090e0:	200a      	movs	r0, #10
 80090e2:	f003 f889 	bl	800c1f8 <FreeRTOS_inet_ntop>
 80090e6:	e008      	b.n	80090fa <parseDNSAnswer+0x260>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 80090ee:	f107 0214 	add.w	r2, r7, #20
 80090f2:	2328      	movs	r3, #40	@ 0x28
 80090f4:	2002      	movs	r0, #2
 80090f6:	f003 f87f 	bl	800c1f8 <FreeRTOS_inet_ntop>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 80090fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <parseDNSAnswer+0x270>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	68da      	ldr	r2, [r3, #12]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	330a      	adds	r3, #10
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	695a      	ldr	r2, [r3, #20]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	f1a3 020a 	sub.w	r2, r3, #10
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	615a      	str	r2, [r3, #20]
 800912c:	e032      	b.n	8009194 <parseDNSAnswer+0x2fa>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	2b09      	cmp	r3, #9
 8009134:	d92e      	bls.n	8009194 <parseDNSAnswer+0x2fa>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f103 020a 	add.w	r2, r3, #10
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	f1a3 020a 	sub.w	r2, r3, #10
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8009154:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009156:	7a1a      	ldrb	r2, [r3, #8]
 8009158:	7a5b      	ldrb	r3, [r3, #9]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	4313      	orrs	r3, r2
 800915e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	695a      	ldr	r2, [r3, #20]
 8009166:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800916a:	429a      	cmp	r2, r3
 800916c:	d30e      	bcc.n	800918c <parseDNSAnswer+0x2f2>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009176:	441a      	add	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	695a      	ldr	r2, [r3, #20]
 8009180:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009184:	1ad2      	subs	r2, r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	615a      	str	r2, [r3, #20]
 800918a:	e003      	b.n	8009194 <parseDNSAnswer+0x2fa>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8009192:	e00d      	b.n	80091b0 <parseDNSAnswer+0x316>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8009194:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009198:	3301      	adds	r3, #1
 800919a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	88db      	ldrh	r3, [r3, #6]
 80091a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80091a6:	429a      	cmp	r2, r3
 80091a8:	f4ff ae8d 	bcc.w	8008ec6 <parseDNSAnswer+0x2c>
 80091ac:	e000      	b.n	80091b0 <parseDNSAnswer+0x316>
                break;
 80091ae:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 80091b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <parseDNSAnswer+0x324>
 80091b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091bc:	e000      	b.n	80091c0 <parseDNSAnswer+0x326>
 80091be:	2300      	movs	r3, #0
    }
 80091c0:	4618      	mov	r0, r3
 80091c2:	3794      	adds	r7, #148	@ 0x94
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd90      	pop	{r4, r7, pc}

080091c8 <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80091d0:	2300      	movs	r3, #0
 80091d2:	75fb      	strb	r3, [r7, #23]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d8:	2b29      	cmp	r3, #41	@ 0x29
 80091da:	d80d      	bhi.n	80091f8 <ProcessICMPPacket+0x30>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	b672      	cpsid	i
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	b662      	cpsie	i
 80091f0:	60fb      	str	r3, [r7, #12]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <ProcessICMPPacket+0x2c>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091fc:	2b29      	cmp	r3, #41	@ 0x29
 80091fe:	d915      	bls.n	800922c <ProcessICMPPacket+0x64>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009204:	613b      	str	r3, [r7, #16]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800920c:	2b00      	cmp	r3, #0
 800920e:	d008      	beq.n	8009222 <ProcessICMPPacket+0x5a>
 8009210:	2b08      	cmp	r3, #8
 8009212:	d10a      	bne.n	800922a <ProcessICMPPacket+0x62>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	6938      	ldr	r0, [r7, #16]
 8009218:	f000 f80d 	bl	8009236 <prvProcessICMPEchoRequest>
 800921c:	4603      	mov	r3, r0
 800921e:	75fb      	strb	r3, [r7, #23]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8009220:	e004      	b.n	800922c <ProcessICMPPacket+0x64>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8009222:	6938      	ldr	r0, [r7, #16]
 8009224:	f000 f833 	bl	800928e <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8009228:	e000      	b.n	800922c <ProcessICMPPacket+0x64>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 800922a:	bf00      	nop
            }
        }

        return eReturn;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
    }
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8009236:	b480      	push	{r7}
 8009238:	b087      	sub	sp, #28
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3322      	adds	r3, #34	@ 0x22
 8009244:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	330e      	adds	r3, #14
 800924a:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	2200      	movs	r2, #0
 8009250:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2240      	movs	r2, #64	@ 0x40
 800926a:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	2200      	movs	r2, #0
 8009270:	719a      	strb	r2, [r3, #6]
 8009272:	2200      	movs	r2, #0
 8009274:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	709a      	strb	r2, [r3, #2]
 800927c:	2200      	movs	r2, #0
 800927e:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8009280:	2302      	movs	r3, #2
    }
 8009282:	4618      	mov	r0, r3
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 800928e:	b580      	push	{r7, lr}
 8009290:	b086      	sub	sp, #24
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7c1a      	ldrb	r2, [r3, #16]
 800929e:	7c5b      	ldrb	r3, [r3, #17]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	4313      	orrs	r3, r2
 80092a4:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 80092a6:	89fb      	ldrh	r3, [r7, #14]
 80092a8:	3b14      	subs	r3, #20
 80092aa:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	3b08      	subs	r3, #8
 80092b0:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	332a      	adds	r3, #42	@ 0x2a
 80092ba:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80092bc:	2300      	movs	r3, #0
 80092be:	82bb      	strh	r3, [r7, #20]
 80092c0:	e00c      	b.n	80092dc <prvProcessICMPEchoReply+0x4e>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b78      	cmp	r3, #120	@ 0x78
 80092c8:	d002      	beq.n	80092d0 <prvProcessICMPEchoReply+0x42>
            {
                eStatus = eInvalidData;
 80092ca:	2302      	movs	r3, #2
 80092cc:	75fb      	strb	r3, [r7, #23]
                break;
 80092ce:	e009      	b.n	80092e4 <prvProcessICMPEchoReply+0x56>
            }

            pucByte++;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	3301      	adds	r3, #1
 80092d4:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80092d6:	8abb      	ldrh	r3, [r7, #20]
 80092d8:	3301      	adds	r3, #1
 80092da:	82bb      	strh	r3, [r7, #20]
 80092dc:	8aba      	ldrh	r2, [r7, #20]
 80092de:	89fb      	ldrh	r3, [r7, #14]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d3ee      	bcc.n	80092c2 <prvProcessICMPEchoReply+0x34>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	4611      	mov	r1, r2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fe10 	bl	8009f14 <vApplicationPingReplyHook>
    }
 80092f4:	bf00      	nop
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8009304:	f000 f8e4 	bl	80094d0 <prvIPTask_Initialise>
    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 8009308:	f000 f802 	bl	8009310 <prvProcessIPEventsAndTimers>
 800930c:	e7fc      	b.n	8009308 <prvIPTask+0xc>
	...

08009310 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08e      	sub	sp, #56	@ 0x38
 8009314:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the Resolution, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 8009316:	f000 fe9f 	bl	800a058 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 800931a:	f000 fe41 	bl	8009fa0 <xCalculateSleepTime>
 800931e:	6378      	str	r0, [r7, #52]	@ 0x34

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8009320:	4b69      	ldr	r3, [pc, #420]	@ (80094c8 <prvProcessIPEventsAndTimers+0x1b8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f107 011c 	add.w	r1, r7, #28
 8009328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800932a:	4618      	mov	r0, r3
 800932c:	f00a ff2a 	bl	8014184 <xQueueReceive>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 8009336:	23ff      	movs	r3, #255	@ 0xff
 8009338:	773b      	strb	r3, [r7, #28]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 800933a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d00d      	beq.n	8009360 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8009344:	4b60      	ldr	r3, [pc, #384]	@ (80094c8 <prvProcessIPEventsAndTimers+0x1b8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f00b f93c 	bl	80145c6 <uxQueueSpacesAvailable>
 800934e:	6338      	str	r0, [r7, #48]	@ 0x30

            if( uxQueueMinimumSpace > uxCount )
 8009350:	4b5e      	ldr	r3, [pc, #376]	@ (80094cc <prvProcessIPEventsAndTimers+0x1bc>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009356:	429a      	cmp	r2, r3
 8009358:	d202      	bcs.n	8009360 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 800935a:	4a5c      	ldr	r2, [pc, #368]	@ (80094cc <prvProcessIPEventsAndTimers+0x1bc>)
 800935c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935e:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8009360:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009364:	3301      	adds	r3, #1
 8009366:	2b0f      	cmp	r3, #15
 8009368:	f200 80a4 	bhi.w	80094b4 <prvProcessIPEventsAndTimers+0x1a4>
 800936c:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <prvProcessIPEventsAndTimers+0x64>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	080094b5 	.word	0x080094b5
 8009378:	080093b5 	.word	0x080093b5
 800937c:	080093bf 	.word	0x080093bf
 8009380:	080093c9 	.word	0x080093c9
 8009384:	080093d5 	.word	0x080093d5
 8009388:	080094b5 	.word	0x080094b5
 800938c:	0800943b 	.word	0x0800943b
 8009390:	08009445 	.word	0x08009445
 8009394:	0800946d 	.word	0x0800946d
 8009398:	08009475 	.word	0x08009475
 800939c:	08009499 	.word	0x08009499
 80093a0:	080093db 	.word	0x080093db
 80093a4:	08009431 	.word	0x08009431
 80093a8:	0800944f 	.word	0x0800944f
 80093ac:	080094b5 	.word	0x080094b5
 80093b0:	0800949f 	.word	0x0800949f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f001 f8b4 	bl	800a524 <prvProcessNetworkDownEvent>
            break;
 80093bc:	e07d      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 f91a 	bl	80095fa <prvHandleEthernetPacket>
            break;
 80093c6:	e078      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	2101      	movs	r1, #1
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f922 	bl	8009616 <prvForwardTxPacket>
            break;
 80093d2:	e072      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>

        case eARPTimerEvent:
            /* The ARP Resolution timer has expired, process the cache. */
            #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                vARPAgeCache();
 80093d4:	f7fe fe86 	bl	80080e4 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */
            break;
 80093d8:	e06f      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	627b      	str	r3, [r7, #36]	@ 0x24
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 80093de:	2318      	movs	r3, #24
 80093e0:	713b      	strb	r3, [r7, #4]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80093e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e4:	7a1b      	ldrb	r3, [r3, #8]
 80093e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <prvProcessIPEventsAndTimers+0xf2>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        xAddress.sin_family = FREERTOS_AF_INET;
 80093f0:	2302      	movs	r3, #2
 80093f2:	717b      	strb	r3, [r7, #5]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 80093f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f8:	60fb      	str	r3, [r7, #12]
                        /* 'ulLocalAddress' will be set again by vSocketBind(). */
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	2200      	movs	r2, #0
 80093fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 8009400:	e000      	b.n	8009404 <prvProcessIPEventsAndTimers+0xf4>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009402:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009406:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009408:	80fb      	strh	r3, [r7, #6]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800940a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940c:	2200      	movs	r2, #0
 800940e:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009410:	1d39      	adds	r1, r7, #4
 8009412:	2300      	movs	r3, #0
 8009414:	2218      	movs	r2, #24
 8009416:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009418:	f002 f9c2 	bl	800b7a0 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f043 0210 	orr.w	r2, r3, #16
 8009424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009426:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 8009428:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800942a:	f002 ff23 	bl	800c274 <vSocketWakeUpUser>
            break;
 800942e:	e044      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	4618      	mov	r0, r3
 8009434:	f002 fa2e 	bl	800b894 <vSocketClose>
            break;
 8009438:	e03f      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	4618      	mov	r0, r3
 800943e:	f007 fcbd 	bl	8010dbc <vProcessGeneratedUDPPacket>
            break;
 8009442:	e03a      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f896 	bl	8009578 <prvCallDHCP_RA_Handler>
            break;
 800944c:	e035      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>
             * vSocketSelect() will check which sockets actually have an event
             * and update the socket field xSocketBits. */
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            #if ( ipconfigSELECT_USES_NOTIFY != 0 )
                {
                    SocketSelectMessage_t * pxMessage = ( ( SocketSelectMessage_t * ) xReceivedEvent.pvData );
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	62bb      	str	r3, [r7, #40]	@ 0x28
                    vSocketSelect( pxMessage->pxSocketSet );
 8009452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	4618      	mov	r0, r3
 8009458:	f003 fbfa 	bl	800cc50 <vSocketSelect>
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	2300      	movs	r3, #0
 8009462:	2202      	movs	r2, #2
 8009464:	2100      	movs	r1, #0
 8009466:	f00c fc15 	bl	8015c94 <xTaskGenericNotify>
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800946a:	e026      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800946c:	2001      	movs	r0, #1
 800946e:	f000 ff39 	bl	800a2e4 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8009472:	e022      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	627b      	str	r3, [r7, #36]	@ 0x24

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009478:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800947a:	f004 fb23 	bl	800dac4 <xTCPCheckNewClient>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d019      	beq.n	80094b8 <prvProcessIPEventsAndTimers+0x1a8>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f043 0204 	orr.w	r2, r3, #4
 800948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8009490:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009492:	f002 feef 	bl	800c274 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8009496:	e00f      	b.n	80094b8 <prvProcessIPEventsAndTimers+0x1a8>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8009498:	f003 fae8 	bl	800ca6c <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800949c:	e00d      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 80094a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f00a fa27 	bl	80138fa <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 80094ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094ae:	f00d fc71 	bl	8016d94 <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80094b2:	e002      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 80094b4:	bf00      	nop
 80094b6:	e000      	b.n	80094ba <prvProcessIPEventsAndTimers+0x1aa>
            break;
 80094b8:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 80094ba:	f000 f833 	bl	8009524 <prvIPTask_CheckPendingEvents>
}
 80094be:	bf00      	nop
 80094c0:	3738      	adds	r7, #56	@ 0x38
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20001304 	.word	0x20001304
 80094cc:	20000010 	.word	0x20000010

080094d0 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 80094d6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80094da:	f000 feb9 	bl	800a250 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80094de:	4b0f      	ldr	r3, [pc, #60]	@ (800951c <prvIPTask_Initialise+0x4c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	607b      	str	r3, [r7, #4]
 80094e4:	e005      	b.n	80094f2 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f8aa 	bl	8009640 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	607b      	str	r3, [r7, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f6      	bne.n	80094e6 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 80094f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80094fc:	f000 fe8c 	bl	800a218 <vTCPTimerReload>
    }
    #endif

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        /* Mark the ARP timer as inactive since we are not waiting on any resolution as of now. */
        vIPSetARPResolutionTimerEnableState( pdFALSE );
 8009500:	2000      	movs	r0, #0
 8009502:	f000 ff29 	bl	800a358 <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8009506:	f7fe ff9b 	bl	8008440 <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 800950a:	f7ff f849 	bl	80085a0 <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800950e:	4b04      	ldr	r3, [pc, #16]	@ (8009520 <prvIPTask_Initialise+0x50>)
 8009510:	2201      	movs	r2, #1
 8009512:	601a      	str	r2, [r3, #0]
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20002684 	.word	0x20002684
 8009520:	20001314 	.word	0x20001314

08009524 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800952a:	4b12      	ldr	r3, [pc, #72]	@ (8009574 <prvIPTask_CheckPendingEvents+0x50>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d01c      	beq.n	800956c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8009532:	4b10      	ldr	r3, [pc, #64]	@ (8009574 <prvIPTask_CheckPendingEvents+0x50>)
 8009534:	2200      	movs	r2, #0
 8009536:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8009538:	f001 fe24 	bl	800b184 <FreeRTOS_FirstNetworkInterface>
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	e012      	b.n	8009566 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	7f1b      	ldrb	r3, [r3, #28]
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 ffe8 	bl	800a524 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	7f13      	ldrb	r3, [r2, #28]
 8009558:	f023 0302 	bic.w	r3, r3, #2
 800955c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 fe56 	bl	800b210 <FreeRTOS_NextNetworkInterface>
 8009564:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e9      	bne.n	8009540 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	2000130c 	.word	0x2000130c

08009578 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8009580:	2300      	movs	r3, #0
 8009582:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	60fb      	str	r3, [r7, #12]
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8009598:	bf00      	nop
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 80095a8:	4b03      	ldr	r3, [pc, #12]	@ (80095b8 <FreeRTOS_GetIPTaskHandle+0x14>)
 80095aa:	681b      	ldr	r3, [r3, #0]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20001310 	.word	0x20001310

080095bc <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 80095ca:	f043 0310 	orr.w	r3, r3, #16
 80095ce:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
        }
    #else
        {
            vApplicationIPNetworkEventHook_Multi( eNetworkUp, pxEndPoint );
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	2000      	movs	r0, #0
 80095d6:	f000 fcab 	bl	8009f30 <vApplicationIPNetworkEventHook_Multi>
        }
    #endif
    #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

    /* Set remaining time to 0 so it will become active immediately. */
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d103      	bne.n	80095f2 <vIPNetworkUpCalls+0x36>
        #endif
    }
    else
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
            vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 80095ea:	f242 7010 	movw	r0, #10000	@ 0x2710
 80095ee:	f000 fe21 	bl	800a234 <vARPTimerReload>
        #endif
    }
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f99f 	bl	800994c <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d007      	beq.n	8009638 <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4798      	blx	r3
    }
}
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009648:	2300      	movs	r3, #0
 800964a:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	7f13      	ldrb	r3, [r2, #28]
 8009650:	f023 0301 	bic.w	r3, r3, #1
 8009654:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8009656:	2300      	movs	r3, #0
 8009658:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800965e:	f107 030c 	add.w	r3, r7, #12
 8009662:	6979      	ldr	r1, [r7, #20]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f899 	bl	800979c <xSendEventStructToIPTask>
 800966a:	4603      	mov	r3, r0
 800966c:	2b01      	cmp	r3, #1
 800966e:	d008      	beq.n	8009682 <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7f13      	ldrb	r3, [r2, #28]
 8009674:	f043 0302 	orr.w	r3, r3, #2
 8009678:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 800967a:	4b06      	ldr	r3, [pc, #24]	@ (8009694 <FreeRTOS_NetworkDown+0x54>)
 800967c:	2201      	movs	r2, #1
 800967e:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009680:	e004      	b.n	800968c <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	7f13      	ldrb	r3, [r2, #28]
 8009686:	f023 0302 	bic.w	r3, r3, #2
 800968a:	7713      	strb	r3, [r2, #28]
}
 800968c:	bf00      	nop
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	2000130c 	.word	0x2000130c

08009698 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFALSE;
 800969e:	2300      	movs	r3, #0
 80096a0:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 80096a2:	f001 fd6f 	bl	800b184 <FreeRTOS_FirstNetworkInterface>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10d      	bne.n	80096c8 <FreeRTOS_IPInit_Multi+0x30>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b0:	b672      	cpsid	i
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	b662      	cpsie	i
 80096c0:	603b      	str	r3, [r7, #0]
}
 80096c2:	bf00      	nop
 80096c4:	bf00      	nop
 80096c6:	e7fd      	b.n	80096c4 <FreeRTOS_IPInit_Multi+0x2c>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 80096c8:	f000 ffb6 	bl	800a638 <vPreCheckConfigs>
    /* Attempt to create the queue used to communicate with the IP task. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        static StaticQueue_t xNetworkEventStaticQueue;
        static uint8_t ucNetworkEventQueueStorageArea[ ipconfigEVENT_QUEUE_LENGTH * sizeof( IPStackEvent_t ) ];
        xNetworkEventQueue = xQueueCreateStatic( ipconfigEVENT_QUEUE_LENGTH,
 80096cc:	2300      	movs	r3, #0
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4b1e      	ldr	r3, [pc, #120]	@ (800974c <FreeRTOS_IPInit_Multi+0xb4>)
 80096d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009750 <FreeRTOS_IPInit_Multi+0xb8>)
 80096d4:	2108      	movs	r1, #8
 80096d6:	2041      	movs	r0, #65	@ 0x41
 80096d8:	f00a fa8a 	bl	8013bf0 <xQueueGenericCreateStatic>
 80096dc:	4603      	mov	r3, r0
 80096de:	4a1d      	ldr	r2, [pc, #116]	@ (8009754 <FreeRTOS_IPInit_Multi+0xbc>)
 80096e0:	6013      	str	r3, [r2, #0]
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
        configASSERT( xNetworkEventQueue != NULL );
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 80096e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009754 <FreeRTOS_IPInit_Multi+0xbc>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d02b      	beq.n	8009742 <FreeRTOS_IPInit_Multi+0xaa>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 80096ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009754 <FreeRTOS_IPInit_Multi+0xbc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	491a      	ldr	r1, [pc, #104]	@ (8009758 <FreeRTOS_IPInit_Multi+0xc0>)
 80096f0:	4618      	mov	r0, r3
 80096f2:	f00b f8dd 	bl	80148b0 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 80096f6:	f007 fd9d 	bl	8011234 <xNetworkBuffersInitialise>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d118      	bne.n	8009732 <FreeRTOS_IPInit_Multi+0x9a>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009700:	f001 fdf2 	bl	800b2e8 <vNetworkSocketsInit>
            /* Create the task that processes Ethernet and stack events. */
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                static StaticTask_t xIPTaskBuffer;
                static StackType_t xIPTaskStack[ ipconfigIP_TASK_STACK_SIZE_WORDS ];
                xIPTaskHandle = xTaskCreateStatic( &prvIPTask,
 8009704:	4b15      	ldr	r3, [pc, #84]	@ (800975c <FreeRTOS_IPInit_Multi+0xc4>)
 8009706:	9302      	str	r3, [sp, #8]
 8009708:	4b15      	ldr	r3, [pc, #84]	@ (8009760 <FreeRTOS_IPInit_Multi+0xc8>)
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	2336      	movs	r3, #54	@ 0x36
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	2300      	movs	r3, #0
 8009712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009716:	4913      	ldr	r1, [pc, #76]	@ (8009764 <FreeRTOS_IPInit_Multi+0xcc>)
 8009718:	4813      	ldr	r0, [pc, #76]	@ (8009768 <FreeRTOS_IPInit_Multi+0xd0>)
 800971a:	f00b f951 	bl	80149c0 <xTaskCreateStatic>
 800971e:	4603      	mov	r3, r0
 8009720:	4a12      	ldr	r2, [pc, #72]	@ (800976c <FreeRTOS_IPInit_Multi+0xd4>)
 8009722:	6013      	str	r3, [r2, #0]
                                                   NULL,
                                                   ipconfigIP_TASK_PRIORITY,
                                                   xIPTaskStack,
                                                   &xIPTaskBuffer );

                if( xIPTaskHandle != NULL )
 8009724:	4b11      	ldr	r3, [pc, #68]	@ (800976c <FreeRTOS_IPInit_Multi+0xd4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <FreeRTOS_IPInit_Multi+0xaa>
                {
                    xReturn = pdTRUE;
 800972c:	2301      	movs	r3, #1
 800972e:	607b      	str	r3, [r7, #4]
 8009730:	e007      	b.n	8009742 <FreeRTOS_IPInit_Multi+0xaa>
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009732:	4b08      	ldr	r3, [pc, #32]	@ (8009754 <FreeRTOS_IPInit_Multi+0xbc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4618      	mov	r0, r3
 8009738:	f00a ff6b 	bl	8014612 <vQueueDelete>
            xNetworkEventQueue = NULL;
 800973c:	4b05      	ldr	r3, [pc, #20]	@ (8009754 <FreeRTOS_IPInit_Multi+0xbc>)
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
    }

    return xReturn;
 8009742:	687b      	ldr	r3, [r7, #4]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20001520 	.word	0x20001520
 8009750:	20001318 	.word	0x20001318
 8009754:	20001304 	.word	0x20001304
 8009758:	08018528 	.word	0x08018528
 800975c:	20002570 	.word	0x20002570
 8009760:	20001570 	.word	0x20001570
 8009764:	08018530 	.word	0x08018530
 8009768:	080092fd 	.word	0x080092fd
 800976c:	20001310 	.word	0x20001310

08009770 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800977a:	2300      	movs	r3, #0
 800977c:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 800977e:	79fb      	ldrb	r3, [r7, #7]
 8009780:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009786:	f107 030c 	add.w	r3, r7, #12
 800978a:	6979      	ldr	r1, [r7, #20]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 f805 	bl	800979c <xSendEventStructToIPTask>
 8009792:	4603      	mov	r3, r0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80097aa:	f000 fb2f 	bl	8009e0c <xIPIsNetworkTaskReady>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d107      	bne.n	80097c4 <xSendEventStructToIPTask+0x28>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f993 3000 	ldrsb.w	r3, [r3]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 80097be:	2300      	movs	r3, #0
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	e02b      	b.n	800981c <xSendEventStructToIPTask+0x80>
    }
    else
    {
        xSendMessage = pdTRUE;
 80097c4:	2301      	movs	r3, #1
 80097c6:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f993 3000 	ldrsb.w	r3, [r3]
 80097ce:	2b07      	cmp	r3, #7
 80097d0:	d10c      	bne.n	80097ec <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 80097d2:	2001      	movs	r0, #1
 80097d4:	f000 fd86 	bl	800a2e4 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 80097d8:	4b13      	ldr	r3, [pc, #76]	@ (8009828 <xSendEventStructToIPTask+0x8c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f00a fed1 	bl	8014584 <uxQueueMessagesWaiting>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d012      	beq.n	8009818 <xSendEventStructToIPTask+0x7c>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 80097f2:	f000 fe80 	bl	800a4f6 <xIsCallingFromIPTask>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d104      	bne.n	8009806 <xSendEventStructToIPTask+0x6a>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009806:	4b08      	ldr	r3, [pc, #32]	@ (8009828 <xSendEventStructToIPTask+0x8c>)
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	2300      	movs	r3, #0
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	f00a fb0a 	bl	8013e28 <xQueueGenericSend>
 8009814:	6178      	str	r0, [r7, #20]
 8009816:	e001      	b.n	800981c <xSendEventStructToIPTask+0x80>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009818:	2301      	movs	r3, #1
 800981a:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 800981c:	697b      	ldr	r3, [r7, #20]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20001304 	.word	0x20001304

0800982c <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]

    do
    {
        const EthernetHeader_t * pxEthernetHeader = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	613b      	str	r3, [r7, #16]
        const NetworkEndPoint_t * pxEndPoint = NULL;
 800983c:	2300      	movs	r3, #0
 800983e:	60fb      	str	r3, [r7, #12]
        uint16_t usFrameType;

        /* First, check the packet buffer is non-null. */
        if( pucEthernetBuffer == NULL )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d067      	beq.n	8009916 <eConsiderFrameForProcessing+0xea>

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	613b      	str	r3, [r7, #16]
        usFrameType = pxEthernetHeader->usFrameType;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	7b1a      	ldrb	r2, [r3, #12]
 800984e:	7b5b      	ldrb	r3, [r3, #13]
 8009850:	021b      	lsls	r3, r3, #8
 8009852:	4313      	orrs	r3, r2
 8009854:	817b      	strh	r3, [r7, #10]

        /* Second, filter based on ethernet frame type. */
        /* The frame type field in the Ethernet header must have a value greater than 0x0600. */
        if( ipIS_ETHERNET_FRAME_TYPE_INVALID( FreeRTOS_ntohs( usFrameType ) ) )
 8009856:	897b      	ldrh	r3, [r7, #10]
 8009858:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800985c:	d95d      	bls.n	800991a <eConsiderFrameForProcessing+0xee>
                break;
            #else
                /* filtering is disabled - continue filter checks. */
            #endif
        }
        else if( usFrameType == ipARP_FRAME_TYPE )
 800985e:	897b      	ldrh	r3, [r7, #10]
 8009860:	f640 0206 	movw	r2, #2054	@ 0x806
 8009864:	4293      	cmp	r3, r2
 8009866:	d008      	beq.n	800987a <eConsiderFrameForProcessing+0x4e>
                break;
            #else
                /*  IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( usFrameType == ipIPv4_FRAME_TYPE )
 8009868:	897b      	ldrh	r3, [r7, #10]
 800986a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800986e:	d004      	beq.n	800987a <eConsiderFrameForProcessing+0x4e>
                break;
            #else
                /* IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( usFrameType == ipIPv6_FRAME_TYPE )
 8009870:	897b      	ldrh	r3, [r7, #10]
 8009872:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009876:	4293      	cmp	r3, r2

                /* Processing custom Ethernet frames is enabled. No need for any further testing.
                 * Accept the frame whether it's a unicast, multicast, or broadcast. */
                eReturn = eProcessBuffer;
            #endif
            break;
 8009878:	e058      	b.n	800992c <eConsiderFrameForProcessing+0x100>
        }

        /* Third, filter based on destination mac address. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f001 fc28 	bl	800b0d4 <FreeRTOS_FindEndPointOnMAC>
 8009884:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d141      	bne.n	8009910 <eConsiderFrameForProcessing+0xe4>
        {
            /* A destination endpoint was found - Continue filter checks. */
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	2206      	movs	r2, #6
 8009890:	4619      	mov	r1, r3
 8009892:	4829      	ldr	r0, [pc, #164]	@ (8009938 <eConsiderFrameForProcessing+0x10c>)
 8009894:	f00d fd13 	bl	80172be <memcmp>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d038      	beq.n	8009910 <eConsiderFrameForProcessing+0xe4>
        {
            /* The packet was a broadcast - Continue filter checks. */
        }
        else if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2206      	movs	r2, #6
 80098a2:	4619      	mov	r1, r3
 80098a4:	4825      	ldr	r0, [pc, #148]	@ (800993c <eConsiderFrameForProcessing+0x110>)
 80098a6:	f00d fd0a 	bl	80172be <memcmp>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d036      	beq.n	800991e <eConsiderFrameForProcessing+0xf2>
                break;
            #else
                /* DNS, LLMNR, and IPv4 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xLLMNR_MacAddressIPv6.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2206      	movs	r2, #6
 80098b4:	4619      	mov	r1, r3
 80098b6:	4822      	ldr	r0, [pc, #136]	@ (8009940 <eConsiderFrameForProcessing+0x114>)
 80098b8:	f00d fd01 	bl	80172be <memcmp>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d02f      	beq.n	8009922 <eConsiderFrameForProcessing+0xf6>
                break;
            #else
                /* DNS, LLMNR, and IPv6 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xMDNS_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	2206      	movs	r2, #6
 80098c6:	4619      	mov	r1, r3
 80098c8:	481e      	ldr	r0, [pc, #120]	@ (8009944 <eConsiderFrameForProcessing+0x118>)
 80098ca:	f00d fcf8 	bl	80172be <memcmp>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d028      	beq.n	8009926 <eConsiderFrameForProcessing+0xfa>
                break;
            #else
                /* DNS, MDNS, and IPv4 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xMDNS_MacAddressIPv6.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	2206      	movs	r2, #6
 80098d8:	4619      	mov	r1, r3
 80098da:	481b      	ldr	r0, [pc, #108]	@ (8009948 <eConsiderFrameForProcessing+0x11c>)
 80098dc:	f00d fcef 	bl	80172be <memcmp>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d021      	beq.n	800992a <eConsiderFrameForProcessing+0xfe>
                break;
            #else
                /* DNS, MDNS, and IPv6 are enabled - Continue filter checks. */
            #endif
        }
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv4_0 ) &&
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d10c      	bne.n	8009908 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv4_1 ) &&
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	785b      	ldrb	r3, [r3, #1]
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv4_0 ) &&
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d108      	bne.n	8009908 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 2 ] == ipMULTICAST_MAC_ADDRESS_IPv4_2 ) &&
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	789b      	ldrb	r3, [r3, #2]
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv4_1 ) &&
 80098fa:	2b5e      	cmp	r3, #94	@ 0x5e
 80098fc:	d104      	bne.n	8009908 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 3 ] <= 0x7fU ) )
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	78db      	ldrb	r3, [r3, #3]
 8009902:	b25b      	sxtb	r3, r3
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 2 ] == ipMULTICAST_MAC_ADDRESS_IPv4_2 ) &&
 8009904:	2b00      	cmp	r3, #0
 8009906:	da03      	bge.n	8009910 <eConsiderFrameForProcessing+0xe4>
                break;
            #else
                /* IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b33      	cmp	r3, #51	@ 0x33
 800990e:	e00d      	b.n	800992c <eConsiderFrameForProcessing+0x100>
            /* The packet was not a broadcast, or for this node - release it */
            break;
        }

        /* All checks have been passed, process the packet. */
        eReturn = eProcessBuffer;
 8009910:	2301      	movs	r3, #1
 8009912:	75fb      	strb	r3, [r7, #23]
 8009914:	e00a      	b.n	800992c <eConsiderFrameForProcessing+0x100>
            break;
 8009916:	bf00      	nop
 8009918:	e008      	b.n	800992c <eConsiderFrameForProcessing+0x100>
                break;
 800991a:	bf00      	nop
 800991c:	e006      	b.n	800992c <eConsiderFrameForProcessing+0x100>
                break;
 800991e:	bf00      	nop
 8009920:	e004      	b.n	800992c <eConsiderFrameForProcessing+0x100>
                break;
 8009922:	bf00      	nop
 8009924:	e002      	b.n	800992c <eConsiderFrameForProcessing+0x100>
                break;
 8009926:	bf00      	nop
 8009928:	e000      	b.n	800992c <eConsiderFrameForProcessing+0x100>
                break;
 800992a:	bf00      	nop
    } while( ipFALSE_BOOL );

    return eReturn;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	080186b4 	.word	0x080186b4
 800993c:	08018694 	.word	0x08018694
 8009940:	0801869c 	.word	0x0801869c
 8009944:	080186a4 	.word	0x080186a4
 8009948:	080186ac 	.word	0x080186ac

0800994c <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009954:	2300      	movs	r3, #0
 8009956:	72fb      	strb	r3, [r7, #11]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995c:	2b00      	cmp	r3, #0
 800995e:	d03d      	beq.n	80099dc <prvProcessEthernetPacket+0x90>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009964:	2b00      	cmp	r3, #0
 8009966:	d039      	beq.n	80099dc <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996c:	2b0d      	cmp	r3, #13
 800996e:	d934      	bls.n	80099da <prvProcessEthernetPacket+0x8e>
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009974:	60fb      	str	r3, [r7, #12]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eConsiderFrameForProcessing( pxNetworkBuffer->pucEthernetBuffer ) == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	899b      	ldrh	r3, [r3, #12]
 800997a:	b29b      	uxth	r3, r3
 800997c:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009980:	4293      	cmp	r3, r2
 8009982:	d017      	beq.n	80099b4 <prvProcessEthernetPacket+0x68>
 8009984:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009988:	4293      	cmp	r3, r2
 800998a:	dc23      	bgt.n	80099d4 <prvProcessEthernetPacket+0x88>
 800998c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009990:	d010      	beq.n	80099b4 <prvProcessEthernetPacket+0x68>
 8009992:	f640 0206 	movw	r2, #2054	@ 0x806
 8009996:	4293      	cmp	r3, r2
 8009998:	d11c      	bne.n	80099d4 <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800999e:	2b29      	cmp	r3, #41	@ 0x29
 80099a0:	d905      	bls.n	80099ae <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7fd fef2 	bl	800778c <eARPProcessPacket>
 80099a8:	4603      	mov	r3, r0
 80099aa:	72fb      	strb	r3, [r7, #11]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 80099ac:	e016      	b.n	80099dc <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 80099ae:	2300      	movs	r3, #0
 80099b0:	72fb      	strb	r3, [r7, #11]
                        break;
 80099b2:	e013      	b.n	80099dc <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b8:	2b21      	cmp	r3, #33	@ 0x21
 80099ba:	d908      	bls.n	80099ce <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f8c2 	bl	8009b4c <prvProcessIPPacket>
 80099c8:	4603      	mov	r3, r0
 80099ca:	72fb      	strb	r3, [r7, #11]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80099cc:	e006      	b.n	80099dc <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 80099ce:	2300      	movs	r3, #0
 80099d0:	72fb      	strb	r3, [r7, #11]
                    break;
 80099d2:	e003      	b.n	80099dc <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 80099d4:	2300      	movs	r3, #0
 80099d6:	72fb      	strb	r3, [r7, #11]
                    #endif
                    break;
 80099d8:	e000      	b.n	80099dc <prvProcessEthernetPacket+0x90>
            break;
 80099da:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 80099dc:	7afb      	ldrb	r3, [r7, #11]
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d00b      	beq.n	80099fa <prvProcessEthernetPacket+0xae>
 80099e2:	2b04      	cmp	r3, #4
 80099e4:	dc35      	bgt.n	8009a52 <prvProcessEthernetPacket+0x106>
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d002      	beq.n	80099f0 <prvProcessEthernetPacket+0xa4>
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d035      	beq.n	8009a5a <prvProcessEthernetPacket+0x10e>
 80099ee:	e030      	b.n	8009a52 <prvProcessEthernetPacket+0x106>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * a resolution request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 80099f0:	2101      	movs	r1, #1
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f943 	bl	8009c7e <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 80099f8:	e030      	b.n	8009a5c <prvProcessEthernetPacket+0x110>
             * yet. */
            break;

        case eWaitingResolution:

            if( ( pxEthernetHeader->usFrameType == ipIPv4_FRAME_TYPE ) || ( pxEthernetHeader->usFrameType == ipARP_FRAME_TYPE ) )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	899b      	ldrh	r3, [r3, #12]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a04:	d006      	beq.n	8009a14 <prvProcessEthernetPacket+0xc8>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	899b      	ldrh	r3, [r3, #12]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	f640 0206 	movw	r2, #2054	@ 0x806
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d10f      	bne.n	8009a34 <prvProcessEthernetPacket+0xe8>
            {
                #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                    if( pxARPWaitingNetworkBuffer == NULL )
 8009a14:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <prvProcessEthernetPacket+0x118>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d107      	bne.n	8009a2c <prvProcessEthernetPacket+0xe0>
                    {
                        pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8009a1c:	4a11      	ldr	r2, [pc, #68]	@ (8009a64 <prvProcessEthernetPacket+0x118>)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6013      	str	r3, [r2, #0]
                        vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009a22:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009a26:	f000 fbd9 	bl	800a1dc <vIPTimerStartARPResolution>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                    iptraceDELAYED_ARP_BUFFER_FULL();
                }

                break;
 8009a2a:	e017      	b.n	8009a5c <prvProcessEthernetPacket+0x110>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f007 fd45 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
                break;
 8009a32:	e013      	b.n	8009a5c <prvProcessEthernetPacket+0x110>
            }
            else if( pxEthernetHeader->usFrameType == ipIPv6_FRAME_TYPE )
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	899b      	ldrh	r3, [r3, #12]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d103      	bne.n	8009a4a <prvProcessEthernetPacket+0xfe>
                    }
                    else
                #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) */
                {
                    /* We are already waiting on one resolution. This frame will be dropped. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f007 fd3a 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>

                    iptraceDELAYED_ND_BUFFER_FULL();
                }

                break;
 8009a48:	e008      	b.n	8009a5c <prvProcessEthernetPacket+0x110>
            }
            else
            {
                /* Unknown frame type, drop the packet. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f007 fd36 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
            }

            break;
 8009a50:	e004      	b.n	8009a5c <prvProcessEthernetPacket+0x110>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f007 fd32 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
            break;
 8009a58:	e000      	b.n	8009a5c <prvProcessEthernetPacket+0x110>
            break;
 8009a5a:	bf00      	nop
    }
}
 8009a5c:	bf00      	nop
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20001300 	.word	0x20001300

08009a68 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009a68:	b5b0      	push	{r4, r5, r7, lr}
 8009a6a:	b08c      	sub	sp, #48	@ 0x30
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingResolution = pdFALSE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a82:	3322      	adds	r3, #34	@ 0x22
 8009a84:	627b      	str	r3, [r7, #36]	@ 0x24

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa10 	bl	8009eac <uxIPHeaderSizePacket>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	3316      	adds	r3, #22
 8009a90:	623b      	str	r3, [r7, #32]
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8009a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a94:	791a      	ldrb	r2, [r3, #4]
 8009a96:	795b      	ldrb	r3, [r3, #5]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	83fb      	strh	r3, [r7, #30]
    uxLength = ( size_t ) usLength;
 8009a9e:	8bfb      	ldrh	r3, [r7, #30]
 8009aa0:	61bb      	str	r3, [r7, #24]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa4:	899b      	ldrh	r3, [r3, #12]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aac:	d10f      	bne.n	8009ace <prvProcessUDPPacket+0x66>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009aae:	8bfc      	ldrh	r4, [r7, #30]
 8009ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab2:	8a1b      	ldrh	r3, [r3, #16]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	461d      	mov	r5, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f9f7 	bl	8009eac <uxIPHeaderSizePacket>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d903      	bls.n	8009ace <prvProcessUDPPacket+0x66>
        {
            eReturn = eReleaseBuffer;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009acc:	e038      	b.n	8009b40 <prvProcessUDPPacket+0xd8>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad2:	6a3a      	ldr	r2, [r7, #32]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d833      	bhi.n	8009b40 <prvProcessUDPPacket+0xd8>
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	2b07      	cmp	r3, #7
 8009adc:	d930      	bls.n	8009b40 <prvProcessUDPPacket+0xd8>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	617b      	str	r3, [r7, #20]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	3b08      	subs	r3, #8
 8009aec:	613b      	str	r3, [r7, #16]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d904      	bls.n	8009b00 <prvProcessUDPPacket+0x98>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	441a      	add	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	885b      	ldrh	r3, [r3, #2]
 8009b18:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009b1a:	f107 020c 	add.w	r2, r7, #12
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f007 f964 	bl	8010dee <xProcessReceivedUDPPacket>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d103      	bne.n	8009b34 <prvProcessUDPPacket+0xcc>
                                       &( xIsWaitingResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b32:	e005      	b.n	8009b40 <prvProcessUDPPacket+0xd8>
        }
        else
        {
            /* Is this packet to be set aside for resolution. */
            if( xIsWaitingResolution == pdTRUE )
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d102      	bne.n	8009b40 <prvProcessUDPPacket+0xd8>
            {
                eReturn = eWaitingResolution;
 8009b3a:	2304      	movs	r3, #4
 8009b3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8009b40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3730      	adds	r7, #48	@ 0x30
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bdb0      	pop	{r4, r5, r7, pc}

08009b4c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009b56:	2314      	movs	r3, #20
 8009b58:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	75fb      	strb	r3, [r7, #23]
    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	330e      	adds	r3, #14
 8009b62:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	899b      	ldrh	r3, [r3, #12]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b6e:	d124      	bne.n	8009bba <prvProcessIPPacket+0x6e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	60fb      	str	r3, [r7, #12]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009b7e:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b84:	3b0e      	subs	r3, #14
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d802      	bhi.n	8009b92 <prvProcessIPPacket+0x46>
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	2b13      	cmp	r3, #19
 8009b90:	d802      	bhi.n	8009b98 <prvProcessIPPacket+0x4c>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 8009b92:	2300      	movs	r3, #0
 8009b94:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8009b96:	e013      	b.n	8009bc0 <prvProcessIPPacket+0x74>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	7ddb      	ldrb	r3, [r3, #23]
 8009b9c:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009b9e:	69ba      	ldr	r2, [r7, #24]
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 f83c 	bl	800ac20 <prvAllowIPPacketIPv4>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb0:	3b06      	subs	r3, #6
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	7812      	ldrb	r2, [r2, #0]
 8009bb6:	701a      	strb	r2, [r3, #0]
                   break;
 8009bb8:	e002      	b.n	8009bc0 <prvProcessIPPacket+0x74>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
            /* MISRA 16.4 Compliance */
            break;
 8009bbe:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009bc0:	7ffb      	ldrb	r3, [r7, #31]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d156      	bne.n	8009c74 <prvProcessIPPacket+0x128>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	899b      	ldrh	r3, [r3, #12]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bd0:	d108      	bne.n	8009be4 <prvProcessIPPacket+0x98>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipIPv4_FRAME_TYPE:

                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2b14      	cmp	r3, #20
 8009bd6:	d907      	bls.n	8009be8 <prvProcessIPPacket+0x9c>
                    {
                        /* The size of the IP-header is larger than 20 bytes.
                         * The extra space is used for IP-options. */
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009bd8:	6838      	ldr	r0, [r7, #0]
 8009bda:	f001 f8fd 	bl	800add8 <prvCheckIP4HeaderOptions>
 8009bde:	4603      	mov	r3, r0
 8009be0:	77fb      	strb	r3, [r7, #31]
                    }
                    break;
 8009be2:	e001      	b.n	8009be8 <prvProcessIPPacket+0x9c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8009be4:	bf00      	nop
 8009be6:	e000      	b.n	8009bea <prvProcessIPPacket+0x9e>
                    break;
 8009be8:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 8009bea:	7ffb      	ldrb	r3, [r7, #31]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d041      	beq.n	8009c74 <prvProcessIPPacket+0x128>
        {
            /* Add the IP and MAC addresses to the cache if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	2b11      	cmp	r3, #17
 8009bf4:	d018      	beq.n	8009c28 <prvProcessIPPacket+0xdc>
            {
                if( xCheckRequiresResolution( pxNetworkBuffer ) == pdTRUE )
 8009bf6:	6838      	ldr	r0, [r7, #0]
 8009bf8:	f001 fb15 	bl	800b226 <xCheckRequiresResolution>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d102      	bne.n	8009c08 <prvProcessIPPacket+0xbc>
                {
                    eReturn = eWaitingResolution;
 8009c02:	2304      	movs	r3, #4
 8009c04:	77fb      	strb	r3, [r7, #31]
 8009c06:	e00f      	b.n	8009c28 <prvProcessIPPacket+0xdc>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	899b      	ldrh	r3, [r3, #12]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c12:	d108      	bne.n	8009c26 <prvProcessIPPacket+0xda>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	1d9a      	adds	r2, r3, #6
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f7fd ffe0 	bl	8007be4 <vARPRefreshCacheEntryAge>
                                break;
 8009c24:	e000      	b.n	8009c28 <prvProcessIPPacket+0xdc>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8009c26:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingResolution )
 8009c28:	7ffb      	ldrb	r3, [r7, #31]
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d022      	beq.n	8009c74 <prvProcessIPPacket+0x128>
            {
                switch( ucProtocol )
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	2b11      	cmp	r3, #17
 8009c32:	d00c      	beq.n	8009c4e <prvProcessIPPacket+0x102>
 8009c34:	2b11      	cmp	r3, #17
 8009c36:	dc19      	bgt.n	8009c6c <prvProcessIPPacket+0x120>
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d002      	beq.n	8009c42 <prvProcessIPPacket+0xf6>
 8009c3c:	2b06      	cmp	r3, #6
 8009c3e:	d00c      	beq.n	8009c5a <prvProcessIPPacket+0x10e>
 8009c40:	e014      	b.n	8009c6c <prvProcessIPPacket+0x120>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 8009c42:	6838      	ldr	r0, [r7, #0]
 8009c44:	f7ff fac0 	bl	80091c8 <ProcessICMPPacket>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8009c4c:	e012      	b.n	8009c74 <prvProcessIPPacket+0x128>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8009c4e:	6838      	ldr	r0, [r7, #0]
 8009c50:	f7ff ff0a 	bl	8009a68 <prvProcessUDPPacket>
 8009c54:	4603      	mov	r3, r0
 8009c56:	77fb      	strb	r3, [r7, #31]
                        break;
 8009c58:	e00c      	b.n	8009c74 <prvProcessIPPacket+0x128>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8009c5a:	6838      	ldr	r0, [r7, #0]
 8009c5c:	f003 fda6 	bl	800d7ac <xProcessReceivedTCPPacket>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d105      	bne.n	8009c72 <prvProcessIPPacket+0x126>
                                {
                                    eReturn = eFrameConsumed;
 8009c66:	2303      	movs	r3, #3
 8009c68:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 8009c6a:	e002      	b.n	8009c72 <prvProcessIPPacket+0x126>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	77fb      	strb	r3, [r7, #31]
                        break;
 8009c70:	e000      	b.n	8009c74 <prvProcessIPPacket+0x128>
                                break;
 8009c72:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3720      	adds	r7, #32
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b090      	sub	sp, #64	@ 0x40
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8c:	2b3b      	cmp	r3, #59	@ 0x3b
 8009c8e:	d812      	bhi.n	8009cb6 <vReturnEthernetFrame+0x38>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c96:	e008      	b.n	8009caa <vReturnEthernetFrame+0x2c>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c9e:	4413      	add	r3, r2
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cac:	2b3b      	cmp	r3, #59	@ 0x3b
 8009cae:	ddf3      	ble.n	8009c98 <vReturnEthernetFrame+0x1a>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	223c      	movs	r2, #60	@ 0x3c
 8009cb4:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d111      	bne.n	8009ce0 <vReturnEthernetFrame+0x62>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fb8c 	bl	800a3e0 <pxDuplicateNetworkBufferWithDescriptor>
 8009cc8:	6378      	str	r0, [r7, #52]	@ 0x34

            if( pxNewBuffer != NULL )
 8009cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d005      	beq.n	8009cdc <vReturnEthernetFrame+0x5e>
            {
                xReleaseAfterSend = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cda:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cde:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 808e 	beq.w	8009e04 <vReturnEthernetFrame+0x186>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cec:	633b      	str	r3, [r7, #48]	@ 0x30
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eResolutionLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d111      	bne.n	8009d22 <vReturnEthernetFrame+0xa4>
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d02:	899b      	ldrh	r3, [r3, #12]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d0a:	d109      	bne.n	8009d20 <vReturnEthernetFrame+0xa2>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress );
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 f9fe 	bl	800b114 <FreeRTOS_FindEndPointOnNetMask>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009d1e:	e000      	b.n	8009d22 <vReturnEthernetFrame+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009d20:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d06c      	beq.n	8009e04 <vReturnEthernetFrame+0x186>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d30:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	899b      	ldrh	r3, [r3, #12]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d3c:	d11c      	bne.n	8009d78 <vReturnEthernetFrame+0xfa>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d40:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009d44:	617b      	str	r3, [r7, #20]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d4c:	f107 0118 	add.w	r1, r7, #24
 8009d50:	f107 0314 	add.w	r3, r7, #20
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe f88d 	bl	8007e74 <eARPGetCacheEntry>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                        if( eResult == eResolutionCacheHit )
 8009d60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d103      	bne.n	8009d70 <vReturnEthernetFrame+0xf2>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 8009d68:	f107 0318 	add.w	r3, r7, #24
 8009d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8009d6e:	e007      	b.n	8009d80 <vReturnEthernetFrame+0x102>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d72:	3306      	adds	r3, #6
 8009d74:	63bb      	str	r3, [r7, #56]	@ 0x38
                        break;
 8009d76:	e003      	b.n	8009d80 <vReturnEthernetFrame+0x102>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* Just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7a:	3306      	adds	r3, #6
 8009d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
                    break;
 8009d7e:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8009d84:	2206      	movs	r2, #6
 8009d86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d8a:	f00d fb9c 	bl	80174c6 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d92:	3338      	adds	r3, #56	@ 0x38
 8009d94:	63bb      	str	r3, [r7, #56]	@ 0x38
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d98:	3306      	adds	r3, #6
 8009d9a:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009d9c:	2206      	movs	r2, #6
 8009d9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009da0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009da2:	f00d fb90 	bl	80174c6 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8009da6:	f000 fba6 	bl	800a4f6 <xIsCallingFromIPTask>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d106      	bne.n	8009dbe <vReturnEthernetFrame+0x140>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009dba:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 8009dbc:	e022      	b.n	8009e04 <vReturnEthernetFrame+0x186>
            else if( xReleaseAfterSend != pdFALSE )
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d011      	beq.n	8009de8 <vReturnEthernetFrame+0x16a>
                xSendEvent.eEventType = eNetworkTxEvent;
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	733b      	strb	r3, [r7, #12]
                xSendEvent.pvData = pxNetworkBuffer;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	613b      	str	r3, [r7, #16]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8009dcc:	f107 030c 	add.w	r3, r7, #12
 8009dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff fce1 	bl	800979c <xSendEventStructToIPTask>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d111      	bne.n	8009e04 <vReturnEthernetFrame+0x186>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f007 fb6b 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
}
 8009de6:	e00d      	b.n	8009e04 <vReturnEthernetFrame+0x186>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dec:	b672      	cpsid	i
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	b662      	cpsie	i
 8009dfc:	623b      	str	r3, [r7, #32]
}
 8009dfe:	bf00      	nop
                configASSERT( pdFALSE );
 8009e00:	bf00      	nop
 8009e02:	e7fd      	b.n	8009e00 <vReturnEthernetFrame+0x182>
}
 8009e04:	bf00      	nop
 8009e06:	3740      	adds	r7, #64	@ 0x40
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8009e10:	4b03      	ldr	r3, [pc, #12]	@ (8009e20 <xIPIsNetworkTaskReady+0x14>)
 8009e12:	681b      	ldr	r3, [r3, #0]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	20001314 	.word	0x20001314

08009e24 <FreeRTOS_IsEndPointUp>:
 * @brief Returns whether a particular end-point is up.
 *
 * @return pdTRUE if a particular end-points is up.
 */
BaseType_t FreeRTOS_IsEndPointUp( const struct xNetworkEndPoint * pxEndPoint )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxEndPoint != NULL )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d007      	beq.n	8009e42 <FreeRTOS_IsEndPointUp+0x1e>
    {
        /* Is this particular end-point up? */
        xReturn = ( BaseType_t ) pxEndPoint->bits.bEndPointUp;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	e003      	b.n	8009e4a <FreeRTOS_IsEndPointUp+0x26>
    }
    else
    {
        /* Are all end-points up? */
        xReturn = FreeRTOS_AllEndPointsUp( NULL );
 8009e42:	2000      	movs	r0, #0
 8009e44:	f000 f806 	bl	8009e54 <FreeRTOS_AllEndPointsUp>
 8009e48:	60f8      	str	r0, [r7, #12]
    }

    return xReturn;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <FreeRTOS_AllEndPointsUp>:
 * @param[in] pxInterface The network interface of interest, or NULL to check all end-points.
 *
 * @return pdTRUE if all end-points are up, otherwise pdFALSE;
 */
BaseType_t FreeRTOS_AllEndPointsUp( const struct xNetworkInterface * pxInterface )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009e60:	4b11      	ldr	r3, [pc, #68]	@ (8009ea8 <FreeRTOS_AllEndPointsUp+0x54>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	60bb      	str	r3, [r7, #8]

    while( pxEndPoint != NULL )
 8009e66:	e015      	b.n	8009e94 <FreeRTOS_AllEndPointsUp+0x40>
    {
        if( ( pxInterface == NULL ) ||
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d004      	beq.n	8009e78 <FreeRTOS_AllEndPointsUp+0x24>
            ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if( ( pxInterface == NULL ) ||
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d10a      	bne.n	8009e8e <FreeRTOS_AllEndPointsUp+0x3a>

        {
            if( pxEndPoint->bits.bEndPointUp == pdFALSE_UNSIGNED )
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <FreeRTOS_AllEndPointsUp+0x3a>
            {
                xResult = pdFALSE;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60fb      	str	r3, [r7, #12]
                break;
 8009e8c:	e005      	b.n	8009e9a <FreeRTOS_AllEndPointsUp+0x46>
            }
        }

        pxEndPoint = pxEndPoint->pxNext;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e92:	60bb      	str	r3, [r7, #8]
    while( pxEndPoint != NULL )
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1e6      	bne.n	8009e68 <FreeRTOS_AllEndPointsUp+0x14>
    }

    return xResult;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	20002680 	.word	0x20002680

08009eac <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb8:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	899b      	ldrh	r3, [r3, #12]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d102      	bne.n	8009ece <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009ec8:	2328      	movs	r3, #40	@ 0x28
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	e001      	b.n	8009ed2 <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009ece:	2314      	movs	r3, #20
 8009ed0:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <uxIPHeaderSizeSocket+0x22>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	7a1b      	ldrb	r3, [r3, #8]
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009efc:	2328      	movs	r3, #40	@ 0x28
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e001      	b.n	8009f06 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009f02:	2314      	movs	r3, #20
 8009f04:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009f06:	68fb      	ldr	r3, [r7, #12]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <vApplicationPingReplyHook>:

//USER FUNCTIONS

//Hook for when you receive a ping reply
void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, //reply message from system
		uint16_t usIdentifier ){
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	460a      	mov	r2, r1
 8009f1e:	71fb      	strb	r3, [r7, #7]
 8009f20:	4613      	mov	r3, r2
 8009f22:	80bb      	strh	r3, [r7, #4]

}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <vApplicationIPNetworkEventHook_Multi>:

//checks the eNetworkUp type to see if it's  UP or DOWN
void vApplicationIPNetworkEventHook_Multi(eIPCallbackEvent_t networkEvent, struct xNetworkEndPoint *pxEndPoint){
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	6039      	str	r1, [r7, #0]
 8009f3a:	71fb      	strb	r3, [r7, #7]
	switch(networkEvent){
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <vApplicationIPNetworkEventHook_Multi+0x18>
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d008      	beq.n	8009f58 <vApplicationIPNetworkEventHook_Multi+0x28>
		break;
	case eNetworkDown:
		SEGGER_RTT_printf(0,"Network Down!");
		break;
	}
}
 8009f46:	e00c      	b.n	8009f62 <vApplicationIPNetworkEventHook_Multi+0x32>
		SEGGER_RTT_printf(0,"Network UP! IP: %lup\n", FreeRTOS_ntohl(pxEndPoint->ipv4_settings.ulIPAddress));
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4907      	ldr	r1, [pc, #28]	@ (8009f6c <vApplicationIPNetworkEventHook_Multi+0x3c>)
 8009f50:	2000      	movs	r0, #0
 8009f52:	f7f7 f8bf 	bl	80010d4 <SEGGER_RTT_printf>
		break;
 8009f56:	e004      	b.n	8009f62 <vApplicationIPNetworkEventHook_Multi+0x32>
		SEGGER_RTT_printf(0,"Network Down!");
 8009f58:	4905      	ldr	r1, [pc, #20]	@ (8009f70 <vApplicationIPNetworkEventHook_Multi+0x40>)
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	f7f7 f8ba 	bl	80010d4 <SEGGER_RTT_printf>
		break;
 8009f60:	bf00      	nop
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	08018538 	.word	0x08018538
 8009f70:	08018550 	.word	0x08018550

08009f74 <ulApplicationGetNextSequenceNumber>:
//get a random sequence number for the first packet
uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
                                           uint16_t usSourcePort,
                                           uint32_t ulDestinationAddress,
                                           uint16_t usDestinationPort )
{
 8009f74:	b590      	push	{r4, r7, lr}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	607a      	str	r2, [r7, #4]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	460b      	mov	r3, r1
 8009f82:	817b      	strh	r3, [r7, #10]
 8009f84:	4613      	mov	r3, r2
 8009f86:	813b      	strh	r3, [r7, #8]
    return (uint32_t) rand() ^ (uint32_t) xTaskGetTickCount();
 8009f88:	f00d f820 	bl	8016fcc <rand>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	461c      	mov	r4, r3
 8009f90:	f00b f836 	bl	8015000 <xTaskGetTickCount>
 8009f94:	4603      	mov	r3, r0
 8009f96:	4063      	eors	r3, r4
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd90      	pop	{r4, r7, pc}

08009fa0 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009fa6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009faa:	607b      	str	r3, [r7, #4]

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009fac:	4b26      	ldr	r3, [pc, #152]	@ (800a048 <xCalculateSleepTime+0xa8>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <xCalculateSleepTime+0x2a>
        {
            if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009fba:	4b23      	ldr	r3, [pc, #140]	@ (800a048 <xCalculateSleepTime+0xa8>)
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d902      	bls.n	8009fca <xCalculateSleepTime+0x2a>
            {
                uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 8009fc4:	4b20      	ldr	r3, [pc, #128]	@ (800a048 <xCalculateSleepTime+0xa8>)
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	607b      	str	r3, [r7, #4]
        }
    #endif

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009fca:	4b20      	ldr	r3, [pc, #128]	@ (800a04c <xCalculateSleepTime+0xac>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 8009fd0:	e012      	b.n	8009ff8 <xCalculateSleepTime+0x58>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d007      	beq.n	8009ff2 <xCalculateSleepTime+0x52>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d902      	bls.n	8009ff2 <xCalculateSleepTime+0x52>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff0:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ff6:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e9      	bne.n	8009fd2 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 8009ffe:	4b14      	ldr	r3, [pc, #80]	@ (800a050 <xCalculateSleepTime+0xb0>)
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d007      	beq.n	800a01c <xCalculateSleepTime+0x7c>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a00c:	4b10      	ldr	r3, [pc, #64]	@ (800a050 <xCalculateSleepTime+0xb0>)
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	429a      	cmp	r2, r3
 800a014:	d902      	bls.n	800a01c <xCalculateSleepTime+0x7c>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800a016:	4b0e      	ldr	r3, [pc, #56]	@ (800a050 <xCalculateSleepTime+0xb0>)
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800a01c:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <xCalculateSleepTime+0xb4>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d007      	beq.n	800a03a <xCalculateSleepTime+0x9a>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800a02a:	4b0a      	ldr	r3, [pc, #40]	@ (800a054 <xCalculateSleepTime+0xb4>)
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	429a      	cmp	r2, r3
 800a032:	d902      	bls.n	800a03a <xCalculateSleepTime+0x9a>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800a034:	4b07      	ldr	r3, [pc, #28]	@ (800a054 <xCalculateSleepTime+0xb4>)
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800a03a:	687b      	ldr	r3, [r7, #4]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	20002630 	.word	0x20002630
 800a04c:	20002680 	.word	0x20002680
 800a050:	20002644 	.word	0x20002644
 800a054:	20002658 	.word	0x20002658

0800a058 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        /* Is it time for ARP processing? */
        if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a05e:	4843      	ldr	r0, [pc, #268]	@ (800a16c <vCheckNetworkTimers+0x114>)
 800a060:	f000 f904 	bl	800a26c <prvIPTimerCheck>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <vCheckNetworkTimers+0x18>
        {
            ( void ) xSendEventToIPTask( eARPTimerEvent );
 800a06a:	2003      	movs	r0, #3
 800a06c:	f7ff fb80 	bl	8009770 <xSendEventToIPTask>
        }

        /* Is the ARP resolution timer expired? */
        if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800a070:	483f      	ldr	r0, [pc, #252]	@ (800a170 <vCheckNetworkTimers+0x118>)
 800a072:	f000 f8fb 	bl	800a26c <prvIPTimerCheck>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00e      	beq.n	800a09a <vCheckNetworkTimers+0x42>
        {
            if( pxARPWaitingNetworkBuffer != NULL )
 800a07c:	4b3d      	ldr	r3, [pc, #244]	@ (800a174 <vCheckNetworkTimers+0x11c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00a      	beq.n	800a09a <vCheckNetworkTimers+0x42>
            {
                /* Disable the ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a084:	2000      	movs	r0, #0
 800a086:	f000 f967 	bl	800a358 <vIPSetARPResolutionTimerEnableState>

                /* We have waited long enough for the ARP response. Now, free the network
                 * buffer. */
                vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800a08a:	4b3a      	ldr	r3, [pc, #232]	@ (800a174 <vCheckNetworkTimers+0x11c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4618      	mov	r0, r3
 800a090:	f007 fa14 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>

                /* Clear the pointer. */
                pxARPWaitingNetworkBuffer = NULL;
 800a094:	4b37      	ldr	r3, [pc, #220]	@ (800a174 <vCheckNetworkTimers+0x11c>)
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) */

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a09a:	4b37      	ldr	r3, [pc, #220]	@ (800a178 <vCheckNetworkTimers+0x120>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800a0a0:	e007      	b.n	800a0b2 <vCheckNetworkTimers+0x5a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	3348      	adds	r3, #72	@ 0x48
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 f8e0 	bl	800a26c <prvIPTimerCheck>
                        vRAProcess( pdFALSE, pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0b0:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f4      	bne.n	800a0a2 <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a0b8:	4830      	ldr	r0, [pc, #192]	@ (800a17c <vCheckNetworkTimers+0x124>)
 800a0ba:	f000 f8d7 	bl	800a26c <prvIPTimerCheck>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <vCheckNetworkTimers+0x72>
        {
            vDNSCheckCallBack( NULL );
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	f7fe fcbb 	bl	8008a40 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800a0ca:	4b2d      	ldr	r3, [pc, #180]	@ (800a180 <vCheckNetworkTimers+0x128>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f00a fa58 	bl	8014584 <uxQueueMessagesWaiting>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <vCheckNetworkTimers+0x88>
        {
            xWillSleep = pdTRUE;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	e001      	b.n	800a0e4 <vCheckNetworkTimers+0x8c>
        }
        else
        {
            xWillSleep = pdFALSE;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a0e4:	4827      	ldr	r0, [pc, #156]	@ (800a184 <vCheckNetworkTimers+0x12c>)
 800a0e6:	f000 f8c1 	bl	800a26c <prvIPTimerCheck>
 800a0ea:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <vCheckNetworkTimers+0x9e>
        {
            xCheckTCPSockets = pdTRUE;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d007      	beq.n	800a10c <vCheckNetworkTimers+0xb4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f002 f979 	bl	800c3f4 <xTCPTimerCheck>
 800a102:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	481f      	ldr	r0, [pc, #124]	@ (800a184 <vCheckNetworkTimers+0x12c>)
 800a108:	f000 f844 	bl	800a194 <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800a10c:	2000      	movs	r0, #0
 800a10e:	f003 f813 	bl	800d138 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800a112:	2000      	movs	r0, #0
 800a114:	f003 f82c 	bl	800d170 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800a118:	4b1b      	ldr	r3, [pc, #108]	@ (800a188 <vCheckNetworkTimers+0x130>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d120      	bne.n	800a162 <vCheckNetworkTimers+0x10a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800a120:	481a      	ldr	r0, [pc, #104]	@ (800a18c <vCheckNetworkTimers+0x134>)
 800a122:	f000 f8a3 	bl	800a26c <prvIPTimerCheck>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01a      	beq.n	800a162 <vCheckNetworkTimers+0x10a>
        {
            BaseType_t xUp = pdTRUE;
 800a12c:	2301      	movs	r3, #1
 800a12e:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a130:	4b17      	ldr	r3, [pc, #92]	@ (800a190 <vCheckNetworkTimers+0x138>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	e00e      	b.n	800a156 <vCheckNetworkTimers+0xfe>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	7f1b      	ldrb	r3, [r3, #28]
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d104      	bne.n	800a150 <vCheckNetworkTimers+0xf8>
                {
                    xUp = pdFALSE;
 800a146:	2300      	movs	r3, #0
 800a148:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800a14a:	6978      	ldr	r0, [r7, #20]
 800a14c:	f7ff fa78 	bl	8009640 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	617b      	str	r3, [r7, #20]
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1ed      	bne.n	800a138 <vCheckNetworkTimers+0xe0>
                }
            }

            vSetAllNetworksUp( xUp );
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f92f 	bl	800a3c0 <vSetAllNetworksUp>
        }
    }
}
 800a162:	bf00      	nop
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20002630 	.word	0x20002630
 800a170:	2000261c 	.word	0x2000261c
 800a174:	20001300 	.word	0x20001300
 800a178:	20002680 	.word	0x20002680
 800a17c:	20002658 	.word	0x20002658
 800a180:	20001304 	.word	0x20001304
 800a184:	20002644 	.word	0x20002644
 800a188:	20002618 	.word	0x20002618
 800a18c:	2000266c 	.word	0x2000266c
 800a190:	20002684 	.word	0x20002684

0800a194 <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f00b f9c6 	bl	8015534 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d105      	bne.n	800a1c0 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	7813      	ldrb	r3, [r2, #0]
 800a1b8:	f043 0302 	orr.w	r3, r3, #2
 800a1bc:	7013      	strb	r3, [r2, #0]
 800a1be:	e004      	b.n	800a1ca <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	7813      	ldrb	r3, [r2, #0]
 800a1c4:	f023 0302 	bic.w	r3, r3, #2
 800a1c8:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	7813      	ldrb	r3, [r2, #0]
 800a1ce:	f043 0301 	orr.w	r3, r3, #1
 800a1d2:	7013      	strb	r3, [r2, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
    void vIPTimerStartARPResolution( TickType_t xTime )
    {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
        prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	4803      	ldr	r0, [pc, #12]	@ (800a1f4 <vIPTimerStartARPResolution+0x18>)
 800a1e8:	f7ff ffd4 	bl	800a194 <prvIPTimerStart>
    }
 800a1ec:	bf00      	nop
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	2000261c 	.word	0x2000261c

0800a1f8 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff ffc2 	bl	800a194 <prvIPTimerStart>
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	4803      	ldr	r0, [pc, #12]	@ (800a230 <vTCPTimerReload+0x18>)
 800a224:	f7ff ffe8 	bl	800a1f8 <prvIPTimerReload>
    }
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20002644 	.word	0x20002644

0800a234 <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
    void vARPTimerReload( TickType_t xTime )
    {
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xARPTimer, xTime );
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	4803      	ldr	r0, [pc, #12]	@ (800a24c <vARPTimerReload+0x18>)
 800a240:	f7ff ffda 	bl	800a1f8 <prvIPTimerReload>
    }
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	20002630 	.word	0x20002630

0800a250 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	4803      	ldr	r0, [pc, #12]	@ (800a268 <vNetworkTimerReload+0x18>)
 800a25c:	f7ff ffcc 	bl	800a1f8 <prvIPTimerReload>
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	2000266c 	.word	0x2000266c

0800a26c <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d102      	bne.n	800a288 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a282:	2300      	movs	r3, #0
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	e028      	b.n	800a2da <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10f      	bne.n	800a2b6 <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	1d1a      	adds	r2, r3, #4
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	330c      	adds	r3, #12
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	f00b f987 	bl	80155b4 <xTaskCheckForTimeOut>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	7813      	ldrb	r3, [r2, #0]
 800a2b0:	f043 0302 	orr.w	r3, r3, #2
 800a2b4:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d008      	beq.n	800a2d6 <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff ff62 	bl	800a194 <prvIPTimerStart>
            xReturn = pdTRUE;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e001      	b.n	800a2da <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a2da:	68fb      	ldr	r3, [r7, #12]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a2ec:	4a0c      	ldr	r2, [pc, #48]	@ (800a320 <vIPSetTCPTimerExpiredState+0x3c>)
 800a2ee:	7813      	ldrb	r3, [r2, #0]
 800a2f0:	f043 0301 	orr.w	r3, r3, #1
 800a2f4:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a2fc:	4a08      	ldr	r2, [pc, #32]	@ (800a320 <vIPSetTCPTimerExpiredState+0x3c>)
 800a2fe:	7813      	ldrb	r3, [r2, #0]
 800a300:	f043 0302 	orr.w	r3, r3, #2
 800a304:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a306:	e004      	b.n	800a312 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a308:	4a05      	ldr	r2, [pc, #20]	@ (800a320 <vIPSetTCPTimerExpiredState+0x3c>)
 800a30a:	7813      	ldrb	r3, [r2, #0]
 800a30c:	f023 0302 	bic.w	r3, r3, #2
 800a310:	7013      	strb	r3, [r2, #0]
    }
 800a312:	bf00      	nop
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	20002644 	.word	0x20002644

0800a324 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetARPTimerEnableState( BaseType_t xEnableState )
    {
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
        if( xEnableState != pdFALSE )
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d005      	beq.n	800a33e <vIPSetARPTimerEnableState+0x1a>
        {
            xARPTimer.bActive = pdTRUE_UNSIGNED;
 800a332:	4a08      	ldr	r2, [pc, #32]	@ (800a354 <vIPSetARPTimerEnableState+0x30>)
 800a334:	7813      	ldrb	r3, [r2, #0]
 800a336:	f043 0301 	orr.w	r3, r3, #1
 800a33a:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xARPTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a33c:	e004      	b.n	800a348 <vIPSetARPTimerEnableState+0x24>
            xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a33e:	4a05      	ldr	r2, [pc, #20]	@ (800a354 <vIPSetARPTimerEnableState+0x30>)
 800a340:	7813      	ldrb	r3, [r2, #0]
 800a342:	f023 0301 	bic.w	r3, r3, #1
 800a346:	7013      	strb	r3, [r2, #0]
    }
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	20002630 	.word	0x20002630

0800a358 <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
    {
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
        if( xEnableState != pdFALSE )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d005      	beq.n	800a372 <vIPSetARPResolutionTimerEnableState+0x1a>
        {
            xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800a366:	4a08      	ldr	r2, [pc, #32]	@ (800a388 <vIPSetARPResolutionTimerEnableState+0x30>)
 800a368:	7813      	ldrb	r3, [r2, #0]
 800a36a:	f043 0301 	orr.w	r3, r3, #1
 800a36e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a370:	e004      	b.n	800a37c <vIPSetARPResolutionTimerEnableState+0x24>
            xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800a372:	4a05      	ldr	r2, [pc, #20]	@ (800a388 <vIPSetARPResolutionTimerEnableState+0x30>)
 800a374:	7813      	ldrb	r3, [r2, #0]
 800a376:	f023 0301 	bic.w	r3, r3, #1
 800a37a:	7013      	strb	r3, [r2, #0]
    }
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	2000261c 	.word	0x2000261c

0800a38c <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d005      	beq.n	800a3a6 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800a39a:	4a08      	ldr	r2, [pc, #32]	@ (800a3bc <vIPSetDNSTimerEnableState+0x30>)
 800a39c:	7813      	ldrb	r3, [r2, #0]
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a3a4:	e004      	b.n	800a3b0 <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800a3a6:	4a05      	ldr	r2, [pc, #20]	@ (800a3bc <vIPSetDNSTimerEnableState+0x30>)
 800a3a8:	7813      	ldrb	r3, [r2, #0]
 800a3aa:	f023 0301 	bic.w	r3, r3, #1
 800a3ae:	7013      	strb	r3, [r2, #0]
    }
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20002658 	.word	0x20002658

0800a3c0 <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800a3c8:	4a04      	ldr	r2, [pc, #16]	@ (800a3dc <vSetAllNetworksUp+0x1c>)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6013      	str	r3, [r2, #0]
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	20002618 	.word	0x20002618

0800a3e0 <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	617b      	str	r3, [r7, #20]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	6838      	ldr	r0, [r7, #0]
 800a3f2:	f006 ffb7 	bl	8011364 <pxGetNetworkBufferWithDescriptor>
 800a3f6:	6138      	str	r0, [r7, #16]

    if( pxNewBuffer != NULL )
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d038      	beq.n	800a470 <pxDuplicateNetworkBufferWithDescriptor+0x90>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10d      	bne.n	800a422 <pxDuplicateNetworkBufferWithDescriptor+0x42>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40a:	b672      	cpsid	i
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	b662      	cpsie	i
 800a41a:	60fb      	str	r3, [r7, #12]
}
 800a41c:	bf00      	nop
 800a41e:	bf00      	nop
 800a420:	e7fd      	b.n	800a41e <pxDuplicateNetworkBufferWithDescriptor+0x3e>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d902      	bls.n	800a432 <pxDuplicateNetworkBufferWithDescriptor+0x52>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a430:	617b      	str	r3, [r7, #20]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	695a      	ldr	r2, [r3, #20]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	4619      	mov	r1, r3
 800a46c:	f00d f82b 	bl	80174c6 <memcpy>
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800a470:	693b      	ldr	r3, [r7, #16]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3718      	adds	r7, #24
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d102      	bne.n	800a490 <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	e013      	b.n	800a4b8 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f816 	bl	800a4c2 <void_ptr_to_uintptr>
 800a496:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	3b22      	subs	r3, #34	@ 0x22
 800a4a0:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f003 0303 	and.w	r3, r3, #3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d103      	bne.n	800a4b4 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]
 800a4b2:	e001      	b.n	800a4b8 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff ffc7 	bl	800a47a <prvPacketBuffer_to_NetworkBuffer>
 800a4ec:	4603      	mov	r3, r0
    }
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800a4fc:	f00b f9ac 	bl	8015858 <xTaskGetCurrentTaskHandle>
 800a500:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800a502:	f7ff f84f 	bl	80095a4 <FreeRTOS_GetIPTaskHandle>
 800a506:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d102      	bne.n	800a516 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800a510:	2301      	movs	r3, #1
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e001      	b.n	800a51a <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a51a:	68fb      	ldr	r3, [r7, #12]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10d      	bne.n	800a54e <prvProcessNetworkDownEvent+0x2a>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a536:	b672      	cpsid	i
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	b662      	cpsie	i
 800a546:	613b      	str	r3, [r7, #16]
}
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	e7fd      	b.n	800a54a <prvProcessNetworkDownEvent+0x26>
    configASSERT( pxInterface->pfInitialise != NULL );
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10d      	bne.n	800a572 <prvProcessNetworkDownEvent+0x4e>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	b672      	cpsid	i
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	b662      	cpsie	i
 800a56a:	60fb      	str	r3, [r7, #12]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <prvProcessNetworkDownEvent+0x4a>
    /* Stop the Address Resolution timer while there is no network. */
    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        vIPSetARPTimerEnableState( pdFALSE );
 800a572:	2000      	movs	r0, #0
 800a574:	f7ff fed6 	bl	800a324 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fdf5 	bl	800b168 <FreeRTOS_FirstEndPoint>
 800a57e:	6178      	str	r0, [r7, #20]
 800a580:	e022      	b.n	800a5c8 <prvProcessNetworkDownEvent+0xa4>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800a588:	f023 0310 	bic.w	r3, r3, #16
 800a58c:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d004      	beq.n	800a5aa <prvProcessNetworkDownEvent+0x86>
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
                }
                #else
                {
                    vApplicationIPNetworkEventHook_Multi( eNetworkDown, pxEndPoint );
 800a5a0:	6979      	ldr	r1, [r7, #20]
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	f7ff fcc4 	bl	8009f30 <vApplicationIPNetworkEventHook_Multi>
 800a5a8:	e006      	b.n	800a5b8 <prvProcessNetworkDownEvent+0x94>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800a5b0:	f043 0308 	orr.w	r3, r3, #8
 800a5b4:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
        #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )

            /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
             * treat network down as a "delivery problem" and flush the ARP cache for this
             * interface. */
            FreeRTOS_ClearARP( pxEndPoint );
 800a5b8:	6978      	ldr	r0, [r7, #20]
 800a5ba:	f7fd ff13 	bl	80083e4 <FreeRTOS_ClearARP>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a5be:	6979      	ldr	r1, [r7, #20]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fe19 	bl	800b1f8 <FreeRTOS_NextEndPoint>
 800a5c6:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1d9      	bne.n	800a582 <prvProcessNetworkDownEvent+0x5e>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	4798      	blx	r3
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d126      	bne.n	800a62a <prvProcessNetworkDownEvent+0x106>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	7f13      	ldrb	r3, [r2, #28]
 800a5e0:	f043 0301 	orr.w	r3, r3, #1
 800a5e4:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fdbe 	bl	800b168 <FreeRTOS_FirstEndPoint>
 800a5ec:	6178      	str	r0, [r7, #20]
 800a5ee:	e018      	b.n	800a622 <prvProcessNetworkDownEvent+0xfe>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d107      	bne.n	800a610 <prvProcessNetworkDownEvent+0xec>
                {
                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE_UNSIGNED:
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800a600:	6978      	ldr	r0, [r7, #20]
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	331c      	adds	r3, #28
 800a606:	221c      	movs	r2, #28
 800a608:	4619      	mov	r1, r3
 800a60a:	f00c ff5c 	bl	80174c6 <memcpy>
                            break;
 800a60e:	e000      	b.n	800a612 <prvProcessNetworkDownEvent+0xee>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800a610:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800a612:	6978      	ldr	r0, [r7, #20]
 800a614:	f7fe ffd2 	bl	80095bc <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a618:	6979      	ldr	r1, [r7, #20]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fdec 	bl	800b1f8 <FreeRTOS_NextEndPoint>
 800a620:	6178      	str	r0, [r7, #20]
             pxEndPoint != NULL;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e3      	bne.n	800a5f0 <prvProcessNetworkDownEvent+0xcc>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800a628:	e002      	b.n	800a630 <prvProcessNetworkDownEvent+0x10c>
        vSetAllNetworksUp( pdFALSE );
 800a62a:	2000      	movs	r0, #0
 800a62c:	f7ff fec8 	bl	800a3c0 <vSetAllNetworksUp>
}
 800a630:	bf00      	nop
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08c      	sub	sp, #48	@ 0x30
 800a63c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a63e:	f7ff fbe5 	bl	8009e0c <xIPIsNetworkTaskReady>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00d      	beq.n	800a664 <vPreCheckConfigs+0x2c>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64c:	b672      	cpsid	i
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	b662      	cpsie	i
 800a65c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a65e:	bf00      	nop
 800a660:	bf00      	nop
 800a662:	e7fd      	b.n	800a660 <vPreCheckConfigs+0x28>
    configASSERT( xNetworkEventQueue == NULL );
 800a664:	4b58      	ldr	r3, [pc, #352]	@ (800a7c8 <vPreCheckConfigs+0x190>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00d      	beq.n	800a688 <vPreCheckConfigs+0x50>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a670:	b672      	cpsid	i
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	b662      	cpsie	i
 800a680:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	e7fd      	b.n	800a684 <vPreCheckConfigs+0x4c>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800a688:	f7fe ff8c 	bl	80095a4 <FreeRTOS_GetIPTaskHandle>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00d      	beq.n	800a6ae <vPreCheckConfigs+0x76>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a696:	b672      	cpsid	i
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	b662      	cpsie	i
 800a6a6:	623b      	str	r3, [r7, #32]
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	e7fd      	b.n	800a6aa <vPreCheckConfigs+0x72>
             */
            configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );
        #endif /* if ( ipconfigSUPPRESS_BUFFER_PADDING_CHECK == 0 ) */

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800a6ae:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800a6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b6:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d80d      	bhi.n	800a6da <vPreCheckConfigs+0xa2>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c2:	b672      	cpsid	i
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	b662      	cpsie	i
 800a6d2:	61fb      	str	r3, [r7, #28]
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop
 800a6d8:	e7fd      	b.n	800a6d6 <vPreCheckConfigs+0x9e>

        uxSize = sizeof( EthernetHeader_t );
 800a6da:	230e      	movs	r3, #14
 800a6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800a6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e0:	2b0e      	cmp	r3, #14
 800a6e2:	d00d      	beq.n	800a700 <vPreCheckConfigs+0xc8>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e8:	b672      	cpsid	i
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	b662      	cpsie	i
 800a6f8:	61bb      	str	r3, [r7, #24]
}
 800a6fa:	bf00      	nop
 800a6fc:	bf00      	nop
 800a6fe:	e7fd      	b.n	800a6fc <vPreCheckConfigs+0xc4>

        uxSize = sizeof( ARPHeader_t );
 800a700:	231c      	movs	r3, #28
 800a702:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800a704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a706:	2b1c      	cmp	r3, #28
 800a708:	d00d      	beq.n	800a726 <vPreCheckConfigs+0xee>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	b672      	cpsid	i
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	b662      	cpsie	i
 800a71e:	617b      	str	r3, [r7, #20]
}
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	e7fd      	b.n	800a722 <vPreCheckConfigs+0xea>

        uxSize = sizeof( IPHeader_t );
 800a726:	2314      	movs	r3, #20
 800a728:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800a72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72c:	2b14      	cmp	r3, #20
 800a72e:	d00d      	beq.n	800a74c <vPreCheckConfigs+0x114>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	613b      	str	r3, [r7, #16]
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	e7fd      	b.n	800a748 <vPreCheckConfigs+0x110>

        uxSize = sizeof( ICMPHeader_t );
 800a74c:	2308      	movs	r3, #8
 800a74e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800a750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a752:	2b08      	cmp	r3, #8
 800a754:	d00d      	beq.n	800a772 <vPreCheckConfigs+0x13a>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	b672      	cpsid	i
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	b662      	cpsie	i
 800a76a:	60fb      	str	r3, [r7, #12]
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	e7fd      	b.n	800a76e <vPreCheckConfigs+0x136>

        uxSize = sizeof( UDPHeader_t );
 800a772:	2308      	movs	r3, #8
 800a774:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800a776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a778:	2b08      	cmp	r3, #8
 800a77a:	d00d      	beq.n	800a798 <vPreCheckConfigs+0x160>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a780:	b672      	cpsid	i
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	b662      	cpsie	i
 800a790:	60bb      	str	r3, [r7, #8]
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	e7fd      	b.n	800a794 <vPreCheckConfigs+0x15c>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800a798:	2324      	movs	r3, #36	@ 0x24
 800a79a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800a79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79e:	2b24      	cmp	r3, #36	@ 0x24
 800a7a0:	d00d      	beq.n	800a7be <vPreCheckConfigs+0x186>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a6:	b672      	cpsid	i
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	b662      	cpsie	i
 800a7b6:	607b      	str	r3, [r7, #4]
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	e7fd      	b.n	800a7ba <vPreCheckConfigs+0x182>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800a7be:	bf00      	nop
 800a7c0:	3730      	adds	r7, #48	@ 0x30
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20001304 	.word	0x20001304

0800a7cc <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	bf38      	it	cc
 800a7de:	4613      	movcc	r3, r2
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	bfa8      	it	ge
 800a7fe:	4613      	movge	r3, r2
}
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	4293      	cmp	r3, r2
 800a81c:	bf28      	it	cs
 800a81e:	4613      	movcs	r3, r2
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	4293      	cmp	r3, r2
 800a83c:	bf28      	it	cs
 800a83e:	4613      	movcs	r3, r2
}
 800a840:	4618      	mov	r0, r3
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <FreeRTOS_add_int32>:
 * @param[in] b the second value.
 * @return The result of a + b if no overflow/underflow occurs, or INT32_MAX/INT32_MIN if overflow/underflow would occur.
 */
int32_t FreeRTOS_add_int32( int32_t a,
                            int32_t b )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
    int32_t ret;

    if( ( a > 0 ) && ( b > ( ipINT32_MAX_VALUE - a ) ) )
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dd0a      	ble.n	800a872 <FreeRTOS_add_int32+0x26>
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a862:	1a9b      	subs	r3, r3, r2
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	dd03      	ble.n	800a872 <FreeRTOS_add_int32+0x26>
    {
        ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800a86a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	e010      	b.n	800a894 <FreeRTOS_add_int32+0x48>
    }
    else if( ( a < 0 ) && ( b < ( ipINT32_MIN_VALUE - a ) ) )
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	da09      	bge.n	800a88c <FreeRTOS_add_int32+0x40>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f1c3 4300 	rsb	r3, r3, #2147483648	@ 0x80000000
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	429a      	cmp	r2, r3
 800a882:	da03      	bge.n	800a88c <FreeRTOS_add_int32+0x40>
    {
        ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800a884:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	e003      	b.n	800a894 <FreeRTOS_add_int32+0x48>
    }
    else
    {
        ret = a + b;
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	4413      	add	r3, r2
 800a892:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 800a894:	68fb      	ldr	r3, [r7, #12]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <FreeRTOS_multiply_int32>:
 * @param[in] b the second value.
 * @return The result of a * b if no overflow occurs, or ipINT32_MAX_VALUE if an overflow would occur.
 */
int32_t FreeRTOS_multiply_int32( int32_t a,
                                 int32_t b )
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
    int32_t ret;

    /* Check for overflow/underflow */
    if( a > 0 )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	dd23      	ble.n	800a8fa <FreeRTOS_multiply_int32+0x58>
    {
        if( ( b > 0 ) && ( a > ( ipINT32_MAX_VALUE / b ) ) )
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dd0b      	ble.n	800a8d0 <FreeRTOS_multiply_int32+0x2e>
 800a8b8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	fb92 f3f3 	sdiv	r3, r2, r3
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	dd03      	ble.n	800a8d0 <FreeRTOS_multiply_int32+0x2e>
        {
            ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800a8c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a8cc:	60fb      	str	r3, [r7, #12]
 800a8ce:	e037      	b.n	800a940 <FreeRTOS_multiply_int32+0x9e>
        }
        else if( ( b < 0 ) && ( b < ( ipINT32_MIN_VALUE / a ) ) )
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da0b      	bge.n	800a8ee <FreeRTOS_multiply_int32+0x4c>
 800a8d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	fb92 f3f3 	sdiv	r3, r2, r3
 800a8e0:	683a      	ldr	r2, [r7, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	da03      	bge.n	800a8ee <FreeRTOS_multiply_int32+0x4c>
        {
            ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800a8e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	e028      	b.n	800a940 <FreeRTOS_multiply_int32+0x9e>
        }
        else
        {
            ret = a * b;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	fb02 f303 	mul.w	r3, r2, r3
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	e022      	b.n	800a940 <FreeRTOS_multiply_int32+0x9e>
        }
    }
    else
    {
        if( ( b > 0 ) && ( a < ( ipINT32_MIN_VALUE / b ) ) )
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	dd0b      	ble.n	800a918 <FreeRTOS_multiply_int32+0x76>
 800a900:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	fb92 f3f3 	sdiv	r3, r2, r3
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	da03      	bge.n	800a918 <FreeRTOS_multiply_int32+0x76>
        {
            ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800a910:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	e013      	b.n	800a940 <FreeRTOS_multiply_int32+0x9e>
        }
        else if( ( b < 0 ) && ( a < ( ipINT32_MAX_VALUE / b ) ) )
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	da0b      	bge.n	800a936 <FreeRTOS_multiply_int32+0x94>
 800a91e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	fb92 f3f3 	sdiv	r3, r2, r3
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	da03      	bge.n	800a936 <FreeRTOS_multiply_int32+0x94>
        {
            ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800a92e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e004      	b.n	800a940 <FreeRTOS_multiply_int32+0x9e>
        }
        else
        {
            ret = a * b;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	fb02 f303 	mul.w	r3, r2, r3
 800a93e:	60fb      	str	r3, [r7, #12]
        }
    }

    return ret;
 800a940:	68fb      	ldr	r3, [r7, #12]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800a94e:	b480      	push	{r7}
 800a950:	b085      	sub	sp, #20
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10d      	bne.n	800a97e <FreeRTOS_round_up+0x30>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a966:	b672      	cpsid	i
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	b662      	cpsie	i
 800a976:	60bb      	str	r3, [r7, #8]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <FreeRTOS_round_up+0x2c>

    if( d != 0U )
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00a      	beq.n	800a99a <FreeRTOS_round_up+0x4c>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	4413      	add	r3, r2
 800a98a:	1e5a      	subs	r2, r3, #1
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800a99a:	68fb      	ldr	r3, [r7, #12]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a9be:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3302      	adds	r3, #2
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a9c8:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	3203      	adds	r2, #3
 800a9ce:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a9d0:	4313      	orrs	r3, r2
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	021b      	lsls	r3, r3, #8
 800a9ec:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	3201      	adds	r2, #1
 800a9f2:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	b29b      	uxth	r3, r3
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800aa04:	b480      	push	{r7}
 800aa06:	b08b      	sub	sp, #44	@ 0x2c
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	61fb      	str	r3, [r7, #28]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800aa16:	2300      	movs	r3, #0
 800aa18:	61bb      	str	r3, [r7, #24]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b21      	cmp	r3, #33	@ 0x21
 800aa1e:	d802      	bhi.n	800aa26 <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800aa20:	2301      	movs	r3, #1
 800aa22:	61bb      	str	r3, [r7, #24]
                break;
 800aa24:	e065      	b.n	800aaf2 <xCheckIPv4SizeFields+0xee>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	7b9b      	ldrb	r3, [r3, #14]
 800aa2a:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800aa2c:	8afb      	ldrh	r3, [r7, #22]
 800aa2e:	2b44      	cmp	r3, #68	@ 0x44
 800aa30:	d902      	bls.n	800aa38 <xCheckIPv4SizeFields+0x34>
 800aa32:	8afb      	ldrh	r3, [r7, #22]
 800aa34:	2b4f      	cmp	r3, #79	@ 0x4f
 800aa36:	d902      	bls.n	800aa3e <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800aa38:	2302      	movs	r3, #2
 800aa3a:	61bb      	str	r3, [r7, #24]
                break;
 800aa3c:	e059      	b.n	800aaf2 <xCheckIPv4SizeFields+0xee>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800aa3e:	8afb      	ldrh	r3, [r7, #22]
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800aa48:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800aa4a:	8afb      	ldrh	r3, [r7, #22]
 800aa4c:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	330e      	adds	r3, #14
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d202      	bcs.n	800aa5e <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800aa58:	2303      	movs	r3, #3
 800aa5a:	61bb      	str	r3, [r7, #24]
                break;
 800aa5c:	e049      	b.n	800aaf2 <xCheckIPv4SizeFields+0xee>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	7c1a      	ldrb	r2, [r3, #16]
 800aa62:	7c5b      	ldrb	r3, [r3, #17]
 800aa64:	021b      	lsls	r3, r3, #8
 800aa66:	4313      	orrs	r3, r2
 800aa68:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800aa6a:	89fb      	ldrh	r3, [r7, #14]
 800aa6c:	330e      	adds	r3, #14
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d202      	bcs.n	800aa7a <xCheckIPv4SizeFields+0x76>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800aa74:	2304      	movs	r3, #4
 800aa76:	61bb      	str	r3, [r7, #24]
                break;
 800aa78:	e03b      	b.n	800aaf2 <xCheckIPv4SizeFields+0xee>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	7ddb      	ldrb	r3, [r3, #23]
 800aa7e:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800aa80:	7b7b      	ldrb	r3, [r7, #13]
 800aa82:	2b11      	cmp	r3, #17
 800aa84:	d103      	bne.n	800aa8e <xCheckIPv4SizeFields+0x8a>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	3316      	adds	r3, #22
 800aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa8c:	e013      	b.n	800aab6 <xCheckIPv4SizeFields+0xb2>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800aa8e:	7b7b      	ldrb	r3, [r7, #13]
 800aa90:	2b06      	cmp	r3, #6
 800aa92:	d103      	bne.n	800aa9c <xCheckIPv4SizeFields+0x98>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	3322      	adds	r3, #34	@ 0x22
 800aa98:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa9a:	e00c      	b.n	800aab6 <xCheckIPv4SizeFields+0xb2>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800aa9c:	7b7b      	ldrb	r3, [r7, #13]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d002      	beq.n	800aaa8 <xCheckIPv4SizeFields+0xa4>
 800aaa2:	7b7b      	ldrb	r3, [r7, #13]
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d103      	bne.n	800aab0 <xCheckIPv4SizeFields+0xac>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	3316      	adds	r3, #22
 800aaac:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaae:	e002      	b.n	800aab6 <xCheckIPv4SizeFields+0xb2>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800aab0:	2305      	movs	r3, #5
 800aab2:	61bb      	str	r3, [r7, #24]
                break;
 800aab4:	e01d      	b.n	800aaf2 <xCheckIPv4SizeFields+0xee>
            }

            if( uxBufferLength < uxMinimumLength )
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d202      	bcs.n	800aac4 <xCheckIPv4SizeFields+0xc0>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800aabe:	2306      	movs	r3, #6
 800aac0:	61bb      	str	r3, [r7, #24]
                break;
 800aac2:	e016      	b.n	800aaf2 <xCheckIPv4SizeFields+0xee>
            }

            uxLength = ( size_t ) usLength;
 800aac4:	89fb      	ldrh	r3, [r7, #14]
 800aac6:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	461a      	mov	r2, r3
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b07      	cmp	r3, #7
 800aad8:	d906      	bls.n	800aae8 <xCheckIPv4SizeFields+0xe4>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800aae0:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d902      	bls.n	800aaee <xCheckIPv4SizeFields+0xea>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800aae8:	2307      	movs	r3, #7
 800aaea:	61bb      	str	r3, [r7, #24]
                break;
 800aaec:	e001      	b.n	800aaf2 <xCheckIPv4SizeFields+0xee>
            }

            xResult = pdPASS;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	623b      	str	r3, [r7, #32]
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
        }

        return xResult;
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
    }
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	372c      	adds	r7, #44	@ 0x2c
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800ab12:	d306      	bcc.n	800ab22 <xIsIPv4Multicast+0x22>
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800ab1a:	d202      	bcs.n	800ab22 <xIsIPv4Multicast+0x22>
    {
        xReturn = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	e001      	b.n	800ab26 <xIsIPv4Multicast+0x26>
    }
    else
    {
        xReturn = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800ab26:	68fb      	ldr	r3, [r7, #12]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <xIsIPv4Broadcast>:
 *
 * @return pdTRUE if the IP address is a broadcast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Broadcast( uint32_t ulIPAddress,
                             struct xNetworkEndPoint ** ppxEndPoint )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
    BaseType_t xIsBroadcast;
    NetworkEndPoint_t * pxEndPoint;

    /* Assign a default answer based on the "global" broadcast.	 This way
     * we can still return the correct result even if there are no endpoints. */
    xIsBroadcast = ( ulIPAddress == FREERTOS_INADDR_BROADCAST ) ? pdTRUE : pdFALSE;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab44:	d101      	bne.n	800ab4a <xIsIPv4Broadcast+0x16>
 800ab46:	2301      	movs	r3, #1
 800ab48:	e000      	b.n	800ab4c <xIsIPv4Broadcast+0x18>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60fb      	str	r3, [r7, #12]

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800ab4e:	2000      	movs	r0, #0
 800ab50:	f000 fb0a 	bl	800b168 <FreeRTOS_FirstEndPoint>
 800ab54:	60b8      	str	r0, [r7, #8]
 800ab56:	e00f      	b.n	800ab78 <xIsIPv4Broadcast+0x44>
            }
        #endif /* ( ipconfigUSE_IPv6 == ipconfigENABLE ) */

        /* If we already know if ulIPAddress is a broadcast,
         * simply return this first matching IPv4 endpoint. */
        if( xIsBroadcast == pdTRUE )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d010      	beq.n	800ab80 <xIsIPv4Broadcast+0x4c>
        {
            break;
        }
        else if( ulIPAddress == pxEndPoint->ipv4_settings.ulBroadcastAddress )
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d102      	bne.n	800ab6e <xIsIPv4Broadcast+0x3a>
        {
            xIsBroadcast = pdTRUE;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	60fb      	str	r3, [r7, #12]
            break;
 800ab6c:	e009      	b.n	800ab82 <xIsIPv4Broadcast+0x4e>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	2000      	movs	r0, #0
 800ab72:	f000 fb41 	bl	800b1f8 <FreeRTOS_NextEndPoint>
 800ab76:	60b8      	str	r0, [r7, #8]
         pxEndPoint != NULL;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1ec      	bne.n	800ab58 <xIsIPv4Broadcast+0x24>
 800ab7e:	e000      	b.n	800ab82 <xIsIPv4Broadcast+0x4e>
            break;
 800ab80:	bf00      	nop
    /* If the caller wants to know the corresponding endpoint, copy the result.
     * Note that this may be null if ulIPAddress is 255.255.255.255 AND there are
     * no IPv4 endpoints.
     * Also, when ulIPAddress is 255.255.255.255, we will
     * return the first IPv4 endpoint that we run across. */
    if( ( xIsBroadcast == pdTRUE ) && ( ppxEndPoint != NULL ) )
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d105      	bne.n	800ab94 <xIsIPv4Broadcast+0x60>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <xIsIPv4Broadcast+0x60>
    {
        *ppxEndPoint = pxEndPoint;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	601a      	str	r2, [r3, #0]
    }

    return xIsBroadcast;
 800ab94:	68fb      	ldr	r3, [r7, #12]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <xBadIPv4Loopback>:
 *
 * @return Returns pdTRUE if the packet should be stopped, because either the source
 *         or the target address is a loopback address.
 */
BaseType_t xBadIPv4Loopback( const IPHeader_t * const pxIPHeader )
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b086      	sub	sp, #24
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	617b      	str	r3, [r7, #20]
    BaseType_t x1 = ( xIsIPv4Loopback( pxIPHeader->ulDestinationIPAddress ) != 0 ) ? pdTRUE : pdFALSE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f81e 	bl	800abf0 <xIsIPv4Loopback>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <xBadIPv4Loopback+0x20>
 800abba:	2301      	movs	r3, #1
 800abbc:	e000      	b.n	800abc0 <xBadIPv4Loopback+0x22>
 800abbe:	2300      	movs	r3, #0
 800abc0:	613b      	str	r3, [r7, #16]
    BaseType_t x2 = ( xIsIPv4Loopback( pxIPHeader->ulSourceIPAddress ) != 0 ) ? pdTRUE : pdFALSE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 f812 	bl	800abf0 <xIsIPv4Loopback>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <xBadIPv4Loopback+0x38>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <xBadIPv4Loopback+0x3a>
 800abd6:	2300      	movs	r3, #0
 800abd8:	60fb      	str	r3, [r7, #12]

    if( x1 != x2 )
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d001      	beq.n	800abe6 <xBadIPv4Loopback+0x48>
    {
        /* Either the source or the destination address is an IPv4 loopback address. */
        xReturn = pdTRUE;
 800abe2:	2301      	movs	r3, #1
 800abe4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800abe6:	697b      	ldr	r3, [r7, #20]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <xIsIPv4Loopback>:
 * @param[in] ulAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv4Loopback( uint32_t ulAddress )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60fb      	str	r3, [r7, #12]
    uint32_t ulIP = FreeRTOS_ntohl( ulAddress );
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_LOOPBACK_IPv4 ) &&
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800ac06:	d304      	bcc.n	800ac12 <xIsIPv4Loopback+0x22>
        ( ulIP < ipLAST_LOOPBACK_IPv4 ) )
 800ac08:	68bb      	ldr	r3, [r7, #8]
    if( ( ulIP >= ipFIRST_LOOPBACK_IPv4 ) &&
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	db01      	blt.n	800ac12 <xIsIPv4Loopback+0x22>
    {
        xReturn = pdTRUE;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800ac12:	68fb      	ldr	r3, [r7, #12]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b08a      	sub	sp, #40	@ 0x28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	330e      	adds	r3, #14
 800ac36:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
    {
        /* In systems with a very small amount of RAM, it might be advantageous
         * to have incoming messages checked earlier, by the network card driver.
         * This method may decrease the usage of scarce network buffers. */
        uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	61fb      	str	r3, [r7, #28]
        uint32_t ulSourceIPAddress = pxIPHeader->ulSourceIPAddress;
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	61bb      	str	r3, [r7, #24]
        /* Get a reference to the endpoint that the packet was assigned to during pxEasyFit() */
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac48:	617b      	str	r3, [r7, #20]

        /* Ensure that the incoming packet is not fragmented because the stack
         * doesn't not support IP fragmentation. All but the last fragment coming in will have their
         * "more fragments" flag set and the last fragment will have a non-zero offset.
         * We need to drop the packet in either of those cases. */
        if( ( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U ) || ( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_FLAGS_MORE_FRAGMENTS ) != 0U ) )
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	88db      	ldrh	r3, [r3, #6]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d106      	bne.n	800ac66 <prvAllowIPPacketIPv4+0x46>
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	88db      	ldrh	r3, [r3, #6]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <prvAllowIPPacketIPv4+0x4e>
        {
            /* Can not handle, fragmented packet. */
            eReturn = eReleaseBuffer;
 800ac66:	2300      	movs	r3, #0
 800ac68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac6c:	e09a      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
        }

        /* Test if the length of the IP-header is between 20 and 60 bytes,
         * and if the IP-version is 4. */
        else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2b44      	cmp	r3, #68	@ 0x44
 800ac74:	d903      	bls.n	800ac7e <prvAllowIPPacketIPv4+0x5e>
                 ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	781b      	ldrb	r3, [r3, #0]
        else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800ac7a:	2b4f      	cmp	r3, #79	@ 0x4f
 800ac7c:	d903      	bls.n	800ac86 <prvAllowIPPacketIPv4+0x66>
        {
            /* Can not handle, unknown or invalid header version. */
            eReturn = eReleaseBuffer;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac84:	e08e      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
        }
        else if( ( xIsIPv4Loopback( ulDestinationIPAddress ) == pdTRUE ) ||
 800ac86:	69f8      	ldr	r0, [r7, #28]
 800ac88:	f7ff ffb2 	bl	800abf0 <xIsIPv4Loopback>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d005      	beq.n	800ac9e <prvAllowIPPacketIPv4+0x7e>
                 ( xIsIPv4Loopback( ulSourceIPAddress ) == pdTRUE ) )
 800ac92:	69b8      	ldr	r0, [r7, #24]
 800ac94:	f7ff ffac 	bl	800abf0 <xIsIPv4Loopback>
 800ac98:	4603      	mov	r3, r0
        else if( ( xIsIPv4Loopback( ulDestinationIPAddress ) == pdTRUE ) ||
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d10b      	bne.n	800acb6 <prvAllowIPPacketIPv4+0x96>
        {
            /* source OR destination is a loopback address. Make sure they BOTH are. */
            if( xBadIPv4Loopback( &( pxIPPacket->xIPHeader ) ) == pdTRUE )
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	330e      	adds	r3, #14
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff ff7b 	bl	800ab9e <xBadIPv4Loopback>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d17a      	bne.n	800ada4 <prvAllowIPPacketIPv4+0x184>
            {
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                eReturn = eReleaseBuffer;
 800acae:	2300      	movs	r3, #0
 800acb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( xBadIPv4Loopback( &( pxIPPacket->xIPHeader ) ) == pdTRUE )
 800acb4:	e076      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
            }
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes,
                         pxIPPacket->xEthernetHeader.xSourceAddress.ucBytes,
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	3306      	adds	r3, #6
        else if( memcmp( xBroadcastMACAddress.ucBytes,
 800acba:	2206      	movs	r2, #6
 800acbc:	4619      	mov	r1, r3
 800acbe:	4845      	ldr	r0, [pc, #276]	@ (800add4 <prvAllowIPPacketIPv4+0x1b4>)
 800acc0:	f00c fafd 	bl	80172be <memcmp>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d103      	bne.n	800acd2 <prvAllowIPPacketIPv4+0xb2>
                         sizeof( MACAddress_t ) ) == 0 )
        {
            /* Ethernet source is a broadcast address. Drop the packet. */
            eReturn = eReleaseBuffer;
 800acca:	2300      	movs	r3, #0
 800accc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800acd0:	e068      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
        }
        else if( xIsIPv4Multicast( ulSourceIPAddress ) == pdTRUE )
 800acd2:	69b8      	ldr	r0, [r7, #24]
 800acd4:	f7ff ff14 	bl	800ab00 <xIsIPv4Multicast>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d103      	bne.n	800ace6 <prvAllowIPPacketIPv4+0xc6>
        {
            /* Source is a multicast IP address. Drop the packet in conformity with RFC 1112 section 7.2. */
            eReturn = eReleaseBuffer;
 800acde:	2300      	movs	r3, #0
 800ace0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ace4:	e05e      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
        }

        /* Use ipv4_settings for filtering only after the endpoint is up,
         * so that DHCP packets that are exchanged for DHCP (example, DHCP unicast offers)
         * are not dropped/filtered. */
        else if( FreeRTOS_IsEndPointUp( pxEndPoint ) != pdFALSE )
 800ace6:	6978      	ldr	r0, [r7, #20]
 800ace8:	f7ff f89c 	bl	8009e24 <FreeRTOS_IsEndPointUp>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d03a      	beq.n	800ad68 <prvAllowIPPacketIPv4+0x148>
        {
            if(
                /* Not destined for the assigned endpoint IPv4 address? */
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulIPAddress ) &&
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	681b      	ldr	r3, [r3, #0]
            if(
 800acf6:	69fa      	ldr	r2, [r7, #28]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d012      	beq.n	800ad22 <prvAllowIPPacketIPv4+0x102>
                /* Also not an IPv4 broadcast address ? */
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) &&
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	695b      	ldr	r3, [r3, #20]
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulIPAddress ) &&
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d00d      	beq.n	800ad22 <prvAllowIPPacketIPv4+0x102>
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) &&
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0c:	d009      	beq.n	800ad22 <prvAllowIPPacketIPv4+0x102>
                ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) &&
                /* And not an IPv4 multicast address ? */
                ( xIsIPv4Multicast( ulDestinationIPAddress ) == pdFALSE ) )
 800ad0e:	69f8      	ldr	r0, [r7, #28]
 800ad10:	f7ff fef6 	bl	800ab00 <xIsIPv4Multicast>
 800ad14:	4603      	mov	r3, r0
                ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) &&
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d103      	bne.n	800ad22 <prvAllowIPPacketIPv4+0x102>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad20:	e040      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
            }
            /* Is the source address correct? */
            else if( ( ulSourceIPAddress == pxEndPoint->ipv4_settings.ulBroadcastAddress ) ||
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d003      	beq.n	800ad34 <prvAllowIPPacketIPv4+0x114>
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d103      	bne.n	800ad3c <prvAllowIPPacketIPv4+0x11c>
                     ( ulSourceIPAddress == FREERTOS_INADDR_BROADCAST ) )
            {
                /* The source address cannot be broadcast address. Replying to this
                 * packet may cause network storms. Drop the packet. */
                eReturn = eReleaseBuffer;
 800ad34:	2300      	movs	r3, #0
 800ad36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad3a:	e033      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
            }
            else if( ( memcmp( xBroadcastMACAddress.ucBytes,
                               pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800ad3c:	68fb      	ldr	r3, [r7, #12]
            else if( ( memcmp( xBroadcastMACAddress.ucBytes,
 800ad3e:	2206      	movs	r2, #6
 800ad40:	4619      	mov	r1, r3
 800ad42:	4824      	ldr	r0, [pc, #144]	@ (800add4 <prvAllowIPPacketIPv4+0x1b4>)
 800ad44:	f00c fabb 	bl	80172be <memcmp>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d12a      	bne.n	800ada4 <prvAllowIPPacketIPv4+0x184>
                               sizeof( MACAddress_t ) ) == 0 ) &&
                     ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) && ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) )
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	695b      	ldr	r3, [r3, #20]
                               sizeof( MACAddress_t ) ) == 0 ) &&
 800ad52:	69fa      	ldr	r2, [r7, #28]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d025      	beq.n	800ada4 <prvAllowIPPacketIPv4+0x184>
                     ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) && ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) )
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5e:	d021      	beq.n	800ada4 <prvAllowIPPacketIPv4+0x184>
            {
                /* Ethernet address is a broadcast address, but the IP address is not a
                 * broadcast address. */
                eReturn = eReleaseBuffer;
 800ad60:	2300      	movs	r3, #0
 800ad62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad66:	e01d      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
        {
            /* Endpoint is down */

            /* Check if the destination MAC address is a broadcast MAC address. */
            if( memcmp( xBroadcastMACAddress.ucBytes,
                        pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800ad68:	68fb      	ldr	r3, [r7, #12]
            if( memcmp( xBroadcastMACAddress.ucBytes,
 800ad6a:	2206      	movs	r2, #6
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4819      	ldr	r0, [pc, #100]	@ (800add4 <prvAllowIPPacketIPv4+0x1b4>)
 800ad70:	f00c faa5 	bl	80172be <memcmp>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d107      	bne.n	800ad8a <prvAllowIPPacketIPv4+0x16a>
                        sizeof( MACAddress_t ) ) == 0 )
            {
                if( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST )
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad80:	d010      	beq.n	800ada4 <prvAllowIPPacketIPv4+0x184>
                {
                    /* Ethernet address is a broadcast address, but the IP address is not a
                     * broadcast address. */
                    eReturn = eReleaseBuffer;
 800ad82:	2300      	movs	r3, #0
 800ad84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad88:	e00c      	b.n	800ada4 <prvAllowIPPacketIPv4+0x184>
             * forward to the IP layer any IP packets delivered to the client's
             * hardware address before the IP address is configured; DHCP servers
             * and BOOTP relay agents may not be able to deliver DHCP messages to
             * clients that cannot accept hardware unicast datagrams before the
             * TCP/IP software is configured. */
            else if( ( memcmp( pxEndPoint->xMACAddress.ucBytes,
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	3338      	adds	r3, #56	@ 0x38
                               pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800ad8e:	68f9      	ldr	r1, [r7, #12]
            else if( ( memcmp( pxEndPoint->xMACAddress.ucBytes,
 800ad90:	2206      	movs	r2, #6
 800ad92:	4618      	mov	r0, r3
 800ad94:	f00c fa93 	bl	80172be <memcmp>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <prvAllowIPPacketIPv4+0x184>
                               sizeof( MACAddress_t ) ) != 0 ) )
            {
                /* The endpoint is not up, and the destination MAC address of the
                 * packet is not matching the endpoint's MAC address nor broadcast
                 * MAC address. Drop the packet. */
                eReturn = eReleaseBuffer;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800ada4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d10d      	bne.n	800adc8 <prvAllowIPPacketIPv4+0x1a8>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb4:	4619      	mov	r1, r3
 800adb6:	4610      	mov	r0, r2
 800adb8:	f7ff fe24 	bl	800aa04 <xCheckIPv4SizeFields>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d002      	beq.n	800adc8 <prvAllowIPPacketIPv4+0x1a8>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800adc2:	2300      	movs	r3, #0
 800adc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800adc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3728      	adds	r7, #40	@ 0x28
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	080186b4 	.word	0x080186b4

0800add8 <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08a      	sub	sp, #40	@ 0x28
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800ade0:	2301      	movs	r3, #1
 800ade2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adea:	330e      	adds	r3, #14
 800adec:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800adee:	6a3b      	ldr	r3, [r7, #32]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800adfc:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	3b14      	subs	r3, #20
 800ae02:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	330e      	adds	r3, #14
 800ae0c:	4413      	add	r3, r2
 800ae0e:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae14:	3322      	adds	r3, #34	@ 0x22
 800ae16:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	3b22      	subs	r3, #34	@ 0x22
 800ae22:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	6939      	ldr	r1, [r7, #16]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f00c fa58 	bl	80172de <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	1ad2      	subs	r2, r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	885b      	ldrh	r3, [r3, #2]
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	f023 030f 	bic.w	r3, r3, #15
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	f043 0305 	orr.w	r3, r3, #5
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800ae60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3728      	adds	r7, #40	@ 0x28
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b0f      	cmp	r3, #15
 800ae7c:	d802      	bhi.n	800ae84 <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	61fb      	str	r3, [r7, #28]
 800ae82:	e00e      	b.n	800aea2 <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	68b9      	ldr	r1, [r7, #8]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 f92f 	bl	800c0fc <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800aea2:	69fb      	ldr	r3, [r7, #28]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3720      	adds	r7, #32
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_0;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2201      	movs	r2, #1
 800aebe:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_1;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2200      	movs	r2, #0
 800aec4:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_2;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	225e      	movs	r2, #94	@ 0x5e
 800aeca:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	0c1b      	lsrs	r3, r3, #16
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	0a1b      	lsrs	r3, r3, #8
 800aee0:	b2da      	uxtb	r2, r3
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	715a      	strb	r2, [r3, #5]
}
 800aeee:	bf00      	nop
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b086      	sub	sp, #24
 800aefe:	af00      	add	r7, sp, #0
 800af00:	60f8      	str	r0, [r7, #12]
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	607a      	str	r2, [r7, #4]
 800af06:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d074      	beq.n	800aff8 <FreeRTOS_FillEndPoint+0xfe>
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d071      	beq.n	800aff8 <FreeRTOS_FillEndPoint+0xfe>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af18:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800af1a:	2274      	movs	r2, #116	@ 0x74
 800af1c:	2100      	movs	r1, #0
 800af1e:	68b8      	ldr	r0, [r7, #8]
 800af20:	f00c f9f7 	bl	8017312 <memset>
            pxEndPoint->pxNext = pxNext;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	671a      	str	r2, [r3, #112]	@ 0x70

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	061a      	lsls	r2, r3, #24
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3301      	adds	r3, #1
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	041b      	lsls	r3, r3, #16
 800af38:	431a      	orrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3302      	adds	r3, #2
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	021b      	lsls	r3, r3, #8
 800af42:	4313      	orrs	r3, r2
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	3203      	adds	r2, #3
 800af48:	7812      	ldrb	r2, [r2, #0]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	061a      	lsls	r2, r3, #24
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	3301      	adds	r3, #1
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	041b      	lsls	r3, r3, #16
 800af5c:	431a      	orrs	r2, r3
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	3302      	adds	r3, #2
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	4313      	orrs	r3, r2
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	3203      	adds	r2, #3
 800af6c:	7812      	ldrb	r2, [r2, #0]
 800af6e:	431a      	orrs	r2, r3
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	061a      	lsls	r2, r3, #24
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	3301      	adds	r3, #1
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	041b      	lsls	r3, r3, #16
 800af82:	431a      	orrs	r2, r3
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	3302      	adds	r3, #2
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	4313      	orrs	r3, r2
 800af8e:	6a3a      	ldr	r2, [r7, #32]
 800af90:	3203      	adds	r2, #3
 800af92:	7812      	ldrb	r2, [r2, #0]
 800af94:	431a      	orrs	r2, r3
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	061a      	lsls	r2, r3, #24
 800afa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa2:	3301      	adds	r3, #1
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	041b      	lsls	r3, r3, #16
 800afa8:	431a      	orrs	r2, r3
 800afaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afac:	3302      	adds	r3, #2
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	021b      	lsls	r3, r3, #8
 800afb2:	4313      	orrs	r3, r2
 800afb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afb6:	3203      	adds	r2, #3
 800afb8:	7812      	ldrb	r2, [r2, #0]
 800afba:	431a      	orrs	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	43da      	mvns	r2, r3
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	431a      	orrs	r2, r3
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	331c      	adds	r3, #28
 800afd2:	68b9      	ldr	r1, [r7, #8]
 800afd4:	221c      	movs	r2, #28
 800afd6:	4618      	mov	r0, r3
 800afd8:	f00c fa75 	bl	80174c6 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	3338      	adds	r3, #56	@ 0x38
 800afe6:	2206      	movs	r2, #6
 800afe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afea:	4618      	mov	r0, r3
 800afec:	f00c fa6b 	bl	80174c6 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800aff0:	68b9      	ldr	r1, [r7, #8]
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f000 f826 	bl	800b044 <FreeRTOS_AddEndPoint>
        }
    }
 800aff8:	bf00      	nop
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
        configASSERT( pxNetworkInterfaces == NULL );
 800b008:	4b0d      	ldr	r3, [pc, #52]	@ (800b040 <FreeRTOS_AddNetworkInterface+0x40>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00d      	beq.n	800b02c <FreeRTOS_AddNetworkInterface+0x2c>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b014:	b672      	cpsid	i
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	b662      	cpsie	i
 800b024:	60fb      	str	r3, [r7, #12]
}
 800b026:	bf00      	nop
 800b028:	bf00      	nop
 800b02a:	e7fd      	b.n	800b028 <FreeRTOS_AddNetworkInterface+0x28>
        pxNetworkInterfaces = pxInterface;
 800b02c:	4a04      	ldr	r2, [pc, #16]	@ (800b040 <FreeRTOS_AddNetworkInterface+0x40>)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6013      	str	r3, [r2, #0]
        return pxInterface;
 800b032:	687b      	ldr	r3, [r7, #4]
    }
 800b034:	4618      	mov	r0, r3
 800b036:	3714      	adds	r7, #20
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	20002684 	.word	0x20002684

0800b044 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
        /* This code is in backward-compatibility mode.
         * Only one end-point is allowed, make sure that
         * no end-point has been defined yet. */
        configASSERT( pxNetworkEndPoints == NULL );
 800b04e:	4b12      	ldr	r3, [pc, #72]	@ (800b098 <FreeRTOS_AddEndPoint+0x54>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00d      	beq.n	800b072 <FreeRTOS_AddEndPoint+0x2e>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05a:	b672      	cpsid	i
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	b662      	cpsie	i
 800b06a:	60fb      	str	r3, [r7, #12]
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	e7fd      	b.n	800b06e <FreeRTOS_AddEndPoint+0x2a>

        /* This end point will go to the end of the list, so there is no pxNext
         * yet. */
        pxEndPoint->pxNext = NULL;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	2200      	movs	r2, #0
 800b076:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	66da      	str	r2, [r3, #108]	@ 0x6c

        pxInterface->pxEndPoint = pxEndPoint;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	621a      	str	r2, [r3, #32]

        /* No other end points are defined yet - so this is the first in the
         * list. */
        pxNetworkEndPoints = pxEndPoint;
 800b084:	4a04      	ldr	r2, [pc, #16]	@ (800b098 <FreeRTOS_AddEndPoint+0x54>)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	6013      	str	r3, [r2, #0]

        return pxEndPoint;
 800b08a:	683b      	ldr	r3, [r7, #0]
    }
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	20002680 	.word	0x20002680

0800b09c <FreeRTOS_FindEndPointOnIP_IPv4>:
 * @param[in] ulIPAddress The IP-address of interest, or 0 if any IPv4 end-point may be returned.
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress )
    {
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxResult = NULL;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]

        ( void ) ulIPAddress;

        if( ( ulIPAddress == 0U ) || ( pxNetworkEndPoints->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d005      	beq.n	800b0ba <FreeRTOS_FindEndPointOnIP_IPv4+0x1e>
 800b0ae:	4b08      	ldr	r3, [pc, #32]	@ (800b0d0 <FreeRTOS_FindEndPointOnIP_IPv4+0x34>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d102      	bne.n	800b0c0 <FreeRTOS_FindEndPointOnIP_IPv4+0x24>
        {
            pxResult = pxNetworkEndPoints;
 800b0ba:	4b05      	ldr	r3, [pc, #20]	@ (800b0d0 <FreeRTOS_FindEndPointOnIP_IPv4+0x34>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
    }
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	20002680 	.word	0x20002680

0800b0d4 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]

        ( void ) pxMACAddress;
        ( void ) pxInterface;

        if( ( pxMACAddress != NULL ) && ( memcmp( pxNetworkEndPoints->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00d      	beq.n	800b104 <FreeRTOS_FindEndPointOnMAC+0x30>
 800b0e8:	4b09      	ldr	r3, [pc, #36]	@ (800b110 <FreeRTOS_FindEndPointOnMAC+0x3c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3338      	adds	r3, #56	@ 0x38
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	2206      	movs	r2, #6
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f00c f8e3 	bl	80172be <memcmp>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d102      	bne.n	800b104 <FreeRTOS_FindEndPointOnMAC+0x30>
        {
            pxResult = pxNetworkEndPoints;
 800b0fe:	4b04      	ldr	r3, [pc, #16]	@ (800b110 <FreeRTOS_FindEndPointOnMAC+0x3c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800b104:	68fb      	ldr	r3, [r7, #12]
    }
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20002680 	.word	0x20002680

0800b114 <FreeRTOS_FindEndPointOnNetMask>:
 * @param[in] ulIPAddress The IP-address for which an end-point is looked-up.
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress )
    {
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress );
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	2000      	movs	r0, #0
 800b120:	f000 f83c 	bl	800b19c <FreeRTOS_InterfaceEndPointOnNetMask>
 800b124:	4603      	mov	r3, r0
    }
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxReturn = NULL;
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]

        ( void ) xIPType;

        if( pxNetworkEndPoints != NULL )
 800b13c:	4b09      	ldr	r3, [pc, #36]	@ (800b164 <FreeRTOS_FindGateWay+0x34>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d007      	beq.n	800b154 <FreeRTOS_FindGateWay+0x24>
        {
            if( pxNetworkEndPoints->ipv4_settings.ulGatewayAddress != 0U )
 800b144:	4b07      	ldr	r3, [pc, #28]	@ (800b164 <FreeRTOS_FindGateWay+0x34>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <FreeRTOS_FindGateWay+0x24>
            {
                pxReturn = pxNetworkEndPoints;
 800b14e:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <FreeRTOS_FindGateWay+0x34>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	60fb      	str	r3, [r7, #12]
            }
        }

        return pxReturn;
 800b154:	68fb      	ldr	r3, [r7, #12]
    }
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20002680 	.word	0x20002680

0800b168 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
        ( void ) pxInterface;

        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined and this is the simplified version:
         * only one interface and one end-point is defined. */
        return pxNetworkEndPoints;
 800b170:	4b03      	ldr	r3, [pc, #12]	@ (800b180 <FreeRTOS_FirstEndPoint+0x18>)
 800b172:	681b      	ldr	r3, [r3, #0]
    }
 800b174:	4618      	mov	r0, r3
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	20002680 	.word	0x20002680

0800b184 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800b184:	b480      	push	{r7}
 800b186:	af00      	add	r7, sp, #0
        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined: only one interface and
         * one end-point is defined. */
        return pxNetworkInterfaces;
 800b188:	4b03      	ldr	r3, [pc, #12]	@ (800b198 <FreeRTOS_FirstNetworkInterface+0x14>)
 800b18a:	681b      	ldr	r3, [r3, #0]
    }
 800b18c:	4618      	mov	r0, r3
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	20002684 	.word	0x20002684

0800b19c <FreeRTOS_InterfaceEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress )
    {
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]

        ( void ) pxInterface;

        if( ( ( ulIPAddress ^ pxNetworkEndPoints->ipv4_settings.ulIPAddress ) & pxNetworkEndPoints->ipv4_settings.ulNetMask ) == 0U )
 800b1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	405a      	eors	r2, r3
 800b1b4:	4b07      	ldr	r3, [pc, #28]	@ (800b1d4 <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <FreeRTOS_InterfaceEndPointOnNetMask+0x2a>
        {
            pxResult = pxNetworkEndPoints;
 800b1c0:	4b04      	ldr	r3, [pc, #16]	@ (800b1d4 <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
    }
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	20002680 	.word	0x20002680

0800b1d8 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
        ( void ) pxNetworkInterface;
        ( void ) pucEthernetBuffer;

        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined: only one interface and
         * one end-point is defined. */
        return pxNetworkEndPoints;
 800b1e2:	4b04      	ldr	r3, [pc, #16]	@ (800b1f4 <FreeRTOS_MatchingEndpoint+0x1c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
    }
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	20002680 	.word	0x20002680

0800b1f8 <FreeRTOS_NextEndPoint>:
 *
 * @return NULL because ipconfigCOMPATIBLE_WITH_SINGLE is defined.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
        ( void ) pxInterface;
        ( void ) pxEndPoint;

        return NULL;
 800b202:	2300      	movs	r3, #0
    }
 800b204:	4618      	mov	r0, r3
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <FreeRTOS_NextNetworkInterface>:
 * @brief Get the next interface.
 *
 * @return NULL because ipconfigCOMPATIBLE_WITH_SINGLE is defined.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
        ( void ) pxInterface;

        return NULL;
 800b218:	2300      	movs	r3, #0
    }
 800b21a:	4618      	mov	r0, r3
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <xCheckRequiresResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b084      	sub	sp, #16
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsResolution = pdFALSE;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7fe fe3a 	bl	8009eac <uxIPHeaderSizePacket>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b14      	cmp	r3, #20
 800b23c:	d104      	bne.n	800b248 <xCheckRequiresResolution+0x22>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case ipSIZE_OF_IPv4_HEADER:
                xNeedsResolution = xCheckRequiresARPResolution( pxNetworkBuffer );
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7fc fc80 	bl	8007b44 <xCheckRequiresARPResolution>
 800b244:	60f8      	str	r0, [r7, #12]
                break;
 800b246:	e000      	b.n	800b24a <xCheckRequiresResolution+0x24>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 800b248:	bf00      	nop
    }

    return xNeedsResolution;
 800b24a:	68fb      	ldr	r3, [r7, #12]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <xApplicationGetRandomNumber>:
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset );

//USER FUNCTIONS
BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber )
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]

    // Example: use your MCU's hardware RNG or a simple PRNG
    static uint32_t seed = 123456789;

    // Simple Linear Congruential Generator example (not cryptographically secure)
    seed = (1103515245 * seed + 12345) & 0x7FFFFFFF;
 800b25c:	4b0b      	ldr	r3, [pc, #44]	@ (800b28c <xApplicationGetRandomNumber+0x38>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a0b      	ldr	r2, [pc, #44]	@ (800b290 <xApplicationGetRandomNumber+0x3c>)
 800b262:	fb03 f202 	mul.w	r2, r3, r2
 800b266:	f243 0339 	movw	r3, #12345	@ 0x3039
 800b26a:	4413      	add	r3, r2
 800b26c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b270:	4a06      	ldr	r2, [pc, #24]	@ (800b28c <xApplicationGetRandomNumber+0x38>)
 800b272:	6013      	str	r3, [r2, #0]
    *pulNumber = seed;
 800b274:	4b05      	ldr	r3, [pc, #20]	@ (800b28c <xApplicationGetRandomNumber+0x38>)
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	601a      	str	r2, [r3, #0]

    return pdTRUE;
 800b27c:	2301      	movs	r3, #1
}
 800b27e:	4618      	mov	r0, r3
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20000014 	.word	0x20000014
 800b290:	41c64e6d 	.word	0x41c64e6d

0800b294 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f001 fb5f 	bl	800c964 <xSocketValid>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d102      	bne.n	800b2b2 <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e015      	b.n	800b2de <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d006      	beq.n	800b2c6 <prvValidSocket+0x32>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	69db      	ldr	r3, [r3, #28]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d102      	bne.n	800b2c6 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	e00b      	b.n	800b2de <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d002      	beq.n	800b2da <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	e001      	b.n	800b2de <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b2de:	697b      	ldr	r3, [r7, #20]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800b2ec:	4803      	ldr	r0, [pc, #12]	@ (800b2fc <vNetworkSocketsInit+0x14>)
 800b2ee:	f008 fb5e 	bl	80139ae <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800b2f2:	4803      	ldr	r0, [pc, #12]	@ (800b300 <vNetworkSocketsInit+0x18>)
 800b2f4:	f008 fb5b 	bl	80139ae <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800b2f8:	bf00      	nop
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20002688 	.word	0x20002688
 800b300:	2000269c 	.word	0x2000269c

0800b304 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08c      	sub	sp, #48	@ 0x30
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800b312:	2301      	movs	r3, #1
 800b314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800b316:	2300      	movs	r3, #0
 800b318:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800b31a:	f7fe fd77 	bl	8009e0c <xIPIsNetworkTaskReady>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d102      	bne.n	800b32a <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800b324:	2300      	movs	r3, #0
 800b326:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b328:	e089      	b.n	800b43e <prvDetermineSocketSize+0x13a>
    else
    {
        /* Only Ethernet is currently supported. */
        #if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) )
        {
            if( xDomain != FREERTOS_AF_INET )
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d001      	beq.n	800b334 <prvDetermineSocketSize+0x30>
            {
                xReturn = pdFAIL;
 800b330:	2300      	movs	r3, #0
 800b332:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            configASSERT( xDomain == FREERTOS_AF_INET );
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d00d      	beq.n	800b356 <prvDetermineSocketSize+0x52>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b33e:	b672      	cpsid	i
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	b662      	cpsie	i
 800b34e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	e7fd      	b.n	800b352 <prvDetermineSocketSize+0x4e>
            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800b356:	4b3c      	ldr	r3, [pc, #240]	@ (800b448 <prvDetermineSocketSize+0x144>)
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35e:	d00d      	beq.n	800b37c <prvDetermineSocketSize+0x78>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	b672      	cpsid	i
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	b662      	cpsie	i
 800b374:	623b      	str	r3, [r7, #32]
}
 800b376:	bf00      	nop
 800b378:	bf00      	nop
 800b37a:	e7fd      	b.n	800b378 <prvDetermineSocketSize+0x74>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800b37c:	4b33      	ldr	r3, [pc, #204]	@ (800b44c <prvDetermineSocketSize+0x148>)
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b384:	d00d      	beq.n	800b3a2 <prvDetermineSocketSize+0x9e>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38a:	b672      	cpsid	i
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	b662      	cpsie	i
 800b39a:	61fb      	str	r3, [r7, #28]
}
 800b39c:	bf00      	nop
 800b39e:	bf00      	nop
 800b3a0:	e7fd      	b.n	800b39e <prvDetermineSocketSize+0x9a>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b11      	cmp	r3, #17
 800b3a6:	d119      	bne.n	800b3dc <prvDetermineSocketSize+0xd8>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d012      	beq.n	800b3d4 <prvDetermineSocketSize+0xd0>
            {
                xReturn = pdFAIL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800b3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d00d      	beq.n	800b3d4 <prvDetermineSocketSize+0xd0>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3bc:	b672      	cpsid	i
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	b662      	cpsie	i
 800b3cc:	61bb      	str	r3, [r7, #24]
}
 800b3ce:	bf00      	nop
 800b3d0:	bf00      	nop
 800b3d2:	e7fd      	b.n	800b3d0 <prvDetermineSocketSize+0xcc>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2278      	movs	r2, #120	@ 0x78
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	e030      	b.n	800b43e <prvDetermineSocketSize+0x13a>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b06      	cmp	r3, #6
 800b3e0:	d11a      	bne.n	800b418 <prvDetermineSocketSize+0x114>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d012      	beq.n	800b40e <prvDetermineSocketSize+0x10a>
                {
                    xReturn = pdFAIL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800b3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d00d      	beq.n	800b40e <prvDetermineSocketSize+0x10a>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	b672      	cpsid	i
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	b662      	cpsie	i
 800b406:	617b      	str	r3, [r7, #20]
}
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	e7fd      	b.n	800b40a <prvDetermineSocketSize+0x106>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	e012      	b.n	800b43e <prvDetermineSocketSize+0x13a>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800b418:	2300      	movs	r3, #0
 800b41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800b41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d00d      	beq.n	800b43e <prvDetermineSocketSize+0x13a>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b426:	b672      	cpsid	i
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	b662      	cpsie	i
 800b436:	613b      	str	r3, [r7, #16]
}
 800b438:	bf00      	nop
 800b43a:	bf00      	nop
 800b43c:	e7fd      	b.n	800b43a <prvDetermineSocketSize+0x136>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800b43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b440:	4618      	mov	r0, r3
 800b442:	3730      	adds	r7, #48	@ 0x30
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20002688 	.word	0x20002688
 800b44c:	2000269c 	.word	0x2000269c

0800b450 <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800b460:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b46a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800b46e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800b472:	f241 101c 	movw	r0, #4380	@ 0x111c
 800b476:	f7ff fa6a 	bl	800a94e <FreeRTOS_round_up>
 800b47a:	4602      	mov	r2, r0
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b488:	08db      	lsrs	r3, r3, #3
 800b48a:	4a10      	ldr	r2, [pc, #64]	@ (800b4cc <prvInitialiseTCPFields+0x7c>)
 800b48c:	fba2 2303 	umull	r2, r3, r2, r3
 800b490:	099b      	lsrs	r3, r3, #6
 800b492:	4619      	mov	r1, r3
 800b494:	2001      	movs	r0, #1
 800b496:	f7ff f999 	bl	800a7cc <FreeRTOS_max_size_t>
 800b49a:	4602      	mov	r2, r0
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4a8:	08db      	lsrs	r3, r3, #3
 800b4aa:	4a08      	ldr	r2, [pc, #32]	@ (800b4cc <prvInitialiseTCPFields+0x7c>)
 800b4ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b0:	099b      	lsrs	r3, r3, #6
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	f7ff f989 	bl	800a7cc <FreeRTOS_max_size_t>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	2ce33e6d 	.word	0x2ce33e6d

0800b4d0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08a      	sub	sp, #40	@ 0x28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b0a      	cmp	r3, #10
 800b4e8:	d002      	beq.n	800b4f0 <FreeRTOS_socket+0x20>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d101      	bne.n	800b4f4 <FreeRTOS_socket+0x24>
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e000      	b.n	800b4f6 <FreeRTOS_socket+0x26>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10d      	bne.n	800b516 <FreeRTOS_socket+0x46>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fe:	b672      	cpsid	i
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	b662      	cpsie	i
 800b50e:	617b      	str	r3, [r7, #20]
}
 800b510:	bf00      	nop
 800b512:	bf00      	nop
 800b514:	e7fd      	b.n	800b512 <FreeRTOS_socket+0x42>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10c      	bne.n	800b536 <FreeRTOS_socket+0x66>
        {
            switch( xType )
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d005      	beq.n	800b52e <FreeRTOS_socket+0x5e>
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2b02      	cmp	r3, #2
 800b526:	d105      	bne.n	800b534 <FreeRTOS_socket+0x64>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800b528:	2311      	movs	r3, #17
 800b52a:	623b      	str	r3, [r7, #32]
                    break;
 800b52c:	e003      	b.n	800b536 <FreeRTOS_socket+0x66>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800b52e:	2306      	movs	r3, #6
 800b530:	623b      	str	r3, [r7, #32]
                    break;
 800b532:	e000      	b.n	800b536 <FreeRTOS_socket+0x66>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800b534:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800b536:	f107 0310 	add.w	r3, r7, #16
 800b53a:	6a3a      	ldr	r2, [r7, #32]
 800b53c:	68b9      	ldr	r1, [r7, #8]
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff fee0 	bl	800b304 <prvDetermineSocketSize>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d103      	bne.n	800b552 <FreeRTOS_socket+0x82>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295
 800b54e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800b550:	e05a      	b.n	800b608 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	4618      	mov	r0, r3
 800b556:	f00b fb4f 	bl	8016bf8 <pvPortMalloc>
 800b55a:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d103      	bne.n	800b56a <FreeRTOS_socket+0x9a>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800b562:	f04f 33ff 	mov.w	r3, #4294967295
 800b566:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800b568:	e04e      	b.n	800b608 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800b56a:	f008 f805 	bl	8013578 <xEventGroupCreate>
 800b56e:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <FreeRTOS_socket+0xb4>
        {
            vPortFreeSocket( pxSocket );
 800b576:	69f8      	ldr	r0, [r7, #28]
 800b578:	f00b fc0c 	bl	8016d94 <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800b57c:	f04f 33ff 	mov.w	r3, #4294967295
 800b580:	627b      	str	r3, [r7, #36]	@ 0x24
 800b582:	e041      	b.n	800b608 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	461a      	mov	r2, r3
 800b588:	2100      	movs	r1, #0
 800b58a:	69f8      	ldr	r0, [r7, #28]
 800b58c:	f00b fec1 	bl	8017312 <memset>

            pxSocket->xEventGroup = xEventGroup;
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	69ba      	ldr	r2, [r7, #24]
 800b594:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d105      	bne.n	800b5a8 <FreeRTOS_socket+0xd8>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800b59c:	69fa      	ldr	r2, [r7, #28]
 800b59e:	7a13      	ldrb	r3, [r2, #8]
 800b5a0:	f023 0301 	bic.w	r3, r3, #1
 800b5a4:	7213      	strb	r3, [r2, #8]
                        break;
 800b5a6:	e000      	b.n	800b5aa <FreeRTOS_socket+0xda>

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800b5a8:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800b5aa:	6a3b      	ldr	r3, [r7, #32]
 800b5ac:	2b11      	cmp	r3, #17
 800b5ae:	d108      	bne.n	800b5c2 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	3358      	adds	r3, #88	@ 0x58
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f008 f9fa 	bl	80139ae <vListInitialise>

                #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                {
                    pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	220a      	movs	r2, #10
 800b5be:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b5c0:	e007      	b.n	800b5d2 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	2b06      	cmp	r3, #6
 800b5c6:	d104      	bne.n	800b5d2 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	69f8      	ldr	r0, [r7, #28]
 800b5ce:	f7ff ff3f 	bl	800b450 <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	330c      	adds	r3, #12
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f008 fa09 	bl	80139ee <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5e8:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5f0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800b608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3728      	adds	r7, #40	@ 0x28
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b08c      	sub	sp, #48	@ 0x30
 800b616:	af02      	add	r7, sp, #8
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800b626:	f7fe ff66 	bl	800a4f6 <xIsCallingFromIPTask>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00d      	beq.n	800b64c <FreeRTOS_bind+0x3a>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b634:	b672      	cpsid	i
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	b662      	cpsie	i
 800b644:	61fb      	str	r3, [r7, #28]
}
 800b646:	bf00      	nop
 800b648:	bf00      	nop
 800b64a:	e7fd      	b.n	800b648 <FreeRTOS_bind+0x36>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800b64c:	6a38      	ldr	r0, [r7, #32]
 800b64e:	f001 f989 	bl	800c964 <xSocketValid>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d103      	bne.n	800b660 <FreeRTOS_bind+0x4e>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b658:	f06f 0315 	mvn.w	r3, #21
 800b65c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b65e:	e04b      	b.n	800b6f8 <FreeRTOS_bind+0xe6>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <FreeRTOS_bind+0x5e>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b668:	f06f 0315 	mvn.w	r3, #21
 800b66c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b66e:	e043      	b.n	800b6f8 <FreeRTOS_bind+0xe6>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800b670:	230a      	movs	r3, #10
 800b672:	753b      	strb	r3, [r7, #20]
        xBindEvent.pvData = xSocket;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	61bb      	str	r3, [r7, #24]

        if( pxAddress != NULL )
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d013      	beq.n	800b6a6 <FreeRTOS_bind+0x94>
        {
            switch( pxAddress->sin_family )
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	785b      	ldrb	r3, [r3, #1]
 800b682:	2b02      	cmp	r3, #2
 800b684:	d109      	bne.n	800b69a <FreeRTOS_bind+0x88>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	689a      	ldr	r2, [r3, #8]
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800b68e:	6a3a      	ldr	r2, [r7, #32]
 800b690:	7a13      	ldrb	r3, [r2, #8]
 800b692:	f023 0301 	bic.w	r3, r3, #1
 800b696:	7213      	strb	r3, [r2, #8]
                        break;
 800b698:	e000      	b.n	800b69c <FreeRTOS_bind+0x8a>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
                    break;
 800b69a:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	885a      	ldrh	r2, [r3, #2]
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	871a      	strh	r2, [r3, #56]	@ 0x38
 800b6a4:	e009      	b.n	800b6ba <FreeRTOS_bind+0xa8>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	3328      	adds	r3, #40	@ 0x28
 800b6b0:	2210      	movs	r2, #16
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f00b fe2c 	bl	8017312 <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800b6ba:	f107 0314 	add.w	r3, r7, #20
 800b6be:	f04f 31ff 	mov.w	r1, #4294967295
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe f86a 	bl	800979c <xSendEventStructToIPTask>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d103      	bne.n	800b6d6 <FreeRTOS_bind+0xc4>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800b6ce:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800b6d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6d4:	e010      	b.n	800b6f8 <FreeRTOS_bind+0xe6>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	6858      	ldr	r0, [r3, #4]
 800b6da:	f04f 33ff 	mov.w	r3, #4294967295
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	2110      	movs	r1, #16
 800b6e6:	f007 ff61 	bl	80135ac <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <FreeRTOS_bind+0xe6>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b6f2:	f06f 0315 	mvn.w	r3, #21
 800b6f6:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    return xReturn;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3728      	adds	r7, #40	@ 0x28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b086      	sub	sp, #24
 800b706:	af00      	add	r7, sp, #0
 800b708:	60f8      	str	r0, [r7, #12]
 800b70a:	60b9      	str	r1, [r7, #8]
 800b70c:	607a      	str	r2, [r7, #4]
 800b70e:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d004      	beq.n	800b724 <prvSocketBindAdd+0x22>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b720:	2b06      	cmp	r3, #6
 800b722:	d00c      	beq.n	800b73e <prvSocketBindAdd+0x3c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	885b      	ldrh	r3, [r3, #2]
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fc92 	bl	800c054 <pxListFindListItemWithValue>
 800b730:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b732:	2b00      	cmp	r3, #0
 800b734:	d003      	beq.n	800b73e <prvSocketBindAdd+0x3c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800b736:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800b73a:	617b      	str	r3, [r7, #20]
 800b73c:	e02b      	b.n	800b796 <prvSocketBindAdd+0x94>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	885b      	ldrh	r3, [r3, #2]
 800b742:	461a      	mov	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	885a      	ldrh	r2, [r3, #2]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	871a      	strh	r2, [r3, #56]	@ 0x38
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d007      	beq.n	800b768 <prvSocketBindAdd+0x66>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4 );
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7ff fc9d 	bl	800b09c <FreeRTOS_FindEndPointOnIP_IPv4>
 800b762:	4602      	mov	r2, r0
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	651a      	str	r2, [r3, #80]	@ 0x50
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <prvSocketBindAdd+0x7a>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	629a      	str	r2, [r3, #40]	@ 0x28
 800b77a:	e006      	b.n	800b78a <prvSocketBindAdd+0x88>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3328      	adds	r3, #40	@ 0x28
 800b780:	2210      	movs	r2, #16
 800b782:	2100      	movs	r1, #0
 800b784:	4618      	mov	r0, r3
 800b786:	f00b fdc4 	bl	8017312 <memset>
                vTaskSuspendAll();
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	330c      	adds	r3, #12
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f008 f939 	bl	8013a08 <vListInsertEnd>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800b796:	697b      	ldr	r3, [r7, #20]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b090      	sub	sp, #64	@ 0x40
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f001 f8d4 	bl	800c964 <xSocketValid>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d00d      	beq.n	800b7de <vSocketBind+0x3e>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c6:	b672      	cpsid	i
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	b662      	cpsie	i
 800b7d6:	633b      	str	r3, [r7, #48]	@ 0x30
}
 800b7d8:	bf00      	nop
 800b7da:	bf00      	nop
 800b7dc:	e7fd      	b.n	800b7da <vSocketBind+0x3a>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b7e4:	2b06      	cmp	r3, #6
 800b7e6:	d102      	bne.n	800b7ee <vSocketBind+0x4e>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800b7e8:	4b28      	ldr	r3, [pc, #160]	@ (800b88c <vSocketBind+0xec>)
 800b7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7ec:	e001      	b.n	800b7f2 <vSocketBind+0x52>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800b7ee:	4b28      	ldr	r3, [pc, #160]	@ (800b890 <vSocketBind+0xf0>)
 800b7f0:	63bb      	str	r3, [r7, #56]	@ 0x38
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800b7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d115      	bne.n	800b824 <vSocketBind+0x84>
        {
            pxAddress = &xAddress;
 800b7f8:	f107 0314 	add.w	r3, r7, #20
 800b7fc:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800b7fe:	2218      	movs	r2, #24
 800b800:	2100      	movs	r1, #0
 800b802:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b804:	f00b fd85 	bl	8017312 <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	7a1b      	ldrb	r3, [r3, #8]
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d003      	beq.n	800b81e <vSocketBind+0x7e>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800b816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b818:	220a      	movs	r2, #10
 800b81a:	705a      	strb	r2, [r3, #1]
 800b81c:	e002      	b.n	800b824 <vSocketBind+0x84>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800b81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b820:	2202      	movs	r2, #2
 800b822:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800b824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10d      	bne.n	800b846 <vSocketBind+0xa6>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82e:	b672      	cpsid	i
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	b662      	cpsie	i
 800b83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800b840:	bf00      	nop
 800b842:	bf00      	nop
 800b844:	e7fd      	b.n	800b842 <vSocketBind+0xa2>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800b846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b848:	885b      	ldrh	r3, [r3, #2]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d111      	bne.n	800b872 <vSocketBind+0xd2>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b854:	4618      	mov	r0, r3
 800b856:	f000 fbb7 	bl	800bfc8 <prvGetPrivatePortNumber>
 800b85a:	4603      	mov	r3, r0
 800b85c:	461a      	mov	r2, r3
 800b85e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b860:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800b862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b864:	885b      	ldrh	r3, [r3, #2]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d103      	bne.n	800b872 <vSocketBind+0xd2>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800b86a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800b86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800b870:	e006      	b.n	800b880 <vSocketBind+0xe0>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b876:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f7ff ff42 	bl	800b702 <prvSocketBindAdd>
 800b87e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800b880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
} /* Tested */
 800b882:	4618      	mov	r0, r3
 800b884:	3740      	adds	r7, #64	@ 0x40
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	2000269c 	.word	0x2000269c
 800b890:	20002688 	.word	0x20002688

0800b894 <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b8a2:	2b06      	cmp	r3, #6
 800b8a4:	d129      	bne.n	800b8fa <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d005      	beq.n	800b8bc <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f005 fe00 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f004 fc8e 	bl	80101e4 <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d005      	beq.n	800b8de <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f00b fa5b 	bl	8016d94 <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d005      	beq.n	800b8f4 <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f00b fa50 	bl	8016d94 <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f82f 	bl	800b958 <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d004      	beq.n	800b90c <vSocketClose+0x78>
        {
            vTaskSuspendAll();
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	330c      	adds	r3, #12
 800b906:	4618      	mov	r0, r3
 800b908:	f008 f8db 	bl	8013ac2 <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b912:	2b11      	cmp	r3, #17
 800b914:	d10f      	bne.n	800b936 <vSocketClose+0xa2>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b916:	e00a      	b.n	800b92e <vSocketClose+0x9a>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4618      	mov	r0, r3
 800b924:	f008 f8cd 	bl	8013ac2 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f005 fdc7 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1f0      	bne.n	800b918 <vSocketClose+0x84>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d004      	beq.n	800b948 <vSocketClose+0xb4>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	4618      	mov	r0, r3
 800b944:	f007 ffd9 	bl	80138fa <vEventGroupDelete>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f00b fa23 	bl	8016d94 <vPortFree>

    return NULL;
 800b94e:	2300      	movs	r3, #0
} /* Tested */
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800b960:	4b30      	ldr	r3, [pc, #192]	@ (800ba24 <prvTCPSetSocketCount+0xcc>)
 800b962:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800b968:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800b970:	2b01      	cmp	r3, #1
 800b972:	d12b      	bne.n	800b9cc <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b974:	4b2c      	ldr	r3, [pc, #176]	@ (800ba28 <prvTCPSetSocketCount+0xd0>)
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800b97a:	e022      	b.n	800b9c2 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d017      	beq.n	800b9c2 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800b996:	89fa      	ldrh	r2, [r7, #14]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d112      	bne.n	800b9c2 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800b9a2:	f003 0304 	and.w	r3, r3, #4
 800b9a6:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d107      	bne.n	800b9bc <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800b9b2:	f003 0302 	and.w	r3, r3, #2
 800b9b6:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800b9bc:	68b8      	ldr	r0, [r7, #8]
 800b9be:	f7ff ff69 	bl	800b894 <vSocketClose>
            while( pxIterator != pxEnd )
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d1d8      	bne.n	800b97c <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800b9ca:	e026      	b.n	800ba1a <prvTCPSetSocketCount+0xc2>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b9cc:	4b16      	ldr	r3, [pc, #88]	@ (800ba28 <prvTCPSetSocketCount+0xd0>)
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	e01e      	b.n	800ba12 <prvTCPSetSocketCount+0xba>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d113      	bne.n	800ba0c <prvTCPSetSocketCount+0xb4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800b9e8:	89fa      	ldrh	r2, [r7, #14]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d10e      	bne.n	800ba0c <prvTCPSetSocketCount+0xb4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d009      	beq.n	800ba0c <prvTCPSetSocketCount+0xb4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
                    break;
 800ba08:	bf00      	nop
    }
 800ba0a:	e006      	b.n	800ba1a <prvTCPSetSocketCount+0xc2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d1dc      	bne.n	800b9d4 <prvTCPSetSocketCount+0x7c>
    }
 800ba1a:	bf00      	nop
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	200026a4 	.word	0x200026a4
 800ba28:	2000269c 	.word	0x2000269c

0800ba2c <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( ( FreeRTOS_issocketconnected( pxSocket ) == pdTRUE ) )
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 ff4b 	bl	800c8d4 <FreeRTOS_issocketconnected>
             * us data. If data was already sent, then pxSocket->u.xTCP.rxStream != NULL and this call will fail.
             * Warn the user about this inconsistent behavior. */
            FreeRTOS_printf( ( "Warning: Changing buffer/window properties on a connected socket may fail." ) );
        }

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ba44:	2b06      	cmp	r3, #6
 800ba46:	d003      	beq.n	800ba50 <prvSockopt_so_buffer+0x24>
        {
            FreeRTOS_printf( ( "Set SO_%sBUF: wrong socket type\n",
                               ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ba48:	f06f 0315 	mvn.w	r3, #21
 800ba4c:	617b      	str	r3, [r7, #20]
 800ba4e:	e02c      	b.n	800baaa <prvSockopt_so_buffer+0x7e>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2b04      	cmp	r3, #4
 800ba54:	d104      	bne.n	800ba60 <prvSockopt_so_buffer+0x34>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d107      	bne.n	800ba70 <prvSockopt_so_buffer+0x44>
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2b05      	cmp	r3, #5
 800ba64:	d108      	bne.n	800ba78 <prvSockopt_so_buffer+0x4c>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d003      	beq.n	800ba78 <prvSockopt_so_buffer+0x4c>
        {
            FreeRTOS_printf( ( "Set SO_%sBUF: buffer already created\n",
                               ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ba70:	f06f 0315 	mvn.w	r3, #21
 800ba74:	617b      	str	r3, [r7, #20]
 800ba76:	e018      	b.n	800baaa <prvSockopt_so_buffer+0x7e>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	d10c      	bne.n	800ba9e <prvSockopt_so_buffer+0x72>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6938      	ldr	r0, [r7, #16]
 800ba8e:	f7fe ff5e 	bl	800a94e <FreeRTOS_round_up>
 800ba92:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800ba9c:	e003      	b.n	800baa6 <prvSockopt_so_buffer+0x7a>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            }

            xReturn = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800baaa:	697b      	ldr	r3, [r7, #20]
    }
 800baac:	4618      	mov	r0, r3
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b09      	cmp	r3, #9
 800bac8:	d002      	beq.n	800bad0 <prvSetOptionCallback+0x1c>
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2b0a      	cmp	r3, #10
 800bace:	d102      	bne.n	800bad6 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800bad0:	2311      	movs	r3, #17
 800bad2:	613b      	str	r3, [r7, #16]
 800bad4:	e001      	b.n	800bada <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800bad6:	2306      	movs	r3, #6
 800bad8:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d002      	beq.n	800baee <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bae8:	f06f 0315 	mvn.w	r3, #21
 800baec:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d131      	bne.n	800bb58 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	3b06      	subs	r3, #6
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	d829      	bhi.n	800bb50 <prvSetOptionCallback+0x9c>
 800bafc:	a201      	add	r2, pc, #4	@ (adr r2, 800bb04 <prvSetOptionCallback+0x50>)
 800bafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb02:	bf00      	nop
 800bb04:	0800bb19 	.word	0x0800bb19
 800bb08:	0800bb25 	.word	0x0800bb25
 800bb0c:	0800bb31 	.word	0x0800bb31
 800bb10:	0800bb3d 	.word	0x0800bb3d
 800bb14:	0800bb47 	.word	0x0800bb47
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                        break;
 800bb22:	e019      	b.n	800bb58 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800bb2e:	e013      	b.n	800bb58 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800bb3a:	e00d      	b.n	800bb58 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68da      	ldr	r2, [r3, #12]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	671a      	str	r2, [r3, #112]	@ 0x70
                    break;
 800bb44:	e008      	b.n	800bb58 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	691a      	ldr	r2, [r3, #16]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 800bb4e:	e003      	b.n	800bb58 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800bb50:	f06f 0315 	mvn.w	r3, #21
 800bb54:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800bb56:	bf00      	nop
            }
        }

        return xReturn;
 800bb58:	697b      	ldr	r3, [r7, #20]
    }
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop

0800bb68 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bb72:	f06f 0315 	mvn.w	r3, #21
 800bb76:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3358      	adds	r3, #88	@ 0x58
 800bb7c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bb84:	2b06      	cmp	r3, #6
 800bb86:	d13f      	bne.n	800bc08 <prvSetOptionTCPWindows+0xa0>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	2104      	movs	r1, #4
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff ff4a 	bl	800ba2c <prvSockopt_so_buffer>
 800bb98:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d135      	bne.n	800bc0c <prvSetOptionTCPWindows+0xa4>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	3308      	adds	r3, #8
 800bba4:	461a      	mov	r2, r3
 800bba6:	2105      	movs	r1, #5
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff ff3f 	bl	800ba2c <prvSockopt_so_buffer>
 800bbae:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d12c      	bne.n	800bc10 <prvSetOptionTCPWindows+0xa8>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d019      	beq.n	800bc12 <prvSetOptionTCPWindows+0xaa>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	8bd2      	ldrh	r2, [r2, #30]
 800bbe8:	fb03 f202 	mul.w	r2, r3, r2
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	8bd2      	ldrh	r2, [r2, #30]
 800bbfc:	fb03 f202 	mul.w	r2, r3, r2
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800bc06:	e004      	b.n	800bc12 <prvSetOptionTCPWindows+0xaa>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800bc08:	bf00      	nop
 800bc0a:	e002      	b.n	800bc12 <prvSetOptionTCPWindows+0xaa>
                break; /* will return an error. */
 800bc0c:	bf00      	nop
 800bc0e:	e000      	b.n	800bc12 <prvSetOptionTCPWindows+0xaa>
                break; /* will return an error. */
 800bc10:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800bc12:	697b      	ldr	r3, [r7, #20]
    }
 800bc14:	4618      	mov	r0, r3
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bc26:	f06f 0315 	mvn.w	r3, #21
 800bc2a:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bc36:	2b06      	cmp	r3, #6
 800bc38:	d118      	bne.n	800bc6c <prvSetOptionLowHighWater+0x50>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d212      	bcs.n	800bc6c <prvSetOptionLowHighWater+0x50>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d80b      	bhi.n	800bc6c <prvSetOptionLowHighWater+0x50>
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	685a      	ldr	r2, [r3, #4]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            xReturn = 0;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
    }
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bc84:	f06f 0315 	mvn.w	r3, #21
 800bc88:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bc90:	2b06      	cmp	r3, #6
 800bc92:	d126      	bne.n	800bce2 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	f892 3124 	ldrb.w	r3, [r2, #292]	@ 0x124
 800bca2:	f043 0302 	orr.w	r3, r3, #2
 800bca6:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124
 800bcaa:	e006      	b.n	800bcba <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	f892 3124 	ldrb.w	r3, [r2, #292]	@ 0x124
 800bcb2:	f023 0302 	bic.w	r3, r3, #2
 800bcb6:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bcc0:	2b04      	cmp	r3, #4
 800bcc2:	d90c      	bls.n	800bcde <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fde1 	bl	800c88c <FreeRTOS_tx_size>
 800bcca:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d006      	beq.n	800bcde <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800bcd8:	2007      	movs	r0, #7
 800bcda:	f7fd fd49 	bl	8009770 <xSendEventToIPTask>
            }

            xReturn = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800bce2:	68fb      	ldr	r3, [r7, #12]
    }
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bcf6:	f06f 0315 	mvn.w	r3, #21
 800bcfa:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bd02:	2b06      	cmp	r3, #6
 800bd04:	d122      	bne.n	800bd4c <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d007      	beq.n	800bd1e <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800bd14:	f043 0304 	orr.w	r3, r3, #4
 800bd18:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
 800bd1c:	e006      	b.n	800bd2c <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800bd24:	f023 0304 	bic.w	r3, r3, #4
 800bd28:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800bd32:	f043 0301 	orr.w	r3, r3, #1
 800bd36:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800bd42:	2007      	movs	r0, #7
 800bd44:	f7fd fd14 	bl	8009770 <xSendEventToIPTask>
            xReturn = 0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
    }
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800bd56:	b480      	push	{r7}
 800bd58:	b087      	sub	sp, #28
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	60f8      	str	r0, [r7, #12]
 800bd5e:	60b9      	str	r1, [r7, #8]
 800bd60:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d10f      	bne.n	800bd8e <prvSetOptionTimeout+0x38>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bd74:	2b11      	cmp	r3, #17
 800bd76:	d106      	bne.n	800bd86 <prvSetOptionTimeout+0x30>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd7e:	d902      	bls.n	800bd86 <prvSetOptionTimeout+0x30>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800bd80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bd84:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	697a      	ldr	r2, [r7, #20]
 800bd8a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800bd8c:	e002      	b.n	800bd94 <prvSetOptionTimeout+0x3e>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	621a      	str	r2, [r3, #32]
}
 800bd94:	bf00      	nop
 800bd96:	371c      	adds	r7, #28
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bdaa:	f06f 0315 	mvn.w	r3, #21
 800bdae:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bdb6:	2b06      	cmp	r3, #6
 800bdb8:	d114      	bne.n	800bde4 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d007      	beq.n	800bdd2 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800bdc8:	f043 0308 	orr.w	r3, r3, #8
 800bdcc:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800bdd0:	e006      	b.n	800bde0 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800bdd8:	f023 0308 	bic.w	r3, r3, #8
 800bddc:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            xReturn = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800bde4:	68fb      	ldr	r3, [r7, #12]
    }
 800bde6:	4618      	mov	r0, r3
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800bdf2:	b480      	push	{r7}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bdfc:	f06f 0315 	mvn.w	r3, #21
 800be00:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800be08:	2b06      	cmp	r3, #6
 800be0a:	d114      	bne.n	800be36 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d007      	beq.n	800be24 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800be1a:	f043 0310 	orr.w	r3, r3, #16
 800be1e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800be22:	e006      	b.n	800be32 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800be2a:	f023 0310 	bic.w	r3, r3, #16
 800be2e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            xReturn = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800be36:	68fb      	ldr	r3, [r7, #12]
    }
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800be52:	f06f 0315 	mvn.w	r3, #21
 800be56:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800be5c:	6938      	ldr	r0, [r7, #16]
 800be5e:	f000 fd81 	bl	800c964 <xSocketValid>
 800be62:	4603      	mov	r3, r0
 800be64:	2b01      	cmp	r3, #1
 800be66:	f040 80a5 	bne.w	800bfb4 <FreeRTOS_setsockopt+0x170>
    {
        switch( lOptionName )
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b12      	cmp	r3, #18
 800be6e:	f200 809d 	bhi.w	800bfac <FreeRTOS_setsockopt+0x168>
 800be72:	a201      	add	r2, pc, #4	@ (adr r2, 800be78 <FreeRTOS_setsockopt+0x34>)
 800be74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be78:	0800bec5 	.word	0x0800bec5
 800be7c:	0800bed5 	.word	0x0800bed5
 800be80:	0800befd 	.word	0x0800befd
 800be84:	0800bf3d 	.word	0x0800bf3d
 800be88:	0800bf63 	.word	0x0800bf63
 800be8c:	0800bf63 	.word	0x0800bf63
 800be90:	0800bf2f 	.word	0x0800bf2f
 800be94:	0800bf2f 	.word	0x0800bf2f
 800be98:	0800bf2f 	.word	0x0800bf2f
 800be9c:	0800bf2f 	.word	0x0800bf2f
 800bea0:	0800bf2f 	.word	0x0800bf2f
 800bea4:	0800bf7d 	.word	0x0800bf7d
 800bea8:	0800bf89 	.word	0x0800bf89
 800beac:	0800bf71 	.word	0x0800bf71
 800beb0:	0800bf95 	.word	0x0800bf95
 800beb4:	0800bfa1 	.word	0x0800bfa1
 800beb8:	0800bee5 	.word	0x0800bee5
 800bebc:	0800bf4b 	.word	0x0800bf4b
 800bec0:	0800bf57 	.word	0x0800bf57
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800bec4:	2200      	movs	r2, #0
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6938      	ldr	r0, [r7, #16]
 800beca:	f7ff ff44 	bl	800bd56 <prvSetOptionTimeout>
                xReturn = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	617b      	str	r3, [r7, #20]
                break;
 800bed2:	e074      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800bed4:	2201      	movs	r2, #1
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6938      	ldr	r0, [r7, #16]
 800beda:	f7ff ff3c 	bl	800bd56 <prvSetOptionTimeout>
                xReturn = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	617b      	str	r3, [r7, #20]
                break;
 800bee2:	e06c      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>

                #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                    case FREERTOS_SO_UDP_MAX_RX_PACKETS:

                        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800beea:	2b11      	cmp	r3, #17
 800beec:	d166      	bne.n	800bfbc <FreeRTOS_setsockopt+0x178>
                        {
                            break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                        }

                        pxSocket->u.xUDP.uxMaxPackets = *( ( const UBaseType_t * ) pvOptionValue );
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	66da      	str	r2, [r3, #108]	@ 0x6c
                        xReturn = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	617b      	str	r3, [r7, #20]
                        break;
 800befa:	e060      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d109      	bne.n	800bf16 <FreeRTOS_setsockopt+0xd2>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bf08:	f023 0302 	bic.w	r3, r3, #2
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800bf14:	e008      	b.n	800bf28 <FreeRTOS_setsockopt+0xe4>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bf1c:	f043 0302 	orr.w	r3, r3, #2
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
                break;
 800bf2c:	e047      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	6879      	ldr	r1, [r7, #4]
 800bf32:	6938      	ldr	r0, [r7, #16]
 800bf34:	f7ff fdbe 	bl	800bab4 <prvSetOptionCallback>
 800bf38:	6178      	str	r0, [r7, #20]
                        break;
 800bf3a:	e040      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	617b      	str	r3, [r7, #20]
                        break;
 800bf48:	e039      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>
                        /* MISRA Ref 11.1.1 [ Conversion between pointer to
                         * a function and another type ] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-111 */
                        /* coverity[misra_c_2012_rule_11_8_violation] */
                        /* coverity[misra_c_2012_rule_11_1_violation] */
                        pxSocket->pxUserWakeCallback = ( SocketWakeupCallback_t ) pvOptionValue;
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	641a      	str	r2, [r3, #64]	@ 0x40
                        ipconfigISO_STRICTNESS_VIOLATION_END;
                        xReturn = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
                        break;
 800bf54:	e033      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6938      	ldr	r0, [r7, #16]
 800bf5a:	f7ff fe5f 	bl	800bc1c <prvSetOptionLowHighWater>
 800bf5e:	6178      	str	r0, [r7, #20]
                        break;
 800bf60:	e02d      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	6938      	ldr	r0, [r7, #16]
 800bf68:	f7ff fd60 	bl	800ba2c <prvSockopt_so_buffer>
 800bf6c:	6178      	str	r0, [r7, #20]
                        break;
 800bf6e:	e026      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6938      	ldr	r0, [r7, #16]
 800bf74:	f7ff fdf8 	bl	800bb68 <prvSetOptionTCPWindows>
 800bf78:	6178      	str	r0, [r7, #20]
                        break;
 800bf7a:	e020      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6938      	ldr	r0, [r7, #16]
 800bf80:	f7ff ff0e 	bl	800bda0 <prvSetOptionReuseListenSocket>
 800bf84:	6178      	str	r0, [r7, #20]
                        break;
 800bf86:	e01a      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6938      	ldr	r0, [r7, #16]
 800bf8c:	f7ff ff31 	bl	800bdf2 <prvSetOptionCloseAfterSend>
 800bf90:	6178      	str	r0, [r7, #20]
                        break;
 800bf92:	e014      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6938      	ldr	r0, [r7, #16]
 800bf98:	f7ff fe6f 	bl	800bc7a <prvSetOptionSetFullSize>
 800bf9c:	6178      	str	r0, [r7, #20]
                        break;
 800bf9e:	e00e      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6938      	ldr	r0, [r7, #16]
 800bfa4:	f7ff fea2 	bl	800bcec <prvSetOptionStopRX>
 800bfa8:	6178      	str	r0, [r7, #20]
                        break;
 800bfaa:	e008      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800bfac:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800bfb0:	617b      	str	r3, [r7, #20]
                break;
 800bfb2:	e004      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bfb4:	f06f 0315 	mvn.w	r3, #21
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	e000      	b.n	800bfbe <FreeRTOS_setsockopt+0x17a>
                            break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800bfbc:	bf00      	nop
    }

    return xReturn;
 800bfbe:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800bfd0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800bfd4:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800bfd6:	89fb      	ldrh	r3, [r7, #14]
 800bfd8:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b06      	cmp	r3, #6
 800bfe6:	d102      	bne.n	800bfee <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800bfe8:	4b18      	ldr	r3, [pc, #96]	@ (800c04c <prvGetPrivatePortNumber+0x84>)
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	e001      	b.n	800bff2 <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800bfee:	4b18      	ldr	r3, [pc, #96]	@ (800c050 <prvGetPrivatePortNumber+0x88>)
 800bff0:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800bff2:	f107 0308 	add.w	r3, r7, #8
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff f92c 	bl	800b254 <xApplicationGetRandomNumber>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d01c      	beq.n	800c03c <prvGetPrivatePortNumber+0x74>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800c006:	89fa      	ldrh	r2, [r7, #14]
 800c008:	fbb3 f1f2 	udiv	r1, r3, r2
 800c00c:	fb01 f202 	mul.w	r2, r1, r2
 800c010:	1a9b      	subs	r3, r3, r2
 800c012:	b29b      	uxth	r3, r3
 800c014:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c018:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
 800c01a:	8abb      	ldrh	r3, [r7, #20]
 800c01c:	4619      	mov	r1, r3
 800c01e:	6938      	ldr	r0, [r7, #16]
 800c020:	f000 f818 	bl	800c054 <pxListFindListItemWithValue>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <prvGetPrivatePortNumber+0x78>
            usResult = FreeRTOS_htons( usResult );
            break;
        }
        else
        {
            usResult = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800c02e:	8afb      	ldrh	r3, [r7, #22]
 800c030:	3b01      	subs	r3, #1
 800c032:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800c034:	8afb      	ldrh	r3, [r7, #22]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1db      	bne.n	800bff2 <prvGetPrivatePortNumber+0x2a>
 800c03a:	e002      	b.n	800c042 <prvGetPrivatePortNumber+0x7a>
            break;
 800c03c:	bf00      	nop
 800c03e:	e000      	b.n	800c042 <prvGetPrivatePortNumber+0x7a>
            break;
 800c040:	bf00      	nop

    return usResult;
 800c042:	8abb      	ldrh	r3, [r7, #20]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3718      	adds	r7, #24
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	2000269c 	.word	0x2000269c
 800c050:	20002688 	.word	0x20002688

0800c054 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800c05e:	2300      	movs	r3, #0
 800c060:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800c062:	f7fd fed3 	bl	8009e0c <xIPIsNetworkTaskReady>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d018      	beq.n	800c09e <pxListFindListItemWithValue+0x4a>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d015      	beq.n	800c09e <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3308      	adds	r3, #8
 800c076:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_HEAD_ENTRY( pxList );
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	613b      	str	r3, [r7, #16]
 800c07e:	e00a      	b.n	800c096 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	429a      	cmp	r2, r3
 800c088:	d102      	bne.n	800c090 <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	617b      	str	r3, [r7, #20]
                break;
 800c08e:	e006      	b.n	800c09e <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d1f0      	bne.n	800c080 <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800c09e:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	617b      	str	r3, [r7, #20]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800c0b4:	6879      	ldr	r1, [r7, #4]
 800c0b6:	4810      	ldr	r0, [pc, #64]	@ (800c0f8 <pxUDPSocketLookup+0x50>)
 800c0b8:	f7ff ffcc 	bl	800c054 <pxListFindListItemWithValue>
 800c0bc:	6138      	str	r0, [r7, #16]

    if( pxListItem != NULL )
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d013      	beq.n	800c0ec <pxUDPSocketLookup+0x44>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	617b      	str	r3, [r7, #20]
        configASSERT( pxSocket != NULL );
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10d      	bne.n	800c0ec <pxUDPSocketLookup+0x44>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d4:	b672      	cpsid	i
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	b662      	cpsie	i
 800c0e4:	60fb      	str	r3, [r7, #12]
}
 800c0e6:	bf00      	nop
 800c0e8:	bf00      	nop
 800c0ea:	e7fd      	b.n	800c0e8 <pxUDPSocketLookup+0x40>
    }

    return pxSocket;
 800c0ec:	697b      	ldr	r3, [r7, #20]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20002688 	.word	0x20002688

0800c0fc <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b08b      	sub	sp, #44	@ 0x2c
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800c10a:	1d3b      	adds	r3, r7, #4
 800c10c:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800c112:	2300      	movs	r3, #0
 800c114:	627b      	str	r3, [r7, #36]	@ 0x24
 800c116:	e062      	b.n	800c1de <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11c:	4413      	add	r3, r2
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800c122:	2302      	movs	r3, #2
 800c124:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800c126:	7ffa      	ldrb	r2, [r7, #31]
 800c128:	4b32      	ldr	r3, [pc, #200]	@ (800c1f4 <FreeRTOS_inet_ntoa+0xf8>)
 800c12a:	fba3 1302 	umull	r1, r3, r3, r2
 800c12e:	08d9      	lsrs	r1, r3, #3
 800c130:	460b      	mov	r3, r1
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	440b      	add	r3, r1
 800c136:	005b      	lsls	r3, r3, #1
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	b2d9      	uxtb	r1, r3
 800c13c:	f107 020c 	add.w	r2, r7, #12
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	4413      	add	r3, r2
 800c144:	460a      	mov	r2, r1
 800c146:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800c148:	7ffb      	ldrb	r3, [r7, #31]
 800c14a:	4a2a      	ldr	r2, [pc, #168]	@ (800c1f4 <FreeRTOS_inet_ntoa+0xf8>)
 800c14c:	fba2 2303 	umull	r2, r3, r2, r3
 800c150:	08db      	lsrs	r3, r3, #3
 800c152:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d003      	beq.n	800c162 <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800c160:	e7e1      	b.n	800c126 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800c162:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800c164:	7ffb      	ldrb	r3, [r7, #31]
 800c166:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800c168:	2300      	movs	r3, #0
 800c16a:	61bb      	str	r3, [r7, #24]
 800c16c:	e009      	b.n	800c182 <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800c16e:	f107 020c 	add.w	r2, r7, #12
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	4413      	add	r3, r2
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	3301      	adds	r3, #1
 800c180:	61bb      	str	r3, [r7, #24]
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d9f2      	bls.n	800c16e <FreeRTOS_inet_ntoa+0x72>
 800c188:	e012      	b.n	800c1b0 <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800c18a:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800c18c:	e010      	b.n	800c1b0 <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800c18e:	f107 020c 	add.w	r2, r7, #12
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	4413      	add	r3, r2
 800c196:	781a      	ldrb	r2, [r3, #0]
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	440b      	add	r3, r1
 800c19e:	3230      	adds	r2, #48	@ 0x30
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800c1a4:	6a3b      	ldr	r3, [r7, #32]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	d9eb      	bls.n	800c18e <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d805      	bhi.n	800c1c8 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	222e      	movs	r2, #46	@ 0x2e
 800c1c4:	701a      	strb	r2, [r3, #0]
 800c1c6:	e004      	b.n	800c1d2 <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1da:	3301      	adds	r3, #1
 800c1dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e0:	2b03      	cmp	r3, #3
 800c1e2:	d999      	bls.n	800c118 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800c1e4:	693b      	ldr	r3, [r7, #16]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	372c      	adds	r7, #44	@ 0x2c
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	cccccccd 	.word	0xcccccccd

0800c1f8 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d106      	bne.n	800c21a <FreeRTOS_inet_ntop+0x22>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800c20c:	683a      	ldr	r2, [r7, #0]
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	68b8      	ldr	r0, [r7, #8]
 800c212:	f7fe fe2b 	bl	800ae6c <FreeRTOS_inet_ntop4>
 800c216:	6178      	str	r0, [r7, #20]
                break;
 800c218:	e002      	b.n	800c220 <FreeRTOS_inet_ntop+0x28>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	617b      	str	r3, [r7, #20]
            break;
 800c21e:	bf00      	nop
    }

    return pcResult;
 800c220:	697b      	ldr	r3, [r7, #20]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800c22a:	b480      	push	{r7}
 800c22c:	b085      	sub	sp, #20
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	7a1b      	ldrb	r3, [r3, #8]
 800c23c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10e      	bne.n	800c264 <FreeRTOS_GetLocalAddress+0x3a>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case pdFALSE_UNSIGNED:
                pxAddress->sin_family = FREERTOS_AF_INET;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2202      	movs	r2, #2
 800c24a:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2218      	movs	r2, #24
 800c250:	701a      	strb	r2, [r3, #0]
                /* IP address of local machine. */
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	609a      	str	r2, [r3, #8]

                /* Local port on this machine. */
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	805a      	strh	r2, [r3, #2]
                break;
 800c262:	e000      	b.n	800c266 <FreeRTOS_GetLocalAddress+0x3c>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800c264:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800c266:	2318      	movs	r3, #24
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c280:	2b00      	cmp	r3, #0
 800c282:	d006      	beq.n	800c292 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c288:	2300      	movs	r3, #0
 800c28a:	2200      	movs	r2, #0
 800c28c:	2100      	movs	r1, #0
 800c28e:	f007 fdcb 	bl	8013e28 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

    #if ( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
    {
        if( pxSocket->pxUserWakeCallback != NULL )
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c296:	2b00      	cmp	r3, #0
 800c298:	d003      	beq.n	800c2a2 <vSocketWakeUpUser+0x2e>
        {
            pxSocket->pxUserWakeCallback( pxSocket );
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	4798      	blx	r3
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d015      	beq.n	800c2d6 <vSocketWakeUpUser+0x62>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	0a1b      	lsrs	r3, r3, #8
 800c2b0:	f003 030f 	and.w	r3, r3, #15
 800c2b4:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00c      	beq.n	800c2d6 <vSocketWakeUpUser+0x62>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	64da      	str	r2, [r3, #76]	@ 0x4c
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68f9      	ldr	r1, [r7, #12]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f007 fa82 	bl	80137da <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00b      	beq.n	800c302 <vSocketWakeUpUser+0x8e>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d007      	beq.n	800c302 <vSocketWakeUpUser+0x8e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	f007 fa6c 	bl	80137da <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	601a      	str	r2, [r3, #0]
}
 800c308:	bf00      	nop
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800c322:	2201      	movs	r2, #1
 800c324:	2106      	movs	r1, #6
 800c326:	68b8      	ldr	r0, [r7, #8]
 800c328:	f7fe ffb4 	bl	800b294 <prvValidSocket>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d103      	bne.n	800c33a <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800c332:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	e056      	b.n	800c3e8 <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c340:	2b00      	cmp	r3, #0
 800c342:	d008      	beq.n	800c356 <FreeRTOS_listen+0x46>
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c34a:	2b08      	cmp	r3, #8
 800c34c:	d003      	beq.n	800c356 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800c34e:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800c352:	60fb      	str	r3, [r7, #12]
 800c354:	e048      	b.n	800c3e8 <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800c35c:	f7fe fa46 	bl	800a7ec <FreeRTOS_min_int32>
 800c360:	4603      	mov	r3, r0
 800c362:	b29a      	uxth	r2, r3
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800c370:	f003 0308 	and.w	r3, r3, #8
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b00      	cmp	r3, #0
 800c378:	d032      	beq.n	800c3e0 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d005      	beq.n	800c390 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 fd65 	bl	800ce5a <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c396:	2b00      	cmp	r3, #0
 800c398:	d005      	beq.n	800c3a6 <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f000 fd5a 	bl	800ce5a <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	33ae      	adds	r3, #174	@ 0xae
 800c3aa:	225a      	movs	r2, #90	@ 0x5a
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f00a ffaf 	bl	8017312 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800c3ba:	22c0      	movs	r2, #192	@ 0xc0
 800c3bc:	2100      	movs	r1, #0
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f00a ffa7 	bl	8017312 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	336c      	adds	r3, #108	@ 0x6c
 800c3c8:	2204      	movs	r2, #4
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f00a ffa0 	bl	8017312 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800c3d8:	f043 0308 	orr.w	r3, r3, #8
 800c3dc:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800c3e0:	2101      	movs	r1, #1
 800c3e2:	68b8      	ldr	r0, [r7, #8]
 800c3e4:	f000 ffae 	bl	800d344 <vTCPStateChange>
        }

        return xResult;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
    }
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
	...

0800c3f4 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08a      	sub	sp, #40	@ 0x28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800c3fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c400:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800c402:	f008 fdfd 	bl	8015000 <xTaskGetTickCount>
 800c406:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800c408:	4b32      	ldr	r3, [pc, #200]	@ (800c4d4 <xTCPTimerCheck+0xe0>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	69ba      	ldr	r2, [r7, #24]
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800c412:	4b31      	ldr	r3, [pc, #196]	@ (800c4d8 <xTCPTimerCheck+0xe4>)
 800c414:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800c416:	4b31      	ldr	r3, [pc, #196]	@ (800c4dc <xTCPTimerCheck+0xe8>)
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800c41c:	4a2d      	ldr	r2, [pc, #180]	@ (800c4d4 <xTCPTimerCheck+0xe0>)
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800c422:	6a3b      	ldr	r3, [r7, #32]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d14b      	bne.n	800c4c0 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800c428:	2301      	movs	r3, #1
 800c42a:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800c42c:	e048      	b.n	800c4c0 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c440:	2b00      	cmp	r3, #0
 800c442:	d03a      	beq.n	800c4ba <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c44a:	461a      	mov	r2, r3
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	4293      	cmp	r3, r2
 800c450:	d20a      	bcs.n	800c468 <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	b29a      	uxth	r2, r3
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 800c466:	e00a      	b.n	800c47e <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                xRc = xTCPSocketCheck( pxSocket );
 800c470:	6938      	ldr	r0, [r7, #16]
 800c472:	f000 fe9d 	bl	800d1b0 <xTCPSocketCheck>
 800c476:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	db1f      	blt.n	800c4be <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d008      	beq.n	800c498 <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d003      	beq.n	800c494 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800c48c:	6938      	ldr	r0, [r7, #16]
 800c48e:	f7ff fef1 	bl	800c274 <vSocketWakeUpUser>
 800c492:	e001      	b.n	800c498 <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800c494:	2300      	movs	r3, #0
 800c496:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00e      	beq.n	800c4c0 <xTCPTimerCheck+0xcc>
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d907      	bls.n	800c4c0 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4b8:	e002      	b.n	800c4c0 <xTCPTimerCheck+0xcc>
                continue;
 800c4ba:	bf00      	nop
 800c4bc:	e000      	b.n	800c4c0 <xTCPTimerCheck+0xcc>
                    continue;
 800c4be:	bf00      	nop
        while( pxIterator != pxEnd )
 800c4c0:	69fa      	ldr	r2, [r7, #28]
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d1b2      	bne.n	800c42e <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3728      	adds	r7, #40	@ 0x28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	200026b0 	.word	0x200026b0
 800c4d8:	200026a4 	.word	0x200026a4
 800c4dc:	2000269c 	.word	0x2000269c

0800c4e0 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	b480      	push	{r7}
 800c4e4:	b089      	sub	sp, #36	@ 0x24
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
 800c4ec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c4f0:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	61bb      	str	r3, [r7, #24]
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800c4fc:	4b20      	ldr	r3, [pc, #128]	@ (800c580 <pxTCPSocketLookup+0xa0>)
 800c4fe:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800c500:	4b20      	ldr	r3, [pc, #128]	@ (800c584 <pxTCPSocketLookup+0xa4>)
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	61fb      	str	r3, [r7, #28]
 800c506:	e027      	b.n	800c558 <pxTCPSocketLookup+0x78>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	b29b      	uxth	r3, r3
 800c516:	429a      	cmp	r2, r3
 800c518:	d11b      	bne.n	800c552 <pxTCPSocketLookup+0x72>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c520:	2b01      	cmp	r3, #1
 800c522:	d102      	bne.n	800c52a <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	617b      	str	r3, [r7, #20]
 800c528:	e013      	b.n	800c552 <pxTCPSocketLookup+0x72>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800c530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c532:	b29b      	uxth	r3, r3
 800c534:	429a      	cmp	r2, r3
 800c536:	d10c      	bne.n	800c552 <pxTCPSocketLookup+0x72>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800c538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d106      	bne.n	800c54c <pxTCPSocketLookup+0x6c>
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c544:	429a      	cmp	r2, r3
 800c546:	d101      	bne.n	800c54c <pxTCPSocketLookup+0x6c>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d107      	bne.n	800c562 <pxTCPSocketLookup+0x82>
             pxIterator = listGET_NEXT( pxIterator ) )
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800c558:	69fa      	ldr	r2, [r7, #28]
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d1d3      	bne.n	800c508 <pxTCPSocketLookup+0x28>
 800c560:	e000      	b.n	800c564 <pxTCPSocketLookup+0x84>
                    {
                        break;
 800c562:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <pxTCPSocketLookup+0x8e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800c56e:	69bb      	ldr	r3, [r7, #24]
    }
 800c570:	4618      	mov	r0, r3
 800c572:	3724      	adds	r7, #36	@ 0x24
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	b002      	add	sp, #8
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	200026a4 	.word	0x200026a4
 800c584:	2000269c 	.word	0x2000269c

0800c588 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800c588:	b580      	push	{r7, lr}
 800c58a:	b088      	sub	sp, #32
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d048      	beq.n	800c62a <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800c598:	2314      	movs	r3, #20
 800c59a:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800c59c:	2350      	movs	r3, #80	@ 0x50
 800c59e:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
 800c5ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5b0:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00f      	beq.n	800c5d8 <prvTCPCreateStream+0x50>
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	2b04      	cmp	r3, #4
 800c5bc:	d80c      	bhi.n	800c5d8 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	4a37      	ldr	r2, [pc, #220]	@ (800c6a0 <prvTCPCreateStream+0x118>)
 800c5c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5c8:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	4a34      	ldr	r2, [pc, #208]	@ (800c6a0 <prvTCPCreateStream+0x118>)
 800c5d0:	00db      	lsls	r3, r3, #3
 800c5d2:	4413      	add	r3, r2
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5de:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10c      	bne.n	800c604 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5f0:	69ba      	ldr	r2, [r7, #24]
 800c5f2:	fb02 f303 	mul.w	r3, r2, r3
 800c5f6:	4a2b      	ldr	r2, [pc, #172]	@ (800c6a4 <prvTCPCreateStream+0x11c>)
 800c5f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c5fc:	095a      	lsrs	r2, r3, #5
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d111      	bne.n	800c632 <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	fb02 f303 	mul.w	r3, r2, r3
 800c61a:	4a22      	ldr	r2, [pc, #136]	@ (800c6a4 <prvTCPCreateStream+0x11c>)
 800c61c:	fba2 2303 	umull	r2, r3, r2, r3
 800c620:	095a      	lsrs	r2, r3, #5
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800c628:	e003      	b.n	800c632 <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c630:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	3304      	adds	r3, #4
 800c636:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	f023 0303 	bic.w	r3, r3, #3
 800c63e:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	3314      	adds	r3, #20
 800c644:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f00a fad6 	bl	8016bf8 <pvPortMalloc>
 800c64c:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10b      	bne.n	800c66c <prvTCPCreateStream+0xe4>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800c65a:	f043 0308 	orr.w	r3, r3, #8
 800c65e:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c662:	2108      	movs	r1, #8
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fe6d 	bl	800d344 <vTCPStateChange>
 800c66a:	e013      	b.n	800c694 <prvTCPCreateStream+0x10c>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800c66c:	2214      	movs	r2, #20
 800c66e:	2100      	movs	r1, #0
 800c670:	68b8      	ldr	r0, [r7, #8]
 800c672:	f00a fe4e 	bl	8017312 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	611a      	str	r2, [r3, #16]
            if( xTCPWindowLoggingLevel != 0 )
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
            }

            if( xIsInputStream != 0 )
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d004      	beq.n	800c68c <prvTCPCreateStream+0x104>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c68a:	e003      	b.n	800c694 <prvTCPCreateStream+0x10c>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            }
        }

        return pxBuffer;
 800c694:	68bb      	ldr	r3, [r7, #8]
    }
 800c696:	4618      	mov	r0, r3
 800c698:	3720      	adds	r7, #32
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	080186bc 	.word	0x080186bc
 800c6a4:	51eb851f 	.word	0x51eb851f

0800c6a8 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08a      	sub	sp, #40	@ 0x28
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d006      	beq.n	800c6d0 <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	e009      	b.n	800c6e4 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c6d6:	f107 0214 	add.w	r2, r7, #20
 800c6da:	4611      	mov	r1, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 fc18 	bl	800cf12 <uxStreamBufferGetPtr>
 800c6e2:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d011      	beq.n	800c70e <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c6f0:	6979      	ldr	r1, [r7, #20]
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800c6fe:	2300      	movs	r3, #0
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	2200      	movs	r2, #0
 800c706:	2100      	movs	r1, #0
 800c708:	f000 fca3 	bl	800d052 <uxStreamBufferGet>
        {
 800c70c:	e7d4      	b.n	800c6b8 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800c70e:	bf00      	nop
 800c710:	3720      	adds	r7, #32
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800c724:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d121      	bne.n	800c772 <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c734:	4618      	mov	r0, r3
 800c736:	f000 fb5d 	bl	800cdf4 <uxStreamBufferFrontSpace>
 800c73a:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	429a      	cmp	r2, r3
 800c746:	d814      	bhi.n	800c772 <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800c74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c752:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800c75c:	f043 0301 	orr.w	r3, r3, #1
 800c760:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800c76c:	2007      	movs	r0, #7
 800c76e:	f7fc ffff 	bl	8009770 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f043 0201 	orr.w	r2, r3, #1
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	2b00      	cmp	r3, #0
 800c788:	d005      	beq.n	800c796 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800c796:	bf00      	nop
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b088      	sub	sp, #32
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	60f8      	str	r0, [r7, #12]
 800c7a6:	60b9      	str	r1, [r7, #8]
 800c7a8:	607a      	str	r2, [r7, #4]
 800c7aa:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7b2:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10a      	bne.n	800c7dc <lTCPAddRxdata+0x3e>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800c7c6:	2101      	movs	r1, #1
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f7ff fedd 	bl	800c588 <prvTCPCreateStream>
 800c7ce:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d102      	bne.n	800c7dc <lTCPAddRxdata+0x3e>
            {
                xResult = -1;
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7da:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	db29      	blt.n	800c836 <lTCPAddRxdata+0x98>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00f      	beq.n	800c808 <lTCPAddRxdata+0x6a>
 800c7e8:	69f8      	ldr	r0, [r7, #28]
 800c7ea:	f000 fb14 	bl	800ce16 <uxStreamBufferGetSize>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d109      	bne.n	800c808 <lTCPAddRxdata+0x6a>
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d106      	bne.n	800c808 <lTCPAddRxdata+0x6a>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d003      	beq.n	800c808 <lTCPAddRxdata+0x6a>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	68b9      	ldr	r1, [r7, #8]
 800c80e:	69f8      	ldr	r0, [r7, #28]
 800c810:	f000 fb9f 	bl	800cf52 <uxStreamBufferAdd>
 800c814:	4603      	mov	r3, r0
 800c816:	61bb      	str	r3, [r7, #24]
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10b      	bne.n	800c836 <lTCPAddRxdata+0x98>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d005      	beq.n	800c830 <lTCPAddRxdata+0x92>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	6979      	ldr	r1, [r7, #20]
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff ff3d 	bl	800c6a8 <vTCPAddRxdata_Callback>
 800c82e:	e002      	b.n	800c836 <lTCPAddRxdata+0x98>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f7ff ff70 	bl	800c716 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800c836:	69bb      	ldr	r3, [r7, #24]
    }
 800c838:	4618      	mov	r0, r3
 800c83a:	3720      	adds	r7, #32
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c852:	2b06      	cmp	r3, #6
 800c854:	d003      	beq.n	800c85e <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c856:	f06f 0315 	mvn.w	r3, #21
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	e011      	b.n	800c882 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c864:	2b00      	cmp	r3, #0
 800c866:	d008      	beq.n	800c87a <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 faaf 	bl	800cdd2 <uxStreamBufferGetSpace>
 800c874:	4603      	mov	r3, r0
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	e003      	b.n	800c882 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c880:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800c882:	68fb      	ldr	r3, [r7, #12]
    }
 800c884:	4618      	mov	r0, r3
 800c886:	3710      	adds	r7, #16
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c89e:	2b06      	cmp	r3, #6
 800c8a0:	d003      	beq.n	800c8aa <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c8a2:	f06f 0315 	mvn.w	r3, #21
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e00f      	b.n	800c8ca <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d008      	beq.n	800c8c6 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 faab 	bl	800ce16 <uxStreamBufferGetSize>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	e001      	b.n	800c8ca <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
    }
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c8ea:	2b06      	cmp	r3, #6
 800c8ec:	d003      	beq.n	800c8f6 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c8ee:	f06f 0315 	mvn.w	r3, #21
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	e00b      	b.n	800c90e <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c8fc:	2b04      	cmp	r3, #4
 800c8fe:	d906      	bls.n	800c90e <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c906:	2b07      	cmp	r3, #7
 800c908:	d801      	bhi.n	800c90e <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800c90a:	2301      	movs	r3, #1
 800c90c:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800c90e:	68fb      	ldr	r3, [r7, #12]
    }
 800c910:	4618      	mov	r0, r3
 800c912:	3714      	adds	r7, #20
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c92e:	2b06      	cmp	r3, #6
 800c930:	d003      	beq.n	800c93a <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c932:	f06f 0315 	mvn.w	r3, #21
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	e00f      	b.n	800c95a <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d008      	beq.n	800c956 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 fa63 	bl	800ce16 <uxStreamBufferGetSize>
 800c950:	4603      	mov	r3, r0
 800c952:	60fb      	str	r3, [r7, #12]
 800c954:	e001      	b.n	800c95a <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800c95a:	68fb      	ldr	r3, [r7, #12]
    }
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800c96c:	2300      	movs	r3, #0
 800c96e:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c976:	d004      	beq.n	800c982 <xSocketValid+0x1e>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800c97e:	2301      	movs	r3, #1
 800c980:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800c982:	68fb      	ldr	r3, [r7, #12]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800c990:	b580      	push	{r7, lr}
 800c992:	b098      	sub	sp, #96	@ 0x60
 800c994:	af02      	add	r7, sp, #8
 800c996:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800c998:	2320      	movs	r3, #32
 800c99a:	657b      	str	r3, [r7, #84]	@ 0x54

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800c99c:	f008 fb30 	bl	8015000 <xTaskGetTickCount>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	653b      	str	r3, [r7, #80]	@ 0x50
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800c9ac:	f107 030c 	add.w	r3, r7, #12
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	605a      	str	r2, [r3, #4]
 800c9b6:	609a      	str	r2, [r3, #8]
 800c9b8:	60da      	str	r2, [r3, #12]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d131      	bne.n	800ca28 <vTCPNetStat_TCPSocket+0x98>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800c9ca:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800c9d2:	f107 000c 	add.w	r0, r7, #12
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	4a21      	ldr	r2, [pc, #132]	@ (800ca60 <vTCPNetStat_TCPSocket+0xd0>)
 800c9dc:	2110      	movs	r1, #16
 800c9de:	f00a fbf5 	bl	80171cc <sniprintf>
 800c9e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800c9e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	da0d      	bge.n	800ca06 <vTCPNetStat_TCPSocket+0x76>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ee:	b672      	cpsid	i
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	b662      	cpsie	i
 800c9fe:	64bb      	str	r3, [r7, #72]	@ 0x48
}
 800ca00:	bf00      	nop
 800ca02:	bf00      	nop
 800ca04:	e7fd      	b.n	800ca02 <vTCPNetStat_TCPSocket+0x72>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800ca06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca08:	2b0f      	cmp	r3, #15
 800ca0a:	dd0d      	ble.n	800ca28 <vTCPNetStat_TCPSocket+0x98>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca10:	b672      	cpsid	i
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	b662      	cpsie	i
 800ca20:	647b      	str	r3, [r7, #68]	@ 0x44
}
 800ca22:	bf00      	nop
 800ca24:	bf00      	nop
 800ca26:	e7fd      	b.n	800ca24 <vTCPNetStat_TCPSocket+0x94>
        }

        if( age > 999999U )
 800ca28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca2a:	4a0e      	ldr	r2, [pc, #56]	@ (800ca64 <vTCPNetStat_TCPSocket+0xd4>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d901      	bls.n	800ca34 <vTCPNetStat_TCPSocket+0xa4>
        {
            age = 999999U;
 800ca30:	4b0c      	ldr	r3, [pc, #48]	@ (800ca64 <vTCPNetStat_TCPSocket+0xd4>)
 800ca32:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7a1b      	ldrb	r3, [r3, #8]
 800ca38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d108      	bne.n	800ca54 <vTCPNetStat_TCPSocket+0xc4>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca46:	f107 001c 	add.w	r0, r7, #28
 800ca4a:	4a07      	ldr	r2, [pc, #28]	@ (800ca68 <vTCPNetStat_TCPSocket+0xd8>)
 800ca4c:	2128      	movs	r1, #40	@ 0x28
 800ca4e:	f00a fbbd 	bl	80171cc <sniprintf>
                    break;
 800ca52:	e000      	b.n	800ca56 <vTCPNetStat_TCPSocket+0xc6>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800ca54:	bf00      	nop
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800ca56:	bf00      	nop
 800ca58:	3758      	adds	r7, #88	@ 0x58
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08018590 	.word	0x08018590
 800ca64:	000f423f 	.word	0x000f423f
 800ca68:	08018598 	.word	0x08018598

0800ca6c <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b088      	sub	sp, #32
 800ca70:	af00      	add	r7, sp, #0
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800ca76:	f004 fd63 	bl	8011540 <uxGetMinimumFreeNetworkBuffers>
 800ca7a:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800ca7c:	f004 fd54 	bl	8011528 <uxGetNumberOfFreeNetworkBuffers>
 800ca80:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800ca82:	4b17      	ldr	r3, [pc, #92]	@ (800cae0 <vTCPNetStat+0x74>)
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8a:	d125      	bne.n	800cad8 <vTCPNetStat+0x6c>
        }
        else
        {
            /* Casting a "MiniListItem_t" to a "ListItem_t".
             * This is safe because only its address is being accessed, not its fields. */
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ca8c:	4b15      	ldr	r3, [pc, #84]	@ (800cae4 <vTCPNetStat+0x78>)
 800ca8e:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800ca90:	4b15      	ldr	r3, [pc, #84]	@ (800cae8 <vTCPNetStat+0x7c>)
 800ca92:	60bb      	str	r3, [r7, #8]

            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ca94:	4b12      	ldr	r3, [pc, #72]	@ (800cae0 <vTCPNetStat+0x74>)
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	61fb      	str	r3, [r7, #28]
 800ca9a:	e00b      	b.n	800cab4 <vTCPNetStat+0x48>
                 pxIterator != pxEndTCP;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7ff ff74 	bl	800c990 <vTCPNetStat_TCPSocket>
                count++;
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	3301      	adds	r3, #1
 800caac:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 800cab4:	69fa      	ldr	r2, [r7, #28]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d1ef      	bne.n	800ca9c <vTCPNetStat+0x30>
            }

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800cabc:	4b0b      	ldr	r3, [pc, #44]	@ (800caec <vTCPNetStat+0x80>)
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	e005      	b.n	800cad0 <vTCPNetStat+0x64>
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                /* Local port on this machine */
                FreeRTOS_printf( ( "UDP Port %5u\n",
                                   FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
                count++;
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	3301      	adds	r3, #1
 800cac8:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 800cad0:	69fa      	ldr	r2, [r7, #28]
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d1f5      	bne.n	800cac4 <vTCPNetStat+0x58>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800cad8:	bf00      	nop
 800cada:	3720      	adds	r7, #32
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	2000269c 	.word	0x2000269c
 800cae4:	200026a4 	.word	0x200026a4
 800cae8:	20002690 	.word	0x20002690
 800caec:	20002688 	.word	0x20002688

0800caf0 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 800caf8:	2300      	movs	r3, #0
 800cafa:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 800cafc:	2300      	movs	r3, #0
 800cafe:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cb06:	f003 0304 	and.w	r3, r3, #4
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d109      	bne.n	800cb24 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cb16:	f003 0302 	and.w	r3, r3, #2
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 800cb20:	2301      	movs	r3, #1
 800cb22:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb28:	f003 0301 	and.w	r3, r3, #1
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d03a      	beq.n	800cba6 <vSocketSelectTCP+0xb6>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d113      	bne.n	800cb62 <vSocketSelectTCP+0x72>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d030      	beq.n	800cba6 <vSocketSelectTCP+0xb6>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb4a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cb4e:	f003 0302 	and.w	r3, r3, #2
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d026      	beq.n	800cba6 <vSocketSelectTCP+0xb6>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	f043 0301 	orr.w	r3, r3, #1
 800cb5e:	613b      	str	r3, [r7, #16]
 800cb60:	e021      	b.n	800cba6 <vSocketSelectTCP+0xb6>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cb68:	f003 0308 	and.w	r3, r3, #8
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00c      	beq.n	800cb8c <vSocketSelectTCP+0x9c>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cb78:	f003 0302 	and.w	r3, r3, #2
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d004      	beq.n	800cb8c <vSocketSelectTCP+0x9c>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	f043 0301 	orr.w	r3, r3, #1
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	e00c      	b.n	800cba6 <vSocketSelectTCP+0xb6>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d009      	beq.n	800cba6 <vSocketSelectTCP+0xb6>
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7ff fec2 	bl	800c91c <FreeRTOS_rx_size>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	dd03      	ble.n	800cba6 <vSocketSelectTCP+0xb6>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f043 0301 	orr.w	r3, r3, #1
 800cba4:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00d      	beq.n	800cbce <vSocketSelectTCP+0xde>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cbb8:	2b08      	cmp	r3, #8
 800cbba:	d004      	beq.n	800cbc6 <vSocketSelectTCP+0xd6>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d103      	bne.n	800cbce <vSocketSelectTCP+0xde>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f043 0304 	orr.w	r3, r3, #4
 800cbcc:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbd2:	f003 0302 	and.w	r3, r3, #2
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d034      	beq.n	800cc44 <vSocketSelectTCP+0x154>
            {
                BaseType_t bMatch = pdFALSE;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d007      	beq.n	800cbf4 <vSocketSelectTCP+0x104>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff fe2b 	bl	800c840 <FreeRTOS_tx_space>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	dd01      	ble.n	800cbf4 <vSocketSelectTCP+0x104>
                    {
                        bMatch = pdTRUE;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d11d      	bne.n	800cc36 <vSocketSelectTCP+0x146>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800cc00:	f003 0308 	and.w	r3, r3, #8
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d015      	beq.n	800cc36 <vSocketSelectTCP+0x146>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800cc10:	2b04      	cmp	r3, #4
 800cc12:	d910      	bls.n	800cc36 <vSocketSelectTCP+0x146>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800cc1a:	f003 0310 	and.w	r3, r3, #16
 800cc1e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d108      	bne.n	800cc36 <vSocketSelectTCP+0x146>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800cc2a:	f043 0310 	orr.w	r3, r3, #16
 800cc2e:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                        bMatch = pdTRUE;
 800cc32:	2301      	movs	r3, #1
 800cc34:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d003      	beq.n	800cc44 <vSocketSelectTCP+0x154>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	f043 0302 	orr.w	r3, r3, #2
 800cc42:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 800cc44:	693b      	ldr	r3, [r7, #16]
        }
 800cc46:	4618      	mov	r0, r3
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b08c      	sub	sp, #48	@ 0x30
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	617b      	str	r3, [r7, #20]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	627b      	str	r3, [r7, #36]	@ 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800cc60:	2300      	movs	r3, #0
 800cc62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc64:	e047      	b.n	800ccf6 <vSocketSelect+0xa6>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            const List_t * pxList;

            if( xRound == 0 )
 800cc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d104      	bne.n	800cc76 <vSocketSelect+0x26>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 800cc6c:	4b36      	ldr	r3, [pc, #216]	@ (800cd48 <vSocketSelect+0xf8>)
 800cc6e:	61fb      	str	r3, [r7, #28]
                pxList = &xBoundUDPSocketsList;
 800cc70:	4b36      	ldr	r3, [pc, #216]	@ (800cd4c <vSocketSelect+0xfc>)
 800cc72:	61bb      	str	r3, [r7, #24]
 800cc74:	e003      	b.n	800cc7e <vSocketSelect+0x2e>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800cc76:	4b36      	ldr	r3, [pc, #216]	@ (800cd50 <vSocketSelect+0x100>)
 800cc78:	61fb      	str	r3, [r7, #28]
                    pxList = &xBoundTCPSocketsList;
 800cc7a:	4b36      	ldr	r3, [pc, #216]	@ (800cd54 <vSocketSelect+0x104>)
 800cc7c:	61bb      	str	r3, [r7, #24]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_HEAD_ENTRY( pxList );
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	623b      	str	r3, [r7, #32]
 800cc84:	e030      	b.n	800cce8 <vSocketSelect+0x98>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	60fb      	str	r3, [r7, #12]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d124      	bne.n	800cce0 <vSocketSelect+0x90>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	62bb      	str	r3, [r7, #40]	@ 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800cca0:	2b06      	cmp	r3, #6
 800cca2:	d107      	bne.n	800ccb4 <vSocketSelect+0x64>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f7ff ff23 	bl	800caf0 <vSocketSelectTCP>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccb2:	e00d      	b.n	800ccd0 <vSocketSelect+0x80>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d007      	beq.n	800ccd0 <vSocketSelect+0x80>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d003      	beq.n	800ccd0 <vSocketSelect+0x80>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800ccc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccca:	f043 0301 	orr.w	r3, r3, #1
 800ccce:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccd4:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800ccd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccde:	e000      	b.n	800cce2 <vSocketSelect+0x92>
                    continue;
 800cce0:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 800cce8:	6a3a      	ldr	r2, [r7, #32]
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d1ca      	bne.n	800cc86 <vSocketSelect+0x36>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800ccf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ccf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	ddb3      	ble.n	800cc66 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2100      	movs	r1, #0
 800cd04:	4618      	mov	r0, r3
 800cd06:	f006 fd2b 	bl	8013760 <xEventGroupClearBits>
 800cd0a:	6138      	str	r0, [r7, #16]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0e:	43da      	mvns	r2, r3
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	4013      	ands	r3, r2
 800cd14:	f003 030f 	and.w	r3, r3, #15
 800cd18:	613b      	str	r3, [r7, #16]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d005      	beq.n	800cd2c <vSocketSelect+0xdc>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6939      	ldr	r1, [r7, #16]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f006 fd1a 	bl	8013760 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd32:	f043 0310 	orr.w	r3, r3, #16
 800cd36:	4619      	mov	r1, r3
 800cd38:	4610      	mov	r0, r2
 800cd3a:	f006 fd4e 	bl	80137da <xEventGroupSetBits>
    }
 800cd3e:	bf00      	nop
 800cd40:	3730      	adds	r7, #48	@ 0x30
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20002690 	.word	0x20002690
 800cd4c:	20002688 	.word	0x20002688
 800cd50:	200026a4 	.word	0x200026a4
 800cd54:	2000269c 	.word	0x2000269c

0800cd58 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b087      	sub	sp, #28
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 800cd6a:	693a      	ldr	r2, [r7, #16]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	441a      	add	r2, r3
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	1ad3      	subs	r3, r2, r3
 800cd74:	3b01      	subs	r3, #1
 800cd76:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800cd78:	697a      	ldr	r2, [r7, #20]
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d303      	bcc.n	800cd88 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800cd88:	697b      	ldr	r3, [r7, #20]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 800cd96:	b480      	push	{r7}
 800cd98:	b087      	sub	sp, #28
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	441a      	add	r2, r3
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800cdb4:	697a      	ldr	r2, [r7, #20]
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d303      	bcc.n	800cdc4 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 800cdbc:	697a      	ldr	r2, [r7, #20]
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800cdc4:	697b      	ldr	r3, [r7, #20]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	371c      	adds	r7, #28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b082      	sub	sp, #8
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6899      	ldr	r1, [r3, #8]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7ff ffb7 	bl	800cd58 <uxStreamBufferSpace>
 800cdea:	4603      	mov	r3, r0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68d9      	ldr	r1, [r3, #12]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	461a      	mov	r2, r3
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff ffa6 	bl	800cd58 <uxStreamBufferSpace>
 800ce0c:	4603      	mov	r3, r0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6819      	ldr	r1, [r3, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	461a      	mov	r2, r3
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff ffb4 	bl	800cd96 <uxStreamBufferDistance>
 800ce2e:	4603      	mov	r3, r0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6859      	ldr	r1, [r3, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff ffa3 	bl	800cd96 <uxStreamBufferDistance>
 800ce50:	4603      	mov	r3, r0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b083      	sub	sp, #12
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	605a      	str	r2, [r3, #4]
}
 800ce7a:	bf00      	nop
 800ce7c:	370c      	adds	r7, #12
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr

0800ce86 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b086      	sub	sp, #24
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
 800ce8e:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f7ff ffce 	bl	800ce38 <uxStreamBufferMidSpace>
 800ce9c:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d901      	bls.n	800ceb4 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	4413      	add	r3, r2
 800ceba:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 800cebc:	697a      	ldr	r2, [r7, #20]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d303      	bcc.n	800cecc <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	605a      	str	r2, [r3, #4]
}
 800ced2:	bf00      	nop
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 800ceda:	b480      	push	{r7}
 800cedc:	b087      	sub	sp, #28
 800cede:	af00      	add	r7, sp, #0
 800cee0:	60f8      	str	r0, [r7, #12]
 800cee2:	60b9      	str	r1, [r7, #8]
 800cee4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800cee6:	2300      	movs	r3, #0
 800cee8:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	1ad2      	subs	r2, r2, r3
 800cef6:	6879      	ldr	r1, [r7, #4]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	1acb      	subs	r3, r1, r3
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d801      	bhi.n	800cf04 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 800cf00:	2301      	movs	r3, #1
 800cf02:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800cf04:	697b      	ldr	r3, [r7, #20]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	371c      	adds	r7, #28
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b084      	sub	sp, #16
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7ff ff77 	bl	800ce16 <uxStreamBufferGetSize>
 800cf28:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f103 0214 	add.w	r2, r3, #20
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	441a      	add	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	691a      	ldr	r2, [r3, #16]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	4619      	mov	r1, r3
 800cf42:	68b8      	ldr	r0, [r7, #8]
 800cf44:	f7fd fc72 	bl	800a82c <FreeRTOS_min_size_t>
 800cf48:	4603      	mov	r3, r0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b08a      	sub	sp, #40	@ 0x28
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	60f8      	str	r0, [r7, #12]
 800cf5a:	60b9      	str	r1, [r7, #8]
 800cf5c:	607a      	str	r2, [r7, #4]
 800cf5e:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff ff36 	bl	800cdd2 <uxStreamBufferGetSpace>
 800cf66:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800cf68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d904      	bls.n	800cf7a <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 800cf70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf78:	e001      	b.n	800cf7e <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf82:	f7fd fc53 	bl	800a82c <FreeRTOS_min_size_t>
 800cf86:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d05c      	beq.n	800d048 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00b      	beq.n	800cfb8 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800cfa0:	6a3a      	ldr	r2, [r7, #32]
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 800cfa8:	6a3a      	ldr	r2, [r7, #32]
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d303      	bcc.n	800cfb8 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 800cfb0:	6a3a      	ldr	r2, [r7, #32]
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d021      	beq.n	800d002 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 800cfbe:	69ba      	ldr	r2, [r7, #24]
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	69f9      	ldr	r1, [r7, #28]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fd fc30 	bl	800a82c <FreeRTOS_min_size_t>
 800cfcc:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) pvPortMemCpyStreamBuffer( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	3310      	adds	r3, #16
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	6879      	ldr	r1, [r7, #4]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f00a fa72 	bl	80174c6 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800cfe2:	69fa      	ldr	r2, [r7, #28]
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d90b      	bls.n	800d002 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) pvPortMemCpyStreamBuffer( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f103 0014 	add.w	r0, r3, #20
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	18d1      	adds	r1, r2, r3
 800cff6:	69fa      	ldr	r2, [r7, #28]
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	461a      	mov	r2, r3
 800cffe:	f00a fa62 	bl	80174c6 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        taskENTER_CRITICAL();
 800d002:	f009 fccb 	bl	801699c <vPortEnterCritical>
        {
            if( uxOffset == 0U )
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d10e      	bne.n	800d02a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 800d00c:	6a3a      	ldr	r2, [r7, #32]
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	4413      	add	r3, r2
 800d012:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 800d014:	6a3a      	ldr	r2, [r7, #32]
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d303      	bcc.n	800d024 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 800d01c:	6a3a      	ldr	r2, [r7, #32]
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6a3a      	ldr	r2, [r7, #32]
 800d028:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	6a3a      	ldr	r2, [r7, #32]
 800d030:	4619      	mov	r1, r3
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f7ff ff51 	bl	800ceda <xStreamBufferLessThenEqual>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d002      	beq.n	800d044 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6a3a      	ldr	r2, [r7, #32]
 800d042:	60da      	str	r2, [r3, #12]
            }
        }
        taskEXIT_CRITICAL();
 800d044:	f009 fce0 	bl	8016a08 <vPortExitCritical>
    }

    return uxCount;
 800d048:	69fb      	ldr	r3, [r7, #28]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3728      	adds	r7, #40	@ 0x28
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b08a      	sub	sp, #40	@ 0x28
 800d056:	af00      	add	r7, sp, #0
 800d058:	60f8      	str	r0, [r7, #12]
 800d05a:	60b9      	str	r1, [r7, #8]
 800d05c:	607a      	str	r2, [r7, #4]
 800d05e:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f7ff fed8 	bl	800ce16 <uxStreamBufferGetSize>
 800d066:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 800d068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d904      	bls.n	800d07a <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800d070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	627b      	str	r3, [r7, #36]	@ 0x24
 800d078:	e001      	b.n	800d07e <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d082:	f7fd fbd3 	bl	800a82c <FreeRTOS_min_size_t>
 800d086:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d04e      	beq.n	800d12c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00b      	beq.n	800d0b8 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 800d0a0:	6a3a      	ldr	r2, [r7, #32]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800d0a8:	6a3a      	ldr	r2, [r7, #32]
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d303      	bcc.n	800d0b8 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 800d0b0:	6a3a      	ldr	r2, [r7, #32]
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d021      	beq.n	800d102 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 800d0be:	69ba      	ldr	r2, [r7, #24]
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	1ad3      	subs	r3, r2, r3
 800d0c4:	69f9      	ldr	r1, [r7, #28]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fd fbb0 	bl	800a82c <FreeRTOS_min_size_t>
 800d0cc:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) pvPortMemCpyStreamBuffer( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	3310      	adds	r3, #16
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	697a      	ldr	r2, [r7, #20]
 800d0da:	4619      	mov	r1, r3
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f00a f9f2 	bl	80174c6 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800d0e2:	69fa      	ldr	r2, [r7, #28]
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d90b      	bls.n	800d102 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) pvPortMemCpyStreamBuffer( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	18d0      	adds	r0, r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f103 0114 	add.w	r1, r3, #20
 800d0f6:	69fa      	ldr	r2, [r7, #28]
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	f00a f9e2 	bl	80174c6 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 800d102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d104:	2b00      	cmp	r3, #0
 800d106:	d111      	bne.n	800d12c <uxStreamBufferGet+0xda>
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10e      	bne.n	800d12c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800d10e:	6a3a      	ldr	r2, [r7, #32]
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	4413      	add	r3, r2
 800d114:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800d116:	6a3a      	ldr	r2, [r7, #32]
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d303      	bcc.n	800d126 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 800d11e:	6a3a      	ldr	r2, [r7, #32]
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6a3a      	ldr	r2, [r7, #32]
 800d12a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800d12c:	69fb      	ldr	r3, [r7, #28]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3728      	adds	r7, #40	@ 0x28
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
	...

0800d138 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 800d140:	4b0a      	ldr	r3, [pc, #40]	@ (800d16c <vSocketCloseNextTime+0x34>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d009      	beq.n	800d15c <vSocketCloseNextTime+0x24>
 800d148:	4b08      	ldr	r3, [pc, #32]	@ (800d16c <vSocketCloseNextTime+0x34>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d004      	beq.n	800d15c <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 800d152:	4b06      	ldr	r3, [pc, #24]	@ (800d16c <vSocketCloseNextTime+0x34>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe fb9c 	bl	800b894 <vSocketClose>
        }

        xSocketToClose = pxSocket;
 800d15c:	4a03      	ldr	r2, [pc, #12]	@ (800d16c <vSocketCloseNextTime+0x34>)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6013      	str	r3, [r2, #0]
    }
 800d162:	bf00      	nop
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	200026b4 	.word	0x200026b4

0800d170 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 800d178:	4b0c      	ldr	r3, [pc, #48]	@ (800d1ac <vSocketListenNextTime+0x3c>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00e      	beq.n	800d19e <vSocketListenNextTime+0x2e>
 800d180:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ac <vSocketListenNextTime+0x3c>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	429a      	cmp	r2, r3
 800d188:	d009      	beq.n	800d19e <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 800d18a:	4b08      	ldr	r3, [pc, #32]	@ (800d1ac <vSocketListenNextTime+0x3c>)
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	4b07      	ldr	r3, [pc, #28]	@ (800d1ac <vSocketListenNextTime+0x3c>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800d196:	4619      	mov	r1, r3
 800d198:	4610      	mov	r0, r2
 800d19a:	f7ff f8b9 	bl	800c310 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 800d19e:	4a03      	ldr	r2, [pc, #12]	@ (800d1ac <vSocketListenNextTime+0x3c>)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6013      	str	r3, [r2, #0]
    }
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	200026b8 	.word	0x200026b8

0800d1b0 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d1c6:	2b04      	cmp	r3, #4
 800d1c8:	d907      	bls.n	800d1da <xTCPSocketCheck+0x2a>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <xTCPSocketCheck+0x2a>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f002 f97f 	bl	800f4d8 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d035      	beq.n	800d250 <xTCPSocketCheck+0xa0>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d1ea:	f003 0320 	and.w	r3, r3, #32
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d11e      	bne.n	800d232 <xTCPSocketCheck+0x82>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d011      	beq.n	800d222 <xTCPSocketCheck+0x72>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7fc fe6b 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800d20a:	4603      	mov	r3, r0
 800d20c:	f103 0214 	add.w	r2, r3, #20
 800d210:	2301      	movs	r3, #1
 800d212:	4621      	mov	r1, r4
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f001 fd78 	bl	800ed0a <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 fa08 	bl	800d638 <prvTCPNextTimeout>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d901      	bls.n	800d232 <xTCPSocketCheck+0x82>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 800d22e:	2301      	movs	r3, #1
 800d230:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d009      	beq.n	800d250 <xTCPSocketCheck+0xa0>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d242:	4618      	mov	r0, r3
 800d244:	f004 f93a 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d113      	bne.n	800d27e <xTCPSocketCheck+0xce>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d25c:	2b04      	cmp	r3, #4
 800d25e:	d804      	bhi.n	800d26a <xTCPSocketCheck+0xba>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800d266:	2b02      	cmp	r3, #2
 800d268:	d102      	bne.n	800d270 <xTCPSocketCheck+0xc0>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f001 fcba 	bl	800ebe4 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f9e1 	bl	800d638 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 ff1a 	bl	800e0b0 <prvTCPStatusAgeCheck>
 800d27c:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 800d27e:	68fb      	ldr	r3, [r7, #12]
    }
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	bd90      	pop	{r4, r7, pc}

0800d288 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800d290:	f007 feb6 	bl	8015000 <xTaskGetTickCount>
 800d294:	4602      	mov	r2, r0
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800d2a2:	f023 0304 	bic.w	r3, r3, #4
 800d2a6:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800d2b0:	f023 0302 	bic.w	r3, r3, #2
 800d2b4:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800d2c0:	f007 fe9e 	bl	8015000 <xTaskGetTickCount>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        ( void ) pxSocket;
    }
 800d2cc:	bf00      	nop
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 800d2d4:	b480      	push	{r7}
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800d2e0:	4b16      	ldr	r3, [pc, #88]	@ (800d33c <vTCPRemoveTCPChild+0x68>)
 800d2e2:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800d2e4:	4b16      	ldr	r3, [pc, #88]	@ (800d340 <vTCPRemoveTCPChild+0x6c>)
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 800d2ea:	e01c      	b.n	800d326 <vTCPRemoveTCPChild+0x52>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d012      	beq.n	800d326 <vTCPRemoveTCPChild+0x52>
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800d308:	429a      	cmp	r2, r3
 800d30a:	d10c      	bne.n	800d326 <vTCPRemoveTCPChild+0x52>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	429a      	cmp	r2, r3
 800d316:	d106      	bne.n	800d326 <vTCPRemoveTCPChild+0x52>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    xReturn = pdTRUE;
 800d320:	2301      	movs	r3, #1
 800d322:	617b      	str	r3, [r7, #20]
                    break;
 800d324:	e003      	b.n	800d32e <vTCPRemoveTCPChild+0x5a>
        while( pxIterator != pxEnd )
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d1de      	bne.n	800d2ec <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 800d32e:	697b      	ldr	r3, [r7, #20]
    }
 800d330:	4618      	mov	r0, r3
 800d332:	371c      	adds	r7, #28
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	200026a4 	.word	0x200026a4
 800d340:	2000269c 	.word	0x2000269c

0800d344 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800d344:	b580      	push	{r7, lr}
 800d346:	b096      	sub	sp, #88	@ 0x58
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	657b      	str	r3, [r7, #84]	@ 0x54
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d35a:	2b04      	cmp	r3, #4
 800d35c:	d906      	bls.n	800d36c <vTCPStateChange+0x28>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d364:	2b08      	cmp	r3, #8
 800d366:	d001      	beq.n	800d36c <vTCPStateChange+0x28>
 800d368:	2301      	movs	r3, #1
 800d36a:	e000      	b.n	800d36e <vTCPStateChange+0x2a>
 800d36c:	2300      	movs	r3, #0
 800d36e:	653b      	str	r3, [r7, #80]	@ 0x50
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 800d370:	78fb      	ldrb	r3, [r7, #3]
 800d372:	2b04      	cmp	r3, #4
 800d374:	d904      	bls.n	800d380 <vTCPStateChange+0x3c>
 800d376:	78fb      	ldrb	r3, [r7, #3]
 800d378:	2b08      	cmp	r3, #8
 800d37a:	d001      	beq.n	800d380 <vTCPStateChange+0x3c>
 800d37c:	2301      	movs	r3, #1
 800d37e:	e000      	b.n	800d382 <vTCPStateChange+0x3e>
 800d380:	2300      	movs	r3, #0
 800d382:	64bb      	str	r3, [r7, #72]	@ 0x48

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d38a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 800d38e:	2300      	movs	r3, #0
 800d390:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 800d392:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d396:	2b02      	cmp	r3, #2
 800d398:	d007      	beq.n	800d3aa <vTCPStateChange+0x66>
 800d39a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d39e:	2b03      	cmp	r3, #3
 800d3a0:	d003      	beq.n	800d3aa <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 800d3a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d3a6:	2b04      	cmp	r3, #4
 800d3a8:	d104      	bne.n	800d3b4 <vTCPStateChange+0x70>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 800d3aa:	78fb      	ldrb	r3, [r7, #3]
 800d3ac:	2b08      	cmp	r3, #8
 800d3ae:	d101      	bne.n	800d3b4 <vTCPStateChange+0x70>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800d3b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d3b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	f000 80a2 	beq.w	800d502 <vTCPStateChange+0x1be>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d01c      	beq.n	800d408 <vTCPStateChange+0xc4>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d3d4:	f003 0308 	and.w	r3, r3, #8
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d114      	bne.n	800d408 <vTCPStateChange+0xc4>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3e4:	657b      	str	r3, [r7, #84]	@ 0x54
                    configASSERT( xParent != NULL );
 800d3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10d      	bne.n	800d408 <vTCPStateChange+0xc4>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f0:	b672      	cpsid	i
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	b662      	cpsie	i
 800d400:	63bb      	str	r3, [r7, #56]	@ 0x38
}
 800d402:	bf00      	nop
 800d404:	bf00      	nop
 800d406:	e7fd      	b.n	800d404 <vTCPStateChange+0xc0>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800d408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d055      	beq.n	800d4ba <vTCPStateChange+0x176>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d414:	f003 0304 	and.w	r3, r3, #4
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d03a      	beq.n	800d494 <vTCPStateChange+0x150>
                {
                    if( xParent != NULL )
 800d41e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d420:	2b00      	cmp	r3, #0
 800d422:	d024      	beq.n	800d46e <vTCPStateChange+0x12a>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800d424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d103      	bne.n	800d436 <vTCPStateChange+0xf2>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800d42e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800d436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f043 0204 	orr.w	r2, r3, #4
 800d43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d440:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800d442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d005      	beq.n	800d45a <vTCPStateChange+0x116>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800d44e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d458:	601a      	str	r2, [r3, #0]
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 800d45a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d45c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 800d460:	f003 0308 	and.w	r3, r3, #8
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <vTCPStateChange+0x12a>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 800d46a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d46c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d47c:	f023 0304 	bic.w	r3, r3, #4
 800d480:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d48a:	f043 0302 	orr.w	r3, r3, #2
 800d48e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800d492:	e024      	b.n	800d4de <vTCPStateChange+0x19a>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f043 0208 	orr.w	r2, r3, #8
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4a4:	f003 0302 	and.w	r3, r3, #2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d018      	beq.n	800d4de <vTCPStateChange+0x19a>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	e011      	b.n	800d4de <vTCPStateChange+0x19a>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800d4ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f043 0220 	orr.w	r2, r3, #32
 800d4c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c4:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800d4c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4ca:	f003 0304 	and.w	r3, r3, #4
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d005      	beq.n	800d4de <vTCPStateChange+0x19a>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800d4d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800d4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4dc:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 800d4de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d101      	bne.n	800d4e8 <vTCPStateChange+0x1a4>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 fdb7 	bl	800e062 <prvTCPSocketIsActive>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d103      	bne.n	800d502 <vTCPStateChange+0x1be>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	78fa      	ldrb	r2, [r7, #3]
 800d506:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        if( ( eTCPState == eCLOSED ) ||
 800d50a:	78fb      	ldrb	r3, [r7, #3]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <vTCPStateChange+0x1d2>
 800d510:	78fb      	ldrb	r3, [r7, #3]
 800d512:	2b08      	cmp	r3, #8
 800d514:	d161      	bne.n	800d5da <vTCPStateChange+0x296>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 800d516:	2300      	movs	r3, #0
 800d518:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 800d51a:	2300      	movs	r3, #0
 800d51c:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 800d51e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	429a      	cmp	r2, r3
 800d524:	d108      	bne.n	800d538 <vTCPStateChange+0x1f4>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d003      	beq.n	800d538 <vTCPStateChange+0x1f4>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d536:	657b      	str	r3, [r7, #84]	@ 0x54
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 800d538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d007      	beq.n	800d552 <vTCPStateChange+0x20e>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 800d542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d101      	bne.n	800d552 <vTCPStateChange+0x20e>
            {
                xMustClear = pdTRUE;
 800d54e:	2301      	movs	r3, #1
 800d550:	643b      	str	r3, [r7, #64]	@ 0x40
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 800d552:	f007 fca7 	bl	8014ea4 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d55c:	f003 0304 	and.w	r3, r3, #4
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b00      	cmp	r3, #0
 800d564:	d107      	bne.n	800d576 <vTCPStateChange+0x232>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d56c:	f003 0302 	and.w	r3, r3, #2
 800d570:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d572:	2b00      	cmp	r3, #0
 800d574:	d02f      	beq.n	800d5d6 <vTCPStateChange+0x292>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d57c:	f003 0308 	and.w	r3, r3, #8
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b00      	cmp	r3, #0
 800d584:	d127      	bne.n	800d5d6 <vTCPStateChange+0x292>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7ff fea4 	bl	800d2d4 <vTCPRemoveTCPChild>
 800d58c:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d594:	f023 0304 	bic.w	r3, r3, #4
 800d598:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d5a2:	f023 0302 	bic.w	r3, r3, #2
 800d5a6:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 800d5aa:	f7fc ffa4 	bl	800a4f6 <xIsCallingFromIPTask>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10d      	bne.n	800d5d0 <vTCPStateChange+0x28c>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b8:	b672      	cpsid	i
 800d5ba:	f383 8811 	msr	BASEPRI, r3
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	b662      	cpsie	i
 800d5c8:	637b      	str	r3, [r7, #52]	@ 0x34
}
 800d5ca:	bf00      	nop
 800d5cc:	bf00      	nop
 800d5ce:	e7fd      	b.n	800d5cc <vTCPStateChange+0x288>
                        vSocketCloseNextTime( pxSocket );
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7ff fdb1 	bl	800d138 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 800d5d6:	f007 fc73 	bl	8014ec0 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 800d5da:	78fb      	ldrb	r3, [r7, #3]
 800d5dc:	2b08      	cmp	r3, #8
 800d5de:	d115      	bne.n	800d60c <vTCPStateChange+0x2c8>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d5e6:	f003 0308 	and.w	r3, r3, #8
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00d      	beq.n	800d60c <vTCPStateChange+0x2c8>
        {
            switch( xPreviousState )
 800d5f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d5f4:	3b03      	subs	r3, #3
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d807      	bhi.n	800d60a <vTCPStateChange+0x2c6>
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff fdb4 	bl	800d170 <vSocketListenNextTime>
                    break;
 800d608:	e000      	b.n	800d60c <vTCPStateChange+0x2c8>

                default:
                    /* Nothing to do. */
                    break;
 800d60a:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7ff fe3b 	bl	800d288 <prvTCPTouchSocket>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 800d612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d005      	beq.n	800d624 <vTCPStateChange+0x2e0>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 800d618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d61a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d61e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d620:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d622:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 800d624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <vTCPStateChange+0x2ec>
        {
            vSocketWakeUpUser( xParent );
 800d62a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d62c:	f7fe fe22 	bl	800c274 <vSocketWakeUpUser>
        }
    }
 800d630:	bf00      	nop
 800d632:	3758      	adds	r7, #88	@ 0x58
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d640:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800d644:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d13d      	bne.n	800d6cc <prvTCPNextTimeout+0x94>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800d656:	f003 0308 	and.w	r3, r3, #8
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d01a      	beq.n	800d696 <prvTCPNextTimeout+0x5e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d666:	2b02      	cmp	r3, #2
 800d668:	d811      	bhi.n	800d68e <prvTCPNextTimeout+0x56>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d670:	2b00      	cmp	r3, #0
 800d672:	d102      	bne.n	800d67a <prvTCPNextTimeout+0x42>
                    {
                        ulDelayMs = 0U;
 800d674:	2300      	movs	r3, #0
 800d676:	60bb      	str	r3, [r7, #8]
 800d678:	e010      	b.n	800d69c <prvTCPNextTimeout+0x64>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d680:	3b01      	subs	r3, #1
 800d682:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800d686:	fa02 f303 	lsl.w	r3, r2, r3
 800d68a:	60bb      	str	r3, [r7, #8]
 800d68c:	e006      	b.n	800d69c <prvTCPNextTimeout+0x64>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 800d68e:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 800d692:	60bb      	str	r3, [r7, #8]
 800d694:	e002      	b.n	800d69c <prvTCPNextTimeout+0x64>
                }
            }
            else
            {
                /* Still in the Resolution phase: check every half second. */
                ulDelayMs = 500U;
 800d696:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d69a:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d6a2:	fb02 f303 	mul.w	r3, r2, r3
 800d6a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d6aa:	d30a      	bcc.n	800d6c2 <prvTCPNextTimeout+0x8a>
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d6b2:	fb02 f303 	mul.w	r3, r2, r3
 800d6b6:	4a23      	ldr	r2, [pc, #140]	@ (800d744 <prvTCPNextTimeout+0x10c>)
 800d6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6bc:	099b      	lsrs	r3, r3, #6
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	e000      	b.n	800d6c4 <prvTCPNextTimeout+0x8c>
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 800d6ca:	e033      	b.n	800d734 <prvTCPNextTimeout+0xfc>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d12e      	bne.n	800d734 <prvTCPNextTimeout+0xfc>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d6e2:	f107 0208 	add.w	r2, r7, #8
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	f003 f8ad 	bl	8010846 <xTCPWindowTxHasData>
 800d6ec:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d108      	bne.n	800d706 <prvTCPNextTimeout+0xce>
            {
                if( xResult != ( BaseType_t ) 0 )
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <prvTCPNextTimeout+0xc8>
                {
                    ulDelayMs = 1U;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	60bb      	str	r3, [r7, #8]
 800d6fe:	e002      	b.n	800d706 <prvTCPNextTimeout+0xce>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d700:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800d704:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d70c:	fb02 f303 	mul.w	r3, r2, r3
 800d710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d714:	d30a      	bcc.n	800d72c <prvTCPNextTimeout+0xf4>
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d71c:	fb02 f303 	mul.w	r3, r2, r3
 800d720:	4a08      	ldr	r2, [pc, #32]	@ (800d744 <prvTCPNextTimeout+0x10c>)
 800d722:	fba2 2303 	umull	r2, r3, r2, r3
 800d726:	099b      	lsrs	r3, r3, #6
 800d728:	b29a      	uxth	r2, r3
 800d72a:	e000      	b.n	800d72e <prvTCPNextTimeout+0xf6>
 800d72c:	2201      	movs	r2, #1
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
    }
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	10624dd3 	.word	0x10624dd3

0800d748 <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 800d748:	b4b0      	push	{r4, r5, r7}
 800d74a:	b08b      	sub	sp, #44	@ 0x2c
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800d756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d758:	899b      	ldrh	r3, [r3, #12]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800d760:	4293      	cmp	r3, r2
 800d762:	d10e      	bne.n	800d782 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	330e      	adds	r3, #14
 800d768:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 800d76a:	2301      	movs	r3, #1
 800d76c:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	3308      	adds	r3, #8
 800d772:	f107 0408 	add.w	r4, r7, #8
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	6859      	ldr	r1, [r3, #4]
 800d77a:	689a      	ldr	r2, [r3, #8]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d780:	e007      	b.n	800d792 <xGetSourceAddrFromBuffer+0x4a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	330e      	adds	r3, #14
 800d786:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 800d788:	2300      	movs	r3, #0
 800d78a:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	461d      	mov	r5, r3
 800d796:	f107 0408 	add.w	r4, r7, #8
 800d79a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d79c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	602b      	str	r3, [r5, #0]
    }
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	372c      	adds	r7, #44	@ 0x2c
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bcb0      	pop	{r4, r5, r7}
 800d7aa:	4770      	bx	lr

0800d7ac <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800d7ac:	b5b0      	push	{r4, r5, r7, lr}
 800d7ae:	b09a      	sub	sp, #104	@ 0x68
 800d7b0:	af04      	add	r7, sp, #16
 800d7b2:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	657b      	str	r3, [r7, #84]	@ 0x54
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10d      	bne.n	800d7da <xProcessReceivedTCPPacket+0x2e>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c2:	b672      	cpsid	i
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	b662      	cpsie	i
 800d7d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
 800d7d8:	e7fd      	b.n	800d7d6 <xProcessReceivedTCPPacket+0x2a>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10d      	bne.n	800d7fe <xProcessReceivedTCPPacket+0x52>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e6:	b672      	cpsid	i
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	b662      	cpsie	i
 800d7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d7f8:	bf00      	nop
 800d7fa:	bf00      	nop
 800d7fc:	e7fd      	b.n	800d7fa <xProcessReceivedTCPPacket+0x4e>

        pxNetworkBuffer = pxDescriptor;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	623b      	str	r3, [r7, #32]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 800d802:	6a3b      	ldr	r3, [r7, #32]
 800d804:	4618      	mov	r0, r3
 800d806:	f7fc fb51 	bl	8009eac <uxIPHeaderSizePacket>
 800d80a:	4603      	mov	r3, r0
 800d80c:	330e      	adds	r3, #14
 800d80e:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 800d810:	6a3b      	ldr	r3, [r7, #32]
 800d812:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d816:	3314      	adds	r3, #20
 800d818:	429a      	cmp	r2, r3
 800d81a:	d202      	bcs.n	800d822 <xProcessReceivedTCPPacket+0x76>
        {
            xResult = pdFAIL;
 800d81c:	2300      	movs	r3, #0
 800d81e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d820:	e14a      	b.n	800dab8 <xProcessReceivedTCPPacket+0x30c>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 800d826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d828:	4413      	add	r3, r2
 800d82a:	64bb      	str	r3, [r7, #72]	@ 0x48

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d82c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d82e:	7b5b      	ldrb	r3, [r3, #13]
 800d830:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 800d834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d836:	789a      	ldrb	r2, [r3, #2]
 800d838:	78db      	ldrb	r3, [r3, #3]
 800d83a:	021b      	lsls	r3, r3, #8
 800d83c:	4313      	orrs	r3, r2
 800d83e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 800d842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d844:	781a      	ldrb	r2, [r3, #0]
 800d846:	785b      	ldrb	r3, [r3, #1]
 800d848:	021b      	lsls	r3, r3, #8
 800d84a:	4313      	orrs	r3, r2
 800d84c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d854:	f107 030c 	add.w	r3, r7, #12
 800d858:	4611      	mov	r1, r2
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7ff ff74 	bl	800d748 <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 800d860:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 800d864:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d868:	9303      	str	r3, [sp, #12]
 800d86a:	466c      	mov	r4, sp
 800d86c:	f107 0314 	add.w	r3, r7, #20
 800d870:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d878:	f107 030c 	add.w	r3, r7, #12
 800d87c:	cb0c      	ldmia	r3, {r2, r3}
 800d87e:	4629      	mov	r1, r5
 800d880:	2000      	movs	r0, #0
 800d882:	f7fe fe2d 	bl	800c4e0 <pxTCPSocketLookup>
 800d886:	6538      	str	r0, [r7, #80]	@ 0x50

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 800d888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d008      	beq.n	800d8a0 <xProcessReceivedTCPPacket+0xf4>
 800d88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d890:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d894:	4618      	mov	r0, r3
 800d896:	f000 fbe4 	bl	800e062 <prvTCPSocketIsActive>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d112      	bne.n	800d8c6 <xProcessReceivedTCPPacket+0x11a>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800d8a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8a4:	f003 031f 	and.w	r3, r3, #31
 800d8a8:	2b10      	cmp	r3, #16
 800d8aa:	d009      	beq.n	800d8c0 <xProcessReceivedTCPPacket+0x114>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800d8ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8b0:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d103      	bne.n	800d8c0 <xProcessReceivedTCPPacket+0x114>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f001 ff7a 	bl	800f7b4 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8c4:	e09c      	b.n	800da00 <xProcessReceivedTCPPacket+0x254>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800d8c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800d8ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8d0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d11e      	bne.n	800d916 <xProcessReceivedTCPPacket+0x16a>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800d8d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8dc:	f003 031f 	and.w	r3, r3, #31
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d00c      	beq.n	800d8fe <xProcessReceivedTCPPacket+0x152>
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800d8e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8e8:	f003 0304 	and.w	r3, r3, #4
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d103      	bne.n	800d8f8 <xProcessReceivedTCPPacket+0x14c>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f001 ff5e 	bl	800f7b4 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8fc:	e080      	b.n	800da00 <xProcessReceivedTCPPacket+0x254>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	4619      	mov	r1, r3
 800d902:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d904:	f000 ffd2 	bl	800e8ac <prvHandleListen>
 800d908:	6538      	str	r0, [r7, #80]	@ 0x50

                        if( pxSocket == NULL )
 800d90a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d177      	bne.n	800da00 <xProcessReceivedTCPPacket+0x254>
                        {
                            xResult = pdFAIL;
 800d910:	2300      	movs	r3, #0
 800d912:	657b      	str	r3, [r7, #84]	@ 0x54
 800d914:	e074      	b.n	800da00 <xProcessReceivedTCPPacket+0x254>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800d916:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d91a:	f003 0304 	and.w	r3, r3, #4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d046      	beq.n	800d9b0 <xProcessReceivedTCPPacket+0x204>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800d922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d924:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d10e      	bne.n	800d94a <xProcessReceivedTCPPacket+0x19e>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d92c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	637b      	str	r3, [r7, #52]	@ 0x34

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 800d932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d934:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800d938:	3301      	adds	r3, #1
 800d93a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d134      	bne.n	800d9aa <xProcessReceivedTCPPacket+0x1fe>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800d940:	2100      	movs	r1, #0
 800d942:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d944:	f7ff fcfe 	bl	800d344 <vTCPStateChange>
 800d948:	e02f      	b.n	800d9aa <xProcessReceivedTCPPacket+0x1fe>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	63bb      	str	r3, [r7, #56]	@ 0x38

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800d950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d952:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800d956:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d958:	429a      	cmp	r2, r3
 800d95a:	d104      	bne.n	800d966 <xProcessReceivedTCPPacket+0x1ba>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800d95c:	2100      	movs	r1, #0
 800d95e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d960:	f7ff fcf0 	bl	800d344 <vTCPStateChange>
 800d964:	e021      	b.n	800d9aa <xProcessReceivedTCPPacket+0x1fe>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 800d966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d968:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800d96c:	4619      	mov	r1, r3
 800d96e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d970:	f002 fa11 	bl	800fd96 <xSequenceGreaterThan>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d017      	beq.n	800d9aa <xProcessReceivedTCPPacket+0x1fe>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800d97a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d97c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 800d980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d982:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800d986:	4413      	add	r3, r2
 800d988:	4619      	mov	r1, r3
 800d98a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d98c:	f002 f9ed 	bl	800fd6a <xSequenceLessThan>
 800d990:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 800d992:	2b00      	cmp	r3, #0
 800d994:	d009      	beq.n	800d9aa <xProcessReceivedTCPPacket+0x1fe>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
 800d996:	6a38      	ldr	r0, [r7, #32]
 800d998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d99a:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800d99e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	f001 fee7 	bl	800f778 <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	657b      	str	r3, [r7, #84]	@ 0x54
 800d9ae:	e027      	b.n	800da00 <xProcessReceivedTCPPacket+0x254>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 800d9b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d9b4:	f003 031f 	and.w	r3, r3, #31
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d107      	bne.n	800d9cc <xProcessReceivedTCPPacket+0x220>
 800d9bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9be:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d902      	bls.n	800d9cc <xProcessReceivedTCPPacket+0x220>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d9ca:	e019      	b.n	800da00 <xProcessReceivedTCPPacket+0x254>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800d9cc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d9ce:	f7fc fa87 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	330e      	adds	r3, #14
 800d9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 800d9d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9da:	33a8      	adds	r3, #168	@ 0xa8
 800d9dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9de:	4413      	add	r3, r2
 800d9e0:	1d98      	adds	r0, r3, #6
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e8:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 800d9ea:	2214      	movs	r2, #20
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	f009 fd6a 	bl	80174c6 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 800d9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9f4:	330d      	adds	r3, #13
 800d9f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9f8:	4413      	add	r3, r2
 800d9fa:	2210      	movs	r2, #16
 800d9fc:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
                    }
                }
            }

            if( xResult != pdFAIL )
 800da00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da02:	2b00      	cmp	r3, #0
 800da04:	d058      	beq.n	800dab8 <xProcessReceivedTCPPacket+0x30c>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 800da06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10d      	bne.n	800da28 <xProcessReceivedTCPPacket+0x27c>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da10:	b672      	cpsid	i
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	b662      	cpsie	i
 800da20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da22:	bf00      	nop
 800da24:	bf00      	nop
 800da26:	e7fd      	b.n	800da24 <xProcessReceivedTCPPacket+0x278>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800da28:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800da2a:	f7ff fc2d 	bl	800d288 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800da2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da30:	7b1b      	ldrb	r3, [r3, #12]
 800da32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da36:	2b50      	cmp	r3, #80	@ 0x50
 800da38:	d905      	bls.n	800da46 <xProcessReceivedTCPPacket+0x29a>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	4619      	mov	r1, r3
 800da3e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800da40:	f000 f87e 	bl	800db40 <prvCheckOptions>
 800da44:	6578      	str	r0, [r7, #84]	@ 0x54
                }

                if( xResult != pdFAIL )
 800da46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d035      	beq.n	800dab8 <xProcessReceivedTCPPacket+0x30c>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800da4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da4e:	7b9a      	ldrb	r2, [r3, #14]
 800da50:	7bdb      	ldrb	r3, [r3, #15]
 800da52:	021b      	lsls	r3, r3, #8
 800da54:	4313      	orrs	r3, r2
 800da56:	867b      	strh	r3, [r7, #50]	@ 0x32
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800da58:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800da5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da5c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800da60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da64:	f003 0302 	and.w	r3, r3, #2
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10a      	bne.n	800da82 <xProcessReceivedTCPPacket+0x2d6>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800da6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da6e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800da72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da74:	f892 210a 	ldrb.w	r2, [r2, #266]	@ 0x10a
 800da78:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800da7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da7e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800da82:	f107 0320 	add.w	r3, r7, #32
 800da86:	4619      	mov	r1, r3
 800da88:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800da8a:	f000 fdf7 	bl	800e67c <prvTCPHandleState>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	dd05      	ble.n	800daa0 <xProcessReceivedTCPPacket+0x2f4>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800da94:	f107 0320 	add.w	r3, r7, #32
 800da98:	4619      	mov	r1, r3
 800da9a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800da9c:	f001 f905 	bl	800ecaa <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 800daa0:	6a3b      	ldr	r3, [r7, #32]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d005      	beq.n	800dab2 <xProcessReceivedTCPPacket+0x306>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800daa6:	6a3b      	ldr	r3, [r7, #32]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f003 fd07 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	623b      	str	r3, [r7, #32]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 800dab2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800dab4:	f7ff fdc0 	bl	800d638 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800dab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    }
 800daba:	4618      	mov	r0, r3
 800dabc:	3758      	adds	r7, #88	@ 0x58
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dac4 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800dac4:	b480      	push	{r7}
 800dac6:	b089      	sub	sp, #36	@ 0x24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800dad0:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800dad2:	2300      	movs	r3, #0
 800dad4:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800dad6:	4b18      	ldr	r3, [pc, #96]	@ (800db38 <xTCPCheckNewClient+0x74>)
 800dad8:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800dada:	4b18      	ldr	r3, [pc, #96]	@ (800db3c <xTCPCheckNewClient+0x78>)
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	61fb      	str	r3, [r7, #28]
 800dae0:	e01e      	b.n	800db20 <xTCPCheckNewClient+0x5c>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	697a      	ldr	r2, [r7, #20]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d116      	bne.n	800db1a <xTCPCheckNewClient+0x56>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800daf8:	2b06      	cmp	r3, #6
 800dafa:	d10e      	bne.n	800db1a <xTCPCheckNewClient+0x56>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800db02:	f003 0302 	and.w	r3, r3, #2
 800db06:	b2db      	uxtb	r3, r3
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d006      	beq.n	800db1a <xTCPCheckNewClient+0x56>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
                    xResult = pdTRUE;
 800db14:	2301      	movs	r3, #1
 800db16:	61bb      	str	r3, [r7, #24]
                    break;
 800db18:	e006      	b.n	800db28 <xTCPCheckNewClient+0x64>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 800db20:	69fa      	ldr	r2, [r7, #28]
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	429a      	cmp	r2, r3
 800db26:	d1dc      	bne.n	800dae2 <xTCPCheckNewClient+0x1e>
                }
            }
        }

        return xResult;
 800db28:	69bb      	ldr	r3, [r7, #24]
    }
 800db2a:	4618      	mov	r0, r3
 800db2c:	3724      	adds	r7, #36	@ 0x24
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	200026a4 	.word	0x200026a4
 800db3c:	2000269c 	.word	0x2000269c

0800db40 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800db40:	b580      	push	{r7, lr}
 800db42:	b08c      	sub	sp, #48	@ 0x30
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 800db4a:	6838      	ldr	r0, [r7, #0]
 800db4c:	f7fc f9ae 	bl	8009eac <uxIPHeaderSizePacket>
 800db50:	4603      	mov	r3, r0
 800db52:	330e      	adds	r3, #14
 800db54:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	4413      	add	r3, r2
 800db5e:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 800db60:	2301      	movs	r3, #1
 800db62:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	3314      	adds	r3, #20
 800db68:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	3314      	adds	r3, #20
 800db72:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	7b1b      	ldrb	r3, [r3, #12]
 800db78:	2b50      	cmp	r3, #80	@ 0x50
 800db7a:	d93f      	bls.n	800dbfc <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	7b1b      	ldrb	r3, [r3, #12]
 800db80:	091b      	lsrs	r3, r3, #4
 800db82:	b2db      	uxtb	r3, r3
 800db84:	3b05      	subs	r3, #5
 800db86:	b2db      	uxtb	r3, r3
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
 800db8e:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	429a      	cmp	r2, r3
 800db98:	d230      	bcs.n	800dbfc <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	6a3a      	ldr	r2, [r7, #32]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d829      	bhi.n	800dbfc <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	7b5b      	ldrb	r3, [r3, #13]
 800dbac:	f003 0302 	and.w	r3, r3, #2
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dbb8:	e001      	b.n	800dbbe <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d018      	beq.n	800dbf6 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800dbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	6a39      	ldr	r1, [r7, #32]
 800dbca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbcc:	f000 f81b 	bl	800dc06 <prvSingleStepTCPHeaderOptions>
 800dbd0:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	da02      	bge.n	800dbde <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 800dbdc:	e00e      	b.n	800dbfc <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00a      	beq.n	800dbfa <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	6a3a      	ldr	r2, [r7, #32]
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbf0:	4413      	add	r3, r2
 800dbf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 800dbf4:	e7e3      	b.n	800dbbe <prvCheckOptions+0x7e>
                            break;
 800dbf6:	bf00      	nop
 800dbf8:	e000      	b.n	800dbfc <prvCheckOptions+0xbc>
                            break;
 800dbfa:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3730      	adds	r7, #48	@ 0x30
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b08a      	sub	sp, #40	@ 0x28
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	60f8      	str	r0, [r7, #12]
 800dc0e:	60b9      	str	r1, [r7, #8]
 800dc10:	607a      	str	r2, [r7, #4]
 800dc12:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800dc22:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dc24:	2300      	movs	r3, #0
 800dc26:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d102      	bne.n	800dc36 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	61fb      	str	r3, [r7, #28]
 800dc34:	e0cc      	b.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d102      	bne.n	800dc44 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	61fb      	str	r3, [r7, #28]
 800dc42:	e0c5      	b.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d803      	bhi.n	800dc52 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 800dc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4e:	61fb      	str	r3, [r7, #28]
 800dc50:	e0be      	b.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d128      	bne.n	800dcac <prvSingleStepTCPHeaderOptions+0xa6>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d904      	bls.n	800dc6a <prvSingleStepTCPHeaderOptions+0x64>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	3301      	adds	r3, #1
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	d003      	beq.n	800dc72 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 800dc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6e:	61fb      	str	r3, [r7, #28]
 800dc70:	e0ae      	b.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d016      	beq.n	800dca6 <prvSingleStepTCPHeaderOptions+0xa0>
                    {
                        /* From RFC7323 - section 2.3, we should limit the WSopt not larger than 14. */
                        if( pucPtr[ 2 ] > tcpTCP_OPT_WSOPT_MAXIMUM_VALUE )
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3302      	adds	r3, #2
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	2b0e      	cmp	r3, #14
 800dc80:	d904      	bls.n	800dc8c <prvSingleStepTCPHeaderOptions+0x86>
                        {
                            FreeRTOS_debug_printf( ( "The WSopt(%u) from SYN packet is larger than maximum value.", pucPtr[ 2 ] ) );
                            pxSocket->u.xTCP.ucPeerWinScaleFactor = tcpTCP_OPT_WSOPT_MAXIMUM_VALUE;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	220e      	movs	r2, #14
 800dc86:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
 800dc8a:	e005      	b.n	800dc98 <prvSingleStepTCPHeaderOptions+0x92>
                        }
                        else
                        {
                            pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	3302      	adds	r3, #2
 800dc90:	781a      	ldrb	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
                        }

                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800dc9e:	f043 0310 	orr.w	r3, r3, #16
 800dca2:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 800dca6:	2303      	movs	r3, #3
 800dca8:	61fb      	str	r3, [r7, #28]
 800dcaa:	e091      	b.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d155      	bne.n	800dd60 <prvSingleStepTCPHeaderOptions+0x15a>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	2b03      	cmp	r3, #3
 800dcb8:	d904      	bls.n	800dcc4 <prvSingleStepTCPHeaderOptions+0xbe>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	2b04      	cmp	r3, #4
 800dcc2:	d003      	beq.n	800dccc <prvSingleStepTCPHeaderOptions+0xc6>
            {
                lIndex = -1;
 800dcc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc8:	61fb      	str	r3, [r7, #28]
 800dcca:	e081      	b.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3302      	adds	r3, #2
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fc fe84 	bl	800a9de <usChar2u16>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800dce0:	461a      	mov	r2, r3
 800dce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d007      	beq.n	800dcf8 <prvSingleStepTCPHeaderOptions+0xf2>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800dce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d104      	bne.n	800dcf8 <prvSingleStepTCPHeaderOptions+0xf2>
                    {
                        lIndex = -1;
 800dcee:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf2:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	61bb      	str	r3, [r7, #24]
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d168      	bne.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd00:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dd04:	d202      	bcs.n	800dd0c <prvSingleStepTCPHeaderOptions+0x106>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 800dd06:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800dd0a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800dd12:	461a      	mov	r2, r3
 800dd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d21f      	bcs.n	800dd5a <prvSingleStepTCPHeaderOptions+0x154>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800dd20:	f043 0301 	orr.w	r3, r3, #1
 800dd24:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	685a      	ldr	r2, [r3, #4]
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd34:	fb03 f202 	mul.w	r2, r3, r2
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 800dd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 800dd5a:	2304      	movs	r3, #4
 800dd5c:	61fb      	str	r3, [r7, #28]
 800dd5e:	e037      	b.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3301      	adds	r3, #1
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800dd6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d904      	bls.n	800dd80 <prvSingleStepTCPHeaderOptions+0x17a>
 800dd76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d203      	bcs.n	800dd88 <prvSingleStepTCPHeaderOptions+0x182>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 800dd80:	f04f 33ff 	mov.w	r3, #4294967295
 800dd84:	61fb      	str	r3, [r7, #28]
 800dd86:	e023      	b.n	800ddd0 <prvSingleStepTCPHeaderOptions+0x1ca>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	2b05      	cmp	r3, #5
 800dd8e:	d11a      	bne.n	800ddc6 <prvSingleStepTCPHeaderOptions+0x1c0>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 800dd90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dd94:	3b02      	subs	r3, #2
 800dd96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	3302      	adds	r3, #2
 800dd9e:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 800dda0:	e00d      	b.n	800ddbe <prvSingleStepTCPHeaderOptions+0x1b8>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	4619      	mov	r1, r3
 800dda8:	68f8      	ldr	r0, [r7, #12]
 800ddaa:	f000 f816 	bl	800ddda <prvReadSackOption>
                            lIndex += 8;
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	3308      	adds	r3, #8
 800ddb2:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 800ddb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ddb8:	3b08      	subs	r3, #8
 800ddba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 800ddbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ddc2:	2b07      	cmp	r3, #7
 800ddc4:	d8ed      	bhi.n	800dda2 <prvSingleStepTCPHeaderOptions+0x19c>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 800ddc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ddca:	69fa      	ldr	r2, [r7, #28]
 800ddcc:	4413      	add	r3, r2
 800ddce:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 800ddd0:	69fb      	ldr	r3, [r7, #28]
    }
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3728      	adds	r7, #40	@ 0x28
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b08a      	sub	sp, #40	@ 0x28
 800ddde:	af02      	add	r7, sp, #8
 800dde0:	60f8      	str	r0, [r7, #12]
 800dde2:	60b9      	str	r1, [r7, #8]
 800dde4:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	4413      	add	r3, r2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fc fddb 	bl	800a9a8 <ulChar2u32>
 800ddf2:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fc fdd3 	bl	800a9a8 <ulChar2u32>
 800de02:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800de0a:	69ba      	ldr	r2, [r7, #24]
 800de0c:	69f9      	ldr	r1, [r7, #28]
 800de0e:	4618      	mov	r0, r3
 800de10:	f002 ffb2 	bl	8010d78 <ulTCPWindowTxSack>
 800de14:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d024      	beq.n	800de6a <prvReadSackOption+0x90>
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d021      	beq.n	800de6a <prvReadSackOption+0x90>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800de2c:	2300      	movs	r3, #0
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2200      	movs	r2, #0
 800de34:	2100      	movs	r1, #0
 800de36:	f7ff f90c 	bl	800d052 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f043 0202 	orr.w	r2, r3, #2
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de4a:	f003 0302 	and.w	r3, r3, #2
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d005      	beq.n	800de5e <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	601a      	str	r2, [r3, #0]
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800de64:	6979      	ldr	r1, [r7, #20]
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800de6a:	bf00      	nop
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 800de72:	b590      	push	{r4, r7, lr}
 800de74:	b08d      	sub	sp, #52	@ 0x34
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7fc f813 	bl	8009eac <uxIPHeaderSizePacket>
 800de86:	4603      	mov	r3, r0
 800de88:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800de8a:	4423      	add	r3, r4
 800de8c:	627b      	str	r3, [r7, #36]	@ 0x24
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800de8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de90:	623b      	str	r3, [r7, #32]
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f7fc f80a 	bl	8009eac <uxIPHeaderSizePacket>
 800de98:	61f8      	str	r0, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800de9e:	6a3b      	ldr	r3, [r7, #32]
 800dea0:	7b1b      	ldrb	r3, [r3, #12]
 800dea2:	089b      	lsrs	r3, r3, #2
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800deaa:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800deac:	7efb      	ldrb	r3, [r7, #27]
 800deae:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800deb4:	6979      	ldr	r1, [r7, #20]
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	440b      	add	r3, r1
 800deba:	330e      	adds	r3, #14
 800debc:	441a      	add	r2, r3
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec6:	62bb      	str	r3, [r7, #40]	@ 0x28
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800dec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deca:	3b0e      	subs	r3, #14
 800decc:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded2:	899b      	ldrh	r3, [r3, #12]
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800deda:	d10c      	bne.n	800def6 <prvCheckRxData+0x84>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee0:	330e      	adds	r3, #14
 800dee2:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	789a      	ldrb	r2, [r3, #2]
 800dee8:	78db      	ldrb	r3, [r3, #3]
 800deea:	021b      	lsls	r3, r3, #8
 800deec:	4313      	orrs	r3, r2
 800deee:	81fb      	strh	r3, [r7, #14]
                       lLength = ( int32_t ) usLength;
 800def0:	89fb      	ldrh	r3, [r7, #14]
 800def2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   }
                   break;
 800def4:	e002      	b.n	800defc <prvCheckRxData+0x8a>
                   break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800defa:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 800defc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800defe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df00:	429a      	cmp	r2, r3
 800df02:	dd01      	ble.n	800df08 <prvCheckRxData+0x96>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800df04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df06:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800df08:	69fa      	ldr	r2, [r7, #28]
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	4413      	add	r3, r2
 800df0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df10:	429a      	cmp	r2, r3
 800df12:	dd06      	ble.n	800df22 <prvCheckRxData+0xb0>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800df14:	69fa      	ldr	r2, [r7, #28]
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	4413      	add	r3, r2
 800df1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800df20:	e001      	b.n	800df26 <prvCheckRxData+0xb4>
        }
        else
        {
            lReceiveLength = 0;
 800df22:	2300      	movs	r3, #0
 800df24:	62bb      	str	r3, [r7, #40]	@ 0x28
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800df26:	6a3b      	ldr	r3, [r7, #32]
 800df28:	7b5b      	ldrb	r3, [r3, #13]
 800df2a:	f003 0320 	and.w	r3, r3, #32
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d011      	beq.n	800df56 <prvCheckRxData+0xe4>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	8a5b      	ldrh	r3, [r3, #18]
 800df36:	b29b      	uxth	r3, r3
 800df38:	60bb      	str	r3, [r7, #8]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	441a      	add	r2, r3
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df4a:	f7fc fc4f 	bl	800a7ec <FreeRTOS_min_int32>
 800df4e:	4602      	mov	r2, r0
 800df50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df52:	1a9b      	subs	r3, r3, r2
 800df54:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        return ( BaseType_t ) lReceiveLength;
 800df56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800df58:	4618      	mov	r0, r3
 800df5a:	3734      	adds	r7, #52	@ 0x34
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd90      	pop	{r4, r7, pc}

0800df60 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 800df60:	b580      	push	{r7, lr}
 800df62:	b092      	sub	sp, #72	@ 0x48
 800df64:	af02      	add	r7, sp, #8
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
 800df6c:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7fb ff9c 	bl	8009eac <uxIPHeaderSizePacket>
 800df74:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df7c:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 800df7e:	4413      	add	r3, r2
 800df80:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800df82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df84:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800df8c:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800df9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 800dfa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d052      	beq.n	800e04c <prvStoreRxData+0xec>
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800dfac:	2b03      	cmp	r3, #3
 800dfae:	d94d      	bls.n	800e04c <prvStoreRxData+0xec>
        {
            uint32_t ulSkipCount = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d007      	beq.n	800dfce <prvStoreRxData+0x6e>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe ff04 	bl	800cdd2 <uxStreamBufferGetSpace>
 800dfca:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800dfcc:	e003      	b.n	800dfd6 <prvStoreRxData+0x76>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 800dfd6:	f107 0310 	add.w	r3, r7, #16
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfe0:	69f9      	ldr	r1, [r7, #28]
 800dfe2:	6a38      	ldr	r0, [r7, #32]
 800dfe4:	f002 faa8 	bl	8010538 <lTCPWindowRxCheck>
 800dfe8:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	db1b      	blt.n	800e028 <prvStoreRxData+0xc8>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d007      	beq.n	800e006 <prvStoreRxData+0xa6>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	4413      	add	r3, r2
 800e004:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 800e006:	69b9      	ldr	r1, [r7, #24]
 800e008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e00a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f7fe fbc6 	bl	800c79e <lTCPAddRxdata>
 800e012:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 800e014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d005      	beq.n	800e028 <prvStoreRxData+0xc8>
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f001 fbc9 	bl	800f7b4 <prvTCPSendReset>
                    xResult = -1;
 800e022:	f04f 33ff 	mov.w	r3, #4294967295
 800e026:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 800e028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d113      	bne.n	800e056 <prvStoreRxData+0xf6>
 800e02e:	6a3b      	ldr	r3, [r7, #32]
 800e030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00f      	beq.n	800e056 <prvStoreRxData+0xf6>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e03a:	2200      	movs	r2, #0
 800e03c:	2100      	movs	r1, #0
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f7fe fbad 	bl	800c79e <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 800e044:	6a3b      	ldr	r3, [r7, #32]
 800e046:	2200      	movs	r2, #0
 800e048:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 800e04a:	e004      	b.n	800e056 <prvStoreRxData+0xf6>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800e04c:	6a3b      	ldr	r3, [r7, #32]
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e054:	e000      	b.n	800e058 <prvStoreRxData+0xf8>
        {
 800e056:	bf00      	nop
        }

        return xResult;
 800e058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 800e05a:	4618      	mov	r0, r3
 800e05c:	3740      	adds	r7, #64	@ 0x40
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 800e062:	b480      	push	{r7}
 800e064:	b085      	sub	sp, #20
 800e066:	af00      	add	r7, sp, #0
 800e068:	4603      	mov	r3, r0
 800e06a:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	2b0b      	cmp	r3, #11
 800e070:	bf8c      	ite	hi
 800e072:	2201      	movhi	r2, #1
 800e074:	2200      	movls	r2, #0
 800e076:	b2d2      	uxtb	r2, r2
 800e078:	2a00      	cmp	r2, #0
 800e07a:	d10f      	bne.n	800e09c <prvTCPSocketIsActive+0x3a>
 800e07c:	f640 3281 	movw	r2, #2945	@ 0xb81
 800e080:	fa22 f303 	lsr.w	r3, r2, r3
 800e084:	f003 0301 	and.w	r3, r3, #1
 800e088:	2b00      	cmp	r3, #0
 800e08a:	bf14      	ite	ne
 800e08c:	2301      	movne	r3, #1
 800e08e:	2300      	moveq	r3, #0
 800e090:	b2db      	uxtb	r3, r3
 800e092:	2b00      	cmp	r3, #0
 800e094:	d002      	beq.n	800e09c <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800e096:	2300      	movs	r3, #0
 800e098:	60fb      	str	r3, [r7, #12]
                break;
 800e09a:	e002      	b.n	800e0a2 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800e09c:	2301      	movs	r3, #1
 800e09e:	60fb      	str	r3, [r7, #12]
                break;
 800e0a0:	bf00      	nop
        }

        return xResult;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
    }
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3714      	adds	r7, #20
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e0be:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800e0c0:	7cfb      	ldrb	r3, [r7, #19]
 800e0c2:	2b08      	cmp	r3, #8
 800e0c4:	d00b      	beq.n	800e0de <prvTCPStatusAgeCheck+0x2e>
 800e0c6:	2b08      	cmp	r3, #8
 800e0c8:	dc0c      	bgt.n	800e0e4 <prvTCPStatusAgeCheck+0x34>
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	dc02      	bgt.n	800e0d4 <prvTCPStatusAgeCheck+0x24>
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	da05      	bge.n	800e0de <prvTCPStatusAgeCheck+0x2e>
 800e0d2:	e007      	b.n	800e0e4 <prvTCPStatusAgeCheck+0x34>
 800e0d4:	2b05      	cmp	r3, #5
 800e0d6:	d105      	bne.n	800e0e4 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	617b      	str	r3, [r7, #20]
                    break;
 800e0dc:	e005      	b.n	800e0ea <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	617b      	str	r3, [r7, #20]
                    break;
 800e0e2:	e002      	b.n	800e0ea <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	617b      	str	r3, [r7, #20]
                    break;
 800e0e8:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d01b      	beq.n	800e128 <prvTCPStatusAgeCheck+0x78>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800e0f0:	f006 ff86 	bl	8015000 <xTaskGetTickCount>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800e106:	4293      	cmp	r3, r2
 800e108:	d90e      	bls.n	800e128 <prvTCPStatusAgeCheck+0x78>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e10a:	2108      	movs	r1, #8
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff f919 	bl	800d344 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e118:	f003 0304 	and.w	r3, r3, #4
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d002      	beq.n	800e128 <prvTCPStatusAgeCheck+0x78>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 800e122:	f04f 33ff 	mov.w	r3, #4294967295
 800e126:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800e128:	697b      	ldr	r3, [r7, #20]
        }
 800e12a:	4618      	mov	r0, r3
 800e12c:	3718      	adds	r7, #24
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e132:	b590      	push	{r4, r7, lr}
 800e134:	b089      	sub	sp, #36	@ 0x24
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
 800e13a:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e140:	6838      	ldr	r0, [r7, #0]
 800e142:	f7fb feb3 	bl	8009eac <uxIPHeaderSizePacket>
 800e146:	4603      	mov	r3, r0
 800e148:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800e14a:	4423      	add	r3, r4
 800e14c:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e152:	2300      	movs	r3, #0
 800e154:	74fb      	strb	r3, [r7, #19]
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	7b5b      	ldrb	r3, [r3, #13]
 800e15a:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e162:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800e164:	2300      	movs	r3, #0
 800e166:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800e16e:	7cbb      	ldrb	r3, [r7, #18]
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	2b00      	cmp	r3, #0
 800e176:	d004      	beq.n	800e182 <prvTCPHandleFin+0x50>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	1c5a      	adds	r2, r3, #1
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10b      	bne.n	800e1aa <prvTCPHandleFin+0x78>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6a1a      	ldr	r2, [r3, #32]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e1a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1a4:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
 800e1a8:	e00c      	b.n	800e1c4 <prvTCPHandleFin+0x92>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d106      	bne.n	800e1c4 <prvTCPHandleFin+0x92>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800e1bc:	f043 0301 	orr.w	r3, r3, #1
 800e1c0:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800e1ca:	f003 0301 	and.w	r3, r3, #1
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10b      	bne.n	800e1ec <prvTCPHandleFin+0xba>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	2211      	movs	r2, #17
 800e1e0:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800e1e2:	210a      	movs	r1, #10
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff f8ad 	bl	800d344 <vTCPStateChange>
 800e1ea:	e023      	b.n	800e234 <prvTCPHandleFin+0x102>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f0:	1c5a      	adds	r2, r3, #1
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e1fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b00      	cmp	r3, #0
 800e204:	d103      	bne.n	800e20e <prvTCPHandleFin+0xdc>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2200      	movs	r2, #0
 800e20a:	735a      	strb	r2, [r3, #13]
 800e20c:	e012      	b.n	800e234 <prvTCPHandleFin+0x102>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800e214:	f003 0302 	and.w	r3, r3, #2
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d103      	bne.n	800e226 <prvTCPHandleFin+0xf4>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	2210      	movs	r2, #16
 800e222:	735a      	strb	r2, [r3, #13]
 800e224:	e002      	b.n	800e22c <prvTCPHandleFin+0xfa>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	2200      	movs	r2, #0
 800e22a:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e22c:	2108      	movs	r1, #8
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7ff f888 	bl	800d344 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6a1a      	ldr	r2, [r3, #32]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	7b5b      	ldrb	r3, [r3, #13]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00d      	beq.n	800e260 <prvTCPHandleFin+0x12e>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7fb fe4b 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800e24a:	4603      	mov	r3, r0
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e254:	4413      	add	r3, r2
 800e256:	b2db      	uxtb	r3, r3
 800e258:	3314      	adds	r3, #20
 800e25a:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800e25c:	7cfb      	ldrb	r3, [r7, #19]
 800e25e:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e266:	3314      	adds	r3, #20
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	731a      	strb	r2, [r3, #12]
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 800e272:	69fb      	ldr	r3, [r7, #28]
    }
 800e274:	4618      	mov	r0, r3
 800e276:	3724      	adds	r7, #36	@ 0x24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd90      	pop	{r4, r7, pc}

0800e27c <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800e27c:	b590      	push	{r4, r7, lr}
 800e27e:	b099      	sub	sp, #100	@ 0x64
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
 800e288:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f7fb fe26 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800e294:	4603      	mov	r3, r0
 800e296:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800e298:	4423      	add	r3, r4
 800e29a:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800e29c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e29e:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e2a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2aa:	7b5b      	ldrb	r3, [r3, #13]
 800e2ac:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e2b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800e2be:	2310      	movs	r3, #16
 800e2c0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800e2c4:	2317      	movs	r3, #23
 800e2c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d105      	bne.n	800e2e0 <prvHandleSynReceived+0x64>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800e2d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800e2d8:	f043 0302 	orr.w	r3, r3, #2
 800e2dc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800e2e0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800e2e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d024      	beq.n	800e33e <prvHandleSynReceived+0xc2>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e2f4:	2108      	movs	r1, #8
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f7ff f824 	bl	800d344 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800e2fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2fe:	689a      	ldr	r2, [r3, #8]
 800e300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e302:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e308:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800e30a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e30c:	7b5b      	ldrb	r3, [r3, #13]
 800e30e:	f043 0304 	orr.w	r3, r3, #4
 800e312:	b2da      	uxtb	r2, r3
 800e314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e316:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f7fb fde1 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800e31e:	4602      	mov	r2, r0
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	4413      	add	r3, r2
 800e324:	3314      	adds	r3, #20
 800e326:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e32a:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	3314      	adds	r3, #20
 800e332:	b2db      	uxtb	r3, r3
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	b2da      	uxtb	r2, r3
 800e338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e33a:	731a      	strb	r2, [r3, #12]
 800e33c:	e08c      	b.n	800e458 <prvHandleSynReceived+0x1dc>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800e344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e346:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800e34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e350:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e35a:	2b02      	cmp	r3, #2
 800e35c:	d12e      	bne.n	800e3bc <prvHandleSynReceived+0x140>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f7fb fdbe 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800e364:	4603      	mov	r3, r0
 800e366:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 800e368:	33a8      	adds	r3, #168	@ 0xa8
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	4413      	add	r3, r2
 800e36e:	3306      	adds	r3, #6
 800e370:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800e372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e374:	2210      	movs	r2, #16
 800e376:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800e378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e37a:	2210      	movs	r2, #16
 800e37c:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800e390:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e392:	f001 ff91 	bl	80102b8 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800e396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e39c:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800e39e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3a0:	1c5a      	adds	r2, r3, #1
 800e3a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3a4:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800e3a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3a8:	6a1b      	ldr	r3, [r3, #32]
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3ae:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800e3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3b4:	1c5a      	adds	r2, r3, #1
 800e3b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3b8:	635a      	str	r2, [r3, #52]	@ 0x34
 800e3ba:	e005      	b.n	800e3c8 <prvHandleSynReceived+0x14c>
            }
            else if( ulReceiveLength == 0U )
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d102      	bne.n	800e3c8 <prvHandleSynReceived+0x14c>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e3c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3c6:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800e3c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	1c5a      	adds	r2, r3, #1
 800e3ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3d0:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	7a1b      	ldrb	r3, [r3, #8]
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <prvHandleSynReceived+0x168>
 800e3e0:	200a      	movs	r0, #10
 800e3e2:	e000      	b.n	800e3e6 <prvHandleSynReceived+0x16a>
 800e3e4:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f103 0158 	add.w	r1, r3, #88	@ 0x58
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 800e3ec:	f107 0210 	add.w	r2, r7, #16
 800e3f0:	2328      	movs	r3, #40	@ 0x28
 800e3f2:	f7fd ff01 	bl	800c1f8 <FreeRTOS_inet_ntop>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d002      	beq.n	800e406 <prvHandleSynReceived+0x18a>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d014      	beq.n	800e430 <prvHandleSynReceived+0x1b4>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800e406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e408:	2210      	movs	r2, #16
 800e40a:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f7fb fd67 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800e412:	4602      	mov	r2, r0
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	4413      	add	r3, r2
 800e418:	3314      	adds	r3, #20
 800e41a:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e41c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e41e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	b2db      	uxtb	r3, r3
 800e424:	3314      	adds	r3, #20
 800e426:	b2db      	uxtb	r3, r3
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	b2da      	uxtb	r2, r3
 800e42c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e42e:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800e436:	f003 0310 	and.w	r3, r3, #16
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d107      	bne.n	800e450 <prvHandleSynReceived+0x1d4>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2200      	movs	r2, #0
 800e444:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800e450:	2105      	movs	r1, #5
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f7fe ff76 	bl	800d344 <vTCPStateChange>
        }

        return xSendLength;
 800e458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 800e45a:	4618      	mov	r0, r3
 800e45c:	3764      	adds	r7, #100	@ 0x64
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd90      	pop	{r4, r7, pc}

0800e462 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800e462:	b590      	push	{r4, r7, lr}
 800e464:	b097      	sub	sp, #92	@ 0x5c
 800e466:	af02      	add	r7, sp, #8
 800e468:	60f8      	str	r0, [r7, #12]
 800e46a:	60b9      	str	r1, [r7, #8]
 800e46c:	607a      	str	r2, [r7, #4]
 800e46e:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f7fb fd32 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800e47c:	4603      	mov	r3, r0
 800e47e:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800e480:	4423      	add	r3, r4
 800e482:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800e484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e486:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e492:	7b5b      	ldrb	r3, [r3, #13]
 800e494:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800e498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e49e:	2300      	movs	r3, #0
 800e4a0:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800e4ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4b0:	7b9a      	ldrb	r2, [r3, #14]
 800e4b2:	7bdb      	ldrb	r3, [r3, #15]
 800e4b4:	021b      	lsls	r3, r3, #8
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800e4ba:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	f892 210a 	ldrb.w	r2, [r2, #266]	@ 0x10a
 800e4ce:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 800e4d8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e4dc:	f003 0310 	and.w	r3, r3, #16
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f000 80c6 	beq.w	800e672 <prvHandleEstablished+0x210>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800e4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e4ee:	f002 fc26 	bl	8010d3e <ulTCPWindowTxAck>
 800e4f2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d027      	beq.n	800e54e <prvHandleEstablished+0xec>
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e500:	2b00      	cmp	r3, #0
 800e502:	d024      	beq.n	800e54e <prvHandleEstablished+0xec>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800e50a:	2300      	movs	r3, #0
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e510:	2200      	movs	r2, #0
 800e512:	2100      	movs	r1, #0
 800e514:	f7fe fd9d 	bl	800d052 <uxStreamBufferGet>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d017      	beq.n	800e54e <prvHandleEstablished+0xec>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f043 0202 	orr.w	r2, r3, #2
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e52e:	f003 0302 	and.w	r3, r3, #2
 800e532:	2b00      	cmp	r3, #0
 800e534:	d005      	beq.n	800e542 <prvHandleEstablished+0xe0>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	601a      	str	r2, [r3, #0]
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <prvHandleEstablished+0xfc>
            {
                prvTCPAddTxData( pxSocket );
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f000 ffbd 	bl	800f4d8 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e560:	6a1a      	ldr	r2, [r3, #32]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e56e:	f003 0320 	and.w	r3, r3, #32
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	d105      	bne.n	800e584 <prvHandleEstablished+0x122>
 800e578:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e57c:	f003 0301 	and.w	r3, r3, #1
 800e580:	2b00      	cmp	r3, #0
 800e582:	d041      	beq.n	800e608 <prvHandleEstablished+0x1a6>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 800e584:	2301      	movs	r3, #1
 800e586:	64bb      	str	r3, [r7, #72]	@ 0x48
                ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800e588:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	441a      	add	r2, r3
 800e58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e590:	691b      	ldr	r3, [r3, #16]
 800e592:	1ad3      	subs	r3, r2, r3
 800e594:	633b      	str	r3, [r7, #48]	@ 0x30
                lDistance = ( int32_t ) ulIntermediateResult;
 800e596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e598:	623b      	str	r3, [r7, #32]

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d11d      	bne.n	800e5e6 <prvHandleEstablished+0x184>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800e5aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e5ac:	f001 fd9a 	bl	80100e4 <xTCPWindowRxEmpty>
 800e5b0:	61f8      	str	r0, [r7, #28]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800e5b2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e5b4:	f002 f8ef 	bl	8010796 <xTCPWindowTxDone>
 800e5b8:	61b8      	str	r0, [r7, #24]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <prvHandleEstablished+0x164>
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10a      	bne.n	800e5dc <prvHandleEstablished+0x17a>
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	64bb      	str	r3, [r7, #72]	@ 0x48

                        /* This action is necessary to ensure proper handling of any subsequent packets that
                         * may arrive after the refused FIN packet. Note that we only update it when the sequence
                         * of FIN packet is correct. Otherwise, we wait for re-transmission. */
                        if( lDistance <= 1 )
 800e5ca:	6a3b      	ldr	r3, [r7, #32]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	dc0a      	bgt.n	800e5e6 <prvHandleEstablished+0x184>
                        {
                            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800e5d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5d2:	695b      	ldr	r3, [r3, #20]
 800e5d4:	1c5a      	adds	r2, r3, #1
 800e5d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5d8:	611a      	str	r2, [r3, #16]
                        if( lDistance <= 1 )
 800e5da:	e004      	b.n	800e5e6 <prvHandleEstablished+0x184>
                        }
                    }
                    else if( lDistance > 1 )
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	dd01      	ble.n	800e5e6 <prvHandleEstablished+0x184>
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
                                                 ( int ) lDistance,
                                                 ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                        xMayClose = pdFALSE;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 800e5e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00d      	beq.n	800e608 <prvHandleEstablished+0x1a6>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e5f2:	f043 0320 	orr.w	r3, r3, #32
 800e5f6:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4619      	mov	r1, r3
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f7ff fd96 	bl	800e132 <prvTCPHandleFin>
 800e606:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 800e608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d131      	bne.n	800e672 <prvHandleEstablished+0x210>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800e60e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e610:	2210      	movs	r2, #16
 800e612:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d01d      	beq.n	800e656 <prvHandleEstablished+0x1f4>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f7fb fc60 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800e620:	4602      	mov	r2, r0
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	4413      	add	r3, r2
 800e626:	3314      	adds	r3, #20
 800e628:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	b2db      	uxtb	r3, r3
 800e632:	3314      	adds	r3, #20
 800e634:	b2db      	uxtb	r3, r3
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	b2da      	uxtb	r2, r3
 800e63a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e63c:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d003      	beq.n	800e656 <prvHandleEstablished+0x1f4>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800e64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e654:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10a      	bne.n	800e672 <prvHandleEstablished+0x210>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800e65c:	683a      	ldr	r2, [r7, #0]
 800e65e:	68b9      	ldr	r1, [r7, #8]
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f000 fdb2 	bl	800f1ca <prvTCPPrepareSend>
 800e666:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	dd01      	ble.n	800e672 <prvHandleEstablished+0x210>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 800e672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800e674:	4618      	mov	r0, r3
 800e676:	3754      	adds	r7, #84	@ 0x54
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd90      	pop	{r4, r7, pc}

0800e67c <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800e67c:	b590      	push	{r4, r7, lr}
 800e67e:	b08f      	sub	sp, #60	@ 0x3c
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4618      	mov	r0, r3
 800e692:	f7fb fc0b 	bl	8009eac <uxIPHeaderSizePacket>
 800e696:	4603      	mov	r3, r0
 800e698:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800e69a:	4423      	add	r3, r4
 800e69c:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800e69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b2:	7b5b      	ldrb	r3, [r3, #13]
 800e6b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e6be:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f107 0208 	add.w	r2, r7, #8
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fbcf 	bl	800de72 <prvCheckRxData>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e6de:	2b04      	cmp	r3, #4
 800e6e0:	d90c      	bls.n	800e6fc <prvTCPHandleState+0x80>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	691a      	ldr	r2, [r3, #16]
 800e6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d106      	bne.n	800e6fc <prvTCPHandleState+0x80>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e6f4:	f043 0301 	orr.w	r3, r3, #1
 800e6f8:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 800e6fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	441a      	add	r2, r3
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	699b      	ldr	r3, [r3, #24]
 800e706:	1ad3      	subs	r3, r2, r3
 800e708:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	dd04      	ble.n	800e71a <prvTCPHandleState+0x9e>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	441a      	add	r2, r3
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800e71a:	68b9      	ldr	r1, [r7, #8]
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7ff fc1c 	bl	800df60 <prvStoreRxData>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	da03      	bge.n	800e736 <prvTCPHandleState+0xba>
        {
            xSendLength = -1;
 800e72e:	f04f 33ff 	mov.w	r3, #4294967295
 800e732:	637b      	str	r3, [r7, #52]	@ 0x34
 800e734:	e0ab      	b.n	800e88e <prvTCPHandleState+0x212>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4619      	mov	r1, r3
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fef9 	bl	800f534 <prvSetOptions>
 800e742:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e74a:	2b04      	cmp	r3, #4
 800e74c:	d109      	bne.n	800e762 <prvTCPHandleState+0xe6>
 800e74e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e752:	f003 031f 	and.w	r3, r3, #31
 800e756:	2b02      	cmp	r3, #2
 800e758:	d103      	bne.n	800e762 <prvTCPHandleState+0xe6>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800e75a:	2103      	movs	r1, #3
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7fe fdf1 	bl	800d344 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800e762:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e766:	f003 0301 	and.w	r3, r3, #1
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d022      	beq.n	800e7b4 <prvTCPHandleState+0x138>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e774:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d11a      	bne.n	800e7b4 <prvTCPHandleState+0x138>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e77e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	441a      	add	r2, r3
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e78e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e792:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d106      	bne.n	800e7b4 <prvTCPHandleState+0x138>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800e7ac:	f043 0302 	orr.w	r3, r3, #2
 800e7b0:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e7ba:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
 800e7be:	2b0b      	cmp	r3, #11
 800e7c0:	d864      	bhi.n	800e88c <prvTCPHandleState+0x210>
 800e7c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e7c8 <prvTCPHandleState+0x14c>)
 800e7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c8:	0800e88d 	.word	0x0800e88d
 800e7cc:	0800e88d 	.word	0x0800e88d
 800e7d0:	0800e85b 	.word	0x0800e85b
 800e7d4:	0800e7f9 	.word	0x0800e7f9
 800e7d8:	0800e85b 	.word	0x0800e85b
 800e7dc:	0800e86d 	.word	0x0800e86d
 800e7e0:	0800e87d 	.word	0x0800e87d
 800e7e4:	0800e87d 	.word	0x0800e87d
 800e7e8:	0800e88d 	.word	0x0800e88d
 800e7ec:	0800e88d 	.word	0x0800e88d
 800e7f0:	0800e87d 	.word	0x0800e87d
 800e7f4:	0800e88d 	.word	0x0800e88d
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800e7f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 fbe4 	bl	800efc8 <prvSetSynAckOptions>
 800e800:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800e802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e804:	2212      	movs	r2, #18
 800e806:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7fb fb69 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800e80e:	4602      	mov	r2, r0
 800e810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e812:	4413      	add	r3, r2
 800e814:	3314      	adds	r3, #20
 800e816:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	3314      	adds	r3, #20
 800e822:	b2db      	uxtb	r3, r3
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	b2da      	uxtb	r2, r3
 800e828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82a:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800e82c:	2104      	movs	r1, #4
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7fe fd88 	bl	800d344 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800e834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800e83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	69db      	ldr	r3, [r3, #28]
 800e848:	1c5a      	adds	r2, r3, #1
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	69db      	ldr	r3, [r3, #28]
 800e852:	1c5a      	adds	r2, r3, #1
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	621a      	str	r2, [r3, #32]
                    break;
 800e858:	e019      	b.n	800e88e <prvTCPHandleState+0x212>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	6819      	ldr	r1, [r3, #0]
 800e85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e860:	697a      	ldr	r2, [r7, #20]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff fd0a 	bl	800e27c <prvHandleSynReceived>
 800e868:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800e86a:	e010      	b.n	800e88e <prvTCPHandleState+0x212>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86e:	697a      	ldr	r2, [r7, #20]
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7ff fdf5 	bl	800e462 <prvHandleEstablished>
 800e878:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800e87a:	e008      	b.n	800e88e <prvTCPHandleState+0x212>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4619      	mov	r1, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7ff fc55 	bl	800e132 <prvTCPHandleFin>
 800e888:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800e88a:	e000      	b.n	800e88e <prvTCPHandleState+0x212>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800e88c:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800e88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e890:	2b00      	cmp	r3, #0
 800e892:	dd06      	ble.n	800e8a2 <prvTCPHandleState+0x226>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800e894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e896:	697a      	ldr	r2, [r7, #20]
 800e898:	6839      	ldr	r1, [r7, #0]
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f000 feb0 	bl	800f600 <prvSendData>
 800e8a0:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 800e8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	373c      	adds	r7, #60	@ 0x3c
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd90      	pop	{r4, r7, pc}

0800e8ac <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800e8ba:	6838      	ldr	r0, [r7, #0]
 800e8bc:	f7fb faf6 	bl	8009eac <uxIPHeaderSizePacket>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b14      	cmp	r3, #20
 800e8c4:	d105      	bne.n	800e8d2 <prvHandleListen+0x26>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipSIZE_OF_IPv4_HEADER:
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 800e8c6:	6839      	ldr	r1, [r7, #0]
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f89c 	bl	800ea06 <prvHandleListen_IPV4>
 800e8ce:	60f8      	str	r0, [r7, #12]
                    break;
 800e8d0:	e000      	b.n	800e8d4 <prvHandleListen+0x28>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 800e8d2:	bf00      	nop
        }

        return pxNewSocket;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
    }
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b08a      	sub	sp, #40	@ 0x28
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
 800e8e6:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	6a1a      	ldr	r2, [r3, #32]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d009      	beq.n	800e994 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	645a      	str	r2, [r3, #68]	@ 0x44
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e98c:	f043 0205 	orr.w	r2, r3, #5
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	649a      	str	r2, [r3, #72]	@ 0x48
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 800e994:	f107 030c 	add.w	r3, r7, #12
 800e998:	4619      	mov	r1, r3
 800e99a:	6838      	ldr	r0, [r7, #0]
 800e99c:	f7fd fc45 	bl	800c22a <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800e9a6:	f043 0304 	orr.w	r3, r3, #4
 800e9aa:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	683a      	ldr	r2, [r7, #0]
 800e9b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800e9bc:	3301      	adds	r3, #1
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d103      	bne.n	800e9d8 <prvTCPSocketCopy+0xfa>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800e9d8:	f107 010c 	add.w	r1, r7, #12
 800e9dc:	2301      	movs	r3, #1
 800e9de:	2218      	movs	r2, #24
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7fc fedd 	bl	800b7a0 <vSocketBind>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d005      	beq.n	800e9f8 <prvTCPSocketCopy+0x11a>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
            ( void ) vSocketClose( pxNewSocket );
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f7fc ff51 	bl	800b894 <vSocketClose>
            xResult = pdFALSE;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9f6:	e001      	b.n	800e9fc <prvTCPSocketCopy+0x11e>
        }
        else
        {
            xResult = pdTRUE;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3728      	adds	r7, #40	@ 0x28
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800ea06:	b590      	push	{r4, r7, lr}
 800ea08:	b08d      	sub	sp, #52	@ 0x34
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 800ea10:	2300      	movs	r3, #0
 800ea12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 800ea14:	2300      	movs	r3, #0
 800ea16:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 800ea20:	2300      	movs	r3, #0
 800ea22:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d008      	beq.n	800ea3c <prvHandleListen_IPV4+0x36>
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d005      	beq.n	800ea3c <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea3a:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d015      	beq.n	800ea6e <prvHandleListen_IPV4+0x68>
 800ea42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea44:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800ea48:	6a3b      	ldr	r3, [r7, #32]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d10e      	bne.n	800ea6e <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 800ea50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea52:	f8d3 001e 	ldr.w	r0, [r3, #30]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 800ea5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea5c:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 800ea60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea62:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800ea64:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 800ea66:	f7fb fa85 	bl	8009f74 <ulApplicationGetNextSequenceNumber>
 800ea6a:	6278      	str	r0, [r7, #36]	@ 0x24
 800ea6c:	e001      	b.n	800ea72 <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 800ea72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d03f      	beq.n	800eaf8 <prvHandleListen_IPV4+0xf2>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800ea7e:	f003 0308 	and.w	r3, r3, #8
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00d      	beq.n	800eaa4 <prvHandleListen_IPV4+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800ea92:	f043 0304 	orr.w	r3, r3, #4
 800ea96:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800eaa2:	e029      	b.n	800eaf8 <prvHandleListen_IPV4+0xf2>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8b3 2078 	ldrh.w	r2, [r3, #120]	@ 0x78
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d303      	bcc.n	800eac0 <prvHandleListen_IPV4+0xba>
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 800eab8:	6838      	ldr	r0, [r7, #0]
 800eaba:	f000 fe7b 	bl	800f7b4 <prvTCPSendReset>
 800eabe:	e01b      	b.n	800eaf8 <prvHandleListen_IPV4+0xf2>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 800eac0:	2206      	movs	r2, #6
 800eac2:	2101      	movs	r1, #1
 800eac4:	2002      	movs	r0, #2
 800eac6:	f7fc fd03 	bl	800b4d0 <FreeRTOS_socket>
 800eaca:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d003      	beq.n	800eada <prvHandleListen_IPV4+0xd4>
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead8:	d103      	bne.n	800eae2 <prvHandleListen_IPV4+0xdc>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800eada:	6838      	ldr	r0, [r7, #0]
 800eadc:	f000 fe6a 	bl	800f7b4 <prvTCPSendReset>
 800eae0:	e00a      	b.n	800eaf8 <prvHandleListen_IPV4+0xf2>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800eae2:	6879      	ldr	r1, [r7, #4]
 800eae4:	6978      	ldr	r0, [r7, #20]
 800eae6:	f7ff fefa 	bl	800e8de <prvTCPSocketCopy>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d003      	beq.n	800eaf8 <prvHandleListen_IPV4+0xf2>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d052      	beq.n	800eba4 <prvHandleListen_IPV4+0x19e>
 800eafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d04f      	beq.n	800eba4 <prvHandleListen_IPV4+0x19e>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800eb08:	6838      	ldr	r0, [r7, #0]
 800eb0a:	f7fb f9cf 	bl	8009eac <uxIPHeaderSizePacket>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 800eb12:	4423      	add	r3, r4
 800eb14:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1c:	651a      	str	r2, [r3, #80]	@ 0x50
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800eb1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb20:	7a13      	ldrb	r3, [r2, #8]
 800eb22:	f023 0301 	bic.w	r3, r3, #1
 800eb26:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800eb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800eb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb36:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800eb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3c:	659a      	str	r2, [r3, #88]	@ 0x58
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800eb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb42:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
            prvSocketSetMSS( pxReturn );
 800eb50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb52:	f001 f8b8 	bl	800fcc6 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 800eb56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb58:	f000 f9cf 	bl	800eefa <prvTCPCreateWindow>
 800eb5c:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d008      	beq.n	800eb76 <prvHandleListen_IPV4+0x170>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d102      	bne.n	800eb70 <prvHandleListen_IPV4+0x16a>
                {
                    ( void ) vSocketClose( pxReturn );
 800eb6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb6c:	f7fc fe92 	bl	800b894 <vSocketClose>
                }

                pxReturn = NULL;
 800eb70:	2300      	movs	r3, #0
 800eb72:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 800eb74:	e016      	b.n	800eba4 <prvHandleListen_IPV4+0x19e>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 800eb76:	2103      	movs	r1, #3
 800eb78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb7a:	f7fe fbe3 	bl	800d344 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb82:	2b5a      	cmp	r3, #90	@ 0x5a
 800eb84:	d902      	bls.n	800eb8c <prvHandleListen_IPV4+0x186>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 800eb86:	235a      	movs	r3, #90	@ 0x5a
 800eb88:	61bb      	str	r3, [r7, #24]
 800eb8a:	e002      	b.n	800eb92 <prvHandleListen_IPV4+0x18c>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb90:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 800eb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb94:	f103 00ae 	add.w	r0, r3, #174	@ 0xae
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 800eb9c:	69ba      	ldr	r2, [r7, #24]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	f008 fc91 	bl	80174c6 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 800eba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3734      	adds	r7, #52	@ 0x34
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd90      	pop	{r4, r7, pc}

0800ebae <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b084      	sub	sp, #16
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800ebc0:	f003 0308 	and.w	r3, r3, #8
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d107      	bne.n	800ebda <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 f9c3 	bl	800ef56 <prvTCPPrepareConnect>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d001      	beq.n	800ebda <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( resolution ) is not yet ready. */
                xReturn = pdFALSE;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800ebda:	68fb      	ldr	r3, [r7, #12]
    }
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3710      	adds	r7, #16
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b088      	sub	sp, #32
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800ebec:	2300      	movs	r3, #0
 800ebee:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d010      	beq.n	800ec20 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800ec02:	f107 030c 	add.w	r3, r7, #12
 800ec06:	4619      	mov	r1, r3
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f84e 	bl	800ecaa <prvTCPSendRepeated>
 800ec0e:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d044      	beq.n	800eca0 <prvTCPSendPacket+0xbc>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f002 fc4f 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
 800ec1e:	e03f      	b.n	800eca0 <prvTCPSendPacket+0xbc>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d904      	bls.n	800ec34 <prvTCPSendPacket+0x50>
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800ec2a:	2108      	movs	r1, #8
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7fe fb89 	bl	800d344 <vTCPStateChange>
 800ec32:	e035      	b.n	800eca0 <prvTCPSendPacket+0xbc>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7ff ffba 	bl	800ebae <prvTCPMakeSurePrepared>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d12f      	bne.n	800eca0 <prvTCPSendPacket+0xbc>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7fb f94d 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800ec46:	4603      	mov	r3, r0
 800ec48:	330e      	adds	r3, #14
 800ec4a:	33a8      	adds	r3, #168	@ 0xa8
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	4413      	add	r3, r2
 800ec50:	3306      	adds	r3, #6
 800ec52:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	4619      	mov	r1, r3
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f000 f9b5 	bl	800efc8 <prvSetSynAckOptions>
 800ec5e:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7fb f93d 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800ec66:	4602      	mov	r2, r0
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	3314      	adds	r3, #20
 800ec6e:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	3314      	adds	r3, #20
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	b2da      	uxtb	r2, r3
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800ec94:	69fa      	ldr	r2, [r7, #28]
 800ec96:	2300      	movs	r3, #0
 800ec98:	2100      	movs	r1, #0
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 f835 	bl	800ed0a <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800eca0:	69fb      	ldr	r3, [r7, #28]
    }
 800eca2:	4618      	mov	r0, r3
 800eca4:	3720      	adds	r7, #32
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b086      	sub	sp, #24
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
 800ecb2:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	617b      	str	r3, [r7, #20]
 800ecc0:	e019      	b.n	800ecf6 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	6839      	ldr	r1, [r7, #0]
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f000 fa7f 	bl	800f1ca <prvTCPPrepareSend>
 800eccc:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	dd14      	ble.n	800ecfe <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	6819      	ldr	r1, [r3, #0]
 800ecd8:	68ba      	ldr	r2, [r7, #8]
 800ecda:	2301      	movs	r3, #1
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 f814 	bl	800ed0a <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	2200      	movs	r2, #0
 800ece6:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800ece8:	693a      	ldr	r2, [r7, #16]
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	4413      	add	r3, r2
 800ecee:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	617b      	str	r3, [r7, #20]
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	2b07      	cmp	r3, #7
 800ecfa:	d9e2      	bls.n	800ecc2 <prvTCPSendRepeated+0x18>
 800ecfc:	e000      	b.n	800ed00 <prvTCPSendRepeated+0x56>
                break;
 800ecfe:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800ed00:	693b      	ldr	r3, [r7, #16]
    }
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b088      	sub	sp, #32
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	60f8      	str	r0, [r7, #12]
 800ed12:	60b9      	str	r1, [r7, #8]
 800ed14:	607a      	str	r2, [r7, #4]
 800ed16:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	61fb      	str	r3, [r7, #28]
        BaseType_t xIsIPv6 = pdFALSE;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	61bb      	str	r3, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d110      	bne.n	800ed48 <prvTCPReturnPacket+0x3e>
                {
                    xIsIPv6 = pdTRUE;
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d10d      	bne.n	800ed48 <prvTCPReturnPacket+0x3e>
	__asm volatile
 800ed2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed30:	b672      	cpsid	i
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	b662      	cpsie	i
 800ed40:	617b      	str	r3, [r7, #20]
}
 800ed42:	bf00      	nop
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 800ed44:	bf00      	nop
 800ed46:	e7fd      	b.n	800ed44 <prvTCPReturnPacket+0x3a>
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d105      	bne.n	800ed5a <prvTCPReturnPacket+0x50>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	68b9      	ldr	r1, [r7, #8]
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f000 fd3b 	bl	800f7d0 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 800ed5a:	bf00      	nop
 800ed5c:	3720      	adds	r7, #32
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b08a      	sub	sp, #40	@ 0x28
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	60f8      	str	r0, [r7, #12]
 800ed6a:	60b9      	str	r1, [r7, #8]
 800ed6c:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ed74:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800ed7e:	4413      	add	r3, r2
 800ed80:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d007      	beq.n	800ed9c <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe f82e 	bl	800cdf4 <uxStreamBufferFrontSpace>
 800ed98:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed9a:	e003      	b.n	800eda4 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800eda2:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fb fd2e 	bl	800a80c <FreeRTOS_min_uint32>
 800edb0:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800edb8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d107      	bne.n	800edd2 <prvTCPReturn_CheckTCPWindow+0x70>
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800edc8:	f003 0304 	and.w	r3, r3, #4
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 800edd2:	2300      	movs	r3, #0
 800edd4:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800eddc:	461a      	mov	r2, r3
 800edde:	6a3b      	ldr	r3, [r7, #32]
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d20a      	bcs.n	800edfa <prvTCPReturn_CheckTCPWindow+0x98>
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800edea:	461a      	mov	r2, r3
 800edec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edee:	4293      	cmp	r3, r2
 800edf0:	d303      	bcc.n	800edfa <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800edf8:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 800ee00:	461a      	mov	r2, r3
 800ee02:	6a3b      	ldr	r3, [r7, #32]
 800ee04:	40d3      	lsrs	r3, r2
 800ee06:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d902      	bls.n	800ee18 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 800ee12:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800ee16:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800ee20:	68fa      	ldr	r2, [r7, #12]
 800ee22:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800ee26:	f023 0301 	bic.w	r3, r3, #1
 800ee2a:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	691a      	ldr	r2, [r3, #16]
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	441a      	add	r2, r3
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	671a      	str	r2, [r3, #112]	@ 0x70
    }
 800ee3a:	bf00      	nop
 800ee3c:	3728      	adds	r7, #40	@ 0x28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b088      	sub	sp, #32
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	60f8      	str	r0, [r7, #12]
 800ee4a:	60b9      	str	r1, [r7, #8]
 800ee4c:	607a      	str	r2, [r7, #4]
 800ee4e:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ee56:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800ee60:	4413      	add	r3, r2
 800ee62:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800ee6a:	f003 0302 	and.w	r3, r3, #2
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d018      	beq.n	800eea6 <prvTCPReturn_SetSequenceNumber+0x64>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800ee7a:	f023 0302 	bic.w	r3, r3, #2
 800ee7e:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800ee88:	f043 0304 	orr.w	r3, r3, #4
 800ee8c:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800ee96:	1e5a      	subs	r2, r3, #1
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	605a      	str	r2, [r3, #4]
 800eea4:	e021      	b.n	800eeea <prvTCPReturn_SetSequenceNumber+0xa8>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	7b5b      	ldrb	r3, [r3, #13]
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d016      	beq.n	800eeea <prvTCPReturn_SetSequenceNumber+0xa8>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f7fb f80f 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800eec2:	4602      	mov	r2, r0
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	1a9b      	subs	r3, r3, r2
 800eec8:	3b14      	subs	r3, #20
 800eeca:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	441a      	add	r2, r3
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d006      	beq.n	800eeea <prvTCPReturn_SetSequenceNumber+0xa8>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	7b5b      	ldrb	r3, [r3, #13]
 800eee0:	f023 0301 	bic.w	r3, r3, #1
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	735a      	strb	r2, [r3, #13]
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	691a      	ldr	r2, [r3, #16]
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	609a      	str	r2, [r3, #8]
    }
 800eef2:	bf00      	nop
 800eef4:	3720      	adds	r7, #32
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800eefa:	b5b0      	push	{r4, r5, r7, lr}
 800eefc:	b088      	sub	sp, #32
 800eefe:	af02      	add	r7, sp, #8
 800ef00:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800ef08:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ef10:	613b      	str	r3, [r7, #16]
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800ef1e:	fb02 f103 	mul.w	r1, r2, r3
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800ef28:	fb02 f403 	mul.w	r4, r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 5134 	ldr.w	r5, [r3, #308]	@ 0x134
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
        xReturn = xTCPWindowCreate(
 800ef3e:	9201      	str	r2, [sp, #4]
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	462b      	mov	r3, r5
 800ef44:	4622      	mov	r2, r4
 800ef46:	f001 f97b 	bl	8010240 <xTCPWindowCreate>
 800ef4a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
    }
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3718      	adds	r7, #24
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bdb0      	pop	{r4, r5, r7, pc}

0800ef56 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found through address resolution.
 *       In case the target IP address is not within the netmask, the hardware address
 *       of the gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7a1b      	ldrb	r3, [r3, #8]
 800ef66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d104      	bne.n	800ef7a <prvTCPPrepareConnect+0x24>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 fdfb 	bl	800fb6c <prvTCPPrepareConnect_IPV4>
 800ef76:	60f8      	str	r0, [r7, #12]
                    break;
 800ef78:	e000      	b.n	800ef7c <prvTCPPrepareConnect+0x26>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800ef7a:	bf00      	nop
        }

        return xReturn;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
    }
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 800ef86:	b480      	push	{r7}
 800ef88:	b085      	sub	sp, #20
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
 800ef9a:	fb02 f303 	mul.w	r3, r2, r3
 800ef9e:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 800efa0:	2300      	movs	r3, #0
 800efa2:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 800efa4:	e005      	b.n	800efb2 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	085b      	lsrs	r3, r3, #1
 800efaa:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 800efac:	7afb      	ldrb	r3, [r7, #11]
 800efae:	3301      	adds	r3, #1
 800efb0:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efb8:	d2f5      	bcs.n	800efa6 <prvWinScaleFactor+0x20>
            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 800efba:	7afb      	ldrb	r3, [r7, #11]
        }
 800efbc:	4618      	mov	r0, r3
 800efbe:	3714      	adds	r7, #20
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800efd8:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	2202      	movs	r2, #2
 800efde:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	2204      	movs	r2, #4
 800efe4:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800efe6:	89fb      	ldrh	r3, [r7, #14]
 800efe8:	0a1b      	lsrs	r3, r3, #8
 800efea:	b29b      	uxth	r3, r3
 800efec:	b2da      	uxtb	r2, r3
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 800eff2:	89fb      	ldrh	r3, [r7, #14]
 800eff4:	b2da      	uxtb	r2, r3
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7ff ffc3 	bl	800ef86 <prvWinScaleFactor>
 800f000:	4603      	mov	r3, r0
 800f002:	461a      	mov	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2201      	movs	r2, #1
 800f00e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	2203      	movs	r2, #3
 800f014:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2203      	movs	r2, #3
 800f01a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 800f026:	2308      	movs	r3, #8
 800f028:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	4413      	add	r3, r2
 800f030:	3314      	adds	r3, #20
 800f032:	2201      	movs	r2, #1
 800f034:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	3301      	adds	r3, #1
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	4413      	add	r3, r2
 800f03e:	2201      	movs	r2, #1
 800f040:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	3302      	adds	r3, #2
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	4413      	add	r3, r2
 800f04a:	2204      	movs	r2, #4
 800f04c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	3303      	adds	r3, #3
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	4413      	add	r3, r2
 800f056:	2202      	movs	r2, #2
 800f058:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	3304      	adds	r3, #4
 800f05e:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 800f060:	68bb      	ldr	r3, [r7, #8]
    }
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b088      	sub	sp, #32
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
 800f078:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 800f07a:	4b3c      	ldr	r3, [pc, #240]	@ (800f16c <prvTCPBufferResize+0x100>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00b      	beq.n	800f09a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800f082:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 800f086:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d102      	bne.n	800f094 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 800f08e:	2301      	movs	r3, #1
 800f090:	617b      	str	r3, [r7, #20]
 800f092:	e020      	b.n	800f0d6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 800f094:	2300      	movs	r3, #0
 800f096:	617b      	str	r3, [r7, #20]
 800f098:	e01d      	b.n	800f0d6 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f7fa ff20 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	3322      	adds	r3, #34	@ 0x22
 800f0a8:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	69ba      	ldr	r2, [r7, #24]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	2b59      	cmp	r3, #89	@ 0x59
 800f0b6:	d801      	bhi.n	800f0bc <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800f0b8:	235a      	movs	r3, #90	@ 0x5a
 800f0ba:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d004      	beq.n	800f0cc <prvTCPBufferResize+0x60>
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0c6:	69ba      	ldr	r2, [r7, #24]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d902      	bls.n	800f0d2 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	617b      	str	r3, [r7, #20]
 800f0d0:	e001      	b.n	800f0d6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d023      	beq.n	800f124 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 800f0dc:	2100      	movs	r1, #0
 800f0de:	69b8      	ldr	r0, [r7, #24]
 800f0e0:	f002 f940 	bl	8011364 <pxGetNetworkBufferWithDescriptor>
 800f0e4:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d03a      	beq.n	800f162 <prvTCPBufferResize+0xf6>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	69ba      	ldr	r2, [r7, #24]
 800f0f0:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00c      	beq.n	800f112 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f104:	461a      	mov	r2, r3
 800f106:	f008 f9de 	bl	80174c6 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f10a:	68b8      	ldr	r0, [r7, #8]
 800f10c:	f002 f9d6 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
 800f110:	e027      	b.n	800f162 <prvTCPBufferResize+0xf6>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	33ae      	adds	r3, #174	@ 0xae
 800f11a:	225a      	movs	r2, #90	@ 0x5a
 800f11c:	4619      	mov	r1, r3
 800f11e:	f008 f9d2 	bl	80174c6 <memcpy>
 800f122:	e01e      	b.n	800f162 <prvTCPBufferResize+0xf6>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d10d      	bne.n	800f146 <prvTCPBufferResize+0xda>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f12e:	b672      	cpsid	i
 800f130:	f383 8811 	msr	BASEPRI, r3
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	f3bf 8f4f 	dsb	sy
 800f13c:	b662      	cpsie	i
 800f13e:	613b      	str	r3, [r7, #16]
}
 800f140:	bf00      	nop
 800f142:	bf00      	nop
 800f144:	e7fd      	b.n	800f142 <prvTCPBufferResize+0xd6>
            pxReturn = pxNetworkBuffer;
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f7fa fec8 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800f150:	4602      	mov	r2, r0
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	441a      	add	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4413      	add	r3, r2
 800f15a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 800f162:	69fb      	ldr	r3, [r7, #28]
    }
 800f164:	4618      	mov	r0, r3
 800f166:	3720      	adds	r7, #32
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	080186f4 	.word	0x080186f4

0800f170 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 800f170:	b580      	push	{r7, lr}
 800f172:	b086      	sub	sp, #24
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 800f17c:	2300      	movs	r3, #0
 800f17e:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d008      	beq.n	800f198 <prvTCPReturn_SetEndPoint+0x28>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d004      	beq.n	800f198 <prvTCPReturn_SetEndPoint+0x28>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	631a      	str	r2, [r3, #48]	@ 0x30
 800f196:	e014      	b.n	800f1c2 <prvTCPReturn_SetEndPoint+0x52>
        }
        else
        {
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );

            switch( uxIPHeaderSize )
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2b14      	cmp	r3, #20
 800f19c:	d10c      	bne.n	800f1b8 <prvTCPReturn_SetEndPoint+0x48>
                        /*_RB_ Was FreeRTOS_FindEndPointOnIP_IPv4() but changed to FreeRTOS_FindEndPointOnNetMask()
                         * as it is using the destination address.  I'm confused here as sometimes the addresses are swapped. */
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a2:	330e      	adds	r3, #14
 800f1a4:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress );
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fb ffb2 	bl	800b114 <FreeRTOS_FindEndPointOnNetMask>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	631a      	str	r2, [r3, #48]	@ 0x30
                        {
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
                                               ( unsigned int ) FreeRTOS_ntohl( pxIPHeader->ulSourceIPAddress ),
                                               ( unsigned int ) FreeRTOS_ntohl( pxIPHeader->ulDestinationIPAddress ) ) );
                        }
                        break;
 800f1b6:	e003      	b.n	800f1c0 <prvTCPReturn_SetEndPoint+0x50>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* Shouldn't reach here */
                    pxNetworkBuffer->pxEndPoint = NULL;
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 800f1be:	bf00      	nop
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 800f1c0:	bf00      	nop
 800f1c2:	bf00      	nop
 800f1c4:	3718      	adds	r7, #24
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b096      	sub	sp, #88	@ 0x58
 800f1ce:	af02      	add	r7, sp, #8
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	60b9      	str	r1, [r7, #8]
 800f1d4:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d004      	beq.n	800f1ec <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1ea:	e002      	b.n	800f1f2 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	33ae      	adds	r3, #174	@ 0xae
 800f1f0:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	f7fa fe74 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	330e      	adds	r3, #14
 800f1fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f1fe:	4413      	add	r3, r2
 800f200:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f208:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 800f20a:	2300      	movs	r3, #0
 800f20c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 800f20e:	2300      	movs	r3, #0
 800f210:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800f212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f214:	7b5b      	ldrb	r3, [r3, #13]
 800f216:	f043 0310 	orr.w	r3, r3, #16
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f21e:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f226:	2b00      	cmp	r3, #0
 800f228:	f000 808d 	beq.w	800f346 <prvTCPPrepareSend+0x17c>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f232:	2b01      	cmp	r3, #1
 800f234:	d90a      	bls.n	800f24c <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f23c:	f107 0210 	add.w	r2, r7, #16
 800f240:	4619      	mov	r1, r3
 800f242:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f244:	f001 fbdb 	bl	80109fe <ulTCPWindowTxGet>
 800f248:	4603      	mov	r3, r0
 800f24a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 800f24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f24e:	2b00      	cmp	r3, #0
 800f250:	dd79      	ble.n	800f346 <prvTCPPrepareSend+0x17c>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	6819      	ldr	r1, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f7ff ff06 	bl	800f06c <prvTCPBufferResize>
 800f260:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 800f262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f264:	2b00      	cmp	r3, #0
 800f266:	d06b      	beq.n	800f340 <prvTCPPrepareSend+0x176>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f26c:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800f26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f272:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f7fa fe33 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800f27a:	4603      	mov	r3, r0
 800f27c:	330e      	adds	r3, #14
 800f27e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f280:	4413      	add	r3, r2
 800f282:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7fa fe2b 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800f28a:	4602      	mov	r2, r0
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4413      	add	r3, r2
 800f290:	3322      	adds	r3, #34	@ 0x22
 800f292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f294:	4413      	add	r3, r2
 800f296:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	693a      	ldr	r2, [r7, #16]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	f7fd fd74 	bl	800cd96 <uxStreamBufferDistance>
 800f2ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800f2b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	9200      	str	r2, [sp, #0]
 800f2bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f2c0:	f7fd fec7 	bl	800d052 <uxStreamBufferGet>
 800f2c4:	62b8      	str	r0, [r7, #40]	@ 0x28
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800f2cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d037      	beq.n	800f346 <prvTCPPrepareSend+0x17c>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	4619      	mov	r1, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	f7fd fd54 	bl	800cd96 <uxStreamBufferDistance>
 800f2ee:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 800f2f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d126      	bne.n	800f346 <prvTCPPrepareSend+0x17c>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f2fe:	689b      	ldr	r3, [r3, #8]
 800f300:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	61bb      	str	r3, [r7, #24]
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800f316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f318:	7b5b      	ldrb	r3, [r3, #13]
 800f31a:	f043 0301 	orr.w	r3, r3, #1
 800f31e:	b2da      	uxtb	r2, r3
 800f320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f322:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800f324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f32a:	441a      	add	r2, r3
 800f32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32e:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f33a:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
 800f33e:	e002      	b.n	800f346 <prvTCPPrepareSend+0x17c>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 800f340:	f04f 33ff 	mov.w	r3, #4294967295
 800f344:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 800f346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f348:	2b00      	cmp	r3, #0
 800f34a:	db7e      	blt.n	800f44a <prvTCPPrepareSend+0x280>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f352:	2b05      	cmp	r3, #5
 800f354:	d179      	bne.n	800f44a <prvTCPPrepareSend+0x280>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800f35c:	f003 0320 	and.w	r3, r3, #32
 800f360:	b2db      	uxtb	r3, r3
 800f362:	2b00      	cmp	r3, #0
 800f364:	d029      	beq.n	800f3ba <prvTCPPrepareSend+0x1f0>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800f366:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f368:	f001 fa15 	bl	8010796 <xTCPWindowTxDone>
 800f36c:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d023      	beq.n	800f3ba <prvTCPPrepareSend+0x1f0>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800f378:	f023 0320 	bic.w	r3, r3, #32
 800f37c:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800f380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f382:	7b5b      	ldrb	r3, [r3, #13]
 800f384:	f043 0301 	orr.w	r3, r3, #1
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f38c:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f398:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f3a2:	f043 0301 	orr.w	r3, r3, #1
 800f3a6:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800f3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ac:	6a1a      	ldr	r2, [r3, #32]
 800f3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b0:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800f3b2:	2106      	movs	r1, #6
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f7fd ffc5 	bl	800d344 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f3c0:	2b03      	cmp	r3, #3
 800f3c2:	d906      	bls.n	800f3d2 <prvTCPPrepareSend+0x208>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f3c4:	2108      	movs	r1, #8
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f7fd ffbc 	bl	800d344 <vTCPStateChange>
                    lDataLen = -1;
 800f3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800f3d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d138      	bne.n	800f44a <prvTCPPrepareSend+0x280>
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d130      	bne.n	800f44a <prvTCPPrepareSend+0x280>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800f3e8:	f005 fe0a 	bl	8015000 <xTaskGetTickCount>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3f4:	1ad3      	subs	r3, r2, r3
 800f3f6:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800f3f8:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f3fc:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f404:	2b00      	cmp	r3, #0
 800f406:	d002      	beq.n	800f40e <prvTCPPrepareSend+0x244>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 800f408:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800f40c:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f412:	429a      	cmp	r2, r3
 800f414:	d919      	bls.n	800f44a <prvTCPPrepareSend+0x280>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800f416:	f005 fdf3 	bl	8015000 <xTaskGetTickCount>
 800f41a:	4602      	mov	r2, r0
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f428:	f043 0302 	orr.w	r3, r3, #2
 800f42c:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800f436:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                        pxSocket->u.xTCP.ucKeepRepCount++;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f440:	3301      	adds	r3, #1
 800f442:	b2da      	uxtb	r2, r3
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 800f44a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	db3e      	blt.n	800f4ce <prvTCPPrepareSend+0x304>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 800f450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f452:	2b00      	cmp	r3, #0
 800f454:	dc0f      	bgt.n	800f476 <prvTCPPrepareSend+0x2ac>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f45c:	f003 0301 	and.w	r3, r3, #1
 800f460:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 800f462:	2b00      	cmp	r3, #0
 800f464:	d107      	bne.n	800f476 <prvTCPPrepareSend+0x2ac>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f46c:	f003 0302 	and.w	r3, r3, #2
 800f470:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800f472:	2b00      	cmp	r3, #0
 800f474:	d02b      	beq.n	800f4ce <prvTCPPrepareSend+0x304>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800f476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f478:	7b5b      	ldrb	r3, [r3, #13]
 800f47a:	f023 0308 	bic.w	r3, r3, #8
 800f47e:	b2da      	uxtb	r2, r3
 800f480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f482:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	b2db      	uxtb	r3, r3
 800f488:	3314      	adds	r3, #20
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	b2da      	uxtb	r2, r3
 800f490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f492:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800f494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f496:	7b5b      	ldrb	r3, [r3, #13]
 800f498:	f043 0310 	orr.w	r3, r3, #16
 800f49c:	b2da      	uxtb	r2, r3
 800f49e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4a0:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 800f4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d006      	beq.n	800f4b6 <prvTCPPrepareSend+0x2ec>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800f4a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4aa:	7b5b      	ldrb	r3, [r3, #13]
 800f4ac:	f043 0308 	orr.w	r3, r3, #8
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4b4:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f7fa fd12 	bl	8009ee0 <uxIPHeaderSizeSocket>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	3314      	adds	r3, #20
 800f4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 800f4c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f4ca:	4413      	add	r3, r2
 800f4cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 800f4ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3750      	adds	r7, #80	@ 0x50
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fd fca6 	bl	800ce38 <uxStreamBufferMidSpace>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	dd1a      	ble.n	800f52c <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800f4fc:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f504:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800f506:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f50e:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800f510:	f001 f8b9 	bl	8010686 <lTCPWindowTxAdd>
 800f514:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	dd07      	ble.n	800f52c <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f522:	68ba      	ldr	r2, [r7, #8]
 800f524:	4611      	mov	r1, r2
 800f526:	4618      	mov	r0, r3
 800f528:	f7fd fcad 	bl	800ce86 <vStreamBufferMoveMid>
            }
        }
    }
 800f52c:	bf00      	nop
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800f534:	b590      	push	{r4, r7, lr}
 800f536:	b089      	sub	sp, #36	@ 0x24
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f542:	6838      	ldr	r0, [r7, #0]
 800f544:	f7fa fcb2 	bl	8009eac <uxIPHeaderSizePacket>
 800f548:	4603      	mov	r3, r0
 800f54a:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f54c:	4423      	add	r3, r4
 800f54e:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f55a:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f562:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d013      	beq.n	800f592 <prvSetOptions+0x5e>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	3380      	adds	r3, #128	@ 0x80
 800f56e:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	3314      	adds	r3, #20
 800f574:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 800f576:	69fa      	ldr	r2, [r7, #28]
 800f578:	68f9      	ldr	r1, [r7, #12]
 800f57a:	68b8      	ldr	r0, [r7, #8]
 800f57c:	f007 ffa3 	bl	80174c6 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	b2db      	uxtb	r3, r3
 800f584:	3314      	adds	r3, #20
 800f586:	b2db      	uxtb	r3, r3
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	731a      	strb	r2, [r3, #12]
 800f590:	e031      	b.n	800f5f6 <prvSetOptions+0xc2>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f598:	2b04      	cmp	r3, #4
 800f59a:	d92c      	bls.n	800f5f6 <prvSetOptions+0xc2>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800f5a2:	f003 0301 	and.w	r3, r3, #1
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d024      	beq.n	800f5f6 <prvSetOptions+0xc2>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800f5b2:	f023 0301 	bic.w	r3, r3, #1
 800f5b6:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            if( xTCPWindowLoggingLevel >= 0 )
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	2202      	movs	r2, #2
 800f5be:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2204      	movs	r2, #4
 800f5c4:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f5cc:	0a1b      	lsrs	r3, r3, #8
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f5dc:	b2da      	uxtb	r2, r3
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 800f5e2:	2304      	movs	r3, #4
 800f5e4:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	3314      	adds	r3, #20
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	b2da      	uxtb	r2, r3
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 800f5f6:	69fb      	ldr	r3, [r7, #28]
    }
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3724      	adds	r7, #36	@ 0x24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd90      	pop	{r4, r7, pc}

0800f600 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 800f600:	b590      	push	{r4, r7, lr}
 800f602:	b08f      	sub	sp, #60	@ 0x3c
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
 800f60c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fa fc47 	bl	8009eac <uxIPHeaderSizePacket>
 800f61e:	4603      	mov	r3, r0
 800f620:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f622:	4423      	add	r3, r4
 800f624:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800f626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f628:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f630:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fa fc36 	bl	8009eac <uxIPHeaderSizePacket>
 800f640:	4603      	mov	r3, r0
 800f642:	3314      	adds	r3, #20
 800f644:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 800f646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f648:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f650:	691b      	ldr	r3, [r3, #16]
 800f652:	1ad3      	subs	r3, r2, r3
 800f654:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d04f      	beq.n	800f70a <prvSendData+0x10a>
 800f66a:	69ba      	ldr	r2, [r7, #24]
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	429a      	cmp	r2, r3
 800f670:	db4b      	blt.n	800f70a <prvSendData+0x10a>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f67c:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d143      	bne.n	800f70a <prvSendData+0x10a>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 800f682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f684:	6a3b      	ldr	r3, [r7, #32]
 800f686:	429a      	cmp	r2, r3
 800f688:	d13f      	bne.n	800f70a <prvSendData+0x10a>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 800f690:	2b05      	cmp	r3, #5
 800f692:	d13a      	bne.n	800f70a <prvSendData+0x10a>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 800f694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f696:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 800f698:	2b10      	cmp	r3, #16
 800f69a:	d136      	bne.n	800f70a <prvSendData+0x10a>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f6a2:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d00f      	beq.n	800f6d2 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d005      	beq.n	800f6c8 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f001 fefa 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d204      	bcs.n	800f6e4 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2202      	movs	r2, #2
 800f6de:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 800f6e2:	e00c      	b.n	800f6fe <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2214      	movs	r2, #20
 800f6e8:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d103      	bne.n	800f6fe <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	2200      	movs	r2, #0
 800f702:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 800f704:	2300      	movs	r3, #0
 800f706:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 800f708:	e015      	b.n	800f736 <prvSendData+0x136>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f710:	2b00      	cmp	r3, #0
 800f712:	d010      	beq.n	800f736 <prvSendData+0x136>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d005      	beq.n	800f72e <prvSendData+0x12e>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f728:	4618      	mov	r0, r3
 800f72a:	f001 fec7 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2200      	movs	r2, #0
 800f732:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 800f736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d009      	beq.n	800f750 <prvSendData+0x150>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	6819      	ldr	r1, [r3, #0]
 800f740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f742:	2301      	movs	r3, #1
 800f744:	68f8      	ldr	r0, [r7, #12]
 800f746:	f7ff fae0 	bl	800ed0a <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2200      	movs	r2, #0
 800f74e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 800f750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800f752:	4618      	mov	r0, r3
 800f754:	373c      	adds	r7, #60	@ 0x3c
 800f756:	46bd      	mov	sp, r7
 800f758:	bd90      	pop	{r4, r7, pc}

0800f75a <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 800f75a:	b480      	push	{r7}
 800f75c:	b085      	sub	sp, #20
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
 800f762:	460b      	mov	r3, r1
 800f764:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 800f766:	2301      	movs	r3, #1
 800f768:	60fb      	str	r3, [r7, #12]
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 800f76a:	68fb      	ldr	r3, [r7, #12]
    }
 800f76c:	4618      	mov	r0, r3
 800f76e:	3714      	adds	r7, #20
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <prvTCPSendChallengeAck>:
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       uint32_t ulCurrentSequenceNumber,
                                       uint32_t ulOurSequenceNumber )
    {
 800f778:	b590      	push	{r4, r7, lr}
 800f77a:	b087      	sub	sp, #28
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f7fa fb8f 	bl	8009eac <uxIPHeaderSizePacket>
 800f78e:	4603      	mov	r3, r0
 800f790:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f792:	4423      	add	r3, r4
 800f794:	617b      	str	r3, [r7, #20]
         *  <ACK=RCV.NXT>
         *
         * The prvTCPSendSpecialPacketHelper function uses the sequence number of the packet as the
         * ACK number and the ACK number as the sequence number, therefore the values are set swapped
         * here to match the RFC. */
        pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulCurrentSequenceNumber );
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	68ba      	ldr	r2, [r7, #8]
 800f79a:	605a      	str	r2, [r3, #4]
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( ulOurSequenceNumber );
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	609a      	str	r2, [r3, #8]

        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 800f7a2:	2110      	movs	r1, #16
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f7ff ffd8 	bl	800f75a <prvTCPSendSpecialPacketHelper>
 800f7aa:	4603      	mov	r3, r0
    }
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	371c      	adds	r7, #28
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd90      	pop	{r4, r7, pc}

0800f7b4 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 800f7bc:	2114      	movs	r1, #20
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7ff ffcb 	bl	800f75a <prvTCPSendSpecialPacketHelper>
 800f7c4:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
	...

0800f7d0 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b0a8      	sub	sp, #160	@ 0xa0
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
 800f7dc:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    IPHeader_t * pxIPHeader = NULL;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    BaseType_t xDoRelease = xReleaseAfterSend;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    EthernetHeader_t * pxEthernetHeader = NULL;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 800f802:	2300      	movs	r3, #0
 800f804:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    void * pvCopyDest = NULL;
 800f808:	2300      	movs	r3, #0
 800f80a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800f80c:	2314      	movs	r3, #20
 800f80e:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t ulDestinationIPAddress;
    eResolutionLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 800f810:	2300      	movs	r3, #0
 800f812:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800f814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d117      	bne.n	800f84c <prvTCPReturnPacket_IPV4+0x7c>
        {
            pxNetworkBuffer = &xTempBuffer;
 800f81c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 800f824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f828:	2238      	movs	r2, #56	@ 0x38
 800f82a:	2100      	movs	r1, #0
 800f82c:	4618      	mov	r0, r3
 800f82e:	f007 fd70 	bl	8017312 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f103 02ae 	add.w	r2, r3, #174	@ 0xae
 800f838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f83c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800f83e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f842:	225a      	movs	r2, #90	@ 0x5a
 800f844:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 800f846:	2300      	movs	r3, #0
 800f848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 800f84c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f850:	2b00      	cmp	r3, #0
 800f852:	d110      	bne.n	800f876 <prvTCPReturnPacket_IPV4+0xa6>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 800f854:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f85a:	4619      	mov	r1, r3
 800f85c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800f860:	f7fa fdbe 	bl	800a3e0 <pxDuplicateNetworkBufferWithDescriptor>
 800f864:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

                if( pxNetworkBuffer != NULL )
 800f868:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <prvTCPReturnPacket_IPV4+0xa6>
                {
                    xDoRelease = pdTRUE;
 800f870:	2301      	movs	r3, #1
 800f872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 800f876:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 8168 	beq.w	800fb50 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800f880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f886:	330e      	adds	r3, #14
 800f888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800f88c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 800f896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f89a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 800f89e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f8a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f8a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f8a6:	330e      	adds	r3, #14
 800f8a8:	4413      	add	r3, r2
 800f8aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( pxNetworkBuffer->pxEndPoint == NULL )
 800f8ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d10b      	bne.n	800f8d0 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 800f8b8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f8ba:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f8be:	68f8      	ldr	r0, [r7, #12]
 800f8c0:	f7ff fc56 	bl	800f170 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 800f8c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f8c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 813d 	beq.w	800fb4a <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d019      	beq.n	800f90a <prvTCPReturnPacket_IPV4+0x13a>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 800f8d6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f8d8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f7ff fa40 	bl	800ed62 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f8e6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f7ff faa9 	bl	800ee42 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f8f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f8f8:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 800f8fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f906:	60da      	str	r2, [r3, #12]
 800f908:	e01b      	b.n	800f942 <prvTCPReturnPacket_IPV4+0x172>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 800f90a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	677b      	str	r3, [r7, #116]	@ 0x74
 800f912:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f916:	689a      	ldr	r2, [r3, #8]
 800f918:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f91c:	605a      	str	r2, [r3, #4]
 800f91e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f922:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f924:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 800f926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f92a:	691b      	ldr	r3, [r3, #16]
 800f92c:	673b      	str	r3, [r7, #112]	@ 0x70
 800f92e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f932:	68da      	ldr	r2, [r3, #12]
 800f934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f938:	611a      	str	r2, [r3, #16]
 800f93a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f93e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f940:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800f942:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f946:	2240      	movs	r2, #64	@ 0x40
 800f948:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	b29a      	uxth	r2, r3
 800f94e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f952:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800f954:	4b84      	ldr	r3, [pc, #528]	@ (800fb68 <prvTCPReturnPacket_IPV4+0x398>)
 800f956:	881a      	ldrh	r2, [r3, #0]
 800f958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f95c:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800f95e:	4b82      	ldr	r3, [pc, #520]	@ (800fb68 <prvTCPReturnPacket_IPV4+0x398>)
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	3301      	adds	r3, #1
 800f964:	b29a      	uxth	r2, r3
 800f966:	4b80      	ldr	r3, [pc, #512]	@ (800fb68 <prvTCPReturnPacket_IPV4+0x398>)
 800f968:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 800f96a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f96e:	2200      	movs	r2, #0
 800f970:	719a      	strb	r2, [r3, #6]
 800f972:	2200      	movs	r2, #0
 800f974:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 800f976:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f97a:	781a      	ldrb	r2, [r3, #0]
 800f97c:	785b      	ldrb	r3, [r3, #1]
 800f97e:	021b      	lsls	r3, r3, #8
 800f980:	4313      	orrs	r3, r2
 800f982:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800f986:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f98a:	885b      	ldrh	r3, [r3, #2]
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f992:	801a      	strh	r2, [r3, #0]
 800f994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f998:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800f99c:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 800f99e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 800f9a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ac:	f103 020e 	add.w	r2, r3, #14
 800f9b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9b4:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 800f9b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f9ba:	3306      	adds	r3, #6
 800f9bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800f9c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 800f9c8:	f107 0214 	add.w	r2, r7, #20
 800f9cc:	f107 011c 	add.w	r1, r7, #28
 800f9d0:	f107 0318 	add.w	r3, r7, #24
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7f8 fa4d 	bl	8007e74 <eARPGetCacheEntry>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

            if( eResult == eResolutionCacheHit )
 800f9e0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d108      	bne.n	800f9fa <prvTCPReturnPacket_IPV4+0x22a>
            {
                pvCopySource = &xMACAddress;
 800f9e8:	f107 031c 	add.w	r3, r7, #28
 800f9ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9f6:	631a      	str	r2, [r3, #48]	@ 0x30
 800f9f8:	e004      	b.n	800fa04 <prvTCPReturnPacket_IPV4+0x234>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 800f9fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f9fe:	3306      	adds	r3, #6
 800fa00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 800fa04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	f000 809f 	beq.w	800fb4e <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 800fa10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fa14:	67fb      	str	r3, [r7, #124]	@ 0x7c
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 800fa16:	2206      	movs	r2, #6
 800fa18:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800fa1c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800fa1e:	f007 fd52 	bl	80174c6 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800fa22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa28:	3338      	adds	r3, #56	@ 0x38
 800fa2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800fa2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fa32:	3306      	adds	r3, #6
 800fa34:	67fb      	str	r3, [r7, #124]	@ 0x7c
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800fa36:	2206      	movs	r2, #6
 800fa38:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800fa3c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800fa3e:	f007 fd42 	bl	80174c6 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800fa42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa48:	2b3b      	cmp	r3, #59	@ 0x3b
 800fa4a:	d81a      	bhi.n	800fa82 <prvTCPReturnPacket_IPV4+0x2b2>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800fa4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fa56:	e00c      	b.n	800fa72 <prvTCPReturnPacket_IPV4+0x2a2>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800fa58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fa62:	4413      	add	r3, r2
 800fa64:	2200      	movs	r2, #0
 800fa66:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800fa68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fa72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fa76:	2b3b      	cmp	r3, #59	@ 0x3b
 800fa78:	ddee      	ble.n	800fa58 <prvTCPReturnPacket_IPV4+0x288>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800fa7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa7e:	223c      	movs	r2, #60	@ 0x3c
 800fa80:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 800fa82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d10d      	bne.n	800faaa <prvTCPReturnPacket_IPV4+0x2da>
	__asm volatile
 800fa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa92:	b672      	cpsid	i
 800fa94:	f383 8811 	msr	BASEPRI, r3
 800fa98:	f3bf 8f6f 	isb	sy
 800fa9c:	f3bf 8f4f 	dsb	sy
 800faa0:	b662      	cpsie	i
 800faa2:	663b      	str	r3, [r7, #96]	@ 0x60
}
 800faa4:	bf00      	nop
 800faa6:	bf00      	nop
 800faa8:	e7fd      	b.n	800faa6 <prvTCPReturnPacket_IPV4+0x2d6>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 800faaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800faae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d10d      	bne.n	800fad4 <prvTCPReturnPacket_IPV4+0x304>
	__asm volatile
 800fab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fabc:	b672      	cpsid	i
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	b662      	cpsie	i
 800facc:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
 800face:	bf00      	nop
 800fad0:	bf00      	nop
 800fad2:	e7fd      	b.n	800fad0 <prvTCPReturnPacket_IPV4+0x300>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 800fad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fadc:	66bb      	str	r3, [r7, #104]	@ 0x68
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 800fade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800fae6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800faea:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800faec:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 800faee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d125      	bne.n	800fb42 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800faf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fafa:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800fafe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800fb02:	021b      	lsls	r3, r3, #8
 800fb04:	4313      	orrs	r3, r2
 800fb06:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800fb0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb16:	845a      	strh	r2, [r3, #34]	@ 0x22
 800fb18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb1c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800fb20:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 800fb22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb26:	691a      	ldr	r2, [r3, #16]
 800fb28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb2c:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800fb2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fb32:	3306      	adds	r3, #6
 800fb34:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800fb38:	2206      	movs	r2, #6
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f007 fcc3 	bl	80174c6 <memcpy>
 800fb40:	e006      	b.n	800fb50 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 800fb42:	2300      	movs	r3, #0
 800fb44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fb48:	e002      	b.n	800fb50 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 800fb4a:	bf00      	nop
 800fb4c:	e000      	b.n	800fb50 <prvTCPReturnPacket_IPV4+0x380>
                break;
 800fb4e:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 800fb50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d103      	bne.n	800fb60 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800fb58:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800fb5c:	f001 fcae 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
    }
}
 800fb60:	bf00      	nop
 800fb62:	37a0      	adds	r7, #160	@ 0xa0
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	20001308 	.word	0x20001308

0800fb6c <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b08c      	sub	sp, #48	@ 0x30
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eResolutionLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 800fb74:	2301      	movs	r3, #1
 800fb76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800fb7c:	f107 030c 	add.w	r3, r7, #12
 800fb80:	2206      	movs	r2, #6
 800fb82:	2100      	movs	r1, #0
 800fb84:	4618      	mov	r0, r3
 800fb86:	f007 fbc4 	bl	8017312 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb8e:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800fb96:	f107 010c 	add.w	r1, r7, #12
 800fb9a:	f107 0314 	add.w	r3, r7, #20
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7f8 f968 	bl	8007e74 <eARPGetCacheEntry>
 800fba4:	4603      	mov	r3, r0
 800fba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 800fbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	d00e      	beq.n	800fbd0 <prvTCPPrepareConnect_IPV4+0x64>

        case eResolutionCacheMiss: /* An ARP table lookup did not find a valid entry. */
        case eResolutionFailed:    /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fbb8:	3301      	adds	r3, #1
 800fbba:	b2da      	uxtb	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7f8 fb83 	bl	80082d0 <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800fbce:	e000      	b.n	800fbd2 <prvTCPPrepareConnect_IPV4+0x66>
            break;                 /* We can now prepare the SYN packet. */
 800fbd0:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 800fbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d010      	beq.n	800fbfa <prvTCPPrepareConnect_IPV4+0x8e>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fbea:	f7fa f9c3 	bl	8009f74 <ulApplicationGetNextSequenceNumber>
 800fbee:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 800fbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d101      	bne.n	800fbfa <prvTCPPrepareConnect_IPV4+0x8e>
        {
            xReturn = pdFALSE;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 800fbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d05d      	beq.n	800fcbc <prvTCPPrepareConnect_IPV4+0x150>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	33ae      	adds	r3, #174	@ 0xae
 800fc04:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 800fc06:	6a3b      	ldr	r3, [r7, #32]
 800fc08:	330e      	adds	r3, #14
 800fc0a:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800fc1a:	f043 0308 	orr.w	r3, r3, #8
 800fc1e:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	33ae      	adds	r3, #174	@ 0xae
 800fc26:	225a      	movs	r2, #90	@ 0x5a
 800fc28:	2100      	movs	r1, #0
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f007 fb71 	bl	8017312 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 800fc30:	6a3b      	ldr	r3, [r7, #32]
 800fc32:	3306      	adds	r3, #6
 800fc34:	461a      	mov	r2, r3
 800fc36:	f107 030c 	add.w	r3, r7, #12
 800fc3a:	6818      	ldr	r0, [r3, #0]
 800fc3c:	6010      	str	r0, [r2, #0]
 800fc3e:	889b      	ldrh	r3, [r3, #4]
 800fc40:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800fc42:	6a3b      	ldr	r3, [r7, #32]
 800fc44:	2200      	movs	r2, #0
 800fc46:	731a      	strb	r2, [r3, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f042 0208 	orr.w	r2, r2, #8
 800fc4e:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	2245      	movs	r2, #69	@ 0x45
 800fc54:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800fc56:	2338      	movs	r3, #56	@ 0x38
 800fc58:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	8b7a      	ldrh	r2, [r7, #26]
 800fc5e:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	2240      	movs	r2, #64	@ 0x40
 800fc64:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	2206      	movs	r2, #6
 800fc6a:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fc70:	69fb      	ldr	r3, [r7, #28]
 800fc72:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800fc7a:	6a3b      	ldr	r3, [r7, #32]
 800fc7c:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800fc82:	6a3b      	ldr	r3, [r7, #32]
 800fc84:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc92:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 800fc96:	6a3b      	ldr	r3, [r7, #32]
 800fc98:	2250      	movs	r2, #80	@ 0x50
 800fc9a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 800fc9e:	6a3b      	ldr	r3, [r7, #32]
 800fca0:	2202      	movs	r2, #2
 800fca2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 f80d 	bl	800fcc6 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7ff f924 	bl	800eefa <prvTCPCreateWindow>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d001      	beq.n	800fcbc <prvTCPPrepareConnect_IPV4+0x150>
        {
            xReturn = pdFALSE;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 800fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3730      	adds	r7, #48	@ 0x30
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b082      	sub	sp, #8
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	7a1b      	ldrb	r3, [r3, #8]
 800fcd2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d103      	bne.n	800fce4 <prvSocketSetMSS+0x1e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    prvSocketSetMSS_IPV4( pxSocket );
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 f806 	bl	800fcee <prvSocketSetMSS_IPV4>
                    break;
 800fce2:	e000      	b.n	800fce6 <prvSocketSetMSS+0x20>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800fce4:	bf00      	nop
        }
    }
 800fce6:	bf00      	nop
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b084      	sub	sp, #16
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 800fcf6:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800fcfa:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd00:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d012      	beq.n	800fd2e <prvSocketSetMSS_IPV4+0x40>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 800fd08:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800fd0c:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	405a      	eors	r2, r3
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d005      	beq.n	800fd2e <prvSocketSetMSS_IPV4+0x40>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800fd22:	68f9      	ldr	r1, [r7, #12]
 800fd24:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 800fd28:	f7fa fd70 	bl	800a80c <FreeRTOS_min_uint32>
 800fd2c:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
}
 800fd38:	bf00      	nop
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 800fd40:	b480      	push	{r7}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 800fd4e:	683a      	ldr	r2, [r7, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	1ad3      	subs	r3, r2, r3
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	db01      	blt.n	800fd5c <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
        }
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3714      	adds	r7, #20
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr

0800fd6a <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 800fd6a:	b480      	push	{r7}
 800fd6c:	b085      	sub	sp, #20
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]
 800fd72:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 800fd74:	2300      	movs	r3, #0
 800fd76:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 800fd78:	683a      	ldr	r2, [r7, #0]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	1ad3      	subs	r3, r2, r3
 800fd7e:	3b01      	subs	r3, #1
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	db01      	blt.n	800fd88 <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 800fd84:	2301      	movs	r3, #1
 800fd86:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800fd88:	68fb      	ldr	r3, [r7, #12]
    }
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3714      	adds	r7, #20
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr

0800fd96 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 800fd96:	b480      	push	{r7}
 800fd98:	b085      	sub	sp, #20
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
 800fd9e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 800fda0:	2300      	movs	r3, #0
 800fda2:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	1ad3      	subs	r3, r2, r3
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	db01      	blt.n	800fdb4 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
    }
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3714      	adds	r7, #20
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr

0800fdc2 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 800fdc2:	b480      	push	{r7}
 800fdc4:	b085      	sub	sp, #20
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
 800fdca:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	db01      	blt.n	800fdde <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 800fdda:	2301      	movs	r3, #1
 800fddc:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800fdde:	68fb      	ldr	r3, [r7, #12]
    }
 800fde0:	4618      	mov	r0, r3
 800fde2:	3714      	adds	r7, #20
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	3308      	adds	r3, #8
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 f85c 	bl	800febc <vListInsertGeneric>
        }
 800fe04:	bf00      	nop
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 800fe14:	f005 f8f4 	bl	8015000 <xTaskGetTickCount>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
    }
 800fe1e:	bf00      	nop
 800fe20:	3708      	adds	r7, #8
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 800fe26:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 800fe30:	f005 f8e6 	bl	8015000 <xTaskGetTickCount>
 800fe34:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	68fa      	ldr	r2, [r7, #12]
 800fe3c:	1ad3      	subs	r3, r2, r3
 800fe3e:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) pdTICKS_TO_MS( uxDiff );
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	2200      	movs	r2, #0
 800fe44:	4698      	mov	r8, r3
 800fe46:	4691      	mov	r9, r2
 800fe48:	4642      	mov	r2, r8
 800fe4a:	464b      	mov	r3, r9
 800fe4c:	f04f 0000 	mov.w	r0, #0
 800fe50:	f04f 0100 	mov.w	r1, #0
 800fe54:	0159      	lsls	r1, r3, #5
 800fe56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fe5a:	0150      	lsls	r0, r2, #5
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	460b      	mov	r3, r1
 800fe60:	ebb2 0408 	subs.w	r4, r2, r8
 800fe64:	eb63 0509 	sbc.w	r5, r3, r9
 800fe68:	f04f 0200 	mov.w	r2, #0
 800fe6c:	f04f 0300 	mov.w	r3, #0
 800fe70:	00ab      	lsls	r3, r5, #2
 800fe72:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800fe76:	00a2      	lsls	r2, r4, #2
 800fe78:	4614      	mov	r4, r2
 800fe7a:	461d      	mov	r5, r3
 800fe7c:	eb14 0a08 	adds.w	sl, r4, r8
 800fe80:	eb45 0b09 	adc.w	fp, r5, r9
 800fe84:	f04f 0200 	mov.w	r2, #0
 800fe88:	f04f 0300 	mov.w	r3, #0
 800fe8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800fe90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800fe94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe98:	4692      	mov	sl, r2
 800fe9a:	469b      	mov	fp, r3
 800fe9c:	4650      	mov	r0, sl
 800fe9e:	4659      	mov	r1, fp
 800fea0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fea4:	f04f 0300 	mov.w	r3, #0
 800fea8:	f7f0 fa32 	bl	8000310 <__aeabi_uldivmod>
 800feac:	4602      	mov	r2, r0
 800feae:	460b      	mov	r3, r1
 800feb0:	4613      	mov	r3, r2
    }
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800febc <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	689a      	ldr	r2, [r3, #8]
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	689b      	ldr	r3, [r3, #8]
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	68ba      	ldr	r2, [r7, #8]
 800fee2:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	1c5a      	adds	r2, r3, #1
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	601a      	str	r2, [r3, #0]
        }
 800fef4:	bf00      	nop
 800fef6:	3714      	adds	r7, #20
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 800ff06:	4824      	ldr	r0, [pc, #144]	@ (800ff98 <prvCreateSectors+0x98>)
 800ff08:	f003 fd51 	bl	80139ae <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 800ff0c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ff10:	f006 fe72 	bl	8016bf8 <pvPortMalloc>
 800ff14:	4603      	mov	r3, r0
 800ff16:	4a21      	ldr	r2, [pc, #132]	@ (800ff9c <prvCreateSectors+0x9c>)
 800ff18:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 800ff1a:	4b20      	ldr	r3, [pc, #128]	@ (800ff9c <prvCreateSectors+0x9c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d102      	bne.n	800ff28 <prvCreateSectors+0x28>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 800ff22:	2300      	movs	r3, #0
 800ff24:	603b      	str	r3, [r7, #0]
 800ff26:	e032      	b.n	800ff8e <prvCreateSectors+0x8e>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800ff28:	4b1c      	ldr	r3, [pc, #112]	@ (800ff9c <prvCreateSectors+0x9c>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ff30:	2100      	movs	r1, #0
 800ff32:	4618      	mov	r0, r3
 800ff34:	f007 f9ed 	bl	8017312 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800ff38:	2300      	movs	r3, #0
 800ff3a:	607b      	str	r3, [r7, #4]
 800ff3c:	e022      	b.n	800ff84 <prvCreateSectors+0x84>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800ff3e:	4b17      	ldr	r3, [pc, #92]	@ (800ff9c <prvCreateSectors+0x9c>)
 800ff40:	6819      	ldr	r1, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	019a      	lsls	r2, r3, #6
 800ff46:	4b15      	ldr	r3, [pc, #84]	@ (800ff9c <prvCreateSectors+0x9c>)
 800ff48:	6818      	ldr	r0, [r3, #0]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	019b      	lsls	r3, r3, #6
 800ff4e:	4403      	add	r3, r0
 800ff50:	440a      	add	r2, r1
 800ff52:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800ff54:	4b11      	ldr	r3, [pc, #68]	@ (800ff9c <prvCreateSectors+0x9c>)
 800ff56:	6819      	ldr	r1, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	019a      	lsls	r2, r3, #6
 800ff5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ff9c <prvCreateSectors+0x9c>)
 800ff5e:	6818      	ldr	r0, [r3, #0]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	019b      	lsls	r3, r3, #6
 800ff64:	4403      	add	r3, r0
 800ff66:	440a      	add	r2, r1
 800ff68:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 800ff6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ff9c <prvCreateSectors+0x9c>)
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	019b      	lsls	r3, r3, #6
 800ff72:	4413      	add	r3, r2
 800ff74:	332c      	adds	r3, #44	@ 0x2c
 800ff76:	4619      	mov	r1, r3
 800ff78:	4807      	ldr	r0, [pc, #28]	@ (800ff98 <prvCreateSectors+0x98>)
 800ff7a:	f7ff ff37 	bl	800fdec <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	3301      	adds	r3, #1
 800ff82:	607b      	str	r3, [r7, #4]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b3f      	cmp	r3, #63	@ 0x3f
 800ff88:	ddd9      	ble.n	800ff3e <prvCreateSectors+0x3e>
                }

                xReturn = pdPASS;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 800ff8e:	683b      	ldr	r3, [r7, #0]
        }
 800ff90:	4618      	mov	r0, r3
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	200026c0 	.word	0x200026c0
 800ff9c:	200026bc 	.word	0x200026bc

0800ffa0 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 800ffa0:	b480      	push	{r7}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	33ac      	adds	r3, #172	@ 0xac
 800ffb2:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	617b      	str	r3, [r7, #20]
 800ffba:	e00d      	b.n	800ffd8 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	683a      	ldr	r2, [r7, #0]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d102      	bne.n	800ffd2 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	613b      	str	r3, [r7, #16]
                    break;
 800ffd0:	e006      	b.n	800ffe0 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800ffd8:	697a      	ldr	r2, [r7, #20]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d1ed      	bne.n	800ffbc <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 800ffe0:	693b      	ldr	r3, [r7, #16]
        }
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	371c      	adds	r7, #28
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
	...

0800fff0 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b08a      	sub	sp, #40	@ 0x28
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	607a      	str	r2, [r7, #4]
 800fffc:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800fffe:	4b37      	ldr	r3, [pc, #220]	@ (80100dc <xTCPWindowNew+0xec>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d102      	bne.n	801000c <xTCPWindowNew+0x1c>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
                pxSegment = NULL;
 8010006:	2300      	movs	r3, #0
 8010008:	627b      	str	r3, [r7, #36]	@ 0x24
 801000a:	e061      	b.n	80100d0 <xTCPWindowNew+0xe0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 801000c:	4b33      	ldr	r3, [pc, #204]	@ (80100dc <xTCPWindowNew+0xec>)
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8010012:	6a3b      	ldr	r3, [r7, #32]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	627b      	str	r3, [r7, #36]	@ 0x24

                configASSERT( pxItem != NULL );
 8010018:	6a3b      	ldr	r3, [r7, #32]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10d      	bne.n	801003a <xTCPWindowNew+0x4a>
	__asm volatile
 801001e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010022:	b672      	cpsid	i
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	b662      	cpsie	i
 8010032:	61bb      	str	r3, [r7, #24]
}
 8010034:	bf00      	nop
 8010036:	bf00      	nop
 8010038:	e7fd      	b.n	8010036 <xTCPWindowNew+0x46>
                configASSERT( pxSegment != NULL );
 801003a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003c:	2b00      	cmp	r3, #0
 801003e:	d10d      	bne.n	801005c <xTCPWindowNew+0x6c>
	__asm volatile
 8010040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010044:	b672      	cpsid	i
 8010046:	f383 8811 	msr	BASEPRI, r3
 801004a:	f3bf 8f6f 	isb	sy
 801004e:	f3bf 8f4f 	dsb	sy
 8010052:	b662      	cpsie	i
 8010054:	617b      	str	r3, [r7, #20]
}
 8010056:	bf00      	nop
 8010058:	bf00      	nop
 801005a:	e7fd      	b.n	8010058 <xTCPWindowNew+0x68>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 801005c:	6a38      	ldr	r0, [r7, #32]
 801005e:	f003 fd30 	bl	8013ac2 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d006      	beq.n	8010076 <xTCPWindowNew+0x86>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	33a4      	adds	r3, #164	@ 0xa4
 801006c:	6a39      	ldr	r1, [r7, #32]
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff febc 	bl	800fdec <vListInsertFifo>
 8010074:	e005      	b.n	8010082 <xTCPWindowNew+0x92>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3390      	adds	r3, #144	@ 0x90
 801007a:	6a39      	ldr	r1, [r7, #32]
 801007c:	4618      	mov	r0, r3
 801007e:	f7ff feb5 	bl	800fdec <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8010082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010084:	3310      	adds	r3, #16
 8010086:	4618      	mov	r0, r3
 8010088:	f7ff fec0 	bl	800fe0c <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 801008c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008e:	2200      	movs	r2, #0
 8010090:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d001      	beq.n	801009c <xTCPWindowNew+0xac>
 8010098:	2101      	movs	r1, #1
 801009a:	e000      	b.n	801009e <xTCPWindowNew+0xae>
 801009c:	2100      	movs	r1, #0
 801009e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100a0:	7d93      	ldrb	r3, [r2, #22]
 80100a2:	f361 0382 	bfi	r3, r1, #2, #1
 80100a6:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 80100a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 80100ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 80100b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b6:	68ba      	ldr	r2, [r7, #8]
 80100b8:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 80100ba:	4b08      	ldr	r3, [pc, #32]	@ (80100dc <xTCPWindowNew+0xec>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	61fb      	str	r3, [r7, #28]

                    if( xLowestLength > xLength )
 80100c0:	4b07      	ldr	r3, [pc, #28]	@ (80100e0 <xTCPWindowNew+0xf0>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	69fa      	ldr	r2, [r7, #28]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d202      	bcs.n	80100d0 <xTCPWindowNew+0xe0>
                    {
                        xLowestLength = xLength;
 80100ca:	4a05      	ldr	r2, [pc, #20]	@ (80100e0 <xTCPWindowNew+0xf0>)
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 80100d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80100d2:	4618      	mov	r0, r3
 80100d4:	3728      	adds	r7, #40	@ 0x28
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	200026c0 	.word	0x200026c0
 80100e0:	20000018 	.word	0x20000018

080100e4 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d002      	beq.n	80100fc <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 80100f6:	2300      	movs	r3, #0
 80100f8:	60fb      	str	r3, [r7, #12]
 80100fa:	e010      	b.n	801011e <xTCPWindowRxEmpty+0x3a>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	691b      	ldr	r3, [r3, #16]
 8010100:	1c5a      	adds	r2, r3, #1
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	699b      	ldr	r3, [r3, #24]
 8010106:	4619      	mov	r1, r3
 8010108:	4610      	mov	r0, r2
 801010a:	f7ff fe5a 	bl	800fdc2 <xSequenceGreaterThanOrEqual>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8010114:	2301      	movs	r3, #1
 8010116:	60fb      	str	r3, [r7, #12]
 8010118:	e001      	b.n	801011e <xTCPWindowRxEmpty+0x3a>
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 801011a:	2300      	movs	r3, #0
 801011c:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 801011e:	68fb      	ldr	r3, [r7, #12]
        }
 8010120:	4618      	mov	r0, r3
 8010122:	3710      	adds	r7, #16
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d102      	bne.n	801013e <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8010138:	2300      	movs	r3, #0
 801013a:	60fb      	str	r3, [r7, #12]
 801013c:	e008      	b.n	8010150 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	68db      	ldr	r3, [r3, #12]
 8010142:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 801014a:	68b8      	ldr	r0, [r7, #8]
 801014c:	f003 fcb9 	bl	8013ac2 <uxListRemove>
            }

            return pxSegment;
 8010150:	68fb      	ldr	r3, [r7, #12]
        }
 8010152:	4618      	mov	r0, r3
 8010154:	3710      	adds	r7, #16
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 801015a:	b480      	push	{r7}
 801015c:	b085      	sub	sp, #20
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d102      	bne.n	8010170 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 801016a:	2300      	movs	r3, #0
 801016c:	60fb      	str	r3, [r7, #12]
 801016e:	e005      	b.n	801017c <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 801017c:	68fb      	ldr	r3, [r7, #12]
        }
 801017e:	4618      	mov	r0, r3
 8010180:	3714      	adds	r7, #20
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr
	...

0801018c <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010198:	2b00      	cmp	r3, #0
 801019a:	d004      	beq.n	80101a6 <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	3318      	adds	r3, #24
 80101a0:	4618      	mov	r0, r3
 80101a2:	f003 fc8e 	bl	8013ac2 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2200      	movs	r2, #0
 80101b0:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d004      	beq.n	80101ca <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	332c      	adds	r3, #44	@ 0x2c
 80101c4:	4618      	mov	r0, r3
 80101c6:	f003 fc7c 	bl	8013ac2 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	332c      	adds	r3, #44	@ 0x2c
 80101ce:	4619      	mov	r1, r3
 80101d0:	4803      	ldr	r0, [pc, #12]	@ (80101e0 <vTCPWindowFree+0x54>)
 80101d2:	f7ff fe0b 	bl	800fdec <vListInsertFifo>
        }
 80101d6:	bf00      	nop
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	200026c0 	.word	0x200026c0

080101e4 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b086      	sub	sp, #24
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 80101ec:	2300      	movs	r3, #0
 80101ee:	613b      	str	r3, [r7, #16]
 80101f0:	e01d      	b.n	801022e <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d003      	beq.n	8010200 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	33a4      	adds	r3, #164	@ 0xa4
 80101fc:	617b      	str	r3, [r7, #20]
 80101fe:	e002      	b.n	8010206 <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	3390      	adds	r3, #144	@ 0x90
 8010204:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	689b      	ldr	r3, [r3, #8]
 801020a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801020e:	d10b      	bne.n	8010228 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8010210:	e006      	b.n	8010220 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	68db      	ldr	r3, [r3, #12]
 8010218:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f7ff ffb6 	bl	801018c <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d1f4      	bne.n	8010212 <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	3301      	adds	r3, #1
 801022c:	613b      	str	r3, [r7, #16]
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	2b01      	cmp	r3, #1
 8010232:	ddde      	ble.n	80101f2 <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8010234:	bf00      	nop
 8010236:	bf00      	nop
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
	...

08010240 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]
 801024c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 801024e:	2301      	movs	r3, #1
 8010250:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8010252:	4b18      	ldr	r3, [pc, #96]	@ (80102b4 <xTCPWindowCreate+0x74>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d102      	bne.n	8010260 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 801025a:	f7ff fe51 	bl	800ff00 <prvCreateSectors>
 801025e:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	3390      	adds	r3, #144	@ 0x90
 8010264:	4618      	mov	r0, r3
 8010266:	f003 fba2 	bl	80139ae <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	33a4      	adds	r3, #164	@ 0xa4
 801026e:	4618      	mov	r0, r3
 8010270:	f003 fb9d 	bl	80139ae <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	3340      	adds	r3, #64	@ 0x40
 8010278:	4618      	mov	r0, r3
 801027a:	f003 fb98 	bl	80139ae <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	3354      	adds	r3, #84	@ 0x54
 8010282:	4618      	mov	r0, r3
 8010284:	f003 fb93 	bl	80139ae <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	3368      	adds	r3, #104	@ 0x68
 801028c:	4618      	mov	r0, r3
 801028e:	f003 fb8e 	bl	80139ae <vListInitialise>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	68ba      	ldr	r2, [r7, #8]
 8010296:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 801029e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a0:	6a3a      	ldr	r2, [r7, #32]
 80102a2:	6839      	ldr	r1, [r7, #0]
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f000 f807 	bl	80102b8 <vTCPWindowInit>

        return xReturn;
 80102aa:	697b      	ldr	r3, [r7, #20]
    }
 80102ac:	4618      	mov	r0, r3
 80102ae:	3718      	adds	r7, #24
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	200026bc 	.word	0x200026bc

080102b8 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 80102b8:	b480      	push	{r7}
 80102ba:	b087      	sub	sp, #28
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
 80102c4:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 80102c6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80102ca:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	7813      	ldrb	r3, [r2, #0]
 80102d6:	f043 0301 	orr.w	r3, r3, #1
 80102da:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d024      	beq.n	801032c <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d004      	beq.n	80102f6 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80102fc:	461a      	mov	r2, r3
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	4293      	cmp	r3, r2
 8010302:	d304      	bcc.n	801030e <vTCPWindowInit+0x56>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801030a:	2b00      	cmp	r3, #0
 801030c:	d10e      	bne.n	801032c <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	fbb2 f3f3 	udiv	r3, r2, r3
 8010318:	683a      	ldr	r2, [r7, #0]
 801031a:	fb03 f202 	mul.w	r2, r3, r2
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	b29a      	uxth	r2, r3
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	68ba      	ldr	r2, [r7, #8]
 8010336:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8010362:	bf00      	nop
 8010364:	371c      	adds	r7, #28
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 801036e:	b580      	push	{r7, lr}
 8010370:	b08a      	sub	sp, #40	@ 0x28
 8010372:	af00      	add	r7, sp, #0
 8010374:	60f8      	str	r0, [r7, #12]
 8010376:	60b9      	str	r1, [r7, #8]
 8010378:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 801037a:	2300      	movs	r3, #0
 801037c:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4413      	add	r3, r2
 8010384:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	33ac      	adds	r3, #172	@ 0xac
 801038a:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	623b      	str	r3, [r7, #32]
 8010392:	e027      	b.n	80103e4 <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	68b9      	ldr	r1, [r7, #8]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7ff fd0e 	bl	800fdc2 <xSequenceGreaterThanOrEqual>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d018      	beq.n	80103de <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	69f9      	ldr	r1, [r7, #28]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7ff fcd9 	bl	800fd6a <xSequenceLessThan>
 80103b8:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00f      	beq.n	80103de <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 80103be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00a      	beq.n	80103da <xTCPWindowRxConfirm+0x6c>
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4619      	mov	r1, r3
 80103ce:	4610      	mov	r0, r2
 80103d0:	f7ff fccb 	bl	800fd6a <xSequenceLessThan>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d001      	beq.n	80103de <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 80103de:	6a3b      	ldr	r3, [r7, #32]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 80103e4:	6a3a      	ldr	r2, [r7, #32]
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d1d3      	bne.n	8010394 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 80103ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d003      	beq.n	80103fa <xTCPWindowRxConfirm+0x8c>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80103f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f4:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 80103f6:	68ba      	ldr	r2, [r7, #8]
 80103f8:	429a      	cmp	r2, r3
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 80103fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80103fc:	4618      	mov	r0, r3
 80103fe:	3728      	adds	r7, #40	@ 0x28
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8010404:	b580      	push	{r7, lr}
 8010406:	b086      	sub	sp, #24
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8010414:	693a      	ldr	r2, [r7, #16]
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	4413      	add	r3, r2
 801041a:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010422:	2b00      	cmp	r3, #0
 8010424:	d02c      	beq.n	8010480 <prvTCPWindowRx_ExpectedRX+0x7c>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 801042a:	683a      	ldr	r2, [r7, #0]
 801042c:	6939      	ldr	r1, [r7, #16]
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f7ff ff9d 	bl	801036e <xTCPWindowRxConfirm>
 8010434:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d002      	beq.n	8010442 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 801043c:	68b8      	ldr	r0, [r7, #8]
 801043e:	f7ff fea5 	bl	801018c <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1f0      	bne.n	801042a <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8010448:	6979      	ldr	r1, [r7, #20]
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7ff fda8 	bl	800ffa0 <xTCPWindowRxFind>
 8010450:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d009      	beq.n	801046c <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	689b      	ldr	r3, [r3, #8]
 801045c:	461a      	mov	r2, r3
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	4413      	add	r3, r2
 8010462:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8010464:	68b8      	ldr	r0, [r7, #8]
 8010466:	f7ff fe91 	bl	801018c <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801046a:	e7ed      	b.n	8010448 <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 801046c:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	429a      	cmp	r2, r3
 8010474:	d004      	beq.n	8010480 <prvTCPWindowRx_ExpectedRX+0x7c>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8010476:	697a      	ldr	r2, [r7, #20]
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	1ad2      	subs	r2, r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	631a      	str	r2, [r3, #48]	@ 0x30
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	697a      	ldr	r2, [r7, #20]
 8010484:	611a      	str	r2, [r3, #16]
        }
 8010486:	bf00      	nop
 8010488:	3718      	adds	r7, #24
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
	...

08010490 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8010490:	b580      	push	{r7, lr}
 8010492:	b08a      	sub	sp, #40	@ 0x28
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 801049c:	f04f 33ff 	mov.w	r3, #4294967295
 80104a0:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 80104a2:	68ba      	ldr	r2, [r7, #8]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4413      	add	r3, r2
 80104a8:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80104b0:	6a39      	ldr	r1, [r7, #32]
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f7ff fd74 	bl	800ffa0 <xTCPWindowRxFind>
 80104b8:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d006      	beq.n	80104ce <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	689b      	ldr	r3, [r3, #8]
 80104c4:	461a      	mov	r2, r3
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	4413      	add	r3, r2
 80104ca:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80104cc:	e7f0      	b.n	80104b0 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 80104ce:	bf00      	nop
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	4a18      	ldr	r2, [pc, #96]	@ (8010534 <prvTCPWindowRx_UnexpectedRX+0xa4>)
 80104d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	68ba      	ldr	r2, [r7, #8]
 80104dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	6a3a      	ldr	r2, [r7, #32]
 80104e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	220c      	movs	r2, #12
 80104ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80104f0:	68b9      	ldr	r1, [r7, #8]
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f7ff fd54 	bl	800ffa0 <xTCPWindowRxFind>
 80104f8:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d114      	bne.n	801052a <prvTCPWindowRx_UnexpectedRX+0x9a>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	2301      	movs	r3, #1
 8010504:	68b9      	ldr	r1, [r7, #8]
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f7ff fd72 	bl	800fff0 <xTCPWindowNew>
 801050c:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d104      	bne.n	801051e <prvTCPWindowRx_UnexpectedRX+0x8e>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2200      	movs	r2, #0
 8010518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801051c:	e005      	b.n	801052a <prvTCPWindowRx_UnexpectedRX+0x9a>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 801051e:	68ba      	ldr	r2, [r7, #8]
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	1ad3      	subs	r3, r2, r3
 8010524:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 801052a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801052c:	4618      	mov	r0, r3
 801052e:	3728      	adds	r7, #40	@ 0x28
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	0101050a 	.word	0x0101050a

08010538 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8010538:	b580      	push	{r7, lr}
 801053a:	b08c      	sub	sp, #48	@ 0x30
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
 8010544:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8010546:	f04f 33ff 	mov.w	r3, #4294967295
 801054a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8010554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010556:	2200      	movs	r2, #0
 8010558:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	691b      	ldr	r3, [r3, #16]
 801055e:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8010560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010564:	4413      	add	r3, r2
 8010566:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8010568:	69fa      	ldr	r2, [r7, #28]
 801056a:	6a3b      	ldr	r3, [r7, #32]
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8010574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010576:	6a3b      	ldr	r3, [r7, #32]
 8010578:	1ad3      	subs	r3, r2, r3
 801057a:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	2b00      	cmp	r3, #0
 8010584:	da0f      	bge.n	80105a6 <lTCPWindowRxCheck+0x6e>
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	2b00      	cmp	r3, #0
 801058a:	dd0c      	ble.n	80105a6 <lTCPWindowRxCheck+0x6e>
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010598:	4413      	add	r3, r2
 801059a:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	425b      	negs	r3, r3
 80105a0:	461a      	mov	r2, r3
 80105a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a4:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2200      	movs	r2, #0
 80105aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2200      	movs	r2, #0
 80105b2:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 80105b4:	6a3a      	ldr	r2, [r7, #32]
 80105b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d10a      	bne.n	80105d2 <lTCPWindowRxCheck+0x9a>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 80105bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d818      	bhi.n	80105f6 <lTCPWindowRxCheck+0xbe>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 80105c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f7ff ff1c 	bl	8010404 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 80105cc:	2300      	movs	r3, #0
 80105ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80105d0:	e011      	b.n	80105f6 <lTCPWindowRxCheck+0xbe>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 80105d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d4:	3301      	adds	r3, #1
 80105d6:	6a3a      	ldr	r2, [r7, #32]
 80105d8:	429a      	cmp	r2, r3
 80105da:	d00c      	beq.n	80105f6 <lTCPWindowRxCheck+0xbe>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	dd09      	ble.n	80105f6 <lTCPWindowRxCheck+0xbe>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	697a      	ldr	r2, [r7, #20]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	dc05      	bgt.n	80105f6 <lTCPWindowRxCheck+0xbe>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 80105ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f7ff ff4e 	bl	8010490 <prvTCPWindowRx_UnexpectedRX>
 80105f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 80105f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80105f8:	4618      	mov	r0, r3
 80105fa:	3730      	adds	r7, #48	@ 0x30
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8010600:	b480      	push	{r7}
 8010602:	b087      	sub	sp, #28
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 801060c:	68fa      	ldr	r2, [r7, #12]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4413      	add	r3, r2
 8010612:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8010614:	697a      	ldr	r2, [r7, #20]
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	429a      	cmp	r2, r3
 801061a:	db03      	blt.n	8010624 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 801061c:	697a      	ldr	r2, [r7, #20]
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8010624:	697b      	ldr	r3, [r7, #20]
        }
 8010626:	4618      	mov	r0, r3
 8010628:	371c      	adds	r7, #28
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr

08010632 <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8010632:	b580      	push	{r7, lr}
 8010634:	b086      	sub	sp, #24
 8010636:	af00      	add	r7, sp, #0
 8010638:	60f8      	str	r0, [r7, #12]
 801063a:	60b9      	str	r1, [r7, #8]
 801063c:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	685a      	ldr	r2, [r3, #4]
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	1ad3      	subs	r3, r2, r3
 8010648:	4619      	mov	r1, r3
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7fa f8ce 	bl	800a7ec <FreeRTOS_min_int32>
 8010650:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	689a      	ldr	r2, [r3, #8]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	441a      	add	r2, r3
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	689a      	ldr	r2, [r3, #8]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	429a      	cmp	r2, r3
 8010668:	db02      	blt.n	8010670 <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2200      	movs	r2, #0
 801066e:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	441a      	add	r2, r3
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	635a      	str	r2, [r3, #52]	@ 0x34
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 801067c:	697b      	ldr	r3, [r7, #20]
        }
 801067e:	4618      	mov	r0, r3
 8010680:	3718      	adds	r7, #24
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8010686:	b580      	push	{r7, lr}
 8010688:	b08a      	sub	sp, #40	@ 0x28
 801068a:	af00      	add	r7, sp, #0
 801068c:	60f8      	str	r0, [r7, #12]
 801068e:	60b9      	str	r1, [r7, #8]
 8010690:	607a      	str	r2, [r7, #4]
 8010692:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8010698:	2300      	movs	r3, #0
 801069a:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106a4:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d06a      	beq.n	8010782 <lTCPWindowTxAdd+0xfc>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 80106ac:	69bb      	ldr	r3, [r7, #24]
 80106ae:	689a      	ldr	r2, [r3, #8]
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 80106b4:	429a      	cmp	r2, r3
 80106b6:	da64      	bge.n	8010782 <lTCPWindowTxAdd+0xfc>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	7d9b      	ldrb	r3, [r3, #22]
 80106bc:	f003 0301 	and.w	r3, r3, #1
 80106c0:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d15d      	bne.n	8010782 <lTCPWindowTxAdd+0xfc>
                ( pxSegment->lDataLength != 0 ) )
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d059      	beq.n	8010782 <lTCPWindowTxAdd+0xfc>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 80106ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106d0:	69b9      	ldr	r1, [r7, #24]
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f7ff ffad 	bl	8010632 <prvTCPWindowTxAdd_FrontSegment>
 80106d8:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 80106da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 80106e2:	6a3a      	ldr	r2, [r7, #32]
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	4413      	add	r3, r2
 80106e8:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80106ea:	697a      	ldr	r2, [r7, #20]
 80106ec:	6839      	ldr	r1, [r7, #0]
 80106ee:	69f8      	ldr	r0, [r7, #28]
 80106f0:	f7ff ff86 	bl	8010600 <lTCPIncrementTxPosition>
 80106f4:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 80106f6:	e044      	b.n	8010782 <lTCPWindowTxAdd+0xfc>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8010702:	461a      	mov	r2, r3
 8010704:	2300      	movs	r3, #0
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7ff fc72 	bl	800fff0 <xTCPWindowNew>
 801070c:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d03a      	beq.n	801078a <lTCPWindowTxAdd+0x104>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	4619      	mov	r1, r3
 801071a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801071c:	f7fa f866 	bl	800a7ec <FreeRTOS_min_int32>
 8010720:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	697a      	ldr	r2, [r7, #20]
 8010726:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8010728:	69bb      	ldr	r3, [r7, #24]
 801072a:	69fa      	ldr	r2, [r7, #28]
 801072c:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 801072e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8010736:	697a      	ldr	r2, [r7, #20]
 8010738:	6839      	ldr	r1, [r7, #0]
 801073a:	69f8      	ldr	r0, [r7, #28]
 801073c:	f7ff ff60 	bl	8010600 <lTCPIncrementTxPosition>
 8010740:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	441a      	add	r2, r3
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 801074e:	6a3a      	ldr	r2, [r7, #32]
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	4413      	add	r3, r2
 8010754:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	3318      	adds	r3, #24
 8010760:	4619      	mov	r1, r3
 8010762:	4610      	mov	r0, r2
 8010764:	f7ff fb42 	bl	800fdec <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	689a      	ldr	r2, [r3, #8]
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	429a      	cmp	r2, r3
 8010772:	da03      	bge.n	801077c <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	69ba      	ldr	r2, [r7, #24]
 8010778:	67da      	str	r2, [r3, #124]	@ 0x7c
 801077a:	e002      	b.n	8010782 <lTCPWindowTxAdd+0xfc>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2200      	movs	r2, #0
 8010780:	67da      	str	r2, [r3, #124]	@ 0x7c
            while( lBytesLeft > 0 )
 8010782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010784:	2b00      	cmp	r3, #0
 8010786:	dcb7      	bgt.n	80106f8 <lTCPWindowTxAdd+0x72>
 8010788:	e000      	b.n	801078c <lTCPWindowTxAdd+0x106>
                    if( lDone != 0 )
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
                    }

                    break;
 801078a:	bf00      	nop
                }
            }

            return lDone;
 801078c:	6a3b      	ldr	r3, [r7, #32]
        }
 801078e:	4618      	mov	r0, r3
 8010790:	3728      	adds	r7, #40	@ 0x28
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8010796:	b480      	push	{r7}
 8010798:	b083      	sub	sp, #12
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d101      	bne.n	80107ac <xTCPWindowTxDone+0x16>
 80107a8:	2301      	movs	r3, #1
 80107aa:	e000      	b.n	80107ae <xTCPWindowTxDone+0x18>
 80107ac:	2300      	movs	r3, #0
        }
 80107ae:	4618      	mov	r0, r3
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr

080107ba <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b086      	sub	sp, #24
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	3354      	adds	r3, #84	@ 0x54
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff fcc6 	bl	801015a <xTCPWindowPeekHead>
 80107ce:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d102      	bne.n	80107dc <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 80107d6:	2300      	movs	r3, #0
 80107d8:	613b      	str	r3, [r7, #16]
 80107da:	e02f      	b.n	801083c <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6a1b      	ldr	r3, [r3, #32]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d306      	bcc.n	80107f6 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6a1b      	ldr	r3, [r3, #32]
 80107f0:	1ad3      	subs	r3, r2, r3
 80107f2:	617b      	str	r3, [r7, #20]
 80107f4:	e001      	b.n	80107fa <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 80107f6:	2300      	movs	r3, #0
 80107f8:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 80107fa:	6979      	ldr	r1, [r7, #20]
 80107fc:	6838      	ldr	r0, [r7, #0]
 80107fe:	f7fa f805 	bl	800a80c <FreeRTOS_min_uint32>
 8010802:	4602      	mov	r2, r0
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	1a9b      	subs	r3, r3, r2
 8010808:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	461a      	mov	r2, r3
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	4293      	cmp	r3, r2
 8010814:	d302      	bcc.n	801081c <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8010816:	2301      	movs	r3, #1
 8010818:	613b      	str	r3, [r7, #16]
 801081a:	e001      	b.n	8010820 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 801081c:	2300      	movs	r3, #0
 801081e:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00a      	beq.n	801083c <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	4619      	mov	r1, r3
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 8010834:	429a      	cmp	r2, r3
 8010836:	d201      	bcs.n	801083c <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8010838:	2300      	movs	r3, #0
 801083a:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 801083c:	693b      	ldr	r3, [r7, #16]
        }
 801083e:	4618      	mov	r0, r3
 8010840:	3718      	adds	r7, #24
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}

08010846 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8010846:	b580      	push	{r7, lr}
 8010848:	b08a      	sub	sp, #40	@ 0x28
 801084a:	af00      	add	r7, sp, #0
 801084c:	60f8      	str	r0, [r7, #12]
 801084e:	60b9      	str	r1, [r7, #8]
 8010850:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801085c:	2b00      	cmp	r3, #0
 801085e:	d002      	beq.n	8010866 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 8010860:	2301      	movs	r3, #1
 8010862:	627b      	str	r3, [r7, #36]	@ 0x24
 8010864:	e050      	b.n	8010908 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3368      	adds	r3, #104	@ 0x68
 801086a:	4618      	mov	r0, r3
 801086c:	f7ff fc75 	bl	801015a <xTCPWindowPeekHead>
 8010870:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d01f      	beq.n	80108b8 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801087c:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 801087e:	6a3b      	ldr	r3, [r7, #32]
 8010880:	3310      	adds	r3, #16
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff facf 	bl	800fe26 <ulTimerGetAge>
 8010888:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 801088a:	6a3b      	ldr	r3, [r7, #32]
 801088c:	7d1b      	ldrb	r3, [r3, #20]
 801088e:	461a      	mov	r2, r3
 8010890:	2301      	movs	r3, #1
 8010892:	4093      	lsls	r3, r2
 8010894:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	69fa      	ldr	r2, [r7, #28]
 801089a:	fb02 f303 	mul.w	r3, r2, r3
 801089e:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 80108a0:	697a      	ldr	r2, [r7, #20]
 80108a2:	69bb      	ldr	r3, [r7, #24]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d904      	bls.n	80108b2 <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 80108a8:	697a      	ldr	r2, [r7, #20]
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	1ad2      	subs	r2, r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 80108b2:	2301      	movs	r3, #1
 80108b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80108b6:	e027      	b.n	8010908 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	3354      	adds	r3, #84	@ 0x54
 80108bc:	4618      	mov	r0, r3
 80108be:	f7ff fc4c 	bl	801015a <xTCPWindowPeekHead>
 80108c2:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d102      	bne.n	80108d0 <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 80108ca:	2300      	movs	r3, #0
 80108cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80108ce:	e01b      	b.n	8010908 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80108d0:	68b9      	ldr	r1, [r7, #8]
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f7ff ff71 	bl	80107ba <prvTCPWindowTxHasSpace>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d102      	bne.n	80108e4 <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 80108de:	2300      	movs	r3, #0
 80108e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80108e2:	e011      	b.n	8010908 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f003 0302 	and.w	r3, r3, #2
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d008      	beq.n	8010904 <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	689a      	ldr	r2, [r3, #8]
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80108fa:	429a      	cmp	r2, r3
 80108fc:	da02      	bge.n	8010904 <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 80108fe:	2300      	movs	r3, #0
 8010900:	627b      	str	r3, [r7, #36]	@ 0x24
 8010902:	e001      	b.n	8010908 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 8010904:	2301      	movs	r3, #1
 8010906:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 8010908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801090a:	4618      	mov	r0, r3
 801090c:	3728      	adds	r7, #40	@ 0x28
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 8010912:	b580      	push	{r7, lr}
 8010914:	b084      	sub	sp, #16
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	3368      	adds	r3, #104	@ 0x68
 801091e:	4618      	mov	r0, r3
 8010920:	f7ff fc1b 	bl	801015a <xTCPWindowPeekHead>
 8010924:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d021      	beq.n	8010970 <pxTCPWindowTx_GetWaitQueue+0x5e>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	7d1b      	ldrb	r3, [r3, #20]
 8010930:	461a      	mov	r2, r3
 8010932:	2301      	movs	r3, #1
 8010934:	4093      	lsls	r3, r2
 8010936:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801093c:	461a      	mov	r2, r3
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	fb02 f303 	mul.w	r3, r2, r3
 8010944:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	3310      	adds	r3, #16
 801094a:	4618      	mov	r0, r3
 801094c:	f7ff fa6b 	bl	800fe26 <ulTimerGetAge>
 8010950:	4602      	mov	r2, r0
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	4293      	cmp	r3, r2
 8010956:	d209      	bcs.n	801096c <pxTCPWindowTx_GetWaitQueue+0x5a>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	3368      	adds	r3, #104	@ 0x68
 801095c:	4618      	mov	r0, r3
 801095e:	f7ff fbe3 	bl	8010128 <xTCPWindowGetHead>
 8010962:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2200      	movs	r2, #0
 8010968:	755a      	strb	r2, [r3, #21]
 801096a:	e001      	b.n	8010970 <pxTCPWindowTx_GetWaitQueue+0x5e>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 801096c:	2300      	movs	r3, #0
 801096e:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 8010970:	68fb      	ldr	r3, [r7, #12]
        }
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 801097a:	b580      	push	{r7, lr}
 801097c:	b084      	sub	sp, #16
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	3354      	adds	r3, #84	@ 0x54
 8010988:	4618      	mov	r0, r3
 801098a:	f7ff fbe6 	bl	801015a <xTCPWindowPeekHead>
 801098e:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d02e      	beq.n	80109f4 <pxTCPWindowTx_GetTXQueue+0x7a>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	f003 0302 	and.w	r3, r3, #2
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d008      	beq.n	80109b6 <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	689a      	ldr	r2, [r3, #8]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80109ac:	429a      	cmp	r2, r3
 80109ae:	da02      	bge.n	80109b6 <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 80109b0:	2300      	movs	r3, #0
 80109b2:	60fb      	str	r3, [r7, #12]
 80109b4:	e01e      	b.n	80109f4 <pxTCPWindowTx_GetTXQueue+0x7a>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7ff fefe 	bl	80107ba <prvTCPWindowTxHasSpace>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d102      	bne.n	80109ca <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 80109c4:	2300      	movs	r3, #0
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	e014      	b.n	80109f4 <pxTCPWindowTx_GetTXQueue+0x7a>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	3354      	adds	r3, #84	@ 0x54
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7ff fbaa 	bl	8010128 <xTCPWindowGetHead>
 80109d4:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109da:	68fa      	ldr	r2, [r7, #12]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d102      	bne.n	80109e6 <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	68fa      	ldr	r2, [r7, #12]
 80109ec:	6892      	ldr	r2, [r2, #8]
 80109ee:	441a      	add	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	629a      	str	r2, [r3, #40]	@ 0x28
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 80109f4:	68fb      	ldr	r3, [r7, #12]
        }
 80109f6:	4618      	mov	r0, r3
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b088      	sub	sp, #32
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	60f8      	str	r0, [r7, #12]
 8010a06:	60b9      	str	r1, [r7, #8]
 8010a08:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	3340      	adds	r3, #64	@ 0x40
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7ff fb88 	bl	8010128 <xTCPWindowGetHead>
 8010a18:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d10b      	bne.n	8010a40 <ulTCPWindowTxGet+0x42>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f7ff ff72 	bl	8010912 <pxTCPWindowTx_GetWaitQueue>
 8010a2e:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d104      	bne.n	8010a40 <ulTCPWindowTxGet+0x42>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8010a36:	68b9      	ldr	r1, [r7, #8]
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7ff ff9e 	bl	801097a <pxTCPWindowTx_GetTXQueue>
 8010a3e:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d049      	beq.n	8010ada <ulTCPWindowTxGet+0xdc>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00d      	beq.n	8010a6a <ulTCPWindowTxGet+0x6c>
	__asm volatile
 8010a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a52:	b672      	cpsid	i
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	b662      	cpsie	i
 8010a62:	613b      	str	r3, [r7, #16]
}
 8010a64:	bf00      	nop
 8010a66:	bf00      	nop
 8010a68:	e7fd      	b.n	8010a66 <ulTCPWindowTxGet+0x68>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	3318      	adds	r3, #24
 8010a74:	4619      	mov	r1, r3
 8010a76:	4610      	mov	r0, r2
 8010a78:	f7ff f9b8 	bl	800fdec <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8010a7c:	69fa      	ldr	r2, [r7, #28]
 8010a7e:	7d93      	ldrb	r3, [r2, #22]
 8010a80:	f043 0301 	orr.w	r3, r3, #1
 8010a84:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	7d1b      	ldrb	r3, [r3, #20]
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	b2da      	uxtb	r2, r3
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	7d1b      	ldrb	r3, [r3, #20]
 8010a96:	2b04      	cmp	r3, #4
 8010a98:	d10f      	bne.n	8010aba <ulTCPWindowTxGet+0xbc>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	689a      	ldr	r2, [r3, #8]
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8010aa4:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d907      	bls.n	8010aba <ulTCPWindowTxGet+0xbc>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8010ab4:	8afa      	ldrh	r2, [r7, #22]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	3310      	adds	r3, #16
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7ff f9a4 	bl	800fe0c <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	68da      	ldr	r2, [r3, #12]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8010ad4:	69fb      	ldr	r3, [r7, #28]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8010ada:	69bb      	ldr	r3, [r7, #24]
        }
 8010adc:	4618      	mov	r0, r3
 8010ade:	3720      	adds	r7, #32
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b086      	sub	sp, #24
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	3310      	adds	r3, #16
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff f997 	bl	800fe26 <ulTimerGetAge>
 8010af8:	4603      	mov	r3, r0
 8010afa:	617b      	str	r3, [r7, #20]
            int32_t lSum = 0;
 8010afc:	2300      	movs	r3, #0
 8010afe:	60bb      	str	r3, [r7, #8]
            int32_t lWeight = 0;
 8010b00:	2300      	movs	r3, #0
 8010b02:	613b      	str	r3, [r7, #16]
            int32_t lDivisor = 0;
 8010b04:	2300      	movs	r3, #0
 8010b06:	60fb      	str	r3, [r7, #12]

            mS = ( mS < 0 ) ? ipINT32_MAX_VALUE : mS;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	db01      	blt.n	8010b12 <prvTCPWindowTxCheckAck_CalcSRTT+0x2e>
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	e001      	b.n	8010b16 <prvTCPWindowTxCheckAck_CalcSRTT+0x32>
 8010b12:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010b16:	617b      	str	r3, [r7, #20]

            if( pxWindow->lSRTT >= mS )
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b1c:	697a      	ldr	r2, [r7, #20]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	dc09      	bgt.n	8010b36 <prvTCPWindowTxCheckAck_CalcSRTT+0x52>
            {
                /* RTT becomes smaller: adapt slowly. */
                lWeight = winSRTT_DECREMENT_CURRENT;
 8010b22:	2307      	movs	r3, #7
 8010b24:	613b      	str	r3, [r7, #16]
                lDivisor = winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT;
 8010b26:	2308      	movs	r3, #8
 8010b28:	60fb      	str	r3, [r7, #12]
                mS = FreeRTOS_multiply_int32( mS,
 8010b2a:	2101      	movs	r1, #1
 8010b2c:	6978      	ldr	r0, [r7, #20]
 8010b2e:	f7f9 feb8 	bl	800a8a2 <FreeRTOS_multiply_int32>
 8010b32:	6178      	str	r0, [r7, #20]
 8010b34:	e008      	b.n	8010b48 <prvTCPWindowTxCheckAck_CalcSRTT+0x64>
                                              winSRTT_DECREMENT_NEW );
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                lWeight = winSRTT_INCREMENT_CURRENT;
 8010b36:	2306      	movs	r3, #6
 8010b38:	613b      	str	r3, [r7, #16]
                lDivisor = winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT;
 8010b3a:	2308      	movs	r3, #8
 8010b3c:	60fb      	str	r3, [r7, #12]
                mS = FreeRTOS_multiply_int32( mS,
 8010b3e:	2102      	movs	r1, #2
 8010b40:	6978      	ldr	r0, [r7, #20]
 8010b42:	f7f9 feae 	bl	800a8a2 <FreeRTOS_multiply_int32>
 8010b46:	6178      	str	r0, [r7, #20]
                                              winSRTT_INCREMENT_NEW );
            }

            lSum = FreeRTOS_multiply_int32( pxWindow->lSRTT, lWeight );
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b4c:	6939      	ldr	r1, [r7, #16]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7f9 fea7 	bl	800a8a2 <FreeRTOS_multiply_int32>
 8010b54:	60b8      	str	r0, [r7, #8]
            lSum = FreeRTOS_add_int32( lSum, mS );
 8010b56:	6979      	ldr	r1, [r7, #20]
 8010b58:	68b8      	ldr	r0, [r7, #8]
 8010b5a:	f7f9 fe77 	bl	800a84c <FreeRTOS_add_int32>
 8010b5e:	60b8      	str	r0, [r7, #8]
            pxWindow->lSRTT = lSum / lDivisor;
 8010b60:	68ba      	ldr	r2, [r7, #8]
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	fb92 f2f3 	sdiv	r2, r2, r3
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010b74:	da03      	bge.n	8010b7e <prvTCPWindowTxCheckAck_CalcSRTT+0x9a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010b7c:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8010b7e:	bf00      	nop
 8010b80:	3718      	adds	r7, #24
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b08c      	sub	sp, #48	@ 0x30
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	60f8      	str	r0, [r7, #12]
 8010b8e:	60b9      	str	r1, [r7, #8]
 8010b90:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8010b92:	2300      	movs	r3, #0
 8010b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	3398      	adds	r3, #152	@ 0x98
 8010b9e:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8010ba6:	e06d      	b.n	8010c84 <prvTCPWindowTxCheckAck+0xfe>
            {
                xDoUnlink = pdFALSE;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010bc0:	f7ff f8e9 	bl	800fd96 <xSequenceGreaterThan>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d15b      	bne.n	8010c82 <prvTCPWindowTxCheckAck+0xfc>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8010bca:	69bb      	ldr	r3, [r7, #24]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d163      	bne.n	8010c9c <prvTCPWindowTxCheckAck+0x116>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8010bd4:	69bb      	ldr	r3, [r7, #24]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	7d9b      	ldrb	r3, [r3, #22]
 8010bde:	f003 0302 	and.w	r3, r3, #2
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d127      	bne.n	8010c38 <prvTCPWindowTxCheckAck+0xb2>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8010be8:	69bb      	ldr	r3, [r7, #24]
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	4413      	add	r3, r2
 8010bf0:	6879      	ldr	r1, [r7, #4]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7ff f8cf 	bl	800fd96 <xSequenceGreaterThan>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d006      	beq.n	8010c0c <prvTCPWindowTxCheckAck+0x86>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	69db      	ldr	r3, [r3, #28]
 8010c06:	1ad3      	subs	r3, r2, r3
 8010c08:	613b      	str	r3, [r7, #16]
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8010c0a:	e048      	b.n	8010c9e <prvTCPWindowTxCheckAck+0x118>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8010c0c:	69ba      	ldr	r2, [r7, #24]
 8010c0e:	7d93      	ldrb	r3, [r2, #22]
 8010c10:	f043 0302 	orr.w	r3, r3, #2
 8010c14:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8010c16:	69bb      	ldr	r3, [r7, #24]
 8010c18:	7d1b      	ldrb	r3, [r3, #20]
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d10a      	bne.n	8010c34 <prvTCPWindowTxCheckAck+0xae>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8010c1e:	69bb      	ldr	r3, [r7, #24]
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d103      	bne.n	8010c34 <prvTCPWindowTxCheckAck+0xae>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8010c2c:	69b9      	ldr	r1, [r7, #24]
 8010c2e:	68f8      	ldr	r0, [r7, #12]
 8010c30:	f7ff ff58 	bl	8010ae4 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8010c34:	2301      	movs	r3, #1
 8010c36:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	6a1b      	ldr	r3, [r3, #32]
 8010c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d10e      	bne.n	8010c60 <prvTCPWindowTxCheckAck+0xda>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	6a1a      	ldr	r2, [r3, #32]
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	441a      	add	r2, r3
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8010c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	4413      	add	r3, r2
 8010c54:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8010c56:	69b8      	ldr	r0, [r7, #24]
 8010c58:	f7ff fa98 	bl	801018c <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8010c60:	6a3b      	ldr	r3, [r7, #32]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d008      	beq.n	8010c78 <prvTCPWindowTxCheckAck+0xf2>
 8010c66:	69bb      	ldr	r3, [r7, #24]
 8010c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d004      	beq.n	8010c78 <prvTCPWindowTxCheckAck+0xf2>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	3318      	adds	r3, #24
 8010c72:	4618      	mov	r0, r3
 8010c74:	f002 ff25 	bl	8013ac2 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8010c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c80:	e000      	b.n	8010c84 <prvTCPWindowTxCheckAck+0xfe>
                    continue;
 8010c82:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8010c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c86:	69fb      	ldr	r3, [r7, #28]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d008      	beq.n	8010c9e <prvTCPWindowTxCheckAck+0x118>
 8010c8c:	6879      	ldr	r1, [r7, #4]
 8010c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010c90:	f7ff f86b 	bl	800fd6a <xSequenceLessThan>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d186      	bne.n	8010ba8 <prvTCPWindowTxCheckAck+0x22>
 8010c9a:	e000      	b.n	8010c9e <prvTCPWindowTxCheckAck+0x118>
                    break;
 8010c9c:	bf00      	nop
            }

            return ulBytesConfirmed;
 8010c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3730      	adds	r7, #48	@ 0x30
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b086      	sub	sp, #24
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	3370      	adds	r3, #112	@ 0x70
 8010cba:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8010cc2:	e033      	b.n	8010d2c <prvTCPWindowFastRetransmit+0x84>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	7d9b      	ldrb	r3, [r3, #22]
 8010cd4:	f003 0302 	and.w	r3, r3, #2
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d126      	bne.n	8010d2c <prvTCPWindowFastRetransmit+0x84>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	6839      	ldr	r1, [r7, #0]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7ff f840 	bl	800fd6a <xSequenceLessThan>
 8010cea:	4603      	mov	r3, r0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d01d      	beq.n	8010d2c <prvTCPWindowFastRetransmit+0x84>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	7d5b      	ldrb	r3, [r3, #21]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	b2da      	uxtb	r2, r3
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	7d5b      	ldrb	r3, [r3, #21]
 8010d00:	2b03      	cmp	r3, #3
 8010d02:	d113      	bne.n	8010d2c <prvTCPWindowFastRetransmit+0x84>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	2200      	movs	r2, #0
 8010d08:	751a      	strb	r2, [r3, #20]
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	3318      	adds	r3, #24
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f002 fed7 	bl	8013ac2 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	3318      	adds	r3, #24
 8010d1e:	4619      	mov	r1, r3
 8010d20:	4610      	mov	r0, r2
 8010d22:	f7ff f863 	bl	800fdec <vListInsertFifo>
                            ulCount++;
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8010d2c:	697a      	ldr	r2, [r7, #20]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d1c7      	bne.n	8010cc4 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8010d34:	693b      	ldr	r3, [r7, #16]
        }
 8010d36:	4618      	mov	r0, r3
 8010d38:	3718      	adds	r7, #24
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}

08010d3e <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8010d3e:	b580      	push	{r7, lr}
 8010d40:	b084      	sub	sp, #16
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
 8010d46:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6a1b      	ldr	r3, [r3, #32]
 8010d4c:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8010d4e:	68b9      	ldr	r1, [r7, #8]
 8010d50:	6838      	ldr	r0, [r7, #0]
 8010d52:	f7fe fff5 	bl	800fd40 <xSequenceLessThanOrEqual>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d002      	beq.n	8010d62 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	60fb      	str	r3, [r7, #12]
 8010d60:	e005      	b.n	8010d6e <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	68b9      	ldr	r1, [r7, #8]
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7ff ff0d 	bl	8010b86 <prvTCPWindowTxCheckAck>
 8010d6c:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
        }
 8010d70:	4618      	mov	r0, r3
 8010d72:	3710      	adds	r7, #16
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b086      	sub	sp, #24
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	6a1b      	ldr	r3, [r3, #32]
 8010d88:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	68b9      	ldr	r1, [r7, #8]
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f7ff fef9 	bl	8010b86 <prvTCPWindowTxCheckAck>
 8010d94:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8010d96:	68b9      	ldr	r1, [r7, #8]
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f7ff ff85 	bl	8010ca8 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8010d9e:	4b06      	ldr	r3, [pc, #24]	@ (8010db8 <ulTCPWindowTxSack+0x40>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	dd03      	ble.n	8010dae <ulTCPWindowTxSack+0x36>
 8010da6:	6979      	ldr	r1, [r7, #20]
 8010da8:	68b8      	ldr	r0, [r7, #8]
 8010daa:	f7fe fff4 	bl	800fd96 <xSequenceGreaterThan>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8010dae:	693b      	ldr	r3, [r7, #16]
        }
 8010db0:	4618      	mov	r0, r3
 8010db2:	3718      	adds	r7, #24
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	200026d4 	.word	0x200026d4

08010dbc <vProcessGeneratedUDPPacket>:
 *        packet such as cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d00d      	beq.n	8010de6 <vProcessGeneratedUDPPacket+0x2a>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dce:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	899b      	ldrh	r3, [r3, #12]
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010dda:	d103      	bne.n	8010de4 <vProcessGeneratedUDPPacket+0x28>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipIPv4_FRAME_TYPE:
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f849 	bl	8010e74 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8010de2:	e000      	b.n	8010de6 <vProcessGeneratedUDPPacket+0x2a>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8010de4:	bf00      	nop
        }
    }
}
 8010de6:	bf00      	nop
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForResolution )
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b088      	sub	sp, #32
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	60f8      	str	r0, [r7, #12]
 8010df6:	460b      	mov	r3, r1
 8010df8:	607a      	str	r2, [r7, #4]
 8010dfa:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	61fb      	str	r3, [r7, #28]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d10d      	bne.n	8010e22 <xProcessReceivedUDPPacket+0x34>
	__asm volatile
 8010e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e0a:	b672      	cpsid	i
 8010e0c:	f383 8811 	msr	BASEPRI, r3
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	f3bf 8f4f 	dsb	sy
 8010e18:	b662      	cpsie	i
 8010e1a:	617b      	str	r3, [r7, #20]
}
 8010e1c:	bf00      	nop
 8010e1e:	bf00      	nop
 8010e20:	e7fd      	b.n	8010e1e <xProcessReceivedUDPPacket+0x30>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d10d      	bne.n	8010e46 <xProcessReceivedUDPPacket+0x58>
	__asm volatile
 8010e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e2e:	b672      	cpsid	i
 8010e30:	f383 8811 	msr	BASEPRI, r3
 8010e34:	f3bf 8f6f 	isb	sy
 8010e38:	f3bf 8f4f 	dsb	sy
 8010e3c:	b662      	cpsie	i
 8010e3e:	613b      	str	r3, [r7, #16]
}
 8010e40:	bf00      	nop
 8010e42:	bf00      	nop
 8010e44:	e7fd      	b.n	8010e42 <xProcessReceivedUDPPacket+0x54>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e4a:	61bb      	str	r3, [r7, #24]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	899b      	ldrh	r3, [r3, #12]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e56:	d107      	bne.n	8010e68 <xProcessReceivedUDPPacket+0x7a>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8010e58:	897b      	ldrh	r3, [r7, #10]
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	f000 f902 	bl	8011068 <xProcessReceivedUDPPacket_IPv4>
 8010e64:	61f8      	str	r0, [r7, #28]
                                                          usPort, pxIsWaitingForResolution );
                break;
 8010e66:	e000      	b.n	8010e6a <xProcessReceivedUDPPacket+0x7c>
                                                          usPort, pxIsWaitingForResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8010e68:	bf00      	nop
    }

    return xReturn;
 8010e6a:	69fb      	ldr	r3, [r7, #28]
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3720      	adds	r7, #32
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b08e      	sub	sp, #56	@ 0x38
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eResolutionLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	695b      	ldr	r3, [r3, #20]
 8010e80:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e86:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e8c:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d104      	bne.n	8010ea0 <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e9a:	3b2a      	subs	r3, #42	@ 0x2a
 8010e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e9e:	e003      	b.n	8010ea8 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ea4:	3b2a      	subs	r3, #42	@ 0x2a
 8010ea6:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8010ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010eaa:	f107 0208 	add.w	r2, r7, #8
 8010eae:	f107 030c 	add.w	r3, r7, #12
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7f6 ffde 	bl	8007e74 <eARPGetCacheEntry>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d102      	bne.n	8010ecc <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eResolutionFailed )
 8010ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010ed0:	2b02      	cmp	r3, #2
 8010ed2:	d07f      	beq.n	8010fd4 <vProcessGeneratedUDPPacket_IPv4+0x160>
    {
        if( eReturned == eResolutionCacheHit )
 8010ed4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d158      	bne.n	8010f8e <vProcessGeneratedUDPPacket_IPv4+0x11a>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8010edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ede:	330e      	adds	r3, #14
 8010ee0:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d01a      	beq.n	8010f20 <vProcessGeneratedUDPPacket_IPv4+0xac>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8010eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eec:	3322      	adds	r3, #34	@ 0x22
 8010eee:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8010ef4:	6a3b      	ldr	r3, [r7, #32]
 8010ef6:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8010f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	3308      	adds	r3, #8
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	6a3b      	ldr	r3, [r7, #32]
 8010f0a:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	889b      	ldrh	r3, [r3, #4]
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	6a3b      	ldr	r3, [r7, #32]
 8010f14:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8010f16:	6a3b      	ldr	r3, [r7, #32]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	719a      	strb	r2, [r3, #6]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8010f20:	4b50      	ldr	r3, [pc, #320]	@ (8011064 <vProcessGeneratedUDPPacket_IPv4+0x1f0>)
 8010f22:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f28:	3306      	adds	r3, #6
 8010f2a:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8010f2c:	2218      	movs	r2, #24
 8010f2e:	69f9      	ldr	r1, [r7, #28]
 8010f30:	69b8      	ldr	r0, [r7, #24]
 8010f32:	f006 fac8 	bl	80174c6 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d109      	bne.n	8010f52 <vProcessGeneratedUDPPacket_IPv4+0xde>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f40:	2201      	movs	r2, #1
 8010f42:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8010f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	331c      	adds	r3, #28
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4e:	805a      	strh	r2, [r3, #2]
 8010f50:	e005      	b.n	8010f5e <vProcessGeneratedUDPPacket_IPv4+0xea>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8010f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	331c      	adds	r3, #28
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f5c:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8010f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f60:	885b      	ldrh	r3, [r3, #2]
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f66:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	695a      	ldr	r2, [r3, #20]
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f6e:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d004      	beq.n	8010f82 <vProcessGeneratedUDPPacket_IPv4+0x10e>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f80:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8010f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f84:	2200      	movs	r2, #0
 8010f86:	719a      	strb	r2, [r3, #6]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	71da      	strb	r2, [r3, #7]
 8010f8c:	e022      	b.n	8010fd4 <vProcessGeneratedUDPPacket_IPv4+0x160>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eResolutionCacheMiss )
 8010f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d11b      	bne.n	8010fce <vProcessGeneratedUDPPacket_IPv4+0x15a>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	f7f6 fe57 	bl	8007c50 <vARPRefreshCacheEntry>
            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */
            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress );
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fa f8b5 	bl	800b114 <FreeRTOS_FindEndPointOnNetMask>
 8010faa:	4602      	mov	r2, r0
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d103      	bne.n	8010fc0 <vProcessGeneratedUDPPacket_IPv4+0x14c>
            {
                eReturned = eResolutionFailed;
 8010fb8:	2302      	movs	r3, #2
 8010fba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010fbe:	e009      	b.n	8010fd4 <vProcessGeneratedUDPPacket_IPv4+0x160>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7f7 f996 	bl	80082f8 <vARPGenerateRequestPacket>
 8010fcc:	e002      	b.n	8010fd4 <vProcessGeneratedUDPPacket_IPv4+0x160>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eResolutionFailed;
 8010fce:	2302      	movs	r3, #2
 8010fd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eResolutionFailed )
 8010fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010fd8:	2b02      	cmp	r3, #2
 8010fda:	d03c      	beq.n	8011056 <vProcessGeneratedUDPPacket_IPv4+0x1e2>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d034      	beq.n	801104e <vProcessGeneratedUDPPacket_IPv4+0x1da>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fea:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff0:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	1d98      	adds	r0, r3, #6
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ffa:	3338      	adds	r3, #56	@ 0x38
 8010ffc:	2206      	movs	r2, #6
 8010ffe:	4619      	mov	r1, r3
 8011000:	f006 fa61 	bl	80174c6 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011008:	2b3b      	cmp	r3, #59	@ 0x3b
 801100a:	d812      	bhi.n	8011032 <vProcessGeneratedUDPPacket_IPv4+0x1be>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011012:	e008      	b.n	8011026 <vProcessGeneratedUDPPacket_IPv4+0x1b2>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801101a:	4413      	add	r3, r2
 801101c:	2200      	movs	r2, #0
 801101e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8011020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011022:	3301      	adds	r3, #1
 8011024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011028:	2b3b      	cmp	r3, #59	@ 0x3b
 801102a:	ddf3      	ble.n	8011014 <vProcessGeneratedUDPPacket_IPv4+0x1a0>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	223c      	movs	r2, #60	@ 0x3c
 8011030:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d011      	beq.n	801105c <vProcessGeneratedUDPPacket_IPv4+0x1e8>
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00d      	beq.n	801105c <vProcessGeneratedUDPPacket_IPv4+0x1e8>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	2201      	movs	r2, #1
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	6978      	ldr	r0, [r7, #20]
 801104a:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801104c:	e006      	b.n	801105c <vProcessGeneratedUDPPacket_IPv4+0x1e8>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 fa34 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
}
 8011054:	e002      	b.n	801105c <vProcessGeneratedUDPPacket_IPv4+0x1e8>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 fa30 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
}
 801105c:	bf00      	nop
 801105e:	3738      	adds	r7, #56	@ 0x38
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	080186dc 	.word	0x080186dc

08011068 <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b09b      	sub	sp, #108	@ 0x6c
 801106c:	af02      	add	r7, sp, #8
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	460b      	mov	r3, r1
 8011072:	607a      	str	r2, [r7, #4]
 8011074:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8011076:	2301      	movs	r3, #1
 8011078:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d10d      	bne.n	801109c <xProcessReceivedUDPPacket_IPv4+0x34>
	__asm volatile
 8011080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011084:	b672      	cpsid	i
 8011086:	f383 8811 	msr	BASEPRI, r3
 801108a:	f3bf 8f6f 	isb	sy
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	b662      	cpsie	i
 8011094:	647b      	str	r3, [r7, #68]	@ 0x44
}
 8011096:	bf00      	nop
 8011098:	bf00      	nop
 801109a:	e7fd      	b.n	8011098 <xProcessReceivedUDPPacket_IPv4+0x30>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d10d      	bne.n	80110c0 <xProcessReceivedUDPPacket_IPv4+0x58>
	__asm volatile
 80110a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a8:	b672      	cpsid	i
 80110aa:	f383 8811 	msr	BASEPRI, r3
 80110ae:	f3bf 8f6f 	isb	sy
 80110b2:	f3bf 8f4f 	dsb	sy
 80110b6:	b662      	cpsie	i
 80110b8:	643b      	str	r3, [r7, #64]	@ 0x40
}
 80110ba:	bf00      	nop
 80110bc:	bf00      	nop
 80110be:	e7fd      	b.n	80110bc <xProcessReceivedUDPPacket_IPv4+0x54>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110ca:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80110cc:	897b      	ldrh	r3, [r7, #10]
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fa ffea 	bl	800c0a8 <pxUDPSocketLookup>
 80110d4:	6538      	str	r0, [r7, #80]	@ 0x50

    *pxIsWaitingForARPResolution = pdFALSE;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2200      	movs	r2, #0
 80110da:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 80110dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f000 808c 	beq.w	80111fc <xProcessReceivedUDPPacket_IPv4+0x194>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 80110e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d018      	beq.n	801111c <xProcessReceivedUDPPacket_IPv4+0xb4>
 80110ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d014      	beq.n	801111c <xProcessReceivedUDPPacket_IPv4+0xb4>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80110f2:	68f8      	ldr	r0, [r7, #12]
 80110f4:	f7f6 fd26 	bl	8007b44 <xCheckRequiresARPResolution>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d105      	bne.n	801110a <xProcessReceivedUDPPacket_IPv4+0xa2>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2201      	movs	r2, #1
 8011102:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8011104:	2300      	movs	r3, #0
 8011106:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    break;
 8011108:	e08f      	b.n	801122a <xProcessReceivedUDPPacket_IPv4+0x1c2>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801110a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801110c:	1d9a      	adds	r2, r3, #6
 801110e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011110:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8011114:	4619      	mov	r1, r3
 8011116:	4610      	mov	r0, r2
 8011118:	f7f6 fd64 	bl	8007be4 <vARPRefreshCacheEntryAge>
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011120:	332a      	adds	r3, #42	@ 0x2a
 8011122:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8011124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011128:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801112e:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	695b      	ldr	r3, [r3, #20]
 8011134:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8011136:	2302      	movs	r3, #2
 8011138:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801113c:	2318      	movs	r3, #24
 801113e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8011142:	897b      	ldrh	r3, [r7, #10]
 8011144:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 8011146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011148:	f8d3 301e 	ldr.w	r3, [r3, #30]
 801114c:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 801114e:	2302      	movs	r3, #2
 8011150:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8011152:	2318      	movs	r3, #24
 8011154:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801115a:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 801115e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011162:	f107 0310 	add.w	r3, r7, #16
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 801116a:	460b      	mov	r3, r1
 801116c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801116e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011170:	47a0      	blx	r4
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d001      	beq.n	801117c <xProcessReceivedUDPPacket_IPv4+0x114>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8011178:	2300      	movs	r3, #0
 801117a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
            #endif /* ipconfigUSE_CALLBACKS */

            #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
            {
                if( xReturn == pdPASS )
 801117c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801117e:	2b01      	cmp	r3, #1
 8011180:	d107      	bne.n	8011192 <xProcessReceivedUDPPacket_IPv4+0x12a>
                {
                    if( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) >= pxSocket->u.xUDP.uxMaxPackets )
 8011182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011184:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801118a:	429a      	cmp	r2, r3
 801118c:	d301      	bcc.n	8011192 <xProcessReceivedUDPPacket_IPv4+0x12a>
                    {
                        FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket: buffer full %ld >= %ld port %u\n",
                                                 listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ),
                                                 pxSocket->u.xUDP.uxMaxPackets, pxSocket->usLocalPort ) );
                        xReturn = pdFAIL; /* we did not consume or release the buffer */
 801118e:	2300      	movs	r3, #0
 8011190:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8011192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011194:	2b01      	cmp	r3, #1
 8011196:	d148      	bne.n	801122a <xProcessReceivedUDPPacket_IPv4+0x1c2>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8011198:	f003 fe84 	bl	8014ea4 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801119c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801119e:	3358      	adds	r3, #88	@ 0x58
 80111a0:	68fa      	ldr	r2, [r7, #12]
 80111a2:	4611      	mov	r1, r2
 80111a4:	4618      	mov	r0, r3
 80111a6:	f002 fc2f 	bl	8013a08 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80111aa:	f003 fe89 	bl	8014ec0 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80111ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d005      	beq.n	80111c2 <xProcessReceivedUDPPacket_IPv4+0x15a>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80111b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	2101      	movs	r1, #1
 80111bc:	4618      	mov	r0, r3
 80111be:	f002 fb0c 	bl	80137da <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80111c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d00c      	beq.n	80111e4 <xProcessReceivedUDPPacket_IPv4+0x17c>
 80111ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80111ce:	f003 0301 	and.w	r3, r3, #1
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d006      	beq.n	80111e4 <xProcessReceivedUDPPacket_IPv4+0x17c>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80111d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2101      	movs	r1, #1
 80111de:	4618      	mov	r0, r3
 80111e0:	f002 fafb 	bl	80137da <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80111e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d01e      	beq.n	801122a <xProcessReceivedUDPPacket_IPv4+0x1c2>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80111ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111ee:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80111f0:	2300      	movs	r3, #0
 80111f2:	2200      	movs	r2, #0
 80111f4:	2100      	movs	r1, #0
 80111f6:	f002 fe17 	bl	8013e28 <xQueueGenericSend>
 80111fa:	e016      	b.n	801122a <xProcessReceivedUDPPacket_IPv4+0x1c2>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80111fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111fe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8011200:	b29b      	uxth	r3, r3
 8011202:	2b35      	cmp	r3, #53	@ 0x35
 8011204:	d10f      	bne.n	8011226 <xProcessReceivedUDPPacket_IPv4+0x1be>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8011206:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011208:	1d98      	adds	r0, r3, #6
 801120a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801120c:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011214:	461a      	mov	r2, r3
 8011216:	f7f6 fd1b 	bl	8007c50 <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	f7f7 f977 	bl	800850e <ulDNSHandlePacket>
 8011220:	4603      	mov	r3, r0
 8011222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011224:	e001      	b.n	801122a <xProcessReceivedUDPPacket_IPv4+0x1c2>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8011226:	2300      	movs	r3, #0
 8011228:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 801122a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801122c:	4618      	mov	r0, r3
 801122e:	3764      	adds	r7, #100	@ 0x64
 8011230:	46bd      	mov	sp, r7
 8011232:	bd90      	pop	{r4, r7, pc}

08011234 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 801123a:	4b3a      	ldr	r3, [pc, #232]	@ (8011324 <xNetworkBuffersInitialise+0xf0>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d161      	bne.n	8011306 <xNetworkBuffersInitialise+0xd2>
    {
        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            static StaticSemaphore_t xNetworkBufferSemaphoreBuffer;
            xNetworkBufferSemaphore = xSemaphoreCreateCountingStatic(
 8011242:	4a39      	ldr	r2, [pc, #228]	@ (8011328 <xNetworkBuffersInitialise+0xf4>)
 8011244:	213c      	movs	r1, #60	@ 0x3c
 8011246:	203c      	movs	r0, #60	@ 0x3c
 8011248:	f002 fdb1 	bl	8013dae <xQueueCreateCountingSemaphoreStatic>
 801124c:	4603      	mov	r3, r0
 801124e:	4a35      	ldr	r2, [pc, #212]	@ (8011324 <xNetworkBuffersInitialise+0xf0>)
 8011250:	6013      	str	r3, [r2, #0]
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8011252:	4b34      	ldr	r3, [pc, #208]	@ (8011324 <xNetworkBuffersInitialise+0xf0>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d10d      	bne.n	8011276 <xNetworkBuffersInitialise+0x42>
	__asm volatile
 801125a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801125e:	b672      	cpsid	i
 8011260:	f383 8811 	msr	BASEPRI, r3
 8011264:	f3bf 8f6f 	isb	sy
 8011268:	f3bf 8f4f 	dsb	sy
 801126c:	b662      	cpsie	i
 801126e:	607b      	str	r3, [r7, #4]
}
 8011270:	bf00      	nop
 8011272:	bf00      	nop
 8011274:	e7fd      	b.n	8011272 <xNetworkBuffersInitialise+0x3e>

        if( xNetworkBufferSemaphore != NULL )
 8011276:	4b2b      	ldr	r3, [pc, #172]	@ (8011324 <xNetworkBuffersInitialise+0xf0>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d043      	beq.n	8011306 <xNetworkBuffersInitialise+0xd2>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 801127e:	4b29      	ldr	r3, [pc, #164]	@ (8011324 <xNetworkBuffersInitialise+0xf0>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	492a      	ldr	r1, [pc, #168]	@ (801132c <xNetworkBuffersInitialise+0xf8>)
 8011284:	4618      	mov	r0, r3
 8011286:	f003 fb13 	bl	80148b0 <vQueueAddToRegistry>
                vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
            }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 801128a:	4829      	ldr	r0, [pc, #164]	@ (8011330 <xNetworkBuffersInitialise+0xfc>)
 801128c:	f002 fb8f 	bl	80139ae <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8011290:	2300      	movs	r3, #0
 8011292:	60bb      	str	r3, [r7, #8]
 8011294:	e031      	b.n	80112fa <xNetworkBuffersInitialise+0xc6>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 8011296:	4927      	ldr	r1, [pc, #156]	@ (8011334 <xNetworkBuffersInitialise+0x100>)
 8011298:	68ba      	ldr	r2, [r7, #8]
 801129a:	4613      	mov	r3, r2
 801129c:	00db      	lsls	r3, r3, #3
 801129e:	1a9b      	subs	r3, r3, r2
 80112a0:	00db      	lsls	r3, r3, #3
 80112a2:	440b      	add	r3, r1
 80112a4:	3324      	adds	r3, #36	@ 0x24
 80112a6:	2200      	movs	r2, #0
 80112a8:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	4613      	mov	r3, r2
 80112ae:	00db      	lsls	r3, r3, #3
 80112b0:	1a9b      	subs	r3, r3, r2
 80112b2:	00db      	lsls	r3, r3, #3
 80112b4:	4a1f      	ldr	r2, [pc, #124]	@ (8011334 <xNetworkBuffersInitialise+0x100>)
 80112b6:	4413      	add	r3, r2
 80112b8:	4618      	mov	r0, r3
 80112ba:	f002 fb98 	bl	80139ee <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 80112be:	68ba      	ldr	r2, [r7, #8]
 80112c0:	4613      	mov	r3, r2
 80112c2:	00db      	lsls	r3, r3, #3
 80112c4:	1a9b      	subs	r3, r3, r2
 80112c6:	00db      	lsls	r3, r3, #3
 80112c8:	4a1a      	ldr	r2, [pc, #104]	@ (8011334 <xNetworkBuffersInitialise+0x100>)
 80112ca:	1899      	adds	r1, r3, r2
 80112cc:	4819      	ldr	r0, [pc, #100]	@ (8011334 <xNetworkBuffersInitialise+0x100>)
 80112ce:	68ba      	ldr	r2, [r7, #8]
 80112d0:	4613      	mov	r3, r2
 80112d2:	00db      	lsls	r3, r3, #3
 80112d4:	1a9b      	subs	r3, r3, r2
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	4403      	add	r3, r0
 80112da:	330c      	adds	r3, #12
 80112dc:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80112de:	68ba      	ldr	r2, [r7, #8]
 80112e0:	4613      	mov	r3, r2
 80112e2:	00db      	lsls	r3, r3, #3
 80112e4:	1a9b      	subs	r3, r3, r2
 80112e6:	00db      	lsls	r3, r3, #3
 80112e8:	4a12      	ldr	r2, [pc, #72]	@ (8011334 <xNetworkBuffersInitialise+0x100>)
 80112ea:	4413      	add	r3, r2
 80112ec:	4619      	mov	r1, r3
 80112ee:	4810      	ldr	r0, [pc, #64]	@ (8011330 <xNetworkBuffersInitialise+0xfc>)
 80112f0:	f002 fbae 	bl	8013a50 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	3301      	adds	r3, #1
 80112f8:	60bb      	str	r3, [r7, #8]
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	2b3b      	cmp	r3, #59	@ 0x3b
 80112fe:	d9ca      	bls.n	8011296 <xNetworkBuffersInitialise+0x62>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8011300:	4b0d      	ldr	r3, [pc, #52]	@ (8011338 <xNetworkBuffersInitialise+0x104>)
 8011302:	223c      	movs	r2, #60	@ 0x3c
 8011304:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8011306:	4b07      	ldr	r3, [pc, #28]	@ (8011324 <xNetworkBuffersInitialise+0xf0>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d102      	bne.n	8011314 <xNetworkBuffersInitialise+0xe0>
    {
        xReturn = pdFAIL;
 801130e:	2300      	movs	r3, #0
 8011310:	60fb      	str	r3, [r7, #12]
 8011312:	e001      	b.n	8011318 <xNetworkBuffersInitialise+0xe4>
    }
    else
    {
        xReturn = pdPASS;
 8011314:	2301      	movs	r3, #1
 8011316:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8011318:	68fb      	ldr	r3, [r7, #12]
}
 801131a:	4618      	mov	r0, r3
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	200026f0 	.word	0x200026f0
 8011328:	200026f4 	.word	0x200026f4
 801132c:	080185a0 	.word	0x080185a0
 8011330:	200026d8 	.word	0x200026d8
 8011334:	20002744 	.word	0x20002744
 8011338:	200026ec 	.word	0x200026ec

0801133c <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
    uint8_t * pucEthernetBufferCopy = pucEthernetBuffer;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	60fb      	str	r3, [r7, #12]

    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBufferCopy != NULL )
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d005      	beq.n	801135a <vReleaseNetworkBuffer+0x1e>
    {
        /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
        /* coverity[misra_c_2012_rule_18_4_violation] */
        pucEthernetBufferCopy -= ipBUFFER_PADDING;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	3b22      	subs	r3, #34	@ 0x22
 8011352:	60fb      	str	r3, [r7, #12]
        vPortFree( ( void * ) pucEthernetBufferCopy );
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f005 fd1d 	bl	8016d94 <vPortFree>
    }
}
 801135a:	bf00      	nop
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
	...

08011364 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b08a      	sub	sp, #40	@ 0x28
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 801136e:	2300      	movs	r3, #0
 8011370:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t uxCount;
    size_t uxMaxAllowedBytes = ( SIZE_MAX >> 1 );
 8011372:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011376:	617b      	str	r3, [r7, #20]
    size_t xRequestedSizeBytesCopy = xRequestedSizeBytes;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	623b      	str	r3, [r7, #32]
    size_t xBytesRequiredForAlignment, xAllocatedBytes;
    BaseType_t xIntegerOverflowed = pdFALSE;
 801137c:	2300      	movs	r3, #0
 801137e:	61bb      	str	r3, [r7, #24]

    if( ( xRequestedSizeBytesCopy < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 8011380:	6a3b      	ldr	r3, [r7, #32]
 8011382:	2b45      	cmp	r3, #69	@ 0x45
 8011384:	d801      	bhi.n	801138a <pxGetNetworkBufferWithDescriptor+0x26>
    {
        /* ARP packets can replace application packets, so the storage must be
         * at least large enough to hold an ARP. */
        xRequestedSizeBytesCopy = baMINIMAL_BUFFER_SIZE;
 8011386:	2346      	movs	r3, #70	@ 0x46
 8011388:	623b      	str	r3, [r7, #32]
    }

    /* Add 2 bytes to xRequestedSizeBytesCopy and round up xRequestedSizeBytesCopy
     * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
    if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, 2U ) == pdFAIL )
 801138a:	6a3b      	ldr	r3, [r7, #32]
 801138c:	f113 0f03 	cmn.w	r3, #3
 8011390:	d803      	bhi.n	801139a <pxGetNetworkBufferWithDescriptor+0x36>
    {
        xRequestedSizeBytesCopy += 2U;
 8011392:	6a3b      	ldr	r3, [r7, #32]
 8011394:	3302      	adds	r3, #2
 8011396:	623b      	str	r3, [r7, #32]
 8011398:	e001      	b.n	801139e <pxGetNetworkBufferWithDescriptor+0x3a>
    }
    else
    {
        xIntegerOverflowed = pdTRUE;
 801139a:	2301      	movs	r3, #1
 801139c:	61bb      	str	r3, [r7, #24]
    }

    if( ( xRequestedSizeBytesCopy & baALIGNMENT_MASK ) != 0U )
 801139e:	6a3b      	ldr	r3, [r7, #32]
 80113a0:	f003 0303 	and.w	r3, r3, #3
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d011      	beq.n	80113cc <pxGetNetworkBufferWithDescriptor+0x68>
    {
        xBytesRequiredForAlignment = baALIGNMENT_BYTES - ( xRequestedSizeBytesCopy & baALIGNMENT_MASK );
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	f003 0303 	and.w	r3, r3, #3
 80113ae:	f1c3 0304 	rsb	r3, r3, #4
 80113b2:	613b      	str	r3, [r7, #16]

        if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, xBytesRequiredForAlignment ) == pdFAIL )
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	43db      	mvns	r3, r3
 80113b8:	6a3a      	ldr	r2, [r7, #32]
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d804      	bhi.n	80113c8 <pxGetNetworkBufferWithDescriptor+0x64>
        {
            xRequestedSizeBytesCopy += xBytesRequiredForAlignment;
 80113be:	6a3a      	ldr	r2, [r7, #32]
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	4413      	add	r3, r2
 80113c4:	623b      	str	r3, [r7, #32]
 80113c6:	e001      	b.n	80113cc <pxGetNetworkBufferWithDescriptor+0x68>
        }
        else
        {
            xIntegerOverflowed = pdTRUE;
 80113c8:	2301      	movs	r3, #1
 80113ca:	61bb      	str	r3, [r7, #24]
        }
    }

    if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, ipBUFFER_PADDING ) == pdFAIL )
 80113cc:	6a3b      	ldr	r3, [r7, #32]
 80113ce:	f113 0f23 	cmn.w	r3, #35	@ 0x23
 80113d2:	d803      	bhi.n	80113dc <pxGetNetworkBufferWithDescriptor+0x78>
    {
        xAllocatedBytes = xRequestedSizeBytesCopy + ipBUFFER_PADDING;
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	3322      	adds	r3, #34	@ 0x22
 80113d8:	61fb      	str	r3, [r7, #28]
 80113da:	e001      	b.n	80113e0 <pxGetNetworkBufferWithDescriptor+0x7c>
    }
    else
    {
        xIntegerOverflowed = pdTRUE;
 80113dc:	2301      	movs	r3, #1
 80113de:	61bb      	str	r3, [r7, #24]
    }

    if( ( xIntegerOverflowed == pdFALSE ) && ( xAllocatedBytes <= uxMaxAllowedBytes ) && ( xNetworkBufferSemaphore != NULL ) )
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d15f      	bne.n	80114a6 <pxGetNetworkBufferWithDescriptor+0x142>
 80113e6:	69fa      	ldr	r2, [r7, #28]
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d85b      	bhi.n	80114a6 <pxGetNetworkBufferWithDescriptor+0x142>
 80113ee:	4b30      	ldr	r3, [pc, #192]	@ (80114b0 <pxGetNetworkBufferWithDescriptor+0x14c>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d057      	beq.n	80114a6 <pxGetNetworkBufferWithDescriptor+0x142>
    {
        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 80113f6:	4b2e      	ldr	r3, [pc, #184]	@ (80114b0 <pxGetNetworkBufferWithDescriptor+0x14c>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	6839      	ldr	r1, [r7, #0]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f002 ffa9 	bl	8014354 <xQueueSemaphoreTake>
 8011402:	4603      	mov	r3, r0
 8011404:	2b01      	cmp	r3, #1
 8011406:	d14e      	bne.n	80114a6 <pxGetNetworkBufferWithDescriptor+0x142>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 8011408:	f005 fac8 	bl	801699c <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 801140c:	4b29      	ldr	r3, [pc, #164]	@ (80114b4 <pxGetNetworkBufferWithDescriptor+0x150>)
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	68db      	ldr	r3, [r3, #12]
 8011412:	627b      	str	r3, [r7, #36]	@ 0x24
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8011414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011416:	4618      	mov	r0, r3
 8011418:	f002 fb53 	bl	8013ac2 <uxListRemove>
            }
            taskEXIT_CRITICAL();
 801141c:	f005 faf4 	bl	8016a08 <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8011420:	4b24      	ldr	r3, [pc, #144]	@ (80114b4 <pxGetNetworkBufferWithDescriptor+0x150>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	60fb      	str	r3, [r7, #12]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 8011426:	4b24      	ldr	r3, [pc, #144]	@ (80114b8 <pxGetNetworkBufferWithDescriptor+0x154>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	68fa      	ldr	r2, [r7, #12]
 801142c:	429a      	cmp	r2, r3
 801142e:	d202      	bcs.n	8011436 <pxGetNetworkBufferWithDescriptor+0xd2>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 8011430:	4a21      	ldr	r2, [pc, #132]	@ (80114b8 <pxGetNetworkBufferWithDescriptor+0x154>)
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 8011436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801143a:	2b00      	cmp	r3, #0
 801143c:	d00d      	beq.n	801145a <pxGetNetworkBufferWithDescriptor+0xf6>
	__asm volatile
 801143e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011442:	b672      	cpsid	i
 8011444:	f383 8811 	msr	BASEPRI, r3
 8011448:	f3bf 8f6f 	isb	sy
 801144c:	f3bf 8f4f 	dsb	sy
 8011450:	b662      	cpsie	i
 8011452:	60bb      	str	r3, [r7, #8]
}
 8011454:	bf00      	nop
 8011456:	bf00      	nop
 8011458:	e7fd      	b.n	8011456 <pxGetNetworkBufferWithDescriptor+0xf2>

            if( xRequestedSizeBytesCopy > 0U )
 801145a:	6a3b      	ldr	r3, [r7, #32]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d022      	beq.n	80114a6 <pxGetNetworkBufferWithDescriptor+0x142>
            {
                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xAllocatedBytes );
 8011460:	69f8      	ldr	r0, [r7, #28]
 8011462:	f005 fbc9 	bl	8016bf8 <pvPortMalloc>
 8011466:	4602      	mov	r2, r0
 8011468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146a:	625a      	str	r2, [r3, #36]	@ 0x24

                if( pxReturn->pucEthernetBuffer == NULL )
 801146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011470:	2b00      	cmp	r3, #0
 8011472:	d105      	bne.n	8011480 <pxGetNetworkBufferWithDescriptor+0x11c>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 8011474:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011476:	f000 f821 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 801147a:	2300      	movs	r3, #0
 801147c:	627b      	str	r3, [r7, #36]	@ 0x24
 801147e:	e012      	b.n	80114a6 <pxGetNetworkBufferWithDescriptor+0x142>
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 8011480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011486:	601a      	str	r2, [r3, #0]

                    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
                    /* coverity[misra_c_2012_rule_18_4_violation] */
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 8011488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801148c:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8011490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011492:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytesCopy;
 8011494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011496:	6a3a      	ldr	r2, [r7, #32]
 8011498:	629a      	str	r2, [r3, #40]	@ 0x28
                    pxReturn->pxInterface = NULL;
 801149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801149c:	2200      	movs	r2, #0
 801149e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    pxReturn->pxEndPoint = NULL;
 80114a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a2:	2200      	movs	r2, #0
 80114a4:	631a      	str	r2, [r3, #48]	@ 0x30
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 80114a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3728      	adds	r7, #40	@ 0x28
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	200026f0 	.word	0x200026f0
 80114b4:	200026d8 	.word	0x200026d8
 80114b8:	200026ec 	.word	0x200026ec

080114bc <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ff ff37 	bl	801133c <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	625a      	str	r2, [r3, #36]	@ 0x24
    pxNetworkBuffer->xDataLength = 0U;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	629a      	str	r2, [r3, #40]	@ 0x28

    taskENTER_CRITICAL();
 80114da:	f005 fa5f 	bl	801699c <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	691b      	ldr	r3, [r3, #16]
 80114e2:	4a0f      	ldr	r2, [pc, #60]	@ (8011520 <vReleaseNetworkBufferAndDescriptor+0x64>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d101      	bne.n	80114ec <vReleaseNetworkBufferAndDescriptor+0x30>
 80114e8:	2301      	movs	r3, #1
 80114ea:	e000      	b.n	80114ee <vReleaseNetworkBufferAndDescriptor+0x32>
 80114ec:	2300      	movs	r3, #0
 80114ee:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d104      	bne.n	8011500 <vReleaseNetworkBufferAndDescriptor+0x44>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4619      	mov	r1, r3
 80114fa:	4809      	ldr	r0, [pc, #36]	@ (8011520 <vReleaseNetworkBufferAndDescriptor+0x64>)
 80114fc:	f002 fa84 	bl	8013a08 <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 8011500:	f005 fa82 	bl	8016a08 <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d106      	bne.n	8011518 <vReleaseNetworkBufferAndDescriptor+0x5c>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 801150a:	4b06      	ldr	r3, [pc, #24]	@ (8011524 <vReleaseNetworkBufferAndDescriptor+0x68>)
 801150c:	6818      	ldr	r0, [r3, #0]
 801150e:	2300      	movs	r3, #0
 8011510:	2200      	movs	r2, #0
 8011512:	2100      	movs	r1, #0
 8011514:	f002 fc88 	bl	8013e28 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8011518:	bf00      	nop
 801151a:	3710      	adds	r7, #16
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}
 8011520:	200026d8 	.word	0x200026d8
 8011524:	200026f0 	.word	0x200026f0

08011528 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8011528:	b480      	push	{r7}
 801152a:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 801152c:	4b03      	ldr	r3, [pc, #12]	@ (801153c <uxGetNumberOfFreeNetworkBuffers+0x14>)
 801152e:	681b      	ldr	r3, [r3, #0]
}
 8011530:	4618      	mov	r0, r3
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	200026d8 	.word	0x200026d8

08011540 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8011540:	b480      	push	{r7}
 8011542:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8011544:	4b03      	ldr	r3, [pc, #12]	@ (8011554 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8011546:	681b      	ldr	r3, [r3, #0]
}
 8011548:	4618      	mov	r0, r3
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	200026ec 	.word	0x200026ec

08011558 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8011560:	2300      	movs	r3, #0
 8011562:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	4a11      	ldr	r2, [pc, #68]	@ (80115ac <xHas_1F_PHYSPCS+0x54>)
 8011568:	4293      	cmp	r3, r2
 801156a:	d016      	beq.n	801159a <xHas_1F_PHYSPCS+0x42>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	4a0f      	ldr	r2, [pc, #60]	@ (80115ac <xHas_1F_PHYSPCS+0x54>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d80f      	bhi.n	8011594 <xHas_1F_PHYSPCS+0x3c>
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4a0e      	ldr	r2, [pc, #56]	@ (80115b0 <xHas_1F_PHYSPCS+0x58>)
 8011578:	4293      	cmp	r3, r2
 801157a:	d00e      	beq.n	801159a <xHas_1F_PHYSPCS+0x42>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	4a0c      	ldr	r2, [pc, #48]	@ (80115b0 <xHas_1F_PHYSPCS+0x58>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d807      	bhi.n	8011594 <xHas_1F_PHYSPCS+0x3c>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	4a0b      	ldr	r2, [pc, #44]	@ (80115b4 <xHas_1F_PHYSPCS+0x5c>)
 8011588:	4293      	cmp	r3, r2
 801158a:	d006      	beq.n	801159a <xHas_1F_PHYSPCS+0x42>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	4a0a      	ldr	r2, [pc, #40]	@ (80115b8 <xHas_1F_PHYSPCS+0x60>)
 8011590:	4293      	cmp	r3, r2
 8011592:	d002      	beq.n	801159a <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8011594:	2301      	movs	r3, #1
 8011596:	60fb      	str	r3, [r7, #12]
            break;
 8011598:	e000      	b.n	801159c <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 801159a:	bf00      	nop
    }

    return xResult;
 801159c:	68fb      	ldr	r3, [r7, #12]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3714      	adds	r7, #20
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	ff000710 	.word	0xff000710
 80115b0:	2000a250 	.word	0x2000a250
 80115b4:	20005c90 	.word	0x20005c90
 80115b8:	2000a221 	.word	0x2000a221

080115bc <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 80115bc:	b480      	push	{r7}
 80115be:	b085      	sub	sp, #20
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80115c4:	2300      	movs	r3, #0
 80115c6:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	4a0d      	ldr	r2, [pc, #52]	@ (8011600 <xHas_19_PHYCR+0x44>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d00b      	beq.n	80115e8 <xHas_19_PHYCR+0x2c>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	4a0b      	ldr	r2, [pc, #44]	@ (8011600 <xHas_19_PHYCR+0x44>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d80a      	bhi.n	80115ee <xHas_19_PHYCR+0x32>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	4a0a      	ldr	r2, [pc, #40]	@ (8011604 <xHas_19_PHYCR+0x48>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d003      	beq.n	80115e8 <xHas_19_PHYCR+0x2c>
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	4a09      	ldr	r2, [pc, #36]	@ (8011608 <xHas_19_PHYCR+0x4c>)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d102      	bne.n	80115ee <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 80115e8:	2301      	movs	r3, #1
 80115ea:	60fb      	str	r3, [r7, #12]
            break;
 80115ec:	e000      	b.n	80115f0 <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 80115ee:	bf00      	nop
    }

    return xResult;
 80115f0:	68fb      	ldr	r3, [r7, #12]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3714      	adds	r7, #20
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop
 8011600:	2000a221 	.word	0x2000a221
 8011604:	0007c130 	.word	0x0007c130
 8011608:	20005c90 	.word	0x20005c90

0801160c <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	60f8      	str	r0, [r7, #12]
 8011614:	60b9      	str	r1, [r7, #8]
 8011616:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8011618:	2240      	movs	r2, #64	@ 0x40
 801161a:	2100      	movs	r1, #0
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f005 fe78 	bl	8017312 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	68ba      	ldr	r2, [r7, #8]
 8011626:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	605a      	str	r2, [r3, #4]
}
 801162e:	bf00      	nop
 8011630:	3710      	adds	r7, #16
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b086      	sub	sp, #24
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8011644:	2300      	movs	r3, #0
 8011646:	617b      	str	r3, [r7, #20]
 8011648:	e03a      	b.n	80116c0 <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 801164a:	2300      	movs	r3, #0
 801164c:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f107 020c 	add.w	r2, r7, #12
 8011656:	2103      	movs	r1, #3
 8011658:	6978      	ldr	r0, [r7, #20]
 801165a:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011662:	4293      	cmp	r3, r2
 8011664:	d029      	beq.n	80116ba <xPhyDiscover+0x84>
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d026      	beq.n	80116ba <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f107 0208 	add.w	r2, r7, #8
 8011674:	2102      	movs	r1, #2
 8011676:	6978      	ldr	r0, [r7, #20]
 8011678:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	041a      	lsls	r2, r3, #16
 801167e:	68f9      	ldr	r1, [r7, #12]
 8011680:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8011684:	400b      	ands	r3, r1
 8011686:	4313      	orrs	r3, r2
 8011688:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801168e:	697a      	ldr	r2, [r7, #20]
 8011690:	b2d1      	uxtb	r1, r2
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	4413      	add	r3, r2
 8011696:	460a      	mov	r2, r1
 8011698:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	3202      	adds	r2, #2
 80116a2:	6939      	ldr	r1, [r7, #16]
 80116a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116ac:	1c5a      	adds	r2, r3, #1
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116b6:	2b04      	cmp	r3, #4
 80116b8:	d005      	beq.n	80116c6 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	3301      	adds	r3, #1
 80116be:	617b      	str	r3, [r7, #20]
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	2b1f      	cmp	r3, #31
 80116c4:	ddc1      	ble.n	801164a <xPhyDiscover+0x14>
    if( pxPhyObject->xPortCount > 0 )
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
    }

    return pxPhyObject->xPortCount;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3718      	adds	r7, #24
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b08c      	sub	sp, #48	@ 0x30
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 80116dc:	2300      	movs	r3, #0
 80116de:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80116e0:	2300      	movs	r3, #0
 80116e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80116e4:	e017      	b.n	8011716 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ea:	4413      	add	r3, r2
 80116ec:	3318      	adds	r3, #24
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	f107 0218 	add.w	r2, r7, #24
 80116fa:	2100      	movs	r1, #0
 80116fc:	69f8      	ldr	r0, [r7, #28]
 80116fe:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	69ba      	ldr	r2, [r7, #24]
 8011706:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801170a:	2100      	movs	r1, #0
 801170c:	69f8      	ldr	r0, [r7, #28]
 801170e:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011712:	3301      	adds	r3, #1
 8011714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801171a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801171c:	429a      	cmp	r2, r3
 801171e:	dbe2      	blt.n	80116e6 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8011720:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011724:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8011726:	f107 030c 	add.w	r3, r7, #12
 801172a:	4618      	mov	r0, r3
 801172c:	f003 ff02 	bl	8015534 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011730:	2300      	movs	r3, #0
 8011732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011734:	e01b      	b.n	801176e <xPhyReset+0x9c>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801173a:	4413      	add	r3, r2
 801173c:	3318      	adds	r3, #24
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f107 0218 	add.w	r2, r7, #24
 801174a:	2100      	movs	r1, #0
 801174c:	6a38      	ldr	r0, [r7, #32]
 801174e:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011756:	2b00      	cmp	r3, #0
 8011758:	d106      	bne.n	8011768 <xPhyReset+0x96>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
                ulDoneMask |= ( 1U << xPhyIndex );
 801175a:	2201      	movs	r2, #1
 801175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801175e:	fa02 f303 	lsl.w	r3, r2, r3
 8011762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011764:	4313      	orrs	r3, r2
 8011766:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801176a:	3301      	adds	r3, #1
 801176c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011774:	429a      	cmp	r2, r3
 8011776:	dbde      	blt.n	8011736 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8011778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	429a      	cmp	r2, r3
 801177e:	d00e      	beq.n	801179e <xPhyReset+0xcc>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8011780:	f107 0214 	add.w	r2, r7, #20
 8011784:	f107 030c 	add.w	r3, r7, #12
 8011788:	4611      	mov	r1, r2
 801178a:	4618      	mov	r0, r3
 801178c:	f003 ff12 	bl	80155b4 <xTaskCheckForTimeOut>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d105      	bne.n	80117a2 <xPhyReset+0xd0>
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
            break;
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8011796:	2032      	movs	r0, #50	@ 0x32
 8011798:	f003 fad8 	bl	8014d4c <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 801179c:	e7c8      	b.n	8011730 <xPhyReset+0x5e>
            break;
 801179e:	bf00      	nop
 80117a0:	e000      	b.n	80117a4 <xPhyReset+0xd2>
            break;
 80117a2:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80117a4:	2300      	movs	r3, #0
 80117a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117a8:	e01e      	b.n	80117e8 <xPhyReset+0x116>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 80117aa:	2201      	movs	r2, #1
 80117ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ae:	409a      	lsls	r2, r3
 80117b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b2:	4013      	ands	r3, r2
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d114      	bne.n	80117e2 <xPhyReset+0x110>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117bc:	4413      	add	r3, r2
 80117be:	3318      	adds	r3, #24
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f107 0218 	add.w	r2, r7, #24
 80117cc:	2100      	movs	r1, #0
 80117ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117d0:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	69ba      	ldr	r2, [r7, #24]
 80117d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80117dc:	2100      	movs	r1, #0
 80117de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117e0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80117e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117e4:	3301      	adds	r3, #1
 80117e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117ee:	429a      	cmp	r2, r3
 80117f0:	dbdb      	blt.n	80117aa <xPhyReset+0xd8>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80117f2:	2032      	movs	r0, #50	@ 0x32
 80117f4:	f003 faaa 	bl	8014d4c <vTaskDelay>

    return ulDoneMask;
 80117f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3730      	adds	r7, #48	@ 0x30
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}

08011802 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b088      	sub	sp, #32
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011810:	2b00      	cmp	r3, #0
 8011812:	dc02      	bgt.n	801181a <xPhyConfigure+0x18>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
        return -1;
 8011814:	f04f 33ff 	mov.w	r3, #4294967295
 8011818:	e0e7      	b.n	80119ea <xPhyConfigure+0x1e8>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	2b03      	cmp	r3, #3
 8011820:	d107      	bne.n	8011832 <xPhyConfigure+0x30>
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	789b      	ldrb	r3, [r3, #2]
 8011826:	2b03      	cmp	r3, #3
 8011828:	d103      	bne.n	8011832 <xPhyConfigure+0x30>
    {
        ulAdvertise = phyADVERTISE_ALL;
 801182a:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801182e:	61fb      	str	r3, [r7, #28]
 8011830:	e044      	b.n	80118bc <xPhyConfigure+0xba>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8011832:	2301      	movs	r3, #1
 8011834:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	2b03      	cmp	r3, #3
 801183c:	d10d      	bne.n	801185a <xPhyConfigure+0x58>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	789b      	ldrb	r3, [r3, #2]
 8011842:	2b02      	cmp	r3, #2
 8011844:	d104      	bne.n	8011850 <xPhyConfigure+0x4e>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8011846:	69fb      	ldr	r3, [r7, #28]
 8011848:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 801184c:	61fb      	str	r3, [r7, #28]
 801184e:	e035      	b.n	80118bc <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8011856:	61fb      	str	r3, [r7, #28]
 8011858:	e030      	b.n	80118bc <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	789b      	ldrb	r3, [r3, #2]
 801185e:	2b03      	cmp	r3, #3
 8011860:	d10d      	bne.n	801187e <xPhyConfigure+0x7c>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d104      	bne.n	8011874 <xPhyConfigure+0x72>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011870:	61fb      	str	r3, [r7, #28]
 8011872:	e023      	b.n	80118bc <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 801187a:	61fb      	str	r3, [r7, #28]
 801187c:	e01e      	b.n	80118bc <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	2b02      	cmp	r3, #2
 8011884:	d10d      	bne.n	80118a2 <xPhyConfigure+0xa0>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	789b      	ldrb	r3, [r3, #2]
 801188a:	2b02      	cmp	r3, #2
 801188c:	d104      	bne.n	8011898 <xPhyConfigure+0x96>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011894:	61fb      	str	r3, [r7, #28]
 8011896:	e011      	b.n	80118bc <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8011898:	69fb      	ldr	r3, [r7, #28]
 801189a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801189e:	61fb      	str	r3, [r7, #28]
 80118a0:	e00c      	b.n	80118bc <xPhyConfigure+0xba>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	789b      	ldrb	r3, [r3, #2]
 80118a6:	2b02      	cmp	r3, #2
 80118a8:	d104      	bne.n	80118b4 <xPhyConfigure+0xb2>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118b0:	61fb      	str	r3, [r7, #28]
 80118b2:	e003      	b.n	80118bc <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 80118b4:	69fb      	ldr	r3, [r7, #28]
 80118b6:	f043 0320 	orr.w	r3, r3, #32
 80118ba:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118c0:	2201      	movs	r2, #1
 80118c2:	fa02 f303 	lsl.w	r3, r2, r3
 80118c6:	3b01      	subs	r3, #1
 80118c8:	4619      	mov	r1, r3
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7ff ff01 	bl	80116d2 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80118d0:	2300      	movs	r3, #0
 80118d2:	61bb      	str	r3, [r7, #24]
 80118d4:	e07a      	b.n	80119cc <xPhyConfigure+0x1ca>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	4413      	add	r3, r2
 80118dc:	3318      	adds	r3, #24
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	69ba      	ldr	r2, [r7, #24]
 80118e6:	3202      	adds	r2, #2
 80118e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ec:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	69fa      	ldr	r2, [r7, #28]
 80118f4:	2104      	movs	r1, #4
 80118f6:	6978      	ldr	r0, [r7, #20]
 80118f8:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f107 020c 	add.w	r2, r7, #12
 8011902:	2100      	movs	r1, #0
 8011904:	6978      	ldr	r0, [r7, #20]
 8011906:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 801190e:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011916:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	2b02      	cmp	r3, #2
 801191e:	d003      	beq.n	8011928 <xPhyConfigure+0x126>
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	2b03      	cmp	r3, #3
 8011926:	d104      	bne.n	8011932 <xPhyConfigure+0x130>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801192e:	60fb      	str	r3, [r7, #12]
 8011930:	e007      	b.n	8011942 <xPhyConfigure+0x140>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2b01      	cmp	r3, #1
 8011938:	d103      	bne.n	8011942 <xPhyConfigure+0x140>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011940:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	789b      	ldrb	r3, [r3, #2]
 8011946:	2b02      	cmp	r3, #2
 8011948:	d003      	beq.n	8011952 <xPhyConfigure+0x150>
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	789b      	ldrb	r3, [r3, #2]
 801194e:	2b03      	cmp	r3, #3
 8011950:	d104      	bne.n	801195c <xPhyConfigure+0x15a>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011958:	60fb      	str	r3, [r7, #12]
 801195a:	e007      	b.n	801196c <xPhyConfigure+0x16a>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	789b      	ldrb	r3, [r3, #2]
 8011960:	2b01      	cmp	r3, #1
 8011962:	d103      	bne.n	801196c <xPhyConfigure+0x16a>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801196a:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 801196c:	6938      	ldr	r0, [r7, #16]
 801196e:	f7ff fe25 	bl	80115bc <xHas_19_PHYCR>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d026      	beq.n	80119c6 <xPhyConfigure+0x1c4>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	f107 0208 	add.w	r2, r7, #8
 8011980:	2119      	movs	r1, #25
 8011982:	6978      	ldr	r0, [r7, #20]
 8011984:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801198c:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	785b      	ldrb	r3, [r3, #1]
 8011992:	2b03      	cmp	r3, #3
 8011994:	d104      	bne.n	80119a0 <xPhyConfigure+0x19e>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801199c:	60bb      	str	r3, [r7, #8]
 801199e:	e00c      	b.n	80119ba <xPhyConfigure+0x1b8>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	785b      	ldrb	r3, [r3, #1]
 80119a4:	2b02      	cmp	r3, #2
 80119a6:	d104      	bne.n	80119b2 <xPhyConfigure+0x1b0>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80119ae:	60bb      	str	r3, [r7, #8]
 80119b0:	e003      	b.n	80119ba <xPhyConfigure+0x1b8>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80119b8:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	68ba      	ldr	r2, [r7, #8]
 80119c0:	2119      	movs	r1, #25
 80119c2:	6978      	ldr	r0, [r7, #20]
 80119c4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	3301      	adds	r3, #1
 80119ca:	61bb      	str	r3, [r7, #24]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119d0:	69ba      	ldr	r2, [r7, #24]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	f6ff af7f 	blt.w	80118d6 <xPhyConfigure+0xd4>

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	69fa      	ldr	r2, [r7, #28]
 80119e6:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3720      	adds	r7, #32
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
	...

080119f4 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b092      	sub	sp, #72	@ 0x48
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d101      	bne.n	8011a08 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8011a04:	2300      	movs	r3, #0
 8011a06:	e169      	b.n	8011cdc <xPhyStartAutoNegotiation+0x2e8>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8011a08:	2300      	movs	r3, #0
 8011a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a0c:	e020      	b.n	8011a50 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8011a0e:	683a      	ldr	r2, [r7, #0]
 8011a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a12:	fa22 f303 	lsr.w	r3, r2, r3
 8011a16:	f003 0301 	and.w	r3, r3, #1
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d015      	beq.n	8011a4a <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011a1e:	687a      	ldr	r2, [r7, #4]
 8011a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a22:	4413      	add	r3, r2
 8011a24:	3318      	adds	r3, #24
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011a32:	2104      	movs	r1, #4
 8011a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a36:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011a44:	2100      	movs	r1, #0
 8011a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a48:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8011a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a54:	461a      	mov	r2, r3
 8011a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d3d8      	bcc.n	8011a0e <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8011a5c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8011a60:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8011a62:	f107 0318 	add.w	r3, r7, #24
 8011a66:	4618      	mov	r0, r3
 8011a68:	f003 fd64 	bl	8015534 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8011a70:	2301      	movs	r3, #1
 8011a72:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011a74:	2300      	movs	r3, #0
 8011a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a78:	e025      	b.n	8011ac6 <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8011a7a:	683a      	ldr	r2, [r7, #0]
 8011a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a7e:	4013      	ands	r3, r2
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d01a      	beq.n	8011aba <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8011a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a88:	4013      	ands	r3, r2
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d115      	bne.n	8011aba <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a92:	4413      	add	r3, r2
 8011a94:	3318      	adds	r3, #24
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011aa2:	2101      	movs	r1, #1
 8011aa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011aa6:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aaa:	f003 0320 	and.w	r3, r3, #32
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d003      	beq.n	8011aba <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8011ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011abc:	3301      	adds	r3, #1
 8011abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ac2:	005b      	lsls	r3, r3, #1
 8011ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aca:	461a      	mov	r2, r3
 8011acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d3d3      	bcc.n	8011a7a <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8011ad2:	683a      	ldr	r2, [r7, #0]
 8011ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d00e      	beq.n	8011af8 <xPhyStartAutoNegotiation+0x104>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8011ada:	f107 0220 	add.w	r2, r7, #32
 8011ade:	f107 0318 	add.w	r3, r7, #24
 8011ae2:	4611      	mov	r1, r2
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f003 fd65 	bl	80155b4 <xTaskCheckForTimeOut>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d105      	bne.n	8011afc <xPhyStartAutoNegotiation+0x108>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
            break;
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8011af0:	2032      	movs	r0, #50	@ 0x32
 8011af2:	f003 f92b 	bl	8014d4c <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8011af6:	e7bb      	b.n	8011a70 <xPhyStartAutoNegotiation+0x7c>
            break;
 8011af8:	bf00      	nop
 8011afa:	e000      	b.n	8011afe <xPhyStartAutoNegotiation+0x10a>
            break;
 8011afc:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8011afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	f000 80ea 	beq.w	8011cda <xPhyStartAutoNegotiation+0x2e6>
    {
        ulBitMask = ( uint32_t ) 1U;
 8011b06:	2301      	movs	r3, #1
 8011b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b10:	43db      	mvns	r3, r3
 8011b12:	401a      	ands	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011b18:	2300      	movs	r3, #0
 8011b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b1c:	e0d6      	b.n	8011ccc <xPhyStartAutoNegotiation+0x2d8>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b22:	4413      	add	r3, r2
 8011b24:	3318      	adds	r3, #24
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b2e:	3202      	adds	r2, #2
 8011b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b34:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8011b36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b3a:	4013      	ands	r3, r2
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	f000 80be 	beq.w	8011cbe <xPhyStartAutoNegotiation+0x2ca>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	687a      	ldr	r2, [r7, #4]
 8011b48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011b4e:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011b58:	2101      	movs	r1, #1
 8011b5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011b5c:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b60:	f003 0304 	and.w	r3, r3, #4
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d005      	beq.n	8011b74 <xPhyStartAutoNegotiation+0x180>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b6e:	431a      	orrs	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8011b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b76:	4a5b      	ldr	r2, [pc, #364]	@ (8011ce4 <xPhyStartAutoNegotiation+0x2f0>)
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	d12f      	bne.n	8011bdc <xPhyStartAutoNegotiation+0x1e8>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f107 0214 	add.w	r2, r7, #20
 8011b84:	211e      	movs	r1, #30
 8011b86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011b88:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	f003 0307 	and.w	r3, r3, #7
 8011b90:	3b01      	subs	r3, #1
 8011b92:	2b05      	cmp	r3, #5
 8011b94:	d813      	bhi.n	8011bbe <xPhyStartAutoNegotiation+0x1ca>
 8011b96:	a201      	add	r2, pc, #4	@ (adr r2, 8011b9c <xPhyStartAutoNegotiation+0x1a8>)
 8011b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b9c:	08011bb5 	.word	0x08011bb5
 8011ba0:	08011bbf 	.word	0x08011bbf
 8011ba4:	08011bbf 	.word	0x08011bbf
 8011ba8:	08011bbf 	.word	0x08011bbf
 8011bac:	08011bb5 	.word	0x08011bb5
 8011bb0:	08011bbf 	.word	0x08011bbf
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb6:	f043 0302 	orr.w	r3, r3, #2
 8011bba:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8011bbc:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	f003 0307 	and.w	r3, r3, #7
 8011bc4:	2b02      	cmp	r3, #2
 8011bc6:	d801      	bhi.n	8011bcc <xPhyStartAutoNegotiation+0x1d8>
 8011bc8:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8011bca:	e05b      	b.n	8011c84 <xPhyStartAutoNegotiation+0x290>
 8011bcc:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d858      	bhi.n	8011c84 <xPhyStartAutoNegotiation+0x290>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8011bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd4:	f043 0304 	orr.w	r3, r3, #4
 8011bd8:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8011bda:	e053      	b.n	8011c84 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bde:	4a42      	ldr	r2, [pc, #264]	@ (8011ce8 <xPhyStartAutoNegotiation+0x2f4>)
 8011be0:	4293      	cmp	r3, r2
 8011be2:	d126      	bne.n	8011c32 <xPhyStartAutoNegotiation+0x23e>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8011be4:	2300      	movs	r3, #0
 8011be6:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8011be8:	2300      	movs	r3, #0
 8011bea:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f107 0210 	add.w	r2, r7, #16
 8011bf4:	211f      	movs	r1, #31
 8011bf6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011bf8:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	0a1b      	lsrs	r3, r3, #8
 8011bfe:	f003 0307 	and.w	r3, r3, #7
 8011c02:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8011c04:	2300      	movs	r3, #0
 8011c06:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8011c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c0a:	2b02      	cmp	r3, #2
 8011c0c:	d002      	beq.n	8011c14 <xPhyStartAutoNegotiation+0x220>
 8011c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c10:	2b05      	cmp	r3, #5
 8011c12:	d103      	bne.n	8011c1c <xPhyStartAutoNegotiation+0x228>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8011c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c16:	f043 0302 	orr.w	r3, r3, #2
 8011c1a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 8011c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c1e:	2b05      	cmp	r3, #5
 8011c20:	d002      	beq.n	8011c28 <xPhyStartAutoNegotiation+0x234>
 8011c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c24:	2b06      	cmp	r3, #6
 8011c26:	d12d      	bne.n	8011c84 <xPhyStartAutoNegotiation+0x290>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8011c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c2a:	f043 0304 	orr.w	r3, r3, #4
 8011c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c30:	e028      	b.n	8011c84 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8011c32:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011c34:	f7ff fc90 	bl	8011558 <xHas_1F_PHYSPCS>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d01b      	beq.n	8011c76 <xPhyStartAutoNegotiation+0x282>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f107 020c 	add.w	r2, r7, #12
 8011c46:	211f      	movs	r1, #31
 8011c48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011c4a:	4798      	blx	r3
                ulRegValue = 0;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	f003 0310 	and.w	r3, r3, #16
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d003      	beq.n	8011c62 <xPhyStartAutoNegotiation+0x26e>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8011c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c5c:	f043 0304 	orr.w	r3, r3, #4
 8011c60:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f003 030c 	and.w	r3, r3, #12
 8011c68:	2b04      	cmp	r3, #4
 8011c6a:	d10b      	bne.n	8011c84 <xPhyStartAutoNegotiation+0x290>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c6e:	f043 0302 	orr.w	r3, r3, #2
 8011c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c74:	e006      	b.n	8011c84 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011c7e:	2110      	movs	r1, #16
 8011c80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011c82:	4798      	blx	r3
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8011c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c86:	f003 0304 	and.w	r3, r3, #4
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d004      	beq.n	8011c98 <xPhyStartAutoNegotiation+0x2a4>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2202      	movs	r2, #2
 8011c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011c96:	e003      	b.n	8011ca0 <xPhyStartAutoNegotiation+0x2ac>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2201      	movs	r2, #1
 8011c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca2:	f003 0302 	and.w	r3, r3, #2
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d004      	beq.n	8011cb4 <xPhyStartAutoNegotiation+0x2c0>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2201      	movs	r2, #1
 8011cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011cb2:	e005      	b.n	8011cc0 <xPhyStartAutoNegotiation+0x2cc>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2202      	movs	r2, #2
 8011cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011cbc:	e000      	b.n	8011cc0 <xPhyStartAutoNegotiation+0x2cc>
                continue;
 8011cbe:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	f4ff af22 	bcc.w	8011b1e <xPhyStartAutoNegotiation+0x12a>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8011cda:	2300      	movs	r3, #0
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3748      	adds	r7, #72	@ 0x48
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	00221560 	.word	0x00221560
 8011ce8:	00221550 	.word	0x00221550

08011cec <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b088      	sub	sp, #32
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	dd25      	ble.n	8011d50 <xPhyCheckLinkStatus+0x64>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	331c      	adds	r3, #28
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f003 fc13 	bl	8015534 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8011d14:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011d16:	2300      	movs	r3, #0
 8011d18:	61bb      	str	r3, [r7, #24]
 8011d1a:	e013      	b.n	8011d44 <xPhyCheckLinkStatus+0x58>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	4013      	ands	r3, r2
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d107      	bne.n	8011d38 <xPhyCheckLinkStatus+0x4c>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d2c:	69fb      	ldr	r3, [r7, #28]
 8011d2e:	431a      	orrs	r2, r3
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
                xNeedCheck = pdTRUE;
 8011d34:	2301      	movs	r3, #1
 8011d36:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	61bb      	str	r3, [r7, #24]
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	61fb      	str	r3, [r7, #28]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d48:	69ba      	ldr	r2, [r7, #24]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	dbe6      	blt.n	8011d1c <xPhyCheckLinkStatus+0x30>
 8011d4e:	e068      	b.n	8011e22 <xPhyCheckLinkStatus+0x136>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f103 021c 	add.w	r2, r3, #28
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	3324      	adds	r3, #36	@ 0x24
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	4610      	mov	r0, r2
 8011d5e:	f003 fc29 	bl	80155b4 <xTaskCheckForTimeOut>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d05c      	beq.n	8011e22 <xPhyCheckLinkStatus+0x136>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011d68:	2300      	movs	r3, #0
 8011d6a:	61bb      	str	r3, [r7, #24]
 8011d6c:	e03f      	b.n	8011dee <xPhyCheckLinkStatus+0x102>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	4413      	add	r3, r2
 8011d74:	3318      	adds	r3, #24
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f107 020c 	add.w	r2, r7, #12
 8011d82:	2101      	movs	r1, #1
 8011d84:	6938      	ldr	r0, [r7, #16]
 8011d86:	4798      	blx	r3
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d129      	bne.n	8011de2 <xPhyCheckLinkStatus+0xf6>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	4013      	ands	r3, r2
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	bf14      	ite	ne
 8011d9a:	2301      	movne	r3, #1
 8011d9c:	2300      	moveq	r3, #0
 8011d9e:	b2da      	uxtb	r2, r3
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f003 0304 	and.w	r3, r3, #4
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	bf14      	ite	ne
 8011daa:	2301      	movne	r3, #1
 8011dac:	2300      	moveq	r3, #0
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	4053      	eors	r3, r2
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d014      	beq.n	8011de2 <xPhyCheckLinkStatus+0xf6>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f003 0304 	and.w	r3, r3, #4
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d006      	beq.n	8011dd0 <xPhyCheckLinkStatus+0xe4>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	431a      	orrs	r2, r3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8011dce:	e006      	b.n	8011dde <xPhyCheckLinkStatus+0xf2>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	43db      	mvns	r3, r3
 8011dd8:	401a      	ands	r2, r3
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
                    xNeedCheck = pdTRUE;
 8011dde:	2301      	movs	r3, #1
 8011de0:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	3301      	adds	r3, #1
 8011de6:	61bb      	str	r3, [r7, #24]
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	61fb      	str	r3, [r7, #28]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011df2:	69ba      	ldr	r2, [r7, #24]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	dbba      	blt.n	8011d6e <xPhyCheckLinkStatus+0x82>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	331c      	adds	r3, #28
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f003 fb99 	bl	8015534 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	085b      	lsrs	r3, r3, #1
 8011e0a:	4013      	ands	r3, r2
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d004      	beq.n	8011e1a <xPhyCheckLinkStatus+0x12e>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8011e16:	625a      	str	r2, [r3, #36]	@ 0x24
 8011e18:	e003      	b.n	8011e22 <xPhyCheckLinkStatus+0x136>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011e20:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8011e22:	697b      	ldr	r3, [r7, #20]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3720      	adds	r7, #32
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <__NVIC_GetEnableIRQ>:
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b083      	sub	sp, #12
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	4603      	mov	r3, r0
 8011e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	db0d      	blt.n	8011e5a <__NVIC_GetEnableIRQ+0x2e>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8011e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8011e68 <__NVIC_GetEnableIRQ+0x3c>)
 8011e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e44:	095b      	lsrs	r3, r3, #5
 8011e46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011e4a:	79fb      	ldrb	r3, [r7, #7]
 8011e4c:	f003 031f 	and.w	r3, r3, #31
 8011e50:	fa22 f303 	lsr.w	r3, r2, r3
 8011e54:	f003 0301 	and.w	r3, r3, #1
 8011e58:	e000      	b.n	8011e5c <__NVIC_GetEnableIRQ+0x30>
    return(0U);
 8011e5a:	2300      	movs	r3, #0
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr
 8011e68:	e000e100 	.word	0xe000e100

08011e6c <__NVIC_SetPriority>:
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	4603      	mov	r3, r0
 8011e74:	6039      	str	r1, [r7, #0]
 8011e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	db0a      	blt.n	8011e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	490c      	ldr	r1, [pc, #48]	@ (8011eb8 <__NVIC_SetPriority+0x4c>)
 8011e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e8a:	0112      	lsls	r2, r2, #4
 8011e8c:	b2d2      	uxtb	r2, r2
 8011e8e:	440b      	add	r3, r1
 8011e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011e94:	e00a      	b.n	8011eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	b2da      	uxtb	r2, r3
 8011e9a:	4908      	ldr	r1, [pc, #32]	@ (8011ebc <__NVIC_SetPriority+0x50>)
 8011e9c:	79fb      	ldrb	r3, [r7, #7]
 8011e9e:	f003 030f 	and.w	r3, r3, #15
 8011ea2:	3b04      	subs	r3, #4
 8011ea4:	0112      	lsls	r2, r2, #4
 8011ea6:	b2d2      	uxtb	r2, r2
 8011ea8:	440b      	add	r3, r1
 8011eaa:	761a      	strb	r2, [r3, #24]
}
 8011eac:	bf00      	nop
 8011eae:	370c      	adds	r7, #12
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr
 8011eb8:	e000e100 	.word	0xe000e100
 8011ebc:	e000ed00 	.word	0xe000ed00

08011ec0 <__NVIC_GetPriority>:
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	db09      	blt.n	8011ee6 <__NVIC_GetPriority+0x26>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
 8011ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8011f08 <__NVIC_GetPriority+0x48>)
 8011ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ed8:	4413      	add	r3, r2
 8011eda:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	091b      	lsrs	r3, r3, #4
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	e009      	b.n	8011efa <__NVIC_GetPriority+0x3a>
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8011ee6:	4a09      	ldr	r2, [pc, #36]	@ (8011f0c <__NVIC_GetPriority+0x4c>)
 8011ee8:	79fb      	ldrb	r3, [r7, #7]
 8011eea:	f003 030f 	and.w	r3, r3, #15
 8011eee:	3b04      	subs	r3, #4
 8011ef0:	4413      	add	r3, r2
 8011ef2:	7e1b      	ldrb	r3, [r3, #24]
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	091b      	lsrs	r3, r3, #4
 8011ef8:	b2db      	uxtb	r3, r3
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	370c      	adds	r7, #12
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	e000e100 	.word	0xe000e100
 8011f0c:	e000ed00 	.word	0xe000ed00

08011f10 <prvPhyReadReg>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyReadReg( BaseType_t xAddress,
                                 BaseType_t xRegister,
                                 uint32_t * pulValue )
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b086      	sub	sp, #24
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &xEthHandle, ( uint32_t ) xAddress, ( uint32_t ) xRegister, pulValue ) != HAL_OK )
 8011f20:	68f9      	ldr	r1, [r7, #12]
 8011f22:	68ba      	ldr	r2, [r7, #8]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	4807      	ldr	r0, [pc, #28]	@ (8011f44 <prvPhyReadReg+0x34>)
 8011f28:	f7f0 fff0 	bl	8002f0c <HAL_ETH_ReadPHYRegister>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d002      	beq.n	8011f38 <prvPhyReadReg+0x28>
    {
        xResult = -1;
 8011f32:	f04f 33ff 	mov.w	r3, #4294967295
 8011f36:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8011f38:	697b      	ldr	r3, [r7, #20]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3718      	adds	r7, #24
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20003464 	.word	0x20003464

08011f48 <prvPhyWriteReg>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyWriteReg( BaseType_t xAddress,
                                  BaseType_t xRegister,
                                  uint32_t ulValue )
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b086      	sub	sp, #24
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	60f8      	str	r0, [r7, #12]
 8011f50:	60b9      	str	r1, [r7, #8]
 8011f52:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = 0;
 8011f54:	2300      	movs	r3, #0
 8011f56:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &xEthHandle, ( uint32_t ) xAddress, ( uint32_t ) xRegister, ulValue ) != HAL_OK )
 8011f58:	68f9      	ldr	r1, [r7, #12]
 8011f5a:	68ba      	ldr	r2, [r7, #8]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	4807      	ldr	r0, [pc, #28]	@ (8011f7c <prvPhyWriteReg+0x34>)
 8011f60:	f7f1 f81f 	bl	8002fa2 <HAL_ETH_WritePHYRegister>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d002      	beq.n	8011f70 <prvPhyWriteReg+0x28>
    {
        xResult = -1;
 8011f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6e:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8011f70:	697b      	ldr	r3, [r7, #20]
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3718      	adds	r7, #24
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	20003464 	.word	0x20003464

08011f80 <prvGetPhyLinkStatus>:
/*                      Network Interface Access Hooks                       */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvGetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8011f80:	b480      	push	{r7}
 8011f82:	b085      	sub	sp, #20
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
    ( void ) pxInterface;

    BaseType_t xReturn = pdFALSE;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	60fb      	str	r3, [r7, #12]

    /* const EMACData_t xEMACData = *( ( EMACData_t * ) pxInterface->pvArgument ); */

    if( xPhyObject.ulLinkStatusMask != 0U )
 8011f8c:	4b06      	ldr	r3, [pc, #24]	@ (8011fa8 <prvGetPhyLinkStatus+0x28>)
 8011f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d001      	beq.n	8011f98 <prvGetPhyLinkStatus+0x18>
    {
        xReturn = pdTRUE;
 8011f94:	2301      	movs	r3, #1
 8011f96:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8011f98:	68fb      	ldr	r3, [r7, #12]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3714      	adds	r7, #20
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop
 8011fa8:	20003514 	.word	0x20003514

08011fac <prvNetworkInterfaceInitialise>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b086      	sub	sp, #24
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
    BaseType_t xInitResult = pdFAIL;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	617b      	str	r3, [r7, #20]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8011fb8:	4b39      	ldr	r3, [pc, #228]	@ (80120a0 <prvNetworkInterfaceInitialise+0xf4>)
 8011fba:	613b      	str	r3, [r7, #16]
    EthernetPhy_t * pxPhyObject = &xPhyObject;
 8011fbc:	4b39      	ldr	r3, [pc, #228]	@ (80120a4 <prvNetworkInterfaceInitialise+0xf8>)
 8011fbe:	60fb      	str	r3, [r7, #12]

    switch( xMacInitStatus )
 8011fc0:	4b39      	ldr	r3, [pc, #228]	@ (80120a8 <prvNetworkInterfaceInitialise+0xfc>)
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	2b05      	cmp	r3, #5
 8011fc6:	d80f      	bhi.n	8011fe8 <prvNetworkInterfaceInitialise+0x3c>
 8011fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8011fd0 <prvNetworkInterfaceInitialise+0x24>)
 8011fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fce:	bf00      	nop
 8011fd0:	08012005 	.word	0x08012005
 8011fd4:	08012019 	.word	0x08012019
 8011fd8:	0801202b 	.word	0x0801202b
 8011fdc:	08012041 	.word	0x08012041
 8011fe0:	08012053 	.word	0x08012053
 8011fe4:	0801206f 	.word	0x0801206f
	__asm volatile
 8011fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fec:	b672      	cpsid	i
 8011fee:	f383 8811 	msr	BASEPRI, r3
 8011ff2:	f3bf 8f6f 	isb	sy
 8011ff6:	f3bf 8f4f 	dsb	sy
 8011ffa:	b662      	cpsie	i
 8011ffc:	60bb      	str	r3, [r7, #8]
}
 8011ffe:	bf00      	nop
    {
        default:
            configASSERT( pdFALSE );
 8012000:	bf00      	nop
 8012002:	e7fd      	b.n	8012000 <prvNetworkInterfaceInitialise+0x54>
            break;

        case eMacEthInit:

            if( prvEthConfigInit( pxEthHandle, pxInterface ) == pdFALSE )
 8012004:	6879      	ldr	r1, [r7, #4]
 8012006:	6938      	ldr	r0, [r7, #16]
 8012008:	f000 fb02 	bl	8012610 <prvEthConfigInit>
 801200c:	4603      	mov	r3, r0
 801200e:	2b00      	cmp	r3, #0
 8012010:	d036      	beq.n	8012080 <prvNetworkInterfaceInitialise+0xd4>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacEthInit failed\n" ) );
                break;
            }

            xMacInitStatus = eMacPhyInit;
 8012012:	4b25      	ldr	r3, [pc, #148]	@ (80120a8 <prvNetworkInterfaceInitialise+0xfc>)
 8012014:	2201      	movs	r2, #1
 8012016:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacPhyInit:

            if( prvPhyInit( pxPhyObject ) == pdFALSE )
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	f000 fc49 	bl	80128b0 <prvPhyInit>
 801201e:	4603      	mov	r3, r0
 8012020:	2b00      	cmp	r3, #0
 8012022:	d02f      	beq.n	8012084 <prvNetworkInterfaceInitialise+0xd8>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacPhyInit failed\n" ) );
                break;
            }

            xMacInitStatus = eMacPhyStart;
 8012024:	4b20      	ldr	r3, [pc, #128]	@ (80120a8 <prvNetworkInterfaceInitialise+0xfc>)
 8012026:	2202      	movs	r2, #2
 8012028:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacPhyStart:

            if( prvPhyStart( pxEthHandle, pxInterface, pxPhyObject ) == pdFALSE )
 801202a:	68fa      	ldr	r2, [r7, #12]
 801202c:	6879      	ldr	r1, [r7, #4]
 801202e:	6938      	ldr	r0, [r7, #16]
 8012030:	f000 fc5a 	bl	80128e8 <prvPhyStart>
 8012034:	4603      	mov	r3, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	d026      	beq.n	8012088 <prvNetworkInterfaceInitialise+0xdc>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacPhyStart failed\n" ) );
                break;
            }

            xMacInitStatus = eMacTaskStart;
 801203a:	4b1b      	ldr	r3, [pc, #108]	@ (80120a8 <prvNetworkInterfaceInitialise+0xfc>)
 801203c:	2203      	movs	r2, #3
 801203e:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacTaskStart:

            if( prvEMACTaskStart( pxInterface ) == pdFALSE )
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f000 fa5b 	bl	80124fc <prvEMACTaskStart>
 8012046:	4603      	mov	r3, r0
 8012048:	2b00      	cmp	r3, #0
 801204a:	d01f      	beq.n	801208c <prvNetworkInterfaceInitialise+0xe0>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacTaskStart failed\n" ) );
                break;
            }

            xMacInitStatus = eMacEthStart;
 801204c:	4b16      	ldr	r3, [pc, #88]	@ (80120a8 <prvNetworkInterfaceInitialise+0xfc>)
 801204e:	2204      	movs	r2, #4
 8012050:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacEthStart:

            if( pxEthHandle->gState != HAL_ETH_STATE_STARTED )
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012058:	2b40      	cmp	r3, #64	@ 0x40
 801205a:	d005      	beq.n	8012068 <prvNetworkInterfaceInitialise+0xbc>
            {
                if( HAL_ETH_Start_IT( pxEthHandle ) != HAL_OK )
 801205c:	6938      	ldr	r0, [r7, #16]
 801205e:	f7f0 fb89 	bl	8002774 <HAL_ETH_Start_IT>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d113      	bne.n	8012090 <prvNetworkInterfaceInitialise+0xe4>
                    FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacEthStart failed\n" ) );
                    break;
                }
            }

            xMacInitStatus = eMacInitComplete;
 8012068:	4b0f      	ldr	r3, [pc, #60]	@ (80120a8 <prvNetworkInterfaceInitialise+0xfc>)
 801206a:	2205      	movs	r2, #5
 801206c:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacInitComplete:

            if( prvGetPhyLinkStatus( pxInterface ) != pdTRUE )
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7ff ff86 	bl	8011f80 <prvGetPhyLinkStatus>
 8012074:	4603      	mov	r3, r0
 8012076:	2b01      	cmp	r3, #1
 8012078:	d10c      	bne.n	8012094 <prvNetworkInterfaceInitialise+0xe8>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacInitComplete failed\n" ) );
                break;
            }

            xInitResult = pdPASS;
 801207a:	2301      	movs	r3, #1
 801207c:	617b      	str	r3, [r7, #20]
 801207e:	e00a      	b.n	8012096 <prvNetworkInterfaceInitialise+0xea>
                break;
 8012080:	bf00      	nop
 8012082:	e008      	b.n	8012096 <prvNetworkInterfaceInitialise+0xea>
                break;
 8012084:	bf00      	nop
 8012086:	e006      	b.n	8012096 <prvNetworkInterfaceInitialise+0xea>
                break;
 8012088:	bf00      	nop
 801208a:	e004      	b.n	8012096 <prvNetworkInterfaceInitialise+0xea>
                break;
 801208c:	bf00      	nop
 801208e:	e002      	b.n	8012096 <prvNetworkInterfaceInitialise+0xea>
                    break;
 8012090:	bf00      	nop
 8012092:	e000      	b.n	8012096 <prvNetworkInterfaceInitialise+0xea>
                break;
 8012094:	bf00      	nop
    }

    return xInitResult;
 8012096:	697b      	ldr	r3, [r7, #20]
}
 8012098:	4618      	mov	r0, r3
 801209a:	3718      	adds	r7, #24
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	20003464 	.word	0x20003464
 80120a4:	20003514 	.word	0x20003514
 80120a8:	20003564 	.word	0x20003564

080120ac <prvNetworkInterfaceOutput>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                             NetworkBufferDescriptor_t * const pxDescriptor,
                                             BaseType_t xReleaseAfterSend )
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b09e      	sub	sp, #120	@ 0x78
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80120b8:	2300      	movs	r3, #0
 80120ba:	677b      	str	r3, [r7, #116]	@ 0x74

    /* Zero-Copy Only */
    configASSERT( xReleaseAfterSend == pdTRUE );
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d00d      	beq.n	80120de <prvNetworkInterfaceOutput+0x32>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120c6:	b672      	cpsid	i
 80120c8:	f383 8811 	msr	BASEPRI, r3
 80120cc:	f3bf 8f6f 	isb	sy
 80120d0:	f3bf 8f4f 	dsb	sy
 80120d4:	b662      	cpsie	i
 80120d6:	663b      	str	r3, [r7, #96]	@ 0x60
}
 80120d8:	bf00      	nop
 80120da:	bf00      	nop
 80120dc:	e7fd      	b.n	80120da <prvNetworkInterfaceOutput+0x2e>

    do
    {
        ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80120de:	4b66      	ldr	r3, [pc, #408]	@ (8012278 <prvNetworkInterfaceOutput+0x1cc>)
 80120e0:	673b      	str	r3, [r7, #112]	@ 0x70

        if( ( pxDescriptor == NULL ) || ( pxDescriptor->pucEthernetBuffer == NULL ) || ( pxDescriptor->xDataLength > niEMAC_DATA_BUFFER_SIZE ) )
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	f000 80b5 	beq.w	8012254 <prvNetworkInterfaceOutput+0x1a8>
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f000 80b0 	beq.w	8012254 <prvNetworkInterfaceOutput+0x1a8>
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80120fc:	f200 80aa 	bhi.w	8012254 <prvNetworkInterfaceOutput+0x1a8>
            /* TODO: if xDataLength is greater than niEMAC_DATA_BUFFER_SIZE, you can link buffers */
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Invalid Descriptor\n" ) );
            break;
        }

        if( prvGetPhyLinkStatus( pxInterface ) == pdFALSE )
 8012100:	68f8      	ldr	r0, [r7, #12]
 8012102:	f7ff ff3d 	bl	8011f80 <prvGetPhyLinkStatus>
 8012106:	4603      	mov	r3, r0
 8012108:	2b00      	cmp	r3, #0
 801210a:	f000 80a5 	beq.w	8012258 <prvNetworkInterfaceOutput+0x1ac>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Link Down\n" ) );
            break;
        }

        if( ( xMacInitStatus != eMacInitComplete ) || ( pxEthHandle->gState != HAL_ETH_STATE_STARTED ) )
 801210e:	4b5b      	ldr	r3, [pc, #364]	@ (801227c <prvNetworkInterfaceOutput+0x1d0>)
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	2b05      	cmp	r3, #5
 8012114:	f040 80a2 	bne.w	801225c <prvNetworkInterfaceOutput+0x1b0>
 8012118:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801211a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801211e:	2b40      	cmp	r3, #64	@ 0x40
 8012120:	f040 809c 	bne.w	801225c <prvNetworkInterfaceOutput+0x1b0>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Interface Not Started\n" ) );
            break;
        }

        ETH_TxPacketConfigTypeDef xTxConfig =
 8012124:	f107 0314 	add.w	r3, r7, #20
 8012128:	2238      	movs	r2, #56	@ 0x38
 801212a:	2100      	movs	r1, #0
 801212c:	4618      	mov	r0, r3
 801212e:	f005 f8f0 	bl	8017312 <memset>
 8012132:	2320      	movs	r3, #32
 8012134:	617b      	str	r3, [r7, #20]
            .CRCPadCtrl = ETH_CRC_PAD_INSERT,
            .Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD,
        };

        #if ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM )
            xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8012136:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 801213a:	62bb      	str	r3, [r7, #40]	@ 0x28
            xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	f043 0301 	orr.w	r3, r3, #1
 8012142:	617b      	str	r3, [r7, #20]
        #else
            xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
        #endif

        const EthernetHeader_t * const pxEthHeader = ( const EthernetHeader_t * const ) pxDescriptor->pucEthernetBuffer;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012148:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if( pxEthHeader->usFrameType == ipIPv4_FRAME_TYPE )
 801214a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801214c:	899b      	ldrh	r3, [r3, #12]
 801214e:	b29b      	uxth	r3, r3
 8012150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012154:	d110      	bne.n	8012178 <prvNetworkInterfaceOutput+0xcc>
        {
            #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                const IPPacket_t * const pxIPPacket = ( const IPPacket_t * const ) pxDescriptor->pucEthernetBuffer;
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801215a:	66bb      	str	r3, [r7, #104]	@ 0x68

                if( pxIPPacket->xIPHeader.ucProtocol == ipPROTOCOL_ICMP )
 801215c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801215e:	7ddb      	ldrb	r3, [r3, #23]
 8012160:	2b01      	cmp	r3, #1
 8012162:	d109      	bne.n	8012178 <prvNetworkInterfaceOutput+0xcc>
                {
                    #if ipconfigIS_ENABLED( ipconfigREPLY_TO_INCOMING_PINGS ) || ipconfigIS_ENABLED( ipconfigSUPPORT_OUTGOING_PINGS )
                        ICMPPacket_t * const pxICMPPacket = ( ICMPPacket_t * const ) pxDescriptor->pucEthernetBuffer;
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012168:	667b      	str	r3, [r7, #100]	@ 0x64
                        #if ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM )
                            pxICMPPacket->xICMPHeader.usChecksum = 0U;
 801216a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801216c:	2200      	movs	r2, #0
 801216e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8012172:	2200      	movs	r2, #0
 8012174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv4 ) */
        }

        ETH_BufferTypeDef xTxBuffer =
        {
            .buffer = pxDescriptor->pucEthernetBuffer,
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        ETH_BufferTypeDef xTxBuffer =
 801217c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            .len    = pxDescriptor->xDataLength,
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTxBuffer =
 8012182:	653b      	str	r3, [r7, #80]	@ 0x50
 8012184:	2300      	movs	r3, #0
 8012186:	657b      	str	r3, [r7, #84]	@ 0x54
            .next   = NULL
        };

        xTxConfig.pData = pxDescriptor;
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	64bb      	str	r3, [r7, #72]	@ 0x48
        xTxConfig.TxBuffer = &xTxBuffer;
 801218c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012190:	61fb      	str	r3, [r7, #28]
        xTxConfig.Length = xTxBuffer.len;
 8012192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012194:	61bb      	str	r3, [r7, #24]
        /* if( xQueueSendToBack( xTxQueue, pxDescriptor, 0 ) != pdPASS )
         * {
         *  xReleaseAfterSend = pdFALSE;
         * } */

        if( xSemaphoreTake( xTxDescSem, pdMS_TO_TICKS( niEMAC_DESCRIPTOR_WAIT_TIME_MS ) ) == pdFALSE )
 8012196:	4b3a      	ldr	r3, [pc, #232]	@ (8012280 <prvNetworkInterfaceOutput+0x1d4>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	2114      	movs	r1, #20
 801219c:	4618      	mov	r0, r3
 801219e:	f002 f8d9 	bl	8014354 <xQueueSemaphoreTake>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d05b      	beq.n	8012260 <prvNetworkInterfaceOutput+0x1b4>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: No Descriptors Available\n" ) );
            break;
        }

        if( xSemaphoreTake( xTxMutex, pdMS_TO_TICKS( niEMAC_TX_MAX_BLOCK_TIME_MS ) ) == pdFALSE )
 80121a8:	4b36      	ldr	r3, [pc, #216]	@ (8012284 <prvNetworkInterfaceOutput+0x1d8>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2114      	movs	r1, #20
 80121ae:	4618      	mov	r0, r3
 80121b0:	f002 f8d0 	bl	8014354 <xQueueSemaphoreTake>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d107      	bne.n	80121ca <prvNetworkInterfaceOutput+0x11e>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Process Busy\n" ) );
            ( void ) xSemaphoreGive( xTxDescSem );
 80121ba:	4b31      	ldr	r3, [pc, #196]	@ (8012280 <prvNetworkInterfaceOutput+0x1d4>)
 80121bc:	6818      	ldr	r0, [r3, #0]
 80121be:	2300      	movs	r3, #0
 80121c0:	2200      	movs	r2, #0
 80121c2:	2100      	movs	r1, #0
 80121c4:	f001 fe30 	bl	8013e28 <xQueueGenericSend>
            break;
 80121c8:	e04b      	b.n	8012262 <prvNetworkInterfaceOutput+0x1b6>
                const size_t uxLength = xTxBuffer.len + uxDataOffset;
                SCB_CleanDCache_by_Addr( ( uint32_t * ) uxLineStart, uxLength );
            }
        #endif

        if( HAL_ETH_Transmit_IT( pxEthHandle, &xTxConfig ) == HAL_OK )
 80121ca:	f107 0314 	add.w	r3, r7, #20
 80121ce:	4619      	mov	r1, r3
 80121d0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80121d2:	f7f0 fbbf 	bl	8002954 <HAL_ETH_Transmit_IT>
 80121d6:	4603      	mov	r3, r0
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d104      	bne.n	80121e6 <prvNetworkInterfaceOutput+0x13a>
        {
            /* Released later in deferred task by calling HAL_ETH_ReleaseTxPacket */
            xReleaseAfterSend = pdFALSE;
 80121dc:	2300      	movs	r3, #0
 80121de:	607b      	str	r3, [r7, #4]
            xResult = pdPASS;
 80121e0:	2301      	movs	r3, #1
 80121e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80121e4:	e02e      	b.n	8012244 <prvNetworkInterfaceOutput+0x198>
        }
        else
        {
            ( void ) xSemaphoreGive( xTxDescSem );
 80121e6:	4b26      	ldr	r3, [pc, #152]	@ (8012280 <prvNetworkInterfaceOutput+0x1d4>)
 80121e8:	6818      	ldr	r0, [r3, #0]
 80121ea:	2300      	movs	r3, #0
 80121ec:	2200      	movs	r2, #0
 80121ee:	2100      	movs	r1, #0
 80121f0:	f001 fe1a 	bl	8013e28 <xQueueGenericSend>
            configASSERT( pxEthHandle->gState == HAL_ETH_STATE_STARTED );
 80121f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80121f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80121fa:	2b40      	cmp	r3, #64	@ 0x40
 80121fc:	d00d      	beq.n	801221a <prvNetworkInterfaceOutput+0x16e>
	__asm volatile
 80121fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012202:	b672      	cpsid	i
 8012204:	f383 8811 	msr	BASEPRI, r3
 8012208:	f3bf 8f6f 	isb	sy
 801220c:	f3bf 8f4f 	dsb	sy
 8012210:	b662      	cpsie	i
 8012212:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
 8012214:	bf00      	nop
 8012216:	bf00      	nop
 8012218:	e7fd      	b.n	8012216 <prvNetworkInterfaceOutput+0x16a>
            /* Should be impossible if semaphores are correctly implemented */
            configASSERT( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_BUSY ) == 0 );
 801221a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012220:	f003 0302 	and.w	r3, r3, #2
 8012224:	2b00      	cmp	r3, #0
 8012226:	d00d      	beq.n	8012244 <prvNetworkInterfaceOutput+0x198>
	__asm volatile
 8012228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801222c:	b672      	cpsid	i
 801222e:	f383 8811 	msr	BASEPRI, r3
 8012232:	f3bf 8f6f 	isb	sy
 8012236:	f3bf 8f4f 	dsb	sy
 801223a:	b662      	cpsie	i
 801223c:	65bb      	str	r3, [r7, #88]	@ 0x58
}
 801223e:	bf00      	nop
 8012240:	bf00      	nop
 8012242:	e7fd      	b.n	8012240 <prvNetworkInterfaceOutput+0x194>
        }

        ( void ) xSemaphoreGive( xTxMutex );
 8012244:	4b0f      	ldr	r3, [pc, #60]	@ (8012284 <prvNetworkInterfaceOutput+0x1d8>)
 8012246:	6818      	ldr	r0, [r3, #0]
 8012248:	2300      	movs	r3, #0
 801224a:	2200      	movs	r2, #0
 801224c:	2100      	movs	r1, #0
 801224e:	f001 fdeb 	bl	8013e28 <xQueueGenericSend>
 8012252:	e006      	b.n	8012262 <prvNetworkInterfaceOutput+0x1b6>
            break;
 8012254:	bf00      	nop
 8012256:	e004      	b.n	8012262 <prvNetworkInterfaceOutput+0x1b6>
            break;
 8012258:	bf00      	nop
 801225a:	e002      	b.n	8012262 <prvNetworkInterfaceOutput+0x1b6>
            break;
 801225c:	bf00      	nop
 801225e:	e000      	b.n	8012262 <prvNetworkInterfaceOutput+0x1b6>
            break;
 8012260:	bf00      	nop
    } while( pdFALSE );

    if( xReleaseAfterSend == pdTRUE )
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d102      	bne.n	801226e <prvNetworkInterfaceOutput+0x1c2>
    {
        prvReleaseNetworkBufferDescriptor( pxDescriptor );
 8012268:	68b8      	ldr	r0, [r7, #8]
 801226a:	f000 fe22 	bl	8012eb2 <prvReleaseNetworkBufferDescriptor>
    }

    return xResult;
 801226e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8012270:	4618      	mov	r0, r3
 8012272:	3778      	adds	r7, #120	@ 0x78
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	20003464 	.word	0x20003464
 801227c:	20003564 	.word	0x20003564
 8012280:	2000355c 	.word	0x2000355c
 8012284:	20003558 	.word	0x20003558

08012288 <prvAddAllowedMACAddress>:

/*---------------------------------------------------------------------------*/

static void prvAddAllowedMACAddress( NetworkInterface_t * pxInterface,
                                     const uint8_t * pucMacAddress )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b086      	sub	sp, #24
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8012292:	4b12      	ldr	r3, [pc, #72]	@ (80122dc <prvAddAllowedMACAddress+0x54>)
 8012294:	617b      	str	r3, [r7, #20]

    /* TODO: group address filtering with Mask Byte Control */
    BaseType_t xResult = prvAddDestMACAddrMatch( pxEthHandle->Instance, pucMacAddress );
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	6839      	ldr	r1, [r7, #0]
 801229c:	4618      	mov	r0, r3
 801229e:	f000 fc23 	bl	8012ae8 <prvAddDestMACAddrMatch>
 80122a2:	6138      	str	r0, [r7, #16]

    if( xResult == pdFALSE )
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d114      	bne.n	80122d4 <prvAddAllowedMACAddress+0x4c>
    {
        const uint8_t ucHashIndex = prvGetMacHashIndex( pucMacAddress );
 80122aa:	6838      	ldr	r0, [r7, #0]
 80122ac:	f000 fb8c 	bl	80129c8 <prvGetMacHashIndex>
 80122b0:	4603      	mov	r3, r0
 80122b2:	73fb      	strb	r3, [r7, #15]

        xResult = prvSetNewDestMACAddrMatch( pxEthHandle->Instance, ucHashIndex, pucMacAddress );
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	7bf9      	ldrb	r1, [r7, #15]
 80122ba:	683a      	ldr	r2, [r7, #0]
 80122bc:	4618      	mov	r0, r3
 80122be:	f000 fce1 	bl	8012c84 <prvSetNewDestMACAddrMatch>
 80122c2:	6138      	str	r0, [r7, #16]

        if( xResult == pdFALSE )
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d104      	bne.n	80122d4 <prvAddAllowedMACAddress+0x4c>
        {
            prvAddDestMACAddrHash( pxEthHandle, ucHashIndex );
 80122ca:	7bfb      	ldrb	r3, [r7, #15]
 80122cc:	4619      	mov	r1, r3
 80122ce:	6978      	ldr	r0, [r7, #20]
 80122d0:	f000 fd08 	bl	8012ce4 <prvAddDestMACAddrHash>
        }
    }
}
 80122d4:	bf00      	nop
 80122d6:	3718      	adds	r7, #24
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	20003464 	.word	0x20003464

080122e0 <prvRemoveAllowedMACAddress>:

/*---------------------------------------------------------------------------*/

static void prvRemoveAllowedMACAddress( NetworkInterface_t * pxInterface,
                                        const uint8_t * pucMacAddress )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80122ea:	4b0a      	ldr	r3, [pc, #40]	@ (8012314 <prvRemoveAllowedMACAddress+0x34>)
 80122ec:	60fb      	str	r3, [r7, #12]

    const BaseType_t xResult = prvRemoveDestMACAddrMatch( pxEthHandle->Instance, pucMacAddress );
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	6839      	ldr	r1, [r7, #0]
 80122f4:	4618      	mov	r0, r3
 80122f6:	f000 fc5f 	bl	8012bb8 <prvRemoveDestMACAddrMatch>
 80122fa:	60b8      	str	r0, [r7, #8]

    if( xResult == pdFALSE )
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d103      	bne.n	801230a <prvRemoveAllowedMACAddress+0x2a>
    {
        prvRemoveDestMACAddrHash( pxEthHandle, pucMacAddress );
 8012302:	6839      	ldr	r1, [r7, #0]
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f000 fd2b 	bl	8012d60 <prvRemoveDestMACAddrHash>
    }
}
 801230a:	bf00      	nop
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	20003464 	.word	0x20003464

08012318 <prvNetworkInterfaceInput>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( ETH_HandleTypeDef * pxEthHandle,
                                            NetworkInterface_t * pxInterface )
{
 8012318:	b590      	push	{r4, r7, lr}
 801231a:	b087      	sub	sp, #28
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8012322:	2300      	movs	r3, #0
 8012324:	617b      	str	r3, [r7, #20]
    UBaseType_t uxCount = 0;
 8012326:	2300      	movs	r3, #0
 8012328:	613b      	str	r3, [r7, #16]

    #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
        NetworkBufferDescriptor_t * pxStartDescriptor = NULL;
        NetworkBufferDescriptor_t * pxEndDescriptor = NULL;
    #endif
    NetworkBufferDescriptor_t * pxCurDescriptor = NULL;
 801232a:	2300      	movs	r3, #0
 801232c:	60bb      	str	r3, [r7, #8]

    if( ( xMacInitStatus == eMacInitComplete ) && ( pxEthHandle->gState == HAL_ETH_STATE_STARTED ) )
 801232e:	4b25      	ldr	r3, [pc, #148]	@ (80123c4 <prvNetworkInterfaceInput+0xac>)
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	2b05      	cmp	r3, #5
 8012334:	d13b      	bne.n	80123ae <prvNetworkInterfaceInput+0x96>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801233c:	2b40      	cmp	r3, #64	@ 0x40
 801233e:	d136      	bne.n	80123ae <prvNetworkInterfaceInput+0x96>
    {
        while( HAL_ETH_ReadData( pxEthHandle, ( void ** ) &pxCurDescriptor ) == HAL_OK )
 8012340:	e02c      	b.n	801239c <prvNetworkInterfaceInput+0x84>
        {
            ++uxCount;
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	3301      	adds	r3, #1
 8012346:	613b      	str	r3, [r7, #16]

            if( pxCurDescriptor == NULL )
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d025      	beq.n	801239a <prvNetworkInterfaceInput+0x82>
            {
                /* Buffer was dropped, ignore packet */
                continue;
            }

            configASSERT( pxCurDescriptor->xDataLength <= niEMAC_DATA_BUFFER_SIZE );
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012352:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8012356:	d90d      	bls.n	8012374 <prvNetworkInterfaceInput+0x5c>
	__asm volatile
 8012358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801235c:	b672      	cpsid	i
 801235e:	f383 8811 	msr	BASEPRI, r3
 8012362:	f3bf 8f6f 	isb	sy
 8012366:	f3bf 8f4f 	dsb	sy
 801236a:	b662      	cpsie	i
 801236c:	60fb      	str	r3, [r7, #12]
}
 801236e:	bf00      	nop
 8012370:	bf00      	nop
 8012372:	e7fd      	b.n	8012370 <prvNetworkInterfaceInput+0x58>

            pxCurDescriptor->pxInterface = pxInterface;
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	683a      	ldr	r2, [r7, #0]
 8012378:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxCurDescriptor->pxEndPoint = FreeRTOS_MatchingEndpoint( pxCurDescriptor->pxInterface, pxCurDescriptor->pucEthernetBuffer );
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012382:	68bc      	ldr	r4, [r7, #8]
 8012384:	4619      	mov	r1, r3
 8012386:	4610      	mov	r0, r2
 8012388:	f7f8 ff26 	bl	800b1d8 <FreeRTOS_MatchingEndpoint>
 801238c:	4603      	mov	r3, r0
 801238e:	6323      	str	r3, [r4, #48]	@ 0x30
                    pxEndDescriptor->pxNextBuffer = pxCurDescriptor;
                }

                pxEndDescriptor = pxCurDescriptor;
            #else /* if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES ) */
                prvSendRxEvent( pxCurDescriptor );
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	4618      	mov	r0, r3
 8012394:	f000 fda3 	bl	8012ede <prvSendRxEvent>
 8012398:	e000      	b.n	801239c <prvNetworkInterfaceInput+0x84>
                continue;
 801239a:	bf00      	nop
        while( HAL_ETH_ReadData( pxEthHandle, ( void ** ) &pxCurDescriptor ) == HAL_OK )
 801239c:	f107 0308 	add.w	r3, r7, #8
 80123a0:	4619      	mov	r1, r3
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f7f0 fb32 	bl	8002a0c <HAL_ETH_ReadData>
 80123a8:	4603      	mov	r3, r0
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d0c9      	beq.n	8012342 <prvNetworkInterfaceInput+0x2a>
            #endif /* if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES ) */
        }
    }

    if( uxCount > 0 )
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d001      	beq.n	80123b8 <prvNetworkInterfaceInput+0xa0>
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            prvSendRxEvent( pxStartDescriptor );
        #endif
        xResult = pdTRUE;
 80123b4:	2301      	movs	r3, #1
 80123b6:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 80123b8:	697b      	ldr	r3, [r7, #20]
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	371c      	adds	r7, #28
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd90      	pop	{r4, r7, pc}
 80123c2:	bf00      	nop
 80123c4:	20003564 	.word	0x20003564

080123c8 <prvEMACHandlerTask>:

/*---------------------------------------------------------------------------*/

static portTASK_FUNCTION( prvEMACHandlerTask, pvParameters )
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b088      	sub	sp, #32
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
    NetworkInterface_t * pxInterface = ( NetworkInterface_t * ) pvParameters;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	61bb      	str	r3, [r7, #24]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80123d4:	4b47      	ldr	r3, [pc, #284]	@ (80124f4 <prvEMACHandlerTask+0x12c>)
 80123d6:	617b      	str	r3, [r7, #20]
    EthernetPhy_t * pxPhyObject = &xPhyObject;
 80123d8:	4b47      	ldr	r3, [pc, #284]	@ (80124f8 <prvEMACHandlerTask+0x130>)
 80123da:	613b      	str	r3, [r7, #16]

    /* iptraceEMAC_TASK_STARTING(); */

    for( ; ; )
    {
        BaseType_t xResult = pdFALSE;
 80123dc:	2300      	movs	r3, #0
 80123de:	61fb      	str	r3, [r7, #28]
        uint32_t ulISREvents = 0U;
 80123e0:	2300      	movs	r3, #0
 80123e2:	60bb      	str	r3, [r7, #8]

        if( xTaskNotifyWait( 0U, eMacEventAll, &ulISREvents, pdMS_TO_TICKS( niEMAC_TASK_MAX_BLOCK_TIME_MS ) ) == pdTRUE )
 80123e4:	f107 0208 	add.w	r2, r7, #8
 80123e8:	2364      	movs	r3, #100	@ 0x64
 80123ea:	217f      	movs	r1, #127	@ 0x7f
 80123ec:	2000      	movs	r0, #0
 80123ee:	f003 fbf1 	bl	8015bd4 <xTaskNotifyWait>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d14d      	bne.n	8012494 <prvEMACHandlerTask+0xcc>
        {
            if( ( ulISREvents & eMacEventRx ) != 0 )
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	f003 0301 	and.w	r3, r3, #1
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d004      	beq.n	801240c <prvEMACHandlerTask+0x44>
            {
                xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 8012402:	69b9      	ldr	r1, [r7, #24]
 8012404:	6978      	ldr	r0, [r7, #20]
 8012406:	f7ff ff87 	bl	8012318 <prvNetworkInterfaceInput>
 801240a:	61f8      	str	r0, [r7, #28]
            }

            if( ( ulISREvents & eMacEventTx ) != 0 )
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	f003 0302 	and.w	r3, r3, #2
 8012412:	2b00      	cmp	r3, #0
 8012414:	d002      	beq.n	801241c <prvEMACHandlerTask+0x54>
            {
                prvReleaseTxPacket( pxEthHandle );
 8012416:	6978      	ldr	r0, [r7, #20]
 8012418:	f000 fcea 	bl	8012df0 <prvReleaseTxPacket>
            }

            if( ( ulISREvents & eMacEventErrRx ) != 0 )
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	f003 0304 	and.w	r3, r3, #4
 8012422:	2b00      	cmp	r3, #0
 8012424:	d004      	beq.n	8012430 <prvEMACHandlerTask+0x68>
            {
                xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 8012426:	69b9      	ldr	r1, [r7, #24]
 8012428:	6978      	ldr	r0, [r7, #20]
 801242a:	f7ff ff75 	bl	8012318 <prvNetworkInterfaceInput>
 801242e:	61f8      	str	r0, [r7, #28]
            }

            if( ( ulISREvents & eMacEventErrTx ) != 0 )
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	f003 0308 	and.w	r3, r3, #8
 8012436:	2b00      	cmp	r3, #0
 8012438:	d002      	beq.n	8012440 <prvEMACHandlerTask+0x78>
            {
                prvReleaseTxPacket( pxEthHandle );
 801243a:	6978      	ldr	r0, [r7, #20]
 801243c:	f000 fcd8 	bl	8012df0 <prvReleaseTxPacket>
            }

            if( ( ulISREvents & eMacEventErrEth ) != 0 )
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	f003 0320 	and.w	r3, r3, #32
 8012446:	2b00      	cmp	r3, #0
 8012448:	d024      	beq.n	8012494 <prvEMACHandlerTask+0xcc>
            {
                configASSERT( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_PARAM ) == 0 );
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012450:	f003 0301 	and.w	r3, r3, #1
 8012454:	2b00      	cmp	r3, #0
 8012456:	d00d      	beq.n	8012474 <prvEMACHandlerTask+0xac>
	__asm volatile
 8012458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801245c:	b672      	cpsid	i
 801245e:	f383 8811 	msr	BASEPRI, r3
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	b662      	cpsie	i
 801246c:	60fb      	str	r3, [r7, #12]
}
 801246e:	bf00      	nop
 8012470:	bf00      	nop
 8012472:	e7fd      	b.n	8012470 <prvEMACHandlerTask+0xa8>

                if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801247a:	2be0      	cmp	r3, #224	@ 0xe0
 801247c:	d10a      	bne.n	8012494 <prvEMACHandlerTask+0xcc>
                {
                    /* Recover from critical error */
                    ( void ) HAL_ETH_Init( pxEthHandle );
 801247e:	6978      	ldr	r0, [r7, #20]
 8012480:	f7f0 f8de 	bl	8002640 <HAL_ETH_Init>
                    ( void ) HAL_ETH_Start_IT( pxEthHandle );
 8012484:	6978      	ldr	r0, [r7, #20]
 8012486:	f7f0 f975 	bl	8002774 <HAL_ETH_Start_IT>
                    xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 801248a:	69b9      	ldr	r1, [r7, #24]
 801248c:	6978      	ldr	r0, [r7, #20]
 801248e:	f7ff ff43 	bl	8012318 <prvNetworkInterfaceInput>
 8012492:	61f8      	str	r0, [r7, #28]

            /* if( ( ulISREvents & eMacEventErrMac ) != 0 ) */
            /* if( ( ulISREvents & eMacEventErrDma ) != 0 ) */
        }

        if( xPhyCheckLinkStatus( pxPhyObject, xResult ) != pdFALSE )
 8012494:	69f9      	ldr	r1, [r7, #28]
 8012496:	6938      	ldr	r0, [r7, #16]
 8012498:	f7ff fc28 	bl	8011cec <xPhyCheckLinkStatus>
 801249c:	4603      	mov	r3, r0
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d09c      	beq.n	80123dc <prvEMACHandlerTask+0x14>
        {
            if( prvGetPhyLinkStatus( pxInterface ) != pdFALSE )
 80124a2:	69b8      	ldr	r0, [r7, #24]
 80124a4:	f7ff fd6c 	bl	8011f80 <prvGetPhyLinkStatus>
 80124a8:	4603      	mov	r3, r0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d017      	beq.n	80124de <prvEMACHandlerTask+0x116>
            {
                if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80124b4:	2be0      	cmp	r3, #224	@ 0xe0
 80124b6:	d102      	bne.n	80124be <prvEMACHandlerTask+0xf6>
                {
                    /* Recover from critical error */
                    ( void ) HAL_ETH_Init( pxEthHandle );
 80124b8:	6978      	ldr	r0, [r7, #20]
 80124ba:	f7f0 f8c1 	bl	8002640 <HAL_ETH_Init>
                }

                if( pxEthHandle->gState == HAL_ETH_STATE_READY )
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80124c4:	2b10      	cmp	r3, #16
 80124c6:	d189      	bne.n	80123dc <prvEMACHandlerTask+0x14>
                {
                    /* Link was down or critical error occurred */
                    if( prvMacUpdateConfig( pxEthHandle, pxPhyObject ) != pdFALSE )
 80124c8:	6939      	ldr	r1, [r7, #16]
 80124ca:	6978      	ldr	r0, [r7, #20]
 80124cc:	f000 fcae 	bl	8012e2c <prvMacUpdateConfig>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d082      	beq.n	80123dc <prvEMACHandlerTask+0x14>
                    {
                        ( void ) HAL_ETH_Start_IT( pxEthHandle );
 80124d6:	6978      	ldr	r0, [r7, #20]
 80124d8:	f7f0 f94c 	bl	8002774 <HAL_ETH_Start_IT>
 80124dc:	e77e      	b.n	80123dc <prvEMACHandlerTask+0x14>
                    }
                }
            }
            else
            {
                ( void ) HAL_ETH_Stop_IT( pxEthHandle );
 80124de:	6978      	ldr	r0, [r7, #20]
 80124e0:	f7f0 f9b8 	bl	8002854 <HAL_ETH_Stop_IT>
                prvReleaseTxPacket( pxEthHandle );
 80124e4:	6978      	ldr	r0, [r7, #20]
 80124e6:	f000 fc83 	bl	8012df0 <prvReleaseTxPacket>
                #if ( ipconfigIS_ENABLED( ipconfigSUPPORT_NETWORK_DOWN_EVENT ) )
                    FreeRTOS_NetworkDown( pxInterface );
 80124ea:	69b8      	ldr	r0, [r7, #24]
 80124ec:	f7f7 f8a8 	bl	8009640 <FreeRTOS_NetworkDown>
    {
 80124f0:	e774      	b.n	80123dc <prvEMACHandlerTask+0x14>
 80124f2:	bf00      	nop
 80124f4:	20003464 	.word	0x20003464
 80124f8:	20003514 	.word	0x20003514

080124fc <prvEMACTaskStart>:
}

/*---------------------------------------------------------------------------*/

static BaseType_t prvEMACTaskStart( NetworkInterface_t * pxInterface )
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b08a      	sub	sp, #40	@ 0x28
 8012500:	af04      	add	r7, sp, #16
 8012502:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8012504:	2300      	movs	r3, #0
 8012506:	617b      	str	r3, [r7, #20]

    if( xTxMutex == NULL )
 8012508:	4b36      	ldr	r3, [pc, #216]	@ (80125e4 <prvEMACTaskStart+0xe8>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d11e      	bne.n	801254e <prvEMACTaskStart+0x52>
    {
        #if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION )
            static StaticSemaphore_t xTxMutexBuf;
            xTxMutex = xSemaphoreCreateMutexStatic( &xTxMutexBuf );
 8012510:	4935      	ldr	r1, [pc, #212]	@ (80125e8 <prvEMACTaskStart+0xec>)
 8012512:	2001      	movs	r0, #1
 8012514:	f001 fc30 	bl	8013d78 <xQueueCreateMutexStatic>
 8012518:	4603      	mov	r3, r0
 801251a:	4a32      	ldr	r2, [pc, #200]	@ (80125e4 <prvEMACTaskStart+0xe8>)
 801251c:	6013      	str	r3, [r2, #0]
        #else
            xTxMutex = xSemaphoreCreateMutex();
        #endif
        configASSERT( xTxMutex != NULL );
 801251e:	4b31      	ldr	r3, [pc, #196]	@ (80125e4 <prvEMACTaskStart+0xe8>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d10d      	bne.n	8012542 <prvEMACTaskStart+0x46>
	__asm volatile
 8012526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801252a:	b672      	cpsid	i
 801252c:	f383 8811 	msr	BASEPRI, r3
 8012530:	f3bf 8f6f 	isb	sy
 8012534:	f3bf 8f4f 	dsb	sy
 8012538:	b662      	cpsie	i
 801253a:	613b      	str	r3, [r7, #16]
}
 801253c:	bf00      	nop
 801253e:	bf00      	nop
 8012540:	e7fd      	b.n	801253e <prvEMACTaskStart+0x42>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            vQueueAddToRegistry( xTxMutex, niEMAC_TX_MUTEX_NAME );
 8012542:	4b28      	ldr	r3, [pc, #160]	@ (80125e4 <prvEMACTaskStart+0xe8>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4929      	ldr	r1, [pc, #164]	@ (80125ec <prvEMACTaskStart+0xf0>)
 8012548:	4618      	mov	r0, r3
 801254a:	f002 f9b1 	bl	80148b0 <vQueueAddToRegistry>
        #endif
    }

    if( xTxDescSem == NULL )
 801254e:	4b28      	ldr	r3, [pc, #160]	@ (80125f0 <prvEMACTaskStart+0xf4>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d11f      	bne.n	8012596 <prvEMACTaskStart+0x9a>
    {
        #if ( ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) )
            static StaticSemaphore_t xTxDescSemBuf;
            xTxDescSem = xSemaphoreCreateCountingStatic(
 8012556:	4a27      	ldr	r2, [pc, #156]	@ (80125f4 <prvEMACTaskStart+0xf8>)
 8012558:	2104      	movs	r1, #4
 801255a:	2004      	movs	r0, #4
 801255c:	f001 fc27 	bl	8013dae <xQueueCreateCountingSemaphoreStatic>
 8012560:	4603      	mov	r3, r0
 8012562:	4a23      	ldr	r2, [pc, #140]	@ (80125f0 <prvEMACTaskStart+0xf4>)
 8012564:	6013      	str	r3, [r2, #0]
            xTxDescSem = xSemaphoreCreateCounting(
                ( UBaseType_t ) ETH_TX_DESC_CNT,
                ( UBaseType_t ) ETH_TX_DESC_CNT
                );
        #endif /* if ( ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) ) */
        configASSERT( xTxDescSem != NULL );
 8012566:	4b22      	ldr	r3, [pc, #136]	@ (80125f0 <prvEMACTaskStart+0xf4>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d10d      	bne.n	801258a <prvEMACTaskStart+0x8e>
	__asm volatile
 801256e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012572:	b672      	cpsid	i
 8012574:	f383 8811 	msr	BASEPRI, r3
 8012578:	f3bf 8f6f 	isb	sy
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	b662      	cpsie	i
 8012582:	60fb      	str	r3, [r7, #12]
}
 8012584:	bf00      	nop
 8012586:	bf00      	nop
 8012588:	e7fd      	b.n	8012586 <prvEMACTaskStart+0x8a>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            vQueueAddToRegistry( xTxDescSem, niEMAC_TX_DESC_SEM_NAME );
 801258a:	4b19      	ldr	r3, [pc, #100]	@ (80125f0 <prvEMACTaskStart+0xf4>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	491a      	ldr	r1, [pc, #104]	@ (80125f8 <prvEMACTaskStart+0xfc>)
 8012590:	4618      	mov	r0, r3
 8012592:	f002 f98d 	bl	80148b0 <vQueueAddToRegistry>
        #endif
    }

    if( ( xEMACTaskHandle == NULL ) && ( xTxMutex != NULL ) && ( xTxDescSem != NULL ) )
 8012596:	4b19      	ldr	r3, [pc, #100]	@ (80125fc <prvEMACTaskStart+0x100>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d117      	bne.n	80125ce <prvEMACTaskStart+0xd2>
 801259e:	4b11      	ldr	r3, [pc, #68]	@ (80125e4 <prvEMACTaskStart+0xe8>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d013      	beq.n	80125ce <prvEMACTaskStart+0xd2>
 80125a6:	4b12      	ldr	r3, [pc, #72]	@ (80125f0 <prvEMACTaskStart+0xf4>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d00f      	beq.n	80125ce <prvEMACTaskStart+0xd2>
    {
        #if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION )
            static StackType_t uxEMACTaskStack[ niEMAC_TASK_STACK_SIZE ];
            static StaticTask_t xEMACTaskTCB;
            xEMACTaskHandle = xTaskCreateStatic(
 80125ae:	4b14      	ldr	r3, [pc, #80]	@ (8012600 <prvEMACTaskStart+0x104>)
 80125b0:	9302      	str	r3, [sp, #8]
 80125b2:	4b14      	ldr	r3, [pc, #80]	@ (8012604 <prvEMACTaskStart+0x108>)
 80125b4:	9301      	str	r3, [sp, #4]
 80125b6:	2337      	movs	r3, #55	@ 0x37
 80125b8:	9300      	str	r3, [sp, #0]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80125c0:	4911      	ldr	r1, [pc, #68]	@ (8012608 <prvEMACTaskStart+0x10c>)
 80125c2:	4812      	ldr	r0, [pc, #72]	@ (801260c <prvEMACTaskStart+0x110>)
 80125c4:	f002 f9fc 	bl	80149c0 <xTaskCreateStatic>
 80125c8:	4603      	mov	r3, r0
 80125ca:	4a0c      	ldr	r2, [pc, #48]	@ (80125fc <prvEMACTaskStart+0x100>)
 80125cc:	6013      	str	r3, [r2, #0]
                &xEMACTaskHandle
                );
        #endif /* if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) */
    }

    if( xEMACTaskHandle != NULL )
 80125ce:	4b0b      	ldr	r3, [pc, #44]	@ (80125fc <prvEMACTaskStart+0x100>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d001      	beq.n	80125da <prvEMACTaskStart+0xde>
    {
        xResult = pdTRUE;
 80125d6:	2301      	movs	r3, #1
 80125d8:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 80125da:	697b      	ldr	r3, [r7, #20]
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3718      	adds	r7, #24
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	20003558 	.word	0x20003558
 80125e8:	200035b4 	.word	0x200035b4
 80125ec:	080185ac 	.word	0x080185ac
 80125f0:	2000355c 	.word	0x2000355c
 80125f4:	20003604 	.word	0x20003604
 80125f8:	080185bc 	.word	0x080185bc
 80125fc:	20003554 	.word	0x20003554
 8012600:	20004654 	.word	0x20004654
 8012604:	20003654 	.word	0x20003654
 8012608:	080185cc 	.word	0x080185cc
 801260c:	080123c9 	.word	0x080123c9

08012610 <prvEthConfigInit>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvEthConfigInit( ETH_HandleTypeDef * pxEthHandle,
                                    NetworkInterface_t * pxInterface )
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b0ae      	sub	sp, #184	@ 0xb8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 801261a:	2300      	movs	r3, #0
 801261c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    pxEthHandle->Instance = ETH;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	4a7d      	ldr	r2, [pc, #500]	@ (8012818 <prvEthConfigInit+0x208>)
 8012624:	601a      	str	r2, [r3, #0]
    pxEthHandle->Init.MediaInterface = ipconfigIS_ENABLED( niEMAC_USE_RMII ) ? HAL_ETH_RMII_MODE : HAL_ETH_MII_MODE;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 801262c:	609a      	str	r2, [r3, #8]
    pxEthHandle->Init.RxBuffLen = niEMAC_DATA_BUFFER_SIZE;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8012634:	615a      	str	r2, [r3, #20]
    /* configASSERT( pxEthHandle->Init.RxBuffLen <= ETH_MAX_PACKET_SIZE ); */
    configASSERT( pxEthHandle->Init.RxBuffLen % 4U == 0 );
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	695b      	ldr	r3, [r3, #20]
 801263a:	f003 0303 	and.w	r3, r3, #3
 801263e:	2b00      	cmp	r3, #0
 8012640:	d00e      	beq.n	8012660 <prvEthConfigInit+0x50>
	__asm volatile
 8012642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012646:	b672      	cpsid	i
 8012648:	f383 8811 	msr	BASEPRI, r3
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	f3bf 8f4f 	dsb	sy
 8012654:	b662      	cpsie	i
 8012656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
}
 801265a:	bf00      	nop
 801265c:	bf00      	nop
 801265e:	e7fd      	b.n	801265c <prvEthConfigInit+0x4c>
    #if ( defined( niEMAC_STM32FX ) && defined( ETH_RX_BUF_SIZE ) )
        configASSERT( pxEthHandle->Init.RxBuffLen == ETH_RX_BUF_SIZE );
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	695b      	ldr	r3, [r3, #20]
 8012664:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8012668:	d00e      	beq.n	8012688 <prvEthConfigInit+0x78>
	__asm volatile
 801266a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801266e:	b672      	cpsid	i
 8012670:	f383 8811 	msr	BASEPRI, r3
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	b662      	cpsie	i
 801267e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
}
 8012682:	bf00      	nop
 8012684:	bf00      	nop
 8012686:	e7fd      	b.n	8012684 <prvEthConfigInit+0x74>
    #endif

    static ETH_DMADescTypeDef xDMADescTx[ ETH_TX_DESC_CNT ] __ALIGNED( portBYTE_ALIGNMENT ) __attribute__( ( section( niEMAC_TX_DESC_SECTION ) ) );
    static ETH_DMADescTypeDef xDMADescRx[ ETH_RX_DESC_CNT ] __ALIGNED( portBYTE_ALIGNMENT ) __attribute__( ( section( niEMAC_RX_DESC_SECTION ) ) );
    pxEthHandle->Init.TxDesc = xDMADescTx;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	4a64      	ldr	r2, [pc, #400]	@ (801281c <prvEthConfigInit+0x20c>)
 801268c:	60da      	str	r2, [r3, #12]
    pxEthHandle->Init.RxDesc = xDMADescRx;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4a63      	ldr	r2, [pc, #396]	@ (8012820 <prvEthConfigInit+0x210>)
 8012692:	611a      	str	r2, [r3, #16]
    ( void ) memset( &xDMADescTx, 0, sizeof( xDMADescTx ) );
 8012694:	22a0      	movs	r2, #160	@ 0xa0
 8012696:	2100      	movs	r1, #0
 8012698:	4860      	ldr	r0, [pc, #384]	@ (801281c <prvEthConfigInit+0x20c>)
 801269a:	f004 fe3a 	bl	8017312 <memset>
    ( void ) memset( &xDMADescRx, 0, sizeof( xDMADescRx ) );
 801269e:	22a0      	movs	r2, #160	@ 0xa0
 80126a0:	2100      	movs	r1, #0
 80126a2:	485f      	ldr	r0, [pc, #380]	@ (8012820 <prvEthConfigInit+0x210>)
 80126a4:	f004 fe35 	bl	8017312 <memset>

    const NetworkEndPoint_t * const pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 80126a8:	6838      	ldr	r0, [r7, #0]
 80126aa:	f7f8 fd5d 	bl	800b168 <FreeRTOS_FirstEndPoint>
 80126ae:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

    if( pxEndPoint != NULL )
 80126b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d03c      	beq.n	8012734 <prvEthConfigInit+0x124>
    {
        pxEthHandle->Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 80126ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80126be:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	605a      	str	r2, [r3, #4]

        if( HAL_ETH_Init( pxEthHandle ) == HAL_OK )
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f7ef ffba 	bl	8002640 <HAL_ETH_Init>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d130      	bne.n	8012734 <prvEthConfigInit+0x124>
        {
            #if defined( niEMAC_STM32FX )
                /* This function doesn't get called in Fxx driver */
                HAL_ETH_SetMDIOClockRange( pxEthHandle );
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f7f0 feb8 	bl	8003448 <HAL_ETH_SetMDIOClockRange>
            #endif
            ETH_MACConfigTypeDef xMACConfig;
            ( void ) HAL_ETH_GetMACConfig( pxEthHandle, &xMACConfig );
 80126d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80126dc:	4619      	mov	r1, r3
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7f0 fca8 	bl	8003034 <HAL_ETH_GetMACConfig>
            xMACConfig.ChecksumOffload = ( FunctionalState ) ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM );
 80126e4:	2301      	movs	r3, #1
 80126e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            xMACConfig.CRCStripTypePacket = DISABLE;
 80126ea:	2300      	movs	r3, #0
 80126ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
            xMACConfig.AutomaticPadCRCStrip = ENABLE;
 80126f0:	2301      	movs	r3, #1
 80126f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            xMACConfig.RetryTransmission = ENABLE;
 80126f6:	2301      	movs	r3, #1
 80126f8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            ( void ) HAL_ETH_SetMACConfig( pxEthHandle, &xMACConfig );
 80126fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012700:	4619      	mov	r1, r3
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7f0 fe6c 	bl	80033e0 <HAL_ETH_SetMACConfig>

            ETH_DMAConfigTypeDef xDMAConfig;
            ( void ) HAL_ETH_GetDMAConfig( pxEthHandle, &xDMAConfig );
 8012708:	f107 0308 	add.w	r3, r7, #8
 801270c:	4619      	mov	r1, r3
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f7f0 fd88 	bl	8003224 <HAL_ETH_GetDMAConfig>
            #if defined( niEMAC_STM32FX )
                xDMAConfig.EnhancedDescriptorFormat = ( FunctionalState ) ( ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM ) || ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM ) );
 8012714:	2301      	movs	r3, #1
 8012716:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                /* #if ipconfigIS_ENABLED( ipconfigUSE_TCP ) && ipconfigIS_ENABLED( niEMAC_TCP_SEGMENTATION )
                 *  xDMAConfig.TCPSegmentation = ENABLE;
                 *  xDMAConfig.MaximumSegmentSize = ipconfigTCP_MSS;
                 #endif */
            #endif
            ( void ) HAL_ETH_SetDMAConfig( pxEthHandle, &xDMAConfig );
 801271a:	f107 0308 	add.w	r3, r7, #8
 801271e:	4619      	mov	r1, r3
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7f0 fe77 	bl	8003414 <HAL_ETH_SetDMAConfig>
                /* HAL_ETHEx_DisableARPOffload( pxEthHandle );
                 * HAL_ETHEx_SetARPAddressMatch( pxEthHandle, ulSourceIPAddress );
                 * HAL_ETHEx_EnableARPOffload( pxEthHandle ); */
            #endif

            prvInitMacAddresses( pxEthHandle, pxInterface );
 8012726:	6839      	ldr	r1, [r7, #0]
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f000 f881 	bl	8012830 <prvInitMacAddresses>

            xResult = pdTRUE;
 801272e:	2301      	movs	r3, #1
 8012730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        }
    }

    if( xResult == pdTRUE )
 8012734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012738:	2b01      	cmp	r3, #1
 801273a:	d167      	bne.n	801280c <prvEthConfigInit+0x1fc>
    {
        #ifdef niEMAC_CACHEABLE
            if( niEMAC_CACHE_ENABLED )
 801273c:	4b39      	ldr	r3, [pc, #228]	@ (8012824 <prvEthConfigInit+0x214>)
 801273e:	695b      	ldr	r3, [r3, #20]
 8012740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012744:	2b00      	cmp	r3, #0
 8012746:	d014      	beq.n	8012772 <prvEthConfigInit+0x162>
            {
                #ifdef niEMAC_MPU
                    configASSERT( niEMAC_MPU_ENABLED != 0 );
 8012748:	4b37      	ldr	r3, [pc, #220]	@ (8012828 <prvEthConfigInit+0x218>)
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	f003 0301 	and.w	r3, r3, #1
 8012750:	2b00      	cmp	r3, #0
 8012752:	d10e      	bne.n	8012772 <prvEthConfigInit+0x162>
	__asm volatile
 8012754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012758:	b672      	cpsid	i
 801275a:	f383 8811 	msr	BASEPRI, r3
 801275e:	f3bf 8f6f 	isb	sy
 8012762:	f3bf 8f4f 	dsb	sy
 8012766:	b662      	cpsie	i
 8012768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
}
 801276c:	bf00      	nop
 801276e:	bf00      	nop
 8012770:	e7fd      	b.n	801276e <prvEthConfigInit+0x15e>
                /* _FLD2VAL( SCB_CCSIDR_LINESIZE, SCB->CCSIDR ) */
            }
        #endif

        #ifdef configPRIO_BITS
            const uint32_t ulPrioBits = configPRIO_BITS;
 8012772:	2304      	movs	r3, #4
 8012774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        #else
            const uint32_t ulPrioBits = __NVIC_PRIO_BITS;
        #endif
        const uint32_t ulPriority = NVIC_GetPriority( ETH_IRQn ) << ( 8U - ulPrioBits );
 8012778:	203d      	movs	r0, #61	@ 0x3d
 801277a:	f7ff fba1 	bl	8011ec0 <__NVIC_GetPriority>
 801277e:	4602      	mov	r2, r0
 8012780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012784:	f1c3 0308 	rsb	r3, r3, #8
 8012788:	fa02 f303 	lsl.w	r3, r2, r3
 801278c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

        if( ulPriority < configMAX_SYSCALL_INTERRUPT_PRIORITY )
 8012790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012794:	2b4f      	cmp	r3, #79	@ 0x4f
 8012796:	d80a      	bhi.n	80127ae <prvEthConfigInit+0x19e>
        {
            FreeRTOS_debug_printf( ( "prvEthConfigInit: Incorrectly set ETH_IRQn priority\n" ) );
            NVIC_SetPriority( ETH_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY >> ( 8U - ulPrioBits ) );
 8012798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801279c:	f1c3 0308 	rsb	r3, r3, #8
 80127a0:	2250      	movs	r2, #80	@ 0x50
 80127a2:	fa42 f303 	asr.w	r3, r2, r3
 80127a6:	4619      	mov	r1, r3
 80127a8:	203d      	movs	r0, #61	@ 0x3d
 80127aa:	f7ff fb5f 	bl	8011e6c <__NVIC_SetPriority>
        }

        if( NVIC_GetEnableIRQ( ETH_IRQn ) == 0 )
 80127ae:	203d      	movs	r0, #61	@ 0x3d
 80127b0:	f7ff fb3c 	bl	8011e2c <__NVIC_GetEnableIRQ>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d102      	bne.n	80127c0 <prvEthConfigInit+0x1b0>
        {
            FreeRTOS_debug_printf( ( "prvEthConfigInit: ETH_IRQn was not enabled by application\n" ) );
            HAL_NVIC_EnableIRQ( ETH_IRQn );
 80127ba:	203d      	movs	r0, #61	@ 0x3d
 80127bc:	f7ef feba 	bl	8002534 <HAL_NVIC_EnableIRQ>
        }

        #ifdef niEMAC_STM32FX
            configASSERT( __HAL_RCC_ETH_IS_CLK_ENABLED() != 0 );
 80127c0:	4b1a      	ldr	r3, [pc, #104]	@ (801282c <prvEthConfigInit+0x21c>)
 80127c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d00d      	beq.n	80127e8 <prvEthConfigInit+0x1d8>
 80127cc:	4b17      	ldr	r3, [pc, #92]	@ (801282c <prvEthConfigInit+0x21c>)
 80127ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d007      	beq.n	80127e8 <prvEthConfigInit+0x1d8>
 80127d8:	4b14      	ldr	r3, [pc, #80]	@ (801282c <prvEthConfigInit+0x21c>)
 80127da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d001      	beq.n	80127e8 <prvEthConfigInit+0x1d8>
 80127e4:	2301      	movs	r3, #1
 80127e6:	e000      	b.n	80127ea <prvEthConfigInit+0x1da>
 80127e8:	2300      	movs	r3, #0
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d10e      	bne.n	801280c <prvEthConfigInit+0x1fc>
	__asm volatile
 80127ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127f2:	b672      	cpsid	i
 80127f4:	f383 8811 	msr	BASEPRI, r3
 80127f8:	f3bf 8f6f 	isb	sy
 80127fc:	f3bf 8f4f 	dsb	sy
 8012800:	b662      	cpsie	i
 8012802:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
}
 8012806:	bf00      	nop
 8012808:	bf00      	nop
 801280a:	e7fd      	b.n	8012808 <prvEthConfigInit+0x1f8>
            configASSERT( __HAL_RCC_ETH1TX_IS_CLK_ENABLED() != 0 );
            configASSERT( __HAL_RCC_ETH1RX_IS_CLK_ENABLED() != 0 );
        #endif
    }

    return xResult;
 801280c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
}
 8012810:	4618      	mov	r0, r3
 8012812:	37b8      	adds	r7, #184	@ 0xb8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	40028000 	.word	0x40028000
 801281c:	200001c0 	.word	0x200001c0
 8012820:	20000260 	.word	0x20000260
 8012824:	e000ed00 	.word	0xe000ed00
 8012828:	e000ed90 	.word	0xe000ed90
 801282c:	40023800 	.word	0x40023800

08012830 <prvInitMacAddresses>:

/*---------------------------------------------------------------------------*/

static void prvInitMacAddresses( ETH_HandleTypeDef * pxEthHandle,
                                 NetworkInterface_t * pxInterface )
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b088      	sub	sp, #32
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
    ETH_MACFilterConfigTypeDef xFilterConfig;

    ( void ) HAL_ETH_GetMACFilterConfig( pxEthHandle, &xFilterConfig );
 801283a:	f107 030c 	add.w	r3, r7, #12
 801283e:	4619      	mov	r1, r3
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f7f0 fe99 	bl	8003578 <HAL_ETH_GetMACFilterConfig>
    xFilterConfig.ReceiveAllMode = DISABLE;
 8012846:	2300      	movs	r3, #0
 8012848:	737b      	strb	r3, [r7, #13]
    xFilterConfig.HachOrPerfectFilter = ENABLE;
 801284a:	2301      	movs	r3, #1
 801284c:	73bb      	strb	r3, [r7, #14]
    xFilterConfig.SrcAddrFiltering = DISABLE;
 801284e:	2300      	movs	r3, #0
 8012850:	74bb      	strb	r3, [r7, #18]
    xFilterConfig.SrcAddrInverseFiltering = DISABLE;
 8012852:	2300      	movs	r3, #0
 8012854:	74fb      	strb	r3, [r7, #19]
    xFilterConfig.ControlPacketsFilter = ETH_CTRLPACKETS_BLOCK_ALL;
 8012856:	2340      	movs	r3, #64	@ 0x40
 8012858:	61bb      	str	r3, [r7, #24]
    xFilterConfig.BroadcastFilter = ENABLE;
 801285a:	2301      	movs	r3, #1
 801285c:	757b      	strb	r3, [r7, #21]
    xFilterConfig.PassAllMulticast = DISABLE;
 801285e:	2300      	movs	r3, #0
 8012860:	747b      	strb	r3, [r7, #17]
    xFilterConfig.DestAddrInverseFiltering = DISABLE;
 8012862:	2300      	movs	r3, #0
 8012864:	753b      	strb	r3, [r7, #20]
    xFilterConfig.HashMulticast = ENABLE;
 8012866:	2301      	movs	r3, #1
 8012868:	743b      	strb	r3, [r7, #16]
    xFilterConfig.HashUnicast = ENABLE;
 801286a:	2301      	movs	r3, #1
 801286c:	73fb      	strb	r3, [r7, #15]
    xFilterConfig.PromiscuousMode = DISABLE;
 801286e:	2300      	movs	r3, #0
 8012870:	733b      	strb	r3, [r7, #12]
    ( void ) HAL_ETH_SetMACFilterConfig( pxEthHandle, &xFilterConfig );
 8012872:	f107 030c 	add.w	r3, r7, #12
 8012876:	4619      	mov	r1, r3
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7f0 fe27 	bl	80034cc <HAL_ETH_SetMACFilterConfig>

    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface ); pxEndPoint != NULL; pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 801287e:	6838      	ldr	r0, [r7, #0]
 8012880:	f7f8 fc72 	bl	800b168 <FreeRTOS_FirstEndPoint>
 8012884:	61f8      	str	r0, [r7, #28]
 8012886:	e00a      	b.n	801289e <prvInitMacAddresses+0x6e>
    {
        prvAddAllowedMACAddress( pxInterface, pxEndPoint->xMACAddress.ucBytes );
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	3338      	adds	r3, #56	@ 0x38
 801288c:	4619      	mov	r1, r3
 801288e:	6838      	ldr	r0, [r7, #0]
 8012890:	f7ff fcfa 	bl	8012288 <prvAddAllowedMACAddress>
    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface ); pxEndPoint != NULL; pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8012894:	69f9      	ldr	r1, [r7, #28]
 8012896:	6838      	ldr	r0, [r7, #0]
 8012898:	f7f8 fcae 	bl	800b1f8 <FreeRTOS_NextEndPoint>
 801289c:	61f8      	str	r0, [r7, #28]
 801289e:	69fb      	ldr	r3, [r7, #28]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d1f1      	bne.n	8012888 <prvInitMacAddresses+0x58>
        #endif
        #if ipconfigIS_ENABLED( ipconfigUSE_LLMNR )
            prvAddAllowedMACAddress( pxInterface, xLLMNR_MacAddressIPv6.ucBytes );
        #endif
    #endif
}
 80128a4:	bf00      	nop
 80128a6:	bf00      	nop
 80128a8:	3720      	adds	r7, #32
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
	...

080128b0 <prvPhyInit>:
#endif /* ifdef niEMAC_STM32HX */

/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyInit( EthernetPhy_t * pxPhyObject )
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b084      	sub	sp, #16
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80128b8:	2300      	movs	r3, #0
 80128ba:	60fb      	str	r3, [r7, #12]

    vPhyInitialise( pxPhyObject, ( xApplicationPhyReadHook_t ) prvPhyReadReg, ( xApplicationPhyWriteHook_t ) prvPhyWriteReg );
 80128bc:	4a08      	ldr	r2, [pc, #32]	@ (80128e0 <prvPhyInit+0x30>)
 80128be:	4909      	ldr	r1, [pc, #36]	@ (80128e4 <prvPhyInit+0x34>)
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7fe fea3 	bl	801160c <vPhyInitialise>

    if( xPhyDiscover( pxPhyObject ) != 0 )
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7fe feb5 	bl	8011636 <xPhyDiscover>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d001      	beq.n	80128d6 <prvPhyInit+0x26>
    {
        xResult = pdPASS;
 80128d2:	2301      	movs	r3, #1
 80128d4:	60fb      	str	r3, [r7, #12]
    }

    return xResult;
 80128d6:	68fb      	ldr	r3, [r7, #12]
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3710      	adds	r7, #16
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	08011f49 	.word	0x08011f49
 80128e4:	08011f11 	.word	0x08011f11

080128e8 <prvPhyStart>:

static BaseType_t prvPhyStart( ETH_HandleTypeDef * pxEthHandle,
                               NetworkInterface_t * pxInterface,
                               EthernetPhy_t * pxPhyObject )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b086      	sub	sp, #24
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80128f4:	2300      	movs	r3, #0
 80128f6:	617b      	str	r3, [r7, #20]

    if( prvGetPhyLinkStatus( pxInterface ) == pdFALSE )
 80128f8:	68b8      	ldr	r0, [r7, #8]
 80128fa:	f7ff fb41 	bl	8011f80 <prvGetPhyLinkStatus>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d11a      	bne.n	801293a <prvPhyStart+0x52>
    {
        const PhyProperties_t xPhyProperties =
 8012904:	2300      	movs	r3, #0
 8012906:	613b      	str	r3, [r7, #16]
 8012908:	2303      	movs	r3, #3
 801290a:	743b      	strb	r3, [r7, #16]
 801290c:	2303      	movs	r3, #3
 801290e:	747b      	strb	r3, [r7, #17]
 8012910:	2303      	movs	r3, #3
 8012912:	74bb      	strb	r3, [r7, #18]
        #if ipconfigIS_DISABLED( niEMAC_AUTO_NEGOTIATION )
            pxPhyObject->xPhyPreferences.ucSpeed = xPhyProperties.ucSpeed;
            pxPhyObject->xPhyPreferences.ucDuplex = xPhyProperties.ucDuplex;
        #endif

        if( xPhyConfigure( pxPhyObject, &xPhyProperties ) == 0 )
 8012914:	f107 0310 	add.w	r3, r7, #16
 8012918:	4619      	mov	r1, r3
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f7fe ff71 	bl	8011802 <xPhyConfigure>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d10b      	bne.n	801293e <prvPhyStart+0x56>
        {
            if( prvMacUpdateConfig( pxEthHandle, pxPhyObject ) != pdFALSE )
 8012926:	6879      	ldr	r1, [r7, #4]
 8012928:	68f8      	ldr	r0, [r7, #12]
 801292a:	f000 fa7f 	bl	8012e2c <prvMacUpdateConfig>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d004      	beq.n	801293e <prvPhyStart+0x56>
            {
                xResult = pdTRUE;
 8012934:	2301      	movs	r3, #1
 8012936:	617b      	str	r3, [r7, #20]
 8012938:	e001      	b.n	801293e <prvPhyStart+0x56>
            }
        }
    }
    else
    {
        xResult = pdTRUE;
 801293a:	2301      	movs	r3, #1
 801293c:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 801293e:	697b      	ldr	r3, [r7, #20]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3718      	adds	r7, #24
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <prvCalcCrc32>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvCalcCrc32( const uint8_t * const pucMACAddr )
{
 8012948:	b480      	push	{r7}
 801294a:	b089      	sub	sp, #36	@ 0x24
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32 = 0xFFFFFFFFU;
 8012950:	f04f 33ff 	mov.w	r3, #4294967295
 8012954:	61fb      	str	r3, [r7, #28]

    uint32_t ucIndex;

    for( ucIndex = ipMAC_ADDRESS_LENGTH_BYTES; ucIndex > 0; --ucIndex )
 8012956:	2306      	movs	r3, #6
 8012958:	61bb      	str	r3, [r7, #24]
 801295a:	e028      	b.n	80129ae <prvCalcCrc32+0x66>
    {
        ulCRC32 ^= __RBIT( pucMACAddr[ ipMAC_ADDRESS_LENGTH_BYTES - ucIndex ] );
 801295c:	69bb      	ldr	r3, [r7, #24]
 801295e:	f1c3 0306 	rsb	r3, r3, #6
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	4413      	add	r3, r2
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	fa93 f3a3 	rbit	r3, r3
 8012970:	60fb      	str	r3, [r7, #12]
  return result;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	69fa      	ldr	r2, [r7, #28]
 8012976:	4053      	eors	r3, r2
 8012978:	61fb      	str	r3, [r7, #28]

        uint8_t ucJndex;

        for( ucJndex = 8; ucJndex > 0; --ucJndex )
 801297a:	2308      	movs	r3, #8
 801297c:	75fb      	strb	r3, [r7, #23]
 801297e:	e010      	b.n	80129a2 <prvCalcCrc32+0x5a>
        {
            if( ulCRC32 & 0x80000000U )
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	2b00      	cmp	r3, #0
 8012984:	da07      	bge.n	8012996 <prvCalcCrc32+0x4e>
            {
                ulCRC32 <<= 1;
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	61fb      	str	r3, [r7, #28]
                ulCRC32 ^= niEMAC_CRC_POLY;
 801298c:	69fa      	ldr	r2, [r7, #28]
 801298e:	4b0d      	ldr	r3, [pc, #52]	@ (80129c4 <prvCalcCrc32+0x7c>)
 8012990:	4053      	eors	r3, r2
 8012992:	61fb      	str	r3, [r7, #28]
 8012994:	e002      	b.n	801299c <prvCalcCrc32+0x54>
            }
            else
            {
                ulCRC32 <<= 1;
 8012996:	69fb      	ldr	r3, [r7, #28]
 8012998:	005b      	lsls	r3, r3, #1
 801299a:	61fb      	str	r3, [r7, #28]
        for( ucJndex = 8; ucJndex > 0; --ucJndex )
 801299c:	7dfb      	ldrb	r3, [r7, #23]
 801299e:	3b01      	subs	r3, #1
 80129a0:	75fb      	strb	r3, [r7, #23]
 80129a2:	7dfb      	ldrb	r3, [r7, #23]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d1eb      	bne.n	8012980 <prvCalcCrc32+0x38>
    for( ucIndex = ipMAC_ADDRESS_LENGTH_BYTES; ucIndex > 0; --ucIndex )
 80129a8:	69bb      	ldr	r3, [r7, #24]
 80129aa:	3b01      	subs	r3, #1
 80129ac:	61bb      	str	r3, [r7, #24]
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d1d3      	bne.n	801295c <prvCalcCrc32+0x14>
            }
        }
    }

    return ~ulCRC32;
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	43db      	mvns	r3, r3
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3724      	adds	r7, #36	@ 0x24
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr
 80129c4:	04c11db7 	.word	0x04c11db7

080129c8 <prvGetMacHashIndex>:

/*---------------------------------------------------------------------------*/

static uint8_t prvGetMacHashIndex( const uint8_t * const pucMACAddr )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
    const uint32_t ulHash = prvCalcCrc32( pucMACAddr );
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f7ff ffb9 	bl	8012948 <prvCalcCrc32>
 80129d6:	60f8      	str	r0, [r7, #12]
    const uint8_t ucHashIndex = ( ulHash >> 26 ) & 0x3FU;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	0e9b      	lsrs	r3, r3, #26
 80129dc:	72fb      	strb	r3, [r7, #11]

    return ucHashIndex;
 80129de:	7afb      	ldrb	r3, [r7, #11]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <prvHAL_ETH_SetDestMACAddrMatch>:

/* Needed since HAL Driver only provides source matching */
static void prvHAL_ETH_SetDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                            uint8_t ucIndex,
                                            const uint8_t * const pucMACAddr )
{
 80129e8:	b480      	push	{r7}
 80129ea:	b08b      	sub	sp, #44	@ 0x2c
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	460b      	mov	r3, r1
 80129f2:	607a      	str	r2, [r7, #4]
 80129f4:	72fb      	strb	r3, [r7, #11]
    configASSERT( ucIndex < niEMAC_MAC_SRC_MATCH_COUNT );
 80129f6:	7afb      	ldrb	r3, [r7, #11]
 80129f8:	2b02      	cmp	r3, #2
 80129fa:	d90d      	bls.n	8012a18 <prvHAL_ETH_SetDestMACAddrMatch+0x30>
	__asm volatile
 80129fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a00:	b672      	cpsid	i
 8012a02:	f383 8811 	msr	BASEPRI, r3
 8012a06:	f3bf 8f6f 	isb	sy
 8012a0a:	f3bf 8f4f 	dsb	sy
 8012a0e:	b662      	cpsie	i
 8012a10:	617b      	str	r3, [r7, #20]
}
 8012a12:	bf00      	nop
 8012a14:	bf00      	nop
 8012a16:	e7fd      	b.n	8012a14 <prvHAL_ETH_SetDestMACAddrMatch+0x2c>
    const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	3305      	adds	r3, #5
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	021b      	lsls	r3, r3, #8
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	3204      	adds	r2, #4
 8012a24:	7812      	ldrb	r2, [r2, #0]
 8012a26:	4313      	orrs	r3, r2
 8012a28:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	3303      	adds	r3, #3
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	061a      	lsls	r2, r3, #24
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	3302      	adds	r3, #2
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	041b      	lsls	r3, r3, #16
 8012a3a:	431a      	orrs	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	021b      	lsls	r3, r3, #8
 8012a44:	4313      	orrs	r3, r2
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	7812      	ldrb	r2, [r2, #0]
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	623b      	str	r3, [r7, #32]

    /* MACA0HR/MACA0LR reserved for the primary MAC-address. */
    const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	3348      	adds	r3, #72	@ 0x48
 8012a52:	461a      	mov	r2, r3
 8012a54:	7afb      	ldrb	r3, [r7, #11]
 8012a56:	00db      	lsls	r3, r3, #3
 8012a58:	4413      	add	r3, r2
 8012a5a:	61fb      	str	r3, [r7, #28]
    const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	334c      	adds	r3, #76	@ 0x4c
 8012a60:	461a      	mov	r2, r3
 8012a62:	7afb      	ldrb	r3, [r7, #11]
 8012a64:	00db      	lsls	r3, r3, #3
 8012a66:	4413      	add	r3, r2
 8012a68:	61bb      	str	r3, [r7, #24]
    ( *( __IO uint32_t * ) ulMacRegHigh ) = ETH_MACA1HR_AE | ulMacAddrHigh;
 8012a6a:	69fb      	ldr	r3, [r7, #28]
 8012a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a6e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012a72:	601a      	str	r2, [r3, #0]
    ( *( __IO uint32_t * ) ulMacRegLow ) = ulMacAddrLow;
 8012a74:	69bb      	ldr	r3, [r7, #24]
 8012a76:	6a3a      	ldr	r2, [r7, #32]
 8012a78:	601a      	str	r2, [r3, #0]
}
 8012a7a:	bf00      	nop
 8012a7c:	372c      	adds	r7, #44	@ 0x2c
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr

08012a86 <prvHAL_ETH_ClearDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static void prvHAL_ETH_ClearDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                              uint8_t ucIndex )
{
 8012a86:	b480      	push	{r7}
 8012a88:	b087      	sub	sp, #28
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
 8012a8e:	460b      	mov	r3, r1
 8012a90:	70fb      	strb	r3, [r7, #3]
    configASSERT( ucIndex < niEMAC_MAC_SRC_MATCH_COUNT );
 8012a92:	78fb      	ldrb	r3, [r7, #3]
 8012a94:	2b02      	cmp	r3, #2
 8012a96:	d90d      	bls.n	8012ab4 <prvHAL_ETH_ClearDestMACAddrMatch+0x2e>
	__asm volatile
 8012a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a9c:	b672      	cpsid	i
 8012a9e:	f383 8811 	msr	BASEPRI, r3
 8012aa2:	f3bf 8f6f 	isb	sy
 8012aa6:	f3bf 8f4f 	dsb	sy
 8012aaa:	b662      	cpsie	i
 8012aac:	60fb      	str	r3, [r7, #12]
}
 8012aae:	bf00      	nop
 8012ab0:	bf00      	nop
 8012ab2:	e7fd      	b.n	8012ab0 <prvHAL_ETH_ClearDestMACAddrMatch+0x2a>
    const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	3348      	adds	r3, #72	@ 0x48
 8012ab8:	461a      	mov	r2, r3
 8012aba:	78fb      	ldrb	r3, [r7, #3]
 8012abc:	00db      	lsls	r3, r3, #3
 8012abe:	4413      	add	r3, r2
 8012ac0:	617b      	str	r3, [r7, #20]
    const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	334c      	adds	r3, #76	@ 0x4c
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	78fb      	ldrb	r3, [r7, #3]
 8012aca:	00db      	lsls	r3, r3, #3
 8012acc:	4413      	add	r3, r2
 8012ace:	613b      	str	r3, [r7, #16]
    ( *( __IO uint32_t * ) ulMacRegHigh ) = 0U;
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	601a      	str	r2, [r3, #0]
    ( *( __IO uint32_t * ) ulMacRegLow ) = 0U;
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	601a      	str	r2, [r3, #0]
}
 8012adc:	bf00      	nop
 8012ade:	371c      	adds	r7, #28
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr

08012ae8 <prvAddDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvAddDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                          const uint8_t * const pucMACAddr )
{
 8012ae8:	b480      	push	{r7}
 8012aea:	b089      	sub	sp, #36	@ 0x24
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8012af2:	2300      	movs	r3, #0
 8012af4:	61fb      	str	r3, [r7, #28]

    uint8_t ucIndex;

    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8012af6:	2300      	movs	r3, #0
 8012af8:	76fb      	strb	r3, [r7, #27]
 8012afa:	e04e      	b.n	8012b9a <prvAddDestMACAddrMatch+0xb2>
    {
        if( ucSrcMatchCounters[ ucIndex ] > 0U )
 8012afc:	7efb      	ldrb	r3, [r7, #27]
 8012afe:	4a2c      	ldr	r2, [pc, #176]	@ (8012bb0 <prvAddDestMACAddrMatch+0xc8>)
 8012b00:	5cd3      	ldrb	r3, [r2, r3]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d03f      	beq.n	8012b86 <prvAddDestMACAddrMatch+0x9e>
        {
            /* ETH_MACA1HR_MBC - Group Address Filtering */
            const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	3348      	adds	r3, #72	@ 0x48
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	7efb      	ldrb	r3, [r7, #27]
 8012b0e:	00db      	lsls	r3, r3, #3
 8012b10:	4413      	add	r3, r2
 8012b12:	617b      	str	r3, [r7, #20]
            const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	334c      	adds	r3, #76	@ 0x4c
 8012b18:	461a      	mov	r2, r3
 8012b1a:	7efb      	ldrb	r3, [r7, #27]
 8012b1c:	00db      	lsls	r3, r3, #3
 8012b1e:	4413      	add	r3, r2
 8012b20:	613b      	str	r3, [r7, #16]

            const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	3305      	adds	r3, #5
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	021b      	lsls	r3, r3, #8
 8012b2a:	683a      	ldr	r2, [r7, #0]
 8012b2c:	3204      	adds	r2, #4
 8012b2e:	7812      	ldrb	r2, [r2, #0]
 8012b30:	4313      	orrs	r3, r2
 8012b32:	60fb      	str	r3, [r7, #12]
            const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	3303      	adds	r3, #3
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	061a      	lsls	r2, r3, #24
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	3302      	adds	r3, #2
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	041b      	lsls	r3, r3, #16
 8012b44:	431a      	orrs	r2, r3
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	021b      	lsls	r3, r3, #8
 8012b4e:	4313      	orrs	r3, r2
 8012b50:	683a      	ldr	r2, [r7, #0]
 8012b52:	7812      	ldrb	r2, [r2, #0]
 8012b54:	4313      	orrs	r3, r2
 8012b56:	60bb      	str	r3, [r7, #8]

            if( ( ulMacRegHigh == ulMacAddrHigh ) && ( ulMacRegLow == ulMacAddrLow ) )
 8012b58:	697a      	ldr	r2, [r7, #20]
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d119      	bne.n	8012b94 <prvAddDestMACAddrMatch+0xac>
 8012b60:	693a      	ldr	r2, [r7, #16]
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d115      	bne.n	8012b94 <prvAddDestMACAddrMatch+0xac>
            {
                if( ucSrcMatchCounters[ ucIndex ] < UINT8_MAX )
 8012b68:	7efb      	ldrb	r3, [r7, #27]
 8012b6a:	4a11      	ldr	r2, [pc, #68]	@ (8012bb0 <prvAddDestMACAddrMatch+0xc8>)
 8012b6c:	5cd3      	ldrb	r3, [r2, r3]
 8012b6e:	2bff      	cmp	r3, #255	@ 0xff
 8012b70:	d006      	beq.n	8012b80 <prvAddDestMACAddrMatch+0x98>
                {
                    ++( ucSrcMatchCounters[ ucIndex ] );
 8012b72:	7efb      	ldrb	r3, [r7, #27]
 8012b74:	4a0e      	ldr	r2, [pc, #56]	@ (8012bb0 <prvAddDestMACAddrMatch+0xc8>)
 8012b76:	5cd2      	ldrb	r2, [r2, r3]
 8012b78:	3201      	adds	r2, #1
 8012b7a:	b2d1      	uxtb	r1, r2
 8012b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8012bb0 <prvAddDestMACAddrMatch+0xc8>)
 8012b7e:	54d1      	strb	r1, [r2, r3]
                }

                xResult = pdTRUE;
 8012b80:	2301      	movs	r3, #1
 8012b82:	61fb      	str	r3, [r7, #28]
                break;
 8012b84:	e00c      	b.n	8012ba0 <prvAddDestMACAddrMatch+0xb8>
            }
        }
        else if( uxMACEntryIndex > niEMAC_MAC_SRC_MATCH_COUNT )
 8012b86:	4b0b      	ldr	r3, [pc, #44]	@ (8012bb4 <prvAddDestMACAddrMatch+0xcc>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	2b03      	cmp	r3, #3
 8012b8c:	d902      	bls.n	8012b94 <prvAddDestMACAddrMatch+0xac>
        {
            uxMACEntryIndex = niEMAC_MAC_SRC_MATCH_COUNT;
 8012b8e:	4b09      	ldr	r3, [pc, #36]	@ (8012bb4 <prvAddDestMACAddrMatch+0xcc>)
 8012b90:	2203      	movs	r2, #3
 8012b92:	701a      	strb	r2, [r3, #0]
    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8012b94:	7efb      	ldrb	r3, [r7, #27]
 8012b96:	3301      	adds	r3, #1
 8012b98:	76fb      	strb	r3, [r7, #27]
 8012b9a:	7efb      	ldrb	r3, [r7, #27]
 8012b9c:	2b02      	cmp	r3, #2
 8012b9e:	d9ad      	bls.n	8012afc <prvAddDestMACAddrMatch+0x14>
        }
    }

    return xResult;
 8012ba0:	69fb      	ldr	r3, [r7, #28]
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3724      	adds	r7, #36	@ 0x24
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	20003568 	.word	0x20003568
 8012bb4:	2000356b 	.word	0x2000356b

08012bb8 <prvRemoveDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvRemoveDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                             const uint8_t * const pucMACAddr )
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b088      	sub	sp, #32
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	61fb      	str	r3, [r7, #28]

    uint8_t ucIndex;

    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	76fb      	strb	r3, [r7, #27]
 8012bca:	e050      	b.n	8012c6e <prvRemoveDestMACAddrMatch+0xb6>
    {
        if( ucSrcMatchCounters[ ucIndex ] > 0U )
 8012bcc:	7efb      	ldrb	r3, [r7, #27]
 8012bce:	4a2c      	ldr	r2, [pc, #176]	@ (8012c80 <prvRemoveDestMACAddrMatch+0xc8>)
 8012bd0:	5cd3      	ldrb	r3, [r2, r3]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d048      	beq.n	8012c68 <prvRemoveDestMACAddrMatch+0xb0>
        {
            /* ETH_MACA1HR_MBC - Group Address Filtering */
            const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	3348      	adds	r3, #72	@ 0x48
 8012bda:	461a      	mov	r2, r3
 8012bdc:	7efb      	ldrb	r3, [r7, #27]
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	4413      	add	r3, r2
 8012be2:	617b      	str	r3, [r7, #20]
            const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	334c      	adds	r3, #76	@ 0x4c
 8012be8:	461a      	mov	r2, r3
 8012bea:	7efb      	ldrb	r3, [r7, #27]
 8012bec:	00db      	lsls	r3, r3, #3
 8012bee:	4413      	add	r3, r2
 8012bf0:	613b      	str	r3, [r7, #16]

            const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	3305      	adds	r3, #5
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	021b      	lsls	r3, r3, #8
 8012bfa:	683a      	ldr	r2, [r7, #0]
 8012bfc:	3204      	adds	r2, #4
 8012bfe:	7812      	ldrb	r2, [r2, #0]
 8012c00:	4313      	orrs	r3, r2
 8012c02:	60fb      	str	r3, [r7, #12]
            const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	3303      	adds	r3, #3
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	061a      	lsls	r2, r3, #24
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	3302      	adds	r3, #2
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	041b      	lsls	r3, r3, #16
 8012c14:	431a      	orrs	r2, r3
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	3301      	adds	r3, #1
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	021b      	lsls	r3, r3, #8
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	683a      	ldr	r2, [r7, #0]
 8012c22:	7812      	ldrb	r2, [r2, #0]
 8012c24:	4313      	orrs	r3, r2
 8012c26:	60bb      	str	r3, [r7, #8]

            if( ( ulMacRegHigh == ulMacAddrHigh ) && ( ulMacRegLow == ulMacAddrLow ) )
 8012c28:	697a      	ldr	r2, [r7, #20]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d11b      	bne.n	8012c68 <prvRemoveDestMACAddrMatch+0xb0>
 8012c30:	693a      	ldr	r2, [r7, #16]
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d117      	bne.n	8012c68 <prvRemoveDestMACAddrMatch+0xb0>
            {
                if( ucSrcMatchCounters[ ucIndex ] < UINT8_MAX )
 8012c38:	7efb      	ldrb	r3, [r7, #27]
 8012c3a:	4a11      	ldr	r2, [pc, #68]	@ (8012c80 <prvRemoveDestMACAddrMatch+0xc8>)
 8012c3c:	5cd3      	ldrb	r3, [r2, r3]
 8012c3e:	2bff      	cmp	r3, #255	@ 0xff
 8012c40:	d00f      	beq.n	8012c62 <prvRemoveDestMACAddrMatch+0xaa>
                {
                    if( --( ucSrcMatchCounters[ ucIndex ] ) == 0 )
 8012c42:	7efb      	ldrb	r3, [r7, #27]
 8012c44:	4a0e      	ldr	r2, [pc, #56]	@ (8012c80 <prvRemoveDestMACAddrMatch+0xc8>)
 8012c46:	5cd2      	ldrb	r2, [r2, r3]
 8012c48:	3a01      	subs	r2, #1
 8012c4a:	b2d1      	uxtb	r1, r2
 8012c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8012c80 <prvRemoveDestMACAddrMatch+0xc8>)
 8012c4e:	54d1      	strb	r1, [r2, r3]
 8012c50:	4a0b      	ldr	r2, [pc, #44]	@ (8012c80 <prvRemoveDestMACAddrMatch+0xc8>)
 8012c52:	5cd3      	ldrb	r3, [r2, r3]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d104      	bne.n	8012c62 <prvRemoveDestMACAddrMatch+0xaa>
                    {
                        prvHAL_ETH_ClearDestMACAddrMatch( pxEthInstance, ucIndex );
 8012c58:	7efb      	ldrb	r3, [r7, #27]
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7ff ff12 	bl	8012a86 <prvHAL_ETH_ClearDestMACAddrMatch>
                    }
                }

                xResult = pdTRUE;
 8012c62:	2301      	movs	r3, #1
 8012c64:	61fb      	str	r3, [r7, #28]
                break;
 8012c66:	e005      	b.n	8012c74 <prvRemoveDestMACAddrMatch+0xbc>
    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8012c68:	7efb      	ldrb	r3, [r7, #27]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	76fb      	strb	r3, [r7, #27]
 8012c6e:	7efb      	ldrb	r3, [r7, #27]
 8012c70:	2b02      	cmp	r3, #2
 8012c72:	d9ab      	bls.n	8012bcc <prvRemoveDestMACAddrMatch+0x14>
            }
        }
    }

    return xResult;
 8012c74:	69fb      	ldr	r3, [r7, #28]
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3720      	adds	r7, #32
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	20003568 	.word	0x20003568

08012c84 <prvSetNewDestMACAddrMatch>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvSetNewDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                             uint8_t ucHashIndex,
                                             const uint8_t * const pucMACAddr )
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b086      	sub	sp, #24
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	60f8      	str	r0, [r7, #12]
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	607a      	str	r2, [r7, #4]
 8012c90:	72fb      	strb	r3, [r7, #11]
    BaseType_t xResult = pdFALSE;
 8012c92:	2300      	movs	r3, #0
 8012c94:	617b      	str	r3, [r7, #20]

    if( uxMACEntryIndex < niEMAC_MAC_SRC_MATCH_COUNT )
 8012c96:	4b10      	ldr	r3, [pc, #64]	@ (8012cd8 <prvSetNewDestMACAddrMatch+0x54>)
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	2b02      	cmp	r3, #2
 8012c9c:	d817      	bhi.n	8012cce <prvSetNewDestMACAddrMatch+0x4a>
    {
        if( ucAddrHashCounters[ ucHashIndex ] == 0U )
 8012c9e:	7afb      	ldrb	r3, [r7, #11]
 8012ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8012cdc <prvSetNewDestMACAddrMatch+0x58>)
 8012ca2:	5cd3      	ldrb	r3, [r2, r3]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d112      	bne.n	8012cce <prvSetNewDestMACAddrMatch+0x4a>
        {
            prvHAL_ETH_SetDestMACAddrMatch( pxEthInstance, uxMACEntryIndex, pucMACAddr );
 8012ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8012cd8 <prvSetNewDestMACAddrMatch+0x54>)
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	4619      	mov	r1, r3
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f7ff fe99 	bl	80129e8 <prvHAL_ETH_SetDestMACAddrMatch>
            ucSrcMatchCounters[ uxMACEntryIndex++ ] = 1U;
 8012cb6:	4b08      	ldr	r3, [pc, #32]	@ (8012cd8 <prvSetNewDestMACAddrMatch+0x54>)
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	1c5a      	adds	r2, r3, #1
 8012cbc:	b2d1      	uxtb	r1, r2
 8012cbe:	4a06      	ldr	r2, [pc, #24]	@ (8012cd8 <prvSetNewDestMACAddrMatch+0x54>)
 8012cc0:	7011      	strb	r1, [r2, #0]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	4b06      	ldr	r3, [pc, #24]	@ (8012ce0 <prvSetNewDestMACAddrMatch+0x5c>)
 8012cc6:	2101      	movs	r1, #1
 8012cc8:	5499      	strb	r1, [r3, r2]
            xResult = pdTRUE;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 8012cce:	697b      	ldr	r3, [r7, #20]
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3718      	adds	r7, #24
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	2000356b 	.word	0x2000356b
 8012cdc:	20003574 	.word	0x20003574
 8012ce0:	20003568 	.word	0x20003568

08012ce4 <prvAddDestMACAddrHash>:

/*---------------------------------------------------------------------------*/

static void prvAddDestMACAddrHash( ETH_HandleTypeDef * pxEthHandle,
                                   uint8_t ucHashIndex )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	460b      	mov	r3, r1
 8012cee:	70fb      	strb	r3, [r7, #3]
    if( ucAddrHashCounters[ ucHashIndex ] == 0 )
 8012cf0:	78fb      	ldrb	r3, [r7, #3]
 8012cf2:	4a19      	ldr	r2, [pc, #100]	@ (8012d58 <prvAddDestMACAddrHash+0x74>)
 8012cf4:	5cd3      	ldrb	r3, [r2, r3]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d11d      	bne.n	8012d36 <prvAddDestMACAddrHash+0x52>
    {
        if( ucHashIndex & 0x20U )
 8012cfa:	78fb      	ldrb	r3, [r7, #3]
 8012cfc:	f003 0320 	and.w	r3, r3, #32
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d00b      	beq.n	8012d1c <prvAddDestMACAddrHash+0x38>
        {
            ulHashTable[ 1 ] |= ( 1U << ( ucHashIndex & 0x1FU ) );
 8012d04:	4b15      	ldr	r3, [pc, #84]	@ (8012d5c <prvAddDestMACAddrHash+0x78>)
 8012d06:	685a      	ldr	r2, [r3, #4]
 8012d08:	78fb      	ldrb	r3, [r7, #3]
 8012d0a:	f003 031f 	and.w	r3, r3, #31
 8012d0e:	2101      	movs	r1, #1
 8012d10:	fa01 f303 	lsl.w	r3, r1, r3
 8012d14:	4313      	orrs	r3, r2
 8012d16:	4a11      	ldr	r2, [pc, #68]	@ (8012d5c <prvAddDestMACAddrHash+0x78>)
 8012d18:	6053      	str	r3, [r2, #4]
 8012d1a:	e008      	b.n	8012d2e <prvAddDestMACAddrHash+0x4a>
        }
        else
        {
            ulHashTable[ 0 ] |= ( 1U << ucHashIndex );
 8012d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8012d5c <prvAddDestMACAddrHash+0x78>)
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	78fb      	ldrb	r3, [r7, #3]
 8012d22:	2101      	movs	r1, #1
 8012d24:	fa01 f303 	lsl.w	r3, r1, r3
 8012d28:	4313      	orrs	r3, r2
 8012d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8012d5c <prvAddDestMACAddrHash+0x78>)
 8012d2c:	6013      	str	r3, [r2, #0]
        }

        HAL_ETH_SetHashTable( pxEthHandle, ulHashTable );
 8012d2e:	490b      	ldr	r1, [pc, #44]	@ (8012d5c <prvAddDestMACAddrHash+0x78>)
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f7f0 fcb6 	bl	80036a2 <HAL_ETH_SetHashTable>
    }

    if( ucAddrHashCounters[ ucHashIndex ] < UINT8_MAX )
 8012d36:	78fb      	ldrb	r3, [r7, #3]
 8012d38:	4a07      	ldr	r2, [pc, #28]	@ (8012d58 <prvAddDestMACAddrHash+0x74>)
 8012d3a:	5cd3      	ldrb	r3, [r2, r3]
 8012d3c:	2bff      	cmp	r3, #255	@ 0xff
 8012d3e:	d006      	beq.n	8012d4e <prvAddDestMACAddrHash+0x6a>
    {
        ++( ucAddrHashCounters[ ucHashIndex ] );
 8012d40:	78fb      	ldrb	r3, [r7, #3]
 8012d42:	4a05      	ldr	r2, [pc, #20]	@ (8012d58 <prvAddDestMACAddrHash+0x74>)
 8012d44:	5cd2      	ldrb	r2, [r2, r3]
 8012d46:	3201      	adds	r2, #1
 8012d48:	b2d1      	uxtb	r1, r2
 8012d4a:	4a03      	ldr	r2, [pc, #12]	@ (8012d58 <prvAddDestMACAddrHash+0x74>)
 8012d4c:	54d1      	strb	r1, [r2, r3]
    }
}
 8012d4e:	bf00      	nop
 8012d50:	3708      	adds	r7, #8
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	20003574 	.word	0x20003574
 8012d5c:	2000356c 	.word	0x2000356c

08012d60 <prvRemoveDestMACAddrHash>:

/*---------------------------------------------------------------------------*/

static void prvRemoveDestMACAddrHash( ETH_HandleTypeDef * pxEthHandle,
                                      const uint8_t * const pucMACAddr )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
    const uint8_t ucHashIndex = prvGetMacHashIndex( pucMACAddr );
 8012d6a:	6838      	ldr	r0, [r7, #0]
 8012d6c:	f7ff fe2c 	bl	80129c8 <prvGetMacHashIndex>
 8012d70:	4603      	mov	r3, r0
 8012d72:	73fb      	strb	r3, [r7, #15]

    if( ucAddrHashCounters[ ucHashIndex ] > 0U )
 8012d74:	7bfb      	ldrb	r3, [r7, #15]
 8012d76:	4a1c      	ldr	r2, [pc, #112]	@ (8012de8 <prvRemoveDestMACAddrHash+0x88>)
 8012d78:	5cd3      	ldrb	r3, [r2, r3]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d02f      	beq.n	8012dde <prvRemoveDestMACAddrHash+0x7e>
    {
        if( ucAddrHashCounters[ ucHashIndex ] < UINT8_MAX )
 8012d7e:	7bfb      	ldrb	r3, [r7, #15]
 8012d80:	4a19      	ldr	r2, [pc, #100]	@ (8012de8 <prvRemoveDestMACAddrHash+0x88>)
 8012d82:	5cd3      	ldrb	r3, [r2, r3]
 8012d84:	2bff      	cmp	r3, #255	@ 0xff
 8012d86:	d02a      	beq.n	8012dde <prvRemoveDestMACAddrHash+0x7e>
        {
            if( --( ucAddrHashCounters[ ucHashIndex ] ) == 0 )
 8012d88:	7bfb      	ldrb	r3, [r7, #15]
 8012d8a:	4a17      	ldr	r2, [pc, #92]	@ (8012de8 <prvRemoveDestMACAddrHash+0x88>)
 8012d8c:	5cd2      	ldrb	r2, [r2, r3]
 8012d8e:	3a01      	subs	r2, #1
 8012d90:	b2d1      	uxtb	r1, r2
 8012d92:	4a15      	ldr	r2, [pc, #84]	@ (8012de8 <prvRemoveDestMACAddrHash+0x88>)
 8012d94:	54d1      	strb	r1, [r2, r3]
 8012d96:	4a14      	ldr	r2, [pc, #80]	@ (8012de8 <prvRemoveDestMACAddrHash+0x88>)
 8012d98:	5cd3      	ldrb	r3, [r2, r3]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d11f      	bne.n	8012dde <prvRemoveDestMACAddrHash+0x7e>
            {
                if( ucHashIndex & 0x20U )
 8012d9e:	7bfb      	ldrb	r3, [r7, #15]
 8012da0:	f003 0320 	and.w	r3, r3, #32
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d00c      	beq.n	8012dc2 <prvRemoveDestMACAddrHash+0x62>
                {
                    ulHashTable[ 1 ] &= ~( 1U << ( ucHashIndex & 0x1FU ) );
 8012da8:	4b10      	ldr	r3, [pc, #64]	@ (8012dec <prvRemoveDestMACAddrHash+0x8c>)
 8012daa:	685a      	ldr	r2, [r3, #4]
 8012dac:	7bfb      	ldrb	r3, [r7, #15]
 8012dae:	f003 031f 	and.w	r3, r3, #31
 8012db2:	2101      	movs	r1, #1
 8012db4:	fa01 f303 	lsl.w	r3, r1, r3
 8012db8:	43db      	mvns	r3, r3
 8012dba:	4013      	ands	r3, r2
 8012dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8012dec <prvRemoveDestMACAddrHash+0x8c>)
 8012dbe:	6053      	str	r3, [r2, #4]
 8012dc0:	e009      	b.n	8012dd6 <prvRemoveDestMACAddrHash+0x76>
                }
                else
                {
                    ulHashTable[ 0 ] &= ~( 1U << ucHashIndex );
 8012dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8012dec <prvRemoveDestMACAddrHash+0x8c>)
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	7bfb      	ldrb	r3, [r7, #15]
 8012dc8:	2101      	movs	r1, #1
 8012dca:	fa01 f303 	lsl.w	r3, r1, r3
 8012dce:	43db      	mvns	r3, r3
 8012dd0:	4013      	ands	r3, r2
 8012dd2:	4a06      	ldr	r2, [pc, #24]	@ (8012dec <prvRemoveDestMACAddrHash+0x8c>)
 8012dd4:	6013      	str	r3, [r2, #0]
                }

                HAL_ETH_SetHashTable( pxEthHandle, ulHashTable );
 8012dd6:	4905      	ldr	r1, [pc, #20]	@ (8012dec <prvRemoveDestMACAddrHash+0x8c>)
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f7f0 fc62 	bl	80036a2 <HAL_ETH_SetHashTable>
            }
        }
    }
}
 8012dde:	bf00      	nop
 8012de0:	3710      	adds	r7, #16
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	20003574 	.word	0x20003574
 8012dec:	2000356c 	.word	0x2000356c

08012df0 <prvReleaseTxPacket>:
/*                              EMAC Helpers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static void prvReleaseTxPacket( ETH_HandleTypeDef * pxEthHandle )
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
    if( xSemaphoreTake( xTxMutex, pdMS_TO_TICKS( niEMAC_TX_MAX_BLOCK_TIME_MS ) ) != pdFALSE )
 8012df8:	4b0b      	ldr	r3, [pc, #44]	@ (8012e28 <prvReleaseTxPacket+0x38>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2114      	movs	r1, #20
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f001 faa8 	bl	8014354 <xQueueSemaphoreTake>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d009      	beq.n	8012e1e <prvReleaseTxPacket+0x2e>
    {
        ( void ) HAL_ETH_ReleaseTxPacket( pxEthHandle );
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f7ef ff55 	bl	8002cba <HAL_ETH_ReleaseTxPacket>
        ( void ) xSemaphoreGive( xTxMutex );
 8012e10:	4b05      	ldr	r3, [pc, #20]	@ (8012e28 <prvReleaseTxPacket+0x38>)
 8012e12:	6818      	ldr	r0, [r3, #0]
 8012e14:	2300      	movs	r3, #0
 8012e16:	2200      	movs	r2, #0
 8012e18:	2100      	movs	r1, #0
 8012e1a:	f001 f805 	bl	8013e28 <xQueueGenericSend>

    /* while( ETH_TX_DESC_CNT - uxQueueMessagesWaiting( ( QueueHandle_t ) xTxDescSem ) > pxEthHandle->TxDescList.BuffersInUse )
     * {
     *  ( void ) xSemaphoreGive( xTxDescSem );
     * } */
}
 8012e1e:	bf00      	nop
 8012e20:	3708      	adds	r7, #8
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	20003558 	.word	0x20003558

08012e2c <prvMacUpdateConfig>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvMacUpdateConfig( ETH_HandleTypeDef * pxEthHandle,
                                      EthernetPhy_t * pxPhyObject )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b09c      	sub	sp, #112	@ 0x70
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8012e36:	2300      	movs	r3, #0
 8012e38:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if( pxEthHandle->gState == HAL_ETH_STATE_STARTED )
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e40:	2b40      	cmp	r3, #64	@ 0x40
 8012e42:	d102      	bne.n	8012e4a <prvMacUpdateConfig+0x1e>
    {
        ( void ) HAL_ETH_Stop_IT( pxEthHandle );
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f7ef fd05 	bl	8002854 <HAL_ETH_Stop_IT>
    }

    ETH_MACConfigTypeDef xMACConfig;
    ( void ) HAL_ETH_GetMACConfig( pxEthHandle, &xMACConfig );
 8012e4a:	f107 0308 	add.w	r3, r7, #8
 8012e4e:	4619      	mov	r1, r3
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f7f0 f8ef 	bl	8003034 <HAL_ETH_GetMACConfig>

    #if ipconfigIS_ENABLED( niEMAC_AUTO_NEGOTIATION )
        ( void ) xPhyStartAutoNegotiation( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e60:	3b01      	subs	r3, #1
 8012e62:	4619      	mov	r1, r3
 8012e64:	6838      	ldr	r0, [r7, #0]
 8012e66:	f7fe fdc5 	bl	80119f4 <xPhyStartAutoNegotiation>
    #else
        ( void ) xPhyFixedValue( pxPhyObject, xPhyGetMask( pxPhyObject ) );
    #endif
    xMACConfig.DuplexMode = ( pxPhyObject->xPhyProperties.ucDuplex == PHY_DUPLEX_FULL ) ? ETH_FULLDUPLEX_MODE : ETH_HALFDUPLEX_MODE;
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012e70:	2b02      	cmp	r3, #2
 8012e72:	d102      	bne.n	8012e7a <prvMacUpdateConfig+0x4e>
 8012e74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012e78:	e000      	b.n	8012e7c <prvMacUpdateConfig+0x50>
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	623b      	str	r3, [r7, #32]
    xMACConfig.Speed = ( pxPhyObject->xPhyProperties.ucSpeed == PHY_SPEED_10 ) ? ETH_SPEED_10M : ETH_SPEED_100M;
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d101      	bne.n	8012e8c <prvMacUpdateConfig+0x60>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	e001      	b.n	8012e90 <prvMacUpdateConfig+0x64>
 8012e8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012e90:	61fb      	str	r3, [r7, #28]

    if( HAL_ETH_SetMACConfig( pxEthHandle, &xMACConfig ) == HAL_OK )
 8012e92:	f107 0308 	add.w	r3, r7, #8
 8012e96:	4619      	mov	r1, r3
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f7f0 faa1 	bl	80033e0 <HAL_ETH_SetMACConfig>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d101      	bne.n	8012ea8 <prvMacUpdateConfig+0x7c>
    {
        xResult = pdTRUE;
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

    return xResult;
 8012ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3770      	adds	r7, #112	@ 0x70
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <prvReleaseNetworkBufferDescriptor>:

/*---------------------------------------------------------------------------*/

static void prvReleaseNetworkBufferDescriptor( NetworkBufferDescriptor_t * const pxDescriptor )
{
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b084      	sub	sp, #16
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxDescriptorToClear = pxDescriptor;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	60fb      	str	r3, [r7, #12]

    while( pxDescriptorToClear != NULL )
 8012ebe:	e006      	b.n	8012ece <prvReleaseNetworkBufferDescriptor+0x1c>
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            NetworkBufferDescriptor_t * const pxNext = pxDescriptorToClear->pxNextBuffer;
        #else
            NetworkBufferDescriptor_t * const pxNext = NULL;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	60bb      	str	r3, [r7, #8]
        #endif
        vReleaseNetworkBufferAndDescriptor( pxDescriptorToClear );
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f7fe faf9 	bl	80114bc <vReleaseNetworkBufferAndDescriptor>
        pxDescriptorToClear = pxNext;
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	60fb      	str	r3, [r7, #12]
    while( pxDescriptorToClear != NULL )
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d1f5      	bne.n	8012ec0 <prvReleaseNetworkBufferDescriptor+0xe>
    }
}
 8012ed4:	bf00      	nop
 8012ed6:	bf00      	nop
 8012ed8:	3710      	adds	r7, #16
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}

08012ede <prvSendRxEvent>:

/*---------------------------------------------------------------------------*/

static void prvSendRxEvent( NetworkBufferDescriptor_t * const pxDescriptor )
{
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b084      	sub	sp, #16
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
    const IPStackEvent_t xRxEvent =
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	723b      	strb	r3, [r7, #8]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	60fb      	str	r3, [r7, #12]
    {
        .eEventType = eNetworkRxEvent,
        .pvData     = ( void * ) pxDescriptor
    };

    if( xSendEventStructToIPTask( &xRxEvent, pdMS_TO_TICKS( niEMAC_RX_MAX_BLOCK_TIME_MS ) ) != pdPASS )
 8012eee:	f107 0308 	add.w	r3, r7, #8
 8012ef2:	2114      	movs	r1, #20
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7f6 fc51 	bl	800979c <xSendEventStructToIPTask>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2b01      	cmp	r3, #1
 8012efe:	d002      	beq.n	8012f06 <prvSendRxEvent+0x28>
    {
        iptraceETHERNET_RX_EVENT_LOST();
        FreeRTOS_debug_printf( ( "prvSendRxEvent: xSendEventStructToIPTask failed\n" ) );
        prvReleaseNetworkBufferDescriptor( pxDescriptor );
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f7ff ffd6 	bl	8012eb2 <prvReleaseNetworkBufferDescriptor>
    }
}
 8012f06:	bf00      	nop
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
	...

08012f10 <prvAcceptPacket>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvAcceptPacket( const NetworkBufferDescriptor_t * const pxDescriptor,
                                   uint16_t usLength )
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b086      	sub	sp, #24
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	460b      	mov	r3, r1
 8012f1a:	807b      	strh	r3, [r7, #2]
    BaseType_t xResult = pdFALSE;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	617b      	str	r3, [r7, #20]

    do
    {
        if( pxDescriptor == NULL )
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d01c      	beq.n	8012f60 <prvAcceptPacket+0x50>
            iptraceETHERNET_RX_EVENT_LOST();
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Null Descriptor\n" ) );
            break;
        }

        if( usLength > pxDescriptor->xDataLength )
 8012f26:	887a      	ldrh	r2, [r7, #2]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d819      	bhi.n	8012f64 <prvAcceptPacket+0x54>
            iptraceETHERNET_RX_EVENT_LOST();
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Packet size overflow\n" ) );
            break;
        }

        ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8012f30:	4b11      	ldr	r3, [pc, #68]	@ (8012f78 <prvAcceptPacket+0x68>)
 8012f32:	613b      	str	r3, [r7, #16]
        uint32_t ulErrorCode = 0;
 8012f34:	2300      	movs	r3, #0
 8012f36:	60fb      	str	r3, [r7, #12]
        ( void ) HAL_ETH_GetRxDataErrorCode( pxEthHandle, &ulErrorCode );
 8012f38:	f107 030c 	add.w	r3, r7, #12
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6938      	ldr	r0, [r7, #16]
 8012f40:	f7ef fea8 	bl	8002c94 <HAL_ETH_GetRxDataErrorCode>

        if( ulErrorCode != 0 )
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d10e      	bne.n	8012f68 <prvAcceptPacket+0x58>
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Rx Data Error\n" ) );
            break;
        }

        #if ipconfigIS_ENABLED( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES )
            if( eConsiderFrameForProcessing( pxDescriptor->pucEthernetBuffer ) != eProcessBuffer )
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7f6 fc6c 	bl	800982c <eConsiderFrameForProcessing>
 8012f54:	4603      	mov	r3, r0
 8012f56:	2b01      	cmp	r3, #1
 8012f58:	d108      	bne.n	8012f6c <prvAcceptPacket+0x5c>
                break;
            }
        }
        #endif /* if ipconfigIS_ENABLED( ipconfigETHERNET_DRIVER_FILTERS_PACKETS ) */

        xResult = pdTRUE;
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	617b      	str	r3, [r7, #20]
 8012f5e:	e006      	b.n	8012f6e <prvAcceptPacket+0x5e>
            break;
 8012f60:	bf00      	nop
 8012f62:	e004      	b.n	8012f6e <prvAcceptPacket+0x5e>
            break;
 8012f64:	bf00      	nop
 8012f66:	e002      	b.n	8012f6e <prvAcceptPacket+0x5e>
            break;
 8012f68:	bf00      	nop
 8012f6a:	e000      	b.n	8012f6e <prvAcceptPacket+0x5e>
                break;
 8012f6c:	bf00      	nop
    } while( pdFALSE );

    return xResult;
 8012f6e:	697b      	ldr	r3, [r7, #20]
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3718      	adds	r7, #24
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	20003464 	.word	0x20003464

08012f7c <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8012f82:	4b0c      	ldr	r3, [pc, #48]	@ (8012fb4 <ETH_IRQHandler+0x38>)
 8012f84:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 8012f86:	4b0c      	ldr	r3, [pc, #48]	@ (8012fb8 <ETH_IRQHandler+0x3c>)
 8012f88:	2200      	movs	r2, #0
 8012f8a:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f7ef fef7 	bl	8002d80 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 8012f92:	4b09      	ldr	r3, [pc, #36]	@ (8012fb8 <ETH_IRQHandler+0x3c>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d007      	beq.n	8012faa <ETH_IRQHandler+0x2e>
 8012f9a:	4b08      	ldr	r3, [pc, #32]	@ (8012fbc <ETH_IRQHandler+0x40>)
 8012f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fa0:	601a      	str	r2, [r3, #0]
 8012fa2:	f3bf 8f4f 	dsb	sy
 8012fa6:	f3bf 8f6f 	isb	sy
}
 8012faa:	bf00      	nop
 8012fac:	3708      	adds	r7, #8
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	20003464 	.word	0x20003464
 8012fb8:	20003560 	.word	0x20003560
 8012fbc:	e000ed04 	.word	0xe000ed04

08012fc0 <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b088      	sub	sp, #32
 8012fc4:	af02      	add	r7, sp, #8
 8012fc6:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012fd2:	2be0      	cmp	r3, #224	@ 0xe0
 8012fd4:	d103      	bne.n	8012fde <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 8012fd6:	7dfb      	ldrb	r3, [r7, #23]
 8012fd8:	f043 0320 	orr.w	r3, r3, #32
 8012fdc:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012fe4:	f003 0308 	and.w	r3, r3, #8
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d019      	beq.n	8013020 <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 8012fec:	7dfb      	ldrb	r3, [r7, #23]
 8012fee:	f043 0310 	orr.w	r3, r3, #16
 8012ff2:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012ffa:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	f003 0304 	and.w	r3, r3, #4
 8013002:	2b00      	cmp	r3, #0
 8013004:	d003      	beq.n	801300e <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 8013006:	7dfb      	ldrb	r3, [r7, #23]
 8013008:	f043 0308 	orr.w	r3, r3, #8
 801300c:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013014:	2b00      	cmp	r3, #0
 8013016:	d003      	beq.n	8013020 <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 8013018:	7dfb      	ldrb	r3, [r7, #23]
 801301a:	f043 0304 	orr.w	r3, r3, #4
 801301e:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013026:	f003 0310 	and.w	r3, r3, #16
 801302a:	2b00      	cmp	r3, #0
 801302c:	d003      	beq.n	8013036 <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 801302e:	7dfb      	ldrb	r3, [r7, #23]
 8013030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013034:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 8013036:	4b0e      	ldr	r3, [pc, #56]	@ (8013070 <HAL_ETH_ErrorCallback+0xb0>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d014      	beq.n	8013068 <HAL_ETH_ErrorCallback+0xa8>
 801303e:	7dfb      	ldrb	r3, [r7, #23]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d011      	beq.n	8013068 <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013044:	2300      	movs	r3, #0
 8013046:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 8013048:	4b09      	ldr	r3, [pc, #36]	@ (8013070 <HAL_ETH_ErrorCallback+0xb0>)
 801304a:	6818      	ldr	r0, [r3, #0]
 801304c:	7df9      	ldrb	r1, [r7, #23]
 801304e:	f107 030c 	add.w	r3, r7, #12
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	2300      	movs	r3, #0
 8013056:	2201      	movs	r2, #1
 8013058:	f002 fee4 	bl	8015e24 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 801305c:	4b05      	ldr	r3, [pc, #20]	@ (8013074 <HAL_ETH_ErrorCallback+0xb4>)
 801305e:	681a      	ldr	r2, [r3, #0]
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	4313      	orrs	r3, r2
 8013064:	4a03      	ldr	r2, [pc, #12]	@ (8013074 <HAL_ETH_ErrorCallback+0xb4>)
 8013066:	6013      	str	r3, [r2, #0]
    }
}
 8013068:	bf00      	nop
 801306a:	3718      	adds	r7, #24
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}
 8013070:	20003554 	.word	0x20003554
 8013074:	20003560 	.word	0x20003560

08013078 <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b086      	sub	sp, #24
 801307c:	af02      	add	r7, sp, #8
 801307e:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013084:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 8013086:	4b11      	ldr	r3, [pc, #68]	@ (80130cc <HAL_ETH_RxCpltCallback+0x54>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	429a      	cmp	r2, r3
 801308e:	d902      	bls.n	8013096 <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 8013090:	4a0e      	ldr	r2, [pc, #56]	@ (80130cc <HAL_ETH_RxCpltCallback+0x54>)
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 8013096:	4b0e      	ldr	r3, [pc, #56]	@ (80130d0 <HAL_ETH_RxCpltCallback+0x58>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d011      	beq.n	80130c2 <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801309e:	2300      	movs	r3, #0
 80130a0:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 80130a2:	4b0b      	ldr	r3, [pc, #44]	@ (80130d0 <HAL_ETH_RxCpltCallback+0x58>)
 80130a4:	6818      	ldr	r0, [r3, #0]
 80130a6:	f107 0308 	add.w	r3, r7, #8
 80130aa:	9300      	str	r3, [sp, #0]
 80130ac:	2300      	movs	r3, #0
 80130ae:	2201      	movs	r2, #1
 80130b0:	2101      	movs	r1, #1
 80130b2:	f002 feb7 	bl	8015e24 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80130b6:	4b07      	ldr	r3, [pc, #28]	@ (80130d4 <HAL_ETH_RxCpltCallback+0x5c>)
 80130b8:	681a      	ldr	r2, [r3, #0]
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	4313      	orrs	r3, r2
 80130be:	4a05      	ldr	r2, [pc, #20]	@ (80130d4 <HAL_ETH_RxCpltCallback+0x5c>)
 80130c0:	6013      	str	r3, [r2, #0]
    }
}
 80130c2:	bf00      	nop
 80130c4:	3710      	adds	r7, #16
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	200046fc 	.word	0x200046fc
 80130d0:	20003554 	.word	0x20003554
 80130d4:	20003560 	.word	0x20003560

080130d8 <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b086      	sub	sp, #24
 80130dc:	af02      	add	r7, sp, #8
 80130de:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130e4:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 80130e6:	4b11      	ldr	r3, [pc, #68]	@ (801312c <HAL_ETH_TxCpltCallback+0x54>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	68fa      	ldr	r2, [r7, #12]
 80130ec:	429a      	cmp	r2, r3
 80130ee:	d902      	bls.n	80130f6 <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 80130f0:	4a0e      	ldr	r2, [pc, #56]	@ (801312c <HAL_ETH_TxCpltCallback+0x54>)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 80130f6:	4b0e      	ldr	r3, [pc, #56]	@ (8013130 <HAL_ETH_TxCpltCallback+0x58>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d011      	beq.n	8013122 <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80130fe:	2300      	movs	r3, #0
 8013100:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 8013102:	4b0b      	ldr	r3, [pc, #44]	@ (8013130 <HAL_ETH_TxCpltCallback+0x58>)
 8013104:	6818      	ldr	r0, [r3, #0]
 8013106:	f107 0308 	add.w	r3, r7, #8
 801310a:	9300      	str	r3, [sp, #0]
 801310c:	2300      	movs	r3, #0
 801310e:	2201      	movs	r2, #1
 8013110:	2102      	movs	r1, #2
 8013112:	f002 fe87 	bl	8015e24 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8013116:	4b07      	ldr	r3, [pc, #28]	@ (8013134 <HAL_ETH_TxCpltCallback+0x5c>)
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	4313      	orrs	r3, r2
 801311e:	4a05      	ldr	r2, [pc, #20]	@ (8013134 <HAL_ETH_TxCpltCallback+0x5c>)
 8013120:	6013      	str	r3, [r2, #0]
    }
}
 8013122:	bf00      	nop
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	20004700 	.word	0x20004700
 8013130:	20003554 	.word	0x20003554
 8013134:	20003560 	.word	0x20003560

08013138 <HAL_ETH_RxAllocateCallback>:
/*                            HAL Tx/Rx Callbacks                            */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void HAL_ETH_RxAllocateCallback( uint8_t ** ppucBuff )
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
    const NetworkBufferDescriptor_t * pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( niEMAC_DATA_BUFFER_SIZE, pdMS_TO_TICKS( niEMAC_DESCRIPTOR_WAIT_TIME_MS ) );
 8013140:	2114      	movs	r1, #20
 8013142:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8013146:	f7fe f90d 	bl	8011364 <pxGetNetworkBufferWithDescriptor>
 801314a:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d003      	beq.n	801315a <HAL_ETH_RxAllocateCallback+0x22>
            if( niEMAC_CACHE_MAINTENANCE != 0 )
            {
                SCB_InvalidateDCache_by_Addr( ( uint32_t * ) pxBufferDescriptor->pucEthernetBuffer, pxBufferDescriptor->xDataLength );
            }
        #endif
        *ppucBuff = pxBufferDescriptor->pucEthernetBuffer;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	601a      	str	r2, [r3, #0]
    }
    else
    {
        FreeRTOS_debug_printf( ( "HAL_ETH_RxAllocateCallback: failed\n" ) );
    }
}
 801315a:	bf00      	nop
 801315c:	3710      	adds	r7, #16
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}

08013162 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback( void ** ppvStart,
                             void ** ppvEnd,
                             uint8_t * pucBuff,
                             uint16_t usLength )
{
 8013162:	b580      	push	{r7, lr}
 8013164:	b088      	sub	sp, #32
 8013166:	af00      	add	r7, sp, #0
 8013168:	60f8      	str	r0, [r7, #12]
 801316a:	60b9      	str	r1, [r7, #8]
 801316c:	607a      	str	r2, [r7, #4]
 801316e:	807b      	strh	r3, [r7, #2]
    NetworkBufferDescriptor_t ** const ppxStartDescriptor = ( NetworkBufferDescriptor_t ** ) ppvStart;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	61fb      	str	r3, [r7, #28]
    NetworkBufferDescriptor_t ** const ppxEndDescriptor = ( NetworkBufferDescriptor_t ** ) ppvEnd;
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	61bb      	str	r3, [r7, #24]
    NetworkBufferDescriptor_t * const pxCurDescriptor = pxPacketBuffer_to_NetworkBuffer( ( const void * ) pucBuff );
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7f7 f9af 	bl	800a4dc <pxPacketBuffer_to_NetworkBuffer>
 801317e:	6178      	str	r0, [r7, #20]

    if( prvAcceptPacket( pxCurDescriptor, usLength ) == pdTRUE )
 8013180:	887b      	ldrh	r3, [r7, #2]
 8013182:	4619      	mov	r1, r3
 8013184:	6978      	ldr	r0, [r7, #20]
 8013186:	f7ff fec3 	bl	8012f10 <prvAcceptPacket>
 801318a:	4603      	mov	r3, r0
 801318c:	2b01      	cmp	r3, #1
 801318e:	d120      	bne.n	80131d2 <HAL_ETH_RxLinkCallback+0x70>
    {
        pxCurDescriptor->xDataLength = usLength;
 8013190:	887a      	ldrh	r2, [r7, #2]
 8013192:	697b      	ldr	r3, [r7, #20]
 8013194:	629a      	str	r2, [r3, #40]	@ 0x28
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            pxCurDescriptor->pxNextBuffer = NULL;
        #endif

        if( *ppxStartDescriptor == NULL )
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d102      	bne.n	80131a4 <HAL_ETH_RxLinkCallback+0x42>
        {
            *ppxStartDescriptor = pxCurDescriptor;
 801319e:	69fb      	ldr	r3, [r7, #28]
 80131a0:	697a      	ldr	r2, [r7, #20]
 80131a2:	601a      	str	r2, [r3, #0]
            else if( ppxEndDescriptor != NULL )
            {
                ( *ppxEndDescriptor )->pxNextBuffer = pxCurDescriptor;
            }
        #endif
        *ppxEndDescriptor = pxCurDescriptor;
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	697a      	ldr	r2, [r7, #20]
 80131a8:	601a      	str	r2, [r3, #0]
        /* Only single buffer packets are supported */
        configASSERT( *ppxStartDescriptor == *ppxEndDescriptor );
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d010      	beq.n	80131d8 <HAL_ETH_RxLinkCallback+0x76>
	__asm volatile
 80131b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ba:	b672      	cpsid	i
 80131bc:	f383 8811 	msr	BASEPRI, r3
 80131c0:	f3bf 8f6f 	isb	sy
 80131c4:	f3bf 8f4f 	dsb	sy
 80131c8:	b662      	cpsie	i
 80131ca:	613b      	str	r3, [r7, #16]
}
 80131cc:	bf00      	nop
 80131ce:	bf00      	nop
 80131d0:	e7fd      	b.n	80131ce <HAL_ETH_RxLinkCallback+0x6c>
        #endif
    }
    else
    {
        FreeRTOS_debug_printf( ( "HAL_ETH_RxLinkCallback: Buffer Dropped\n" ) );
        prvReleaseNetworkBufferDescriptor( pxCurDescriptor );
 80131d2:	6978      	ldr	r0, [r7, #20]
 80131d4:	f7ff fe6d 	bl	8012eb2 <prvReleaseNetworkBufferDescriptor>
    }
}
 80131d8:	bf00      	nop
 80131da:	3720      	adds	r7, #32
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <HAL_ETH_TxFreeCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxFreeCallback( uint32_t * pulBuff )
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * const pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) pulBuff;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	60fb      	str	r3, [r7, #12]

    prvReleaseNetworkBufferDescriptor( pxNetworkBuffer );
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f7ff fe60 	bl	8012eb2 <prvReleaseNetworkBufferDescriptor>
    ( void ) xSemaphoreGive( xTxDescSem );
 80131f2:	4b05      	ldr	r3, [pc, #20]	@ (8013208 <HAL_ETH_TxFreeCallback+0x28>)
 80131f4:	6818      	ldr	r0, [r3, #0]
 80131f6:	2300      	movs	r3, #0
 80131f8:	2200      	movs	r2, #0
 80131fa:	2100      	movs	r1, #0
 80131fc:	f000 fe14 	bl	8013e28 <xQueueGenericSend>
}
 8013200:	bf00      	nop
 8013202:	3710      	adds	r7, #16
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}
 8013208:	2000355c 	.word	0x2000355c

0801320c <pxSTM32_FillInterfaceDescriptor>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

NetworkInterface_t * pxSTM32_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                      NetworkInterface_t * pxInterface )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6039      	str	r1, [r7, #0]
    static char pcName[ 17 ];

    ( void ) snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	4a13      	ldr	r2, [pc, #76]	@ (8013268 <pxSTM32_FillInterfaceDescriptor+0x5c>)
 801321a:	2111      	movs	r1, #17
 801321c:	4813      	ldr	r0, [pc, #76]	@ (801326c <pxSTM32_FillInterfaceDescriptor+0x60>)
 801321e:	f003 ffd5 	bl	80171cc <sniprintf>

    ( void ) memset( pxInterface, '\0', sizeof( *pxInterface ) );
 8013222:	2228      	movs	r2, #40	@ 0x28
 8013224:	2100      	movs	r1, #0
 8013226:	6838      	ldr	r0, [r7, #0]
 8013228:	f004 f873 	bl	8017312 <memset>
    pxInterface->pcName = pcName;
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	4a0f      	ldr	r2, [pc, #60]	@ (801326c <pxSTM32_FillInterfaceDescriptor+0x60>)
 8013230:	601a      	str	r2, [r3, #0]
    /* TODO: use pvArgument to get xEMACData? */
    /* xEMACData.xEMACIndex = xEMACIndex; */
    /* pxInterface->pvArgument = ( void * ) &xEMACData; */
    /* pxInterface->pvArgument = pvPortMalloc( sizeof( EMACData_t ) ); */
    pxInterface->pvArgument = ( void * ) xEMACIndex;
 8013232:	687a      	ldr	r2, [r7, #4]
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = prvNetworkInterfaceInitialise;
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	4a0d      	ldr	r2, [pc, #52]	@ (8013270 <pxSTM32_FillInterfaceDescriptor+0x64>)
 801323c:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = prvNetworkInterfaceOutput;
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	4a0c      	ldr	r2, [pc, #48]	@ (8013274 <pxSTM32_FillInterfaceDescriptor+0x68>)
 8013242:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = prvGetPhyLinkStatus;
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	4a0c      	ldr	r2, [pc, #48]	@ (8013278 <pxSTM32_FillInterfaceDescriptor+0x6c>)
 8013248:	611a      	str	r2, [r3, #16]

    pxInterface->pfAddAllowedMAC = prvAddAllowedMACAddress;
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	4a0b      	ldr	r2, [pc, #44]	@ (801327c <pxSTM32_FillInterfaceDescriptor+0x70>)
 801324e:	615a      	str	r2, [r3, #20]
    pxInterface->pfRemoveAllowedMAC = prvRemoveAllowedMACAddress;
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	4a0b      	ldr	r2, [pc, #44]	@ (8013280 <pxSTM32_FillInterfaceDescriptor+0x74>)
 8013254:	619a      	str	r2, [r3, #24]

    return FreeRTOS_AddNetworkInterface( pxInterface );
 8013256:	6838      	ldr	r0, [r7, #0]
 8013258:	f7f7 fed2 	bl	800b000 <FreeRTOS_AddNetworkInterface>
 801325c:	4603      	mov	r3, r0
}
 801325e:	4618      	mov	r0, r3
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	080185d8 	.word	0x080185d8
 801326c:	20004704 	.word	0x20004704
 8013270:	08011fad 	.word	0x08011fad
 8013274:	080120ad 	.word	0x080120ad
 8013278:	08011f81 	.word	0x08011f81
 801327c:	08012289 	.word	0x08012289
 8013280:	080122e1 	.word	0x080122e1

08013284 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013284:	b480      	push	{r7}
 8013286:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8013288:	bf00      	nop
 801328a:	46bd      	mov	sp, r7
 801328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013290:	4770      	bx	lr
	...

08013294 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801329a:	f3ef 8305 	mrs	r3, IPSR
 801329e:	60bb      	str	r3, [r7, #8]
  return(result);
 80132a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d10f      	bne.n	80132c6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132a6:	f3ef 8310 	mrs	r3, PRIMASK
 80132aa:	607b      	str	r3, [r7, #4]
  return(result);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d105      	bne.n	80132be <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80132b2:	f3ef 8311 	mrs	r3, BASEPRI
 80132b6:	603b      	str	r3, [r7, #0]
  return(result);
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d007      	beq.n	80132ce <osKernelInitialize+0x3a>
 80132be:	4b0e      	ldr	r3, [pc, #56]	@ (80132f8 <osKernelInitialize+0x64>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2b02      	cmp	r3, #2
 80132c4:	d103      	bne.n	80132ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80132c6:	f06f 0305 	mvn.w	r3, #5
 80132ca:	60fb      	str	r3, [r7, #12]
 80132cc:	e00c      	b.n	80132e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80132ce:	4b0a      	ldr	r3, [pc, #40]	@ (80132f8 <osKernelInitialize+0x64>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d105      	bne.n	80132e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80132d6:	4b08      	ldr	r3, [pc, #32]	@ (80132f8 <osKernelInitialize+0x64>)
 80132d8:	2201      	movs	r2, #1
 80132da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80132dc:	2300      	movs	r3, #0
 80132de:	60fb      	str	r3, [r7, #12]
 80132e0:	e002      	b.n	80132e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80132e2:	f04f 33ff 	mov.w	r3, #4294967295
 80132e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80132e8:	68fb      	ldr	r3, [r7, #12]
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3714      	adds	r7, #20
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr
 80132f6:	bf00      	nop
 80132f8:	20004718 	.word	0x20004718

080132fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b084      	sub	sp, #16
 8013300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013302:	f3ef 8305 	mrs	r3, IPSR
 8013306:	60bb      	str	r3, [r7, #8]
  return(result);
 8013308:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801330a:	2b00      	cmp	r3, #0
 801330c:	d10f      	bne.n	801332e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801330e:	f3ef 8310 	mrs	r3, PRIMASK
 8013312:	607b      	str	r3, [r7, #4]
  return(result);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d105      	bne.n	8013326 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801331a:	f3ef 8311 	mrs	r3, BASEPRI
 801331e:	603b      	str	r3, [r7, #0]
  return(result);
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d007      	beq.n	8013336 <osKernelStart+0x3a>
 8013326:	4b0f      	ldr	r3, [pc, #60]	@ (8013364 <osKernelStart+0x68>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b02      	cmp	r3, #2
 801332c:	d103      	bne.n	8013336 <osKernelStart+0x3a>
    stat = osErrorISR;
 801332e:	f06f 0305 	mvn.w	r3, #5
 8013332:	60fb      	str	r3, [r7, #12]
 8013334:	e010      	b.n	8013358 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013336:	4b0b      	ldr	r3, [pc, #44]	@ (8013364 <osKernelStart+0x68>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2b01      	cmp	r3, #1
 801333c:	d109      	bne.n	8013352 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801333e:	f7ff ffa1 	bl	8013284 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013342:	4b08      	ldr	r3, [pc, #32]	@ (8013364 <osKernelStart+0x68>)
 8013344:	2202      	movs	r2, #2
 8013346:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013348:	f001 fd38 	bl	8014dbc <vTaskStartScheduler>
      stat = osOK;
 801334c:	2300      	movs	r3, #0
 801334e:	60fb      	str	r3, [r7, #12]
 8013350:	e002      	b.n	8013358 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8013352:	f04f 33ff 	mov.w	r3, #4294967295
 8013356:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013358:	68fb      	ldr	r3, [r7, #12]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	20004718 	.word	0x20004718

08013368 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013368:	b580      	push	{r7, lr}
 801336a:	b090      	sub	sp, #64	@ 0x40
 801336c:	af04      	add	r7, sp, #16
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013374:	2300      	movs	r3, #0
 8013376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013378:	f3ef 8305 	mrs	r3, IPSR
 801337c:	61fb      	str	r3, [r7, #28]
  return(result);
 801337e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8013380:	2b00      	cmp	r3, #0
 8013382:	f040 8090 	bne.w	80134a6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013386:	f3ef 8310 	mrs	r3, PRIMASK
 801338a:	61bb      	str	r3, [r7, #24]
  return(result);
 801338c:	69bb      	ldr	r3, [r7, #24]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d105      	bne.n	801339e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013392:	f3ef 8311 	mrs	r3, BASEPRI
 8013396:	617b      	str	r3, [r7, #20]
  return(result);
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d003      	beq.n	80133a6 <osThreadNew+0x3e>
 801339e:	4b44      	ldr	r3, [pc, #272]	@ (80134b0 <osThreadNew+0x148>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	2b02      	cmp	r3, #2
 80133a4:	d07f      	beq.n	80134a6 <osThreadNew+0x13e>
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d07c      	beq.n	80134a6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80133ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80133b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80133b2:	2318      	movs	r3, #24
 80133b4:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80133b6:	2300      	movs	r3, #0
 80133b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80133ba:	f04f 33ff 	mov.w	r3, #4294967295
 80133be:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d045      	beq.n	8013452 <osThreadNew+0xea>
      if (attr->name != NULL) {
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d002      	beq.n	80133d4 <osThreadNew+0x6c>
        name = attr->name;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	699b      	ldr	r3, [r3, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d002      	beq.n	80133e2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	699b      	ldr	r3, [r3, #24]
 80133e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80133e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d008      	beq.n	80133fa <osThreadNew+0x92>
 80133e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ea:	2b38      	cmp	r3, #56	@ 0x38
 80133ec:	d805      	bhi.n	80133fa <osThreadNew+0x92>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	f003 0301 	and.w	r3, r3, #1
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d001      	beq.n	80133fe <osThreadNew+0x96>
        return (NULL);
 80133fa:	2300      	movs	r3, #0
 80133fc:	e054      	b.n	80134a8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d003      	beq.n	801340e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	695b      	ldr	r3, [r3, #20]
 801340a:	089b      	lsrs	r3, r3, #2
 801340c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	689b      	ldr	r3, [r3, #8]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d00e      	beq.n	8013434 <osThreadNew+0xcc>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	2ba7      	cmp	r3, #167	@ 0xa7
 801341c:	d90a      	bls.n	8013434 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013422:	2b00      	cmp	r3, #0
 8013424:	d006      	beq.n	8013434 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	695b      	ldr	r3, [r3, #20]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d002      	beq.n	8013434 <osThreadNew+0xcc>
        mem = 1;
 801342e:	2301      	movs	r3, #1
 8013430:	623b      	str	r3, [r7, #32]
 8013432:	e010      	b.n	8013456 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	689b      	ldr	r3, [r3, #8]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d10c      	bne.n	8013456 <osThreadNew+0xee>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	68db      	ldr	r3, [r3, #12]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d108      	bne.n	8013456 <osThreadNew+0xee>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	691b      	ldr	r3, [r3, #16]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d104      	bne.n	8013456 <osThreadNew+0xee>
          mem = 0;
 801344c:	2300      	movs	r3, #0
 801344e:	623b      	str	r3, [r7, #32]
 8013450:	e001      	b.n	8013456 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8013452:	2300      	movs	r3, #0
 8013454:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013456:	6a3b      	ldr	r3, [r7, #32]
 8013458:	2b01      	cmp	r3, #1
 801345a:	d110      	bne.n	801347e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8013460:	687a      	ldr	r2, [r7, #4]
 8013462:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013464:	9202      	str	r2, [sp, #8]
 8013466:	9301      	str	r3, [sp, #4]
 8013468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346a:	9300      	str	r3, [sp, #0]
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013472:	68f8      	ldr	r0, [r7, #12]
 8013474:	f001 faa4 	bl	80149c0 <xTaskCreateStatic>
 8013478:	4603      	mov	r3, r0
 801347a:	613b      	str	r3, [r7, #16]
 801347c:	e013      	b.n	80134a6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 801347e:	6a3b      	ldr	r3, [r7, #32]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d110      	bne.n	80134a6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013486:	b29a      	uxth	r2, r3
 8013488:	f107 0310 	add.w	r3, r7, #16
 801348c:	9301      	str	r3, [sp, #4]
 801348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013490:	9300      	str	r3, [sp, #0]
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013496:	68f8      	ldr	r0, [r7, #12]
 8013498:	f001 faf8 	bl	8014a8c <xTaskCreate>
 801349c:	4603      	mov	r3, r0
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d001      	beq.n	80134a6 <osThreadNew+0x13e>
          hTask = NULL;
 80134a2:	2300      	movs	r3, #0
 80134a4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80134a6:	693b      	ldr	r3, [r7, #16]
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3730      	adds	r7, #48	@ 0x30
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}
 80134b0:	20004718 	.word	0x20004718

080134b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b086      	sub	sp, #24
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134bc:	f3ef 8305 	mrs	r3, IPSR
 80134c0:	613b      	str	r3, [r7, #16]
  return(result);
 80134c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d10f      	bne.n	80134e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134c8:	f3ef 8310 	mrs	r3, PRIMASK
 80134cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d105      	bne.n	80134e0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80134d4:	f3ef 8311 	mrs	r3, BASEPRI
 80134d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d007      	beq.n	80134f0 <osDelay+0x3c>
 80134e0:	4b0a      	ldr	r3, [pc, #40]	@ (801350c <osDelay+0x58>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	2b02      	cmp	r3, #2
 80134e6:	d103      	bne.n	80134f0 <osDelay+0x3c>
    stat = osErrorISR;
 80134e8:	f06f 0305 	mvn.w	r3, #5
 80134ec:	617b      	str	r3, [r7, #20]
 80134ee:	e007      	b.n	8013500 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d002      	beq.n	8013500 <osDelay+0x4c>
      vTaskDelay(ticks);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f001 fc26 	bl	8014d4c <vTaskDelay>
    }
  }

  return (stat);
 8013500:	697b      	ldr	r3, [r7, #20]
}
 8013502:	4618      	mov	r0, r3
 8013504:	3718      	adds	r7, #24
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	20004718 	.word	0x20004718

08013510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013510:	b480      	push	{r7}
 8013512:	b085      	sub	sp, #20
 8013514:	af00      	add	r7, sp, #0
 8013516:	60f8      	str	r0, [r7, #12]
 8013518:	60b9      	str	r1, [r7, #8]
 801351a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	4a07      	ldr	r2, [pc, #28]	@ (801353c <vApplicationGetIdleTaskMemory+0x2c>)
 8013520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	4a06      	ldr	r2, [pc, #24]	@ (8013540 <vApplicationGetIdleTaskMemory+0x30>)
 8013526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801352e:	601a      	str	r2, [r3, #0]
}
 8013530:	bf00      	nop
 8013532:	3714      	adds	r7, #20
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr
 801353c:	2000471c 	.word	0x2000471c
 8013540:	200047c4 	.word	0x200047c4

08013544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013544:	b480      	push	{r7}
 8013546:	b085      	sub	sp, #20
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4a07      	ldr	r2, [pc, #28]	@ (8013570 <vApplicationGetTimerTaskMemory+0x2c>)
 8013554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	4a06      	ldr	r2, [pc, #24]	@ (8013574 <vApplicationGetTimerTaskMemory+0x30>)
 801355a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013562:	601a      	str	r2, [r3, #0]
}
 8013564:	bf00      	nop
 8013566:	3714      	adds	r7, #20
 8013568:	46bd      	mov	sp, r7
 801356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356e:	4770      	bx	lr
 8013570:	20004bc4 	.word	0x20004bc4
 8013574:	20004c6c 	.word	0x20004c6c

08013578 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801357e:	2020      	movs	r0, #32
 8013580:	f003 fb3a 	bl	8016bf8 <pvPortMalloc>
 8013584:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00a      	beq.n	80135a2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2200      	movs	r2, #0
 8013590:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	3304      	adds	r3, #4
 8013596:	4618      	mov	r0, r3
 8013598:	f000 fa09 	bl	80139ae <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2200      	movs	r2, #0
 80135a0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80135a2:	687b      	ldr	r3, [r7, #4]
	}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3708      	adds	r7, #8
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b090      	sub	sp, #64	@ 0x40
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
 80135b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80135be:	2300      	movs	r3, #0
 80135c0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80135c2:	2300      	movs	r3, #0
 80135c4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d10d      	bne.n	80135e8 <xEventGroupWaitBits+0x3c>
	__asm volatile
 80135cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135d0:	b672      	cpsid	i
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	b662      	cpsie	i
 80135e0:	623b      	str	r3, [r7, #32]
}
 80135e2:	bf00      	nop
 80135e4:	bf00      	nop
 80135e6:	e7fd      	b.n	80135e4 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80135ee:	d30d      	bcc.n	801360c <xEventGroupWaitBits+0x60>
	__asm volatile
 80135f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f4:	b672      	cpsid	i
 80135f6:	f383 8811 	msr	BASEPRI, r3
 80135fa:	f3bf 8f6f 	isb	sy
 80135fe:	f3bf 8f4f 	dsb	sy
 8013602:	b662      	cpsie	i
 8013604:	61fb      	str	r3, [r7, #28]
}
 8013606:	bf00      	nop
 8013608:	bf00      	nop
 801360a:	e7fd      	b.n	8013608 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d10d      	bne.n	801362e <xEventGroupWaitBits+0x82>
	__asm volatile
 8013612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013616:	b672      	cpsid	i
 8013618:	f383 8811 	msr	BASEPRI, r3
 801361c:	f3bf 8f6f 	isb	sy
 8013620:	f3bf 8f4f 	dsb	sy
 8013624:	b662      	cpsie	i
 8013626:	61bb      	str	r3, [r7, #24]
}
 8013628:	bf00      	nop
 801362a:	bf00      	nop
 801362c:	e7fd      	b.n	801362a <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801362e:	f002 f923 	bl	8015878 <xTaskGetSchedulerState>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d102      	bne.n	801363e <xEventGroupWaitBits+0x92>
 8013638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801363a:	2b00      	cmp	r3, #0
 801363c:	d101      	bne.n	8013642 <xEventGroupWaitBits+0x96>
 801363e:	2301      	movs	r3, #1
 8013640:	e000      	b.n	8013644 <xEventGroupWaitBits+0x98>
 8013642:	2300      	movs	r3, #0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10d      	bne.n	8013664 <xEventGroupWaitBits+0xb8>
	__asm volatile
 8013648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801364c:	b672      	cpsid	i
 801364e:	f383 8811 	msr	BASEPRI, r3
 8013652:	f3bf 8f6f 	isb	sy
 8013656:	f3bf 8f4f 	dsb	sy
 801365a:	b662      	cpsie	i
 801365c:	617b      	str	r3, [r7, #20]
}
 801365e:	bf00      	nop
 8013660:	bf00      	nop
 8013662:	e7fd      	b.n	8013660 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 8013664:	f001 fc1e 	bl	8014ea4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801366e:	683a      	ldr	r2, [r7, #0]
 8013670:	68b9      	ldr	r1, [r7, #8]
 8013672:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013674:	f000 f979 	bl	801396a <prvTestWaitCondition>
 8013678:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 801367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801367c:	2b00      	cmp	r3, #0
 801367e:	d00e      	beq.n	801369e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013682:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013684:	2300      	movs	r3, #0
 8013686:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d028      	beq.n	80136e0 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801368e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	43db      	mvns	r3, r3
 8013696:	401a      	ands	r2, r3
 8013698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801369a:	601a      	str	r2, [r3, #0]
 801369c:	e020      	b.n	80136e0 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801369e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d104      	bne.n	80136ae <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80136a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80136a8:	2301      	movs	r3, #1
 80136aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80136ac:	e018      	b.n	80136e0 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d003      	beq.n	80136bc <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80136b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80136ba:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d003      	beq.n	80136ca <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80136c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80136c8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80136ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136cc:	1d18      	adds	r0, r3, #4
 80136ce:	68ba      	ldr	r2, [r7, #8]
 80136d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136d2:	4313      	orrs	r3, r2
 80136d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80136d6:	4619      	mov	r1, r3
 80136d8:	f001 fdee 	bl	80152b8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80136dc:	2300      	movs	r3, #0
 80136de:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80136e0:	f001 fbee 	bl	8014ec0 <xTaskResumeAll>
 80136e4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80136e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d031      	beq.n	8013750 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 80136ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d107      	bne.n	8013702 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 80136f2:	4b1a      	ldr	r3, [pc, #104]	@ (801375c <xEventGroupWaitBits+0x1b0>)
 80136f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136f8:	601a      	str	r2, [r3, #0]
 80136fa:	f3bf 8f4f 	dsb	sy
 80136fe:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013702:	f002 fa3b 	bl	8015b7c <uxTaskResetEventItemValue>
 8013706:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801370e:	2b00      	cmp	r3, #0
 8013710:	d11a      	bne.n	8013748 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 8013712:	f003 f943 	bl	801699c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	68b9      	ldr	r1, [r7, #8]
 8013720:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013722:	f000 f922 	bl	801396a <prvTestWaitCondition>
 8013726:	4603      	mov	r3, r0
 8013728:	2b00      	cmp	r3, #0
 801372a:	d009      	beq.n	8013740 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d006      	beq.n	8013740 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013734:	681a      	ldr	r2, [r3, #0]
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	43db      	mvns	r3, r3
 801373a:	401a      	ands	r2, r3
 801373c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801373e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013740:	2301      	movs	r3, #1
 8013742:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8013744:	f003 f960 	bl	8016a08 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801374a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013752:	4618      	mov	r0, r3
 8013754:	3740      	adds	r7, #64	@ 0x40
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
 801375a:	bf00      	nop
 801375c:	e000ed04 	.word	0xe000ed04

08013760 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b086      	sub	sp, #24
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d10d      	bne.n	8013790 <xEventGroupClearBits+0x30>
	__asm volatile
 8013774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013778:	b672      	cpsid	i
 801377a:	f383 8811 	msr	BASEPRI, r3
 801377e:	f3bf 8f6f 	isb	sy
 8013782:	f3bf 8f4f 	dsb	sy
 8013786:	b662      	cpsie	i
 8013788:	60fb      	str	r3, [r7, #12]
}
 801378a:	bf00      	nop
 801378c:	bf00      	nop
 801378e:	e7fd      	b.n	801378c <xEventGroupClearBits+0x2c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013796:	d30d      	bcc.n	80137b4 <xEventGroupClearBits+0x54>
	__asm volatile
 8013798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801379c:	b672      	cpsid	i
 801379e:	f383 8811 	msr	BASEPRI, r3
 80137a2:	f3bf 8f6f 	isb	sy
 80137a6:	f3bf 8f4f 	dsb	sy
 80137aa:	b662      	cpsie	i
 80137ac:	60bb      	str	r3, [r7, #8]
}
 80137ae:	bf00      	nop
 80137b0:	bf00      	nop
 80137b2:	e7fd      	b.n	80137b0 <xEventGroupClearBits+0x50>

	taskENTER_CRITICAL();
 80137b4:	f003 f8f2 	bl	801699c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	43db      	mvns	r3, r3
 80137c6:	401a      	ands	r2, r3
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80137cc:	f003 f91c 	bl	8016a08 <vPortExitCritical>

	return uxReturn;
 80137d0:	693b      	ldr	r3, [r7, #16]
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3718      	adds	r7, #24
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}

080137da <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80137da:	b580      	push	{r7, lr}
 80137dc:	b08e      	sub	sp, #56	@ 0x38
 80137de:	af00      	add	r7, sp, #0
 80137e0:	6078      	str	r0, [r7, #4]
 80137e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80137e4:	2300      	movs	r3, #0
 80137e6:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80137ec:	2300      	movs	r3, #0
 80137ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d10d      	bne.n	8013812 <xEventGroupSetBits+0x38>
	__asm volatile
 80137f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137fa:	b672      	cpsid	i
 80137fc:	f383 8811 	msr	BASEPRI, r3
 8013800:	f3bf 8f6f 	isb	sy
 8013804:	f3bf 8f4f 	dsb	sy
 8013808:	b662      	cpsie	i
 801380a:	613b      	str	r3, [r7, #16]
}
 801380c:	bf00      	nop
 801380e:	bf00      	nop
 8013810:	e7fd      	b.n	801380e <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013818:	d30d      	bcc.n	8013836 <xEventGroupSetBits+0x5c>
	__asm volatile
 801381a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801381e:	b672      	cpsid	i
 8013820:	f383 8811 	msr	BASEPRI, r3
 8013824:	f3bf 8f6f 	isb	sy
 8013828:	f3bf 8f4f 	dsb	sy
 801382c:	b662      	cpsie	i
 801382e:	60fb      	str	r3, [r7, #12]
}
 8013830:	bf00      	nop
 8013832:	bf00      	nop
 8013834:	e7fd      	b.n	8013832 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013838:	3304      	adds	r3, #4
 801383a:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801383e:	3308      	adds	r3, #8
 8013840:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013842:	f001 fb2f 	bl	8014ea4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013848:	68db      	ldr	r3, [r3, #12]
 801384a:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	431a      	orrs	r2, r3
 8013854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013856:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013858:	e03c      	b.n	80138d4 <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 801385a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013866:	2300      	movs	r3, #0
 8013868:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8013870:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013878:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013880:	2b00      	cmp	r3, #0
 8013882:	d108      	bne.n	8013896 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	4013      	ands	r3, r2
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00b      	beq.n	80138a8 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 8013890:	2301      	movs	r3, #1
 8013892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013894:	e008      	b.n	80138a8 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	4013      	ands	r3, r2
 801389e:	69ba      	ldr	r2, [r7, #24]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d101      	bne.n	80138a8 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80138a4:	2301      	movs	r3, #1
 80138a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80138a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d010      	beq.n	80138d0 <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d003      	beq.n	80138c0 <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80138b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138ba:	69bb      	ldr	r3, [r7, #24]
 80138bc:	4313      	orrs	r3, r2
 80138be:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80138c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80138c8:	4619      	mov	r1, r3
 80138ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80138cc:	f001 fdca 	bl	8015464 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80138d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80138d6:	6a3b      	ldr	r3, [r7, #32]
 80138d8:	429a      	cmp	r2, r3
 80138da:	d1be      	bne.n	801385a <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80138dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138de:	681a      	ldr	r2, [r3, #0]
 80138e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e2:	43db      	mvns	r3, r3
 80138e4:	401a      	ands	r2, r3
 80138e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80138ea:	f001 fae9 	bl	8014ec0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80138ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138f0:	681b      	ldr	r3, [r3, #0]
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3738      	adds	r7, #56	@ 0x38
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}

080138fa <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80138fa:	b580      	push	{r7, lr}
 80138fc:	b086      	sub	sp, #24
 80138fe:	af00      	add	r7, sp, #0
 8013900:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	3304      	adds	r3, #4
 801390a:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 801390c:	f001 faca 	bl	8014ea4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8013910:	e01a      	b.n	8013948 <vEventGroupDelete+0x4e>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	68da      	ldr	r2, [r3, #12]
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	3308      	adds	r3, #8
 801391a:	429a      	cmp	r2, r3
 801391c:	d10d      	bne.n	801393a <vEventGroupDelete+0x40>
	__asm volatile
 801391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013922:	b672      	cpsid	i
 8013924:	f383 8811 	msr	BASEPRI, r3
 8013928:	f3bf 8f6f 	isb	sy
 801392c:	f3bf 8f4f 	dsb	sy
 8013930:	b662      	cpsie	i
 8013932:	60fb      	str	r3, [r7, #12]
}
 8013934:	bf00      	nop
 8013936:	bf00      	nop
 8013938:	e7fd      	b.n	8013936 <vEventGroupDelete+0x3c>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	68db      	ldr	r3, [r3, #12]
 801393e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8013942:	4618      	mov	r0, r3
 8013944:	f001 fd8e 	bl	8015464 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d1e0      	bne.n	8013912 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	7f1b      	ldrb	r3, [r3, #28]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d102      	bne.n	801395e <vEventGroupDelete+0x64>
			{
				vPortFree( pxEventBits );
 8013958:	6978      	ldr	r0, [r7, #20]
 801395a:	f003 fa1b 	bl	8016d94 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 801395e:	f001 faaf 	bl	8014ec0 <xTaskResumeAll>
}
 8013962:	bf00      	nop
 8013964:	3718      	adds	r7, #24
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}

0801396a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801396a:	b480      	push	{r7}
 801396c:	b087      	sub	sp, #28
 801396e:	af00      	add	r7, sp, #0
 8013970:	60f8      	str	r0, [r7, #12]
 8013972:	60b9      	str	r1, [r7, #8]
 8013974:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013976:	2300      	movs	r3, #0
 8013978:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d107      	bne.n	8013990 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013980:	68fa      	ldr	r2, [r7, #12]
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	4013      	ands	r3, r2
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00a      	beq.n	80139a0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801398a:	2301      	movs	r3, #1
 801398c:	617b      	str	r3, [r7, #20]
 801398e:	e007      	b.n	80139a0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013990:	68fa      	ldr	r2, [r7, #12]
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	4013      	ands	r3, r2
 8013996:	68ba      	ldr	r2, [r7, #8]
 8013998:	429a      	cmp	r2, r3
 801399a:	d101      	bne.n	80139a0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801399c:	2301      	movs	r3, #1
 801399e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80139a0:	697b      	ldr	r3, [r7, #20]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	371c      	adds	r7, #28
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr

080139ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80139ae:	b480      	push	{r7}
 80139b0:	b083      	sub	sp, #12
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f103 0208 	add.w	r2, r3, #8
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f04f 32ff 	mov.w	r2, #4294967295
 80139c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f103 0208 	add.w	r2, r3, #8
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f103 0208 	add.w	r2, r3, #8
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2200      	movs	r2, #0
 80139e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80139e2:	bf00      	nop
 80139e4:	370c      	adds	r7, #12
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr

080139ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80139ee:	b480      	push	{r7}
 80139f0:	b083      	sub	sp, #12
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2200      	movs	r2, #0
 80139fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80139fc:	bf00      	nop
 80139fe:	370c      	adds	r7, #12
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b085      	sub	sp, #20
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	68fa      	ldr	r2, [r7, #12]
 8013a1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	689a      	ldr	r2, [r3, #8]
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	689b      	ldr	r3, [r3, #8]
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	683a      	ldr	r2, [r7, #0]
 8013a32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	1c5a      	adds	r2, r3, #1
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	601a      	str	r2, [r3, #0]
}
 8013a44:	bf00      	nop
 8013a46:	3714      	adds	r7, #20
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr

08013a50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013a50:	b480      	push	{r7}
 8013a52:	b085      	sub	sp, #20
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a66:	d103      	bne.n	8013a70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	691b      	ldr	r3, [r3, #16]
 8013a6c:	60fb      	str	r3, [r7, #12]
 8013a6e:	e00c      	b.n	8013a8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	3308      	adds	r3, #8
 8013a74:	60fb      	str	r3, [r7, #12]
 8013a76:	e002      	b.n	8013a7e <vListInsert+0x2e>
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	60fb      	str	r3, [r7, #12]
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d2f6      	bcs.n	8013a78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	685a      	ldr	r2, [r3, #4]
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	683a      	ldr	r2, [r7, #0]
 8013a98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	68fa      	ldr	r2, [r7, #12]
 8013a9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	683a      	ldr	r2, [r7, #0]
 8013aa4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	1c5a      	adds	r2, r3, #1
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	601a      	str	r2, [r3, #0]
}
 8013ab6:	bf00      	nop
 8013ab8:	3714      	adds	r7, #20
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr

08013ac2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013ac2:	b480      	push	{r7}
 8013ac4:	b085      	sub	sp, #20
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	691b      	ldr	r3, [r3, #16]
 8013ace:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	6892      	ldr	r2, [r2, #8]
 8013ad8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	689b      	ldr	r3, [r3, #8]
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	6852      	ldr	r2, [r2, #4]
 8013ae2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	687a      	ldr	r2, [r7, #4]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d103      	bne.n	8013af6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	689a      	ldr	r2, [r3, #8]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2200      	movs	r2, #0
 8013afa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	1e5a      	subs	r2, r3, #1
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681b      	ldr	r3, [r3, #0]
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3714      	adds	r7, #20
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b14:	4770      	bx	lr
	...

08013b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b084      	sub	sp, #16
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d10d      	bne.n	8013b48 <xQueueGenericReset+0x30>
	__asm volatile
 8013b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b30:	b672      	cpsid	i
 8013b32:	f383 8811 	msr	BASEPRI, r3
 8013b36:	f3bf 8f6f 	isb	sy
 8013b3a:	f3bf 8f4f 	dsb	sy
 8013b3e:	b662      	cpsie	i
 8013b40:	60bb      	str	r3, [r7, #8]
}
 8013b42:	bf00      	nop
 8013b44:	bf00      	nop
 8013b46:	e7fd      	b.n	8013b44 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013b48:	f002 ff28 	bl	801699c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	681a      	ldr	r2, [r3, #0]
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b54:	68f9      	ldr	r1, [r7, #12]
 8013b56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013b58:	fb01 f303 	mul.w	r3, r1, r3
 8013b5c:	441a      	add	r2, r3
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2200      	movs	r2, #0
 8013b66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	681a      	ldr	r2, [r3, #0]
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	681a      	ldr	r2, [r3, #0]
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b78:	3b01      	subs	r3, #1
 8013b7a:	68f9      	ldr	r1, [r7, #12]
 8013b7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013b7e:	fb01 f303 	mul.w	r3, r1, r3
 8013b82:	441a      	add	r2, r3
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	22ff      	movs	r2, #255	@ 0xff
 8013b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	22ff      	movs	r2, #255	@ 0xff
 8013b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d114      	bne.n	8013bc8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	691b      	ldr	r3, [r3, #16]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d01a      	beq.n	8013bdc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	3310      	adds	r3, #16
 8013baa:	4618      	mov	r0, r3
 8013bac:	f001 fbf4 	bl	8015398 <xTaskRemoveFromEventList>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d012      	beq.n	8013bdc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8013bec <xQueueGenericReset+0xd4>)
 8013bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013bbc:	601a      	str	r2, [r3, #0]
 8013bbe:	f3bf 8f4f 	dsb	sy
 8013bc2:	f3bf 8f6f 	isb	sy
 8013bc6:	e009      	b.n	8013bdc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	3310      	adds	r3, #16
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7ff feee 	bl	80139ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	3324      	adds	r3, #36	@ 0x24
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ff fee9 	bl	80139ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013bdc:	f002 ff14 	bl	8016a08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013be0:	2301      	movs	r3, #1
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3710      	adds	r7, #16
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
 8013bea:	bf00      	nop
 8013bec:	e000ed04 	.word	0xe000ed04

08013bf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b08e      	sub	sp, #56	@ 0x38
 8013bf4:	af02      	add	r7, sp, #8
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	607a      	str	r2, [r7, #4]
 8013bfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d10d      	bne.n	8013c20 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8013c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c08:	b672      	cpsid	i
 8013c0a:	f383 8811 	msr	BASEPRI, r3
 8013c0e:	f3bf 8f6f 	isb	sy
 8013c12:	f3bf 8f4f 	dsb	sy
 8013c16:	b662      	cpsie	i
 8013c18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013c1a:	bf00      	nop
 8013c1c:	bf00      	nop
 8013c1e:	e7fd      	b.n	8013c1c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d10d      	bne.n	8013c42 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8013c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c2a:	b672      	cpsid	i
 8013c2c:	f383 8811 	msr	BASEPRI, r3
 8013c30:	f3bf 8f6f 	isb	sy
 8013c34:	f3bf 8f4f 	dsb	sy
 8013c38:	b662      	cpsie	i
 8013c3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013c3c:	bf00      	nop
 8013c3e:	bf00      	nop
 8013c40:	e7fd      	b.n	8013c3e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d002      	beq.n	8013c4e <xQueueGenericCreateStatic+0x5e>
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d001      	beq.n	8013c52 <xQueueGenericCreateStatic+0x62>
 8013c4e:	2301      	movs	r3, #1
 8013c50:	e000      	b.n	8013c54 <xQueueGenericCreateStatic+0x64>
 8013c52:	2300      	movs	r3, #0
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d10d      	bne.n	8013c74 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8013c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c5c:	b672      	cpsid	i
 8013c5e:	f383 8811 	msr	BASEPRI, r3
 8013c62:	f3bf 8f6f 	isb	sy
 8013c66:	f3bf 8f4f 	dsb	sy
 8013c6a:	b662      	cpsie	i
 8013c6c:	623b      	str	r3, [r7, #32]
}
 8013c6e:	bf00      	nop
 8013c70:	bf00      	nop
 8013c72:	e7fd      	b.n	8013c70 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d102      	bne.n	8013c80 <xQueueGenericCreateStatic+0x90>
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d101      	bne.n	8013c84 <xQueueGenericCreateStatic+0x94>
 8013c80:	2301      	movs	r3, #1
 8013c82:	e000      	b.n	8013c86 <xQueueGenericCreateStatic+0x96>
 8013c84:	2300      	movs	r3, #0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d10d      	bne.n	8013ca6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8013c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c8e:	b672      	cpsid	i
 8013c90:	f383 8811 	msr	BASEPRI, r3
 8013c94:	f3bf 8f6f 	isb	sy
 8013c98:	f3bf 8f4f 	dsb	sy
 8013c9c:	b662      	cpsie	i
 8013c9e:	61fb      	str	r3, [r7, #28]
}
 8013ca0:	bf00      	nop
 8013ca2:	bf00      	nop
 8013ca4:	e7fd      	b.n	8013ca2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013ca6:	2350      	movs	r3, #80	@ 0x50
 8013ca8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	2b50      	cmp	r3, #80	@ 0x50
 8013cae:	d00d      	beq.n	8013ccc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8013cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cb4:	b672      	cpsid	i
 8013cb6:	f383 8811 	msr	BASEPRI, r3
 8013cba:	f3bf 8f6f 	isb	sy
 8013cbe:	f3bf 8f4f 	dsb	sy
 8013cc2:	b662      	cpsie	i
 8013cc4:	61bb      	str	r3, [r7, #24]
}
 8013cc6:	bf00      	nop
 8013cc8:	bf00      	nop
 8013cca:	e7fd      	b.n	8013cc8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013ccc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d00d      	beq.n	8013cf4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cda:	2201      	movs	r2, #1
 8013cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013ce0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ce6:	9300      	str	r3, [sp, #0]
 8013ce8:	4613      	mov	r3, r2
 8013cea:	687a      	ldr	r2, [r7, #4]
 8013cec:	68b9      	ldr	r1, [r7, #8]
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	f000 f805 	bl	8013cfe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3730      	adds	r7, #48	@ 0x30
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}

08013cfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013cfe:	b580      	push	{r7, lr}
 8013d00:	b084      	sub	sp, #16
 8013d02:	af00      	add	r7, sp, #0
 8013d04:	60f8      	str	r0, [r7, #12]
 8013d06:	60b9      	str	r1, [r7, #8]
 8013d08:	607a      	str	r2, [r7, #4]
 8013d0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d103      	bne.n	8013d1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013d12:	69bb      	ldr	r3, [r7, #24]
 8013d14:	69ba      	ldr	r2, [r7, #24]
 8013d16:	601a      	str	r2, [r3, #0]
 8013d18:	e002      	b.n	8013d20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	68fa      	ldr	r2, [r7, #12]
 8013d24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013d26:	69bb      	ldr	r3, [r7, #24]
 8013d28:	68ba      	ldr	r2, [r7, #8]
 8013d2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013d2c:	2101      	movs	r1, #1
 8013d2e:	69b8      	ldr	r0, [r7, #24]
 8013d30:	f7ff fef2 	bl	8013b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	78fa      	ldrb	r2, [r7, #3]
 8013d38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013d3c:	bf00      	nop
 8013d3e:	3710      	adds	r7, #16
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d00e      	beq.n	8013d70 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2200      	movs	r2, #0
 8013d56:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2200      	movs	r2, #0
 8013d62:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013d64:	2300      	movs	r3, #0
 8013d66:	2200      	movs	r2, #0
 8013d68:	2100      	movs	r1, #0
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f000 f85c 	bl	8013e28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013d70:	bf00      	nop
 8013d72:	3708      	adds	r7, #8
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b088      	sub	sp, #32
 8013d7c:	af02      	add	r7, sp, #8
 8013d7e:	4603      	mov	r3, r0
 8013d80:	6039      	str	r1, [r7, #0]
 8013d82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013d84:	2301      	movs	r3, #1
 8013d86:	617b      	str	r3, [r7, #20]
 8013d88:	2300      	movs	r3, #0
 8013d8a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013d8c:	79fb      	ldrb	r3, [r7, #7]
 8013d8e:	9300      	str	r3, [sp, #0]
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	2200      	movs	r2, #0
 8013d94:	6939      	ldr	r1, [r7, #16]
 8013d96:	6978      	ldr	r0, [r7, #20]
 8013d98:	f7ff ff2a 	bl	8013bf0 <xQueueGenericCreateStatic>
 8013d9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013d9e:	68f8      	ldr	r0, [r7, #12]
 8013da0:	f7ff ffd0 	bl	8013d44 <prvInitialiseMutex>

		return xNewQueue;
 8013da4:	68fb      	ldr	r3, [r7, #12]
	}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3718      	adds	r7, #24
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}

08013dae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013dae:	b580      	push	{r7, lr}
 8013db0:	b08a      	sub	sp, #40	@ 0x28
 8013db2:	af02      	add	r7, sp, #8
 8013db4:	60f8      	str	r0, [r7, #12]
 8013db6:	60b9      	str	r1, [r7, #8]
 8013db8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d10d      	bne.n	8013ddc <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8013dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dc4:	b672      	cpsid	i
 8013dc6:	f383 8811 	msr	BASEPRI, r3
 8013dca:	f3bf 8f6f 	isb	sy
 8013dce:	f3bf 8f4f 	dsb	sy
 8013dd2:	b662      	cpsie	i
 8013dd4:	61bb      	str	r3, [r7, #24]
}
 8013dd6:	bf00      	nop
 8013dd8:	bf00      	nop
 8013dda:	e7fd      	b.n	8013dd8 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013ddc:	68ba      	ldr	r2, [r7, #8]
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d90d      	bls.n	8013e00 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8013de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013de8:	b672      	cpsid	i
 8013dea:	f383 8811 	msr	BASEPRI, r3
 8013dee:	f3bf 8f6f 	isb	sy
 8013df2:	f3bf 8f4f 	dsb	sy
 8013df6:	b662      	cpsie	i
 8013df8:	617b      	str	r3, [r7, #20]
}
 8013dfa:	bf00      	nop
 8013dfc:	bf00      	nop
 8013dfe:	e7fd      	b.n	8013dfc <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013e00:	2302      	movs	r3, #2
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2200      	movs	r2, #0
 8013e08:	2100      	movs	r1, #0
 8013e0a:	68f8      	ldr	r0, [r7, #12]
 8013e0c:	f7ff fef0 	bl	8013bf0 <xQueueGenericCreateStatic>
 8013e10:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8013e12:	69fb      	ldr	r3, [r7, #28]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d002      	beq.n	8013e1e <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	68ba      	ldr	r2, [r7, #8]
 8013e1c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013e1e:	69fb      	ldr	r3, [r7, #28]
	}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3720      	adds	r7, #32
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b08e      	sub	sp, #56	@ 0x38
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	607a      	str	r2, [r7, #4]
 8013e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013e36:	2300      	movs	r3, #0
 8013e38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10d      	bne.n	8013e60 <xQueueGenericSend+0x38>
	__asm volatile
 8013e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e48:	b672      	cpsid	i
 8013e4a:	f383 8811 	msr	BASEPRI, r3
 8013e4e:	f3bf 8f6f 	isb	sy
 8013e52:	f3bf 8f4f 	dsb	sy
 8013e56:	b662      	cpsie	i
 8013e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013e5a:	bf00      	nop
 8013e5c:	bf00      	nop
 8013e5e:	e7fd      	b.n	8013e5c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d103      	bne.n	8013e6e <xQueueGenericSend+0x46>
 8013e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d101      	bne.n	8013e72 <xQueueGenericSend+0x4a>
 8013e6e:	2301      	movs	r3, #1
 8013e70:	e000      	b.n	8013e74 <xQueueGenericSend+0x4c>
 8013e72:	2300      	movs	r3, #0
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d10d      	bne.n	8013e94 <xQueueGenericSend+0x6c>
	__asm volatile
 8013e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e7c:	b672      	cpsid	i
 8013e7e:	f383 8811 	msr	BASEPRI, r3
 8013e82:	f3bf 8f6f 	isb	sy
 8013e86:	f3bf 8f4f 	dsb	sy
 8013e8a:	b662      	cpsie	i
 8013e8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013e8e:	bf00      	nop
 8013e90:	bf00      	nop
 8013e92:	e7fd      	b.n	8013e90 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	2b02      	cmp	r3, #2
 8013e98:	d103      	bne.n	8013ea2 <xQueueGenericSend+0x7a>
 8013e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	d101      	bne.n	8013ea6 <xQueueGenericSend+0x7e>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	e000      	b.n	8013ea8 <xQueueGenericSend+0x80>
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d10d      	bne.n	8013ec8 <xQueueGenericSend+0xa0>
	__asm volatile
 8013eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eb0:	b672      	cpsid	i
 8013eb2:	f383 8811 	msr	BASEPRI, r3
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	f3bf 8f4f 	dsb	sy
 8013ebe:	b662      	cpsie	i
 8013ec0:	623b      	str	r3, [r7, #32]
}
 8013ec2:	bf00      	nop
 8013ec4:	bf00      	nop
 8013ec6:	e7fd      	b.n	8013ec4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ec8:	f001 fcd6 	bl	8015878 <xTaskGetSchedulerState>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d102      	bne.n	8013ed8 <xQueueGenericSend+0xb0>
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d101      	bne.n	8013edc <xQueueGenericSend+0xb4>
 8013ed8:	2301      	movs	r3, #1
 8013eda:	e000      	b.n	8013ede <xQueueGenericSend+0xb6>
 8013edc:	2300      	movs	r3, #0
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d10d      	bne.n	8013efe <xQueueGenericSend+0xd6>
	__asm volatile
 8013ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ee6:	b672      	cpsid	i
 8013ee8:	f383 8811 	msr	BASEPRI, r3
 8013eec:	f3bf 8f6f 	isb	sy
 8013ef0:	f3bf 8f4f 	dsb	sy
 8013ef4:	b662      	cpsie	i
 8013ef6:	61fb      	str	r3, [r7, #28]
}
 8013ef8:	bf00      	nop
 8013efa:	bf00      	nop
 8013efc:	e7fd      	b.n	8013efa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013efe:	f002 fd4d 	bl	801699c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d302      	bcc.n	8013f14 <xQueueGenericSend+0xec>
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	2b02      	cmp	r3, #2
 8013f12:	d129      	bne.n	8013f68 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013f14:	683a      	ldr	r2, [r7, #0]
 8013f16:	68b9      	ldr	r1, [r7, #8]
 8013f18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f1a:	f000 fbb8 	bl	801468e <prvCopyDataToQueue>
 8013f1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d010      	beq.n	8013f4a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f2a:	3324      	adds	r3, #36	@ 0x24
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f001 fa33 	bl	8015398 <xTaskRemoveFromEventList>
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d013      	beq.n	8013f60 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013f38:	4b3f      	ldr	r3, [pc, #252]	@ (8014038 <xQueueGenericSend+0x210>)
 8013f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f3e:	601a      	str	r2, [r3, #0]
 8013f40:	f3bf 8f4f 	dsb	sy
 8013f44:	f3bf 8f6f 	isb	sy
 8013f48:	e00a      	b.n	8013f60 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d007      	beq.n	8013f60 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013f50:	4b39      	ldr	r3, [pc, #228]	@ (8014038 <xQueueGenericSend+0x210>)
 8013f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f56:	601a      	str	r2, [r3, #0]
 8013f58:	f3bf 8f4f 	dsb	sy
 8013f5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013f60:	f002 fd52 	bl	8016a08 <vPortExitCritical>
				return pdPASS;
 8013f64:	2301      	movs	r3, #1
 8013f66:	e063      	b.n	8014030 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d103      	bne.n	8013f76 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f6e:	f002 fd4b 	bl	8016a08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013f72:	2300      	movs	r3, #0
 8013f74:	e05c      	b.n	8014030 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f7c:	f107 0314 	add.w	r3, r7, #20
 8013f80:	4618      	mov	r0, r3
 8013f82:	f001 fb01 	bl	8015588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f86:	2301      	movs	r3, #1
 8013f88:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f8a:	f002 fd3d 	bl	8016a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f8e:	f000 ff89 	bl	8014ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f92:	f002 fd03 	bl	801699c <vPortEnterCritical>
 8013f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013f9c:	b25b      	sxtb	r3, r3
 8013f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fa2:	d103      	bne.n	8013fac <xQueueGenericSend+0x184>
 8013fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013fb2:	b25b      	sxtb	r3, r3
 8013fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fb8:	d103      	bne.n	8013fc2 <xQueueGenericSend+0x19a>
 8013fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013fc2:	f002 fd21 	bl	8016a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013fc6:	1d3a      	adds	r2, r7, #4
 8013fc8:	f107 0314 	add.w	r3, r7, #20
 8013fcc:	4611      	mov	r1, r2
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f001 faf0 	bl	80155b4 <xTaskCheckForTimeOut>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d124      	bne.n	8014024 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013fda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fdc:	f000 fc4f 	bl	801487e <prvIsQueueFull>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d018      	beq.n	8014018 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fe8:	3310      	adds	r3, #16
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	4611      	mov	r1, r2
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f001 f93a 	bl	8015268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ff6:	f000 fbda 	bl	80147ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013ffa:	f000 ff61 	bl	8014ec0 <xTaskResumeAll>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2b00      	cmp	r3, #0
 8014002:	f47f af7c 	bne.w	8013efe <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8014006:	4b0c      	ldr	r3, [pc, #48]	@ (8014038 <xQueueGenericSend+0x210>)
 8014008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801400c:	601a      	str	r2, [r3, #0]
 801400e:	f3bf 8f4f 	dsb	sy
 8014012:	f3bf 8f6f 	isb	sy
 8014016:	e772      	b.n	8013efe <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014018:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801401a:	f000 fbc8 	bl	80147ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801401e:	f000 ff4f 	bl	8014ec0 <xTaskResumeAll>
 8014022:	e76c      	b.n	8013efe <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014026:	f000 fbc2 	bl	80147ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801402a:	f000 ff49 	bl	8014ec0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801402e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014030:	4618      	mov	r0, r3
 8014032:	3738      	adds	r7, #56	@ 0x38
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}
 8014038:	e000ed04 	.word	0xe000ed04

0801403c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b08e      	sub	sp, #56	@ 0x38
 8014040:	af00      	add	r7, sp, #0
 8014042:	60f8      	str	r0, [r7, #12]
 8014044:	60b9      	str	r1, [r7, #8]
 8014046:	607a      	str	r2, [r7, #4]
 8014048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10d      	bne.n	8014070 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8014054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014058:	b672      	cpsid	i
 801405a:	f383 8811 	msr	BASEPRI, r3
 801405e:	f3bf 8f6f 	isb	sy
 8014062:	f3bf 8f4f 	dsb	sy
 8014066:	b662      	cpsie	i
 8014068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801406a:	bf00      	nop
 801406c:	bf00      	nop
 801406e:	e7fd      	b.n	801406c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d103      	bne.n	801407e <xQueueGenericSendFromISR+0x42>
 8014076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801407a:	2b00      	cmp	r3, #0
 801407c:	d101      	bne.n	8014082 <xQueueGenericSendFromISR+0x46>
 801407e:	2301      	movs	r3, #1
 8014080:	e000      	b.n	8014084 <xQueueGenericSendFromISR+0x48>
 8014082:	2300      	movs	r3, #0
 8014084:	2b00      	cmp	r3, #0
 8014086:	d10d      	bne.n	80140a4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8014088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801408c:	b672      	cpsid	i
 801408e:	f383 8811 	msr	BASEPRI, r3
 8014092:	f3bf 8f6f 	isb	sy
 8014096:	f3bf 8f4f 	dsb	sy
 801409a:	b662      	cpsie	i
 801409c:	623b      	str	r3, [r7, #32]
}
 801409e:	bf00      	nop
 80140a0:	bf00      	nop
 80140a2:	e7fd      	b.n	80140a0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	2b02      	cmp	r3, #2
 80140a8:	d103      	bne.n	80140b2 <xQueueGenericSendFromISR+0x76>
 80140aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140ae:	2b01      	cmp	r3, #1
 80140b0:	d101      	bne.n	80140b6 <xQueueGenericSendFromISR+0x7a>
 80140b2:	2301      	movs	r3, #1
 80140b4:	e000      	b.n	80140b8 <xQueueGenericSendFromISR+0x7c>
 80140b6:	2300      	movs	r3, #0
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d10d      	bne.n	80140d8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80140bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140c0:	b672      	cpsid	i
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	b662      	cpsie	i
 80140d0:	61fb      	str	r3, [r7, #28]
}
 80140d2:	bf00      	nop
 80140d4:	bf00      	nop
 80140d6:	e7fd      	b.n	80140d4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80140d8:	f002 fd48 	bl	8016b6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80140dc:	f3ef 8211 	mrs	r2, BASEPRI
 80140e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140e4:	b672      	cpsid	i
 80140e6:	f383 8811 	msr	BASEPRI, r3
 80140ea:	f3bf 8f6f 	isb	sy
 80140ee:	f3bf 8f4f 	dsb	sy
 80140f2:	b662      	cpsie	i
 80140f4:	61ba      	str	r2, [r7, #24]
 80140f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80140f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80140fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80140fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014104:	429a      	cmp	r2, r3
 8014106:	d302      	bcc.n	801410e <xQueueGenericSendFromISR+0xd2>
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	2b02      	cmp	r3, #2
 801410c:	d12c      	bne.n	8014168 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014110:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014118:	683a      	ldr	r2, [r7, #0]
 801411a:	68b9      	ldr	r1, [r7, #8]
 801411c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801411e:	f000 fab6 	bl	801468e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014122:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8014126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801412a:	d112      	bne.n	8014152 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014130:	2b00      	cmp	r3, #0
 8014132:	d016      	beq.n	8014162 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014136:	3324      	adds	r3, #36	@ 0x24
 8014138:	4618      	mov	r0, r3
 801413a:	f001 f92d 	bl	8015398 <xTaskRemoveFromEventList>
 801413e:	4603      	mov	r3, r0
 8014140:	2b00      	cmp	r3, #0
 8014142:	d00e      	beq.n	8014162 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00b      	beq.n	8014162 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2201      	movs	r2, #1
 801414e:	601a      	str	r2, [r3, #0]
 8014150:	e007      	b.n	8014162 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014152:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014156:	3301      	adds	r3, #1
 8014158:	b2db      	uxtb	r3, r3
 801415a:	b25a      	sxtb	r2, r3
 801415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801415e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014162:	2301      	movs	r3, #1
 8014164:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8014166:	e001      	b.n	801416c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014168:	2300      	movs	r3, #0
 801416a:	637b      	str	r3, [r7, #52]	@ 0x34
 801416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801416e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014176:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801417a:	4618      	mov	r0, r3
 801417c:	3738      	adds	r7, #56	@ 0x38
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
	...

08014184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b08c      	sub	sp, #48	@ 0x30
 8014188:	af00      	add	r7, sp, #0
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	60b9      	str	r1, [r7, #8]
 801418e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014190:	2300      	movs	r3, #0
 8014192:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801419a:	2b00      	cmp	r3, #0
 801419c:	d10d      	bne.n	80141ba <xQueueReceive+0x36>
	__asm volatile
 801419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141a2:	b672      	cpsid	i
 80141a4:	f383 8811 	msr	BASEPRI, r3
 80141a8:	f3bf 8f6f 	isb	sy
 80141ac:	f3bf 8f4f 	dsb	sy
 80141b0:	b662      	cpsie	i
 80141b2:	623b      	str	r3, [r7, #32]
}
 80141b4:	bf00      	nop
 80141b6:	bf00      	nop
 80141b8:	e7fd      	b.n	80141b6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d103      	bne.n	80141c8 <xQueueReceive+0x44>
 80141c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d101      	bne.n	80141cc <xQueueReceive+0x48>
 80141c8:	2301      	movs	r3, #1
 80141ca:	e000      	b.n	80141ce <xQueueReceive+0x4a>
 80141cc:	2300      	movs	r3, #0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d10d      	bne.n	80141ee <xQueueReceive+0x6a>
	__asm volatile
 80141d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141d6:	b672      	cpsid	i
 80141d8:	f383 8811 	msr	BASEPRI, r3
 80141dc:	f3bf 8f6f 	isb	sy
 80141e0:	f3bf 8f4f 	dsb	sy
 80141e4:	b662      	cpsie	i
 80141e6:	61fb      	str	r3, [r7, #28]
}
 80141e8:	bf00      	nop
 80141ea:	bf00      	nop
 80141ec:	e7fd      	b.n	80141ea <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141ee:	f001 fb43 	bl	8015878 <xTaskGetSchedulerState>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d102      	bne.n	80141fe <xQueueReceive+0x7a>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d101      	bne.n	8014202 <xQueueReceive+0x7e>
 80141fe:	2301      	movs	r3, #1
 8014200:	e000      	b.n	8014204 <xQueueReceive+0x80>
 8014202:	2300      	movs	r3, #0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d10d      	bne.n	8014224 <xQueueReceive+0xa0>
	__asm volatile
 8014208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801420c:	b672      	cpsid	i
 801420e:	f383 8811 	msr	BASEPRI, r3
 8014212:	f3bf 8f6f 	isb	sy
 8014216:	f3bf 8f4f 	dsb	sy
 801421a:	b662      	cpsie	i
 801421c:	61bb      	str	r3, [r7, #24]
}
 801421e:	bf00      	nop
 8014220:	bf00      	nop
 8014222:	e7fd      	b.n	8014220 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014224:	f002 fbba 	bl	801699c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801422c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014230:	2b00      	cmp	r3, #0
 8014232:	d01f      	beq.n	8014274 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014234:	68b9      	ldr	r1, [r7, #8]
 8014236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014238:	f000 fa93 	bl	8014762 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801423e:	1e5a      	subs	r2, r3, #1
 8014240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014242:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014246:	691b      	ldr	r3, [r3, #16]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d00f      	beq.n	801426c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801424c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801424e:	3310      	adds	r3, #16
 8014250:	4618      	mov	r0, r3
 8014252:	f001 f8a1 	bl	8015398 <xTaskRemoveFromEventList>
 8014256:	4603      	mov	r3, r0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d007      	beq.n	801426c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801425c:	4b3c      	ldr	r3, [pc, #240]	@ (8014350 <xQueueReceive+0x1cc>)
 801425e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014262:	601a      	str	r2, [r3, #0]
 8014264:	f3bf 8f4f 	dsb	sy
 8014268:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801426c:	f002 fbcc 	bl	8016a08 <vPortExitCritical>
				return pdPASS;
 8014270:	2301      	movs	r3, #1
 8014272:	e069      	b.n	8014348 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d103      	bne.n	8014282 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801427a:	f002 fbc5 	bl	8016a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801427e:	2300      	movs	r3, #0
 8014280:	e062      	b.n	8014348 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014284:	2b00      	cmp	r3, #0
 8014286:	d106      	bne.n	8014296 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014288:	f107 0310 	add.w	r3, r7, #16
 801428c:	4618      	mov	r0, r3
 801428e:	f001 f97b 	bl	8015588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014292:	2301      	movs	r3, #1
 8014294:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014296:	f002 fbb7 	bl	8016a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801429a:	f000 fe03 	bl	8014ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801429e:	f002 fb7d 	bl	801699c <vPortEnterCritical>
 80142a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80142a8:	b25b      	sxtb	r3, r3
 80142aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ae:	d103      	bne.n	80142b8 <xQueueReceive+0x134>
 80142b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142b2:	2200      	movs	r2, #0
 80142b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80142b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80142be:	b25b      	sxtb	r3, r3
 80142c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142c4:	d103      	bne.n	80142ce <xQueueReceive+0x14a>
 80142c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142c8:	2200      	movs	r2, #0
 80142ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80142ce:	f002 fb9b 	bl	8016a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80142d2:	1d3a      	adds	r2, r7, #4
 80142d4:	f107 0310 	add.w	r3, r7, #16
 80142d8:	4611      	mov	r1, r2
 80142da:	4618      	mov	r0, r3
 80142dc:	f001 f96a 	bl	80155b4 <xTaskCheckForTimeOut>
 80142e0:	4603      	mov	r3, r0
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d123      	bne.n	801432e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80142e8:	f000 fab3 	bl	8014852 <prvIsQueueEmpty>
 80142ec:	4603      	mov	r3, r0
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d017      	beq.n	8014322 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80142f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142f4:	3324      	adds	r3, #36	@ 0x24
 80142f6:	687a      	ldr	r2, [r7, #4]
 80142f8:	4611      	mov	r1, r2
 80142fa:	4618      	mov	r0, r3
 80142fc:	f000 ffb4 	bl	8015268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014302:	f000 fa54 	bl	80147ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014306:	f000 fddb 	bl	8014ec0 <xTaskResumeAll>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d189      	bne.n	8014224 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8014310:	4b0f      	ldr	r3, [pc, #60]	@ (8014350 <xQueueReceive+0x1cc>)
 8014312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014316:	601a      	str	r2, [r3, #0]
 8014318:	f3bf 8f4f 	dsb	sy
 801431c:	f3bf 8f6f 	isb	sy
 8014320:	e780      	b.n	8014224 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014324:	f000 fa43 	bl	80147ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014328:	f000 fdca 	bl	8014ec0 <xTaskResumeAll>
 801432c:	e77a      	b.n	8014224 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801432e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014330:	f000 fa3d 	bl	80147ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014334:	f000 fdc4 	bl	8014ec0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801433a:	f000 fa8a 	bl	8014852 <prvIsQueueEmpty>
 801433e:	4603      	mov	r3, r0
 8014340:	2b00      	cmp	r3, #0
 8014342:	f43f af6f 	beq.w	8014224 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014346:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014348:	4618      	mov	r0, r3
 801434a:	3730      	adds	r7, #48	@ 0x30
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	e000ed04 	.word	0xe000ed04

08014354 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b08e      	sub	sp, #56	@ 0x38
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801435e:	2300      	movs	r3, #0
 8014360:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014366:	2300      	movs	r3, #0
 8014368:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801436a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801436c:	2b00      	cmp	r3, #0
 801436e:	d10d      	bne.n	801438c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8014370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014374:	b672      	cpsid	i
 8014376:	f383 8811 	msr	BASEPRI, r3
 801437a:	f3bf 8f6f 	isb	sy
 801437e:	f3bf 8f4f 	dsb	sy
 8014382:	b662      	cpsie	i
 8014384:	623b      	str	r3, [r7, #32]
}
 8014386:	bf00      	nop
 8014388:	bf00      	nop
 801438a:	e7fd      	b.n	8014388 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801438c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014390:	2b00      	cmp	r3, #0
 8014392:	d00d      	beq.n	80143b0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8014394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014398:	b672      	cpsid	i
 801439a:	f383 8811 	msr	BASEPRI, r3
 801439e:	f3bf 8f6f 	isb	sy
 80143a2:	f3bf 8f4f 	dsb	sy
 80143a6:	b662      	cpsie	i
 80143a8:	61fb      	str	r3, [r7, #28]
}
 80143aa:	bf00      	nop
 80143ac:	bf00      	nop
 80143ae:	e7fd      	b.n	80143ac <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80143b0:	f001 fa62 	bl	8015878 <xTaskGetSchedulerState>
 80143b4:	4603      	mov	r3, r0
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d102      	bne.n	80143c0 <xQueueSemaphoreTake+0x6c>
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d101      	bne.n	80143c4 <xQueueSemaphoreTake+0x70>
 80143c0:	2301      	movs	r3, #1
 80143c2:	e000      	b.n	80143c6 <xQueueSemaphoreTake+0x72>
 80143c4:	2300      	movs	r3, #0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d10d      	bne.n	80143e6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80143ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143ce:	b672      	cpsid	i
 80143d0:	f383 8811 	msr	BASEPRI, r3
 80143d4:	f3bf 8f6f 	isb	sy
 80143d8:	f3bf 8f4f 	dsb	sy
 80143dc:	b662      	cpsie	i
 80143de:	61bb      	str	r3, [r7, #24]
}
 80143e0:	bf00      	nop
 80143e2:	bf00      	nop
 80143e4:	e7fd      	b.n	80143e2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80143e6:	f002 fad9 	bl	801699c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80143ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80143f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d024      	beq.n	8014440 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80143f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f8:	1e5a      	subs	r2, r3, #1
 80143fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80143fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d104      	bne.n	8014410 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014406:	f001 fbd1 	bl	8015bac <pvTaskIncrementMutexHeldCount>
 801440a:	4602      	mov	r2, r0
 801440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801440e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014412:	691b      	ldr	r3, [r3, #16]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d00f      	beq.n	8014438 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441a:	3310      	adds	r3, #16
 801441c:	4618      	mov	r0, r3
 801441e:	f000 ffbb 	bl	8015398 <xTaskRemoveFromEventList>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d007      	beq.n	8014438 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014428:	4b55      	ldr	r3, [pc, #340]	@ (8014580 <xQueueSemaphoreTake+0x22c>)
 801442a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801442e:	601a      	str	r2, [r3, #0]
 8014430:	f3bf 8f4f 	dsb	sy
 8014434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014438:	f002 fae6 	bl	8016a08 <vPortExitCritical>
				return pdPASS;
 801443c:	2301      	movs	r3, #1
 801443e:	e09a      	b.n	8014576 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d114      	bne.n	8014470 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014448:	2b00      	cmp	r3, #0
 801444a:	d00d      	beq.n	8014468 <xQueueSemaphoreTake+0x114>
	__asm volatile
 801444c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014450:	b672      	cpsid	i
 8014452:	f383 8811 	msr	BASEPRI, r3
 8014456:	f3bf 8f6f 	isb	sy
 801445a:	f3bf 8f4f 	dsb	sy
 801445e:	b662      	cpsie	i
 8014460:	617b      	str	r3, [r7, #20]
}
 8014462:	bf00      	nop
 8014464:	bf00      	nop
 8014466:	e7fd      	b.n	8014464 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014468:	f002 face 	bl	8016a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801446c:	2300      	movs	r3, #0
 801446e:	e082      	b.n	8014576 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014472:	2b00      	cmp	r3, #0
 8014474:	d106      	bne.n	8014484 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014476:	f107 030c 	add.w	r3, r7, #12
 801447a:	4618      	mov	r0, r3
 801447c:	f001 f884 	bl	8015588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014480:	2301      	movs	r3, #1
 8014482:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014484:	f002 fac0 	bl	8016a08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014488:	f000 fd0c 	bl	8014ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801448c:	f002 fa86 	bl	801699c <vPortEnterCritical>
 8014490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014492:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014496:	b25b      	sxtb	r3, r3
 8014498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801449c:	d103      	bne.n	80144a6 <xQueueSemaphoreTake+0x152>
 801449e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144a0:	2200      	movs	r2, #0
 80144a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80144a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80144ac:	b25b      	sxtb	r3, r3
 80144ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144b2:	d103      	bne.n	80144bc <xQueueSemaphoreTake+0x168>
 80144b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144b6:	2200      	movs	r2, #0
 80144b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80144bc:	f002 faa4 	bl	8016a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80144c0:	463a      	mov	r2, r7
 80144c2:	f107 030c 	add.w	r3, r7, #12
 80144c6:	4611      	mov	r1, r2
 80144c8:	4618      	mov	r0, r3
 80144ca:	f001 f873 	bl	80155b4 <xTaskCheckForTimeOut>
 80144ce:	4603      	mov	r3, r0
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d132      	bne.n	801453a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80144d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80144d6:	f000 f9bc 	bl	8014852 <prvIsQueueEmpty>
 80144da:	4603      	mov	r3, r0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d026      	beq.n	801452e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80144e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d109      	bne.n	80144fc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80144e8:	f002 fa58 	bl	801699c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80144ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ee:	689b      	ldr	r3, [r3, #8]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f001 f9df 	bl	80158b4 <xTaskPriorityInherit>
 80144f6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80144f8:	f002 fa86 	bl	8016a08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80144fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144fe:	3324      	adds	r3, #36	@ 0x24
 8014500:	683a      	ldr	r2, [r7, #0]
 8014502:	4611      	mov	r1, r2
 8014504:	4618      	mov	r0, r3
 8014506:	f000 feaf 	bl	8015268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801450a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801450c:	f000 f94f 	bl	80147ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014510:	f000 fcd6 	bl	8014ec0 <xTaskResumeAll>
 8014514:	4603      	mov	r3, r0
 8014516:	2b00      	cmp	r3, #0
 8014518:	f47f af65 	bne.w	80143e6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 801451c:	4b18      	ldr	r3, [pc, #96]	@ (8014580 <xQueueSemaphoreTake+0x22c>)
 801451e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014522:	601a      	str	r2, [r3, #0]
 8014524:	f3bf 8f4f 	dsb	sy
 8014528:	f3bf 8f6f 	isb	sy
 801452c:	e75b      	b.n	80143e6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801452e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014530:	f000 f93d 	bl	80147ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014534:	f000 fcc4 	bl	8014ec0 <xTaskResumeAll>
 8014538:	e755      	b.n	80143e6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801453a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801453c:	f000 f937 	bl	80147ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014540:	f000 fcbe 	bl	8014ec0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014544:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014546:	f000 f984 	bl	8014852 <prvIsQueueEmpty>
 801454a:	4603      	mov	r3, r0
 801454c:	2b00      	cmp	r3, #0
 801454e:	f43f af4a 	beq.w	80143e6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014554:	2b00      	cmp	r3, #0
 8014556:	d00d      	beq.n	8014574 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8014558:	f002 fa20 	bl	801699c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801455c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801455e:	f000 f87e 	bl	801465e <prvGetDisinheritPriorityAfterTimeout>
 8014562:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014566:	689b      	ldr	r3, [r3, #8]
 8014568:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801456a:	4618      	mov	r0, r3
 801456c:	f001 fa7e 	bl	8015a6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014570:	f002 fa4a 	bl	8016a08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014574:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014576:	4618      	mov	r0, r3
 8014578:	3738      	adds	r7, #56	@ 0x38
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	e000ed04 	.word	0xe000ed04

08014584 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d10d      	bne.n	80145ae <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8014592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014596:	b672      	cpsid	i
 8014598:	f383 8811 	msr	BASEPRI, r3
 801459c:	f3bf 8f6f 	isb	sy
 80145a0:	f3bf 8f4f 	dsb	sy
 80145a4:	b662      	cpsie	i
 80145a6:	60bb      	str	r3, [r7, #8]
}
 80145a8:	bf00      	nop
 80145aa:	bf00      	nop
 80145ac:	e7fd      	b.n	80145aa <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80145ae:	f002 f9f5 	bl	801699c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145b6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80145b8:	f002 fa26 	bl	8016a08 <vPortExitCritical>

	return uxReturn;
 80145bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80145be:	4618      	mov	r0, r3
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}

080145c6 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80145c6:	b580      	push	{r7, lr}
 80145c8:	b086      	sub	sp, #24
 80145ca:	af00      	add	r7, sp, #0
 80145cc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d10d      	bne.n	80145f4 <uxQueueSpacesAvailable+0x2e>
	__asm volatile
 80145d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145dc:	b672      	cpsid	i
 80145de:	f383 8811 	msr	BASEPRI, r3
 80145e2:	f3bf 8f6f 	isb	sy
 80145e6:	f3bf 8f4f 	dsb	sy
 80145ea:	b662      	cpsie	i
 80145ec:	60fb      	str	r3, [r7, #12]
}
 80145ee:	bf00      	nop
 80145f0:	bf00      	nop
 80145f2:	e7fd      	b.n	80145f0 <uxQueueSpacesAvailable+0x2a>

	taskENTER_CRITICAL();
 80145f4:	f002 f9d2 	bl	801699c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014600:	1ad3      	subs	r3, r2, r3
 8014602:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014604:	f002 fa00 	bl	8016a08 <vPortExitCritical>

	return uxReturn;
 8014608:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801460a:	4618      	mov	r0, r3
 801460c:	3718      	adds	r7, #24
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}

08014612 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014612:	b580      	push	{r7, lr}
 8014614:	b084      	sub	sp, #16
 8014616:	af00      	add	r7, sp, #0
 8014618:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d10d      	bne.n	8014640 <vQueueDelete+0x2e>
	__asm volatile
 8014624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014628:	b672      	cpsid	i
 801462a:	f383 8811 	msr	BASEPRI, r3
 801462e:	f3bf 8f6f 	isb	sy
 8014632:	f3bf 8f4f 	dsb	sy
 8014636:	b662      	cpsie	i
 8014638:	60bb      	str	r3, [r7, #8]
}
 801463a:	bf00      	nop
 801463c:	bf00      	nop
 801463e:	e7fd      	b.n	801463c <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014640:	68f8      	ldr	r0, [r7, #12]
 8014642:	f000 f95f 	bl	8014904 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801464c:	2b00      	cmp	r3, #0
 801464e:	d102      	bne.n	8014656 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8014650:	68f8      	ldr	r0, [r7, #12]
 8014652:	f002 fb9f 	bl	8016d94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014656:	bf00      	nop
 8014658:	3710      	adds	r7, #16
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801465e:	b480      	push	{r7}
 8014660:	b085      	sub	sp, #20
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801466a:	2b00      	cmp	r3, #0
 801466c:	d006      	beq.n	801467c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8014678:	60fb      	str	r3, [r7, #12]
 801467a:	e001      	b.n	8014680 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801467c:	2300      	movs	r3, #0
 801467e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014680:	68fb      	ldr	r3, [r7, #12]
	}
 8014682:	4618      	mov	r0, r3
 8014684:	3714      	adds	r7, #20
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr

0801468e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801468e:	b580      	push	{r7, lr}
 8014690:	b086      	sub	sp, #24
 8014692:	af00      	add	r7, sp, #0
 8014694:	60f8      	str	r0, [r7, #12]
 8014696:	60b9      	str	r1, [r7, #8]
 8014698:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801469a:	2300      	movs	r3, #0
 801469c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d10d      	bne.n	80146c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d14d      	bne.n	8014750 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	689b      	ldr	r3, [r3, #8]
 80146b8:	4618      	mov	r0, r3
 80146ba:	f001 f963 	bl	8015984 <xTaskPriorityDisinherit>
 80146be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2200      	movs	r2, #0
 80146c4:	609a      	str	r2, [r3, #8]
 80146c6:	e043      	b.n	8014750 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d119      	bne.n	8014702 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	6858      	ldr	r0, [r3, #4]
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80146d6:	461a      	mov	r2, r3
 80146d8:	68b9      	ldr	r1, [r7, #8]
 80146da:	f002 fef4 	bl	80174c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	685a      	ldr	r2, [r3, #4]
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80146e6:	441a      	add	r2, r3
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	685a      	ldr	r2, [r3, #4]
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	689b      	ldr	r3, [r3, #8]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d32b      	bcc.n	8014750 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	681a      	ldr	r2, [r3, #0]
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	605a      	str	r2, [r3, #4]
 8014700:	e026      	b.n	8014750 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	68d8      	ldr	r0, [r3, #12]
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801470a:	461a      	mov	r2, r3
 801470c:	68b9      	ldr	r1, [r7, #8]
 801470e:	f002 feda 	bl	80174c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	68da      	ldr	r2, [r3, #12]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801471a:	425b      	negs	r3, r3
 801471c:	441a      	add	r2, r3
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	68da      	ldr	r2, [r3, #12]
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	429a      	cmp	r2, r3
 801472c:	d207      	bcs.n	801473e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	689a      	ldr	r2, [r3, #8]
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014736:	425b      	negs	r3, r3
 8014738:	441a      	add	r2, r3
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2b02      	cmp	r3, #2
 8014742:	d105      	bne.n	8014750 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d002      	beq.n	8014750 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	3b01      	subs	r3, #1
 801474e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	1c5a      	adds	r2, r3, #1
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014758:	697b      	ldr	r3, [r7, #20]
}
 801475a:	4618      	mov	r0, r3
 801475c:	3718      	adds	r7, #24
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}

08014762 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014762:	b580      	push	{r7, lr}
 8014764:	b082      	sub	sp, #8
 8014766:	af00      	add	r7, sp, #0
 8014768:	6078      	str	r0, [r7, #4]
 801476a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014770:	2b00      	cmp	r3, #0
 8014772:	d018      	beq.n	80147a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	68da      	ldr	r2, [r3, #12]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801477c:	441a      	add	r2, r3
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	68da      	ldr	r2, [r3, #12]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	689b      	ldr	r3, [r3, #8]
 801478a:	429a      	cmp	r2, r3
 801478c:	d303      	bcc.n	8014796 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	68d9      	ldr	r1, [r3, #12]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801479e:	461a      	mov	r2, r3
 80147a0:	6838      	ldr	r0, [r7, #0]
 80147a2:	f002 fe90 	bl	80174c6 <memcpy>
	}
}
 80147a6:	bf00      	nop
 80147a8:	3708      	adds	r7, #8
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}

080147ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80147ae:	b580      	push	{r7, lr}
 80147b0:	b084      	sub	sp, #16
 80147b2:	af00      	add	r7, sp, #0
 80147b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80147b6:	f002 f8f1 	bl	801699c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80147c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80147c2:	e011      	b.n	80147e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d012      	beq.n	80147f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	3324      	adds	r3, #36	@ 0x24
 80147d0:	4618      	mov	r0, r3
 80147d2:	f000 fde1 	bl	8015398 <xTaskRemoveFromEventList>
 80147d6:	4603      	mov	r3, r0
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d001      	beq.n	80147e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80147dc:	f000 ff52 	bl	8015684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80147e0:	7bfb      	ldrb	r3, [r7, #15]
 80147e2:	3b01      	subs	r3, #1
 80147e4:	b2db      	uxtb	r3, r3
 80147e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80147e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	dce9      	bgt.n	80147c4 <prvUnlockQueue+0x16>
 80147f0:	e000      	b.n	80147f4 <prvUnlockQueue+0x46>
					break;
 80147f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	22ff      	movs	r2, #255	@ 0xff
 80147f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80147fc:	f002 f904 	bl	8016a08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014800:	f002 f8cc 	bl	801699c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801480a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801480c:	e011      	b.n	8014832 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	691b      	ldr	r3, [r3, #16]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d012      	beq.n	801483c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	3310      	adds	r3, #16
 801481a:	4618      	mov	r0, r3
 801481c:	f000 fdbc 	bl	8015398 <xTaskRemoveFromEventList>
 8014820:	4603      	mov	r3, r0
 8014822:	2b00      	cmp	r3, #0
 8014824:	d001      	beq.n	801482a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014826:	f000 ff2d 	bl	8015684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801482a:	7bbb      	ldrb	r3, [r7, #14]
 801482c:	3b01      	subs	r3, #1
 801482e:	b2db      	uxtb	r3, r3
 8014830:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014836:	2b00      	cmp	r3, #0
 8014838:	dce9      	bgt.n	801480e <prvUnlockQueue+0x60>
 801483a:	e000      	b.n	801483e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801483c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	22ff      	movs	r2, #255	@ 0xff
 8014842:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014846:	f002 f8df 	bl	8016a08 <vPortExitCritical>
}
 801484a:	bf00      	nop
 801484c:	3710      	adds	r7, #16
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}

08014852 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014852:	b580      	push	{r7, lr}
 8014854:	b084      	sub	sp, #16
 8014856:	af00      	add	r7, sp, #0
 8014858:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801485a:	f002 f89f 	bl	801699c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014862:	2b00      	cmp	r3, #0
 8014864:	d102      	bne.n	801486c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014866:	2301      	movs	r3, #1
 8014868:	60fb      	str	r3, [r7, #12]
 801486a:	e001      	b.n	8014870 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801486c:	2300      	movs	r3, #0
 801486e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014870:	f002 f8ca 	bl	8016a08 <vPortExitCritical>

	return xReturn;
 8014874:	68fb      	ldr	r3, [r7, #12]
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}

0801487e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801487e:	b580      	push	{r7, lr}
 8014880:	b084      	sub	sp, #16
 8014882:	af00      	add	r7, sp, #0
 8014884:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014886:	f002 f889 	bl	801699c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014892:	429a      	cmp	r2, r3
 8014894:	d102      	bne.n	801489c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014896:	2301      	movs	r3, #1
 8014898:	60fb      	str	r3, [r7, #12]
 801489a:	e001      	b.n	80148a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801489c:	2300      	movs	r3, #0
 801489e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80148a0:	f002 f8b2 	bl	8016a08 <vPortExitCritical>

	return xReturn;
 80148a4:	68fb      	ldr	r3, [r7, #12]
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	3710      	adds	r7, #16
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}
	...

080148b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80148b0:	b480      	push	{r7}
 80148b2:	b085      	sub	sp, #20
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80148ba:	2300      	movs	r3, #0
 80148bc:	60fb      	str	r3, [r7, #12]
 80148be:	e014      	b.n	80148ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80148c0:	4a0f      	ldr	r2, [pc, #60]	@ (8014900 <vQueueAddToRegistry+0x50>)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d10b      	bne.n	80148e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80148cc:	490c      	ldr	r1, [pc, #48]	@ (8014900 <vQueueAddToRegistry+0x50>)
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	683a      	ldr	r2, [r7, #0]
 80148d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80148d6:	4a0a      	ldr	r2, [pc, #40]	@ (8014900 <vQueueAddToRegistry+0x50>)
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	00db      	lsls	r3, r3, #3
 80148dc:	4413      	add	r3, r2
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80148e2:	e006      	b.n	80148f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	3301      	adds	r3, #1
 80148e8:	60fb      	str	r3, [r7, #12]
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2b07      	cmp	r3, #7
 80148ee:	d9e7      	bls.n	80148c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80148f0:	bf00      	nop
 80148f2:	bf00      	nop
 80148f4:	3714      	adds	r7, #20
 80148f6:	46bd      	mov	sp, r7
 80148f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fc:	4770      	bx	lr
 80148fe:	bf00      	nop
 8014900:	2000546c 	.word	0x2000546c

08014904 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014904:	b480      	push	{r7}
 8014906:	b085      	sub	sp, #20
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801490c:	2300      	movs	r3, #0
 801490e:	60fb      	str	r3, [r7, #12]
 8014910:	e016      	b.n	8014940 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014912:	4a10      	ldr	r2, [pc, #64]	@ (8014954 <vQueueUnregisterQueue+0x50>)
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	00db      	lsls	r3, r3, #3
 8014918:	4413      	add	r3, r2
 801491a:	685b      	ldr	r3, [r3, #4]
 801491c:	687a      	ldr	r2, [r7, #4]
 801491e:	429a      	cmp	r2, r3
 8014920:	d10b      	bne.n	801493a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014922:	4a0c      	ldr	r2, [pc, #48]	@ (8014954 <vQueueUnregisterQueue+0x50>)
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2100      	movs	r1, #0
 8014928:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801492c:	4a09      	ldr	r2, [pc, #36]	@ (8014954 <vQueueUnregisterQueue+0x50>)
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	00db      	lsls	r3, r3, #3
 8014932:	4413      	add	r3, r2
 8014934:	2200      	movs	r2, #0
 8014936:	605a      	str	r2, [r3, #4]
				break;
 8014938:	e006      	b.n	8014948 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	3301      	adds	r3, #1
 801493e:	60fb      	str	r3, [r7, #12]
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2b07      	cmp	r3, #7
 8014944:	d9e5      	bls.n	8014912 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014946:	bf00      	nop
 8014948:	bf00      	nop
 801494a:	3714      	adds	r7, #20
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr
 8014954:	2000546c 	.word	0x2000546c

08014958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014958:	b580      	push	{r7, lr}
 801495a:	b086      	sub	sp, #24
 801495c:	af00      	add	r7, sp, #0
 801495e:	60f8      	str	r0, [r7, #12]
 8014960:	60b9      	str	r1, [r7, #8]
 8014962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014968:	f002 f818 	bl	801699c <vPortEnterCritical>
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014972:	b25b      	sxtb	r3, r3
 8014974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014978:	d103      	bne.n	8014982 <vQueueWaitForMessageRestricted+0x2a>
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	2200      	movs	r2, #0
 801497e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014988:	b25b      	sxtb	r3, r3
 801498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801498e:	d103      	bne.n	8014998 <vQueueWaitForMessageRestricted+0x40>
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	2200      	movs	r2, #0
 8014994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014998:	f002 f836 	bl	8016a08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d106      	bne.n	80149b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	3324      	adds	r3, #36	@ 0x24
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	68b9      	ldr	r1, [r7, #8]
 80149ac:	4618      	mov	r0, r3
 80149ae:	f000 fcc5 	bl	801533c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80149b2:	6978      	ldr	r0, [r7, #20]
 80149b4:	f7ff fefb 	bl	80147ae <prvUnlockQueue>
	}
 80149b8:	bf00      	nop
 80149ba:	3718      	adds	r7, #24
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}

080149c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b08e      	sub	sp, #56	@ 0x38
 80149c4:	af04      	add	r7, sp, #16
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	607a      	str	r2, [r7, #4]
 80149cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80149ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d10d      	bne.n	80149f0 <xTaskCreateStatic+0x30>
	__asm volatile
 80149d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149d8:	b672      	cpsid	i
 80149da:	f383 8811 	msr	BASEPRI, r3
 80149de:	f3bf 8f6f 	isb	sy
 80149e2:	f3bf 8f4f 	dsb	sy
 80149e6:	b662      	cpsie	i
 80149e8:	623b      	str	r3, [r7, #32]
}
 80149ea:	bf00      	nop
 80149ec:	bf00      	nop
 80149ee:	e7fd      	b.n	80149ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80149f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d10d      	bne.n	8014a12 <xTaskCreateStatic+0x52>
	__asm volatile
 80149f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149fa:	b672      	cpsid	i
 80149fc:	f383 8811 	msr	BASEPRI, r3
 8014a00:	f3bf 8f6f 	isb	sy
 8014a04:	f3bf 8f4f 	dsb	sy
 8014a08:	b662      	cpsie	i
 8014a0a:	61fb      	str	r3, [r7, #28]
}
 8014a0c:	bf00      	nop
 8014a0e:	bf00      	nop
 8014a10:	e7fd      	b.n	8014a0e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014a12:	23a8      	movs	r3, #168	@ 0xa8
 8014a14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	2ba8      	cmp	r3, #168	@ 0xa8
 8014a1a:	d00d      	beq.n	8014a38 <xTaskCreateStatic+0x78>
	__asm volatile
 8014a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a20:	b672      	cpsid	i
 8014a22:	f383 8811 	msr	BASEPRI, r3
 8014a26:	f3bf 8f6f 	isb	sy
 8014a2a:	f3bf 8f4f 	dsb	sy
 8014a2e:	b662      	cpsie	i
 8014a30:	61bb      	str	r3, [r7, #24]
}
 8014a32:	bf00      	nop
 8014a34:	bf00      	nop
 8014a36:	e7fd      	b.n	8014a34 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014a38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d01e      	beq.n	8014a7e <xTaskCreateStatic+0xbe>
 8014a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d01b      	beq.n	8014a7e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a48:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014a4e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a52:	2202      	movs	r2, #2
 8014a54:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014a58:	2300      	movs	r3, #0
 8014a5a:	9303      	str	r3, [sp, #12]
 8014a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a5e:	9302      	str	r3, [sp, #8]
 8014a60:	f107 0314 	add.w	r3, r7, #20
 8014a64:	9301      	str	r3, [sp, #4]
 8014a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a68:	9300      	str	r3, [sp, #0]
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	687a      	ldr	r2, [r7, #4]
 8014a6e:	68b9      	ldr	r1, [r7, #8]
 8014a70:	68f8      	ldr	r0, [r7, #12]
 8014a72:	f000 f851 	bl	8014b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014a78:	f000 f8f8 	bl	8014c6c <prvAddNewTaskToReadyList>
 8014a7c:	e001      	b.n	8014a82 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014a82:	697b      	ldr	r3, [r7, #20]
	}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3728      	adds	r7, #40	@ 0x28
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b08c      	sub	sp, #48	@ 0x30
 8014a90:	af04      	add	r7, sp, #16
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	60b9      	str	r1, [r7, #8]
 8014a96:	603b      	str	r3, [r7, #0]
 8014a98:	4613      	mov	r3, r2
 8014a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a9c:	88fb      	ldrh	r3, [r7, #6]
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f002 f8a9 	bl	8016bf8 <pvPortMalloc>
 8014aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d00e      	beq.n	8014acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014aae:	20a8      	movs	r0, #168	@ 0xa8
 8014ab0:	f002 f8a2 	bl	8016bf8 <pvPortMalloc>
 8014ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d003      	beq.n	8014ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014abc:	69fb      	ldr	r3, [r7, #28]
 8014abe:	697a      	ldr	r2, [r7, #20]
 8014ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ac2:	e005      	b.n	8014ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014ac4:	6978      	ldr	r0, [r7, #20]
 8014ac6:	f002 f965 	bl	8016d94 <vPortFree>
 8014aca:	e001      	b.n	8014ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014acc:	2300      	movs	r3, #0
 8014ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d017      	beq.n	8014b06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014ade:	88fa      	ldrh	r2, [r7, #6]
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	9303      	str	r3, [sp, #12]
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	9302      	str	r3, [sp, #8]
 8014ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aea:	9301      	str	r3, [sp, #4]
 8014aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aee:	9300      	str	r3, [sp, #0]
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	68b9      	ldr	r1, [r7, #8]
 8014af4:	68f8      	ldr	r0, [r7, #12]
 8014af6:	f000 f80f 	bl	8014b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014afa:	69f8      	ldr	r0, [r7, #28]
 8014afc:	f000 f8b6 	bl	8014c6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014b00:	2301      	movs	r3, #1
 8014b02:	61bb      	str	r3, [r7, #24]
 8014b04:	e002      	b.n	8014b0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014b06:	f04f 33ff 	mov.w	r3, #4294967295
 8014b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3720      	adds	r7, #32
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
	...

08014b18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b088      	sub	sp, #32
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	60b9      	str	r1, [r7, #8]
 8014b22:	607a      	str	r2, [r7, #4]
 8014b24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b28:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	461a      	mov	r2, r3
 8014b30:	21a5      	movs	r1, #165	@ 0xa5
 8014b32:	f002 fbee 	bl	8017312 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014b3a:	6879      	ldr	r1, [r7, #4]
 8014b3c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014b40:	440b      	add	r3, r1
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	4413      	add	r3, r2
 8014b46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	f023 0307 	bic.w	r3, r3, #7
 8014b4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014b50:	69bb      	ldr	r3, [r7, #24]
 8014b52:	f003 0307 	and.w	r3, r3, #7
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d00d      	beq.n	8014b76 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8014b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b5e:	b672      	cpsid	i
 8014b60:	f383 8811 	msr	BASEPRI, r3
 8014b64:	f3bf 8f6f 	isb	sy
 8014b68:	f3bf 8f4f 	dsb	sy
 8014b6c:	b662      	cpsie	i
 8014b6e:	617b      	str	r3, [r7, #20]
}
 8014b70:	bf00      	nop
 8014b72:	bf00      	nop
 8014b74:	e7fd      	b.n	8014b72 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d01f      	beq.n	8014bbc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	61fb      	str	r3, [r7, #28]
 8014b80:	e012      	b.n	8014ba8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	69fb      	ldr	r3, [r7, #28]
 8014b86:	4413      	add	r3, r2
 8014b88:	7819      	ldrb	r1, [r3, #0]
 8014b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	4413      	add	r3, r2
 8014b90:	3334      	adds	r3, #52	@ 0x34
 8014b92:	460a      	mov	r2, r1
 8014b94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014b96:	68ba      	ldr	r2, [r7, #8]
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	4413      	add	r3, r2
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d006      	beq.n	8014bb0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	61fb      	str	r3, [r7, #28]
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	2b0f      	cmp	r3, #15
 8014bac:	d9e9      	bls.n	8014b82 <prvInitialiseNewTask+0x6a>
 8014bae:	e000      	b.n	8014bb2 <prvInitialiseNewTask+0x9a>
			{
				break;
 8014bb0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014bba:	e003      	b.n	8014bc4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bc6:	2b37      	cmp	r3, #55	@ 0x37
 8014bc8:	d901      	bls.n	8014bce <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014bca:	2337      	movs	r3, #55	@ 0x37
 8014bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bdc:	2200      	movs	r2, #0
 8014bde:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be2:	3304      	adds	r3, #4
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7fe ff02 	bl	80139ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bec:	3318      	adds	r3, #24
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7fe fefd 	bl	80139ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014bf8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bfc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c14:	2200      	movs	r2, #0
 8014c16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c1c:	3354      	adds	r3, #84	@ 0x54
 8014c1e:	224c      	movs	r2, #76	@ 0x4c
 8014c20:	2100      	movs	r1, #0
 8014c22:	4618      	mov	r0, r3
 8014c24:	f002 fb75 	bl	8017312 <memset>
 8014c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8014c60 <prvInitialiseNewTask+0x148>)
 8014c2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8014c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c30:	4a0c      	ldr	r2, [pc, #48]	@ (8014c64 <prvInitialiseNewTask+0x14c>)
 8014c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c36:	4a0c      	ldr	r2, [pc, #48]	@ (8014c68 <prvInitialiseNewTask+0x150>)
 8014c38:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014c3a:	683a      	ldr	r2, [r7, #0]
 8014c3c:	68f9      	ldr	r1, [r7, #12]
 8014c3e:	69b8      	ldr	r0, [r7, #24]
 8014c40:	f001 fd9a 	bl	8016778 <pxPortInitialiseStack>
 8014c44:	4602      	mov	r2, r0
 8014c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d002      	beq.n	8014c56 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c56:	bf00      	nop
 8014c58:	3720      	adds	r7, #32
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	200096f8 	.word	0x200096f8
 8014c64:	20009760 	.word	0x20009760
 8014c68:	200097c8 	.word	0x200097c8

08014c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014c74:	f001 fe92 	bl	801699c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014c78:	4b2d      	ldr	r3, [pc, #180]	@ (8014d30 <prvAddNewTaskToReadyList+0xc4>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8014d30 <prvAddNewTaskToReadyList+0xc4>)
 8014c80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014c82:	4b2c      	ldr	r3, [pc, #176]	@ (8014d34 <prvAddNewTaskToReadyList+0xc8>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d109      	bne.n	8014c9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8014d34 <prvAddNewTaskToReadyList+0xc8>)
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014c90:	4b27      	ldr	r3, [pc, #156]	@ (8014d30 <prvAddNewTaskToReadyList+0xc4>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	d110      	bne.n	8014cba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014c98:	f000 fd18 	bl	80156cc <prvInitialiseTaskLists>
 8014c9c:	e00d      	b.n	8014cba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014c9e:	4b26      	ldr	r3, [pc, #152]	@ (8014d38 <prvAddNewTaskToReadyList+0xcc>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d109      	bne.n	8014cba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014ca6:	4b23      	ldr	r3, [pc, #140]	@ (8014d34 <prvAddNewTaskToReadyList+0xc8>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d802      	bhi.n	8014cba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8014d34 <prvAddNewTaskToReadyList+0xc8>)
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014cba:	4b20      	ldr	r3, [pc, #128]	@ (8014d3c <prvAddNewTaskToReadyList+0xd0>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8014d3c <prvAddNewTaskToReadyList+0xd0>)
 8014cc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8014d3c <prvAddNewTaskToReadyList+0xd0>)
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8014d40 <prvAddNewTaskToReadyList+0xd4>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d903      	bls.n	8014ce0 <prvAddNewTaskToReadyList+0x74>
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cdc:	4a18      	ldr	r2, [pc, #96]	@ (8014d40 <prvAddNewTaskToReadyList+0xd4>)
 8014cde:	6013      	str	r3, [r2, #0]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ce4:	4613      	mov	r3, r2
 8014ce6:	009b      	lsls	r3, r3, #2
 8014ce8:	4413      	add	r3, r2
 8014cea:	009b      	lsls	r3, r3, #2
 8014cec:	4a15      	ldr	r2, [pc, #84]	@ (8014d44 <prvAddNewTaskToReadyList+0xd8>)
 8014cee:	441a      	add	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	4610      	mov	r0, r2
 8014cf8:	f7fe fe86 	bl	8013a08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014cfc:	f001 fe84 	bl	8016a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014d00:	4b0d      	ldr	r3, [pc, #52]	@ (8014d38 <prvAddNewTaskToReadyList+0xcc>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d00e      	beq.n	8014d26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014d08:	4b0a      	ldr	r3, [pc, #40]	@ (8014d34 <prvAddNewTaskToReadyList+0xc8>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d207      	bcs.n	8014d26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014d16:	4b0c      	ldr	r3, [pc, #48]	@ (8014d48 <prvAddNewTaskToReadyList+0xdc>)
 8014d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014d1c:	601a      	str	r2, [r3, #0]
 8014d1e:	f3bf 8f4f 	dsb	sy
 8014d22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014d26:	bf00      	nop
 8014d28:	3708      	adds	r7, #8
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	20005980 	.word	0x20005980
 8014d34:	200054ac 	.word	0x200054ac
 8014d38:	2000598c 	.word	0x2000598c
 8014d3c:	2000599c 	.word	0x2000599c
 8014d40:	20005988 	.word	0x20005988
 8014d44:	200054b0 	.word	0x200054b0
 8014d48:	e000ed04 	.word	0xe000ed04

08014d4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b084      	sub	sp, #16
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014d54:	2300      	movs	r3, #0
 8014d56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d01a      	beq.n	8014d94 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014d5e:	4b15      	ldr	r3, [pc, #84]	@ (8014db4 <vTaskDelay+0x68>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d00d      	beq.n	8014d82 <vTaskDelay+0x36>
	__asm volatile
 8014d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d6a:	b672      	cpsid	i
 8014d6c:	f383 8811 	msr	BASEPRI, r3
 8014d70:	f3bf 8f6f 	isb	sy
 8014d74:	f3bf 8f4f 	dsb	sy
 8014d78:	b662      	cpsie	i
 8014d7a:	60bb      	str	r3, [r7, #8]
}
 8014d7c:	bf00      	nop
 8014d7e:	bf00      	nop
 8014d80:	e7fd      	b.n	8014d7e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8014d82:	f000 f88f 	bl	8014ea4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014d86:	2100      	movs	r1, #0
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	f001 f939 	bl	8016000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014d8e:	f000 f897 	bl	8014ec0 <xTaskResumeAll>
 8014d92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d107      	bne.n	8014daa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8014d9a:	4b07      	ldr	r3, [pc, #28]	@ (8014db8 <vTaskDelay+0x6c>)
 8014d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014da0:	601a      	str	r2, [r3, #0]
 8014da2:	f3bf 8f4f 	dsb	sy
 8014da6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014daa:	bf00      	nop
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	200059a8 	.word	0x200059a8
 8014db8:	e000ed04 	.word	0xe000ed04

08014dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b08a      	sub	sp, #40	@ 0x28
 8014dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014dca:	463a      	mov	r2, r7
 8014dcc:	1d39      	adds	r1, r7, #4
 8014dce:	f107 0308 	add.w	r3, r7, #8
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7fe fb9c 	bl	8013510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014dd8:	6839      	ldr	r1, [r7, #0]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	68ba      	ldr	r2, [r7, #8]
 8014dde:	9202      	str	r2, [sp, #8]
 8014de0:	9301      	str	r3, [sp, #4]
 8014de2:	2300      	movs	r3, #0
 8014de4:	9300      	str	r3, [sp, #0]
 8014de6:	2300      	movs	r3, #0
 8014de8:	460a      	mov	r2, r1
 8014dea:	4926      	ldr	r1, [pc, #152]	@ (8014e84 <vTaskStartScheduler+0xc8>)
 8014dec:	4826      	ldr	r0, [pc, #152]	@ (8014e88 <vTaskStartScheduler+0xcc>)
 8014dee:	f7ff fde7 	bl	80149c0 <xTaskCreateStatic>
 8014df2:	4603      	mov	r3, r0
 8014df4:	4a25      	ldr	r2, [pc, #148]	@ (8014e8c <vTaskStartScheduler+0xd0>)
 8014df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014df8:	4b24      	ldr	r3, [pc, #144]	@ (8014e8c <vTaskStartScheduler+0xd0>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d002      	beq.n	8014e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014e00:	2301      	movs	r3, #1
 8014e02:	617b      	str	r3, [r7, #20]
 8014e04:	e001      	b.n	8014e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014e06:	2300      	movs	r3, #0
 8014e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	2b01      	cmp	r3, #1
 8014e0e:	d102      	bne.n	8014e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014e10:	f001 f94a 	bl	80160a8 <xTimerCreateTimerTask>
 8014e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	2b01      	cmp	r3, #1
 8014e1a:	d11d      	bne.n	8014e58 <vTaskStartScheduler+0x9c>
	__asm volatile
 8014e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e20:	b672      	cpsid	i
 8014e22:	f383 8811 	msr	BASEPRI, r3
 8014e26:	f3bf 8f6f 	isb	sy
 8014e2a:	f3bf 8f4f 	dsb	sy
 8014e2e:	b662      	cpsie	i
 8014e30:	613b      	str	r3, [r7, #16]
}
 8014e32:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014e34:	4b16      	ldr	r3, [pc, #88]	@ (8014e90 <vTaskStartScheduler+0xd4>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	3354      	adds	r3, #84	@ 0x54
 8014e3a:	4a16      	ldr	r2, [pc, #88]	@ (8014e94 <vTaskStartScheduler+0xd8>)
 8014e3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014e3e:	4b16      	ldr	r3, [pc, #88]	@ (8014e98 <vTaskStartScheduler+0xdc>)
 8014e40:	f04f 32ff 	mov.w	r2, #4294967295
 8014e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014e46:	4b15      	ldr	r3, [pc, #84]	@ (8014e9c <vTaskStartScheduler+0xe0>)
 8014e48:	2201      	movs	r2, #1
 8014e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014e4c:	4b14      	ldr	r3, [pc, #80]	@ (8014ea0 <vTaskStartScheduler+0xe4>)
 8014e4e:	2200      	movs	r2, #0
 8014e50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014e52:	f001 fd25 	bl	80168a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014e56:	e011      	b.n	8014e7c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e5e:	d10d      	bne.n	8014e7c <vTaskStartScheduler+0xc0>
	__asm volatile
 8014e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e64:	b672      	cpsid	i
 8014e66:	f383 8811 	msr	BASEPRI, r3
 8014e6a:	f3bf 8f6f 	isb	sy
 8014e6e:	f3bf 8f4f 	dsb	sy
 8014e72:	b662      	cpsie	i
 8014e74:	60fb      	str	r3, [r7, #12]
}
 8014e76:	bf00      	nop
 8014e78:	bf00      	nop
 8014e7a:	e7fd      	b.n	8014e78 <vTaskStartScheduler+0xbc>
}
 8014e7c:	bf00      	nop
 8014e7e:	3718      	adds	r7, #24
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	080185e0 	.word	0x080185e0
 8014e88:	0801569d 	.word	0x0801569d
 8014e8c:	200059a4 	.word	0x200059a4
 8014e90:	200054ac 	.word	0x200054ac
 8014e94:	2000002c 	.word	0x2000002c
 8014e98:	200059a0 	.word	0x200059a0
 8014e9c:	2000598c 	.word	0x2000598c
 8014ea0:	20005984 	.word	0x20005984

08014ea4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014ea8:	4b04      	ldr	r3, [pc, #16]	@ (8014ebc <vTaskSuspendAll+0x18>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	3301      	adds	r3, #1
 8014eae:	4a03      	ldr	r2, [pc, #12]	@ (8014ebc <vTaskSuspendAll+0x18>)
 8014eb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014eb2:	bf00      	nop
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr
 8014ebc:	200059a8 	.word	0x200059a8

08014ec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b084      	sub	sp, #16
 8014ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014ece:	4b43      	ldr	r3, [pc, #268]	@ (8014fdc <xTaskResumeAll+0x11c>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d10d      	bne.n	8014ef2 <xTaskResumeAll+0x32>
	__asm volatile
 8014ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eda:	b672      	cpsid	i
 8014edc:	f383 8811 	msr	BASEPRI, r3
 8014ee0:	f3bf 8f6f 	isb	sy
 8014ee4:	f3bf 8f4f 	dsb	sy
 8014ee8:	b662      	cpsie	i
 8014eea:	603b      	str	r3, [r7, #0]
}
 8014eec:	bf00      	nop
 8014eee:	bf00      	nop
 8014ef0:	e7fd      	b.n	8014eee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014ef2:	f001 fd53 	bl	801699c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014ef6:	4b39      	ldr	r3, [pc, #228]	@ (8014fdc <xTaskResumeAll+0x11c>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	3b01      	subs	r3, #1
 8014efc:	4a37      	ldr	r2, [pc, #220]	@ (8014fdc <xTaskResumeAll+0x11c>)
 8014efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f00:	4b36      	ldr	r3, [pc, #216]	@ (8014fdc <xTaskResumeAll+0x11c>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d162      	bne.n	8014fce <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014f08:	4b35      	ldr	r3, [pc, #212]	@ (8014fe0 <xTaskResumeAll+0x120>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d05e      	beq.n	8014fce <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014f10:	e02f      	b.n	8014f72 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f12:	4b34      	ldr	r3, [pc, #208]	@ (8014fe4 <xTaskResumeAll+0x124>)
 8014f14:	68db      	ldr	r3, [r3, #12]
 8014f16:	68db      	ldr	r3, [r3, #12]
 8014f18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	3318      	adds	r3, #24
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7fe fdcf 	bl	8013ac2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	3304      	adds	r3, #4
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f7fe fdca 	bl	8013ac2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f32:	4b2d      	ldr	r3, [pc, #180]	@ (8014fe8 <xTaskResumeAll+0x128>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d903      	bls.n	8014f42 <xTaskResumeAll+0x82>
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8014fe8 <xTaskResumeAll+0x128>)
 8014f40:	6013      	str	r3, [r2, #0]
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f46:	4613      	mov	r3, r2
 8014f48:	009b      	lsls	r3, r3, #2
 8014f4a:	4413      	add	r3, r2
 8014f4c:	009b      	lsls	r3, r3, #2
 8014f4e:	4a27      	ldr	r2, [pc, #156]	@ (8014fec <xTaskResumeAll+0x12c>)
 8014f50:	441a      	add	r2, r3
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	3304      	adds	r3, #4
 8014f56:	4619      	mov	r1, r3
 8014f58:	4610      	mov	r0, r2
 8014f5a:	f7fe fd55 	bl	8013a08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f62:	4b23      	ldr	r3, [pc, #140]	@ (8014ff0 <xTaskResumeAll+0x130>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d302      	bcc.n	8014f72 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8014f6c:	4b21      	ldr	r3, [pc, #132]	@ (8014ff4 <xTaskResumeAll+0x134>)
 8014f6e:	2201      	movs	r2, #1
 8014f70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014f72:	4b1c      	ldr	r3, [pc, #112]	@ (8014fe4 <xTaskResumeAll+0x124>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d1cb      	bne.n	8014f12 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d001      	beq.n	8014f84 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014f80:	f000 fc4a 	bl	8015818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014f84:	4b1c      	ldr	r3, [pc, #112]	@ (8014ff8 <xTaskResumeAll+0x138>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d010      	beq.n	8014fb2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014f90:	f000 f846 	bl	8015020 <xTaskIncrementTick>
 8014f94:	4603      	mov	r3, r0
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d002      	beq.n	8014fa0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8014f9a:	4b16      	ldr	r3, [pc, #88]	@ (8014ff4 <xTaskResumeAll+0x134>)
 8014f9c:	2201      	movs	r2, #1
 8014f9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	3b01      	subs	r3, #1
 8014fa4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d1f1      	bne.n	8014f90 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8014fac:	4b12      	ldr	r3, [pc, #72]	@ (8014ff8 <xTaskResumeAll+0x138>)
 8014fae:	2200      	movs	r2, #0
 8014fb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014fb2:	4b10      	ldr	r3, [pc, #64]	@ (8014ff4 <xTaskResumeAll+0x134>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d009      	beq.n	8014fce <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8014ffc <xTaskResumeAll+0x13c>)
 8014fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014fc4:	601a      	str	r2, [r3, #0]
 8014fc6:	f3bf 8f4f 	dsb	sy
 8014fca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014fce:	f001 fd1b 	bl	8016a08 <vPortExitCritical>

	return xAlreadyYielded;
 8014fd2:	68bb      	ldr	r3, [r7, #8]
}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	3710      	adds	r7, #16
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}
 8014fdc:	200059a8 	.word	0x200059a8
 8014fe0:	20005980 	.word	0x20005980
 8014fe4:	20005940 	.word	0x20005940
 8014fe8:	20005988 	.word	0x20005988
 8014fec:	200054b0 	.word	0x200054b0
 8014ff0:	200054ac 	.word	0x200054ac
 8014ff4:	20005994 	.word	0x20005994
 8014ff8:	20005990 	.word	0x20005990
 8014ffc:	e000ed04 	.word	0xe000ed04

08015000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015000:	b480      	push	{r7}
 8015002:	b083      	sub	sp, #12
 8015004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015006:	4b05      	ldr	r3, [pc, #20]	@ (801501c <xTaskGetTickCount+0x1c>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801500c:	687b      	ldr	r3, [r7, #4]
}
 801500e:	4618      	mov	r0, r3
 8015010:	370c      	adds	r7, #12
 8015012:	46bd      	mov	sp, r7
 8015014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015018:	4770      	bx	lr
 801501a:	bf00      	nop
 801501c:	20005984 	.word	0x20005984

08015020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b086      	sub	sp, #24
 8015024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015026:	2300      	movs	r3, #0
 8015028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801502a:	4b50      	ldr	r3, [pc, #320]	@ (801516c <xTaskIncrementTick+0x14c>)
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2b00      	cmp	r3, #0
 8015030:	f040 808c 	bne.w	801514c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015034:	4b4e      	ldr	r3, [pc, #312]	@ (8015170 <xTaskIncrementTick+0x150>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	3301      	adds	r3, #1
 801503a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801503c:	4a4c      	ldr	r2, [pc, #304]	@ (8015170 <xTaskIncrementTick+0x150>)
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d123      	bne.n	8015090 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8015048:	4b4a      	ldr	r3, [pc, #296]	@ (8015174 <xTaskIncrementTick+0x154>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00d      	beq.n	801506e <xTaskIncrementTick+0x4e>
	__asm volatile
 8015052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015056:	b672      	cpsid	i
 8015058:	f383 8811 	msr	BASEPRI, r3
 801505c:	f3bf 8f6f 	isb	sy
 8015060:	f3bf 8f4f 	dsb	sy
 8015064:	b662      	cpsie	i
 8015066:	603b      	str	r3, [r7, #0]
}
 8015068:	bf00      	nop
 801506a:	bf00      	nop
 801506c:	e7fd      	b.n	801506a <xTaskIncrementTick+0x4a>
 801506e:	4b41      	ldr	r3, [pc, #260]	@ (8015174 <xTaskIncrementTick+0x154>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	60fb      	str	r3, [r7, #12]
 8015074:	4b40      	ldr	r3, [pc, #256]	@ (8015178 <xTaskIncrementTick+0x158>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	4a3e      	ldr	r2, [pc, #248]	@ (8015174 <xTaskIncrementTick+0x154>)
 801507a:	6013      	str	r3, [r2, #0]
 801507c:	4a3e      	ldr	r2, [pc, #248]	@ (8015178 <xTaskIncrementTick+0x158>)
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	6013      	str	r3, [r2, #0]
 8015082:	4b3e      	ldr	r3, [pc, #248]	@ (801517c <xTaskIncrementTick+0x15c>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	3301      	adds	r3, #1
 8015088:	4a3c      	ldr	r2, [pc, #240]	@ (801517c <xTaskIncrementTick+0x15c>)
 801508a:	6013      	str	r3, [r2, #0]
 801508c:	f000 fbc4 	bl	8015818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015090:	4b3b      	ldr	r3, [pc, #236]	@ (8015180 <xTaskIncrementTick+0x160>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	693a      	ldr	r2, [r7, #16]
 8015096:	429a      	cmp	r2, r3
 8015098:	d349      	bcc.n	801512e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801509a:	4b36      	ldr	r3, [pc, #216]	@ (8015174 <xTaskIncrementTick+0x154>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d104      	bne.n	80150ae <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150a4:	4b36      	ldr	r3, [pc, #216]	@ (8015180 <xTaskIncrementTick+0x160>)
 80150a6:	f04f 32ff 	mov.w	r2, #4294967295
 80150aa:	601a      	str	r2, [r3, #0]
					break;
 80150ac:	e03f      	b.n	801512e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150ae:	4b31      	ldr	r3, [pc, #196]	@ (8015174 <xTaskIncrementTick+0x154>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	68db      	ldr	r3, [r3, #12]
 80150b4:	68db      	ldr	r3, [r3, #12]
 80150b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80150be:	693a      	ldr	r2, [r7, #16]
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d203      	bcs.n	80150ce <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80150c6:	4a2e      	ldr	r2, [pc, #184]	@ (8015180 <xTaskIncrementTick+0x160>)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80150cc:	e02f      	b.n	801512e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	3304      	adds	r3, #4
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fe fcf5 	bl	8013ac2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d004      	beq.n	80150ea <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	3318      	adds	r3, #24
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7fe fcec 	bl	8013ac2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150ee:	4b25      	ldr	r3, [pc, #148]	@ (8015184 <xTaskIncrementTick+0x164>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d903      	bls.n	80150fe <xTaskIncrementTick+0xde>
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150fa:	4a22      	ldr	r2, [pc, #136]	@ (8015184 <xTaskIncrementTick+0x164>)
 80150fc:	6013      	str	r3, [r2, #0]
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015102:	4613      	mov	r3, r2
 8015104:	009b      	lsls	r3, r3, #2
 8015106:	4413      	add	r3, r2
 8015108:	009b      	lsls	r3, r3, #2
 801510a:	4a1f      	ldr	r2, [pc, #124]	@ (8015188 <xTaskIncrementTick+0x168>)
 801510c:	441a      	add	r2, r3
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	3304      	adds	r3, #4
 8015112:	4619      	mov	r1, r3
 8015114:	4610      	mov	r0, r2
 8015116:	f7fe fc77 	bl	8013a08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801511e:	4b1b      	ldr	r3, [pc, #108]	@ (801518c <xTaskIncrementTick+0x16c>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015124:	429a      	cmp	r2, r3
 8015126:	d3b8      	bcc.n	801509a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8015128:	2301      	movs	r3, #1
 801512a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801512c:	e7b5      	b.n	801509a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801512e:	4b17      	ldr	r3, [pc, #92]	@ (801518c <xTaskIncrementTick+0x16c>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015134:	4914      	ldr	r1, [pc, #80]	@ (8015188 <xTaskIncrementTick+0x168>)
 8015136:	4613      	mov	r3, r2
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	4413      	add	r3, r2
 801513c:	009b      	lsls	r3, r3, #2
 801513e:	440b      	add	r3, r1
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2b01      	cmp	r3, #1
 8015144:	d907      	bls.n	8015156 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8015146:	2301      	movs	r3, #1
 8015148:	617b      	str	r3, [r7, #20]
 801514a:	e004      	b.n	8015156 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801514c:	4b10      	ldr	r3, [pc, #64]	@ (8015190 <xTaskIncrementTick+0x170>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	3301      	adds	r3, #1
 8015152:	4a0f      	ldr	r2, [pc, #60]	@ (8015190 <xTaskIncrementTick+0x170>)
 8015154:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015156:	4b0f      	ldr	r3, [pc, #60]	@ (8015194 <xTaskIncrementTick+0x174>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d001      	beq.n	8015162 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 801515e:	2301      	movs	r3, #1
 8015160:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015162:	697b      	ldr	r3, [r7, #20]
}
 8015164:	4618      	mov	r0, r3
 8015166:	3718      	adds	r7, #24
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	200059a8 	.word	0x200059a8
 8015170:	20005984 	.word	0x20005984
 8015174:	20005938 	.word	0x20005938
 8015178:	2000593c 	.word	0x2000593c
 801517c:	20005998 	.word	0x20005998
 8015180:	200059a0 	.word	0x200059a0
 8015184:	20005988 	.word	0x20005988
 8015188:	200054b0 	.word	0x200054b0
 801518c:	200054ac 	.word	0x200054ac
 8015190:	20005990 	.word	0x20005990
 8015194:	20005994 	.word	0x20005994

08015198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015198:	b480      	push	{r7}
 801519a:	b085      	sub	sp, #20
 801519c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801519e:	4b2c      	ldr	r3, [pc, #176]	@ (8015250 <vTaskSwitchContext+0xb8>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d003      	beq.n	80151ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80151a6:	4b2b      	ldr	r3, [pc, #172]	@ (8015254 <vTaskSwitchContext+0xbc>)
 80151a8:	2201      	movs	r2, #1
 80151aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80151ac:	e049      	b.n	8015242 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80151ae:	4b29      	ldr	r3, [pc, #164]	@ (8015254 <vTaskSwitchContext+0xbc>)
 80151b0:	2200      	movs	r2, #0
 80151b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80151b4:	4b28      	ldr	r3, [pc, #160]	@ (8015258 <vTaskSwitchContext+0xc0>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	60fb      	str	r3, [r7, #12]
 80151ba:	e013      	b.n	80151e4 <vTaskSwitchContext+0x4c>
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d10d      	bne.n	80151de <vTaskSwitchContext+0x46>
	__asm volatile
 80151c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151c6:	b672      	cpsid	i
 80151c8:	f383 8811 	msr	BASEPRI, r3
 80151cc:	f3bf 8f6f 	isb	sy
 80151d0:	f3bf 8f4f 	dsb	sy
 80151d4:	b662      	cpsie	i
 80151d6:	607b      	str	r3, [r7, #4]
}
 80151d8:	bf00      	nop
 80151da:	bf00      	nop
 80151dc:	e7fd      	b.n	80151da <vTaskSwitchContext+0x42>
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	3b01      	subs	r3, #1
 80151e2:	60fb      	str	r3, [r7, #12]
 80151e4:	491d      	ldr	r1, [pc, #116]	@ (801525c <vTaskSwitchContext+0xc4>)
 80151e6:	68fa      	ldr	r2, [r7, #12]
 80151e8:	4613      	mov	r3, r2
 80151ea:	009b      	lsls	r3, r3, #2
 80151ec:	4413      	add	r3, r2
 80151ee:	009b      	lsls	r3, r3, #2
 80151f0:	440b      	add	r3, r1
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d0e1      	beq.n	80151bc <vTaskSwitchContext+0x24>
 80151f8:	68fa      	ldr	r2, [r7, #12]
 80151fa:	4613      	mov	r3, r2
 80151fc:	009b      	lsls	r3, r3, #2
 80151fe:	4413      	add	r3, r2
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	4a16      	ldr	r2, [pc, #88]	@ (801525c <vTaskSwitchContext+0xc4>)
 8015204:	4413      	add	r3, r2
 8015206:	60bb      	str	r3, [r7, #8]
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	685a      	ldr	r2, [r3, #4]
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	605a      	str	r2, [r3, #4]
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	685a      	ldr	r2, [r3, #4]
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	3308      	adds	r3, #8
 801521a:	429a      	cmp	r2, r3
 801521c:	d104      	bne.n	8015228 <vTaskSwitchContext+0x90>
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	685a      	ldr	r2, [r3, #4]
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	605a      	str	r2, [r3, #4]
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	68db      	ldr	r3, [r3, #12]
 801522e:	4a0c      	ldr	r2, [pc, #48]	@ (8015260 <vTaskSwitchContext+0xc8>)
 8015230:	6013      	str	r3, [r2, #0]
 8015232:	4a09      	ldr	r2, [pc, #36]	@ (8015258 <vTaskSwitchContext+0xc0>)
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015238:	4b09      	ldr	r3, [pc, #36]	@ (8015260 <vTaskSwitchContext+0xc8>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	3354      	adds	r3, #84	@ 0x54
 801523e:	4a09      	ldr	r2, [pc, #36]	@ (8015264 <vTaskSwitchContext+0xcc>)
 8015240:	6013      	str	r3, [r2, #0]
}
 8015242:	bf00      	nop
 8015244:	3714      	adds	r7, #20
 8015246:	46bd      	mov	sp, r7
 8015248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524c:	4770      	bx	lr
 801524e:	bf00      	nop
 8015250:	200059a8 	.word	0x200059a8
 8015254:	20005994 	.word	0x20005994
 8015258:	20005988 	.word	0x20005988
 801525c:	200054b0 	.word	0x200054b0
 8015260:	200054ac 	.word	0x200054ac
 8015264:	2000002c 	.word	0x2000002c

08015268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b084      	sub	sp, #16
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d10d      	bne.n	8015294 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8015278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801527c:	b672      	cpsid	i
 801527e:	f383 8811 	msr	BASEPRI, r3
 8015282:	f3bf 8f6f 	isb	sy
 8015286:	f3bf 8f4f 	dsb	sy
 801528a:	b662      	cpsie	i
 801528c:	60fb      	str	r3, [r7, #12]
}
 801528e:	bf00      	nop
 8015290:	bf00      	nop
 8015292:	e7fd      	b.n	8015290 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015294:	4b07      	ldr	r3, [pc, #28]	@ (80152b4 <vTaskPlaceOnEventList+0x4c>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	3318      	adds	r3, #24
 801529a:	4619      	mov	r1, r3
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7fe fbd7 	bl	8013a50 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80152a2:	2101      	movs	r1, #1
 80152a4:	6838      	ldr	r0, [r7, #0]
 80152a6:	f000 feab 	bl	8016000 <prvAddCurrentTaskToDelayedList>
}
 80152aa:	bf00      	nop
 80152ac:	3710      	adds	r7, #16
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	200054ac 	.word	0x200054ac

080152b8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b086      	sub	sp, #24
 80152bc:	af00      	add	r7, sp, #0
 80152be:	60f8      	str	r0, [r7, #12]
 80152c0:	60b9      	str	r1, [r7, #8]
 80152c2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d10d      	bne.n	80152e6 <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 80152ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ce:	b672      	cpsid	i
 80152d0:	f383 8811 	msr	BASEPRI, r3
 80152d4:	f3bf 8f6f 	isb	sy
 80152d8:	f3bf 8f4f 	dsb	sy
 80152dc:	b662      	cpsie	i
 80152de:	617b      	str	r3, [r7, #20]
}
 80152e0:	bf00      	nop
 80152e2:	bf00      	nop
 80152e4:	e7fd      	b.n	80152e2 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80152e6:	4b13      	ldr	r3, [pc, #76]	@ (8015334 <vTaskPlaceOnUnorderedEventList+0x7c>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d10d      	bne.n	801530a <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 80152ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152f2:	b672      	cpsid	i
 80152f4:	f383 8811 	msr	BASEPRI, r3
 80152f8:	f3bf 8f6f 	isb	sy
 80152fc:	f3bf 8f4f 	dsb	sy
 8015300:	b662      	cpsie	i
 8015302:	613b      	str	r3, [r7, #16]
}
 8015304:	bf00      	nop
 8015306:	bf00      	nop
 8015308:	e7fd      	b.n	8015306 <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801530a:	4b0b      	ldr	r3, [pc, #44]	@ (8015338 <vTaskPlaceOnUnorderedEventList+0x80>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	68ba      	ldr	r2, [r7, #8]
 8015310:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8015314:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015316:	4b08      	ldr	r3, [pc, #32]	@ (8015338 <vTaskPlaceOnUnorderedEventList+0x80>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	3318      	adds	r3, #24
 801531c:	4619      	mov	r1, r3
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	f7fe fb72 	bl	8013a08 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015324:	2101      	movs	r1, #1
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f000 fe6a 	bl	8016000 <prvAddCurrentTaskToDelayedList>
}
 801532c:	bf00      	nop
 801532e:	3718      	adds	r7, #24
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	200059a8 	.word	0x200059a8
 8015338:	200054ac 	.word	0x200054ac

0801533c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801533c:	b580      	push	{r7, lr}
 801533e:	b086      	sub	sp, #24
 8015340:	af00      	add	r7, sp, #0
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d10d      	bne.n	801536a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 801534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015352:	b672      	cpsid	i
 8015354:	f383 8811 	msr	BASEPRI, r3
 8015358:	f3bf 8f6f 	isb	sy
 801535c:	f3bf 8f4f 	dsb	sy
 8015360:	b662      	cpsie	i
 8015362:	617b      	str	r3, [r7, #20]
}
 8015364:	bf00      	nop
 8015366:	bf00      	nop
 8015368:	e7fd      	b.n	8015366 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801536a:	4b0a      	ldr	r3, [pc, #40]	@ (8015394 <vTaskPlaceOnEventListRestricted+0x58>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	3318      	adds	r3, #24
 8015370:	4619      	mov	r1, r3
 8015372:	68f8      	ldr	r0, [r7, #12]
 8015374:	f7fe fb48 	bl	8013a08 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d002      	beq.n	8015384 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 801537e:	f04f 33ff 	mov.w	r3, #4294967295
 8015382:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015384:	6879      	ldr	r1, [r7, #4]
 8015386:	68b8      	ldr	r0, [r7, #8]
 8015388:	f000 fe3a 	bl	8016000 <prvAddCurrentTaskToDelayedList>
	}
 801538c:	bf00      	nop
 801538e:	3718      	adds	r7, #24
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}
 8015394:	200054ac 	.word	0x200054ac

08015398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b086      	sub	sp, #24
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d10d      	bne.n	80153ca <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80153ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153b2:	b672      	cpsid	i
 80153b4:	f383 8811 	msr	BASEPRI, r3
 80153b8:	f3bf 8f6f 	isb	sy
 80153bc:	f3bf 8f4f 	dsb	sy
 80153c0:	b662      	cpsie	i
 80153c2:	60fb      	str	r3, [r7, #12]
}
 80153c4:	bf00      	nop
 80153c6:	bf00      	nop
 80153c8:	e7fd      	b.n	80153c6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	3318      	adds	r3, #24
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fe fb77 	bl	8013ac2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153d4:	4b1d      	ldr	r3, [pc, #116]	@ (801544c <xTaskRemoveFromEventList+0xb4>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d11d      	bne.n	8015418 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	3304      	adds	r3, #4
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7fe fb6e 	bl	8013ac2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153ea:	4b19      	ldr	r3, [pc, #100]	@ (8015450 <xTaskRemoveFromEventList+0xb8>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d903      	bls.n	80153fa <xTaskRemoveFromEventList+0x62>
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153f6:	4a16      	ldr	r2, [pc, #88]	@ (8015450 <xTaskRemoveFromEventList+0xb8>)
 80153f8:	6013      	str	r3, [r2, #0]
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153fe:	4613      	mov	r3, r2
 8015400:	009b      	lsls	r3, r3, #2
 8015402:	4413      	add	r3, r2
 8015404:	009b      	lsls	r3, r3, #2
 8015406:	4a13      	ldr	r2, [pc, #76]	@ (8015454 <xTaskRemoveFromEventList+0xbc>)
 8015408:	441a      	add	r2, r3
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	3304      	adds	r3, #4
 801540e:	4619      	mov	r1, r3
 8015410:	4610      	mov	r0, r2
 8015412:	f7fe faf9 	bl	8013a08 <vListInsertEnd>
 8015416:	e005      	b.n	8015424 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015418:	693b      	ldr	r3, [r7, #16]
 801541a:	3318      	adds	r3, #24
 801541c:	4619      	mov	r1, r3
 801541e:	480e      	ldr	r0, [pc, #56]	@ (8015458 <xTaskRemoveFromEventList+0xc0>)
 8015420:	f7fe faf2 	bl	8013a08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015428:	4b0c      	ldr	r3, [pc, #48]	@ (801545c <xTaskRemoveFromEventList+0xc4>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801542e:	429a      	cmp	r2, r3
 8015430:	d905      	bls.n	801543e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015432:	2301      	movs	r3, #1
 8015434:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015436:	4b0a      	ldr	r3, [pc, #40]	@ (8015460 <xTaskRemoveFromEventList+0xc8>)
 8015438:	2201      	movs	r2, #1
 801543a:	601a      	str	r2, [r3, #0]
 801543c:	e001      	b.n	8015442 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 801543e:	2300      	movs	r3, #0
 8015440:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015442:	697b      	ldr	r3, [r7, #20]
}
 8015444:	4618      	mov	r0, r3
 8015446:	3718      	adds	r7, #24
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	200059a8 	.word	0x200059a8
 8015450:	20005988 	.word	0x20005988
 8015454:	200054b0 	.word	0x200054b0
 8015458:	20005940 	.word	0x20005940
 801545c:	200054ac 	.word	0x200054ac
 8015460:	20005994 	.word	0x20005994

08015464 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b086      	sub	sp, #24
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801546e:	4b2c      	ldr	r3, [pc, #176]	@ (8015520 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d10d      	bne.n	8015492 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 8015476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801547a:	b672      	cpsid	i
 801547c:	f383 8811 	msr	BASEPRI, r3
 8015480:	f3bf 8f6f 	isb	sy
 8015484:	f3bf 8f4f 	dsb	sy
 8015488:	b662      	cpsie	i
 801548a:	613b      	str	r3, [r7, #16]
}
 801548c:	bf00      	nop
 801548e:	bf00      	nop
 8015490:	e7fd      	b.n	801548e <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	68db      	ldr	r3, [r3, #12]
 80154a0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d10d      	bne.n	80154c4 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 80154a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154ac:	b672      	cpsid	i
 80154ae:	f383 8811 	msr	BASEPRI, r3
 80154b2:	f3bf 8f6f 	isb	sy
 80154b6:	f3bf 8f4f 	dsb	sy
 80154ba:	b662      	cpsie	i
 80154bc:	60fb      	str	r3, [r7, #12]
}
 80154be:	bf00      	nop
 80154c0:	bf00      	nop
 80154c2:	e7fd      	b.n	80154c0 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f7fe fafc 	bl	8013ac2 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	3304      	adds	r3, #4
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7fe faf7 	bl	8013ac2 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154d8:	4b12      	ldr	r3, [pc, #72]	@ (8015524 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	429a      	cmp	r2, r3
 80154de:	d903      	bls.n	80154e8 <vTaskRemoveFromUnorderedEventList+0x84>
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154e4:	4a0f      	ldr	r2, [pc, #60]	@ (8015524 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80154e6:	6013      	str	r3, [r2, #0]
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154ec:	4613      	mov	r3, r2
 80154ee:	009b      	lsls	r3, r3, #2
 80154f0:	4413      	add	r3, r2
 80154f2:	009b      	lsls	r3, r3, #2
 80154f4:	4a0c      	ldr	r2, [pc, #48]	@ (8015528 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80154f6:	441a      	add	r2, r3
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	3304      	adds	r3, #4
 80154fc:	4619      	mov	r1, r3
 80154fe:	4610      	mov	r0, r2
 8015500:	f7fe fa82 	bl	8013a08 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015504:	697b      	ldr	r3, [r7, #20]
 8015506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015508:	4b08      	ldr	r3, [pc, #32]	@ (801552c <vTaskRemoveFromUnorderedEventList+0xc8>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801550e:	429a      	cmp	r2, r3
 8015510:	d902      	bls.n	8015518 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8015512:	4b07      	ldr	r3, [pc, #28]	@ (8015530 <vTaskRemoveFromUnorderedEventList+0xcc>)
 8015514:	2201      	movs	r2, #1
 8015516:	601a      	str	r2, [r3, #0]
	}
}
 8015518:	bf00      	nop
 801551a:	3718      	adds	r7, #24
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	200059a8 	.word	0x200059a8
 8015524:	20005988 	.word	0x20005988
 8015528:	200054b0 	.word	0x200054b0
 801552c:	200054ac 	.word	0x200054ac
 8015530:	20005994 	.word	0x20005994

08015534 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b084      	sub	sp, #16
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d10d      	bne.n	801555e <vTaskSetTimeOutState+0x2a>
	__asm volatile
 8015542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015546:	b672      	cpsid	i
 8015548:	f383 8811 	msr	BASEPRI, r3
 801554c:	f3bf 8f6f 	isb	sy
 8015550:	f3bf 8f4f 	dsb	sy
 8015554:	b662      	cpsie	i
 8015556:	60fb      	str	r3, [r7, #12]
}
 8015558:	bf00      	nop
 801555a:	bf00      	nop
 801555c:	e7fd      	b.n	801555a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 801555e:	f001 fa1d 	bl	801699c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015562:	4b07      	ldr	r3, [pc, #28]	@ (8015580 <vTaskSetTimeOutState+0x4c>)
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 801556a:	4b06      	ldr	r3, [pc, #24]	@ (8015584 <vTaskSetTimeOutState+0x50>)
 801556c:	681a      	ldr	r2, [r3, #0]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8015572:	f001 fa49 	bl	8016a08 <vPortExitCritical>
}
 8015576:	bf00      	nop
 8015578:	3710      	adds	r7, #16
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}
 801557e:	bf00      	nop
 8015580:	20005998 	.word	0x20005998
 8015584:	20005984 	.word	0x20005984

08015588 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015588:	b480      	push	{r7}
 801558a:	b083      	sub	sp, #12
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015590:	4b06      	ldr	r3, [pc, #24]	@ (80155ac <vTaskInternalSetTimeOutState+0x24>)
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015598:	4b05      	ldr	r3, [pc, #20]	@ (80155b0 <vTaskInternalSetTimeOutState+0x28>)
 801559a:	681a      	ldr	r2, [r3, #0]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	605a      	str	r2, [r3, #4]
}
 80155a0:	bf00      	nop
 80155a2:	370c      	adds	r7, #12
 80155a4:	46bd      	mov	sp, r7
 80155a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155aa:	4770      	bx	lr
 80155ac:	20005998 	.word	0x20005998
 80155b0:	20005984 	.word	0x20005984

080155b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b088      	sub	sp, #32
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d10d      	bne.n	80155e0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80155c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155c8:	b672      	cpsid	i
 80155ca:	f383 8811 	msr	BASEPRI, r3
 80155ce:	f3bf 8f6f 	isb	sy
 80155d2:	f3bf 8f4f 	dsb	sy
 80155d6:	b662      	cpsie	i
 80155d8:	613b      	str	r3, [r7, #16]
}
 80155da:	bf00      	nop
 80155dc:	bf00      	nop
 80155de:	e7fd      	b.n	80155dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d10d      	bne.n	8015602 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80155e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155ea:	b672      	cpsid	i
 80155ec:	f383 8811 	msr	BASEPRI, r3
 80155f0:	f3bf 8f6f 	isb	sy
 80155f4:	f3bf 8f4f 	dsb	sy
 80155f8:	b662      	cpsie	i
 80155fa:	60fb      	str	r3, [r7, #12]
}
 80155fc:	bf00      	nop
 80155fe:	bf00      	nop
 8015600:	e7fd      	b.n	80155fe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8015602:	f001 f9cb 	bl	801699c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015606:	4b1d      	ldr	r3, [pc, #116]	@ (801567c <xTaskCheckForTimeOut+0xc8>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	69ba      	ldr	r2, [r7, #24]
 8015612:	1ad3      	subs	r3, r2, r3
 8015614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801561e:	d102      	bne.n	8015626 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015620:	2300      	movs	r3, #0
 8015622:	61fb      	str	r3, [r7, #28]
 8015624:	e023      	b.n	801566e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	4b15      	ldr	r3, [pc, #84]	@ (8015680 <xTaskCheckForTimeOut+0xcc>)
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	429a      	cmp	r2, r3
 8015630:	d007      	beq.n	8015642 <xTaskCheckForTimeOut+0x8e>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	69ba      	ldr	r2, [r7, #24]
 8015638:	429a      	cmp	r2, r3
 801563a:	d302      	bcc.n	8015642 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801563c:	2301      	movs	r3, #1
 801563e:	61fb      	str	r3, [r7, #28]
 8015640:	e015      	b.n	801566e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	697a      	ldr	r2, [r7, #20]
 8015648:	429a      	cmp	r2, r3
 801564a:	d20b      	bcs.n	8015664 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	681a      	ldr	r2, [r3, #0]
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	1ad2      	subs	r2, r2, r3
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f7ff ff95 	bl	8015588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801565e:	2300      	movs	r3, #0
 8015660:	61fb      	str	r3, [r7, #28]
 8015662:	e004      	b.n	801566e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	2200      	movs	r2, #0
 8015668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801566a:	2301      	movs	r3, #1
 801566c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801566e:	f001 f9cb 	bl	8016a08 <vPortExitCritical>

	return xReturn;
 8015672:	69fb      	ldr	r3, [r7, #28]
}
 8015674:	4618      	mov	r0, r3
 8015676:	3720      	adds	r7, #32
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	20005984 	.word	0x20005984
 8015680:	20005998 	.word	0x20005998

08015684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015684:	b480      	push	{r7}
 8015686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015688:	4b03      	ldr	r3, [pc, #12]	@ (8015698 <vTaskMissedYield+0x14>)
 801568a:	2201      	movs	r2, #1
 801568c:	601a      	str	r2, [r3, #0]
}
 801568e:	bf00      	nop
 8015690:	46bd      	mov	sp, r7
 8015692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015696:	4770      	bx	lr
 8015698:	20005994 	.word	0x20005994

0801569c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80156a4:	f000 f852 	bl	801574c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80156a8:	4b06      	ldr	r3, [pc, #24]	@ (80156c4 <prvIdleTask+0x28>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d9f9      	bls.n	80156a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80156b0:	4b05      	ldr	r3, [pc, #20]	@ (80156c8 <prvIdleTask+0x2c>)
 80156b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80156b6:	601a      	str	r2, [r3, #0]
 80156b8:	f3bf 8f4f 	dsb	sy
 80156bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80156c0:	e7f0      	b.n	80156a4 <prvIdleTask+0x8>
 80156c2:	bf00      	nop
 80156c4:	200054b0 	.word	0x200054b0
 80156c8:	e000ed04 	.word	0xe000ed04

080156cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156d2:	2300      	movs	r3, #0
 80156d4:	607b      	str	r3, [r7, #4]
 80156d6:	e00c      	b.n	80156f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80156d8:	687a      	ldr	r2, [r7, #4]
 80156da:	4613      	mov	r3, r2
 80156dc:	009b      	lsls	r3, r3, #2
 80156de:	4413      	add	r3, r2
 80156e0:	009b      	lsls	r3, r3, #2
 80156e2:	4a12      	ldr	r2, [pc, #72]	@ (801572c <prvInitialiseTaskLists+0x60>)
 80156e4:	4413      	add	r3, r2
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fe f961 	bl	80139ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	3301      	adds	r3, #1
 80156f0:	607b      	str	r3, [r7, #4]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2b37      	cmp	r3, #55	@ 0x37
 80156f6:	d9ef      	bls.n	80156d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80156f8:	480d      	ldr	r0, [pc, #52]	@ (8015730 <prvInitialiseTaskLists+0x64>)
 80156fa:	f7fe f958 	bl	80139ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80156fe:	480d      	ldr	r0, [pc, #52]	@ (8015734 <prvInitialiseTaskLists+0x68>)
 8015700:	f7fe f955 	bl	80139ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015704:	480c      	ldr	r0, [pc, #48]	@ (8015738 <prvInitialiseTaskLists+0x6c>)
 8015706:	f7fe f952 	bl	80139ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801570a:	480c      	ldr	r0, [pc, #48]	@ (801573c <prvInitialiseTaskLists+0x70>)
 801570c:	f7fe f94f 	bl	80139ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015710:	480b      	ldr	r0, [pc, #44]	@ (8015740 <prvInitialiseTaskLists+0x74>)
 8015712:	f7fe f94c 	bl	80139ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015716:	4b0b      	ldr	r3, [pc, #44]	@ (8015744 <prvInitialiseTaskLists+0x78>)
 8015718:	4a05      	ldr	r2, [pc, #20]	@ (8015730 <prvInitialiseTaskLists+0x64>)
 801571a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801571c:	4b0a      	ldr	r3, [pc, #40]	@ (8015748 <prvInitialiseTaskLists+0x7c>)
 801571e:	4a05      	ldr	r2, [pc, #20]	@ (8015734 <prvInitialiseTaskLists+0x68>)
 8015720:	601a      	str	r2, [r3, #0]
}
 8015722:	bf00      	nop
 8015724:	3708      	adds	r7, #8
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	200054b0 	.word	0x200054b0
 8015730:	20005910 	.word	0x20005910
 8015734:	20005924 	.word	0x20005924
 8015738:	20005940 	.word	0x20005940
 801573c:	20005954 	.word	0x20005954
 8015740:	2000596c 	.word	0x2000596c
 8015744:	20005938 	.word	0x20005938
 8015748:	2000593c 	.word	0x2000593c

0801574c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015752:	e019      	b.n	8015788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015754:	f001 f922 	bl	801699c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015758:	4b10      	ldr	r3, [pc, #64]	@ (801579c <prvCheckTasksWaitingTermination+0x50>)
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	3304      	adds	r3, #4
 8015764:	4618      	mov	r0, r3
 8015766:	f7fe f9ac 	bl	8013ac2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801576a:	4b0d      	ldr	r3, [pc, #52]	@ (80157a0 <prvCheckTasksWaitingTermination+0x54>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	3b01      	subs	r3, #1
 8015770:	4a0b      	ldr	r2, [pc, #44]	@ (80157a0 <prvCheckTasksWaitingTermination+0x54>)
 8015772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015774:	4b0b      	ldr	r3, [pc, #44]	@ (80157a4 <prvCheckTasksWaitingTermination+0x58>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	3b01      	subs	r3, #1
 801577a:	4a0a      	ldr	r2, [pc, #40]	@ (80157a4 <prvCheckTasksWaitingTermination+0x58>)
 801577c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801577e:	f001 f943 	bl	8016a08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f000 f810 	bl	80157a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015788:	4b06      	ldr	r3, [pc, #24]	@ (80157a4 <prvCheckTasksWaitingTermination+0x58>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d1e1      	bne.n	8015754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015790:	bf00      	nop
 8015792:	bf00      	nop
 8015794:	3708      	adds	r7, #8
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	20005954 	.word	0x20005954
 80157a0:	20005980 	.word	0x20005980
 80157a4:	20005968 	.word	0x20005968

080157a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b084      	sub	sp, #16
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	3354      	adds	r3, #84	@ 0x54
 80157b4:	4618      	mov	r0, r3
 80157b6:	f001 fdd7 	bl	8017368 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d108      	bne.n	80157d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157c8:	4618      	mov	r0, r3
 80157ca:	f001 fae3 	bl	8016d94 <vPortFree>
				vPortFree( pxTCB );
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f001 fae0 	bl	8016d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80157d4:	e01b      	b.n	801580e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80157dc:	2b01      	cmp	r3, #1
 80157de:	d103      	bne.n	80157e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f001 fad7 	bl	8016d94 <vPortFree>
	}
 80157e6:	e012      	b.n	801580e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80157ee:	2b02      	cmp	r3, #2
 80157f0:	d00d      	beq.n	801580e <prvDeleteTCB+0x66>
	__asm volatile
 80157f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157f6:	b672      	cpsid	i
 80157f8:	f383 8811 	msr	BASEPRI, r3
 80157fc:	f3bf 8f6f 	isb	sy
 8015800:	f3bf 8f4f 	dsb	sy
 8015804:	b662      	cpsie	i
 8015806:	60fb      	str	r3, [r7, #12]
}
 8015808:	bf00      	nop
 801580a:	bf00      	nop
 801580c:	e7fd      	b.n	801580a <prvDeleteTCB+0x62>
	}
 801580e:	bf00      	nop
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
	...

08015818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015818:	b480      	push	{r7}
 801581a:	b083      	sub	sp, #12
 801581c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801581e:	4b0c      	ldr	r3, [pc, #48]	@ (8015850 <prvResetNextTaskUnblockTime+0x38>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d104      	bne.n	8015832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015828:	4b0a      	ldr	r3, [pc, #40]	@ (8015854 <prvResetNextTaskUnblockTime+0x3c>)
 801582a:	f04f 32ff 	mov.w	r2, #4294967295
 801582e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015830:	e008      	b.n	8015844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015832:	4b07      	ldr	r3, [pc, #28]	@ (8015850 <prvResetNextTaskUnblockTime+0x38>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	4a04      	ldr	r2, [pc, #16]	@ (8015854 <prvResetNextTaskUnblockTime+0x3c>)
 8015842:	6013      	str	r3, [r2, #0]
}
 8015844:	bf00      	nop
 8015846:	370c      	adds	r7, #12
 8015848:	46bd      	mov	sp, r7
 801584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584e:	4770      	bx	lr
 8015850:	20005938 	.word	0x20005938
 8015854:	200059a0 	.word	0x200059a0

08015858 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015858:	b480      	push	{r7}
 801585a:	b083      	sub	sp, #12
 801585c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801585e:	4b05      	ldr	r3, [pc, #20]	@ (8015874 <xTaskGetCurrentTaskHandle+0x1c>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015864:	687b      	ldr	r3, [r7, #4]
	}
 8015866:	4618      	mov	r0, r3
 8015868:	370c      	adds	r7, #12
 801586a:	46bd      	mov	sp, r7
 801586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015870:	4770      	bx	lr
 8015872:	bf00      	nop
 8015874:	200054ac 	.word	0x200054ac

08015878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801587e:	4b0b      	ldr	r3, [pc, #44]	@ (80158ac <xTaskGetSchedulerState+0x34>)
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d102      	bne.n	801588c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015886:	2301      	movs	r3, #1
 8015888:	607b      	str	r3, [r7, #4]
 801588a:	e008      	b.n	801589e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801588c:	4b08      	ldr	r3, [pc, #32]	@ (80158b0 <xTaskGetSchedulerState+0x38>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d102      	bne.n	801589a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015894:	2302      	movs	r3, #2
 8015896:	607b      	str	r3, [r7, #4]
 8015898:	e001      	b.n	801589e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801589a:	2300      	movs	r3, #0
 801589c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801589e:	687b      	ldr	r3, [r7, #4]
	}
 80158a0:	4618      	mov	r0, r3
 80158a2:	370c      	adds	r7, #12
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr
 80158ac:	2000598c 	.word	0x2000598c
 80158b0:	200059a8 	.word	0x200059a8

080158b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80158c0:	2300      	movs	r3, #0
 80158c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d051      	beq.n	801596e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158ce:	4b2a      	ldr	r3, [pc, #168]	@ (8015978 <xTaskPriorityInherit+0xc4>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d241      	bcs.n	801595c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	699b      	ldr	r3, [r3, #24]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	db06      	blt.n	80158ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158e0:	4b25      	ldr	r3, [pc, #148]	@ (8015978 <xTaskPriorityInherit+0xc4>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80158ea:	68bb      	ldr	r3, [r7, #8]
 80158ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	6959      	ldr	r1, [r3, #20]
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158f6:	4613      	mov	r3, r2
 80158f8:	009b      	lsls	r3, r3, #2
 80158fa:	4413      	add	r3, r2
 80158fc:	009b      	lsls	r3, r3, #2
 80158fe:	4a1f      	ldr	r2, [pc, #124]	@ (801597c <xTaskPriorityInherit+0xc8>)
 8015900:	4413      	add	r3, r2
 8015902:	4299      	cmp	r1, r3
 8015904:	d122      	bne.n	801594c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	3304      	adds	r3, #4
 801590a:	4618      	mov	r0, r3
 801590c:	f7fe f8d9 	bl	8013ac2 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015910:	4b19      	ldr	r3, [pc, #100]	@ (8015978 <xTaskPriorityInherit+0xc4>)
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801591e:	4b18      	ldr	r3, [pc, #96]	@ (8015980 <xTaskPriorityInherit+0xcc>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	429a      	cmp	r2, r3
 8015924:	d903      	bls.n	801592e <xTaskPriorityInherit+0x7a>
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801592a:	4a15      	ldr	r2, [pc, #84]	@ (8015980 <xTaskPriorityInherit+0xcc>)
 801592c:	6013      	str	r3, [r2, #0]
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015932:	4613      	mov	r3, r2
 8015934:	009b      	lsls	r3, r3, #2
 8015936:	4413      	add	r3, r2
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	4a10      	ldr	r2, [pc, #64]	@ (801597c <xTaskPriorityInherit+0xc8>)
 801593c:	441a      	add	r2, r3
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	3304      	adds	r3, #4
 8015942:	4619      	mov	r1, r3
 8015944:	4610      	mov	r0, r2
 8015946:	f7fe f85f 	bl	8013a08 <vListInsertEnd>
 801594a:	e004      	b.n	8015956 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801594c:	4b0a      	ldr	r3, [pc, #40]	@ (8015978 <xTaskPriorityInherit+0xc4>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015956:	2301      	movs	r3, #1
 8015958:	60fb      	str	r3, [r7, #12]
 801595a:	e008      	b.n	801596e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015960:	4b05      	ldr	r3, [pc, #20]	@ (8015978 <xTaskPriorityInherit+0xc4>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015966:	429a      	cmp	r2, r3
 8015968:	d201      	bcs.n	801596e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801596a:	2301      	movs	r3, #1
 801596c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801596e:	68fb      	ldr	r3, [r7, #12]
	}
 8015970:	4618      	mov	r0, r3
 8015972:	3710      	adds	r7, #16
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}
 8015978:	200054ac 	.word	0x200054ac
 801597c:	200054b0 	.word	0x200054b0
 8015980:	20005988 	.word	0x20005988

08015984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015984:	b580      	push	{r7, lr}
 8015986:	b086      	sub	sp, #24
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015990:	2300      	movs	r3, #0
 8015992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d05c      	beq.n	8015a54 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801599a:	4b31      	ldr	r3, [pc, #196]	@ (8015a60 <xTaskPriorityDisinherit+0xdc>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	693a      	ldr	r2, [r7, #16]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d00d      	beq.n	80159c0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80159a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159a8:	b672      	cpsid	i
 80159aa:	f383 8811 	msr	BASEPRI, r3
 80159ae:	f3bf 8f6f 	isb	sy
 80159b2:	f3bf 8f4f 	dsb	sy
 80159b6:	b662      	cpsie	i
 80159b8:	60fb      	str	r3, [r7, #12]
}
 80159ba:	bf00      	nop
 80159bc:	bf00      	nop
 80159be:	e7fd      	b.n	80159bc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80159c0:	693b      	ldr	r3, [r7, #16]
 80159c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d10d      	bne.n	80159e4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80159c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159cc:	b672      	cpsid	i
 80159ce:	f383 8811 	msr	BASEPRI, r3
 80159d2:	f3bf 8f6f 	isb	sy
 80159d6:	f3bf 8f4f 	dsb	sy
 80159da:	b662      	cpsie	i
 80159dc:	60bb      	str	r3, [r7, #8]
}
 80159de:	bf00      	nop
 80159e0:	bf00      	nop
 80159e2:	e7fd      	b.n	80159e0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159e8:	1e5a      	subs	r2, r3, #1
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80159ee:	693b      	ldr	r3, [r7, #16]
 80159f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159f2:	693b      	ldr	r3, [r7, #16]
 80159f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d02c      	beq.n	8015a54 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d128      	bne.n	8015a54 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	3304      	adds	r3, #4
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7fe f85b 	bl	8013ac2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a14:	693b      	ldr	r3, [r7, #16]
 8015a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015a20:	693b      	ldr	r3, [r7, #16]
 8015a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a24:	4b0f      	ldr	r3, [pc, #60]	@ (8015a64 <xTaskPriorityDisinherit+0xe0>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d903      	bls.n	8015a34 <xTaskPriorityDisinherit+0xb0>
 8015a2c:	693b      	ldr	r3, [r7, #16]
 8015a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a30:	4a0c      	ldr	r2, [pc, #48]	@ (8015a64 <xTaskPriorityDisinherit+0xe0>)
 8015a32:	6013      	str	r3, [r2, #0]
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a38:	4613      	mov	r3, r2
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	4413      	add	r3, r2
 8015a3e:	009b      	lsls	r3, r3, #2
 8015a40:	4a09      	ldr	r2, [pc, #36]	@ (8015a68 <xTaskPriorityDisinherit+0xe4>)
 8015a42:	441a      	add	r2, r3
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	3304      	adds	r3, #4
 8015a48:	4619      	mov	r1, r3
 8015a4a:	4610      	mov	r0, r2
 8015a4c:	f7fd ffdc 	bl	8013a08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015a50:	2301      	movs	r3, #1
 8015a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015a54:	697b      	ldr	r3, [r7, #20]
	}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3718      	adds	r7, #24
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	200054ac 	.word	0x200054ac
 8015a64:	20005988 	.word	0x20005988
 8015a68:	200054b0 	.word	0x200054b0

08015a6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b088      	sub	sp, #32
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
 8015a74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d070      	beq.n	8015b66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015a84:	69bb      	ldr	r3, [r7, #24]
 8015a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d10d      	bne.n	8015aa8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8015a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a90:	b672      	cpsid	i
 8015a92:	f383 8811 	msr	BASEPRI, r3
 8015a96:	f3bf 8f6f 	isb	sy
 8015a9a:	f3bf 8f4f 	dsb	sy
 8015a9e:	b662      	cpsie	i
 8015aa0:	60fb      	str	r3, [r7, #12]
}
 8015aa2:	bf00      	nop
 8015aa4:	bf00      	nop
 8015aa6:	e7fd      	b.n	8015aa4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015aa8:	69bb      	ldr	r3, [r7, #24]
 8015aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015aac:	683a      	ldr	r2, [r7, #0]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d902      	bls.n	8015ab8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	61fb      	str	r3, [r7, #28]
 8015ab6:	e002      	b.n	8015abe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015ab8:	69bb      	ldr	r3, [r7, #24]
 8015aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015abc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015abe:	69bb      	ldr	r3, [r7, #24]
 8015ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ac2:	69fa      	ldr	r2, [r7, #28]
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d04e      	beq.n	8015b66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015acc:	697a      	ldr	r2, [r7, #20]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d149      	bne.n	8015b66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015ad2:	4b27      	ldr	r3, [pc, #156]	@ (8015b70 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	69ba      	ldr	r2, [r7, #24]
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d10d      	bne.n	8015af8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8015adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ae0:	b672      	cpsid	i
 8015ae2:	f383 8811 	msr	BASEPRI, r3
 8015ae6:	f3bf 8f6f 	isb	sy
 8015aea:	f3bf 8f4f 	dsb	sy
 8015aee:	b662      	cpsie	i
 8015af0:	60bb      	str	r3, [r7, #8]
}
 8015af2:	bf00      	nop
 8015af4:	bf00      	nop
 8015af6:	e7fd      	b.n	8015af4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015af8:	69bb      	ldr	r3, [r7, #24]
 8015afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015afc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015afe:	69bb      	ldr	r3, [r7, #24]
 8015b00:	69fa      	ldr	r2, [r7, #28]
 8015b02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015b04:	69bb      	ldr	r3, [r7, #24]
 8015b06:	699b      	ldr	r3, [r3, #24]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	db04      	blt.n	8015b16 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b0c:	69fb      	ldr	r3, [r7, #28]
 8015b0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015b16:	69bb      	ldr	r3, [r7, #24]
 8015b18:	6959      	ldr	r1, [r3, #20]
 8015b1a:	693a      	ldr	r2, [r7, #16]
 8015b1c:	4613      	mov	r3, r2
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	4413      	add	r3, r2
 8015b22:	009b      	lsls	r3, r3, #2
 8015b24:	4a13      	ldr	r2, [pc, #76]	@ (8015b74 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8015b26:	4413      	add	r3, r2
 8015b28:	4299      	cmp	r1, r3
 8015b2a:	d11c      	bne.n	8015b66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	3304      	adds	r3, #4
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7fd ffc6 	bl	8013ac2 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015b36:	69bb      	ldr	r3, [r7, #24]
 8015b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8015b78 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d903      	bls.n	8015b4a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8015b42:	69bb      	ldr	r3, [r7, #24]
 8015b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b46:	4a0c      	ldr	r2, [pc, #48]	@ (8015b78 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8015b48:	6013      	str	r3, [r2, #0]
 8015b4a:	69bb      	ldr	r3, [r7, #24]
 8015b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b4e:	4613      	mov	r3, r2
 8015b50:	009b      	lsls	r3, r3, #2
 8015b52:	4413      	add	r3, r2
 8015b54:	009b      	lsls	r3, r3, #2
 8015b56:	4a07      	ldr	r2, [pc, #28]	@ (8015b74 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8015b58:	441a      	add	r2, r3
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	3304      	adds	r3, #4
 8015b5e:	4619      	mov	r1, r3
 8015b60:	4610      	mov	r0, r2
 8015b62:	f7fd ff51 	bl	8013a08 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015b66:	bf00      	nop
 8015b68:	3720      	adds	r7, #32
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	200054ac 	.word	0x200054ac
 8015b74:	200054b0 	.word	0x200054b0
 8015b78:	20005988 	.word	0x20005988

08015b7c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015b7c:	b480      	push	{r7}
 8015b7e:	b083      	sub	sp, #12
 8015b80:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015b82:	4b09      	ldr	r3, [pc, #36]	@ (8015ba8 <uxTaskResetEventItemValue+0x2c>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	699b      	ldr	r3, [r3, #24]
 8015b88:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b8a:	4b07      	ldr	r3, [pc, #28]	@ (8015ba8 <uxTaskResetEventItemValue+0x2c>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b90:	4b05      	ldr	r3, [pc, #20]	@ (8015ba8 <uxTaskResetEventItemValue+0x2c>)
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8015b98:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015b9a:	687b      	ldr	r3, [r7, #4]
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	370c      	adds	r7, #12
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr
 8015ba8:	200054ac 	.word	0x200054ac

08015bac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015bac:	b480      	push	{r7}
 8015bae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015bb0:	4b07      	ldr	r3, [pc, #28]	@ (8015bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d004      	beq.n	8015bc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015bb8:	4b05      	ldr	r3, [pc, #20]	@ (8015bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bbe:	3201      	adds	r2, #1
 8015bc0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015bc2:	4b03      	ldr	r3, [pc, #12]	@ (8015bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
	}
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bce:	4770      	bx	lr
 8015bd0:	200054ac 	.word	0x200054ac

08015bd4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b086      	sub	sp, #24
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	60f8      	str	r0, [r7, #12]
 8015bdc:	60b9      	str	r1, [r7, #8]
 8015bde:	607a      	str	r2, [r7, #4]
 8015be0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8015be2:	f000 fedb 	bl	801699c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8015be6:	4b29      	ldr	r3, [pc, #164]	@ (8015c8c <xTaskNotifyWait+0xb8>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015bee:	b2db      	uxtb	r3, r3
 8015bf0:	2b02      	cmp	r3, #2
 8015bf2:	d01c      	beq.n	8015c2e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8015bf4:	4b25      	ldr	r3, [pc, #148]	@ (8015c8c <xTaskNotifyWait+0xb8>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8015bfc:	68fa      	ldr	r2, [r7, #12]
 8015bfe:	43d2      	mvns	r2, r2
 8015c00:	400a      	ands	r2, r1
 8015c02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015c06:	4b21      	ldr	r3, [pc, #132]	@ (8015c8c <xTaskNotifyWait+0xb8>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	2201      	movs	r2, #1
 8015c0c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d00b      	beq.n	8015c2e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015c16:	2101      	movs	r1, #1
 8015c18:	6838      	ldr	r0, [r7, #0]
 8015c1a:	f000 f9f1 	bl	8016000 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8015c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8015c90 <xTaskNotifyWait+0xbc>)
 8015c20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015c24:	601a      	str	r2, [r3, #0]
 8015c26:	f3bf 8f4f 	dsb	sy
 8015c2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015c2e:	f000 feeb 	bl	8016a08 <vPortExitCritical>

		taskENTER_CRITICAL();
 8015c32:	f000 feb3 	bl	801699c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d005      	beq.n	8015c48 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8015c3c:	4b13      	ldr	r3, [pc, #76]	@ (8015c8c <xTaskNotifyWait+0xb8>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8015c48:	4b10      	ldr	r3, [pc, #64]	@ (8015c8c <xTaskNotifyWait+0xb8>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	2b02      	cmp	r3, #2
 8015c54:	d002      	beq.n	8015c5c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8015c56:	2300      	movs	r3, #0
 8015c58:	617b      	str	r3, [r7, #20]
 8015c5a:	e00a      	b.n	8015c72 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8015c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8015c8c <xTaskNotifyWait+0xb8>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8015c64:	68ba      	ldr	r2, [r7, #8]
 8015c66:	43d2      	mvns	r2, r2
 8015c68:	400a      	ands	r2, r1
 8015c6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8015c6e:	2301      	movs	r3, #1
 8015c70:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015c72:	4b06      	ldr	r3, [pc, #24]	@ (8015c8c <xTaskNotifyWait+0xb8>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	2200      	movs	r2, #0
 8015c78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8015c7c:	f000 fec4 	bl	8016a08 <vPortExitCritical>

		return xReturn;
 8015c80:	697b      	ldr	r3, [r7, #20]
	}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3718      	adds	r7, #24
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	200054ac 	.word	0x200054ac
 8015c90:	e000ed04 	.word	0xe000ed04

08015c94 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b08a      	sub	sp, #40	@ 0x28
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	60f8      	str	r0, [r7, #12]
 8015c9c:	60b9      	str	r1, [r7, #8]
 8015c9e:	603b      	str	r3, [r7, #0]
 8015ca0:	4613      	mov	r3, r2
 8015ca2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d10d      	bne.n	8015cca <xTaskGenericNotify+0x36>
	__asm volatile
 8015cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cb2:	b672      	cpsid	i
 8015cb4:	f383 8811 	msr	BASEPRI, r3
 8015cb8:	f3bf 8f6f 	isb	sy
 8015cbc:	f3bf 8f4f 	dsb	sy
 8015cc0:	b662      	cpsie	i
 8015cc2:	61bb      	str	r3, [r7, #24]
}
 8015cc4:	bf00      	nop
 8015cc6:	bf00      	nop
 8015cc8:	e7fd      	b.n	8015cc6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8015cce:	f000 fe65 	bl	801699c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d004      	beq.n	8015ce2 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015cd8:	6a3b      	ldr	r3, [r7, #32]
 8015cda:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015ce2:	6a3b      	ldr	r3, [r7, #32]
 8015ce4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015ce8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015cea:	6a3b      	ldr	r3, [r7, #32]
 8015cec:	2202      	movs	r2, #2
 8015cee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8015cf2:	79fb      	ldrb	r3, [r7, #7]
 8015cf4:	2b04      	cmp	r3, #4
 8015cf6:	d82e      	bhi.n	8015d56 <xTaskGenericNotify+0xc2>
 8015cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8015d00 <xTaskGenericNotify+0x6c>)
 8015cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cfe:	bf00      	nop
 8015d00:	08015d7f 	.word	0x08015d7f
 8015d04:	08015d15 	.word	0x08015d15
 8015d08:	08015d27 	.word	0x08015d27
 8015d0c:	08015d37 	.word	0x08015d37
 8015d10:	08015d41 	.word	0x08015d41
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8015d14:	6a3b      	ldr	r3, [r7, #32]
 8015d16:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	431a      	orrs	r2, r3
 8015d1e:	6a3b      	ldr	r3, [r7, #32]
 8015d20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015d24:	e02e      	b.n	8015d84 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8015d26:	6a3b      	ldr	r3, [r7, #32]
 8015d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015d2c:	1c5a      	adds	r2, r3, #1
 8015d2e:	6a3b      	ldr	r3, [r7, #32]
 8015d30:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015d34:	e026      	b.n	8015d84 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8015d36:	6a3b      	ldr	r3, [r7, #32]
 8015d38:	68ba      	ldr	r2, [r7, #8]
 8015d3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015d3e:	e021      	b.n	8015d84 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015d40:	7ffb      	ldrb	r3, [r7, #31]
 8015d42:	2b02      	cmp	r3, #2
 8015d44:	d004      	beq.n	8015d50 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8015d46:	6a3b      	ldr	r3, [r7, #32]
 8015d48:	68ba      	ldr	r2, [r7, #8]
 8015d4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015d4e:	e019      	b.n	8015d84 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8015d50:	2300      	movs	r3, #0
 8015d52:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8015d54:	e016      	b.n	8015d84 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8015d56:	6a3b      	ldr	r3, [r7, #32]
 8015d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d60:	d00f      	beq.n	8015d82 <xTaskGenericNotify+0xee>
	__asm volatile
 8015d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d66:	b672      	cpsid	i
 8015d68:	f383 8811 	msr	BASEPRI, r3
 8015d6c:	f3bf 8f6f 	isb	sy
 8015d70:	f3bf 8f4f 	dsb	sy
 8015d74:	b662      	cpsie	i
 8015d76:	617b      	str	r3, [r7, #20]
}
 8015d78:	bf00      	nop
 8015d7a:	bf00      	nop
 8015d7c:	e7fd      	b.n	8015d7a <xTaskGenericNotify+0xe6>
					break;
 8015d7e:	bf00      	nop
 8015d80:	e000      	b.n	8015d84 <xTaskGenericNotify+0xf0>

					break;
 8015d82:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015d84:	7ffb      	ldrb	r3, [r7, #31]
 8015d86:	2b01      	cmp	r3, #1
 8015d88:	d13d      	bne.n	8015e06 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015d8a:	6a3b      	ldr	r3, [r7, #32]
 8015d8c:	3304      	adds	r3, #4
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f7fd fe97 	bl	8013ac2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8015d94:	6a3b      	ldr	r3, [r7, #32]
 8015d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d98:	4b1e      	ldr	r3, [pc, #120]	@ (8015e14 <xTaskGenericNotify+0x180>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d903      	bls.n	8015da8 <xTaskGenericNotify+0x114>
 8015da0:	6a3b      	ldr	r3, [r7, #32]
 8015da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015da4:	4a1b      	ldr	r2, [pc, #108]	@ (8015e14 <xTaskGenericNotify+0x180>)
 8015da6:	6013      	str	r3, [r2, #0]
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015dac:	4613      	mov	r3, r2
 8015dae:	009b      	lsls	r3, r3, #2
 8015db0:	4413      	add	r3, r2
 8015db2:	009b      	lsls	r3, r3, #2
 8015db4:	4a18      	ldr	r2, [pc, #96]	@ (8015e18 <xTaskGenericNotify+0x184>)
 8015db6:	441a      	add	r2, r3
 8015db8:	6a3b      	ldr	r3, [r7, #32]
 8015dba:	3304      	adds	r3, #4
 8015dbc:	4619      	mov	r1, r3
 8015dbe:	4610      	mov	r0, r2
 8015dc0:	f7fd fe22 	bl	8013a08 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015dc4:	6a3b      	ldr	r3, [r7, #32]
 8015dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d00d      	beq.n	8015de8 <xTaskGenericNotify+0x154>
	__asm volatile
 8015dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dd0:	b672      	cpsid	i
 8015dd2:	f383 8811 	msr	BASEPRI, r3
 8015dd6:	f3bf 8f6f 	isb	sy
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	b662      	cpsie	i
 8015de0:	613b      	str	r3, [r7, #16]
}
 8015de2:	bf00      	nop
 8015de4:	bf00      	nop
 8015de6:	e7fd      	b.n	8015de4 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015de8:	6a3b      	ldr	r3, [r7, #32]
 8015dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015dec:	4b0b      	ldr	r3, [pc, #44]	@ (8015e1c <xTaskGenericNotify+0x188>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d907      	bls.n	8015e06 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8015df6:	4b0a      	ldr	r3, [pc, #40]	@ (8015e20 <xTaskGenericNotify+0x18c>)
 8015df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015dfc:	601a      	str	r2, [r3, #0]
 8015dfe:	f3bf 8f4f 	dsb	sy
 8015e02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015e06:	f000 fdff 	bl	8016a08 <vPortExitCritical>

		return xReturn;
 8015e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	3728      	adds	r7, #40	@ 0x28
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	20005988 	.word	0x20005988
 8015e18:	200054b0 	.word	0x200054b0
 8015e1c:	200054ac 	.word	0x200054ac
 8015e20:	e000ed04 	.word	0xe000ed04

08015e24 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b08e      	sub	sp, #56	@ 0x38
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	60f8      	str	r0, [r7, #12]
 8015e2c:	60b9      	str	r1, [r7, #8]
 8015e2e:	603b      	str	r3, [r7, #0]
 8015e30:	4613      	mov	r3, r2
 8015e32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8015e34:	2301      	movs	r3, #1
 8015e36:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d10d      	bne.n	8015e5a <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8015e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e42:	b672      	cpsid	i
 8015e44:	f383 8811 	msr	BASEPRI, r3
 8015e48:	f3bf 8f6f 	isb	sy
 8015e4c:	f3bf 8f4f 	dsb	sy
 8015e50:	b662      	cpsie	i
 8015e52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015e54:	bf00      	nop
 8015e56:	bf00      	nop
 8015e58:	e7fd      	b.n	8015e56 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e5a:	f000 fe87 	bl	8016b6c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8015e62:	f3ef 8211 	mrs	r2, BASEPRI
 8015e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e6a:	b672      	cpsid	i
 8015e6c:	f383 8811 	msr	BASEPRI, r3
 8015e70:	f3bf 8f6f 	isb	sy
 8015e74:	f3bf 8f4f 	dsb	sy
 8015e78:	b662      	cpsie	i
 8015e7a:	623a      	str	r2, [r7, #32]
 8015e7c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8015e7e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d004      	beq.n	8015e92 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e8a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015e8e:	683b      	ldr	r3, [r7, #0]
 8015e90:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e94:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015e98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e9e:	2202      	movs	r2, #2
 8015ea0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8015ea4:	79fb      	ldrb	r3, [r7, #7]
 8015ea6:	2b04      	cmp	r3, #4
 8015ea8:	d82e      	bhi.n	8015f08 <xTaskGenericNotifyFromISR+0xe4>
 8015eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8015eb0 <xTaskGenericNotifyFromISR+0x8c>)
 8015eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eb0:	08015f31 	.word	0x08015f31
 8015eb4:	08015ec5 	.word	0x08015ec5
 8015eb8:	08015ed7 	.word	0x08015ed7
 8015ebc:	08015ee7 	.word	0x08015ee7
 8015ec0:	08015ef1 	.word	0x08015ef1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8015ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ec6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015eca:	68bb      	ldr	r3, [r7, #8]
 8015ecc:	431a      	orrs	r2, r3
 8015ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ed0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015ed4:	e02f      	b.n	8015f36 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8015ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ed8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015edc:	1c5a      	adds	r2, r3, #1
 8015ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ee0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015ee4:	e027      	b.n	8015f36 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8015ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ee8:	68ba      	ldr	r2, [r7, #8]
 8015eea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015eee:	e022      	b.n	8015f36 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015ef4:	2b02      	cmp	r3, #2
 8015ef6:	d004      	beq.n	8015f02 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8015ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015efa:	68ba      	ldr	r2, [r7, #8]
 8015efc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015f00:	e019      	b.n	8015f36 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8015f02:	2300      	movs	r3, #0
 8015f04:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8015f06:	e016      	b.n	8015f36 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8015f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f12:	d00f      	beq.n	8015f34 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8015f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f18:	b672      	cpsid	i
 8015f1a:	f383 8811 	msr	BASEPRI, r3
 8015f1e:	f3bf 8f6f 	isb	sy
 8015f22:	f3bf 8f4f 	dsb	sy
 8015f26:	b662      	cpsie	i
 8015f28:	61bb      	str	r3, [r7, #24]
}
 8015f2a:	bf00      	nop
 8015f2c:	bf00      	nop
 8015f2e:	e7fd      	b.n	8015f2c <xTaskGenericNotifyFromISR+0x108>
					break;
 8015f30:	bf00      	nop
 8015f32:	e000      	b.n	8015f36 <xTaskGenericNotifyFromISR+0x112>
					break;
 8015f34:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015f36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015f3a:	2b01      	cmp	r3, #1
 8015f3c:	d149      	bne.n	8015fd2 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d00d      	beq.n	8015f62 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8015f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f4a:	b672      	cpsid	i
 8015f4c:	f383 8811 	msr	BASEPRI, r3
 8015f50:	f3bf 8f6f 	isb	sy
 8015f54:	f3bf 8f4f 	dsb	sy
 8015f58:	b662      	cpsie	i
 8015f5a:	617b      	str	r3, [r7, #20]
}
 8015f5c:	bf00      	nop
 8015f5e:	bf00      	nop
 8015f60:	e7fd      	b.n	8015f5e <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f62:	4b21      	ldr	r3, [pc, #132]	@ (8015fe8 <xTaskGenericNotifyFromISR+0x1c4>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d11d      	bne.n	8015fa6 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f6c:	3304      	adds	r3, #4
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7fd fda7 	bl	8013ac2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f78:	4b1c      	ldr	r3, [pc, #112]	@ (8015fec <xTaskGenericNotifyFromISR+0x1c8>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d903      	bls.n	8015f88 <xTaskGenericNotifyFromISR+0x164>
 8015f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f84:	4a19      	ldr	r2, [pc, #100]	@ (8015fec <xTaskGenericNotifyFromISR+0x1c8>)
 8015f86:	6013      	str	r3, [r2, #0]
 8015f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f8c:	4613      	mov	r3, r2
 8015f8e:	009b      	lsls	r3, r3, #2
 8015f90:	4413      	add	r3, r2
 8015f92:	009b      	lsls	r3, r3, #2
 8015f94:	4a16      	ldr	r2, [pc, #88]	@ (8015ff0 <xTaskGenericNotifyFromISR+0x1cc>)
 8015f96:	441a      	add	r2, r3
 8015f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f9a:	3304      	adds	r3, #4
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	4610      	mov	r0, r2
 8015fa0:	f7fd fd32 	bl	8013a08 <vListInsertEnd>
 8015fa4:	e005      	b.n	8015fb2 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa8:	3318      	adds	r3, #24
 8015faa:	4619      	mov	r1, r3
 8015fac:	4811      	ldr	r0, [pc, #68]	@ (8015ff4 <xTaskGenericNotifyFromISR+0x1d0>)
 8015fae:	f7fd fd2b 	bl	8013a08 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fb6:	4b10      	ldr	r3, [pc, #64]	@ (8015ff8 <xTaskGenericNotifyFromISR+0x1d4>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	d908      	bls.n	8015fd2 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8015fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d002      	beq.n	8015fcc <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fc8:	2201      	movs	r2, #1
 8015fca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8015fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8015ffc <xTaskGenericNotifyFromISR+0x1d8>)
 8015fce:	2201      	movs	r2, #1
 8015fd0:	601a      	str	r2, [r3, #0]
 8015fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	f383 8811 	msr	BASEPRI, r3
}
 8015fdc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8015fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	3738      	adds	r7, #56	@ 0x38
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}
 8015fe8:	200059a8 	.word	0x200059a8
 8015fec:	20005988 	.word	0x20005988
 8015ff0:	200054b0 	.word	0x200054b0
 8015ff4:	20005940 	.word	0x20005940
 8015ff8:	200054ac 	.word	0x200054ac
 8015ffc:	20005994 	.word	0x20005994

08016000 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801600a:	4b21      	ldr	r3, [pc, #132]	@ (8016090 <prvAddCurrentTaskToDelayedList+0x90>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016010:	4b20      	ldr	r3, [pc, #128]	@ (8016094 <prvAddCurrentTaskToDelayedList+0x94>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	3304      	adds	r3, #4
 8016016:	4618      	mov	r0, r3
 8016018:	f7fd fd53 	bl	8013ac2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016022:	d10a      	bne.n	801603a <prvAddCurrentTaskToDelayedList+0x3a>
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d007      	beq.n	801603a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801602a:	4b1a      	ldr	r3, [pc, #104]	@ (8016094 <prvAddCurrentTaskToDelayedList+0x94>)
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	3304      	adds	r3, #4
 8016030:	4619      	mov	r1, r3
 8016032:	4819      	ldr	r0, [pc, #100]	@ (8016098 <prvAddCurrentTaskToDelayedList+0x98>)
 8016034:	f7fd fce8 	bl	8013a08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016038:	e026      	b.n	8016088 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	4413      	add	r3, r2
 8016040:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016042:	4b14      	ldr	r3, [pc, #80]	@ (8016094 <prvAddCurrentTaskToDelayedList+0x94>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	68ba      	ldr	r2, [r7, #8]
 8016048:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801604a:	68ba      	ldr	r2, [r7, #8]
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	429a      	cmp	r2, r3
 8016050:	d209      	bcs.n	8016066 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016052:	4b12      	ldr	r3, [pc, #72]	@ (801609c <prvAddCurrentTaskToDelayedList+0x9c>)
 8016054:	681a      	ldr	r2, [r3, #0]
 8016056:	4b0f      	ldr	r3, [pc, #60]	@ (8016094 <prvAddCurrentTaskToDelayedList+0x94>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	3304      	adds	r3, #4
 801605c:	4619      	mov	r1, r3
 801605e:	4610      	mov	r0, r2
 8016060:	f7fd fcf6 	bl	8013a50 <vListInsert>
}
 8016064:	e010      	b.n	8016088 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016066:	4b0e      	ldr	r3, [pc, #56]	@ (80160a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016068:	681a      	ldr	r2, [r3, #0]
 801606a:	4b0a      	ldr	r3, [pc, #40]	@ (8016094 <prvAddCurrentTaskToDelayedList+0x94>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	3304      	adds	r3, #4
 8016070:	4619      	mov	r1, r3
 8016072:	4610      	mov	r0, r2
 8016074:	f7fd fcec 	bl	8013a50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016078:	4b0a      	ldr	r3, [pc, #40]	@ (80160a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	68ba      	ldr	r2, [r7, #8]
 801607e:	429a      	cmp	r2, r3
 8016080:	d202      	bcs.n	8016088 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016082:	4a08      	ldr	r2, [pc, #32]	@ (80160a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	6013      	str	r3, [r2, #0]
}
 8016088:	bf00      	nop
 801608a:	3710      	adds	r7, #16
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}
 8016090:	20005984 	.word	0x20005984
 8016094:	200054ac 	.word	0x200054ac
 8016098:	2000596c 	.word	0x2000596c
 801609c:	2000593c 	.word	0x2000593c
 80160a0:	20005938 	.word	0x20005938
 80160a4:	200059a0 	.word	0x200059a0

080160a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b08a      	sub	sp, #40	@ 0x28
 80160ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80160ae:	2300      	movs	r3, #0
 80160b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80160b2:	f000 fb21 	bl	80166f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80160b6:	4b1e      	ldr	r3, [pc, #120]	@ (8016130 <xTimerCreateTimerTask+0x88>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d021      	beq.n	8016102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80160be:	2300      	movs	r3, #0
 80160c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80160c2:	2300      	movs	r3, #0
 80160c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80160c6:	1d3a      	adds	r2, r7, #4
 80160c8:	f107 0108 	add.w	r1, r7, #8
 80160cc:	f107 030c 	add.w	r3, r7, #12
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7fd fa37 	bl	8013544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80160d6:	6879      	ldr	r1, [r7, #4]
 80160d8:	68bb      	ldr	r3, [r7, #8]
 80160da:	68fa      	ldr	r2, [r7, #12]
 80160dc:	9202      	str	r2, [sp, #8]
 80160de:	9301      	str	r3, [sp, #4]
 80160e0:	2302      	movs	r3, #2
 80160e2:	9300      	str	r3, [sp, #0]
 80160e4:	2300      	movs	r3, #0
 80160e6:	460a      	mov	r2, r1
 80160e8:	4912      	ldr	r1, [pc, #72]	@ (8016134 <xTimerCreateTimerTask+0x8c>)
 80160ea:	4813      	ldr	r0, [pc, #76]	@ (8016138 <xTimerCreateTimerTask+0x90>)
 80160ec:	f7fe fc68 	bl	80149c0 <xTaskCreateStatic>
 80160f0:	4603      	mov	r3, r0
 80160f2:	4a12      	ldr	r2, [pc, #72]	@ (801613c <xTimerCreateTimerTask+0x94>)
 80160f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80160f6:	4b11      	ldr	r3, [pc, #68]	@ (801613c <xTimerCreateTimerTask+0x94>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d001      	beq.n	8016102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80160fe:	2301      	movs	r3, #1
 8016100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d10d      	bne.n	8016124 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8016108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801610c:	b672      	cpsid	i
 801610e:	f383 8811 	msr	BASEPRI, r3
 8016112:	f3bf 8f6f 	isb	sy
 8016116:	f3bf 8f4f 	dsb	sy
 801611a:	b662      	cpsie	i
 801611c:	613b      	str	r3, [r7, #16]
}
 801611e:	bf00      	nop
 8016120:	bf00      	nop
 8016122:	e7fd      	b.n	8016120 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8016124:	697b      	ldr	r3, [r7, #20]
}
 8016126:	4618      	mov	r0, r3
 8016128:	3718      	adds	r7, #24
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}
 801612e:	bf00      	nop
 8016130:	200059dc 	.word	0x200059dc
 8016134:	080185e8 	.word	0x080185e8
 8016138:	08016281 	.word	0x08016281
 801613c:	200059e0 	.word	0x200059e0

08016140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b08a      	sub	sp, #40	@ 0x28
 8016144:	af00      	add	r7, sp, #0
 8016146:	60f8      	str	r0, [r7, #12]
 8016148:	60b9      	str	r1, [r7, #8]
 801614a:	607a      	str	r2, [r7, #4]
 801614c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801614e:	2300      	movs	r3, #0
 8016150:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d10d      	bne.n	8016174 <xTimerGenericCommand+0x34>
	__asm volatile
 8016158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801615c:	b672      	cpsid	i
 801615e:	f383 8811 	msr	BASEPRI, r3
 8016162:	f3bf 8f6f 	isb	sy
 8016166:	f3bf 8f4f 	dsb	sy
 801616a:	b662      	cpsie	i
 801616c:	623b      	str	r3, [r7, #32]
}
 801616e:	bf00      	nop
 8016170:	bf00      	nop
 8016172:	e7fd      	b.n	8016170 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016174:	4b19      	ldr	r3, [pc, #100]	@ (80161dc <xTimerGenericCommand+0x9c>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d02a      	beq.n	80161d2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	2b05      	cmp	r3, #5
 801618c:	dc18      	bgt.n	80161c0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801618e:	f7ff fb73 	bl	8015878 <xTaskGetSchedulerState>
 8016192:	4603      	mov	r3, r0
 8016194:	2b02      	cmp	r3, #2
 8016196:	d109      	bne.n	80161ac <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016198:	4b10      	ldr	r3, [pc, #64]	@ (80161dc <xTimerGenericCommand+0x9c>)
 801619a:	6818      	ldr	r0, [r3, #0]
 801619c:	f107 0110 	add.w	r1, r7, #16
 80161a0:	2300      	movs	r3, #0
 80161a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161a4:	f7fd fe40 	bl	8013e28 <xQueueGenericSend>
 80161a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80161aa:	e012      	b.n	80161d2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80161ac:	4b0b      	ldr	r3, [pc, #44]	@ (80161dc <xTimerGenericCommand+0x9c>)
 80161ae:	6818      	ldr	r0, [r3, #0]
 80161b0:	f107 0110 	add.w	r1, r7, #16
 80161b4:	2300      	movs	r3, #0
 80161b6:	2200      	movs	r2, #0
 80161b8:	f7fd fe36 	bl	8013e28 <xQueueGenericSend>
 80161bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80161be:	e008      	b.n	80161d2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80161c0:	4b06      	ldr	r3, [pc, #24]	@ (80161dc <xTimerGenericCommand+0x9c>)
 80161c2:	6818      	ldr	r0, [r3, #0]
 80161c4:	f107 0110 	add.w	r1, r7, #16
 80161c8:	2300      	movs	r3, #0
 80161ca:	683a      	ldr	r2, [r7, #0]
 80161cc:	f7fd ff36 	bl	801403c <xQueueGenericSendFromISR>
 80161d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80161d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3728      	adds	r7, #40	@ 0x28
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	200059dc 	.word	0x200059dc

080161e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b088      	sub	sp, #32
 80161e4:	af02      	add	r7, sp, #8
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161ea:	4b24      	ldr	r3, [pc, #144]	@ (801627c <prvProcessExpiredTimer+0x9c>)
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	68db      	ldr	r3, [r3, #12]
 80161f0:	68db      	ldr	r3, [r3, #12]
 80161f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80161f4:	697b      	ldr	r3, [r7, #20]
 80161f6:	3304      	adds	r3, #4
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7fd fc62 	bl	8013ac2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80161fe:	697b      	ldr	r3, [r7, #20]
 8016200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016204:	f003 0304 	and.w	r3, r3, #4
 8016208:	2b00      	cmp	r3, #0
 801620a:	d025      	beq.n	8016258 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801620c:	697b      	ldr	r3, [r7, #20]
 801620e:	699a      	ldr	r2, [r3, #24]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	18d1      	adds	r1, r2, r3
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	683a      	ldr	r2, [r7, #0]
 8016218:	6978      	ldr	r0, [r7, #20]
 801621a:	f000 f8d7 	bl	80163cc <prvInsertTimerInActiveList>
 801621e:	4603      	mov	r3, r0
 8016220:	2b00      	cmp	r3, #0
 8016222:	d022      	beq.n	801626a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016224:	2300      	movs	r3, #0
 8016226:	9300      	str	r3, [sp, #0]
 8016228:	2300      	movs	r3, #0
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	2100      	movs	r1, #0
 801622e:	6978      	ldr	r0, [r7, #20]
 8016230:	f7ff ff86 	bl	8016140 <xTimerGenericCommand>
 8016234:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d116      	bne.n	801626a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 801623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016240:	b672      	cpsid	i
 8016242:	f383 8811 	msr	BASEPRI, r3
 8016246:	f3bf 8f6f 	isb	sy
 801624a:	f3bf 8f4f 	dsb	sy
 801624e:	b662      	cpsie	i
 8016250:	60fb      	str	r3, [r7, #12]
}
 8016252:	bf00      	nop
 8016254:	bf00      	nop
 8016256:	e7fd      	b.n	8016254 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016258:	697b      	ldr	r3, [r7, #20]
 801625a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801625e:	f023 0301 	bic.w	r3, r3, #1
 8016262:	b2da      	uxtb	r2, r3
 8016264:	697b      	ldr	r3, [r7, #20]
 8016266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	6a1b      	ldr	r3, [r3, #32]
 801626e:	6978      	ldr	r0, [r7, #20]
 8016270:	4798      	blx	r3
}
 8016272:	bf00      	nop
 8016274:	3718      	adds	r7, #24
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	200059d4 	.word	0x200059d4

08016280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b084      	sub	sp, #16
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016288:	f107 0308 	add.w	r3, r7, #8
 801628c:	4618      	mov	r0, r3
 801628e:	f000 f859 	bl	8016344 <prvGetNextExpireTime>
 8016292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	4619      	mov	r1, r3
 8016298:	68f8      	ldr	r0, [r7, #12]
 801629a:	f000 f805 	bl	80162a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801629e:	f000 f8d7 	bl	8016450 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80162a2:	bf00      	nop
 80162a4:	e7f0      	b.n	8016288 <prvTimerTask+0x8>
	...

080162a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80162b2:	f7fe fdf7 	bl	8014ea4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80162b6:	f107 0308 	add.w	r3, r7, #8
 80162ba:	4618      	mov	r0, r3
 80162bc:	f000 f866 	bl	801638c <prvSampleTimeNow>
 80162c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d130      	bne.n	801632a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d10a      	bne.n	80162e4 <prvProcessTimerOrBlockTask+0x3c>
 80162ce:	687a      	ldr	r2, [r7, #4]
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d806      	bhi.n	80162e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80162d6:	f7fe fdf3 	bl	8014ec0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80162da:	68f9      	ldr	r1, [r7, #12]
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f7ff ff7f 	bl	80161e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80162e2:	e024      	b.n	801632e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d008      	beq.n	80162fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80162ea:	4b13      	ldr	r3, [pc, #76]	@ (8016338 <prvProcessTimerOrBlockTask+0x90>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d101      	bne.n	80162f8 <prvProcessTimerOrBlockTask+0x50>
 80162f4:	2301      	movs	r3, #1
 80162f6:	e000      	b.n	80162fa <prvProcessTimerOrBlockTask+0x52>
 80162f8:	2300      	movs	r3, #0
 80162fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80162fc:	4b0f      	ldr	r3, [pc, #60]	@ (801633c <prvProcessTimerOrBlockTask+0x94>)
 80162fe:	6818      	ldr	r0, [r3, #0]
 8016300:	687a      	ldr	r2, [r7, #4]
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	1ad3      	subs	r3, r2, r3
 8016306:	683a      	ldr	r2, [r7, #0]
 8016308:	4619      	mov	r1, r3
 801630a:	f7fe fb25 	bl	8014958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801630e:	f7fe fdd7 	bl	8014ec0 <xTaskResumeAll>
 8016312:	4603      	mov	r3, r0
 8016314:	2b00      	cmp	r3, #0
 8016316:	d10a      	bne.n	801632e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016318:	4b09      	ldr	r3, [pc, #36]	@ (8016340 <prvProcessTimerOrBlockTask+0x98>)
 801631a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801631e:	601a      	str	r2, [r3, #0]
 8016320:	f3bf 8f4f 	dsb	sy
 8016324:	f3bf 8f6f 	isb	sy
}
 8016328:	e001      	b.n	801632e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801632a:	f7fe fdc9 	bl	8014ec0 <xTaskResumeAll>
}
 801632e:	bf00      	nop
 8016330:	3710      	adds	r7, #16
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
 8016336:	bf00      	nop
 8016338:	200059d8 	.word	0x200059d8
 801633c:	200059dc 	.word	0x200059dc
 8016340:	e000ed04 	.word	0xe000ed04

08016344 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016344:	b480      	push	{r7}
 8016346:	b085      	sub	sp, #20
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801634c:	4b0e      	ldr	r3, [pc, #56]	@ (8016388 <prvGetNextExpireTime+0x44>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d101      	bne.n	801635a <prvGetNextExpireTime+0x16>
 8016356:	2201      	movs	r2, #1
 8016358:	e000      	b.n	801635c <prvGetNextExpireTime+0x18>
 801635a:	2200      	movs	r2, #0
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d105      	bne.n	8016374 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016368:	4b07      	ldr	r3, [pc, #28]	@ (8016388 <prvGetNextExpireTime+0x44>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	60fb      	str	r3, [r7, #12]
 8016372:	e001      	b.n	8016378 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016374:	2300      	movs	r3, #0
 8016376:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016378:	68fb      	ldr	r3, [r7, #12]
}
 801637a:	4618      	mov	r0, r3
 801637c:	3714      	adds	r7, #20
 801637e:	46bd      	mov	sp, r7
 8016380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016384:	4770      	bx	lr
 8016386:	bf00      	nop
 8016388:	200059d4 	.word	0x200059d4

0801638c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b084      	sub	sp, #16
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016394:	f7fe fe34 	bl	8015000 <xTaskGetTickCount>
 8016398:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801639a:	4b0b      	ldr	r3, [pc, #44]	@ (80163c8 <prvSampleTimeNow+0x3c>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	68fa      	ldr	r2, [r7, #12]
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d205      	bcs.n	80163b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80163a4:	f000 f940 	bl	8016628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2201      	movs	r2, #1
 80163ac:	601a      	str	r2, [r3, #0]
 80163ae:	e002      	b.n	80163b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2200      	movs	r2, #0
 80163b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80163b6:	4a04      	ldr	r2, [pc, #16]	@ (80163c8 <prvSampleTimeNow+0x3c>)
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80163bc:	68fb      	ldr	r3, [r7, #12]
}
 80163be:	4618      	mov	r0, r3
 80163c0:	3710      	adds	r7, #16
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	200059e4 	.word	0x200059e4

080163cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b086      	sub	sp, #24
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	607a      	str	r2, [r7, #4]
 80163d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80163da:	2300      	movs	r3, #0
 80163dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	68ba      	ldr	r2, [r7, #8]
 80163e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	68fa      	ldr	r2, [r7, #12]
 80163e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80163ea:	68ba      	ldr	r2, [r7, #8]
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d812      	bhi.n	8016418 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163f2:	687a      	ldr	r2, [r7, #4]
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	1ad2      	subs	r2, r2, r3
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	699b      	ldr	r3, [r3, #24]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d302      	bcc.n	8016406 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016400:	2301      	movs	r3, #1
 8016402:	617b      	str	r3, [r7, #20]
 8016404:	e01b      	b.n	801643e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016406:	4b10      	ldr	r3, [pc, #64]	@ (8016448 <prvInsertTimerInActiveList+0x7c>)
 8016408:	681a      	ldr	r2, [r3, #0]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	3304      	adds	r3, #4
 801640e:	4619      	mov	r1, r3
 8016410:	4610      	mov	r0, r2
 8016412:	f7fd fb1d 	bl	8013a50 <vListInsert>
 8016416:	e012      	b.n	801643e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016418:	687a      	ldr	r2, [r7, #4]
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	429a      	cmp	r2, r3
 801641e:	d206      	bcs.n	801642e <prvInsertTimerInActiveList+0x62>
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	429a      	cmp	r2, r3
 8016426:	d302      	bcc.n	801642e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016428:	2301      	movs	r3, #1
 801642a:	617b      	str	r3, [r7, #20]
 801642c:	e007      	b.n	801643e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801642e:	4b07      	ldr	r3, [pc, #28]	@ (801644c <prvInsertTimerInActiveList+0x80>)
 8016430:	681a      	ldr	r2, [r3, #0]
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	3304      	adds	r3, #4
 8016436:	4619      	mov	r1, r3
 8016438:	4610      	mov	r0, r2
 801643a:	f7fd fb09 	bl	8013a50 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801643e:	697b      	ldr	r3, [r7, #20]
}
 8016440:	4618      	mov	r0, r3
 8016442:	3718      	adds	r7, #24
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}
 8016448:	200059d8 	.word	0x200059d8
 801644c:	200059d4 	.word	0x200059d4

08016450 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b08e      	sub	sp, #56	@ 0x38
 8016454:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016456:	e0d4      	b.n	8016602 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	da1b      	bge.n	8016496 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801645e:	1d3b      	adds	r3, r7, #4
 8016460:	3304      	adds	r3, #4
 8016462:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016466:	2b00      	cmp	r3, #0
 8016468:	d10d      	bne.n	8016486 <prvProcessReceivedCommands+0x36>
	__asm volatile
 801646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801646e:	b672      	cpsid	i
 8016470:	f383 8811 	msr	BASEPRI, r3
 8016474:	f3bf 8f6f 	isb	sy
 8016478:	f3bf 8f4f 	dsb	sy
 801647c:	b662      	cpsie	i
 801647e:	61fb      	str	r3, [r7, #28]
}
 8016480:	bf00      	nop
 8016482:	bf00      	nop
 8016484:	e7fd      	b.n	8016482 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801648c:	6850      	ldr	r0, [r2, #4]
 801648e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016490:	6892      	ldr	r2, [r2, #8]
 8016492:	4611      	mov	r1, r2
 8016494:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	2b00      	cmp	r3, #0
 801649a:	f2c0 80b2 	blt.w	8016602 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80164a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164a4:	695b      	ldr	r3, [r3, #20]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d004      	beq.n	80164b4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80164aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164ac:	3304      	adds	r3, #4
 80164ae:	4618      	mov	r0, r3
 80164b0:	f7fd fb07 	bl	8013ac2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80164b4:	463b      	mov	r3, r7
 80164b6:	4618      	mov	r0, r3
 80164b8:	f7ff ff68 	bl	801638c <prvSampleTimeNow>
 80164bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2b09      	cmp	r3, #9
 80164c2:	f200 809b 	bhi.w	80165fc <prvProcessReceivedCommands+0x1ac>
 80164c6:	a201      	add	r2, pc, #4	@ (adr r2, 80164cc <prvProcessReceivedCommands+0x7c>)
 80164c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164cc:	080164f5 	.word	0x080164f5
 80164d0:	080164f5 	.word	0x080164f5
 80164d4:	080164f5 	.word	0x080164f5
 80164d8:	0801656f 	.word	0x0801656f
 80164dc:	08016583 	.word	0x08016583
 80164e0:	080165d3 	.word	0x080165d3
 80164e4:	080164f5 	.word	0x080164f5
 80164e8:	080164f5 	.word	0x080164f5
 80164ec:	0801656f 	.word	0x0801656f
 80164f0:	08016583 	.word	0x08016583
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80164f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80164fa:	f043 0301 	orr.w	r3, r3, #1
 80164fe:	b2da      	uxtb	r2, r3
 8016500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016506:	68ba      	ldr	r2, [r7, #8]
 8016508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801650a:	699b      	ldr	r3, [r3, #24]
 801650c:	18d1      	adds	r1, r2, r3
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016514:	f7ff ff5a 	bl	80163cc <prvInsertTimerInActiveList>
 8016518:	4603      	mov	r3, r0
 801651a:	2b00      	cmp	r3, #0
 801651c:	d070      	beq.n	8016600 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016520:	6a1b      	ldr	r3, [r3, #32]
 8016522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016524:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801652c:	f003 0304 	and.w	r3, r3, #4
 8016530:	2b00      	cmp	r3, #0
 8016532:	d065      	beq.n	8016600 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016534:	68ba      	ldr	r2, [r7, #8]
 8016536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016538:	699b      	ldr	r3, [r3, #24]
 801653a:	441a      	add	r2, r3
 801653c:	2300      	movs	r3, #0
 801653e:	9300      	str	r3, [sp, #0]
 8016540:	2300      	movs	r3, #0
 8016542:	2100      	movs	r1, #0
 8016544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016546:	f7ff fdfb 	bl	8016140 <xTimerGenericCommand>
 801654a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801654c:	6a3b      	ldr	r3, [r7, #32]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d156      	bne.n	8016600 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8016552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016556:	b672      	cpsid	i
 8016558:	f383 8811 	msr	BASEPRI, r3
 801655c:	f3bf 8f6f 	isb	sy
 8016560:	f3bf 8f4f 	dsb	sy
 8016564:	b662      	cpsie	i
 8016566:	61bb      	str	r3, [r7, #24]
}
 8016568:	bf00      	nop
 801656a:	bf00      	nop
 801656c:	e7fd      	b.n	801656a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016574:	f023 0301 	bic.w	r3, r3, #1
 8016578:	b2da      	uxtb	r2, r3
 801657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801657c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016580:	e03f      	b.n	8016602 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016588:	f043 0301 	orr.w	r3, r3, #1
 801658c:	b2da      	uxtb	r2, r3
 801658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016594:	68ba      	ldr	r2, [r7, #8]
 8016596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016598:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801659c:	699b      	ldr	r3, [r3, #24]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d10d      	bne.n	80165be <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80165a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165a6:	b672      	cpsid	i
 80165a8:	f383 8811 	msr	BASEPRI, r3
 80165ac:	f3bf 8f6f 	isb	sy
 80165b0:	f3bf 8f4f 	dsb	sy
 80165b4:	b662      	cpsie	i
 80165b6:	617b      	str	r3, [r7, #20]
}
 80165b8:	bf00      	nop
 80165ba:	bf00      	nop
 80165bc:	e7fd      	b.n	80165ba <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80165be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165c0:	699a      	ldr	r2, [r3, #24]
 80165c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165c4:	18d1      	adds	r1, r2, r3
 80165c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80165cc:	f7ff fefe 	bl	80163cc <prvInsertTimerInActiveList>
					break;
 80165d0:	e017      	b.n	8016602 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80165d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80165d8:	f003 0302 	and.w	r3, r3, #2
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d103      	bne.n	80165e8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80165e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80165e2:	f000 fbd7 	bl	8016d94 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80165e6:	e00c      	b.n	8016602 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80165e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80165ee:	f023 0301 	bic.w	r3, r3, #1
 80165f2:	b2da      	uxtb	r2, r3
 80165f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80165fa:	e002      	b.n	8016602 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80165fc:	bf00      	nop
 80165fe:	e000      	b.n	8016602 <prvProcessReceivedCommands+0x1b2>
					break;
 8016600:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016602:	4b08      	ldr	r3, [pc, #32]	@ (8016624 <prvProcessReceivedCommands+0x1d4>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	1d39      	adds	r1, r7, #4
 8016608:	2200      	movs	r2, #0
 801660a:	4618      	mov	r0, r3
 801660c:	f7fd fdba 	bl	8014184 <xQueueReceive>
 8016610:	4603      	mov	r3, r0
 8016612:	2b00      	cmp	r3, #0
 8016614:	f47f af20 	bne.w	8016458 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8016618:	bf00      	nop
 801661a:	bf00      	nop
 801661c:	3730      	adds	r7, #48	@ 0x30
 801661e:	46bd      	mov	sp, r7
 8016620:	bd80      	pop	{r7, pc}
 8016622:	bf00      	nop
 8016624:	200059dc 	.word	0x200059dc

08016628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b088      	sub	sp, #32
 801662c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801662e:	e04b      	b.n	80166c8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016630:	4b2f      	ldr	r3, [pc, #188]	@ (80166f0 <prvSwitchTimerLists+0xc8>)
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	68db      	ldr	r3, [r3, #12]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801663a:	4b2d      	ldr	r3, [pc, #180]	@ (80166f0 <prvSwitchTimerLists+0xc8>)
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	68db      	ldr	r3, [r3, #12]
 8016640:	68db      	ldr	r3, [r3, #12]
 8016642:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	3304      	adds	r3, #4
 8016648:	4618      	mov	r0, r3
 801664a:	f7fd fa3a 	bl	8013ac2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	6a1b      	ldr	r3, [r3, #32]
 8016652:	68f8      	ldr	r0, [r7, #12]
 8016654:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801665c:	f003 0304 	and.w	r3, r3, #4
 8016660:	2b00      	cmp	r3, #0
 8016662:	d031      	beq.n	80166c8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	699b      	ldr	r3, [r3, #24]
 8016668:	693a      	ldr	r2, [r7, #16]
 801666a:	4413      	add	r3, r2
 801666c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801666e:	68ba      	ldr	r2, [r7, #8]
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	429a      	cmp	r2, r3
 8016674:	d90e      	bls.n	8016694 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	68ba      	ldr	r2, [r7, #8]
 801667a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	68fa      	ldr	r2, [r7, #12]
 8016680:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016682:	4b1b      	ldr	r3, [pc, #108]	@ (80166f0 <prvSwitchTimerLists+0xc8>)
 8016684:	681a      	ldr	r2, [r3, #0]
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	3304      	adds	r3, #4
 801668a:	4619      	mov	r1, r3
 801668c:	4610      	mov	r0, r2
 801668e:	f7fd f9df 	bl	8013a50 <vListInsert>
 8016692:	e019      	b.n	80166c8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016694:	2300      	movs	r3, #0
 8016696:	9300      	str	r3, [sp, #0]
 8016698:	2300      	movs	r3, #0
 801669a:	693a      	ldr	r2, [r7, #16]
 801669c:	2100      	movs	r1, #0
 801669e:	68f8      	ldr	r0, [r7, #12]
 80166a0:	f7ff fd4e 	bl	8016140 <xTimerGenericCommand>
 80166a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10d      	bne.n	80166c8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80166ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166b0:	b672      	cpsid	i
 80166b2:	f383 8811 	msr	BASEPRI, r3
 80166b6:	f3bf 8f6f 	isb	sy
 80166ba:	f3bf 8f4f 	dsb	sy
 80166be:	b662      	cpsie	i
 80166c0:	603b      	str	r3, [r7, #0]
}
 80166c2:	bf00      	nop
 80166c4:	bf00      	nop
 80166c6:	e7fd      	b.n	80166c4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80166c8:	4b09      	ldr	r3, [pc, #36]	@ (80166f0 <prvSwitchTimerLists+0xc8>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d1ae      	bne.n	8016630 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80166d2:	4b07      	ldr	r3, [pc, #28]	@ (80166f0 <prvSwitchTimerLists+0xc8>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80166d8:	4b06      	ldr	r3, [pc, #24]	@ (80166f4 <prvSwitchTimerLists+0xcc>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	4a04      	ldr	r2, [pc, #16]	@ (80166f0 <prvSwitchTimerLists+0xc8>)
 80166de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80166e0:	4a04      	ldr	r2, [pc, #16]	@ (80166f4 <prvSwitchTimerLists+0xcc>)
 80166e2:	697b      	ldr	r3, [r7, #20]
 80166e4:	6013      	str	r3, [r2, #0]
}
 80166e6:	bf00      	nop
 80166e8:	3718      	adds	r7, #24
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	bf00      	nop
 80166f0:	200059d4 	.word	0x200059d4
 80166f4:	200059d8 	.word	0x200059d8

080166f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80166fe:	f000 f94d 	bl	801699c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016702:	4b15      	ldr	r3, [pc, #84]	@ (8016758 <prvCheckForValidListAndQueue+0x60>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d120      	bne.n	801674c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801670a:	4814      	ldr	r0, [pc, #80]	@ (801675c <prvCheckForValidListAndQueue+0x64>)
 801670c:	f7fd f94f 	bl	80139ae <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016710:	4813      	ldr	r0, [pc, #76]	@ (8016760 <prvCheckForValidListAndQueue+0x68>)
 8016712:	f7fd f94c 	bl	80139ae <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016716:	4b13      	ldr	r3, [pc, #76]	@ (8016764 <prvCheckForValidListAndQueue+0x6c>)
 8016718:	4a10      	ldr	r2, [pc, #64]	@ (801675c <prvCheckForValidListAndQueue+0x64>)
 801671a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801671c:	4b12      	ldr	r3, [pc, #72]	@ (8016768 <prvCheckForValidListAndQueue+0x70>)
 801671e:	4a10      	ldr	r2, [pc, #64]	@ (8016760 <prvCheckForValidListAndQueue+0x68>)
 8016720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016722:	2300      	movs	r3, #0
 8016724:	9300      	str	r3, [sp, #0]
 8016726:	4b11      	ldr	r3, [pc, #68]	@ (801676c <prvCheckForValidListAndQueue+0x74>)
 8016728:	4a11      	ldr	r2, [pc, #68]	@ (8016770 <prvCheckForValidListAndQueue+0x78>)
 801672a:	2110      	movs	r1, #16
 801672c:	200a      	movs	r0, #10
 801672e:	f7fd fa5f 	bl	8013bf0 <xQueueGenericCreateStatic>
 8016732:	4603      	mov	r3, r0
 8016734:	4a08      	ldr	r2, [pc, #32]	@ (8016758 <prvCheckForValidListAndQueue+0x60>)
 8016736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016738:	4b07      	ldr	r3, [pc, #28]	@ (8016758 <prvCheckForValidListAndQueue+0x60>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d005      	beq.n	801674c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016740:	4b05      	ldr	r3, [pc, #20]	@ (8016758 <prvCheckForValidListAndQueue+0x60>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	490b      	ldr	r1, [pc, #44]	@ (8016774 <prvCheckForValidListAndQueue+0x7c>)
 8016746:	4618      	mov	r0, r3
 8016748:	f7fe f8b2 	bl	80148b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801674c:	f000 f95c 	bl	8016a08 <vPortExitCritical>
}
 8016750:	bf00      	nop
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}
 8016756:	bf00      	nop
 8016758:	200059dc 	.word	0x200059dc
 801675c:	200059ac 	.word	0x200059ac
 8016760:	200059c0 	.word	0x200059c0
 8016764:	200059d4 	.word	0x200059d4
 8016768:	200059d8 	.word	0x200059d8
 801676c:	20005a88 	.word	0x20005a88
 8016770:	200059e8 	.word	0x200059e8
 8016774:	080185f0 	.word	0x080185f0

08016778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	60f8      	str	r0, [r7, #12]
 8016780:	60b9      	str	r1, [r7, #8]
 8016782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	3b04      	subs	r3, #4
 8016788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	3b04      	subs	r3, #4
 8016796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	f023 0201 	bic.w	r2, r3, #1
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	3b04      	subs	r3, #4
 80167a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80167a8:	4a0c      	ldr	r2, [pc, #48]	@ (80167dc <pxPortInitialiseStack+0x64>)
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	3b14      	subs	r3, #20
 80167b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	3b04      	subs	r3, #4
 80167be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	f06f 0202 	mvn.w	r2, #2
 80167c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	3b20      	subs	r3, #32
 80167cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80167ce:	68fb      	ldr	r3, [r7, #12]
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3714      	adds	r7, #20
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr
 80167dc:	080167e1 	.word	0x080167e1

080167e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80167e0:	b480      	push	{r7}
 80167e2:	b085      	sub	sp, #20
 80167e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80167e6:	2300      	movs	r3, #0
 80167e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80167ea:	4b15      	ldr	r3, [pc, #84]	@ (8016840 <prvTaskExitError+0x60>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167f2:	d00d      	beq.n	8016810 <prvTaskExitError+0x30>
	__asm volatile
 80167f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167f8:	b672      	cpsid	i
 80167fa:	f383 8811 	msr	BASEPRI, r3
 80167fe:	f3bf 8f6f 	isb	sy
 8016802:	f3bf 8f4f 	dsb	sy
 8016806:	b662      	cpsie	i
 8016808:	60fb      	str	r3, [r7, #12]
}
 801680a:	bf00      	nop
 801680c:	bf00      	nop
 801680e:	e7fd      	b.n	801680c <prvTaskExitError+0x2c>
	__asm volatile
 8016810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016814:	b672      	cpsid	i
 8016816:	f383 8811 	msr	BASEPRI, r3
 801681a:	f3bf 8f6f 	isb	sy
 801681e:	f3bf 8f4f 	dsb	sy
 8016822:	b662      	cpsie	i
 8016824:	60bb      	str	r3, [r7, #8]
}
 8016826:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016828:	bf00      	nop
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d0fc      	beq.n	801682a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016830:	bf00      	nop
 8016832:	bf00      	nop
 8016834:	3714      	adds	r7, #20
 8016836:	46bd      	mov	sp, r7
 8016838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop
 8016840:	2000001c 	.word	0x2000001c
	...

08016850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016850:	4b07      	ldr	r3, [pc, #28]	@ (8016870 <pxCurrentTCBConst2>)
 8016852:	6819      	ldr	r1, [r3, #0]
 8016854:	6808      	ldr	r0, [r1, #0]
 8016856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801685a:	f380 8809 	msr	PSP, r0
 801685e:	f3bf 8f6f 	isb	sy
 8016862:	f04f 0000 	mov.w	r0, #0
 8016866:	f380 8811 	msr	BASEPRI, r0
 801686a:	4770      	bx	lr
 801686c:	f3af 8000 	nop.w

08016870 <pxCurrentTCBConst2>:
 8016870:	200054ac 	.word	0x200054ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016874:	bf00      	nop
 8016876:	bf00      	nop

08016878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016878:	4808      	ldr	r0, [pc, #32]	@ (801689c <prvPortStartFirstTask+0x24>)
 801687a:	6800      	ldr	r0, [r0, #0]
 801687c:	6800      	ldr	r0, [r0, #0]
 801687e:	f380 8808 	msr	MSP, r0
 8016882:	f04f 0000 	mov.w	r0, #0
 8016886:	f380 8814 	msr	CONTROL, r0
 801688a:	b662      	cpsie	i
 801688c:	b661      	cpsie	f
 801688e:	f3bf 8f4f 	dsb	sy
 8016892:	f3bf 8f6f 	isb	sy
 8016896:	df00      	svc	0
 8016898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801689a:	bf00      	nop
 801689c:	e000ed08 	.word	0xe000ed08

080168a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80168a6:	4b37      	ldr	r3, [pc, #220]	@ (8016984 <xPortStartScheduler+0xe4>)
 80168a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	781b      	ldrb	r3, [r3, #0]
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	22ff      	movs	r2, #255	@ 0xff
 80168b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	b2db      	uxtb	r3, r3
 80168be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80168c0:	78fb      	ldrb	r3, [r7, #3]
 80168c2:	b2db      	uxtb	r3, r3
 80168c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80168c8:	b2da      	uxtb	r2, r3
 80168ca:	4b2f      	ldr	r3, [pc, #188]	@ (8016988 <xPortStartScheduler+0xe8>)
 80168cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80168ce:	4b2f      	ldr	r3, [pc, #188]	@ (801698c <xPortStartScheduler+0xec>)
 80168d0:	2207      	movs	r2, #7
 80168d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168d4:	e009      	b.n	80168ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80168d6:	4b2d      	ldr	r3, [pc, #180]	@ (801698c <xPortStartScheduler+0xec>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	3b01      	subs	r3, #1
 80168dc:	4a2b      	ldr	r2, [pc, #172]	@ (801698c <xPortStartScheduler+0xec>)
 80168de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80168e0:	78fb      	ldrb	r3, [r7, #3]
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	005b      	lsls	r3, r3, #1
 80168e6:	b2db      	uxtb	r3, r3
 80168e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168ea:	78fb      	ldrb	r3, [r7, #3]
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80168f2:	2b80      	cmp	r3, #128	@ 0x80
 80168f4:	d0ef      	beq.n	80168d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80168f6:	4b25      	ldr	r3, [pc, #148]	@ (801698c <xPortStartScheduler+0xec>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	f1c3 0307 	rsb	r3, r3, #7
 80168fe:	2b04      	cmp	r3, #4
 8016900:	d00d      	beq.n	801691e <xPortStartScheduler+0x7e>
	__asm volatile
 8016902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016906:	b672      	cpsid	i
 8016908:	f383 8811 	msr	BASEPRI, r3
 801690c:	f3bf 8f6f 	isb	sy
 8016910:	f3bf 8f4f 	dsb	sy
 8016914:	b662      	cpsie	i
 8016916:	60bb      	str	r3, [r7, #8]
}
 8016918:	bf00      	nop
 801691a:	bf00      	nop
 801691c:	e7fd      	b.n	801691a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801691e:	4b1b      	ldr	r3, [pc, #108]	@ (801698c <xPortStartScheduler+0xec>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	021b      	lsls	r3, r3, #8
 8016924:	4a19      	ldr	r2, [pc, #100]	@ (801698c <xPortStartScheduler+0xec>)
 8016926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016928:	4b18      	ldr	r3, [pc, #96]	@ (801698c <xPortStartScheduler+0xec>)
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016930:	4a16      	ldr	r2, [pc, #88]	@ (801698c <xPortStartScheduler+0xec>)
 8016932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	b2da      	uxtb	r2, r3
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801693c:	4b14      	ldr	r3, [pc, #80]	@ (8016990 <xPortStartScheduler+0xf0>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	4a13      	ldr	r2, [pc, #76]	@ (8016990 <xPortStartScheduler+0xf0>)
 8016942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016948:	4b11      	ldr	r3, [pc, #68]	@ (8016990 <xPortStartScheduler+0xf0>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	4a10      	ldr	r2, [pc, #64]	@ (8016990 <xPortStartScheduler+0xf0>)
 801694e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016954:	f000 f8dc 	bl	8016b10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016958:	4b0e      	ldr	r3, [pc, #56]	@ (8016994 <xPortStartScheduler+0xf4>)
 801695a:	2200      	movs	r2, #0
 801695c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801695e:	f000 f8fb 	bl	8016b58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016962:	4b0d      	ldr	r3, [pc, #52]	@ (8016998 <xPortStartScheduler+0xf8>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	4a0c      	ldr	r2, [pc, #48]	@ (8016998 <xPortStartScheduler+0xf8>)
 8016968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801696c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801696e:	f7ff ff83 	bl	8016878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016972:	f7fe fc11 	bl	8015198 <vTaskSwitchContext>
	prvTaskExitError();
 8016976:	f7ff ff33 	bl	80167e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801697a:	2300      	movs	r3, #0
}
 801697c:	4618      	mov	r0, r3
 801697e:	3710      	adds	r7, #16
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}
 8016984:	e000e400 	.word	0xe000e400
 8016988:	20005ad8 	.word	0x20005ad8
 801698c:	20005adc 	.word	0x20005adc
 8016990:	e000ed20 	.word	0xe000ed20
 8016994:	2000001c 	.word	0x2000001c
 8016998:	e000ef34 	.word	0xe000ef34

0801699c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801699c:	b480      	push	{r7}
 801699e:	b083      	sub	sp, #12
 80169a0:	af00      	add	r7, sp, #0
	__asm volatile
 80169a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169a6:	b672      	cpsid	i
 80169a8:	f383 8811 	msr	BASEPRI, r3
 80169ac:	f3bf 8f6f 	isb	sy
 80169b0:	f3bf 8f4f 	dsb	sy
 80169b4:	b662      	cpsie	i
 80169b6:	607b      	str	r3, [r7, #4]
}
 80169b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80169ba:	4b11      	ldr	r3, [pc, #68]	@ (8016a00 <vPortEnterCritical+0x64>)
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	3301      	adds	r3, #1
 80169c0:	4a0f      	ldr	r2, [pc, #60]	@ (8016a00 <vPortEnterCritical+0x64>)
 80169c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80169c4:	4b0e      	ldr	r3, [pc, #56]	@ (8016a00 <vPortEnterCritical+0x64>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	2b01      	cmp	r3, #1
 80169ca:	d112      	bne.n	80169f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80169cc:	4b0d      	ldr	r3, [pc, #52]	@ (8016a04 <vPortEnterCritical+0x68>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	b2db      	uxtb	r3, r3
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d00d      	beq.n	80169f2 <vPortEnterCritical+0x56>
	__asm volatile
 80169d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169da:	b672      	cpsid	i
 80169dc:	f383 8811 	msr	BASEPRI, r3
 80169e0:	f3bf 8f6f 	isb	sy
 80169e4:	f3bf 8f4f 	dsb	sy
 80169e8:	b662      	cpsie	i
 80169ea:	603b      	str	r3, [r7, #0]
}
 80169ec:	bf00      	nop
 80169ee:	bf00      	nop
 80169f0:	e7fd      	b.n	80169ee <vPortEnterCritical+0x52>
	}
}
 80169f2:	bf00      	nop
 80169f4:	370c      	adds	r7, #12
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr
 80169fe:	bf00      	nop
 8016a00:	2000001c 	.word	0x2000001c
 8016a04:	e000ed04 	.word	0xe000ed04

08016a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b083      	sub	sp, #12
 8016a0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016a0e:	4b13      	ldr	r3, [pc, #76]	@ (8016a5c <vPortExitCritical+0x54>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d10d      	bne.n	8016a32 <vPortExitCritical+0x2a>
	__asm volatile
 8016a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a1a:	b672      	cpsid	i
 8016a1c:	f383 8811 	msr	BASEPRI, r3
 8016a20:	f3bf 8f6f 	isb	sy
 8016a24:	f3bf 8f4f 	dsb	sy
 8016a28:	b662      	cpsie	i
 8016a2a:	607b      	str	r3, [r7, #4]
}
 8016a2c:	bf00      	nop
 8016a2e:	bf00      	nop
 8016a30:	e7fd      	b.n	8016a2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016a32:	4b0a      	ldr	r3, [pc, #40]	@ (8016a5c <vPortExitCritical+0x54>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	3b01      	subs	r3, #1
 8016a38:	4a08      	ldr	r2, [pc, #32]	@ (8016a5c <vPortExitCritical+0x54>)
 8016a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016a3c:	4b07      	ldr	r3, [pc, #28]	@ (8016a5c <vPortExitCritical+0x54>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d105      	bne.n	8016a50 <vPortExitCritical+0x48>
 8016a44:	2300      	movs	r3, #0
 8016a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	f383 8811 	msr	BASEPRI, r3
}
 8016a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016a50:	bf00      	nop
 8016a52:	370c      	adds	r7, #12
 8016a54:	46bd      	mov	sp, r7
 8016a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5a:	4770      	bx	lr
 8016a5c:	2000001c 	.word	0x2000001c

08016a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016a60:	f3ef 8009 	mrs	r0, PSP
 8016a64:	f3bf 8f6f 	isb	sy
 8016a68:	4b15      	ldr	r3, [pc, #84]	@ (8016ac0 <pxCurrentTCBConst>)
 8016a6a:	681a      	ldr	r2, [r3, #0]
 8016a6c:	f01e 0f10 	tst.w	lr, #16
 8016a70:	bf08      	it	eq
 8016a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a7a:	6010      	str	r0, [r2, #0]
 8016a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016a84:	b672      	cpsid	i
 8016a86:	f380 8811 	msr	BASEPRI, r0
 8016a8a:	f3bf 8f4f 	dsb	sy
 8016a8e:	f3bf 8f6f 	isb	sy
 8016a92:	b662      	cpsie	i
 8016a94:	f7fe fb80 	bl	8015198 <vTaskSwitchContext>
 8016a98:	f04f 0000 	mov.w	r0, #0
 8016a9c:	f380 8811 	msr	BASEPRI, r0
 8016aa0:	bc09      	pop	{r0, r3}
 8016aa2:	6819      	ldr	r1, [r3, #0]
 8016aa4:	6808      	ldr	r0, [r1, #0]
 8016aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aaa:	f01e 0f10 	tst.w	lr, #16
 8016aae:	bf08      	it	eq
 8016ab0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016ab4:	f380 8809 	msr	PSP, r0
 8016ab8:	f3bf 8f6f 	isb	sy
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop

08016ac0 <pxCurrentTCBConst>:
 8016ac0:	200054ac 	.word	0x200054ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016ac4:	bf00      	nop
 8016ac6:	bf00      	nop

08016ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
	__asm volatile
 8016ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ad2:	b672      	cpsid	i
 8016ad4:	f383 8811 	msr	BASEPRI, r3
 8016ad8:	f3bf 8f6f 	isb	sy
 8016adc:	f3bf 8f4f 	dsb	sy
 8016ae0:	b662      	cpsie	i
 8016ae2:	607b      	str	r3, [r7, #4]
}
 8016ae4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016ae6:	f7fe fa9b 	bl	8015020 <xTaskIncrementTick>
 8016aea:	4603      	mov	r3, r0
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d003      	beq.n	8016af8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016af0:	4b06      	ldr	r3, [pc, #24]	@ (8016b0c <SysTick_Handler+0x44>)
 8016af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016af6:	601a      	str	r2, [r3, #0]
 8016af8:	2300      	movs	r3, #0
 8016afa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	f383 8811 	msr	BASEPRI, r3
}
 8016b02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016b04:	bf00      	nop
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}
 8016b0c:	e000ed04 	.word	0xe000ed04

08016b10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016b10:	b480      	push	{r7}
 8016b12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016b14:	4b0b      	ldr	r3, [pc, #44]	@ (8016b44 <vPortSetupTimerInterrupt+0x34>)
 8016b16:	2200      	movs	r2, #0
 8016b18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8016b48 <vPortSetupTimerInterrupt+0x38>)
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016b20:	4b0a      	ldr	r3, [pc, #40]	@ (8016b4c <vPortSetupTimerInterrupt+0x3c>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	4a0a      	ldr	r2, [pc, #40]	@ (8016b50 <vPortSetupTimerInterrupt+0x40>)
 8016b26:	fba2 2303 	umull	r2, r3, r2, r3
 8016b2a:	099b      	lsrs	r3, r3, #6
 8016b2c:	4a09      	ldr	r2, [pc, #36]	@ (8016b54 <vPortSetupTimerInterrupt+0x44>)
 8016b2e:	3b01      	subs	r3, #1
 8016b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016b32:	4b04      	ldr	r3, [pc, #16]	@ (8016b44 <vPortSetupTimerInterrupt+0x34>)
 8016b34:	2207      	movs	r2, #7
 8016b36:	601a      	str	r2, [r3, #0]
}
 8016b38:	bf00      	nop
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b40:	4770      	bx	lr
 8016b42:	bf00      	nop
 8016b44:	e000e010 	.word	0xe000e010
 8016b48:	e000e018 	.word	0xe000e018
 8016b4c:	20000000 	.word	0x20000000
 8016b50:	10624dd3 	.word	0x10624dd3
 8016b54:	e000e014 	.word	0xe000e014

08016b58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016b58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016b68 <vPortEnableVFP+0x10>
 8016b5c:	6801      	ldr	r1, [r0, #0]
 8016b5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016b62:	6001      	str	r1, [r0, #0]
 8016b64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016b66:	bf00      	nop
 8016b68:	e000ed88 	.word	0xe000ed88

08016b6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016b6c:	b480      	push	{r7}
 8016b6e:	b085      	sub	sp, #20
 8016b70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016b72:	f3ef 8305 	mrs	r3, IPSR
 8016b76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	2b0f      	cmp	r3, #15
 8016b7c:	d917      	bls.n	8016bae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8016be8 <vPortValidateInterruptPriority+0x7c>)
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	4413      	add	r3, r2
 8016b84:	781b      	ldrb	r3, [r3, #0]
 8016b86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016b88:	4b18      	ldr	r3, [pc, #96]	@ (8016bec <vPortValidateInterruptPriority+0x80>)
 8016b8a:	781b      	ldrb	r3, [r3, #0]
 8016b8c:	7afa      	ldrb	r2, [r7, #11]
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	d20d      	bcs.n	8016bae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8016b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b96:	b672      	cpsid	i
 8016b98:	f383 8811 	msr	BASEPRI, r3
 8016b9c:	f3bf 8f6f 	isb	sy
 8016ba0:	f3bf 8f4f 	dsb	sy
 8016ba4:	b662      	cpsie	i
 8016ba6:	607b      	str	r3, [r7, #4]
}
 8016ba8:	bf00      	nop
 8016baa:	bf00      	nop
 8016bac:	e7fd      	b.n	8016baa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016bae:	4b10      	ldr	r3, [pc, #64]	@ (8016bf0 <vPortValidateInterruptPriority+0x84>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8016bf4 <vPortValidateInterruptPriority+0x88>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d90d      	bls.n	8016bda <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8016bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bc2:	b672      	cpsid	i
 8016bc4:	f383 8811 	msr	BASEPRI, r3
 8016bc8:	f3bf 8f6f 	isb	sy
 8016bcc:	f3bf 8f4f 	dsb	sy
 8016bd0:	b662      	cpsie	i
 8016bd2:	603b      	str	r3, [r7, #0]
}
 8016bd4:	bf00      	nop
 8016bd6:	bf00      	nop
 8016bd8:	e7fd      	b.n	8016bd6 <vPortValidateInterruptPriority+0x6a>
	}
 8016bda:	bf00      	nop
 8016bdc:	3714      	adds	r7, #20
 8016bde:	46bd      	mov	sp, r7
 8016be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be4:	4770      	bx	lr
 8016be6:	bf00      	nop
 8016be8:	e000e3f0 	.word	0xe000e3f0
 8016bec:	20005ad8 	.word	0x20005ad8
 8016bf0:	e000ed0c 	.word	0xe000ed0c
 8016bf4:	20005adc 	.word	0x20005adc

08016bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b08a      	sub	sp, #40	@ 0x28
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016c00:	2300      	movs	r3, #0
 8016c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016c04:	f7fe f94e 	bl	8014ea4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016c08:	4b5d      	ldr	r3, [pc, #372]	@ (8016d80 <pvPortMalloc+0x188>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d101      	bne.n	8016c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016c10:	f000 f920 	bl	8016e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016c14:	4b5b      	ldr	r3, [pc, #364]	@ (8016d84 <pvPortMalloc+0x18c>)
 8016c16:	681a      	ldr	r2, [r3, #0]
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	4013      	ands	r3, r2
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f040 8094 	bne.w	8016d4a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d020      	beq.n	8016c6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8016c28:	2208      	movs	r2, #8
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	4413      	add	r3, r2
 8016c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	f003 0307 	and.w	r3, r3, #7
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d017      	beq.n	8016c6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	f023 0307 	bic.w	r3, r3, #7
 8016c40:	3308      	adds	r3, #8
 8016c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	f003 0307 	and.w	r3, r3, #7
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d00d      	beq.n	8016c6a <pvPortMalloc+0x72>
	__asm volatile
 8016c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c52:	b672      	cpsid	i
 8016c54:	f383 8811 	msr	BASEPRI, r3
 8016c58:	f3bf 8f6f 	isb	sy
 8016c5c:	f3bf 8f4f 	dsb	sy
 8016c60:	b662      	cpsie	i
 8016c62:	617b      	str	r3, [r7, #20]
}
 8016c64:	bf00      	nop
 8016c66:	bf00      	nop
 8016c68:	e7fd      	b.n	8016c66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d06c      	beq.n	8016d4a <pvPortMalloc+0x152>
 8016c70:	4b45      	ldr	r3, [pc, #276]	@ (8016d88 <pvPortMalloc+0x190>)
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	687a      	ldr	r2, [r7, #4]
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d867      	bhi.n	8016d4a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016c7a:	4b44      	ldr	r3, [pc, #272]	@ (8016d8c <pvPortMalloc+0x194>)
 8016c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016c7e:	4b43      	ldr	r3, [pc, #268]	@ (8016d8c <pvPortMalloc+0x194>)
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c84:	e004      	b.n	8016c90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8016c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	687a      	ldr	r2, [r7, #4]
 8016c96:	429a      	cmp	r2, r3
 8016c98:	d903      	bls.n	8016ca2 <pvPortMalloc+0xaa>
 8016c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d1f1      	bne.n	8016c86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016ca2:	4b37      	ldr	r3, [pc, #220]	@ (8016d80 <pvPortMalloc+0x188>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ca8:	429a      	cmp	r2, r3
 8016caa:	d04e      	beq.n	8016d4a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016cac:	6a3b      	ldr	r3, [r7, #32]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	2208      	movs	r2, #8
 8016cb2:	4413      	add	r3, r2
 8016cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cb8:	681a      	ldr	r2, [r3, #0]
 8016cba:	6a3b      	ldr	r3, [r7, #32]
 8016cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cc0:	685a      	ldr	r2, [r3, #4]
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	1ad2      	subs	r2, r2, r3
 8016cc6:	2308      	movs	r3, #8
 8016cc8:	005b      	lsls	r3, r3, #1
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	d922      	bls.n	8016d14 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	4413      	add	r3, r2
 8016cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	f003 0307 	and.w	r3, r3, #7
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d00d      	beq.n	8016cfc <pvPortMalloc+0x104>
	__asm volatile
 8016ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ce4:	b672      	cpsid	i
 8016ce6:	f383 8811 	msr	BASEPRI, r3
 8016cea:	f3bf 8f6f 	isb	sy
 8016cee:	f3bf 8f4f 	dsb	sy
 8016cf2:	b662      	cpsie	i
 8016cf4:	613b      	str	r3, [r7, #16]
}
 8016cf6:	bf00      	nop
 8016cf8:	bf00      	nop
 8016cfa:	e7fd      	b.n	8016cf8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cfe:	685a      	ldr	r2, [r3, #4]
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	1ad2      	subs	r2, r2, r3
 8016d04:	69bb      	ldr	r3, [r7, #24]
 8016d06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d0a:	687a      	ldr	r2, [r7, #4]
 8016d0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016d0e:	69b8      	ldr	r0, [r7, #24]
 8016d10:	f000 f902 	bl	8016f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016d14:	4b1c      	ldr	r3, [pc, #112]	@ (8016d88 <pvPortMalloc+0x190>)
 8016d16:	681a      	ldr	r2, [r3, #0]
 8016d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	1ad3      	subs	r3, r2, r3
 8016d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8016d88 <pvPortMalloc+0x190>)
 8016d20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016d22:	4b19      	ldr	r3, [pc, #100]	@ (8016d88 <pvPortMalloc+0x190>)
 8016d24:	681a      	ldr	r2, [r3, #0]
 8016d26:	4b1a      	ldr	r3, [pc, #104]	@ (8016d90 <pvPortMalloc+0x198>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d203      	bcs.n	8016d36 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016d2e:	4b16      	ldr	r3, [pc, #88]	@ (8016d88 <pvPortMalloc+0x190>)
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	4a17      	ldr	r2, [pc, #92]	@ (8016d90 <pvPortMalloc+0x198>)
 8016d34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d38:	685a      	ldr	r2, [r3, #4]
 8016d3a:	4b12      	ldr	r3, [pc, #72]	@ (8016d84 <pvPortMalloc+0x18c>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	431a      	orrs	r2, r3
 8016d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d46:	2200      	movs	r2, #0
 8016d48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016d4a:	f7fe f8b9 	bl	8014ec0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d4e:	69fb      	ldr	r3, [r7, #28]
 8016d50:	f003 0307 	and.w	r3, r3, #7
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d00d      	beq.n	8016d74 <pvPortMalloc+0x17c>
	__asm volatile
 8016d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d5c:	b672      	cpsid	i
 8016d5e:	f383 8811 	msr	BASEPRI, r3
 8016d62:	f3bf 8f6f 	isb	sy
 8016d66:	f3bf 8f4f 	dsb	sy
 8016d6a:	b662      	cpsie	i
 8016d6c:	60fb      	str	r3, [r7, #12]
}
 8016d6e:	bf00      	nop
 8016d70:	bf00      	nop
 8016d72:	e7fd      	b.n	8016d70 <pvPortMalloc+0x178>
	return pvReturn;
 8016d74:	69fb      	ldr	r3, [r7, #28]
}
 8016d76:	4618      	mov	r0, r3
 8016d78:	3728      	adds	r7, #40	@ 0x28
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}
 8016d7e:	bf00      	nop
 8016d80:	200096e8 	.word	0x200096e8
 8016d84:	200096f4 	.word	0x200096f4
 8016d88:	200096ec 	.word	0x200096ec
 8016d8c:	200096e0 	.word	0x200096e0
 8016d90:	200096f0 	.word	0x200096f0

08016d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b086      	sub	sp, #24
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d04e      	beq.n	8016e44 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016da6:	2308      	movs	r3, #8
 8016da8:	425b      	negs	r3, r3
 8016daa:	697a      	ldr	r2, [r7, #20]
 8016dac:	4413      	add	r3, r2
 8016dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016db0:	697b      	ldr	r3, [r7, #20]
 8016db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016db4:	693b      	ldr	r3, [r7, #16]
 8016db6:	685a      	ldr	r2, [r3, #4]
 8016db8:	4b24      	ldr	r3, [pc, #144]	@ (8016e4c <vPortFree+0xb8>)
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	4013      	ands	r3, r2
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d10d      	bne.n	8016dde <vPortFree+0x4a>
	__asm volatile
 8016dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dc6:	b672      	cpsid	i
 8016dc8:	f383 8811 	msr	BASEPRI, r3
 8016dcc:	f3bf 8f6f 	isb	sy
 8016dd0:	f3bf 8f4f 	dsb	sy
 8016dd4:	b662      	cpsie	i
 8016dd6:	60fb      	str	r3, [r7, #12]
}
 8016dd8:	bf00      	nop
 8016dda:	bf00      	nop
 8016ddc:	e7fd      	b.n	8016dda <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016dde:	693b      	ldr	r3, [r7, #16]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d00d      	beq.n	8016e02 <vPortFree+0x6e>
	__asm volatile
 8016de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dea:	b672      	cpsid	i
 8016dec:	f383 8811 	msr	BASEPRI, r3
 8016df0:	f3bf 8f6f 	isb	sy
 8016df4:	f3bf 8f4f 	dsb	sy
 8016df8:	b662      	cpsie	i
 8016dfa:	60bb      	str	r3, [r7, #8]
}
 8016dfc:	bf00      	nop
 8016dfe:	bf00      	nop
 8016e00:	e7fd      	b.n	8016dfe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016e02:	693b      	ldr	r3, [r7, #16]
 8016e04:	685a      	ldr	r2, [r3, #4]
 8016e06:	4b11      	ldr	r3, [pc, #68]	@ (8016e4c <vPortFree+0xb8>)
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	4013      	ands	r3, r2
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d019      	beq.n	8016e44 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d115      	bne.n	8016e44 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016e18:	693b      	ldr	r3, [r7, #16]
 8016e1a:	685a      	ldr	r2, [r3, #4]
 8016e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8016e4c <vPortFree+0xb8>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	43db      	mvns	r3, r3
 8016e22:	401a      	ands	r2, r3
 8016e24:	693b      	ldr	r3, [r7, #16]
 8016e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016e28:	f7fe f83c 	bl	8014ea4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	685a      	ldr	r2, [r3, #4]
 8016e30:	4b07      	ldr	r3, [pc, #28]	@ (8016e50 <vPortFree+0xbc>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	4413      	add	r3, r2
 8016e36:	4a06      	ldr	r2, [pc, #24]	@ (8016e50 <vPortFree+0xbc>)
 8016e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016e3a:	6938      	ldr	r0, [r7, #16]
 8016e3c:	f000 f86c 	bl	8016f18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016e40:	f7fe f83e 	bl	8014ec0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016e44:	bf00      	nop
 8016e46:	3718      	adds	r7, #24
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}
 8016e4c:	200096f4 	.word	0x200096f4
 8016e50:	200096ec 	.word	0x200096ec

08016e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016e54:	b480      	push	{r7}
 8016e56:	b085      	sub	sp, #20
 8016e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016e5a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016e60:	4b27      	ldr	r3, [pc, #156]	@ (8016f00 <prvHeapInit+0xac>)
 8016e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	f003 0307 	and.w	r3, r3, #7
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d00c      	beq.n	8016e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	3307      	adds	r3, #7
 8016e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	f023 0307 	bic.w	r3, r3, #7
 8016e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016e7c:	68ba      	ldr	r2, [r7, #8]
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	1ad3      	subs	r3, r2, r3
 8016e82:	4a1f      	ldr	r2, [pc, #124]	@ (8016f00 <prvHeapInit+0xac>)
 8016e84:	4413      	add	r3, r2
 8016e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8016f04 <prvHeapInit+0xb0>)
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016e92:	4b1c      	ldr	r3, [pc, #112]	@ (8016f04 <prvHeapInit+0xb0>)
 8016e94:	2200      	movs	r2, #0
 8016e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	68ba      	ldr	r2, [r7, #8]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016ea0:	2208      	movs	r2, #8
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	1a9b      	subs	r3, r3, r2
 8016ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	f023 0307 	bic.w	r3, r3, #7
 8016eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	4a15      	ldr	r2, [pc, #84]	@ (8016f08 <prvHeapInit+0xb4>)
 8016eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016eb6:	4b14      	ldr	r3, [pc, #80]	@ (8016f08 <prvHeapInit+0xb4>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	2200      	movs	r2, #0
 8016ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016ebe:	4b12      	ldr	r3, [pc, #72]	@ (8016f08 <prvHeapInit+0xb4>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016eca:	683b      	ldr	r3, [r7, #0]
 8016ecc:	68fa      	ldr	r2, [r7, #12]
 8016ece:	1ad2      	subs	r2, r2, r3
 8016ed0:	683b      	ldr	r3, [r7, #0]
 8016ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8016f08 <prvHeapInit+0xb4>)
 8016ed6:	681a      	ldr	r2, [r3, #0]
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8016f0c <prvHeapInit+0xb8>)
 8016ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ee4:	683b      	ldr	r3, [r7, #0]
 8016ee6:	685b      	ldr	r3, [r3, #4]
 8016ee8:	4a09      	ldr	r2, [pc, #36]	@ (8016f10 <prvHeapInit+0xbc>)
 8016eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016eec:	4b09      	ldr	r3, [pc, #36]	@ (8016f14 <prvHeapInit+0xc0>)
 8016eee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016ef2:	601a      	str	r2, [r3, #0]
}
 8016ef4:	bf00      	nop
 8016ef6:	3714      	adds	r7, #20
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efe:	4770      	bx	lr
 8016f00:	20005ae0 	.word	0x20005ae0
 8016f04:	200096e0 	.word	0x200096e0
 8016f08:	200096e8 	.word	0x200096e8
 8016f0c:	200096f0 	.word	0x200096f0
 8016f10:	200096ec 	.word	0x200096ec
 8016f14:	200096f4 	.word	0x200096f4

08016f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b085      	sub	sp, #20
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016f20:	4b28      	ldr	r3, [pc, #160]	@ (8016fc4 <prvInsertBlockIntoFreeList+0xac>)
 8016f22:	60fb      	str	r3, [r7, #12]
 8016f24:	e002      	b.n	8016f2c <prvInsertBlockIntoFreeList+0x14>
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	60fb      	str	r3, [r7, #12]
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	687a      	ldr	r2, [r7, #4]
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d8f7      	bhi.n	8016f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	68ba      	ldr	r2, [r7, #8]
 8016f40:	4413      	add	r3, r2
 8016f42:	687a      	ldr	r2, [r7, #4]
 8016f44:	429a      	cmp	r2, r3
 8016f46:	d108      	bne.n	8016f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	685a      	ldr	r2, [r3, #4]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	441a      	add	r2, r3
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	685b      	ldr	r3, [r3, #4]
 8016f62:	68ba      	ldr	r2, [r7, #8]
 8016f64:	441a      	add	r2, r3
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d118      	bne.n	8016fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	681a      	ldr	r2, [r3, #0]
 8016f72:	4b15      	ldr	r3, [pc, #84]	@ (8016fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d00d      	beq.n	8016f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	685a      	ldr	r2, [r3, #4]
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	685b      	ldr	r3, [r3, #4]
 8016f84:	441a      	add	r2, r3
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	681a      	ldr	r2, [r3, #0]
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	601a      	str	r2, [r3, #0]
 8016f94:	e008      	b.n	8016fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016f96:	4b0c      	ldr	r3, [pc, #48]	@ (8016fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8016f98:	681a      	ldr	r2, [r3, #0]
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	601a      	str	r2, [r3, #0]
 8016f9e:	e003      	b.n	8016fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	681a      	ldr	r2, [r3, #0]
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016fa8:	68fa      	ldr	r2, [r7, #12]
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	429a      	cmp	r2, r3
 8016fae:	d002      	beq.n	8016fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	687a      	ldr	r2, [r7, #4]
 8016fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016fb6:	bf00      	nop
 8016fb8:	3714      	adds	r7, #20
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc0:	4770      	bx	lr
 8016fc2:	bf00      	nop
 8016fc4:	200096e0 	.word	0x200096e0
 8016fc8:	200096e8 	.word	0x200096e8

08016fcc <rand>:
 8016fcc:	4b16      	ldr	r3, [pc, #88]	@ (8017028 <rand+0x5c>)
 8016fce:	b510      	push	{r4, lr}
 8016fd0:	681c      	ldr	r4, [r3, #0]
 8016fd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016fd4:	b9b3      	cbnz	r3, 8017004 <rand+0x38>
 8016fd6:	2018      	movs	r0, #24
 8016fd8:	f000 faec 	bl	80175b4 <malloc>
 8016fdc:	4602      	mov	r2, r0
 8016fde:	6320      	str	r0, [r4, #48]	@ 0x30
 8016fe0:	b920      	cbnz	r0, 8016fec <rand+0x20>
 8016fe2:	4b12      	ldr	r3, [pc, #72]	@ (801702c <rand+0x60>)
 8016fe4:	4812      	ldr	r0, [pc, #72]	@ (8017030 <rand+0x64>)
 8016fe6:	2152      	movs	r1, #82	@ 0x52
 8016fe8:	f000 fa7c 	bl	80174e4 <__assert_func>
 8016fec:	4911      	ldr	r1, [pc, #68]	@ (8017034 <rand+0x68>)
 8016fee:	4b12      	ldr	r3, [pc, #72]	@ (8017038 <rand+0x6c>)
 8016ff0:	e9c0 1300 	strd	r1, r3, [r0]
 8016ff4:	4b11      	ldr	r3, [pc, #68]	@ (801703c <rand+0x70>)
 8016ff6:	6083      	str	r3, [r0, #8]
 8016ff8:	230b      	movs	r3, #11
 8016ffa:	8183      	strh	r3, [r0, #12]
 8016ffc:	2100      	movs	r1, #0
 8016ffe:	2001      	movs	r0, #1
 8017000:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017004:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017006:	480e      	ldr	r0, [pc, #56]	@ (8017040 <rand+0x74>)
 8017008:	690b      	ldr	r3, [r1, #16]
 801700a:	694c      	ldr	r4, [r1, #20]
 801700c:	4a0d      	ldr	r2, [pc, #52]	@ (8017044 <rand+0x78>)
 801700e:	4358      	muls	r0, r3
 8017010:	fb02 0004 	mla	r0, r2, r4, r0
 8017014:	fba3 3202 	umull	r3, r2, r3, r2
 8017018:	3301      	adds	r3, #1
 801701a:	eb40 0002 	adc.w	r0, r0, r2
 801701e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017022:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017026:	bd10      	pop	{r4, pc}
 8017028:	2000002c 	.word	0x2000002c
 801702c:	080186f8 	.word	0x080186f8
 8017030:	0801870f 	.word	0x0801870f
 8017034:	abcd330e 	.word	0xabcd330e
 8017038:	e66d1234 	.word	0xe66d1234
 801703c:	0005deec 	.word	0x0005deec
 8017040:	5851f42d 	.word	0x5851f42d
 8017044:	4c957f2d 	.word	0x4c957f2d

08017048 <std>:
 8017048:	2300      	movs	r3, #0
 801704a:	b510      	push	{r4, lr}
 801704c:	4604      	mov	r4, r0
 801704e:	e9c0 3300 	strd	r3, r3, [r0]
 8017052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017056:	6083      	str	r3, [r0, #8]
 8017058:	8181      	strh	r1, [r0, #12]
 801705a:	6643      	str	r3, [r0, #100]	@ 0x64
 801705c:	81c2      	strh	r2, [r0, #14]
 801705e:	6183      	str	r3, [r0, #24]
 8017060:	4619      	mov	r1, r3
 8017062:	2208      	movs	r2, #8
 8017064:	305c      	adds	r0, #92	@ 0x5c
 8017066:	f000 f954 	bl	8017312 <memset>
 801706a:	4b0d      	ldr	r3, [pc, #52]	@ (80170a0 <std+0x58>)
 801706c:	6263      	str	r3, [r4, #36]	@ 0x24
 801706e:	4b0d      	ldr	r3, [pc, #52]	@ (80170a4 <std+0x5c>)
 8017070:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017072:	4b0d      	ldr	r3, [pc, #52]	@ (80170a8 <std+0x60>)
 8017074:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017076:	4b0d      	ldr	r3, [pc, #52]	@ (80170ac <std+0x64>)
 8017078:	6323      	str	r3, [r4, #48]	@ 0x30
 801707a:	4b0d      	ldr	r3, [pc, #52]	@ (80170b0 <std+0x68>)
 801707c:	6224      	str	r4, [r4, #32]
 801707e:	429c      	cmp	r4, r3
 8017080:	d006      	beq.n	8017090 <std+0x48>
 8017082:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017086:	4294      	cmp	r4, r2
 8017088:	d002      	beq.n	8017090 <std+0x48>
 801708a:	33d0      	adds	r3, #208	@ 0xd0
 801708c:	429c      	cmp	r4, r3
 801708e:	d105      	bne.n	801709c <std+0x54>
 8017090:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017098:	f000 ba12 	b.w	80174c0 <__retarget_lock_init_recursive>
 801709c:	bd10      	pop	{r4, pc}
 801709e:	bf00      	nop
 80170a0:	08017239 	.word	0x08017239
 80170a4:	0801725b 	.word	0x0801725b
 80170a8:	08017293 	.word	0x08017293
 80170ac:	080172b7 	.word	0x080172b7
 80170b0:	200096f8 	.word	0x200096f8

080170b4 <stdio_exit_handler>:
 80170b4:	4a02      	ldr	r2, [pc, #8]	@ (80170c0 <stdio_exit_handler+0xc>)
 80170b6:	4903      	ldr	r1, [pc, #12]	@ (80170c4 <stdio_exit_handler+0x10>)
 80170b8:	4803      	ldr	r0, [pc, #12]	@ (80170c8 <stdio_exit_handler+0x14>)
 80170ba:	f000 b869 	b.w	8017190 <_fwalk_sglue>
 80170be:	bf00      	nop
 80170c0:	20000020 	.word	0x20000020
 80170c4:	08017df1 	.word	0x08017df1
 80170c8:	20000030 	.word	0x20000030

080170cc <cleanup_stdio>:
 80170cc:	6841      	ldr	r1, [r0, #4]
 80170ce:	4b0c      	ldr	r3, [pc, #48]	@ (8017100 <cleanup_stdio+0x34>)
 80170d0:	4299      	cmp	r1, r3
 80170d2:	b510      	push	{r4, lr}
 80170d4:	4604      	mov	r4, r0
 80170d6:	d001      	beq.n	80170dc <cleanup_stdio+0x10>
 80170d8:	f000 fe8a 	bl	8017df0 <_fflush_r>
 80170dc:	68a1      	ldr	r1, [r4, #8]
 80170de:	4b09      	ldr	r3, [pc, #36]	@ (8017104 <cleanup_stdio+0x38>)
 80170e0:	4299      	cmp	r1, r3
 80170e2:	d002      	beq.n	80170ea <cleanup_stdio+0x1e>
 80170e4:	4620      	mov	r0, r4
 80170e6:	f000 fe83 	bl	8017df0 <_fflush_r>
 80170ea:	68e1      	ldr	r1, [r4, #12]
 80170ec:	4b06      	ldr	r3, [pc, #24]	@ (8017108 <cleanup_stdio+0x3c>)
 80170ee:	4299      	cmp	r1, r3
 80170f0:	d004      	beq.n	80170fc <cleanup_stdio+0x30>
 80170f2:	4620      	mov	r0, r4
 80170f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170f8:	f000 be7a 	b.w	8017df0 <_fflush_r>
 80170fc:	bd10      	pop	{r4, pc}
 80170fe:	bf00      	nop
 8017100:	200096f8 	.word	0x200096f8
 8017104:	20009760 	.word	0x20009760
 8017108:	200097c8 	.word	0x200097c8

0801710c <global_stdio_init.part.0>:
 801710c:	b510      	push	{r4, lr}
 801710e:	4b0b      	ldr	r3, [pc, #44]	@ (801713c <global_stdio_init.part.0+0x30>)
 8017110:	4c0b      	ldr	r4, [pc, #44]	@ (8017140 <global_stdio_init.part.0+0x34>)
 8017112:	4a0c      	ldr	r2, [pc, #48]	@ (8017144 <global_stdio_init.part.0+0x38>)
 8017114:	601a      	str	r2, [r3, #0]
 8017116:	4620      	mov	r0, r4
 8017118:	2200      	movs	r2, #0
 801711a:	2104      	movs	r1, #4
 801711c:	f7ff ff94 	bl	8017048 <std>
 8017120:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017124:	2201      	movs	r2, #1
 8017126:	2109      	movs	r1, #9
 8017128:	f7ff ff8e 	bl	8017048 <std>
 801712c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017130:	2202      	movs	r2, #2
 8017132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017136:	2112      	movs	r1, #18
 8017138:	f7ff bf86 	b.w	8017048 <std>
 801713c:	20009830 	.word	0x20009830
 8017140:	200096f8 	.word	0x200096f8
 8017144:	080170b5 	.word	0x080170b5

08017148 <__sfp_lock_acquire>:
 8017148:	4801      	ldr	r0, [pc, #4]	@ (8017150 <__sfp_lock_acquire+0x8>)
 801714a:	f000 b9ba 	b.w	80174c2 <__retarget_lock_acquire_recursive>
 801714e:	bf00      	nop
 8017150:	20009839 	.word	0x20009839

08017154 <__sfp_lock_release>:
 8017154:	4801      	ldr	r0, [pc, #4]	@ (801715c <__sfp_lock_release+0x8>)
 8017156:	f000 b9b5 	b.w	80174c4 <__retarget_lock_release_recursive>
 801715a:	bf00      	nop
 801715c:	20009839 	.word	0x20009839

08017160 <__sinit>:
 8017160:	b510      	push	{r4, lr}
 8017162:	4604      	mov	r4, r0
 8017164:	f7ff fff0 	bl	8017148 <__sfp_lock_acquire>
 8017168:	6a23      	ldr	r3, [r4, #32]
 801716a:	b11b      	cbz	r3, 8017174 <__sinit+0x14>
 801716c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017170:	f7ff bff0 	b.w	8017154 <__sfp_lock_release>
 8017174:	4b04      	ldr	r3, [pc, #16]	@ (8017188 <__sinit+0x28>)
 8017176:	6223      	str	r3, [r4, #32]
 8017178:	4b04      	ldr	r3, [pc, #16]	@ (801718c <__sinit+0x2c>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d1f5      	bne.n	801716c <__sinit+0xc>
 8017180:	f7ff ffc4 	bl	801710c <global_stdio_init.part.0>
 8017184:	e7f2      	b.n	801716c <__sinit+0xc>
 8017186:	bf00      	nop
 8017188:	080170cd 	.word	0x080170cd
 801718c:	20009830 	.word	0x20009830

08017190 <_fwalk_sglue>:
 8017190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017194:	4607      	mov	r7, r0
 8017196:	4688      	mov	r8, r1
 8017198:	4614      	mov	r4, r2
 801719a:	2600      	movs	r6, #0
 801719c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80171a0:	f1b9 0901 	subs.w	r9, r9, #1
 80171a4:	d505      	bpl.n	80171b2 <_fwalk_sglue+0x22>
 80171a6:	6824      	ldr	r4, [r4, #0]
 80171a8:	2c00      	cmp	r4, #0
 80171aa:	d1f7      	bne.n	801719c <_fwalk_sglue+0xc>
 80171ac:	4630      	mov	r0, r6
 80171ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171b2:	89ab      	ldrh	r3, [r5, #12]
 80171b4:	2b01      	cmp	r3, #1
 80171b6:	d907      	bls.n	80171c8 <_fwalk_sglue+0x38>
 80171b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171bc:	3301      	adds	r3, #1
 80171be:	d003      	beq.n	80171c8 <_fwalk_sglue+0x38>
 80171c0:	4629      	mov	r1, r5
 80171c2:	4638      	mov	r0, r7
 80171c4:	47c0      	blx	r8
 80171c6:	4306      	orrs	r6, r0
 80171c8:	3568      	adds	r5, #104	@ 0x68
 80171ca:	e7e9      	b.n	80171a0 <_fwalk_sglue+0x10>

080171cc <sniprintf>:
 80171cc:	b40c      	push	{r2, r3}
 80171ce:	b530      	push	{r4, r5, lr}
 80171d0:	4b18      	ldr	r3, [pc, #96]	@ (8017234 <sniprintf+0x68>)
 80171d2:	1e0c      	subs	r4, r1, #0
 80171d4:	681d      	ldr	r5, [r3, #0]
 80171d6:	b09d      	sub	sp, #116	@ 0x74
 80171d8:	da08      	bge.n	80171ec <sniprintf+0x20>
 80171da:	238b      	movs	r3, #139	@ 0x8b
 80171dc:	602b      	str	r3, [r5, #0]
 80171de:	f04f 30ff 	mov.w	r0, #4294967295
 80171e2:	b01d      	add	sp, #116	@ 0x74
 80171e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171e8:	b002      	add	sp, #8
 80171ea:	4770      	bx	lr
 80171ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80171f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80171f4:	f04f 0300 	mov.w	r3, #0
 80171f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80171fa:	bf14      	ite	ne
 80171fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017200:	4623      	moveq	r3, r4
 8017202:	9304      	str	r3, [sp, #16]
 8017204:	9307      	str	r3, [sp, #28]
 8017206:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801720a:	9002      	str	r0, [sp, #8]
 801720c:	9006      	str	r0, [sp, #24]
 801720e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017212:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017214:	ab21      	add	r3, sp, #132	@ 0x84
 8017216:	a902      	add	r1, sp, #8
 8017218:	4628      	mov	r0, r5
 801721a:	9301      	str	r3, [sp, #4]
 801721c:	f000 fadc 	bl	80177d8 <_svfiprintf_r>
 8017220:	1c43      	adds	r3, r0, #1
 8017222:	bfbc      	itt	lt
 8017224:	238b      	movlt	r3, #139	@ 0x8b
 8017226:	602b      	strlt	r3, [r5, #0]
 8017228:	2c00      	cmp	r4, #0
 801722a:	d0da      	beq.n	80171e2 <sniprintf+0x16>
 801722c:	9b02      	ldr	r3, [sp, #8]
 801722e:	2200      	movs	r2, #0
 8017230:	701a      	strb	r2, [r3, #0]
 8017232:	e7d6      	b.n	80171e2 <sniprintf+0x16>
 8017234:	2000002c 	.word	0x2000002c

08017238 <__sread>:
 8017238:	b510      	push	{r4, lr}
 801723a:	460c      	mov	r4, r1
 801723c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017240:	f000 f902 	bl	8017448 <_read_r>
 8017244:	2800      	cmp	r0, #0
 8017246:	bfab      	itete	ge
 8017248:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801724a:	89a3      	ldrhlt	r3, [r4, #12]
 801724c:	181b      	addge	r3, r3, r0
 801724e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017252:	bfac      	ite	ge
 8017254:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017256:	81a3      	strhlt	r3, [r4, #12]
 8017258:	bd10      	pop	{r4, pc}

0801725a <__swrite>:
 801725a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801725e:	461f      	mov	r7, r3
 8017260:	898b      	ldrh	r3, [r1, #12]
 8017262:	05db      	lsls	r3, r3, #23
 8017264:	4605      	mov	r5, r0
 8017266:	460c      	mov	r4, r1
 8017268:	4616      	mov	r6, r2
 801726a:	d505      	bpl.n	8017278 <__swrite+0x1e>
 801726c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017270:	2302      	movs	r3, #2
 8017272:	2200      	movs	r2, #0
 8017274:	f000 f8d6 	bl	8017424 <_lseek_r>
 8017278:	89a3      	ldrh	r3, [r4, #12]
 801727a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801727e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017282:	81a3      	strh	r3, [r4, #12]
 8017284:	4632      	mov	r2, r6
 8017286:	463b      	mov	r3, r7
 8017288:	4628      	mov	r0, r5
 801728a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801728e:	f7e9 bb6d 	b.w	800096c <_write_r>

08017292 <__sseek>:
 8017292:	b510      	push	{r4, lr}
 8017294:	460c      	mov	r4, r1
 8017296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801729a:	f000 f8c3 	bl	8017424 <_lseek_r>
 801729e:	1c43      	adds	r3, r0, #1
 80172a0:	89a3      	ldrh	r3, [r4, #12]
 80172a2:	bf15      	itete	ne
 80172a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80172a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80172aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80172ae:	81a3      	strheq	r3, [r4, #12]
 80172b0:	bf18      	it	ne
 80172b2:	81a3      	strhne	r3, [r4, #12]
 80172b4:	bd10      	pop	{r4, pc}

080172b6 <__sclose>:
 80172b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172ba:	f000 b845 	b.w	8017348 <_close_r>

080172be <memcmp>:
 80172be:	b510      	push	{r4, lr}
 80172c0:	3901      	subs	r1, #1
 80172c2:	4402      	add	r2, r0
 80172c4:	4290      	cmp	r0, r2
 80172c6:	d101      	bne.n	80172cc <memcmp+0xe>
 80172c8:	2000      	movs	r0, #0
 80172ca:	e005      	b.n	80172d8 <memcmp+0x1a>
 80172cc:	7803      	ldrb	r3, [r0, #0]
 80172ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80172d2:	42a3      	cmp	r3, r4
 80172d4:	d001      	beq.n	80172da <memcmp+0x1c>
 80172d6:	1b18      	subs	r0, r3, r4
 80172d8:	bd10      	pop	{r4, pc}
 80172da:	3001      	adds	r0, #1
 80172dc:	e7f2      	b.n	80172c4 <memcmp+0x6>

080172de <memmove>:
 80172de:	4288      	cmp	r0, r1
 80172e0:	b510      	push	{r4, lr}
 80172e2:	eb01 0402 	add.w	r4, r1, r2
 80172e6:	d902      	bls.n	80172ee <memmove+0x10>
 80172e8:	4284      	cmp	r4, r0
 80172ea:	4623      	mov	r3, r4
 80172ec:	d807      	bhi.n	80172fe <memmove+0x20>
 80172ee:	1e43      	subs	r3, r0, #1
 80172f0:	42a1      	cmp	r1, r4
 80172f2:	d008      	beq.n	8017306 <memmove+0x28>
 80172f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80172f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80172fc:	e7f8      	b.n	80172f0 <memmove+0x12>
 80172fe:	4402      	add	r2, r0
 8017300:	4601      	mov	r1, r0
 8017302:	428a      	cmp	r2, r1
 8017304:	d100      	bne.n	8017308 <memmove+0x2a>
 8017306:	bd10      	pop	{r4, pc}
 8017308:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801730c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017310:	e7f7      	b.n	8017302 <memmove+0x24>

08017312 <memset>:
 8017312:	4402      	add	r2, r0
 8017314:	4603      	mov	r3, r0
 8017316:	4293      	cmp	r3, r2
 8017318:	d100      	bne.n	801731c <memset+0xa>
 801731a:	4770      	bx	lr
 801731c:	f803 1b01 	strb.w	r1, [r3], #1
 8017320:	e7f9      	b.n	8017316 <memset+0x4>

08017322 <strncpy>:
 8017322:	b510      	push	{r4, lr}
 8017324:	3901      	subs	r1, #1
 8017326:	4603      	mov	r3, r0
 8017328:	b132      	cbz	r2, 8017338 <strncpy+0x16>
 801732a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801732e:	f803 4b01 	strb.w	r4, [r3], #1
 8017332:	3a01      	subs	r2, #1
 8017334:	2c00      	cmp	r4, #0
 8017336:	d1f7      	bne.n	8017328 <strncpy+0x6>
 8017338:	441a      	add	r2, r3
 801733a:	2100      	movs	r1, #0
 801733c:	4293      	cmp	r3, r2
 801733e:	d100      	bne.n	8017342 <strncpy+0x20>
 8017340:	bd10      	pop	{r4, pc}
 8017342:	f803 1b01 	strb.w	r1, [r3], #1
 8017346:	e7f9      	b.n	801733c <strncpy+0x1a>

08017348 <_close_r>:
 8017348:	b538      	push	{r3, r4, r5, lr}
 801734a:	4d06      	ldr	r5, [pc, #24]	@ (8017364 <_close_r+0x1c>)
 801734c:	2300      	movs	r3, #0
 801734e:	4604      	mov	r4, r0
 8017350:	4608      	mov	r0, r1
 8017352:	602b      	str	r3, [r5, #0]
 8017354:	f7ea fc34 	bl	8001bc0 <_close>
 8017358:	1c43      	adds	r3, r0, #1
 801735a:	d102      	bne.n	8017362 <_close_r+0x1a>
 801735c:	682b      	ldr	r3, [r5, #0]
 801735e:	b103      	cbz	r3, 8017362 <_close_r+0x1a>
 8017360:	6023      	str	r3, [r4, #0]
 8017362:	bd38      	pop	{r3, r4, r5, pc}
 8017364:	20009834 	.word	0x20009834

08017368 <_reclaim_reent>:
 8017368:	4b2d      	ldr	r3, [pc, #180]	@ (8017420 <_reclaim_reent+0xb8>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	4283      	cmp	r3, r0
 801736e:	b570      	push	{r4, r5, r6, lr}
 8017370:	4604      	mov	r4, r0
 8017372:	d053      	beq.n	801741c <_reclaim_reent+0xb4>
 8017374:	69c3      	ldr	r3, [r0, #28]
 8017376:	b31b      	cbz	r3, 80173c0 <_reclaim_reent+0x58>
 8017378:	68db      	ldr	r3, [r3, #12]
 801737a:	b163      	cbz	r3, 8017396 <_reclaim_reent+0x2e>
 801737c:	2500      	movs	r5, #0
 801737e:	69e3      	ldr	r3, [r4, #28]
 8017380:	68db      	ldr	r3, [r3, #12]
 8017382:	5959      	ldr	r1, [r3, r5]
 8017384:	b9b1      	cbnz	r1, 80173b4 <_reclaim_reent+0x4c>
 8017386:	3504      	adds	r5, #4
 8017388:	2d80      	cmp	r5, #128	@ 0x80
 801738a:	d1f8      	bne.n	801737e <_reclaim_reent+0x16>
 801738c:	69e3      	ldr	r3, [r4, #28]
 801738e:	4620      	mov	r0, r4
 8017390:	68d9      	ldr	r1, [r3, #12]
 8017392:	f000 f8c5 	bl	8017520 <_free_r>
 8017396:	69e3      	ldr	r3, [r4, #28]
 8017398:	6819      	ldr	r1, [r3, #0]
 801739a:	b111      	cbz	r1, 80173a2 <_reclaim_reent+0x3a>
 801739c:	4620      	mov	r0, r4
 801739e:	f000 f8bf 	bl	8017520 <_free_r>
 80173a2:	69e3      	ldr	r3, [r4, #28]
 80173a4:	689d      	ldr	r5, [r3, #8]
 80173a6:	b15d      	cbz	r5, 80173c0 <_reclaim_reent+0x58>
 80173a8:	4629      	mov	r1, r5
 80173aa:	4620      	mov	r0, r4
 80173ac:	682d      	ldr	r5, [r5, #0]
 80173ae:	f000 f8b7 	bl	8017520 <_free_r>
 80173b2:	e7f8      	b.n	80173a6 <_reclaim_reent+0x3e>
 80173b4:	680e      	ldr	r6, [r1, #0]
 80173b6:	4620      	mov	r0, r4
 80173b8:	f000 f8b2 	bl	8017520 <_free_r>
 80173bc:	4631      	mov	r1, r6
 80173be:	e7e1      	b.n	8017384 <_reclaim_reent+0x1c>
 80173c0:	6961      	ldr	r1, [r4, #20]
 80173c2:	b111      	cbz	r1, 80173ca <_reclaim_reent+0x62>
 80173c4:	4620      	mov	r0, r4
 80173c6:	f000 f8ab 	bl	8017520 <_free_r>
 80173ca:	69e1      	ldr	r1, [r4, #28]
 80173cc:	b111      	cbz	r1, 80173d4 <_reclaim_reent+0x6c>
 80173ce:	4620      	mov	r0, r4
 80173d0:	f000 f8a6 	bl	8017520 <_free_r>
 80173d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80173d6:	b111      	cbz	r1, 80173de <_reclaim_reent+0x76>
 80173d8:	4620      	mov	r0, r4
 80173da:	f000 f8a1 	bl	8017520 <_free_r>
 80173de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80173e0:	b111      	cbz	r1, 80173e8 <_reclaim_reent+0x80>
 80173e2:	4620      	mov	r0, r4
 80173e4:	f000 f89c 	bl	8017520 <_free_r>
 80173e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80173ea:	b111      	cbz	r1, 80173f2 <_reclaim_reent+0x8a>
 80173ec:	4620      	mov	r0, r4
 80173ee:	f000 f897 	bl	8017520 <_free_r>
 80173f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80173f4:	b111      	cbz	r1, 80173fc <_reclaim_reent+0x94>
 80173f6:	4620      	mov	r0, r4
 80173f8:	f000 f892 	bl	8017520 <_free_r>
 80173fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80173fe:	b111      	cbz	r1, 8017406 <_reclaim_reent+0x9e>
 8017400:	4620      	mov	r0, r4
 8017402:	f000 f88d 	bl	8017520 <_free_r>
 8017406:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017408:	b111      	cbz	r1, 8017410 <_reclaim_reent+0xa8>
 801740a:	4620      	mov	r0, r4
 801740c:	f000 f888 	bl	8017520 <_free_r>
 8017410:	6a23      	ldr	r3, [r4, #32]
 8017412:	b11b      	cbz	r3, 801741c <_reclaim_reent+0xb4>
 8017414:	4620      	mov	r0, r4
 8017416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801741a:	4718      	bx	r3
 801741c:	bd70      	pop	{r4, r5, r6, pc}
 801741e:	bf00      	nop
 8017420:	2000002c 	.word	0x2000002c

08017424 <_lseek_r>:
 8017424:	b538      	push	{r3, r4, r5, lr}
 8017426:	4d07      	ldr	r5, [pc, #28]	@ (8017444 <_lseek_r+0x20>)
 8017428:	4604      	mov	r4, r0
 801742a:	4608      	mov	r0, r1
 801742c:	4611      	mov	r1, r2
 801742e:	2200      	movs	r2, #0
 8017430:	602a      	str	r2, [r5, #0]
 8017432:	461a      	mov	r2, r3
 8017434:	f7ea fbeb 	bl	8001c0e <_lseek>
 8017438:	1c43      	adds	r3, r0, #1
 801743a:	d102      	bne.n	8017442 <_lseek_r+0x1e>
 801743c:	682b      	ldr	r3, [r5, #0]
 801743e:	b103      	cbz	r3, 8017442 <_lseek_r+0x1e>
 8017440:	6023      	str	r3, [r4, #0]
 8017442:	bd38      	pop	{r3, r4, r5, pc}
 8017444:	20009834 	.word	0x20009834

08017448 <_read_r>:
 8017448:	b538      	push	{r3, r4, r5, lr}
 801744a:	4d07      	ldr	r5, [pc, #28]	@ (8017468 <_read_r+0x20>)
 801744c:	4604      	mov	r4, r0
 801744e:	4608      	mov	r0, r1
 8017450:	4611      	mov	r1, r2
 8017452:	2200      	movs	r2, #0
 8017454:	602a      	str	r2, [r5, #0]
 8017456:	461a      	mov	r2, r3
 8017458:	f7ea fb95 	bl	8001b86 <_read>
 801745c:	1c43      	adds	r3, r0, #1
 801745e:	d102      	bne.n	8017466 <_read_r+0x1e>
 8017460:	682b      	ldr	r3, [r5, #0]
 8017462:	b103      	cbz	r3, 8017466 <_read_r+0x1e>
 8017464:	6023      	str	r3, [r4, #0]
 8017466:	bd38      	pop	{r3, r4, r5, pc}
 8017468:	20009834 	.word	0x20009834

0801746c <__errno>:
 801746c:	4b01      	ldr	r3, [pc, #4]	@ (8017474 <__errno+0x8>)
 801746e:	6818      	ldr	r0, [r3, #0]
 8017470:	4770      	bx	lr
 8017472:	bf00      	nop
 8017474:	2000002c 	.word	0x2000002c

08017478 <__libc_init_array>:
 8017478:	b570      	push	{r4, r5, r6, lr}
 801747a:	4d0d      	ldr	r5, [pc, #52]	@ (80174b0 <__libc_init_array+0x38>)
 801747c:	4c0d      	ldr	r4, [pc, #52]	@ (80174b4 <__libc_init_array+0x3c>)
 801747e:	1b64      	subs	r4, r4, r5
 8017480:	10a4      	asrs	r4, r4, #2
 8017482:	2600      	movs	r6, #0
 8017484:	42a6      	cmp	r6, r4
 8017486:	d109      	bne.n	801749c <__libc_init_array+0x24>
 8017488:	4d0b      	ldr	r5, [pc, #44]	@ (80174b8 <__libc_init_array+0x40>)
 801748a:	4c0c      	ldr	r4, [pc, #48]	@ (80174bc <__libc_init_array+0x44>)
 801748c:	f000 ffd4 	bl	8018438 <_init>
 8017490:	1b64      	subs	r4, r4, r5
 8017492:	10a4      	asrs	r4, r4, #2
 8017494:	2600      	movs	r6, #0
 8017496:	42a6      	cmp	r6, r4
 8017498:	d105      	bne.n	80174a6 <__libc_init_array+0x2e>
 801749a:	bd70      	pop	{r4, r5, r6, pc}
 801749c:	f855 3b04 	ldr.w	r3, [r5], #4
 80174a0:	4798      	blx	r3
 80174a2:	3601      	adds	r6, #1
 80174a4:	e7ee      	b.n	8017484 <__libc_init_array+0xc>
 80174a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80174aa:	4798      	blx	r3
 80174ac:	3601      	adds	r6, #1
 80174ae:	e7f2      	b.n	8017496 <__libc_init_array+0x1e>
 80174b0:	080187e0 	.word	0x080187e0
 80174b4:	080187e0 	.word	0x080187e0
 80174b8:	080187e0 	.word	0x080187e0
 80174bc:	080187e4 	.word	0x080187e4

080174c0 <__retarget_lock_init_recursive>:
 80174c0:	4770      	bx	lr

080174c2 <__retarget_lock_acquire_recursive>:
 80174c2:	4770      	bx	lr

080174c4 <__retarget_lock_release_recursive>:
 80174c4:	4770      	bx	lr

080174c6 <memcpy>:
 80174c6:	440a      	add	r2, r1
 80174c8:	4291      	cmp	r1, r2
 80174ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80174ce:	d100      	bne.n	80174d2 <memcpy+0xc>
 80174d0:	4770      	bx	lr
 80174d2:	b510      	push	{r4, lr}
 80174d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80174dc:	4291      	cmp	r1, r2
 80174de:	d1f9      	bne.n	80174d4 <memcpy+0xe>
 80174e0:	bd10      	pop	{r4, pc}
	...

080174e4 <__assert_func>:
 80174e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80174e6:	4614      	mov	r4, r2
 80174e8:	461a      	mov	r2, r3
 80174ea:	4b09      	ldr	r3, [pc, #36]	@ (8017510 <__assert_func+0x2c>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	4605      	mov	r5, r0
 80174f0:	68d8      	ldr	r0, [r3, #12]
 80174f2:	b14c      	cbz	r4, 8017508 <__assert_func+0x24>
 80174f4:	4b07      	ldr	r3, [pc, #28]	@ (8017514 <__assert_func+0x30>)
 80174f6:	9100      	str	r1, [sp, #0]
 80174f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80174fc:	4906      	ldr	r1, [pc, #24]	@ (8017518 <__assert_func+0x34>)
 80174fe:	462b      	mov	r3, r5
 8017500:	f000 fc9e 	bl	8017e40 <fiprintf>
 8017504:	f000 fcbe 	bl	8017e84 <abort>
 8017508:	4b04      	ldr	r3, [pc, #16]	@ (801751c <__assert_func+0x38>)
 801750a:	461c      	mov	r4, r3
 801750c:	e7f3      	b.n	80174f6 <__assert_func+0x12>
 801750e:	bf00      	nop
 8017510:	2000002c 	.word	0x2000002c
 8017514:	08018767 	.word	0x08018767
 8017518:	08018774 	.word	0x08018774
 801751c:	080187a2 	.word	0x080187a2

08017520 <_free_r>:
 8017520:	b538      	push	{r3, r4, r5, lr}
 8017522:	4605      	mov	r5, r0
 8017524:	2900      	cmp	r1, #0
 8017526:	d041      	beq.n	80175ac <_free_r+0x8c>
 8017528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801752c:	1f0c      	subs	r4, r1, #4
 801752e:	2b00      	cmp	r3, #0
 8017530:	bfb8      	it	lt
 8017532:	18e4      	addlt	r4, r4, r3
 8017534:	f000 f8e8 	bl	8017708 <__malloc_lock>
 8017538:	4a1d      	ldr	r2, [pc, #116]	@ (80175b0 <_free_r+0x90>)
 801753a:	6813      	ldr	r3, [r2, #0]
 801753c:	b933      	cbnz	r3, 801754c <_free_r+0x2c>
 801753e:	6063      	str	r3, [r4, #4]
 8017540:	6014      	str	r4, [r2, #0]
 8017542:	4628      	mov	r0, r5
 8017544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017548:	f000 b8e4 	b.w	8017714 <__malloc_unlock>
 801754c:	42a3      	cmp	r3, r4
 801754e:	d908      	bls.n	8017562 <_free_r+0x42>
 8017550:	6820      	ldr	r0, [r4, #0]
 8017552:	1821      	adds	r1, r4, r0
 8017554:	428b      	cmp	r3, r1
 8017556:	bf01      	itttt	eq
 8017558:	6819      	ldreq	r1, [r3, #0]
 801755a:	685b      	ldreq	r3, [r3, #4]
 801755c:	1809      	addeq	r1, r1, r0
 801755e:	6021      	streq	r1, [r4, #0]
 8017560:	e7ed      	b.n	801753e <_free_r+0x1e>
 8017562:	461a      	mov	r2, r3
 8017564:	685b      	ldr	r3, [r3, #4]
 8017566:	b10b      	cbz	r3, 801756c <_free_r+0x4c>
 8017568:	42a3      	cmp	r3, r4
 801756a:	d9fa      	bls.n	8017562 <_free_r+0x42>
 801756c:	6811      	ldr	r1, [r2, #0]
 801756e:	1850      	adds	r0, r2, r1
 8017570:	42a0      	cmp	r0, r4
 8017572:	d10b      	bne.n	801758c <_free_r+0x6c>
 8017574:	6820      	ldr	r0, [r4, #0]
 8017576:	4401      	add	r1, r0
 8017578:	1850      	adds	r0, r2, r1
 801757a:	4283      	cmp	r3, r0
 801757c:	6011      	str	r1, [r2, #0]
 801757e:	d1e0      	bne.n	8017542 <_free_r+0x22>
 8017580:	6818      	ldr	r0, [r3, #0]
 8017582:	685b      	ldr	r3, [r3, #4]
 8017584:	6053      	str	r3, [r2, #4]
 8017586:	4408      	add	r0, r1
 8017588:	6010      	str	r0, [r2, #0]
 801758a:	e7da      	b.n	8017542 <_free_r+0x22>
 801758c:	d902      	bls.n	8017594 <_free_r+0x74>
 801758e:	230c      	movs	r3, #12
 8017590:	602b      	str	r3, [r5, #0]
 8017592:	e7d6      	b.n	8017542 <_free_r+0x22>
 8017594:	6820      	ldr	r0, [r4, #0]
 8017596:	1821      	adds	r1, r4, r0
 8017598:	428b      	cmp	r3, r1
 801759a:	bf04      	itt	eq
 801759c:	6819      	ldreq	r1, [r3, #0]
 801759e:	685b      	ldreq	r3, [r3, #4]
 80175a0:	6063      	str	r3, [r4, #4]
 80175a2:	bf04      	itt	eq
 80175a4:	1809      	addeq	r1, r1, r0
 80175a6:	6021      	streq	r1, [r4, #0]
 80175a8:	6054      	str	r4, [r2, #4]
 80175aa:	e7ca      	b.n	8017542 <_free_r+0x22>
 80175ac:	bd38      	pop	{r3, r4, r5, pc}
 80175ae:	bf00      	nop
 80175b0:	20009840 	.word	0x20009840

080175b4 <malloc>:
 80175b4:	4b02      	ldr	r3, [pc, #8]	@ (80175c0 <malloc+0xc>)
 80175b6:	4601      	mov	r1, r0
 80175b8:	6818      	ldr	r0, [r3, #0]
 80175ba:	f000 b825 	b.w	8017608 <_malloc_r>
 80175be:	bf00      	nop
 80175c0:	2000002c 	.word	0x2000002c

080175c4 <sbrk_aligned>:
 80175c4:	b570      	push	{r4, r5, r6, lr}
 80175c6:	4e0f      	ldr	r6, [pc, #60]	@ (8017604 <sbrk_aligned+0x40>)
 80175c8:	460c      	mov	r4, r1
 80175ca:	6831      	ldr	r1, [r6, #0]
 80175cc:	4605      	mov	r5, r0
 80175ce:	b911      	cbnz	r1, 80175d6 <sbrk_aligned+0x12>
 80175d0:	f000 fc48 	bl	8017e64 <_sbrk_r>
 80175d4:	6030      	str	r0, [r6, #0]
 80175d6:	4621      	mov	r1, r4
 80175d8:	4628      	mov	r0, r5
 80175da:	f000 fc43 	bl	8017e64 <_sbrk_r>
 80175de:	1c43      	adds	r3, r0, #1
 80175e0:	d103      	bne.n	80175ea <sbrk_aligned+0x26>
 80175e2:	f04f 34ff 	mov.w	r4, #4294967295
 80175e6:	4620      	mov	r0, r4
 80175e8:	bd70      	pop	{r4, r5, r6, pc}
 80175ea:	1cc4      	adds	r4, r0, #3
 80175ec:	f024 0403 	bic.w	r4, r4, #3
 80175f0:	42a0      	cmp	r0, r4
 80175f2:	d0f8      	beq.n	80175e6 <sbrk_aligned+0x22>
 80175f4:	1a21      	subs	r1, r4, r0
 80175f6:	4628      	mov	r0, r5
 80175f8:	f000 fc34 	bl	8017e64 <_sbrk_r>
 80175fc:	3001      	adds	r0, #1
 80175fe:	d1f2      	bne.n	80175e6 <sbrk_aligned+0x22>
 8017600:	e7ef      	b.n	80175e2 <sbrk_aligned+0x1e>
 8017602:	bf00      	nop
 8017604:	2000983c 	.word	0x2000983c

08017608 <_malloc_r>:
 8017608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801760c:	1ccd      	adds	r5, r1, #3
 801760e:	f025 0503 	bic.w	r5, r5, #3
 8017612:	3508      	adds	r5, #8
 8017614:	2d0c      	cmp	r5, #12
 8017616:	bf38      	it	cc
 8017618:	250c      	movcc	r5, #12
 801761a:	2d00      	cmp	r5, #0
 801761c:	4606      	mov	r6, r0
 801761e:	db01      	blt.n	8017624 <_malloc_r+0x1c>
 8017620:	42a9      	cmp	r1, r5
 8017622:	d904      	bls.n	801762e <_malloc_r+0x26>
 8017624:	230c      	movs	r3, #12
 8017626:	6033      	str	r3, [r6, #0]
 8017628:	2000      	movs	r0, #0
 801762a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801762e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017704 <_malloc_r+0xfc>
 8017632:	f000 f869 	bl	8017708 <__malloc_lock>
 8017636:	f8d8 3000 	ldr.w	r3, [r8]
 801763a:	461c      	mov	r4, r3
 801763c:	bb44      	cbnz	r4, 8017690 <_malloc_r+0x88>
 801763e:	4629      	mov	r1, r5
 8017640:	4630      	mov	r0, r6
 8017642:	f7ff ffbf 	bl	80175c4 <sbrk_aligned>
 8017646:	1c43      	adds	r3, r0, #1
 8017648:	4604      	mov	r4, r0
 801764a:	d158      	bne.n	80176fe <_malloc_r+0xf6>
 801764c:	f8d8 4000 	ldr.w	r4, [r8]
 8017650:	4627      	mov	r7, r4
 8017652:	2f00      	cmp	r7, #0
 8017654:	d143      	bne.n	80176de <_malloc_r+0xd6>
 8017656:	2c00      	cmp	r4, #0
 8017658:	d04b      	beq.n	80176f2 <_malloc_r+0xea>
 801765a:	6823      	ldr	r3, [r4, #0]
 801765c:	4639      	mov	r1, r7
 801765e:	4630      	mov	r0, r6
 8017660:	eb04 0903 	add.w	r9, r4, r3
 8017664:	f000 fbfe 	bl	8017e64 <_sbrk_r>
 8017668:	4581      	cmp	r9, r0
 801766a:	d142      	bne.n	80176f2 <_malloc_r+0xea>
 801766c:	6821      	ldr	r1, [r4, #0]
 801766e:	1a6d      	subs	r5, r5, r1
 8017670:	4629      	mov	r1, r5
 8017672:	4630      	mov	r0, r6
 8017674:	f7ff ffa6 	bl	80175c4 <sbrk_aligned>
 8017678:	3001      	adds	r0, #1
 801767a:	d03a      	beq.n	80176f2 <_malloc_r+0xea>
 801767c:	6823      	ldr	r3, [r4, #0]
 801767e:	442b      	add	r3, r5
 8017680:	6023      	str	r3, [r4, #0]
 8017682:	f8d8 3000 	ldr.w	r3, [r8]
 8017686:	685a      	ldr	r2, [r3, #4]
 8017688:	bb62      	cbnz	r2, 80176e4 <_malloc_r+0xdc>
 801768a:	f8c8 7000 	str.w	r7, [r8]
 801768e:	e00f      	b.n	80176b0 <_malloc_r+0xa8>
 8017690:	6822      	ldr	r2, [r4, #0]
 8017692:	1b52      	subs	r2, r2, r5
 8017694:	d420      	bmi.n	80176d8 <_malloc_r+0xd0>
 8017696:	2a0b      	cmp	r2, #11
 8017698:	d917      	bls.n	80176ca <_malloc_r+0xc2>
 801769a:	1961      	adds	r1, r4, r5
 801769c:	42a3      	cmp	r3, r4
 801769e:	6025      	str	r5, [r4, #0]
 80176a0:	bf18      	it	ne
 80176a2:	6059      	strne	r1, [r3, #4]
 80176a4:	6863      	ldr	r3, [r4, #4]
 80176a6:	bf08      	it	eq
 80176a8:	f8c8 1000 	streq.w	r1, [r8]
 80176ac:	5162      	str	r2, [r4, r5]
 80176ae:	604b      	str	r3, [r1, #4]
 80176b0:	4630      	mov	r0, r6
 80176b2:	f000 f82f 	bl	8017714 <__malloc_unlock>
 80176b6:	f104 000b 	add.w	r0, r4, #11
 80176ba:	1d23      	adds	r3, r4, #4
 80176bc:	f020 0007 	bic.w	r0, r0, #7
 80176c0:	1ac2      	subs	r2, r0, r3
 80176c2:	bf1c      	itt	ne
 80176c4:	1a1b      	subne	r3, r3, r0
 80176c6:	50a3      	strne	r3, [r4, r2]
 80176c8:	e7af      	b.n	801762a <_malloc_r+0x22>
 80176ca:	6862      	ldr	r2, [r4, #4]
 80176cc:	42a3      	cmp	r3, r4
 80176ce:	bf0c      	ite	eq
 80176d0:	f8c8 2000 	streq.w	r2, [r8]
 80176d4:	605a      	strne	r2, [r3, #4]
 80176d6:	e7eb      	b.n	80176b0 <_malloc_r+0xa8>
 80176d8:	4623      	mov	r3, r4
 80176da:	6864      	ldr	r4, [r4, #4]
 80176dc:	e7ae      	b.n	801763c <_malloc_r+0x34>
 80176de:	463c      	mov	r4, r7
 80176e0:	687f      	ldr	r7, [r7, #4]
 80176e2:	e7b6      	b.n	8017652 <_malloc_r+0x4a>
 80176e4:	461a      	mov	r2, r3
 80176e6:	685b      	ldr	r3, [r3, #4]
 80176e8:	42a3      	cmp	r3, r4
 80176ea:	d1fb      	bne.n	80176e4 <_malloc_r+0xdc>
 80176ec:	2300      	movs	r3, #0
 80176ee:	6053      	str	r3, [r2, #4]
 80176f0:	e7de      	b.n	80176b0 <_malloc_r+0xa8>
 80176f2:	230c      	movs	r3, #12
 80176f4:	6033      	str	r3, [r6, #0]
 80176f6:	4630      	mov	r0, r6
 80176f8:	f000 f80c 	bl	8017714 <__malloc_unlock>
 80176fc:	e794      	b.n	8017628 <_malloc_r+0x20>
 80176fe:	6005      	str	r5, [r0, #0]
 8017700:	e7d6      	b.n	80176b0 <_malloc_r+0xa8>
 8017702:	bf00      	nop
 8017704:	20009840 	.word	0x20009840

08017708 <__malloc_lock>:
 8017708:	4801      	ldr	r0, [pc, #4]	@ (8017710 <__malloc_lock+0x8>)
 801770a:	f7ff beda 	b.w	80174c2 <__retarget_lock_acquire_recursive>
 801770e:	bf00      	nop
 8017710:	20009838 	.word	0x20009838

08017714 <__malloc_unlock>:
 8017714:	4801      	ldr	r0, [pc, #4]	@ (801771c <__malloc_unlock+0x8>)
 8017716:	f7ff bed5 	b.w	80174c4 <__retarget_lock_release_recursive>
 801771a:	bf00      	nop
 801771c:	20009838 	.word	0x20009838

08017720 <__ssputs_r>:
 8017720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017724:	688e      	ldr	r6, [r1, #8]
 8017726:	461f      	mov	r7, r3
 8017728:	42be      	cmp	r6, r7
 801772a:	680b      	ldr	r3, [r1, #0]
 801772c:	4682      	mov	sl, r0
 801772e:	460c      	mov	r4, r1
 8017730:	4690      	mov	r8, r2
 8017732:	d82d      	bhi.n	8017790 <__ssputs_r+0x70>
 8017734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801773c:	d026      	beq.n	801778c <__ssputs_r+0x6c>
 801773e:	6965      	ldr	r5, [r4, #20]
 8017740:	6909      	ldr	r1, [r1, #16]
 8017742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017746:	eba3 0901 	sub.w	r9, r3, r1
 801774a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801774e:	1c7b      	adds	r3, r7, #1
 8017750:	444b      	add	r3, r9
 8017752:	106d      	asrs	r5, r5, #1
 8017754:	429d      	cmp	r5, r3
 8017756:	bf38      	it	cc
 8017758:	461d      	movcc	r5, r3
 801775a:	0553      	lsls	r3, r2, #21
 801775c:	d527      	bpl.n	80177ae <__ssputs_r+0x8e>
 801775e:	4629      	mov	r1, r5
 8017760:	f7ff ff52 	bl	8017608 <_malloc_r>
 8017764:	4606      	mov	r6, r0
 8017766:	b360      	cbz	r0, 80177c2 <__ssputs_r+0xa2>
 8017768:	6921      	ldr	r1, [r4, #16]
 801776a:	464a      	mov	r2, r9
 801776c:	f7ff feab 	bl	80174c6 <memcpy>
 8017770:	89a3      	ldrh	r3, [r4, #12]
 8017772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801777a:	81a3      	strh	r3, [r4, #12]
 801777c:	6126      	str	r6, [r4, #16]
 801777e:	6165      	str	r5, [r4, #20]
 8017780:	444e      	add	r6, r9
 8017782:	eba5 0509 	sub.w	r5, r5, r9
 8017786:	6026      	str	r6, [r4, #0]
 8017788:	60a5      	str	r5, [r4, #8]
 801778a:	463e      	mov	r6, r7
 801778c:	42be      	cmp	r6, r7
 801778e:	d900      	bls.n	8017792 <__ssputs_r+0x72>
 8017790:	463e      	mov	r6, r7
 8017792:	6820      	ldr	r0, [r4, #0]
 8017794:	4632      	mov	r2, r6
 8017796:	4641      	mov	r1, r8
 8017798:	f7ff fda1 	bl	80172de <memmove>
 801779c:	68a3      	ldr	r3, [r4, #8]
 801779e:	1b9b      	subs	r3, r3, r6
 80177a0:	60a3      	str	r3, [r4, #8]
 80177a2:	6823      	ldr	r3, [r4, #0]
 80177a4:	4433      	add	r3, r6
 80177a6:	6023      	str	r3, [r4, #0]
 80177a8:	2000      	movs	r0, #0
 80177aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177ae:	462a      	mov	r2, r5
 80177b0:	f000 fb6f 	bl	8017e92 <_realloc_r>
 80177b4:	4606      	mov	r6, r0
 80177b6:	2800      	cmp	r0, #0
 80177b8:	d1e0      	bne.n	801777c <__ssputs_r+0x5c>
 80177ba:	6921      	ldr	r1, [r4, #16]
 80177bc:	4650      	mov	r0, sl
 80177be:	f7ff feaf 	bl	8017520 <_free_r>
 80177c2:	230c      	movs	r3, #12
 80177c4:	f8ca 3000 	str.w	r3, [sl]
 80177c8:	89a3      	ldrh	r3, [r4, #12]
 80177ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80177ce:	81a3      	strh	r3, [r4, #12]
 80177d0:	f04f 30ff 	mov.w	r0, #4294967295
 80177d4:	e7e9      	b.n	80177aa <__ssputs_r+0x8a>
	...

080177d8 <_svfiprintf_r>:
 80177d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177dc:	4698      	mov	r8, r3
 80177de:	898b      	ldrh	r3, [r1, #12]
 80177e0:	061b      	lsls	r3, r3, #24
 80177e2:	b09d      	sub	sp, #116	@ 0x74
 80177e4:	4607      	mov	r7, r0
 80177e6:	460d      	mov	r5, r1
 80177e8:	4614      	mov	r4, r2
 80177ea:	d510      	bpl.n	801780e <_svfiprintf_r+0x36>
 80177ec:	690b      	ldr	r3, [r1, #16]
 80177ee:	b973      	cbnz	r3, 801780e <_svfiprintf_r+0x36>
 80177f0:	2140      	movs	r1, #64	@ 0x40
 80177f2:	f7ff ff09 	bl	8017608 <_malloc_r>
 80177f6:	6028      	str	r0, [r5, #0]
 80177f8:	6128      	str	r0, [r5, #16]
 80177fa:	b930      	cbnz	r0, 801780a <_svfiprintf_r+0x32>
 80177fc:	230c      	movs	r3, #12
 80177fe:	603b      	str	r3, [r7, #0]
 8017800:	f04f 30ff 	mov.w	r0, #4294967295
 8017804:	b01d      	add	sp, #116	@ 0x74
 8017806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801780a:	2340      	movs	r3, #64	@ 0x40
 801780c:	616b      	str	r3, [r5, #20]
 801780e:	2300      	movs	r3, #0
 8017810:	9309      	str	r3, [sp, #36]	@ 0x24
 8017812:	2320      	movs	r3, #32
 8017814:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017818:	f8cd 800c 	str.w	r8, [sp, #12]
 801781c:	2330      	movs	r3, #48	@ 0x30
 801781e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80179bc <_svfiprintf_r+0x1e4>
 8017822:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017826:	f04f 0901 	mov.w	r9, #1
 801782a:	4623      	mov	r3, r4
 801782c:	469a      	mov	sl, r3
 801782e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017832:	b10a      	cbz	r2, 8017838 <_svfiprintf_r+0x60>
 8017834:	2a25      	cmp	r2, #37	@ 0x25
 8017836:	d1f9      	bne.n	801782c <_svfiprintf_r+0x54>
 8017838:	ebba 0b04 	subs.w	fp, sl, r4
 801783c:	d00b      	beq.n	8017856 <_svfiprintf_r+0x7e>
 801783e:	465b      	mov	r3, fp
 8017840:	4622      	mov	r2, r4
 8017842:	4629      	mov	r1, r5
 8017844:	4638      	mov	r0, r7
 8017846:	f7ff ff6b 	bl	8017720 <__ssputs_r>
 801784a:	3001      	adds	r0, #1
 801784c:	f000 80a7 	beq.w	801799e <_svfiprintf_r+0x1c6>
 8017850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017852:	445a      	add	r2, fp
 8017854:	9209      	str	r2, [sp, #36]	@ 0x24
 8017856:	f89a 3000 	ldrb.w	r3, [sl]
 801785a:	2b00      	cmp	r3, #0
 801785c:	f000 809f 	beq.w	801799e <_svfiprintf_r+0x1c6>
 8017860:	2300      	movs	r3, #0
 8017862:	f04f 32ff 	mov.w	r2, #4294967295
 8017866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801786a:	f10a 0a01 	add.w	sl, sl, #1
 801786e:	9304      	str	r3, [sp, #16]
 8017870:	9307      	str	r3, [sp, #28]
 8017872:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017876:	931a      	str	r3, [sp, #104]	@ 0x68
 8017878:	4654      	mov	r4, sl
 801787a:	2205      	movs	r2, #5
 801787c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017880:	484e      	ldr	r0, [pc, #312]	@ (80179bc <_svfiprintf_r+0x1e4>)
 8017882:	f7e8 fcf5 	bl	8000270 <memchr>
 8017886:	9a04      	ldr	r2, [sp, #16]
 8017888:	b9d8      	cbnz	r0, 80178c2 <_svfiprintf_r+0xea>
 801788a:	06d0      	lsls	r0, r2, #27
 801788c:	bf44      	itt	mi
 801788e:	2320      	movmi	r3, #32
 8017890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017894:	0711      	lsls	r1, r2, #28
 8017896:	bf44      	itt	mi
 8017898:	232b      	movmi	r3, #43	@ 0x2b
 801789a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801789e:	f89a 3000 	ldrb.w	r3, [sl]
 80178a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80178a4:	d015      	beq.n	80178d2 <_svfiprintf_r+0xfa>
 80178a6:	9a07      	ldr	r2, [sp, #28]
 80178a8:	4654      	mov	r4, sl
 80178aa:	2000      	movs	r0, #0
 80178ac:	f04f 0c0a 	mov.w	ip, #10
 80178b0:	4621      	mov	r1, r4
 80178b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178b6:	3b30      	subs	r3, #48	@ 0x30
 80178b8:	2b09      	cmp	r3, #9
 80178ba:	d94b      	bls.n	8017954 <_svfiprintf_r+0x17c>
 80178bc:	b1b0      	cbz	r0, 80178ec <_svfiprintf_r+0x114>
 80178be:	9207      	str	r2, [sp, #28]
 80178c0:	e014      	b.n	80178ec <_svfiprintf_r+0x114>
 80178c2:	eba0 0308 	sub.w	r3, r0, r8
 80178c6:	fa09 f303 	lsl.w	r3, r9, r3
 80178ca:	4313      	orrs	r3, r2
 80178cc:	9304      	str	r3, [sp, #16]
 80178ce:	46a2      	mov	sl, r4
 80178d0:	e7d2      	b.n	8017878 <_svfiprintf_r+0xa0>
 80178d2:	9b03      	ldr	r3, [sp, #12]
 80178d4:	1d19      	adds	r1, r3, #4
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	9103      	str	r1, [sp, #12]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	bfbb      	ittet	lt
 80178de:	425b      	neglt	r3, r3
 80178e0:	f042 0202 	orrlt.w	r2, r2, #2
 80178e4:	9307      	strge	r3, [sp, #28]
 80178e6:	9307      	strlt	r3, [sp, #28]
 80178e8:	bfb8      	it	lt
 80178ea:	9204      	strlt	r2, [sp, #16]
 80178ec:	7823      	ldrb	r3, [r4, #0]
 80178ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80178f0:	d10a      	bne.n	8017908 <_svfiprintf_r+0x130>
 80178f2:	7863      	ldrb	r3, [r4, #1]
 80178f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80178f6:	d132      	bne.n	801795e <_svfiprintf_r+0x186>
 80178f8:	9b03      	ldr	r3, [sp, #12]
 80178fa:	1d1a      	adds	r2, r3, #4
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	9203      	str	r2, [sp, #12]
 8017900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017904:	3402      	adds	r4, #2
 8017906:	9305      	str	r3, [sp, #20]
 8017908:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80179cc <_svfiprintf_r+0x1f4>
 801790c:	7821      	ldrb	r1, [r4, #0]
 801790e:	2203      	movs	r2, #3
 8017910:	4650      	mov	r0, sl
 8017912:	f7e8 fcad 	bl	8000270 <memchr>
 8017916:	b138      	cbz	r0, 8017928 <_svfiprintf_r+0x150>
 8017918:	9b04      	ldr	r3, [sp, #16]
 801791a:	eba0 000a 	sub.w	r0, r0, sl
 801791e:	2240      	movs	r2, #64	@ 0x40
 8017920:	4082      	lsls	r2, r0
 8017922:	4313      	orrs	r3, r2
 8017924:	3401      	adds	r4, #1
 8017926:	9304      	str	r3, [sp, #16]
 8017928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801792c:	4824      	ldr	r0, [pc, #144]	@ (80179c0 <_svfiprintf_r+0x1e8>)
 801792e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017932:	2206      	movs	r2, #6
 8017934:	f7e8 fc9c 	bl	8000270 <memchr>
 8017938:	2800      	cmp	r0, #0
 801793a:	d036      	beq.n	80179aa <_svfiprintf_r+0x1d2>
 801793c:	4b21      	ldr	r3, [pc, #132]	@ (80179c4 <_svfiprintf_r+0x1ec>)
 801793e:	bb1b      	cbnz	r3, 8017988 <_svfiprintf_r+0x1b0>
 8017940:	9b03      	ldr	r3, [sp, #12]
 8017942:	3307      	adds	r3, #7
 8017944:	f023 0307 	bic.w	r3, r3, #7
 8017948:	3308      	adds	r3, #8
 801794a:	9303      	str	r3, [sp, #12]
 801794c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801794e:	4433      	add	r3, r6
 8017950:	9309      	str	r3, [sp, #36]	@ 0x24
 8017952:	e76a      	b.n	801782a <_svfiprintf_r+0x52>
 8017954:	fb0c 3202 	mla	r2, ip, r2, r3
 8017958:	460c      	mov	r4, r1
 801795a:	2001      	movs	r0, #1
 801795c:	e7a8      	b.n	80178b0 <_svfiprintf_r+0xd8>
 801795e:	2300      	movs	r3, #0
 8017960:	3401      	adds	r4, #1
 8017962:	9305      	str	r3, [sp, #20]
 8017964:	4619      	mov	r1, r3
 8017966:	f04f 0c0a 	mov.w	ip, #10
 801796a:	4620      	mov	r0, r4
 801796c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017970:	3a30      	subs	r2, #48	@ 0x30
 8017972:	2a09      	cmp	r2, #9
 8017974:	d903      	bls.n	801797e <_svfiprintf_r+0x1a6>
 8017976:	2b00      	cmp	r3, #0
 8017978:	d0c6      	beq.n	8017908 <_svfiprintf_r+0x130>
 801797a:	9105      	str	r1, [sp, #20]
 801797c:	e7c4      	b.n	8017908 <_svfiprintf_r+0x130>
 801797e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017982:	4604      	mov	r4, r0
 8017984:	2301      	movs	r3, #1
 8017986:	e7f0      	b.n	801796a <_svfiprintf_r+0x192>
 8017988:	ab03      	add	r3, sp, #12
 801798a:	9300      	str	r3, [sp, #0]
 801798c:	462a      	mov	r2, r5
 801798e:	4b0e      	ldr	r3, [pc, #56]	@ (80179c8 <_svfiprintf_r+0x1f0>)
 8017990:	a904      	add	r1, sp, #16
 8017992:	4638      	mov	r0, r7
 8017994:	f3af 8000 	nop.w
 8017998:	1c42      	adds	r2, r0, #1
 801799a:	4606      	mov	r6, r0
 801799c:	d1d6      	bne.n	801794c <_svfiprintf_r+0x174>
 801799e:	89ab      	ldrh	r3, [r5, #12]
 80179a0:	065b      	lsls	r3, r3, #25
 80179a2:	f53f af2d 	bmi.w	8017800 <_svfiprintf_r+0x28>
 80179a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179a8:	e72c      	b.n	8017804 <_svfiprintf_r+0x2c>
 80179aa:	ab03      	add	r3, sp, #12
 80179ac:	9300      	str	r3, [sp, #0]
 80179ae:	462a      	mov	r2, r5
 80179b0:	4b05      	ldr	r3, [pc, #20]	@ (80179c8 <_svfiprintf_r+0x1f0>)
 80179b2:	a904      	add	r1, sp, #16
 80179b4:	4638      	mov	r0, r7
 80179b6:	f000 f879 	bl	8017aac <_printf_i>
 80179ba:	e7ed      	b.n	8017998 <_svfiprintf_r+0x1c0>
 80179bc:	080187a3 	.word	0x080187a3
 80179c0:	080187ad 	.word	0x080187ad
 80179c4:	00000000 	.word	0x00000000
 80179c8:	08017721 	.word	0x08017721
 80179cc:	080187a9 	.word	0x080187a9

080179d0 <_printf_common>:
 80179d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179d4:	4616      	mov	r6, r2
 80179d6:	4698      	mov	r8, r3
 80179d8:	688a      	ldr	r2, [r1, #8]
 80179da:	690b      	ldr	r3, [r1, #16]
 80179dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80179e0:	4293      	cmp	r3, r2
 80179e2:	bfb8      	it	lt
 80179e4:	4613      	movlt	r3, r2
 80179e6:	6033      	str	r3, [r6, #0]
 80179e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80179ec:	4607      	mov	r7, r0
 80179ee:	460c      	mov	r4, r1
 80179f0:	b10a      	cbz	r2, 80179f6 <_printf_common+0x26>
 80179f2:	3301      	adds	r3, #1
 80179f4:	6033      	str	r3, [r6, #0]
 80179f6:	6823      	ldr	r3, [r4, #0]
 80179f8:	0699      	lsls	r1, r3, #26
 80179fa:	bf42      	ittt	mi
 80179fc:	6833      	ldrmi	r3, [r6, #0]
 80179fe:	3302      	addmi	r3, #2
 8017a00:	6033      	strmi	r3, [r6, #0]
 8017a02:	6825      	ldr	r5, [r4, #0]
 8017a04:	f015 0506 	ands.w	r5, r5, #6
 8017a08:	d106      	bne.n	8017a18 <_printf_common+0x48>
 8017a0a:	f104 0a19 	add.w	sl, r4, #25
 8017a0e:	68e3      	ldr	r3, [r4, #12]
 8017a10:	6832      	ldr	r2, [r6, #0]
 8017a12:	1a9b      	subs	r3, r3, r2
 8017a14:	42ab      	cmp	r3, r5
 8017a16:	dc26      	bgt.n	8017a66 <_printf_common+0x96>
 8017a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017a1c:	6822      	ldr	r2, [r4, #0]
 8017a1e:	3b00      	subs	r3, #0
 8017a20:	bf18      	it	ne
 8017a22:	2301      	movne	r3, #1
 8017a24:	0692      	lsls	r2, r2, #26
 8017a26:	d42b      	bmi.n	8017a80 <_printf_common+0xb0>
 8017a28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017a2c:	4641      	mov	r1, r8
 8017a2e:	4638      	mov	r0, r7
 8017a30:	47c8      	blx	r9
 8017a32:	3001      	adds	r0, #1
 8017a34:	d01e      	beq.n	8017a74 <_printf_common+0xa4>
 8017a36:	6823      	ldr	r3, [r4, #0]
 8017a38:	6922      	ldr	r2, [r4, #16]
 8017a3a:	f003 0306 	and.w	r3, r3, #6
 8017a3e:	2b04      	cmp	r3, #4
 8017a40:	bf02      	ittt	eq
 8017a42:	68e5      	ldreq	r5, [r4, #12]
 8017a44:	6833      	ldreq	r3, [r6, #0]
 8017a46:	1aed      	subeq	r5, r5, r3
 8017a48:	68a3      	ldr	r3, [r4, #8]
 8017a4a:	bf0c      	ite	eq
 8017a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a50:	2500      	movne	r5, #0
 8017a52:	4293      	cmp	r3, r2
 8017a54:	bfc4      	itt	gt
 8017a56:	1a9b      	subgt	r3, r3, r2
 8017a58:	18ed      	addgt	r5, r5, r3
 8017a5a:	2600      	movs	r6, #0
 8017a5c:	341a      	adds	r4, #26
 8017a5e:	42b5      	cmp	r5, r6
 8017a60:	d11a      	bne.n	8017a98 <_printf_common+0xc8>
 8017a62:	2000      	movs	r0, #0
 8017a64:	e008      	b.n	8017a78 <_printf_common+0xa8>
 8017a66:	2301      	movs	r3, #1
 8017a68:	4652      	mov	r2, sl
 8017a6a:	4641      	mov	r1, r8
 8017a6c:	4638      	mov	r0, r7
 8017a6e:	47c8      	blx	r9
 8017a70:	3001      	adds	r0, #1
 8017a72:	d103      	bne.n	8017a7c <_printf_common+0xac>
 8017a74:	f04f 30ff 	mov.w	r0, #4294967295
 8017a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a7c:	3501      	adds	r5, #1
 8017a7e:	e7c6      	b.n	8017a0e <_printf_common+0x3e>
 8017a80:	18e1      	adds	r1, r4, r3
 8017a82:	1c5a      	adds	r2, r3, #1
 8017a84:	2030      	movs	r0, #48	@ 0x30
 8017a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017a8a:	4422      	add	r2, r4
 8017a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017a90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017a94:	3302      	adds	r3, #2
 8017a96:	e7c7      	b.n	8017a28 <_printf_common+0x58>
 8017a98:	2301      	movs	r3, #1
 8017a9a:	4622      	mov	r2, r4
 8017a9c:	4641      	mov	r1, r8
 8017a9e:	4638      	mov	r0, r7
 8017aa0:	47c8      	blx	r9
 8017aa2:	3001      	adds	r0, #1
 8017aa4:	d0e6      	beq.n	8017a74 <_printf_common+0xa4>
 8017aa6:	3601      	adds	r6, #1
 8017aa8:	e7d9      	b.n	8017a5e <_printf_common+0x8e>
	...

08017aac <_printf_i>:
 8017aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ab0:	7e0f      	ldrb	r7, [r1, #24]
 8017ab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017ab4:	2f78      	cmp	r7, #120	@ 0x78
 8017ab6:	4691      	mov	r9, r2
 8017ab8:	4680      	mov	r8, r0
 8017aba:	460c      	mov	r4, r1
 8017abc:	469a      	mov	sl, r3
 8017abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017ac2:	d807      	bhi.n	8017ad4 <_printf_i+0x28>
 8017ac4:	2f62      	cmp	r7, #98	@ 0x62
 8017ac6:	d80a      	bhi.n	8017ade <_printf_i+0x32>
 8017ac8:	2f00      	cmp	r7, #0
 8017aca:	f000 80d1 	beq.w	8017c70 <_printf_i+0x1c4>
 8017ace:	2f58      	cmp	r7, #88	@ 0x58
 8017ad0:	f000 80b8 	beq.w	8017c44 <_printf_i+0x198>
 8017ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017adc:	e03a      	b.n	8017b54 <_printf_i+0xa8>
 8017ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017ae2:	2b15      	cmp	r3, #21
 8017ae4:	d8f6      	bhi.n	8017ad4 <_printf_i+0x28>
 8017ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8017aec <_printf_i+0x40>)
 8017ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017aec:	08017b45 	.word	0x08017b45
 8017af0:	08017b59 	.word	0x08017b59
 8017af4:	08017ad5 	.word	0x08017ad5
 8017af8:	08017ad5 	.word	0x08017ad5
 8017afc:	08017ad5 	.word	0x08017ad5
 8017b00:	08017ad5 	.word	0x08017ad5
 8017b04:	08017b59 	.word	0x08017b59
 8017b08:	08017ad5 	.word	0x08017ad5
 8017b0c:	08017ad5 	.word	0x08017ad5
 8017b10:	08017ad5 	.word	0x08017ad5
 8017b14:	08017ad5 	.word	0x08017ad5
 8017b18:	08017c57 	.word	0x08017c57
 8017b1c:	08017b83 	.word	0x08017b83
 8017b20:	08017c11 	.word	0x08017c11
 8017b24:	08017ad5 	.word	0x08017ad5
 8017b28:	08017ad5 	.word	0x08017ad5
 8017b2c:	08017c79 	.word	0x08017c79
 8017b30:	08017ad5 	.word	0x08017ad5
 8017b34:	08017b83 	.word	0x08017b83
 8017b38:	08017ad5 	.word	0x08017ad5
 8017b3c:	08017ad5 	.word	0x08017ad5
 8017b40:	08017c19 	.word	0x08017c19
 8017b44:	6833      	ldr	r3, [r6, #0]
 8017b46:	1d1a      	adds	r2, r3, #4
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	6032      	str	r2, [r6, #0]
 8017b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017b54:	2301      	movs	r3, #1
 8017b56:	e09c      	b.n	8017c92 <_printf_i+0x1e6>
 8017b58:	6833      	ldr	r3, [r6, #0]
 8017b5a:	6820      	ldr	r0, [r4, #0]
 8017b5c:	1d19      	adds	r1, r3, #4
 8017b5e:	6031      	str	r1, [r6, #0]
 8017b60:	0606      	lsls	r6, r0, #24
 8017b62:	d501      	bpl.n	8017b68 <_printf_i+0xbc>
 8017b64:	681d      	ldr	r5, [r3, #0]
 8017b66:	e003      	b.n	8017b70 <_printf_i+0xc4>
 8017b68:	0645      	lsls	r5, r0, #25
 8017b6a:	d5fb      	bpl.n	8017b64 <_printf_i+0xb8>
 8017b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017b70:	2d00      	cmp	r5, #0
 8017b72:	da03      	bge.n	8017b7c <_printf_i+0xd0>
 8017b74:	232d      	movs	r3, #45	@ 0x2d
 8017b76:	426d      	negs	r5, r5
 8017b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b7c:	4858      	ldr	r0, [pc, #352]	@ (8017ce0 <_printf_i+0x234>)
 8017b7e:	230a      	movs	r3, #10
 8017b80:	e011      	b.n	8017ba6 <_printf_i+0xfa>
 8017b82:	6821      	ldr	r1, [r4, #0]
 8017b84:	6833      	ldr	r3, [r6, #0]
 8017b86:	0608      	lsls	r0, r1, #24
 8017b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8017b8c:	d402      	bmi.n	8017b94 <_printf_i+0xe8>
 8017b8e:	0649      	lsls	r1, r1, #25
 8017b90:	bf48      	it	mi
 8017b92:	b2ad      	uxthmi	r5, r5
 8017b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8017b96:	4852      	ldr	r0, [pc, #328]	@ (8017ce0 <_printf_i+0x234>)
 8017b98:	6033      	str	r3, [r6, #0]
 8017b9a:	bf14      	ite	ne
 8017b9c:	230a      	movne	r3, #10
 8017b9e:	2308      	moveq	r3, #8
 8017ba0:	2100      	movs	r1, #0
 8017ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017ba6:	6866      	ldr	r6, [r4, #4]
 8017ba8:	60a6      	str	r6, [r4, #8]
 8017baa:	2e00      	cmp	r6, #0
 8017bac:	db05      	blt.n	8017bba <_printf_i+0x10e>
 8017bae:	6821      	ldr	r1, [r4, #0]
 8017bb0:	432e      	orrs	r6, r5
 8017bb2:	f021 0104 	bic.w	r1, r1, #4
 8017bb6:	6021      	str	r1, [r4, #0]
 8017bb8:	d04b      	beq.n	8017c52 <_printf_i+0x1a6>
 8017bba:	4616      	mov	r6, r2
 8017bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8017bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8017bc4:	5dc7      	ldrb	r7, [r0, r7]
 8017bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017bca:	462f      	mov	r7, r5
 8017bcc:	42bb      	cmp	r3, r7
 8017bce:	460d      	mov	r5, r1
 8017bd0:	d9f4      	bls.n	8017bbc <_printf_i+0x110>
 8017bd2:	2b08      	cmp	r3, #8
 8017bd4:	d10b      	bne.n	8017bee <_printf_i+0x142>
 8017bd6:	6823      	ldr	r3, [r4, #0]
 8017bd8:	07df      	lsls	r7, r3, #31
 8017bda:	d508      	bpl.n	8017bee <_printf_i+0x142>
 8017bdc:	6923      	ldr	r3, [r4, #16]
 8017bde:	6861      	ldr	r1, [r4, #4]
 8017be0:	4299      	cmp	r1, r3
 8017be2:	bfde      	ittt	le
 8017be4:	2330      	movle	r3, #48	@ 0x30
 8017be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017bee:	1b92      	subs	r2, r2, r6
 8017bf0:	6122      	str	r2, [r4, #16]
 8017bf2:	f8cd a000 	str.w	sl, [sp]
 8017bf6:	464b      	mov	r3, r9
 8017bf8:	aa03      	add	r2, sp, #12
 8017bfa:	4621      	mov	r1, r4
 8017bfc:	4640      	mov	r0, r8
 8017bfe:	f7ff fee7 	bl	80179d0 <_printf_common>
 8017c02:	3001      	adds	r0, #1
 8017c04:	d14a      	bne.n	8017c9c <_printf_i+0x1f0>
 8017c06:	f04f 30ff 	mov.w	r0, #4294967295
 8017c0a:	b004      	add	sp, #16
 8017c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c10:	6823      	ldr	r3, [r4, #0]
 8017c12:	f043 0320 	orr.w	r3, r3, #32
 8017c16:	6023      	str	r3, [r4, #0]
 8017c18:	4832      	ldr	r0, [pc, #200]	@ (8017ce4 <_printf_i+0x238>)
 8017c1a:	2778      	movs	r7, #120	@ 0x78
 8017c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017c20:	6823      	ldr	r3, [r4, #0]
 8017c22:	6831      	ldr	r1, [r6, #0]
 8017c24:	061f      	lsls	r7, r3, #24
 8017c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8017c2a:	d402      	bmi.n	8017c32 <_printf_i+0x186>
 8017c2c:	065f      	lsls	r7, r3, #25
 8017c2e:	bf48      	it	mi
 8017c30:	b2ad      	uxthmi	r5, r5
 8017c32:	6031      	str	r1, [r6, #0]
 8017c34:	07d9      	lsls	r1, r3, #31
 8017c36:	bf44      	itt	mi
 8017c38:	f043 0320 	orrmi.w	r3, r3, #32
 8017c3c:	6023      	strmi	r3, [r4, #0]
 8017c3e:	b11d      	cbz	r5, 8017c48 <_printf_i+0x19c>
 8017c40:	2310      	movs	r3, #16
 8017c42:	e7ad      	b.n	8017ba0 <_printf_i+0xf4>
 8017c44:	4826      	ldr	r0, [pc, #152]	@ (8017ce0 <_printf_i+0x234>)
 8017c46:	e7e9      	b.n	8017c1c <_printf_i+0x170>
 8017c48:	6823      	ldr	r3, [r4, #0]
 8017c4a:	f023 0320 	bic.w	r3, r3, #32
 8017c4e:	6023      	str	r3, [r4, #0]
 8017c50:	e7f6      	b.n	8017c40 <_printf_i+0x194>
 8017c52:	4616      	mov	r6, r2
 8017c54:	e7bd      	b.n	8017bd2 <_printf_i+0x126>
 8017c56:	6833      	ldr	r3, [r6, #0]
 8017c58:	6825      	ldr	r5, [r4, #0]
 8017c5a:	6961      	ldr	r1, [r4, #20]
 8017c5c:	1d18      	adds	r0, r3, #4
 8017c5e:	6030      	str	r0, [r6, #0]
 8017c60:	062e      	lsls	r6, r5, #24
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	d501      	bpl.n	8017c6a <_printf_i+0x1be>
 8017c66:	6019      	str	r1, [r3, #0]
 8017c68:	e002      	b.n	8017c70 <_printf_i+0x1c4>
 8017c6a:	0668      	lsls	r0, r5, #25
 8017c6c:	d5fb      	bpl.n	8017c66 <_printf_i+0x1ba>
 8017c6e:	8019      	strh	r1, [r3, #0]
 8017c70:	2300      	movs	r3, #0
 8017c72:	6123      	str	r3, [r4, #16]
 8017c74:	4616      	mov	r6, r2
 8017c76:	e7bc      	b.n	8017bf2 <_printf_i+0x146>
 8017c78:	6833      	ldr	r3, [r6, #0]
 8017c7a:	1d1a      	adds	r2, r3, #4
 8017c7c:	6032      	str	r2, [r6, #0]
 8017c7e:	681e      	ldr	r6, [r3, #0]
 8017c80:	6862      	ldr	r2, [r4, #4]
 8017c82:	2100      	movs	r1, #0
 8017c84:	4630      	mov	r0, r6
 8017c86:	f7e8 faf3 	bl	8000270 <memchr>
 8017c8a:	b108      	cbz	r0, 8017c90 <_printf_i+0x1e4>
 8017c8c:	1b80      	subs	r0, r0, r6
 8017c8e:	6060      	str	r0, [r4, #4]
 8017c90:	6863      	ldr	r3, [r4, #4]
 8017c92:	6123      	str	r3, [r4, #16]
 8017c94:	2300      	movs	r3, #0
 8017c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c9a:	e7aa      	b.n	8017bf2 <_printf_i+0x146>
 8017c9c:	6923      	ldr	r3, [r4, #16]
 8017c9e:	4632      	mov	r2, r6
 8017ca0:	4649      	mov	r1, r9
 8017ca2:	4640      	mov	r0, r8
 8017ca4:	47d0      	blx	sl
 8017ca6:	3001      	adds	r0, #1
 8017ca8:	d0ad      	beq.n	8017c06 <_printf_i+0x15a>
 8017caa:	6823      	ldr	r3, [r4, #0]
 8017cac:	079b      	lsls	r3, r3, #30
 8017cae:	d413      	bmi.n	8017cd8 <_printf_i+0x22c>
 8017cb0:	68e0      	ldr	r0, [r4, #12]
 8017cb2:	9b03      	ldr	r3, [sp, #12]
 8017cb4:	4298      	cmp	r0, r3
 8017cb6:	bfb8      	it	lt
 8017cb8:	4618      	movlt	r0, r3
 8017cba:	e7a6      	b.n	8017c0a <_printf_i+0x15e>
 8017cbc:	2301      	movs	r3, #1
 8017cbe:	4632      	mov	r2, r6
 8017cc0:	4649      	mov	r1, r9
 8017cc2:	4640      	mov	r0, r8
 8017cc4:	47d0      	blx	sl
 8017cc6:	3001      	adds	r0, #1
 8017cc8:	d09d      	beq.n	8017c06 <_printf_i+0x15a>
 8017cca:	3501      	adds	r5, #1
 8017ccc:	68e3      	ldr	r3, [r4, #12]
 8017cce:	9903      	ldr	r1, [sp, #12]
 8017cd0:	1a5b      	subs	r3, r3, r1
 8017cd2:	42ab      	cmp	r3, r5
 8017cd4:	dcf2      	bgt.n	8017cbc <_printf_i+0x210>
 8017cd6:	e7eb      	b.n	8017cb0 <_printf_i+0x204>
 8017cd8:	2500      	movs	r5, #0
 8017cda:	f104 0619 	add.w	r6, r4, #25
 8017cde:	e7f5      	b.n	8017ccc <_printf_i+0x220>
 8017ce0:	080187b4 	.word	0x080187b4
 8017ce4:	080187c5 	.word	0x080187c5

08017ce8 <__sflush_r>:
 8017ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf0:	0716      	lsls	r6, r2, #28
 8017cf2:	4605      	mov	r5, r0
 8017cf4:	460c      	mov	r4, r1
 8017cf6:	d454      	bmi.n	8017da2 <__sflush_r+0xba>
 8017cf8:	684b      	ldr	r3, [r1, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	dc02      	bgt.n	8017d04 <__sflush_r+0x1c>
 8017cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	dd48      	ble.n	8017d96 <__sflush_r+0xae>
 8017d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d06:	2e00      	cmp	r6, #0
 8017d08:	d045      	beq.n	8017d96 <__sflush_r+0xae>
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017d10:	682f      	ldr	r7, [r5, #0]
 8017d12:	6a21      	ldr	r1, [r4, #32]
 8017d14:	602b      	str	r3, [r5, #0]
 8017d16:	d030      	beq.n	8017d7a <__sflush_r+0x92>
 8017d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017d1a:	89a3      	ldrh	r3, [r4, #12]
 8017d1c:	0759      	lsls	r1, r3, #29
 8017d1e:	d505      	bpl.n	8017d2c <__sflush_r+0x44>
 8017d20:	6863      	ldr	r3, [r4, #4]
 8017d22:	1ad2      	subs	r2, r2, r3
 8017d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017d26:	b10b      	cbz	r3, 8017d2c <__sflush_r+0x44>
 8017d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017d2a:	1ad2      	subs	r2, r2, r3
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d30:	6a21      	ldr	r1, [r4, #32]
 8017d32:	4628      	mov	r0, r5
 8017d34:	47b0      	blx	r6
 8017d36:	1c43      	adds	r3, r0, #1
 8017d38:	89a3      	ldrh	r3, [r4, #12]
 8017d3a:	d106      	bne.n	8017d4a <__sflush_r+0x62>
 8017d3c:	6829      	ldr	r1, [r5, #0]
 8017d3e:	291d      	cmp	r1, #29
 8017d40:	d82b      	bhi.n	8017d9a <__sflush_r+0xb2>
 8017d42:	4a2a      	ldr	r2, [pc, #168]	@ (8017dec <__sflush_r+0x104>)
 8017d44:	40ca      	lsrs	r2, r1
 8017d46:	07d6      	lsls	r6, r2, #31
 8017d48:	d527      	bpl.n	8017d9a <__sflush_r+0xb2>
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	6062      	str	r2, [r4, #4]
 8017d4e:	04d9      	lsls	r1, r3, #19
 8017d50:	6922      	ldr	r2, [r4, #16]
 8017d52:	6022      	str	r2, [r4, #0]
 8017d54:	d504      	bpl.n	8017d60 <__sflush_r+0x78>
 8017d56:	1c42      	adds	r2, r0, #1
 8017d58:	d101      	bne.n	8017d5e <__sflush_r+0x76>
 8017d5a:	682b      	ldr	r3, [r5, #0]
 8017d5c:	b903      	cbnz	r3, 8017d60 <__sflush_r+0x78>
 8017d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d62:	602f      	str	r7, [r5, #0]
 8017d64:	b1b9      	cbz	r1, 8017d96 <__sflush_r+0xae>
 8017d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d6a:	4299      	cmp	r1, r3
 8017d6c:	d002      	beq.n	8017d74 <__sflush_r+0x8c>
 8017d6e:	4628      	mov	r0, r5
 8017d70:	f7ff fbd6 	bl	8017520 <_free_r>
 8017d74:	2300      	movs	r3, #0
 8017d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d78:	e00d      	b.n	8017d96 <__sflush_r+0xae>
 8017d7a:	2301      	movs	r3, #1
 8017d7c:	4628      	mov	r0, r5
 8017d7e:	47b0      	blx	r6
 8017d80:	4602      	mov	r2, r0
 8017d82:	1c50      	adds	r0, r2, #1
 8017d84:	d1c9      	bne.n	8017d1a <__sflush_r+0x32>
 8017d86:	682b      	ldr	r3, [r5, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d0c6      	beq.n	8017d1a <__sflush_r+0x32>
 8017d8c:	2b1d      	cmp	r3, #29
 8017d8e:	d001      	beq.n	8017d94 <__sflush_r+0xac>
 8017d90:	2b16      	cmp	r3, #22
 8017d92:	d11e      	bne.n	8017dd2 <__sflush_r+0xea>
 8017d94:	602f      	str	r7, [r5, #0]
 8017d96:	2000      	movs	r0, #0
 8017d98:	e022      	b.n	8017de0 <__sflush_r+0xf8>
 8017d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d9e:	b21b      	sxth	r3, r3
 8017da0:	e01b      	b.n	8017dda <__sflush_r+0xf2>
 8017da2:	690f      	ldr	r7, [r1, #16]
 8017da4:	2f00      	cmp	r7, #0
 8017da6:	d0f6      	beq.n	8017d96 <__sflush_r+0xae>
 8017da8:	0793      	lsls	r3, r2, #30
 8017daa:	680e      	ldr	r6, [r1, #0]
 8017dac:	bf08      	it	eq
 8017dae:	694b      	ldreq	r3, [r1, #20]
 8017db0:	600f      	str	r7, [r1, #0]
 8017db2:	bf18      	it	ne
 8017db4:	2300      	movne	r3, #0
 8017db6:	eba6 0807 	sub.w	r8, r6, r7
 8017dba:	608b      	str	r3, [r1, #8]
 8017dbc:	f1b8 0f00 	cmp.w	r8, #0
 8017dc0:	dde9      	ble.n	8017d96 <__sflush_r+0xae>
 8017dc2:	6a21      	ldr	r1, [r4, #32]
 8017dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017dc6:	4643      	mov	r3, r8
 8017dc8:	463a      	mov	r2, r7
 8017dca:	4628      	mov	r0, r5
 8017dcc:	47b0      	blx	r6
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	dc08      	bgt.n	8017de4 <__sflush_r+0xfc>
 8017dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017dda:	81a3      	strh	r3, [r4, #12]
 8017ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8017de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017de4:	4407      	add	r7, r0
 8017de6:	eba8 0800 	sub.w	r8, r8, r0
 8017dea:	e7e7      	b.n	8017dbc <__sflush_r+0xd4>
 8017dec:	20400001 	.word	0x20400001

08017df0 <_fflush_r>:
 8017df0:	b538      	push	{r3, r4, r5, lr}
 8017df2:	690b      	ldr	r3, [r1, #16]
 8017df4:	4605      	mov	r5, r0
 8017df6:	460c      	mov	r4, r1
 8017df8:	b913      	cbnz	r3, 8017e00 <_fflush_r+0x10>
 8017dfa:	2500      	movs	r5, #0
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	bd38      	pop	{r3, r4, r5, pc}
 8017e00:	b118      	cbz	r0, 8017e0a <_fflush_r+0x1a>
 8017e02:	6a03      	ldr	r3, [r0, #32]
 8017e04:	b90b      	cbnz	r3, 8017e0a <_fflush_r+0x1a>
 8017e06:	f7ff f9ab 	bl	8017160 <__sinit>
 8017e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d0f3      	beq.n	8017dfa <_fflush_r+0xa>
 8017e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017e14:	07d0      	lsls	r0, r2, #31
 8017e16:	d404      	bmi.n	8017e22 <_fflush_r+0x32>
 8017e18:	0599      	lsls	r1, r3, #22
 8017e1a:	d402      	bmi.n	8017e22 <_fflush_r+0x32>
 8017e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e1e:	f7ff fb50 	bl	80174c2 <__retarget_lock_acquire_recursive>
 8017e22:	4628      	mov	r0, r5
 8017e24:	4621      	mov	r1, r4
 8017e26:	f7ff ff5f 	bl	8017ce8 <__sflush_r>
 8017e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017e2c:	07da      	lsls	r2, r3, #31
 8017e2e:	4605      	mov	r5, r0
 8017e30:	d4e4      	bmi.n	8017dfc <_fflush_r+0xc>
 8017e32:	89a3      	ldrh	r3, [r4, #12]
 8017e34:	059b      	lsls	r3, r3, #22
 8017e36:	d4e1      	bmi.n	8017dfc <_fflush_r+0xc>
 8017e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e3a:	f7ff fb43 	bl	80174c4 <__retarget_lock_release_recursive>
 8017e3e:	e7dd      	b.n	8017dfc <_fflush_r+0xc>

08017e40 <fiprintf>:
 8017e40:	b40e      	push	{r1, r2, r3}
 8017e42:	b503      	push	{r0, r1, lr}
 8017e44:	4601      	mov	r1, r0
 8017e46:	ab03      	add	r3, sp, #12
 8017e48:	4805      	ldr	r0, [pc, #20]	@ (8017e60 <fiprintf+0x20>)
 8017e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e4e:	6800      	ldr	r0, [r0, #0]
 8017e50:	9301      	str	r3, [sp, #4]
 8017e52:	f000 f875 	bl	8017f40 <_vfiprintf_r>
 8017e56:	b002      	add	sp, #8
 8017e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e5c:	b003      	add	sp, #12
 8017e5e:	4770      	bx	lr
 8017e60:	2000002c 	.word	0x2000002c

08017e64 <_sbrk_r>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4d06      	ldr	r5, [pc, #24]	@ (8017e80 <_sbrk_r+0x1c>)
 8017e68:	2300      	movs	r3, #0
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	4608      	mov	r0, r1
 8017e6e:	602b      	str	r3, [r5, #0]
 8017e70:	f7e9 feda 	bl	8001c28 <_sbrk>
 8017e74:	1c43      	adds	r3, r0, #1
 8017e76:	d102      	bne.n	8017e7e <_sbrk_r+0x1a>
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	b103      	cbz	r3, 8017e7e <_sbrk_r+0x1a>
 8017e7c:	6023      	str	r3, [r4, #0]
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	20009834 	.word	0x20009834

08017e84 <abort>:
 8017e84:	b508      	push	{r3, lr}
 8017e86:	2006      	movs	r0, #6
 8017e88:	f000 fa2e 	bl	80182e8 <raise>
 8017e8c:	2001      	movs	r0, #1
 8017e8e:	f7e9 fe6f 	bl	8001b70 <_exit>

08017e92 <_realloc_r>:
 8017e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e96:	4607      	mov	r7, r0
 8017e98:	4614      	mov	r4, r2
 8017e9a:	460d      	mov	r5, r1
 8017e9c:	b921      	cbnz	r1, 8017ea8 <_realloc_r+0x16>
 8017e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ea2:	4611      	mov	r1, r2
 8017ea4:	f7ff bbb0 	b.w	8017608 <_malloc_r>
 8017ea8:	b92a      	cbnz	r2, 8017eb6 <_realloc_r+0x24>
 8017eaa:	f7ff fb39 	bl	8017520 <_free_r>
 8017eae:	4625      	mov	r5, r4
 8017eb0:	4628      	mov	r0, r5
 8017eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017eb6:	f000 fa33 	bl	8018320 <_malloc_usable_size_r>
 8017eba:	4284      	cmp	r4, r0
 8017ebc:	4606      	mov	r6, r0
 8017ebe:	d802      	bhi.n	8017ec6 <_realloc_r+0x34>
 8017ec0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017ec4:	d8f4      	bhi.n	8017eb0 <_realloc_r+0x1e>
 8017ec6:	4621      	mov	r1, r4
 8017ec8:	4638      	mov	r0, r7
 8017eca:	f7ff fb9d 	bl	8017608 <_malloc_r>
 8017ece:	4680      	mov	r8, r0
 8017ed0:	b908      	cbnz	r0, 8017ed6 <_realloc_r+0x44>
 8017ed2:	4645      	mov	r5, r8
 8017ed4:	e7ec      	b.n	8017eb0 <_realloc_r+0x1e>
 8017ed6:	42b4      	cmp	r4, r6
 8017ed8:	4622      	mov	r2, r4
 8017eda:	4629      	mov	r1, r5
 8017edc:	bf28      	it	cs
 8017ede:	4632      	movcs	r2, r6
 8017ee0:	f7ff faf1 	bl	80174c6 <memcpy>
 8017ee4:	4629      	mov	r1, r5
 8017ee6:	4638      	mov	r0, r7
 8017ee8:	f7ff fb1a 	bl	8017520 <_free_r>
 8017eec:	e7f1      	b.n	8017ed2 <_realloc_r+0x40>

08017eee <__sfputc_r>:
 8017eee:	6893      	ldr	r3, [r2, #8]
 8017ef0:	3b01      	subs	r3, #1
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	b410      	push	{r4}
 8017ef6:	6093      	str	r3, [r2, #8]
 8017ef8:	da08      	bge.n	8017f0c <__sfputc_r+0x1e>
 8017efa:	6994      	ldr	r4, [r2, #24]
 8017efc:	42a3      	cmp	r3, r4
 8017efe:	db01      	blt.n	8017f04 <__sfputc_r+0x16>
 8017f00:	290a      	cmp	r1, #10
 8017f02:	d103      	bne.n	8017f0c <__sfputc_r+0x1e>
 8017f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f08:	f000 b932 	b.w	8018170 <__swbuf_r>
 8017f0c:	6813      	ldr	r3, [r2, #0]
 8017f0e:	1c58      	adds	r0, r3, #1
 8017f10:	6010      	str	r0, [r2, #0]
 8017f12:	7019      	strb	r1, [r3, #0]
 8017f14:	4608      	mov	r0, r1
 8017f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f1a:	4770      	bx	lr

08017f1c <__sfputs_r>:
 8017f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f1e:	4606      	mov	r6, r0
 8017f20:	460f      	mov	r7, r1
 8017f22:	4614      	mov	r4, r2
 8017f24:	18d5      	adds	r5, r2, r3
 8017f26:	42ac      	cmp	r4, r5
 8017f28:	d101      	bne.n	8017f2e <__sfputs_r+0x12>
 8017f2a:	2000      	movs	r0, #0
 8017f2c:	e007      	b.n	8017f3e <__sfputs_r+0x22>
 8017f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f32:	463a      	mov	r2, r7
 8017f34:	4630      	mov	r0, r6
 8017f36:	f7ff ffda 	bl	8017eee <__sfputc_r>
 8017f3a:	1c43      	adds	r3, r0, #1
 8017f3c:	d1f3      	bne.n	8017f26 <__sfputs_r+0xa>
 8017f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017f40 <_vfiprintf_r>:
 8017f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f44:	460d      	mov	r5, r1
 8017f46:	b09d      	sub	sp, #116	@ 0x74
 8017f48:	4614      	mov	r4, r2
 8017f4a:	4698      	mov	r8, r3
 8017f4c:	4606      	mov	r6, r0
 8017f4e:	b118      	cbz	r0, 8017f58 <_vfiprintf_r+0x18>
 8017f50:	6a03      	ldr	r3, [r0, #32]
 8017f52:	b90b      	cbnz	r3, 8017f58 <_vfiprintf_r+0x18>
 8017f54:	f7ff f904 	bl	8017160 <__sinit>
 8017f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f5a:	07d9      	lsls	r1, r3, #31
 8017f5c:	d405      	bmi.n	8017f6a <_vfiprintf_r+0x2a>
 8017f5e:	89ab      	ldrh	r3, [r5, #12]
 8017f60:	059a      	lsls	r2, r3, #22
 8017f62:	d402      	bmi.n	8017f6a <_vfiprintf_r+0x2a>
 8017f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f66:	f7ff faac 	bl	80174c2 <__retarget_lock_acquire_recursive>
 8017f6a:	89ab      	ldrh	r3, [r5, #12]
 8017f6c:	071b      	lsls	r3, r3, #28
 8017f6e:	d501      	bpl.n	8017f74 <_vfiprintf_r+0x34>
 8017f70:	692b      	ldr	r3, [r5, #16]
 8017f72:	b99b      	cbnz	r3, 8017f9c <_vfiprintf_r+0x5c>
 8017f74:	4629      	mov	r1, r5
 8017f76:	4630      	mov	r0, r6
 8017f78:	f000 f938 	bl	80181ec <__swsetup_r>
 8017f7c:	b170      	cbz	r0, 8017f9c <_vfiprintf_r+0x5c>
 8017f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f80:	07dc      	lsls	r4, r3, #31
 8017f82:	d504      	bpl.n	8017f8e <_vfiprintf_r+0x4e>
 8017f84:	f04f 30ff 	mov.w	r0, #4294967295
 8017f88:	b01d      	add	sp, #116	@ 0x74
 8017f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f8e:	89ab      	ldrh	r3, [r5, #12]
 8017f90:	0598      	lsls	r0, r3, #22
 8017f92:	d4f7      	bmi.n	8017f84 <_vfiprintf_r+0x44>
 8017f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f96:	f7ff fa95 	bl	80174c4 <__retarget_lock_release_recursive>
 8017f9a:	e7f3      	b.n	8017f84 <_vfiprintf_r+0x44>
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fa0:	2320      	movs	r3, #32
 8017fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8017faa:	2330      	movs	r3, #48	@ 0x30
 8017fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801815c <_vfiprintf_r+0x21c>
 8017fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017fb4:	f04f 0901 	mov.w	r9, #1
 8017fb8:	4623      	mov	r3, r4
 8017fba:	469a      	mov	sl, r3
 8017fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fc0:	b10a      	cbz	r2, 8017fc6 <_vfiprintf_r+0x86>
 8017fc2:	2a25      	cmp	r2, #37	@ 0x25
 8017fc4:	d1f9      	bne.n	8017fba <_vfiprintf_r+0x7a>
 8017fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8017fca:	d00b      	beq.n	8017fe4 <_vfiprintf_r+0xa4>
 8017fcc:	465b      	mov	r3, fp
 8017fce:	4622      	mov	r2, r4
 8017fd0:	4629      	mov	r1, r5
 8017fd2:	4630      	mov	r0, r6
 8017fd4:	f7ff ffa2 	bl	8017f1c <__sfputs_r>
 8017fd8:	3001      	adds	r0, #1
 8017fda:	f000 80a7 	beq.w	801812c <_vfiprintf_r+0x1ec>
 8017fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017fe0:	445a      	add	r2, fp
 8017fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8017fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	f000 809f 	beq.w	801812c <_vfiprintf_r+0x1ec>
 8017fee:	2300      	movs	r3, #0
 8017ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ff8:	f10a 0a01 	add.w	sl, sl, #1
 8017ffc:	9304      	str	r3, [sp, #16]
 8017ffe:	9307      	str	r3, [sp, #28]
 8018000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018004:	931a      	str	r3, [sp, #104]	@ 0x68
 8018006:	4654      	mov	r4, sl
 8018008:	2205      	movs	r2, #5
 801800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801800e:	4853      	ldr	r0, [pc, #332]	@ (801815c <_vfiprintf_r+0x21c>)
 8018010:	f7e8 f92e 	bl	8000270 <memchr>
 8018014:	9a04      	ldr	r2, [sp, #16]
 8018016:	b9d8      	cbnz	r0, 8018050 <_vfiprintf_r+0x110>
 8018018:	06d1      	lsls	r1, r2, #27
 801801a:	bf44      	itt	mi
 801801c:	2320      	movmi	r3, #32
 801801e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018022:	0713      	lsls	r3, r2, #28
 8018024:	bf44      	itt	mi
 8018026:	232b      	movmi	r3, #43	@ 0x2b
 8018028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801802c:	f89a 3000 	ldrb.w	r3, [sl]
 8018030:	2b2a      	cmp	r3, #42	@ 0x2a
 8018032:	d015      	beq.n	8018060 <_vfiprintf_r+0x120>
 8018034:	9a07      	ldr	r2, [sp, #28]
 8018036:	4654      	mov	r4, sl
 8018038:	2000      	movs	r0, #0
 801803a:	f04f 0c0a 	mov.w	ip, #10
 801803e:	4621      	mov	r1, r4
 8018040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018044:	3b30      	subs	r3, #48	@ 0x30
 8018046:	2b09      	cmp	r3, #9
 8018048:	d94b      	bls.n	80180e2 <_vfiprintf_r+0x1a2>
 801804a:	b1b0      	cbz	r0, 801807a <_vfiprintf_r+0x13a>
 801804c:	9207      	str	r2, [sp, #28]
 801804e:	e014      	b.n	801807a <_vfiprintf_r+0x13a>
 8018050:	eba0 0308 	sub.w	r3, r0, r8
 8018054:	fa09 f303 	lsl.w	r3, r9, r3
 8018058:	4313      	orrs	r3, r2
 801805a:	9304      	str	r3, [sp, #16]
 801805c:	46a2      	mov	sl, r4
 801805e:	e7d2      	b.n	8018006 <_vfiprintf_r+0xc6>
 8018060:	9b03      	ldr	r3, [sp, #12]
 8018062:	1d19      	adds	r1, r3, #4
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	9103      	str	r1, [sp, #12]
 8018068:	2b00      	cmp	r3, #0
 801806a:	bfbb      	ittet	lt
 801806c:	425b      	neglt	r3, r3
 801806e:	f042 0202 	orrlt.w	r2, r2, #2
 8018072:	9307      	strge	r3, [sp, #28]
 8018074:	9307      	strlt	r3, [sp, #28]
 8018076:	bfb8      	it	lt
 8018078:	9204      	strlt	r2, [sp, #16]
 801807a:	7823      	ldrb	r3, [r4, #0]
 801807c:	2b2e      	cmp	r3, #46	@ 0x2e
 801807e:	d10a      	bne.n	8018096 <_vfiprintf_r+0x156>
 8018080:	7863      	ldrb	r3, [r4, #1]
 8018082:	2b2a      	cmp	r3, #42	@ 0x2a
 8018084:	d132      	bne.n	80180ec <_vfiprintf_r+0x1ac>
 8018086:	9b03      	ldr	r3, [sp, #12]
 8018088:	1d1a      	adds	r2, r3, #4
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	9203      	str	r2, [sp, #12]
 801808e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018092:	3402      	adds	r4, #2
 8018094:	9305      	str	r3, [sp, #20]
 8018096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801816c <_vfiprintf_r+0x22c>
 801809a:	7821      	ldrb	r1, [r4, #0]
 801809c:	2203      	movs	r2, #3
 801809e:	4650      	mov	r0, sl
 80180a0:	f7e8 f8e6 	bl	8000270 <memchr>
 80180a4:	b138      	cbz	r0, 80180b6 <_vfiprintf_r+0x176>
 80180a6:	9b04      	ldr	r3, [sp, #16]
 80180a8:	eba0 000a 	sub.w	r0, r0, sl
 80180ac:	2240      	movs	r2, #64	@ 0x40
 80180ae:	4082      	lsls	r2, r0
 80180b0:	4313      	orrs	r3, r2
 80180b2:	3401      	adds	r4, #1
 80180b4:	9304      	str	r3, [sp, #16]
 80180b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180ba:	4829      	ldr	r0, [pc, #164]	@ (8018160 <_vfiprintf_r+0x220>)
 80180bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80180c0:	2206      	movs	r2, #6
 80180c2:	f7e8 f8d5 	bl	8000270 <memchr>
 80180c6:	2800      	cmp	r0, #0
 80180c8:	d03f      	beq.n	801814a <_vfiprintf_r+0x20a>
 80180ca:	4b26      	ldr	r3, [pc, #152]	@ (8018164 <_vfiprintf_r+0x224>)
 80180cc:	bb1b      	cbnz	r3, 8018116 <_vfiprintf_r+0x1d6>
 80180ce:	9b03      	ldr	r3, [sp, #12]
 80180d0:	3307      	adds	r3, #7
 80180d2:	f023 0307 	bic.w	r3, r3, #7
 80180d6:	3308      	adds	r3, #8
 80180d8:	9303      	str	r3, [sp, #12]
 80180da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180dc:	443b      	add	r3, r7
 80180de:	9309      	str	r3, [sp, #36]	@ 0x24
 80180e0:	e76a      	b.n	8017fb8 <_vfiprintf_r+0x78>
 80180e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80180e6:	460c      	mov	r4, r1
 80180e8:	2001      	movs	r0, #1
 80180ea:	e7a8      	b.n	801803e <_vfiprintf_r+0xfe>
 80180ec:	2300      	movs	r3, #0
 80180ee:	3401      	adds	r4, #1
 80180f0:	9305      	str	r3, [sp, #20]
 80180f2:	4619      	mov	r1, r3
 80180f4:	f04f 0c0a 	mov.w	ip, #10
 80180f8:	4620      	mov	r0, r4
 80180fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180fe:	3a30      	subs	r2, #48	@ 0x30
 8018100:	2a09      	cmp	r2, #9
 8018102:	d903      	bls.n	801810c <_vfiprintf_r+0x1cc>
 8018104:	2b00      	cmp	r3, #0
 8018106:	d0c6      	beq.n	8018096 <_vfiprintf_r+0x156>
 8018108:	9105      	str	r1, [sp, #20]
 801810a:	e7c4      	b.n	8018096 <_vfiprintf_r+0x156>
 801810c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018110:	4604      	mov	r4, r0
 8018112:	2301      	movs	r3, #1
 8018114:	e7f0      	b.n	80180f8 <_vfiprintf_r+0x1b8>
 8018116:	ab03      	add	r3, sp, #12
 8018118:	9300      	str	r3, [sp, #0]
 801811a:	462a      	mov	r2, r5
 801811c:	4b12      	ldr	r3, [pc, #72]	@ (8018168 <_vfiprintf_r+0x228>)
 801811e:	a904      	add	r1, sp, #16
 8018120:	4630      	mov	r0, r6
 8018122:	f3af 8000 	nop.w
 8018126:	4607      	mov	r7, r0
 8018128:	1c78      	adds	r0, r7, #1
 801812a:	d1d6      	bne.n	80180da <_vfiprintf_r+0x19a>
 801812c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801812e:	07d9      	lsls	r1, r3, #31
 8018130:	d405      	bmi.n	801813e <_vfiprintf_r+0x1fe>
 8018132:	89ab      	ldrh	r3, [r5, #12]
 8018134:	059a      	lsls	r2, r3, #22
 8018136:	d402      	bmi.n	801813e <_vfiprintf_r+0x1fe>
 8018138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801813a:	f7ff f9c3 	bl	80174c4 <__retarget_lock_release_recursive>
 801813e:	89ab      	ldrh	r3, [r5, #12]
 8018140:	065b      	lsls	r3, r3, #25
 8018142:	f53f af1f 	bmi.w	8017f84 <_vfiprintf_r+0x44>
 8018146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018148:	e71e      	b.n	8017f88 <_vfiprintf_r+0x48>
 801814a:	ab03      	add	r3, sp, #12
 801814c:	9300      	str	r3, [sp, #0]
 801814e:	462a      	mov	r2, r5
 8018150:	4b05      	ldr	r3, [pc, #20]	@ (8018168 <_vfiprintf_r+0x228>)
 8018152:	a904      	add	r1, sp, #16
 8018154:	4630      	mov	r0, r6
 8018156:	f7ff fca9 	bl	8017aac <_printf_i>
 801815a:	e7e4      	b.n	8018126 <_vfiprintf_r+0x1e6>
 801815c:	080187a3 	.word	0x080187a3
 8018160:	080187ad 	.word	0x080187ad
 8018164:	00000000 	.word	0x00000000
 8018168:	08017f1d 	.word	0x08017f1d
 801816c:	080187a9 	.word	0x080187a9

08018170 <__swbuf_r>:
 8018170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018172:	460e      	mov	r6, r1
 8018174:	4614      	mov	r4, r2
 8018176:	4605      	mov	r5, r0
 8018178:	b118      	cbz	r0, 8018182 <__swbuf_r+0x12>
 801817a:	6a03      	ldr	r3, [r0, #32]
 801817c:	b90b      	cbnz	r3, 8018182 <__swbuf_r+0x12>
 801817e:	f7fe ffef 	bl	8017160 <__sinit>
 8018182:	69a3      	ldr	r3, [r4, #24]
 8018184:	60a3      	str	r3, [r4, #8]
 8018186:	89a3      	ldrh	r3, [r4, #12]
 8018188:	071a      	lsls	r2, r3, #28
 801818a:	d501      	bpl.n	8018190 <__swbuf_r+0x20>
 801818c:	6923      	ldr	r3, [r4, #16]
 801818e:	b943      	cbnz	r3, 80181a2 <__swbuf_r+0x32>
 8018190:	4621      	mov	r1, r4
 8018192:	4628      	mov	r0, r5
 8018194:	f000 f82a 	bl	80181ec <__swsetup_r>
 8018198:	b118      	cbz	r0, 80181a2 <__swbuf_r+0x32>
 801819a:	f04f 37ff 	mov.w	r7, #4294967295
 801819e:	4638      	mov	r0, r7
 80181a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181a2:	6823      	ldr	r3, [r4, #0]
 80181a4:	6922      	ldr	r2, [r4, #16]
 80181a6:	1a98      	subs	r0, r3, r2
 80181a8:	6963      	ldr	r3, [r4, #20]
 80181aa:	b2f6      	uxtb	r6, r6
 80181ac:	4283      	cmp	r3, r0
 80181ae:	4637      	mov	r7, r6
 80181b0:	dc05      	bgt.n	80181be <__swbuf_r+0x4e>
 80181b2:	4621      	mov	r1, r4
 80181b4:	4628      	mov	r0, r5
 80181b6:	f7ff fe1b 	bl	8017df0 <_fflush_r>
 80181ba:	2800      	cmp	r0, #0
 80181bc:	d1ed      	bne.n	801819a <__swbuf_r+0x2a>
 80181be:	68a3      	ldr	r3, [r4, #8]
 80181c0:	3b01      	subs	r3, #1
 80181c2:	60a3      	str	r3, [r4, #8]
 80181c4:	6823      	ldr	r3, [r4, #0]
 80181c6:	1c5a      	adds	r2, r3, #1
 80181c8:	6022      	str	r2, [r4, #0]
 80181ca:	701e      	strb	r6, [r3, #0]
 80181cc:	6962      	ldr	r2, [r4, #20]
 80181ce:	1c43      	adds	r3, r0, #1
 80181d0:	429a      	cmp	r2, r3
 80181d2:	d004      	beq.n	80181de <__swbuf_r+0x6e>
 80181d4:	89a3      	ldrh	r3, [r4, #12]
 80181d6:	07db      	lsls	r3, r3, #31
 80181d8:	d5e1      	bpl.n	801819e <__swbuf_r+0x2e>
 80181da:	2e0a      	cmp	r6, #10
 80181dc:	d1df      	bne.n	801819e <__swbuf_r+0x2e>
 80181de:	4621      	mov	r1, r4
 80181e0:	4628      	mov	r0, r5
 80181e2:	f7ff fe05 	bl	8017df0 <_fflush_r>
 80181e6:	2800      	cmp	r0, #0
 80181e8:	d0d9      	beq.n	801819e <__swbuf_r+0x2e>
 80181ea:	e7d6      	b.n	801819a <__swbuf_r+0x2a>

080181ec <__swsetup_r>:
 80181ec:	b538      	push	{r3, r4, r5, lr}
 80181ee:	4b29      	ldr	r3, [pc, #164]	@ (8018294 <__swsetup_r+0xa8>)
 80181f0:	4605      	mov	r5, r0
 80181f2:	6818      	ldr	r0, [r3, #0]
 80181f4:	460c      	mov	r4, r1
 80181f6:	b118      	cbz	r0, 8018200 <__swsetup_r+0x14>
 80181f8:	6a03      	ldr	r3, [r0, #32]
 80181fa:	b90b      	cbnz	r3, 8018200 <__swsetup_r+0x14>
 80181fc:	f7fe ffb0 	bl	8017160 <__sinit>
 8018200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018204:	0719      	lsls	r1, r3, #28
 8018206:	d422      	bmi.n	801824e <__swsetup_r+0x62>
 8018208:	06da      	lsls	r2, r3, #27
 801820a:	d407      	bmi.n	801821c <__swsetup_r+0x30>
 801820c:	2209      	movs	r2, #9
 801820e:	602a      	str	r2, [r5, #0]
 8018210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018214:	81a3      	strh	r3, [r4, #12]
 8018216:	f04f 30ff 	mov.w	r0, #4294967295
 801821a:	e033      	b.n	8018284 <__swsetup_r+0x98>
 801821c:	0758      	lsls	r0, r3, #29
 801821e:	d512      	bpl.n	8018246 <__swsetup_r+0x5a>
 8018220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018222:	b141      	cbz	r1, 8018236 <__swsetup_r+0x4a>
 8018224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018228:	4299      	cmp	r1, r3
 801822a:	d002      	beq.n	8018232 <__swsetup_r+0x46>
 801822c:	4628      	mov	r0, r5
 801822e:	f7ff f977 	bl	8017520 <_free_r>
 8018232:	2300      	movs	r3, #0
 8018234:	6363      	str	r3, [r4, #52]	@ 0x34
 8018236:	89a3      	ldrh	r3, [r4, #12]
 8018238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801823c:	81a3      	strh	r3, [r4, #12]
 801823e:	2300      	movs	r3, #0
 8018240:	6063      	str	r3, [r4, #4]
 8018242:	6923      	ldr	r3, [r4, #16]
 8018244:	6023      	str	r3, [r4, #0]
 8018246:	89a3      	ldrh	r3, [r4, #12]
 8018248:	f043 0308 	orr.w	r3, r3, #8
 801824c:	81a3      	strh	r3, [r4, #12]
 801824e:	6923      	ldr	r3, [r4, #16]
 8018250:	b94b      	cbnz	r3, 8018266 <__swsetup_r+0x7a>
 8018252:	89a3      	ldrh	r3, [r4, #12]
 8018254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801825c:	d003      	beq.n	8018266 <__swsetup_r+0x7a>
 801825e:	4621      	mov	r1, r4
 8018260:	4628      	mov	r0, r5
 8018262:	f000 f88b 	bl	801837c <__smakebuf_r>
 8018266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801826a:	f013 0201 	ands.w	r2, r3, #1
 801826e:	d00a      	beq.n	8018286 <__swsetup_r+0x9a>
 8018270:	2200      	movs	r2, #0
 8018272:	60a2      	str	r2, [r4, #8]
 8018274:	6962      	ldr	r2, [r4, #20]
 8018276:	4252      	negs	r2, r2
 8018278:	61a2      	str	r2, [r4, #24]
 801827a:	6922      	ldr	r2, [r4, #16]
 801827c:	b942      	cbnz	r2, 8018290 <__swsetup_r+0xa4>
 801827e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018282:	d1c5      	bne.n	8018210 <__swsetup_r+0x24>
 8018284:	bd38      	pop	{r3, r4, r5, pc}
 8018286:	0799      	lsls	r1, r3, #30
 8018288:	bf58      	it	pl
 801828a:	6962      	ldrpl	r2, [r4, #20]
 801828c:	60a2      	str	r2, [r4, #8]
 801828e:	e7f4      	b.n	801827a <__swsetup_r+0x8e>
 8018290:	2000      	movs	r0, #0
 8018292:	e7f7      	b.n	8018284 <__swsetup_r+0x98>
 8018294:	2000002c 	.word	0x2000002c

08018298 <_raise_r>:
 8018298:	291f      	cmp	r1, #31
 801829a:	b538      	push	{r3, r4, r5, lr}
 801829c:	4605      	mov	r5, r0
 801829e:	460c      	mov	r4, r1
 80182a0:	d904      	bls.n	80182ac <_raise_r+0x14>
 80182a2:	2316      	movs	r3, #22
 80182a4:	6003      	str	r3, [r0, #0]
 80182a6:	f04f 30ff 	mov.w	r0, #4294967295
 80182aa:	bd38      	pop	{r3, r4, r5, pc}
 80182ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80182ae:	b112      	cbz	r2, 80182b6 <_raise_r+0x1e>
 80182b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80182b4:	b94b      	cbnz	r3, 80182ca <_raise_r+0x32>
 80182b6:	4628      	mov	r0, r5
 80182b8:	f000 f830 	bl	801831c <_getpid_r>
 80182bc:	4622      	mov	r2, r4
 80182be:	4601      	mov	r1, r0
 80182c0:	4628      	mov	r0, r5
 80182c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182c6:	f000 b817 	b.w	80182f8 <_kill_r>
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d00a      	beq.n	80182e4 <_raise_r+0x4c>
 80182ce:	1c59      	adds	r1, r3, #1
 80182d0:	d103      	bne.n	80182da <_raise_r+0x42>
 80182d2:	2316      	movs	r3, #22
 80182d4:	6003      	str	r3, [r0, #0]
 80182d6:	2001      	movs	r0, #1
 80182d8:	e7e7      	b.n	80182aa <_raise_r+0x12>
 80182da:	2100      	movs	r1, #0
 80182dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80182e0:	4620      	mov	r0, r4
 80182e2:	4798      	blx	r3
 80182e4:	2000      	movs	r0, #0
 80182e6:	e7e0      	b.n	80182aa <_raise_r+0x12>

080182e8 <raise>:
 80182e8:	4b02      	ldr	r3, [pc, #8]	@ (80182f4 <raise+0xc>)
 80182ea:	4601      	mov	r1, r0
 80182ec:	6818      	ldr	r0, [r3, #0]
 80182ee:	f7ff bfd3 	b.w	8018298 <_raise_r>
 80182f2:	bf00      	nop
 80182f4:	2000002c 	.word	0x2000002c

080182f8 <_kill_r>:
 80182f8:	b538      	push	{r3, r4, r5, lr}
 80182fa:	4d07      	ldr	r5, [pc, #28]	@ (8018318 <_kill_r+0x20>)
 80182fc:	2300      	movs	r3, #0
 80182fe:	4604      	mov	r4, r0
 8018300:	4608      	mov	r0, r1
 8018302:	4611      	mov	r1, r2
 8018304:	602b      	str	r3, [r5, #0]
 8018306:	f7e9 fc23 	bl	8001b50 <_kill>
 801830a:	1c43      	adds	r3, r0, #1
 801830c:	d102      	bne.n	8018314 <_kill_r+0x1c>
 801830e:	682b      	ldr	r3, [r5, #0]
 8018310:	b103      	cbz	r3, 8018314 <_kill_r+0x1c>
 8018312:	6023      	str	r3, [r4, #0]
 8018314:	bd38      	pop	{r3, r4, r5, pc}
 8018316:	bf00      	nop
 8018318:	20009834 	.word	0x20009834

0801831c <_getpid_r>:
 801831c:	f7e9 bc10 	b.w	8001b40 <_getpid>

08018320 <_malloc_usable_size_r>:
 8018320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018324:	1f18      	subs	r0, r3, #4
 8018326:	2b00      	cmp	r3, #0
 8018328:	bfbc      	itt	lt
 801832a:	580b      	ldrlt	r3, [r1, r0]
 801832c:	18c0      	addlt	r0, r0, r3
 801832e:	4770      	bx	lr

08018330 <__swhatbuf_r>:
 8018330:	b570      	push	{r4, r5, r6, lr}
 8018332:	460c      	mov	r4, r1
 8018334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018338:	2900      	cmp	r1, #0
 801833a:	b096      	sub	sp, #88	@ 0x58
 801833c:	4615      	mov	r5, r2
 801833e:	461e      	mov	r6, r3
 8018340:	da0d      	bge.n	801835e <__swhatbuf_r+0x2e>
 8018342:	89a3      	ldrh	r3, [r4, #12]
 8018344:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018348:	f04f 0100 	mov.w	r1, #0
 801834c:	bf14      	ite	ne
 801834e:	2340      	movne	r3, #64	@ 0x40
 8018350:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018354:	2000      	movs	r0, #0
 8018356:	6031      	str	r1, [r6, #0]
 8018358:	602b      	str	r3, [r5, #0]
 801835a:	b016      	add	sp, #88	@ 0x58
 801835c:	bd70      	pop	{r4, r5, r6, pc}
 801835e:	466a      	mov	r2, sp
 8018360:	f000 f848 	bl	80183f4 <_fstat_r>
 8018364:	2800      	cmp	r0, #0
 8018366:	dbec      	blt.n	8018342 <__swhatbuf_r+0x12>
 8018368:	9901      	ldr	r1, [sp, #4]
 801836a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801836e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018372:	4259      	negs	r1, r3
 8018374:	4159      	adcs	r1, r3
 8018376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801837a:	e7eb      	b.n	8018354 <__swhatbuf_r+0x24>

0801837c <__smakebuf_r>:
 801837c:	898b      	ldrh	r3, [r1, #12]
 801837e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018380:	079d      	lsls	r5, r3, #30
 8018382:	4606      	mov	r6, r0
 8018384:	460c      	mov	r4, r1
 8018386:	d507      	bpl.n	8018398 <__smakebuf_r+0x1c>
 8018388:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801838c:	6023      	str	r3, [r4, #0]
 801838e:	6123      	str	r3, [r4, #16]
 8018390:	2301      	movs	r3, #1
 8018392:	6163      	str	r3, [r4, #20]
 8018394:	b003      	add	sp, #12
 8018396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018398:	ab01      	add	r3, sp, #4
 801839a:	466a      	mov	r2, sp
 801839c:	f7ff ffc8 	bl	8018330 <__swhatbuf_r>
 80183a0:	9f00      	ldr	r7, [sp, #0]
 80183a2:	4605      	mov	r5, r0
 80183a4:	4639      	mov	r1, r7
 80183a6:	4630      	mov	r0, r6
 80183a8:	f7ff f92e 	bl	8017608 <_malloc_r>
 80183ac:	b948      	cbnz	r0, 80183c2 <__smakebuf_r+0x46>
 80183ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183b2:	059a      	lsls	r2, r3, #22
 80183b4:	d4ee      	bmi.n	8018394 <__smakebuf_r+0x18>
 80183b6:	f023 0303 	bic.w	r3, r3, #3
 80183ba:	f043 0302 	orr.w	r3, r3, #2
 80183be:	81a3      	strh	r3, [r4, #12]
 80183c0:	e7e2      	b.n	8018388 <__smakebuf_r+0xc>
 80183c2:	89a3      	ldrh	r3, [r4, #12]
 80183c4:	6020      	str	r0, [r4, #0]
 80183c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80183ca:	81a3      	strh	r3, [r4, #12]
 80183cc:	9b01      	ldr	r3, [sp, #4]
 80183ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80183d2:	b15b      	cbz	r3, 80183ec <__smakebuf_r+0x70>
 80183d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183d8:	4630      	mov	r0, r6
 80183da:	f000 f81d 	bl	8018418 <_isatty_r>
 80183de:	b128      	cbz	r0, 80183ec <__smakebuf_r+0x70>
 80183e0:	89a3      	ldrh	r3, [r4, #12]
 80183e2:	f023 0303 	bic.w	r3, r3, #3
 80183e6:	f043 0301 	orr.w	r3, r3, #1
 80183ea:	81a3      	strh	r3, [r4, #12]
 80183ec:	89a3      	ldrh	r3, [r4, #12]
 80183ee:	431d      	orrs	r5, r3
 80183f0:	81a5      	strh	r5, [r4, #12]
 80183f2:	e7cf      	b.n	8018394 <__smakebuf_r+0x18>

080183f4 <_fstat_r>:
 80183f4:	b538      	push	{r3, r4, r5, lr}
 80183f6:	4d07      	ldr	r5, [pc, #28]	@ (8018414 <_fstat_r+0x20>)
 80183f8:	2300      	movs	r3, #0
 80183fa:	4604      	mov	r4, r0
 80183fc:	4608      	mov	r0, r1
 80183fe:	4611      	mov	r1, r2
 8018400:	602b      	str	r3, [r5, #0]
 8018402:	f7e9 fbe9 	bl	8001bd8 <_fstat>
 8018406:	1c43      	adds	r3, r0, #1
 8018408:	d102      	bne.n	8018410 <_fstat_r+0x1c>
 801840a:	682b      	ldr	r3, [r5, #0]
 801840c:	b103      	cbz	r3, 8018410 <_fstat_r+0x1c>
 801840e:	6023      	str	r3, [r4, #0]
 8018410:	bd38      	pop	{r3, r4, r5, pc}
 8018412:	bf00      	nop
 8018414:	20009834 	.word	0x20009834

08018418 <_isatty_r>:
 8018418:	b538      	push	{r3, r4, r5, lr}
 801841a:	4d06      	ldr	r5, [pc, #24]	@ (8018434 <_isatty_r+0x1c>)
 801841c:	2300      	movs	r3, #0
 801841e:	4604      	mov	r4, r0
 8018420:	4608      	mov	r0, r1
 8018422:	602b      	str	r3, [r5, #0]
 8018424:	f7e9 fbe8 	bl	8001bf8 <_isatty>
 8018428:	1c43      	adds	r3, r0, #1
 801842a:	d102      	bne.n	8018432 <_isatty_r+0x1a>
 801842c:	682b      	ldr	r3, [r5, #0]
 801842e:	b103      	cbz	r3, 8018432 <_isatty_r+0x1a>
 8018430:	6023      	str	r3, [r4, #0]
 8018432:	bd38      	pop	{r3, r4, r5, pc}
 8018434:	20009834 	.word	0x20009834

08018438 <_init>:
 8018438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801843a:	bf00      	nop
 801843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801843e:	bc08      	pop	{r3}
 8018440:	469e      	mov	lr, r3
 8018442:	4770      	bx	lr

08018444 <_fini>:
 8018444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018446:	bf00      	nop
 8018448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801844a:	bc08      	pop	{r3}
 801844c:	469e      	mov	lr, r3
 801844e:	4770      	bx	lr
