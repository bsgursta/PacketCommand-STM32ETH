
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160dc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fc0  080162dc  080162dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801929c  0801929c  0001b090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801929c  0801929c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080192a4  080192a4  0001b090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080192a4  080192a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080192a8  080192a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080192ac  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d310  20000090  0801933c  0001b090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d3a0  0801933c  0001b3a0  2**0
                  ALLOC
 11 .lwip_sec     00000140  2007c000  2007c000  0001c000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001b090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037308  00000000  00000000  0001b0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000081db  00000000  00000000  000523c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002968  00000000  00000000  0005a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020c5  00000000  00000000  0005cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000381b7  00000000  00000000  0005efd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003daf5  00000000  00000000  0009718c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001246ae  00000000  00000000  000d4c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001f932f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b5f0  00000000  00000000  001f9374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00204964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	080162c4 	.word	0x080162c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	080162c4 	.word	0x080162c4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <AppMain>:
#include "app_main.h"
#include "main.h"
#include "lcd.h"

void AppMain(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

	//test LCD
	lcd_4SPI_init();
 8000610:	f000 f8f0 	bl	80007f4 <lcd_4SPI_init>
	setPageaddressing();
 8000614:	f000 f85e 	bl	80006d4 <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 f871 	bl	8000700 <lcd_setpage_address>
	lcd_setcolumn_address(0);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f888 	bl	8000734 <lcd_setcolumn_address>

	while(1){

		onLCD();
 8000624:	f000 f82a 	bl	800067c <onLCD>
		fillLCD();
 8000628:	f000 f934 	bl	8000894 <fillLCD>
		clearLCD();
 800062c:	f000 f8fa 	bl	8000824 <clearLCD>
		offLCD();
 8000630:	f000 f83a 	bl	80006a8 <offLCD>
		onLCD();
 8000634:	bf00      	nop
 8000636:	e7f5      	b.n	8000624 <AppMain+0x18>

08000638 <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	480b      	ldr	r0, [pc, #44]	@ (8000674 <lcd_transfer+0x3c>)
 8000648:	f002 fc92 	bl	8002f70 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 800064c:	1df9      	adds	r1, r7, #7
 800064e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000652:	2201      	movs	r2, #1
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <lcd_transfer+0x40>)
 8000656:	f004 f818 	bl	800468a <HAL_SPI_Transmit>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	@ 0x40
 8000662:	4804      	ldr	r0, [pc, #16]	@ (8000674 <lcd_transfer+0x3c>)
 8000664:	f002 fc84 	bl	8002f70 <HAL_GPIO_WritePin>

	return HAL_OK;
 8000668:	2300      	movs	r3, #0

}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40020c00 	.word	0x40020c00
 8000678:	200000ac 	.word	0x200000ac

0800067c <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 8000682:	23af      	movs	r3, #175	@ 0xaf
 8000684:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2180      	movs	r1, #128	@ 0x80
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <onLCD+0x28>)
 800068c:	f002 fc70 	bl	8002f70 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffd0 	bl	8000638 <lcd_transfer>
 8000698:	4603      	mov	r3, r0

}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 80006ae:	23ae      	movs	r3, #174	@ 0xae
 80006b0:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <offLCD+0x28>)
 80006b8:	f002 fc5a 	bl	8002f70 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffba 	bl	8000638 <lcd_transfer>
 80006c4:	4603      	mov	r3, r0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 80006da:	2320      	movs	r3, #32
 80006dc:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <setPageaddressing+0x28>)
 80006e4:	f002 fc44 	bl	8002f70 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffa4 	bl	8000638 <lcd_transfer>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020c00 	.word	0x40020c00

08000700 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000712:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <lcd_setpage_address+0x30>)
 800071a:	f002 fc29 	bl	8002f70 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff89 	bl	8000638 <lcd_transfer>
 8000726:	4603      	mov	r3, r0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40020c00 	.word	0x40020c00

08000734 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000740:	dc02      	bgt.n	8000748 <lcd_setcolumn_address+0x14>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	da01      	bge.n	800074c <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	e030      	b.n	80007ae <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 8000750:	2310      	movs	r3, #16
 8000752:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 8000754:	2300      	movs	r3, #0
 8000756:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	091b      	lsrs	r3, r3, #4
 800075c:	b2db      	uxtb	r3, r3
 800075e:	b25a      	sxtb	r2, r3
 8000760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000764:	4313      	orrs	r3, r2
 8000766:	b25b      	sxtb	r3, r3
 8000768:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	b25a      	sxtb	r2, r3
 8000774:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000778:	4313      	orrs	r3, r2
 800077a:	b25b      	sxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <lcd_setcolumn_address+0x84>)
 8000784:	f002 fbf4 	bl	8002f70 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 8000788:	7bbb      	ldrb	r3, [r7, #14]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff54 	bl	8000638 <lcd_transfer>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e009      	b.n	80007ae <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 800079a:	7b7b      	ldrb	r3, [r7, #13]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff4b 	bl	8000638 <lcd_transfer>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e000      	b.n	80007ae <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40020c00 	.word	0x40020c00

080007bc <lcd_writeRAM>:

HAL_StatusTypeDef lcd_writeRAM(uint8_t data){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	//pull A0 high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2180      	movs	r1, #128	@ 0x80
 80007ca:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <lcd_writeRAM+0x34>)
 80007cc:	f002 fbd0 	bl	8002f70 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef status = lcd_transfer(data);
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff30 	bl	8000638 <lcd_transfer>
 80007d8:	4603      	mov	r3, r0
 80007da:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <lcd_writeRAM+0x34>)
 80007e2:	f002 fbc5 	bl	8002f70 <HAL_GPIO_WritePin>

	return status;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020c00 	.word	0x40020c00

080007f4 <lcd_4SPI_init>:

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2140      	movs	r1, #64	@ 0x40
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <lcd_4SPI_init+0x28>)
 80007fe:	f002 fbb7 	bl	8002f70 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2101      	movs	r1, #1
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <lcd_4SPI_init+0x2c>)
 8000808:	f002 fbb2 	bl	8002f70 <HAL_GPIO_WritePin>

	//dummy transmission for SPI
	onLCD();
 800080c:	f7ff ff36 	bl	800067c <onLCD>
	offLCD();
 8000810:	f7ff ff4a 	bl	80006a8 <offLCD>

	return HAL_OK;
 8000814:	2300      	movs	r3, #0

}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40020c00 	.word	0x40020c00
 8000820:	40020800 	.word	0x40020800

08000824 <clearLCD>:

//set the entirety of the screen to 0, wiping the screen.
HAL_StatusTypeDef  clearLCD(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0

	int errors = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]

	for(int a = 0; a < 16; a++){
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	e022      	b.n	800087a <clearLCD+0x56>
		lcd_setpage_address(a);
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f7ff ff63 	bl	8000700 <lcd_setpage_address>
		lcd_setcolumn_address(0);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ff7a 	bl	8000734 <lcd_setcolumn_address>

		for(int i = 0; i < 128; i++){
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	e013      	b.n	800086e <clearLCD+0x4a>
			//starting point for my LCD
			if(i == 32){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b20      	cmp	r3, #32
 800084a:	d100      	bne.n	800084e <clearLCD+0x2a>
				__NOP();
 800084c:	bf00      	nop
			}

			//ending point of my LCD
			if(i == 97){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b61      	cmp	r3, #97	@ 0x61
 8000852:	d100      	bne.n	8000856 <clearLCD+0x32>
				__NOP();
 8000854:	bf00      	nop
			}

			if(lcd_writeRAM(0x00) != HAL_OK){
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ffb0 	bl	80007bc <lcd_writeRAM>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <clearLCD+0x44>
				errors +=1;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3301      	adds	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 128; i++){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3301      	adds	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b7f      	cmp	r3, #127	@ 0x7f
 8000872:	dde8      	ble.n	8000846 <clearLCD+0x22>
	for(int a = 0; a < 16; a++){
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	ddd9      	ble.n	8000834 <clearLCD+0x10>
			}
			//HAL_Delay(10);
		}
	}

	if(errors == 0){
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <clearLCD+0x66>
		return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <clearLCD+0x68>
	}
	else{
		return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
	}
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <fillLCD>:

//fill the LCD with 1 bits, making it turn off. Include delay for visual assistance
HAL_StatusTypeDef  fillLCD(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

	int errors = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]

	for(int a = 0; a < 16; a++){
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	e01a      	b.n	80008da <fillLCD+0x46>
		lcd_setpage_address(a);
 80008a4:	68b8      	ldr	r0, [r7, #8]
 80008a6:	f7ff ff2b 	bl	8000700 <lcd_setpage_address>
		lcd_setcolumn_address(0);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff42 	bl	8000734 <lcd_setcolumn_address>

		for(int i = 0; i < 128; i++){
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	e00b      	b.n	80008ce <fillLCD+0x3a>
			if(lcd_writeRAM(0xFF) != HAL_OK){
 80008b6:	20ff      	movs	r0, #255	@ 0xff
 80008b8:	f7ff ff80 	bl	80007bc <lcd_writeRAM>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <fillLCD+0x34>
				errors +=1;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 128; i++){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3301      	adds	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80008d2:	ddf0      	ble.n	80008b6 <fillLCD+0x22>
	for(int a = 0; a < 16; a++){
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	dde1      	ble.n	80008a4 <fillLCD+0x10>
			}
			//HAL_Delay(5);
		}
	}

	if(errors == 0){
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d101      	bne.n	80008ea <fillLCD+0x56>
		return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <fillLCD+0x58>
	}
	else{
		return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
	}
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008f8:	f000 fa04 	bl	8000d04 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fe44 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f81e 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f000 f92a 	bl	8000b5c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000908:	f000 f8ca 	bl	8000aa0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800090c:	f000 f8f8 	bl	8000b00 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000910:	f000 f888 	bl	8000a24 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000914:	f005 ffd0 	bl	80068b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000918:	4a06      	ldr	r2, [pc, #24]	@ (8000934 <main+0x40>)
 800091a:	2100      	movs	r1, #0
 800091c:	4806      	ldr	r0, [pc, #24]	@ (8000938 <main+0x44>)
 800091e:	f006 f835 	bl	800698c <osThreadNew>
 8000922:	4603      	mov	r3, r0
 8000924:	4a05      	ldr	r2, [pc, #20]	@ (800093c <main+0x48>)
 8000926:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000928:	f005 fffa 	bl	8006920 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 800092c:	f7ff fe6e 	bl	800060c <AppMain>
 8000930:	e7fc      	b.n	800092c <main+0x38>
 8000932:	bf00      	nop
 8000934:	08019080 	.word	0x08019080
 8000938:	08000cf1 	.word	0x08000cf1
 800093c:	20000678 	.word	0x20000678

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	@ 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2234      	movs	r2, #52	@ 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f014 fdb7 	bl	80154c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000964:	f002 fc58 	bl	8003218 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <SystemClock_Config+0xdc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a1c <SystemClock_Config+0xdc>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	@ 0x40
 8000974:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <SystemClock_Config+0xdc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000980:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <SystemClock_Config+0xe0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000988:	4a25      	ldr	r2, [pc, #148]	@ (8000a20 <SystemClock_Config+0xe0>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <SystemClock_Config+0xe0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009b4:	2360      	movs	r3, #96	@ 0x60
 80009b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fc85 	bl	80032d8 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009d4:	f000 f9d6 	bl	8000d84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d8:	f002 fc2e 	bl	8003238 <HAL_PWREx_EnableOverDrive>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009e2:	f000 f9cf 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2302      	movs	r3, #2
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	2103      	movs	r1, #3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 ff16 	bl	8003834 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a0e:	f000 f9b9 	bl	8000d84 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	@ 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <MX_SPI2_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a3e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a42:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a56:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a5a:	2238      	movs	r2, #56	@ 0x38
 8000a5c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a72:	2207      	movs	r2, #7
 8000a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_SPI2_Init+0x74>)
 8000a84:	f003 fd56 	bl	8004534 <HAL_SPI_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 f979 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000ac 	.word	0x200000ac
 8000a9c:	40003800 	.word	0x40003800

08000aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000aa6:	4a15      	ldr	r2, [pc, #84]	@ (8000afc <MX_USART3_UART_Init+0x5c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ae4:	f004 fb9e 	bl	8005224 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aee:	f000 f949 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000110 	.word	0x20000110
 8000afc:	40004800 	.word	0x40004800

08000b00 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	2206      	movs	r2, #6
 8000b10:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b44:	f002 fa2d 	bl	8002fa2 <HAL_PCD_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f919 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000198 	.word	0x20000198

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	@ 0x30
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b5a      	ldr	r3, [pc, #360]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a59      	ldr	r2, [pc, #356]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b57      	ldr	r3, [pc, #348]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	4b54      	ldr	r3, [pc, #336]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a53      	ldr	r2, [pc, #332]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b51      	ldr	r3, [pc, #324]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b4b      	ldr	r3, [pc, #300]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b48      	ldr	r3, [pc, #288]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a47      	ldr	r2, [pc, #284]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b45      	ldr	r3, [pc, #276]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b42      	ldr	r3, [pc, #264]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a41      	ldr	r2, [pc, #260]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b3f      	ldr	r3, [pc, #252]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a3b      	ldr	r2, [pc, #236]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b39      	ldr	r3, [pc, #228]	@ (8000cdc <MX_GPIO_Init+0x180>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	4836      	ldr	r0, [pc, #216]	@ (8000ce0 <MX_GPIO_Init+0x184>)
 8000c08:	f002 f9b2 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000c12:	4834      	ldr	r0, [pc, #208]	@ (8000ce4 <MX_GPIO_Init+0x188>)
 8000c14:	f002 f9ac 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2140      	movs	r1, #64	@ 0x40
 8000c1c:	4832      	ldr	r0, [pc, #200]	@ (8000ce8 <MX_GPIO_Init+0x18c>)
 8000c1e:	f002 f9a7 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	21c0      	movs	r1, #192	@ 0xc0
 8000c26:	4831      	ldr	r0, [pc, #196]	@ (8000cec <MX_GPIO_Init+0x190>)
 8000c28:	f002 f9a2 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4827      	ldr	r0, [pc, #156]	@ (8000ce0 <MX_GPIO_Init+0x184>)
 8000c44:	f001 ffe8 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4820      	ldr	r0, [pc, #128]	@ (8000ce0 <MX_GPIO_Init+0x184>)
 8000c60:	f001 ffda 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c64:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4819      	ldr	r0, [pc, #100]	@ (8000ce4 <MX_GPIO_Init+0x188>)
 8000c7e:	f001 ffcb 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c82:	2340      	movs	r3, #64	@ 0x40
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <MX_GPIO_Init+0x18c>)
 8000c9a:	f001 ffbd 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c9e:	2380      	movs	r3, #128	@ 0x80
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <MX_GPIO_Init+0x18c>)
 8000cb2:	f001 ffb1 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb6:	23c0      	movs	r3, #192	@ 0xc0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4807      	ldr	r0, [pc, #28]	@ (8000cec <MX_GPIO_Init+0x190>)
 8000cce:	f001 ffa3 	bl	8002c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	@ 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	40021800 	.word	0x40021800
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000cf8:	f005 fa58 	bl	80061ac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f005 feeb 	bl	8006ad8 <osDelay>
 8000d02:	e7fb      	b.n	8000cfc <StartDefaultTask+0xc>

08000d04 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d16:	f000 fd79 	bl	800180c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MPU_Config+0x58>)
 8000d24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000d26:	230d      	movs	r3, #13
 8000d28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d32:	2303      	movs	r3, #3
 8000d34:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d36:	2301      	movs	r3, #1
 8000d38:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d46:	463b      	mov	r3, r7
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fd97 	bl	800187c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000d4e:	2006      	movs	r0, #6
 8000d50:	f000 fd74 	bl	800183c <HAL_MPU_Enable>

}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2007c000 	.word	0x2007c000

08000d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d72:	f000 fc25 	bl	80015c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40001000 	.word	0x40001000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <Error_Handler+0x8>

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dba:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	210f      	movs	r1, #15
 8000dca:	f06f 0001 	mvn.w	r0, #1
 8000dce:	f000 fcf3 	bl	80017b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <HAL_SPI_MspInit+0x7c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d128      	bne.n	8000e54 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_SPI_MspInit+0x80>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a16      	ldr	r2, [pc, #88]	@ (8000e60 <HAL_SPI_MspInit+0x80>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <HAL_SPI_MspInit+0x80>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <HAL_SPI_MspInit+0x80>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a10      	ldr	r2, [pc, #64]	@ (8000e60 <HAL_SPI_MspInit+0x80>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_SPI_MspInit+0x80>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000e32:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e44:	2305      	movs	r3, #5
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_SPI_MspInit+0x84>)
 8000e50:	f001 fee2 	bl	8002c18 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40003800 	.word	0x40003800
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2290      	movs	r2, #144	@ 0x90
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f014 fb1a 	bl	80154c2 <memset>
  if(huart->Instance==USART3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a22      	ldr	r2, [pc, #136]	@ (8000f1c <HAL_UART_MspInit+0xb4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d13c      	bne.n	8000f12 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 ff1c 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eb2:	f7ff ff67 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <HAL_UART_MspInit+0xb8>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	4a19      	ldr	r2, [pc, #100]	@ (8000f20 <HAL_UART_MspInit+0xb8>)
 8000ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <HAL_UART_MspInit+0xb8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <HAL_UART_MspInit+0xb8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <HAL_UART_MspInit+0xb8>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <HAL_UART_MspInit+0xb8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ee6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f00:	2307      	movs	r3, #7
 8000f02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <HAL_UART_MspInit+0xbc>)
 8000f0e:	f001 fe83 	bl	8002c18 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f12:	bf00      	nop
 8000f14:	37b8      	adds	r7, #184	@ 0xb8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004800 	.word	0x40004800
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020c00 	.word	0x40020c00

08000f28 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b0ae      	sub	sp, #184	@ 0xb8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2290      	movs	r2, #144	@ 0x90
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f014 faba 	bl	80154c2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f56:	d159      	bne.n	800100c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 febb 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f74:	f7ff ff06 	bl	8000d84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b26      	ldr	r3, [pc, #152]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	4a25      	ldr	r2, [pc, #148]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f84:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f90:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000faa:	230a      	movs	r3, #10
 8000fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4818      	ldr	r0, [pc, #96]	@ (8001018 <HAL_PCD_MspInit+0xf0>)
 8000fb8:	f001 fe2e 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4810      	ldr	r0, [pc, #64]	@ (8001018 <HAL_PCD_MspInit+0xf0>)
 8000fd8:	f001 fe1e 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8000fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8000fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8000fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <HAL_PCD_MspInit+0xec>)
 8001002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800100c:	bf00      	nop
 800100e:	37b8      	adds	r7, #184	@ 0xb8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000

0800101c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	@ 0x38
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <HAL_InitTick+0xe0>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a32      	ldr	r2, [pc, #200]	@ (80010fc <HAL_InitTick+0xe0>)
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <HAL_InitTick+0xe0>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001044:	f107 0210 	add.w	r2, r7, #16
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fe16 	bl	8003c80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d103      	bne.n	8001066 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800105e:	f002 fde7 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8001062:	6378      	str	r0, [r7, #52]	@ 0x34
 8001064:	e004      	b.n	8001070 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001066:	f002 fde3 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 800106a:	4603      	mov	r3, r0
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	4a23      	ldr	r2, [pc, #140]	@ (8001100 <HAL_InitTick+0xe4>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	0c9b      	lsrs	r3, r3, #18
 800107a:	3b01      	subs	r3, #1
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HAL_InitTick+0xe8>)
 8001080:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <HAL_InitTick+0xec>)
 8001082:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <HAL_InitTick+0xe8>)
 8001086:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800108a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800108c:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <HAL_InitTick+0xe8>)
 800108e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001090:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_InitTick+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HAL_InitTick+0xe8>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_InitTick+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010a4:	4817      	ldr	r0, [pc, #92]	@ (8001104 <HAL_InitTick+0xe8>)
 80010a6:	f003 fdef 	bl	8004c88 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d11b      	bne.n	80010f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010b8:	4812      	ldr	r0, [pc, #72]	@ (8001104 <HAL_InitTick+0xe8>)
 80010ba:	f003 fe47 	bl	8004d4c <HAL_TIM_Base_Start_IT>
 80010be:	4603      	mov	r3, r0
 80010c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d111      	bne.n	80010f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010cc:	2036      	movs	r0, #54	@ 0x36
 80010ce:	f000 fb8f 	bl	80017f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d808      	bhi.n	80010ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	2036      	movs	r0, #54	@ 0x36
 80010de:	f000 fb6b 	bl	80017b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_InitTick+0xf0>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e002      	b.n	80010f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3738      	adds	r7, #56	@ 0x38
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	431bde83 	.word	0x431bde83
 8001104:	2000067c 	.word	0x2000067c
 8001108:	40001000 	.word	0x40001000
 800110c:	20000004 	.word	0x20000004

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <TIM6_DAC_IRQHandler+0x10>)
 800114e:	f003 fe75 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000067c 	.word	0x2000067c

0800115c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <ETH_IRQHandler+0x10>)
 8001162:	f000 fe6d 	bl	8001e40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200050a0 	.word	0x200050a0

08001170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_kill>:

int _kill(int pid, int sig)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800118a:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <_kill+0x20>)
 800118c:	2216      	movs	r2, #22
 800118e:	601a      	str	r2, [r3, #0]
  return -1;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	2000d390 	.word	0x2000d390

080011a4 <_exit>:

void _exit (int status)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ffe5 	bl	8001180 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <_exit+0x12>

080011ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e00a      	b.n	80011e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011cc:	f3af 8000 	nop.w
 80011d0:	4601      	mov	r1, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	60ba      	str	r2, [r7, #8]
 80011d8:	b2ca      	uxtb	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbf0      	blt.n	80011cc <_read+0x12>
  }

  return len;
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e009      	b.n	800121a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf1      	blt.n	8001206 <_write+0x12>
  }
  return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_close>:

int _close(int file)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001254:	605a      	str	r2, [r3, #4]
  return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_isatty>:

int _isatty(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d205      	bcs.n	80012d0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <_sbrk+0x6c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	2007c000 	.word	0x2007c000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	200006c8 	.word	0x200006c8
 80012fc:	2000d3a0 	.word	0x2000d3a0
 8001300:	2000d390 	.word	0x2000d390

08001304 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001360 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800132c:	f7ff ffea 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	@ (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	@ (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001356:	f014 f961 	bl	801561c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff facb 	bl	80008f4 <main>
  bx  lr    
 800135e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800136c:	080192ac 	.word	0x080192ac
  ldr r2, =_sbss
 8001370:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001374:	2000d3a0 	.word	0x2000d3a0

08001378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC_IRQHandler>

0800137a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <LAN8742_RegisterBusIO+0x28>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <LAN8742_RegisterBusIO+0x28>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <LAN8742_RegisterBusIO+0x28>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e014      	b.n	80013d2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d139      	bne.n	800146e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2220      	movs	r2, #32
 800140c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e01c      	b.n	800144e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f107 020c 	add.w	r2, r7, #12
 800141c:	2112      	movs	r1, #18
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	4798      	blx	r3
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	da03      	bge.n	8001430 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001428:	f06f 0304 	mvn.w	r3, #4
 800142c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800142e:	e00b      	b.n	8001448 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	d105      	bne.n	8001448 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
         break;
 8001446:	e005      	b.n	8001454 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b1f      	cmp	r3, #31
 8001452:	d9df      	bls.n	8001414 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b1f      	cmp	r3, #31
 800145a:	d902      	bls.n	8001462 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800145c:	f06f 0302 	mvn.w	r3, #2
 8001460:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800146e:	693b      	ldr	r3, [r7, #16]
 }
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6810      	ldr	r0, [r2, #0]
 800148c:	f107 020c 	add.w	r2, r7, #12
 8001490:	2101      	movs	r1, #1
 8001492:	4798      	blx	r3
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	da02      	bge.n	80014a0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800149a:	f06f 0304 	mvn.w	r3, #4
 800149e:	e06e      	b.n	800157e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6810      	ldr	r0, [r2, #0]
 80014a8:	f107 020c 	add.w	r2, r7, #12
 80014ac:	2101      	movs	r1, #1
 80014ae:	4798      	blx	r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da02      	bge.n	80014bc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014b6:	f06f 0304 	mvn.w	r3, #4
 80014ba:	e060      	b.n	800157e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e059      	b.n	800157e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6810      	ldr	r0, [r2, #0]
 80014d2:	f107 020c 	add.w	r2, r7, #12
 80014d6:	2100      	movs	r1, #0
 80014d8:	4798      	blx	r3
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da02      	bge.n	80014e6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014e0:	f06f 0304 	mvn.w	r3, #4
 80014e4:	e04b      	b.n	800157e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d11b      	bne.n	8001528 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <LAN8742_GetLinkState+0x90>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001504:	2302      	movs	r3, #2
 8001506:	e03a      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001512:	2303      	movs	r3, #3
 8001514:	e033      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001520:	2304      	movs	r3, #4
 8001522:	e02c      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001524:	2305      	movs	r3, #5
 8001526:	e02a      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6810      	ldr	r0, [r2, #0]
 8001530:	f107 020c 	add.w	r2, r7, #12
 8001534:	211f      	movs	r1, #31
 8001536:	4798      	blx	r3
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	da02      	bge.n	8001544 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800153e:	f06f 0304 	mvn.w	r3, #4
 8001542:	e01c      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800154e:	2306      	movs	r3, #6
 8001550:	e015      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f003 031c 	and.w	r3, r3, #28
 8001558:	2b18      	cmp	r3, #24
 800155a:	d101      	bne.n	8001560 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800155c:	2302      	movs	r3, #2
 800155e:	e00e      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 031c 	and.w	r3, r3, #28
 8001566:	2b08      	cmp	r3, #8
 8001568:	d101      	bne.n	800156e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800156a:	2303      	movs	r3, #3
 800156c:	e007      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 031c 	and.w	r3, r3, #28
 8001574:	2b14      	cmp	r3, #20
 8001576:	d101      	bne.n	800157c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001578:	2304      	movs	r3, #4
 800157a:	e000      	b.n	800157e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800157c:	2305      	movs	r3, #5
    }
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <HAL_Init+0x34>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <HAL_Init+0x34>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <HAL_Init+0x34>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	@ (80015bc <HAL_Init+0x34>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f8fc 	bl	80017a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f7ff fd36 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fbee 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	200006cc 	.word	0x200006cc

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200006cc 	.word	0x200006cc

08001600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff ffee 	bl	80015e8 <HAL_GetTick>
 800160c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d005      	beq.n	8001626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_Delay+0x44>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001626:	bf00      	nop
 8001628:	f7ff ffde 	bl	80015e8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	429a      	cmp	r2, r3
 8001636:	d8f7      	bhi.n	8001628 <HAL_Delay+0x28>
  {
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008

08001648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <__NVIC_SetPriorityGrouping+0x40>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	4313      	orrs	r3, r2
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <__NVIC_SetPriorityGrouping+0x40>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00
 800168c:	05fa0000 	.word	0x05fa0000

08001690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f003 0307 	and.w	r3, r3, #7
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db0b      	blt.n	80016d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	4907      	ldr	r1, [pc, #28]	@ (80016e4 <__NVIC_EnableIRQ+0x38>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	2001      	movs	r0, #1
 80016ce:	fa00 f202 	lsl.w	r2, r0, r2
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	@ (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff4c 	bl	8001648 <__NVIC_SetPriorityGrouping>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ca:	f7ff ff61 	bl	8001690 <__NVIC_GetPriorityGrouping>
 80017ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	6978      	ldr	r0, [r7, #20]
 80017d6:	f7ff ffb1 	bl	800173c <NVIC_EncodePriority>
 80017da:	4602      	mov	r2, r0
 80017dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff80 	bl	80016e8 <__NVIC_SetPriority>
}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff54 	bl	80016ac <__NVIC_EnableIRQ>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001810:	f3bf 8f5f 	dmb	sy
}
 8001814:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <HAL_MPU_Disable+0x28>)
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	4a06      	ldr	r2, [pc, #24]	@ (8001834 <HAL_MPU_Disable+0x28>)
 800181c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001820:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001822:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_MPU_Disable+0x2c>)
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	e000ed90 	.word	0xe000ed90

0800183c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <HAL_MPU_Enable+0x38>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_MPU_Enable+0x3c>)
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <HAL_MPU_Enable+0x3c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001858:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800185a:	f3bf 8f4f 	dsb	sy
}
 800185e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001860:	f3bf 8f6f 	isb	sy
}
 8001864:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed90 	.word	0xe000ed90
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	785a      	ldrb	r2, [r3, #1]
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_MPU_ConfigRegion+0x7c>)
 800188a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <HAL_MPU_ConfigRegion+0x7c>)
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	4a19      	ldr	r2, [pc, #100]	@ (80018f8 <HAL_MPU_ConfigRegion+0x7c>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001898:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <HAL_MPU_ConfigRegion+0x7c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7b1b      	ldrb	r3, [r3, #12]
 80018a4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7adb      	ldrb	r3, [r3, #11]
 80018aa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7a9b      	ldrb	r3, [r3, #10]
 80018b2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7b5b      	ldrb	r3, [r3, #13]
 80018ba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7b9b      	ldrb	r3, [r3, #14]
 80018c2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7bdb      	ldrb	r3, [r3, #15]
 80018ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7a5b      	ldrb	r3, [r3, #9]
 80018d2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7a1b      	ldrb	r3, [r3, #8]
 80018da:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018dc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018e6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e8:	6113      	str	r3, [r2, #16]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed90 	.word	0xe000ed90

080018fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e086      	b.n	8001a1c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2220      	movs	r2, #32
 800191c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f004 fdf7 	bl	8006514 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b3f      	ldr	r3, [pc, #252]	@ (8001a24 <HAL_ETH_Init+0x128>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a24 <HAL_ETH_Init+0x128>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001930:	6453      	str	r3, [r2, #68]	@ 0x44
 8001932:	4b3c      	ldr	r3, [pc, #240]	@ (8001a24 <HAL_ETH_Init+0x128>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800193e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a28 <HAL_ETH_Init+0x12c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a39      	ldr	r2, [pc, #228]	@ (8001a28 <HAL_ETH_Init+0x12c>)
 8001944:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001948:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800194a:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <HAL_ETH_Init+0x12c>)
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4935      	ldr	r1, [pc, #212]	@ (8001a28 <HAL_ETH_Init+0x12c>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001958:	4b33      	ldr	r3, [pc, #204]	@ (8001a28 <HAL_ETH_Init+0x12c>)
 800195a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001972:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001974:	f7ff fe38 	bl	80015e8 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800197a:	e011      	b.n	80019a0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800197c:	f7ff fe34 	bl	80015e8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800198a:	d909      	bls.n	80019a0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2204      	movs	r2, #4
 8001990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	22e0      	movs	r2, #224	@ 0xe0
 8001998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e03d      	b.n	8001a1c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1e4      	bne.n	800197c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fe74 	bl	80026a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 ff1f 	bl	80027fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 ff75 	bl	80028ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	461a      	mov	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fedd 	bl	800278c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80019e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_ETH_Init+0x130>)
 80019f0:	430b      	orrs	r3, r1
 80019f2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001a06:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2210      	movs	r2, #16
 8001a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	00020060 	.word	0x00020060

08001a30 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d15f      	bne.n	8001b02 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2204      	movs	r2, #4
 8001a54:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f96e 	bl	8001d38 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7ff fdcb 	bl	8001600 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a88:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aa0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fc98 	bl	80023d8 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0208 	orr.w	r2, r2, #8
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fd9d 	bl	8001600 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0204 	orr.w	r2, r2, #4
 8001adc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae6:	69d9      	ldr	r1, [r3, #28]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <HAL_ETH_Start_IT+0xdc>)
 8001aee:	430b      	orrs	r3, r1
 8001af0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001af4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2240      	movs	r2, #64	@ 0x40
 8001afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
  }
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	0001a0c1 	.word	0x0001a0c1

08001b10 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b1e:	2b40      	cmp	r3, #64	@ 0x40
 8001b20:	d16e      	bne.n	8001c00 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b32:	69d9      	ldr	r1, [r3, #28]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b34      	ldr	r3, [pc, #208]	@ (8001c0c <HAL_ETH_Stop_IT+0xfc>)
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b40:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001b54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b58:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f023 0302 	bic.w	r3, r3, #2
 8001b6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b70:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0204 	bic.w	r2, r2, #4
 8001b80:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff fd38 	bl	8001600 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fc1d 	bl	80023d8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0208 	bic.w	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7ff fd22 	bl	8001600 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e00e      	b.n	8001be8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	3212      	adds	r2, #18
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d9ed      	bls.n	8001bca <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	fffe5f3e 	.word	0xfffe5f3e

08001c10 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07c      	b.n	8001d30 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c3c:	2b40      	cmp	r3, #64	@ 0x40
 8001c3e:	d176      	bne.n	8001d2e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001c40:	2200      	movs	r2, #0
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 fea1 	bl	800298c <ETH_Prepare_Tx_Descriptors>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e065      	b.n	8001d30 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c64:	f3bf 8f4f 	dsb	sy
}
 8001c68:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3206      	adds	r2, #6
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d904      	bls.n	8001c94 <HAL_ETH_Transmit+0x84>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	1f1a      	subs	r2, r3, #4
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3106      	adds	r1, #6
 8001ca0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ca4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ca8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001caa:	f7ff fc9d 	bl	80015e8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001cb0:	e037      	b.n	8001d22 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d011      	beq.n	8001ce8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	f043 0208 	orr.w	r2, r3, #8
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e023      	b.n	8001d30 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cee:	d018      	beq.n	8001d22 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cf0:	f7ff fc7a 	bl	80015e8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d302      	bcc.n	8001d06 <HAL_ETH_Transmit+0xf6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001d1c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e006      	b.n	8001d30 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	dbc3      	blt.n	8001cb2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001d44:	2301      	movs	r3, #1
 8001d46:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d4c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	3212      	adds	r2, #18
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d5e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001d60:	e042      	b.n	8001de8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d112      	bne.n	8001d90 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f004 fd6a 	bl	8006848 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	74fb      	strb	r3, [r7, #19]
 8001d7e:	e007      	b.n	8001d90 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	461a      	mov	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d028      	beq.n	8001de8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	4b26      	ldr	r3, [pc, #152]	@ (8001e3c <ETH_UpdateDescriptor+0x104>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	6053      	str	r3, [r2, #4]
 8001daa:	e005      	b.n	8001db8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d902      	bls.n	8001dd6 <ETH_UpdateDescriptor+0x9e>
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	3212      	adds	r2, #18
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <ETH_UpdateDescriptor+0xbc>
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1b6      	bne.n	8001d62 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d01a      	beq.n	8001e34 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3303      	adds	r3, #3
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e08:	f3bf 8f5f 	dmb	sy
}
 8001e0c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6919      	ldr	r1, [r3, #16]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	18ca      	adds	r2, r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e26:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	80004000 	.word	0x80004000

08001e40 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001e68:	4b4b      	ldr	r3, [pc, #300]	@ (8001f98 <HAL_ETH_IRQHandler+0x158>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00e      	beq.n	8001e96 <HAL_ETH_IRQHandler+0x56>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b43      	ldr	r3, [pc, #268]	@ (8001f9c <HAL_ETH_IRQHandler+0x15c>)
 8001e8e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f891 	bl	8001fb8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00f      	beq.n	8001ec0 <HAL_ETH_IRQHandler+0x80>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001eb8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f872 	bl	8001fa4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d042      	beq.n	8001f50 <HAL_ETH_IRQHandler+0x110>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d03d      	beq.n	8001f50 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eda:	f043 0208 	orr.w	r2, r3, #8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01a      	beq.n	8001f24 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	4b29      	ldr	r3, [pc, #164]	@ (8001fa0 <HAL_ETH_IRQHandler+0x160>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001f14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f18:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	22e0      	movs	r2, #224	@ 0xe0
 8001f1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001f22:	e012      	b.n	8001f4a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f42:	461a      	mov	r2, r3
 8001f44:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001f48:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f83e 	bl	8001fcc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00e      	beq.n	8001f78 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f838 	bl	8001fe0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_ETH_IRQHandler+0x158>)
 8001f84:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f88:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f832 	bl	8001ff4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001f90:	bf00      	nop
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40013c00 	.word	0x40013c00
 8001f9c:	00010040 	.word	0x00010040
 8001fa0:	007e2000 	.word	0x007e2000

08001fa4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 031c 	and.w	r3, r3, #28
 8002024:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	02db      	lsls	r3, r3, #11
 800202a:	b29b      	uxth	r3, r3
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	019b      	lsls	r3, r3, #6
 8002036:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f023 0302 	bic.w	r3, r3, #2
 8002046:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002058:	f7ff fac6 	bl	80015e8 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800205e:	e00d      	b.n	800207c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002060:	f7ff fac2 	bl	80015e8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206e:	d301      	bcc.n	8002074 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e010      	b.n	8002096 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ec      	bne.n	8002060 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 031c 	and.w	r3, r3, #28
 80020ba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	02db      	lsls	r3, r3, #11
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f8:	f7ff fa76 	bl	80015e8 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020fe:	e00d      	b.n	800211c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002100:	f7ff fa72 	bl	80015e8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800210e:	d301      	bcc.n	8002114 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e009      	b.n	8002128 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ec      	bne.n	8002100 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0e6      	b.n	8002312 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00b      	b.n	800234a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002338:	2b10      	cmp	r3, #16
 800233a:	d105      	bne.n	8002348 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f870 	bl	8002424 <ETH_SetMACConfig>

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 031c 	bic.w	r3, r3, #28
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800236c:	f001 fc54 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8002370:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d804      	bhi.n	8002384 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e019      	b.n	80023b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4a11      	ldr	r2, [pc, #68]	@ (80023cc <HAL_ETH_SetMDIOClockRange+0x78>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d204      	bcs.n	8002396 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f043 030c 	orr.w	r3, r3, #12
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e010      	b.n	80023b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d90c      	bls.n	80023b8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4a0c      	ldr	r2, [pc, #48]	@ (80023d4 <HAL_ETH_SetMDIOClockRange+0x80>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d804      	bhi.n	80023b0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e003      	b.n	80023b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f043 0310 	orr.w	r3, r3, #16
 80023b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	611a      	str	r2, [r3, #16]
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	02160ebf 	.word	0x02160ebf
 80023cc:	03938700 	.word	0x03938700
 80023d0:	05f5e0ff 	.word	0x05f5e0ff
 80023d4:	08f0d17f 	.word	0x08f0d17f

080023d8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023fa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002408:	2001      	movs	r0, #1
 800240a:	f7ff f8f9 	bl	8001600 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002418:	6193      	str	r3, [r2, #24]
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4b53      	ldr	r3, [pc, #332]	@ (8002588 <ETH_SetMACConfig+0x164>)
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7b9b      	ldrb	r3, [r3, #14]
 8002442:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	7c12      	ldrb	r2, [r2, #16]
 8002448:	2a00      	cmp	r2, #0
 800244a:	d102      	bne.n	8002452 <ETH_SetMACConfig+0x2e>
 800244c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002450:	e000      	b.n	8002454 <ETH_SetMACConfig+0x30>
 8002452:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002454:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	7c52      	ldrb	r2, [r2, #17]
 800245a:	2a00      	cmp	r2, #0
 800245c:	d102      	bne.n	8002464 <ETH_SetMACConfig+0x40>
 800245e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002462:	e000      	b.n	8002466 <ETH_SetMACConfig+0x42>
 8002464:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002466:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800246c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	7fdb      	ldrb	r3, [r3, #31]
 8002472:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002474:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800247a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	7f92      	ldrb	r2, [r2, #30]
 8002480:	2a00      	cmp	r2, #0
 8002482:	d102      	bne.n	800248a <ETH_SetMACConfig+0x66>
 8002484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002488:	e000      	b.n	800248c <ETH_SetMACConfig+0x68>
 800248a:	2200      	movs	r2, #0
                        macconf->Speed |
 800248c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7f1b      	ldrb	r3, [r3, #28]
 8002492:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002494:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800249a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	d102      	bne.n	80024b4 <ETH_SetMACConfig+0x90>
 80024ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b2:	e000      	b.n	80024b6 <ETH_SetMACConfig+0x92>
 80024b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	7bdb      	ldrb	r3, [r3, #15]
 80024bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80024ce:	4313      	orrs	r3, r2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff f88a 	bl	8001600 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002512:	2a00      	cmp	r2, #0
 8002514:	d101      	bne.n	800251a <ETH_SetMACConfig+0xf6>
 8002516:	2280      	movs	r2, #128	@ 0x80
 8002518:	e000      	b.n	800251c <ETH_SetMACConfig+0xf8>
 800251a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800251c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002522:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800252a:	2a01      	cmp	r2, #1
 800252c:	d101      	bne.n	8002532 <ETH_SetMACConfig+0x10e>
 800252e:	2208      	movs	r2, #8
 8002530:	e000      	b.n	8002534 <ETH_SetMACConfig+0x110>
 8002532:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002534:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800253c:	2a01      	cmp	r2, #1
 800253e:	d101      	bne.n	8002544 <ETH_SetMACConfig+0x120>
 8002540:	2204      	movs	r2, #4
 8002542:	e000      	b.n	8002546 <ETH_SetMACConfig+0x122>
 8002544:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002546:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800254e:	2a01      	cmp	r2, #1
 8002550:	d101      	bne.n	8002556 <ETH_SetMACConfig+0x132>
 8002552:	2202      	movs	r2, #2
 8002554:	e000      	b.n	8002558 <ETH_SetMACConfig+0x134>
 8002556:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002558:	4313      	orrs	r3, r2
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002570:	2001      	movs	r0, #1
 8002572:	f7ff f845 	bl	8001600 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	619a      	str	r2, [r3, #24]
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	fd20810f 	.word	0xfd20810f

0800258c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <ETH_SetDMAConfig+0x110>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	7b1b      	ldrb	r3, [r3, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d102      	bne.n	80025b8 <ETH_SetDMAConfig+0x2c>
 80025b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025b6:	e000      	b.n	80025ba <ETH_SetDMAConfig+0x2e>
 80025b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	7b5b      	ldrb	r3, [r3, #13]
 80025be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	7f52      	ldrb	r2, [r2, #29]
 80025c6:	2a00      	cmp	r2, #0
 80025c8:	d102      	bne.n	80025d0 <ETH_SetDMAConfig+0x44>
 80025ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80025ce:	e000      	b.n	80025d2 <ETH_SetDMAConfig+0x46>
 80025d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7b9b      	ldrb	r3, [r3, #14]
 80025d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	7f1b      	ldrb	r3, [r3, #28]
 80025e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80025e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7f9b      	ldrb	r3, [r3, #30]
 80025ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002600:	4313      	orrs	r3, r2
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002622:	2001      	movs	r0, #1
 8002624:	f7fe ffec 	bl	8001600 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	791b      	ldrb	r3, [r3, #4]
 800263a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002640:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002646:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800264c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002654:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002656:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800265e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002664:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800266e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002672:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002680:	2001      	movs	r0, #1
 8002682:	f7fe ffbd 	bl	8001600 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	f8de3f23 	.word	0xf8de3f23

080026a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0a6      	sub	sp, #152	@ 0x98
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026b4:	2300      	movs	r3, #0
 80026b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026be:	2301      	movs	r3, #1
 80026c0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026e2:	2300      	movs	r3, #0
 80026e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002708:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800270c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800270e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002712:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800271a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fe7f 	bl	8002424 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002726:	2301      	movs	r3, #1
 8002728:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800272a:	2301      	movs	r3, #1
 800272c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800272e:	2301      	movs	r3, #1
 8002730:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002734:	2301      	movs	r3, #1
 8002736:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002752:	2301      	movs	r3, #1
 8002754:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002756:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800275a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800275c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002760:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002762:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002766:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800276e:	2300      	movs	r3, #0
 8002770:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff05 	bl	800258c <ETH_SetDMAConfig>
}
 8002782:	bf00      	nop
 8002784:	3798      	adds	r7, #152	@ 0x98
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3305      	adds	r3, #5
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	3204      	adds	r2, #4
 80027a4:	7812      	ldrb	r2, [r2, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <ETH_MACAddressConfig+0x68>)
 80027ae:	4413      	add	r3, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3303      	adds	r3, #3
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	061a      	lsls	r2, r3, #24
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3302      	adds	r3, #2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3301      	adds	r3, #1
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	4313      	orrs	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <ETH_MACAddressConfig+0x6c>)
 80027de:	4413      	add	r3, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	6013      	str	r3, [r2, #0]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40028040 	.word	0x40028040
 80027f8:	40028044 	.word	0x40028044

080027fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e03e      	b.n	8002888 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68d9      	ldr	r1, [r3, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	3206      	adds	r2, #6
 800283c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d80c      	bhi.n	800286c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68d9      	ldr	r1, [r3, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	461a      	mov	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	e004      	b.n	8002876 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3301      	adds	r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b03      	cmp	r3, #3
 800288c:	d9bd      	bls.n	800280a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a0:	611a      	str	r2, [r3, #16]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e048      	b.n	800294e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6919      	ldr	r1, [r3, #16]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80028f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	3212      	adds	r2, #18
 800291a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d80c      	bhi.n	800293e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6919      	ldr	r1, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	440b      	add	r3, r1
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	e004      	b.n	8002948 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3301      	adds	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d9b3      	bls.n	80028bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297e:	60da      	str	r2, [r3, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800298c:	b480      	push	{r7}
 800298e:	b091      	sub	sp, #68	@ 0x44
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3318      	adds	r3, #24
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029ce:	d007      	beq.n	80029e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d4:	3304      	adds	r3, #4
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	e111      	b.n	8002c08 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80029e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e6:	3301      	adds	r3, #1
 80029e8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80029ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4b86      	ldr	r3, [pc, #536]	@ (8002c14 <ETH_Prepare_Tx_Descriptors+0x288>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029fe:	6852      	ldr	r2, [r2, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a40:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a64:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002a66:	e082      	b.n	8002b6e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e005      	b.n	8002a94 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a92:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a96:	3301      	adds	r3, #1
 8002a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d902      	bls.n	8002aa6 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aae:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002abc:	d007      	beq.n	8002ace <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d029      	beq.n	8002b22 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ada:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ae0:	e019      	b.n	8002b16 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ae2:	f3bf 8f5f 	dmb	sy
}
 8002ae6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af6:	3301      	adds	r3, #1
 8002af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d902      	bls.n	8002b06 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b02:	3b04      	subs	r3, #4
 8002b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b12:	3301      	adds	r3, #1
 8002b14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d3e1      	bcc.n	8002ae2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e072      	b.n	8002c08 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	3301      	adds	r3, #1
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b32      	ldr	r3, [pc, #200]	@ (8002c14 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b4e:	6852      	ldr	r2, [r2, #4]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	3301      	adds	r3, #1
 8002b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002b5c:	f3bf 8f5f 	dmb	sy
}
 8002b60:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f af78 	bne.w	8002a68 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e005      	b.n	8002b98 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b96:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	6a3a      	ldr	r2, [r7, #32]
 8002ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bac:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002bae:	f3bf 8f5f 	dmb	sy
}
 8002bb2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbe:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc8:	3304      	adds	r3, #4
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bd4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bda:	613b      	str	r3, [r7, #16]
  return(result);
 8002bdc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	2301      	movs	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f383 8810 	msr	PRIMASK, r3
}
 8002bea:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	4413      	add	r3, r2
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3744      	adds	r7, #68	@ 0x44
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	ffffe000 	.word	0xffffe000

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	@ 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e175      	b.n	8002f24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f040 8164 	bne.w	8002f1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d005      	beq.n	8002c6e <HAL_GPIO_Init+0x56>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d130      	bne.n	8002cd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0201 	and.w	r2, r3, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d017      	beq.n	8002d0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d123      	bne.n	8002d60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80be 	beq.w	8002f1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <HAL_GPIO_Init+0x324>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	4a65      	ldr	r2, [pc, #404]	@ (8002f3c <HAL_GPIO_Init+0x324>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dae:	4b63      	ldr	r3, [pc, #396]	@ (8002f3c <HAL_GPIO_Init+0x324>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dba:	4a61      	ldr	r2, [pc, #388]	@ (8002f40 <HAL_GPIO_Init+0x328>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a58      	ldr	r2, [pc, #352]	@ (8002f44 <HAL_GPIO_Init+0x32c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d037      	beq.n	8002e56 <HAL_GPIO_Init+0x23e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <HAL_GPIO_Init+0x330>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d031      	beq.n	8002e52 <HAL_GPIO_Init+0x23a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a56      	ldr	r2, [pc, #344]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d02b      	beq.n	8002e4e <HAL_GPIO_Init+0x236>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a55      	ldr	r2, [pc, #340]	@ (8002f50 <HAL_GPIO_Init+0x338>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d025      	beq.n	8002e4a <HAL_GPIO_Init+0x232>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a54      	ldr	r2, [pc, #336]	@ (8002f54 <HAL_GPIO_Init+0x33c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01f      	beq.n	8002e46 <HAL_GPIO_Init+0x22e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a53      	ldr	r2, [pc, #332]	@ (8002f58 <HAL_GPIO_Init+0x340>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d019      	beq.n	8002e42 <HAL_GPIO_Init+0x22a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a52      	ldr	r2, [pc, #328]	@ (8002f5c <HAL_GPIO_Init+0x344>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_GPIO_Init+0x226>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a51      	ldr	r2, [pc, #324]	@ (8002f60 <HAL_GPIO_Init+0x348>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00d      	beq.n	8002e3a <HAL_GPIO_Init+0x222>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a50      	ldr	r2, [pc, #320]	@ (8002f64 <HAL_GPIO_Init+0x34c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <HAL_GPIO_Init+0x21e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4f      	ldr	r2, [pc, #316]	@ (8002f68 <HAL_GPIO_Init+0x350>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_GPIO_Init+0x21a>
 8002e2e:	2309      	movs	r3, #9
 8002e30:	e012      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e32:	230a      	movs	r3, #10
 8002e34:	e010      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e36:	2308      	movs	r3, #8
 8002e38:	e00e      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	e00c      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e3e:	2306      	movs	r3, #6
 8002e40:	e00a      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e42:	2305      	movs	r3, #5
 8002e44:	e008      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e46:	2304      	movs	r3, #4
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e004      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_GPIO_Init+0x240>
 8002e56:	2300      	movs	r3, #0
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f002 0203 	and.w	r2, r2, #3
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4093      	lsls	r3, r2
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e68:	4935      	ldr	r1, [pc, #212]	@ (8002f40 <HAL_GPIO_Init+0x328>)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e76:	4b3d      	ldr	r3, [pc, #244]	@ (8002f6c <HAL_GPIO_Init+0x354>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9a:	4a34      	ldr	r2, [pc, #208]	@ (8002f6c <HAL_GPIO_Init+0x354>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea0:	4b32      	ldr	r3, [pc, #200]	@ (8002f6c <HAL_GPIO_Init+0x354>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec4:	4a29      	ldr	r2, [pc, #164]	@ (8002f6c <HAL_GPIO_Init+0x354>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eca:	4b28      	ldr	r3, [pc, #160]	@ (8002f6c <HAL_GPIO_Init+0x354>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eee:	4a1f      	ldr	r2, [pc, #124]	@ (8002f6c <HAL_GPIO_Init+0x354>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_GPIO_Init+0x354>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f18:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <HAL_GPIO_Init+0x354>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	f67f ae86 	bls.w	8002c38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40021400 	.word	0x40021400
 8002f5c:	40021800 	.word	0x40021800
 8002f60:	40021c00 	.word	0x40021c00
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40022400 	.word	0x40022400
 8002f6c:	40013c00 	.word	0x40013c00

08002f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f80:	787b      	ldrb	r3, [r7, #1]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f8c:	e003      	b.n	8002f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	619a      	str	r2, [r3, #24]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af02      	add	r7, sp, #8
 8002fa8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e108      	b.n	80031c6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd ffaa 	bl	8000f28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fe2:	d102      	bne.n	8002fea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 fe40 	bl	8005c74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7c1a      	ldrb	r2, [r3, #16]
 8002ffc:	f88d 2000 	strb.w	r2, [sp]
 8003000:	3304      	adds	r3, #4
 8003002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003004:	f002 fddc 	bl	8005bc0 <USB_CoreInit>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0d5      	b.n	80031c6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f002 fe38 	bl	8005c96 <USB_SetCurrentMode>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0c6      	b.n	80031c6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e04a      	b.n	80030d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3315      	adds	r3, #21
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3314      	adds	r3, #20
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	b298      	uxth	r0, r3
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	332e      	adds	r3, #46	@ 0x2e
 800307a:	4602      	mov	r2, r0
 800307c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3318      	adds	r3, #24
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	331c      	adds	r3, #28
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3320      	adds	r3, #32
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3324      	adds	r3, #36	@ 0x24
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	3301      	adds	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	791b      	ldrb	r3, [r3, #4]
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3af      	bcc.n	800303e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	e044      	b.n	800316e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	3301      	adds	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	791b      	ldrb	r3, [r3, #4]
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	429a      	cmp	r2, r3
 8003176:	d3b5      	bcc.n	80030e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7c1a      	ldrb	r2, [r3, #16]
 8003180:	f88d 2000 	strb.w	r2, [sp]
 8003184:	3304      	adds	r3, #4
 8003186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003188:	f002 fdd2 	bl	8005d30 <USB_DevInit>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e013      	b.n	80031c6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7b1b      	ldrb	r3, [r3, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d102      	bne.n	80031ba <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f80b 	bl	80031d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 ff8d 	bl	80060de <USB_DevDisconnect>

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031fe:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <HAL_PCDEx_ActivateLPM+0x44>)
 8003200:	4313      	orrs	r3, r2
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	10000003 	.word	0x10000003

08003218 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a04      	ldr	r2, [pc, #16]	@ (8003234 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003226:	6013      	str	r3, [r2, #0]
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40007000 	.word	0x40007000

08003238 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b23      	ldr	r3, [pc, #140]	@ (80032d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	4a22      	ldr	r2, [pc, #136]	@ (80032d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	@ 0x40
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800325a:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1d      	ldr	r2, [pc, #116]	@ (80032d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003264:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003266:	f7fe f9bf 	bl	80015e8 <HAL_GetTick>
 800326a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800326c:	e009      	b.n	8003282 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800326e:	f7fe f9bb 	bl	80015e8 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800327c:	d901      	bls.n	8003282 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e022      	b.n	80032c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003282:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328e:	d1ee      	bne.n	800326e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003290:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0f      	ldr	r2, [pc, #60]	@ (80032d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800329c:	f7fe f9a4 	bl	80015e8 <HAL_GetTick>
 80032a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032a2:	e009      	b.n	80032b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a4:	f7fe f9a0 	bl	80015e8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032b2:	d901      	bls.n	80032b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e007      	b.n	80032c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032c4:	d1ee      	bne.n	80032a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40007000 	.word	0x40007000

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e29b      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8087 	beq.w	800340a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032fc:	4b96      	ldr	r3, [pc, #600]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b04      	cmp	r3, #4
 8003306:	d00c      	beq.n	8003322 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003308:	4b93      	ldr	r3, [pc, #588]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b08      	cmp	r3, #8
 8003312:	d112      	bne.n	800333a <HAL_RCC_OscConfig+0x62>
 8003314:	4b90      	ldr	r3, [pc, #576]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800331c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003320:	d10b      	bne.n	800333a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003322:	4b8d      	ldr	r3, [pc, #564]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d06c      	beq.n	8003408 <HAL_RCC_OscConfig+0x130>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d168      	bne.n	8003408 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e275      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x7a>
 8003344:	4b84      	ldr	r3, [pc, #528]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a83      	ldr	r2, [pc, #524]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800334a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	e02e      	b.n	80033b0 <HAL_RCC_OscConfig+0xd8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x9c>
 800335a:	4b7f      	ldr	r3, [pc, #508]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7e      	ldr	r2, [pc, #504]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003360:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b7c      	ldr	r3, [pc, #496]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7b      	ldr	r2, [pc, #492]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800336c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e01d      	b.n	80033b0 <HAL_RCC_OscConfig+0xd8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0xc0>
 800337e:	4b76      	ldr	r3, [pc, #472]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a75      	ldr	r2, [pc, #468]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b73      	ldr	r3, [pc, #460]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a72      	ldr	r2, [pc, #456]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0xd8>
 8003398:	4b6f      	ldr	r3, [pc, #444]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6e      	ldr	r2, [pc, #440]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe f916 	bl	80015e8 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe f912 	bl	80015e8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	@ 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e229      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b61      	ldr	r3, [pc, #388]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0xe8>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe f902 	bl	80015e8 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe f8fe 	bl	80015e8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e215      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	4b57      	ldr	r3, [pc, #348]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x110>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d069      	beq.n	80034ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003416:	4b50      	ldr	r3, [pc, #320]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b4d      	ldr	r3, [pc, #308]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b08      	cmp	r3, #8
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x190>
 800342e:	4b4a      	ldr	r3, [pc, #296]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	4b47      	ldr	r3, [pc, #284]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x17a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1e9      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b41      	ldr	r3, [pc, #260]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	493d      	ldr	r1, [pc, #244]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	e040      	b.n	80034ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d023      	beq.n	80034b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003470:	4b39      	ldr	r3, [pc, #228]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a38      	ldr	r2, [pc, #224]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe f8b4 	bl	80015e8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003484:	f7fe f8b0 	bl	80015e8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1c7      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b30      	ldr	r3, [pc, #192]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4929      	ldr	r1, [pc, #164]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
 80034b6:	e018      	b.n	80034ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b8:	4b27      	ldr	r3, [pc, #156]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a26      	ldr	r2, [pc, #152]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe f890 	bl	80015e8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fe f88c 	bl	80015e8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1a3      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d038      	beq.n	8003568 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d019      	beq.n	8003532 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fe:	4b16      	ldr	r3, [pc, #88]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003502:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fe f86d 	bl	80015e8 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003512:	f7fe f869 	bl	80015e8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e180      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003524:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x23a>
 8003530:	e01a      	b.n	8003568 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003532:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003536:	4a08      	ldr	r2, [pc, #32]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fe f853 	bl	80015e8 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003546:	f7fe f84f 	bl	80015e8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d903      	bls.n	800355c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e166      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
 8003558:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b92      	ldr	r3, [pc, #584]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800355e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ee      	bne.n	8003546 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a4 	beq.w	80036be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b8c      	ldr	r3, [pc, #560]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	4b89      	ldr	r3, [pc, #548]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	4a88      	ldr	r2, [pc, #544]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	@ 0x40
 800358e:	4b86      	ldr	r3, [pc, #536]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359e:	4b83      	ldr	r3, [pc, #524]	@ (80037ac <HAL_RCC_OscConfig+0x4d4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035aa:	4b80      	ldr	r3, [pc, #512]	@ (80037ac <HAL_RCC_OscConfig+0x4d4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7f      	ldr	r2, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0x4d4>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fe f817 	bl	80015e8 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fe f813 	bl	80015e8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b64      	cmp	r3, #100	@ 0x64
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e12a      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d0:	4b76      	ldr	r3, [pc, #472]	@ (80037ac <HAL_RCC_OscConfig+0x4d4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x31a>
 80035e4:	4b70      	ldr	r3, [pc, #448]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e8:	4a6f      	ldr	r2, [pc, #444]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f0:	e02d      	b.n	800364e <HAL_RCC_OscConfig+0x376>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x33c>
 80035fa:	4b6b      	ldr	r3, [pc, #428]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	4a6a      	ldr	r2, [pc, #424]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	@ 0x70
 8003606:	4b68      	ldr	r3, [pc, #416]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360a:	4a67      	ldr	r2, [pc, #412]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	6713      	str	r3, [r2, #112]	@ 0x70
 8003612:	e01c      	b.n	800364e <HAL_RCC_OscConfig+0x376>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b05      	cmp	r3, #5
 800361a:	d10c      	bne.n	8003636 <HAL_RCC_OscConfig+0x35e>
 800361c:	4b62      	ldr	r3, [pc, #392]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003620:	4a61      	ldr	r2, [pc, #388]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003622:	f043 0304 	orr.w	r3, r3, #4
 8003626:	6713      	str	r3, [r2, #112]	@ 0x70
 8003628:	4b5f      	ldr	r3, [pc, #380]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362c:	4a5e      	ldr	r2, [pc, #376]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	@ 0x70
 8003634:	e00b      	b.n	800364e <HAL_RCC_OscConfig+0x376>
 8003636:	4b5c      	ldr	r3, [pc, #368]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	4a5b      	ldr	r2, [pc, #364]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	@ 0x70
 8003642:	4b59      	ldr	r3, [pc, #356]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	4a58      	ldr	r2, [pc, #352]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d015      	beq.n	8003682 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fd ffc7 	bl	80015e8 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	e00a      	b.n	8003674 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fd ffc3 	bl	80015e8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0d8      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	4b4c      	ldr	r3, [pc, #304]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ee      	beq.n	800365e <HAL_RCC_OscConfig+0x386>
 8003680:	e014      	b.n	80036ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fd ffb1 	bl	80015e8 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fd ffad 	bl	80015e8 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e0c2      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a0:	4b41      	ldr	r3, [pc, #260]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ee      	bne.n	800368a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4b3d      	ldr	r3, [pc, #244]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	4a3c      	ldr	r2, [pc, #240]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80036b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80ae 	beq.w	8003824 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c8:	4b37      	ldr	r3, [pc, #220]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d06d      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d14b      	bne.n	8003774 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036dc:	4b32      	ldr	r3, [pc, #200]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a31      	ldr	r2, [pc, #196]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 80036e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fd ff7e 	bl	80015e8 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fd ff7a 	bl	80015e8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e091      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69da      	ldr	r2, [r3, #28]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	019b      	lsls	r3, r3, #6
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	3b01      	subs	r3, #1
 8003728:	041b      	lsls	r3, r3, #16
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	071b      	lsls	r3, r3, #28
 800373a:	491b      	ldr	r1, [pc, #108]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fd ff4c 	bl	80015e8 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003754:	f7fd ff48 	bl	80015e8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e05f      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x47c>
 8003772:	e057      	b.n	8003824 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a0b      	ldr	r2, [pc, #44]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800377a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fd ff32 	bl	80015e8 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fd ff2e 	bl	80015e8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e045      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	4b03      	ldr	r3, [pc, #12]	@ (80037a8 <HAL_RCC_OscConfig+0x4d0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x4b0>
 80037a6:	e03d      	b.n	8003824 <HAL_RCC_OscConfig+0x54c>
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <HAL_RCC_OscConfig+0x558>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d030      	beq.n	8003820 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d129      	bne.n	8003820 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d122      	bne.n	8003820 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037e0:	4013      	ands	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d119      	bne.n	8003820 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	3b01      	subs	r3, #1
 80037fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d10f      	bne.n	8003820 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d107      	bne.n	8003820 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d0      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d910      	bls.n	800387c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b67      	ldr	r3, [pc, #412]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 020f 	bic.w	r2, r3, #15
 8003862:	4965      	ldr	r1, [pc, #404]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a58      	ldr	r2, [pc, #352]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800389e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a52      	ldr	r2, [pc, #328]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d040      	beq.n	8003958 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d115      	bne.n	8003916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e073      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3d      	ldr	r3, [pc, #244]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e06b      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b39      	ldr	r3, [pc, #228]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4936      	ldr	r1, [pc, #216]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fd fe5e 	bl	80015e8 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd fe5a 	bl	80015e8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e053      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b27      	ldr	r3, [pc, #156]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d210      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b24      	ldr	r3, [pc, #144]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 020f 	bic.w	r2, r3, #15
 800396e:	4922      	ldr	r1, [pc, #136]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039b2:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490a      	ldr	r1, [pc, #40]	@ (8003a00 <HAL_RCC_ClockConfig+0x1cc>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <HAL_RCC_ClockConfig+0x1d0>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <HAL_RCC_ClockConfig+0x1d4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd fb18 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00
 80039fc:	40023800 	.word	0x40023800
 8003a00:	080190a4 	.word	0x080190a4
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000004 	.word	0x20000004

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b094      	sub	sp, #80	@ 0x50
 8003a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a24:	4b79      	ldr	r3, [pc, #484]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	f200 80e1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3e:	e0db      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b73      	ldr	r3, [pc, #460]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a44:	e0db      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b73      	ldr	r3, [pc, #460]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a4a:	e0d8      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a56:	4b6d      	ldr	r3, [pc, #436]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b6a      	ldr	r3, [pc, #424]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	2200      	movs	r2, #0
 8003a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a7e:	4622      	mov	r2, r4
 8003a80:	462b      	mov	r3, r5
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a90:	0150      	lsls	r0, r2, #5
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4621      	mov	r1, r4
 8003a98:	1a51      	subs	r1, r2, r1
 8003a9a:	6139      	str	r1, [r7, #16]
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	018b      	lsls	r3, r1, #6
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aba:	4651      	mov	r1, sl
 8003abc:	018a      	lsls	r2, r1, #6
 8003abe:	4651      	mov	r1, sl
 8003ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	eb18 0303 	adds.w	r3, r8, r3
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	462b      	mov	r3, r5
 8003aec:	eb49 0303 	adc.w	r3, r9, r3
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003afe:	4629      	mov	r1, r5
 8003b00:	024b      	lsls	r3, r1, #9
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b08:	4621      	mov	r1, r4
 8003b0a:	024a      	lsls	r2, r1, #9
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b12:	2200      	movs	r2, #0
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b1c:	f7fc fbe0 	bl	80002e0 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b28:	e058      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b38      	ldr	r3, [pc, #224]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	2200      	movs	r2, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	4611      	mov	r1, r2
 8003b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b56:	0150      	lsls	r0, r2, #5
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b62:	4649      	mov	r1, r9
 8003b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b80:	eb63 050b 	sbc.w	r5, r3, fp
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	00eb      	lsls	r3, r5, #3
 8003b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b92:	00e2      	lsls	r2, r4, #3
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	eb45 0303 	adc.w	r3, r5, r3
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	61fa      	str	r2, [r7, #28]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	f7fc fb86 	bl	80002e0 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003bec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3750      	adds	r7, #80	@ 0x50
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	007a1200 	.word	0x007a1200

08003c18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	@ (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000000 	.word	0x20000000

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	@ (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	080190b4 	.word	0x080190b4

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c5c:	f7ff ffdc 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0b5b      	lsrs	r3, r3, #13
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	080190b4 	.word	0x080190b4

08003c80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	220f      	movs	r2, #15
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c90:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <HAL_RCC_GetClockConfig+0x5c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0203 	and.w	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <HAL_RCC_GetClockConfig+0x5c>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cdc <HAL_RCC_GetClockConfig+0x5c>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cb4:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <HAL_RCC_GetClockConfig+0x5c>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cc2:	4b07      	ldr	r3, [pc, #28]	@ (8003ce0 <HAL_RCC_GetClockConfig+0x60>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	601a      	str	r2, [r3, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40023c00 	.word	0x40023c00

08003ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d012      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d0c:	4b69      	ldr	r3, [pc, #420]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a68      	ldr	r2, [pc, #416]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d16:	6093      	str	r3, [r2, #8]
 8003d18:	4b66      	ldr	r3, [pc, #408]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d20:	4964      	ldr	r1, [pc, #400]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d017      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	4959      	ldr	r1, [pc, #356]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d017      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	494a      	ldr	r1, [pc, #296]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 808b 	beq.w	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	4a39      	ldr	r2, [pc, #228]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd4:	4b37      	ldr	r3, [pc, #220]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003de0:	4b35      	ldr	r3, [pc, #212]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a34      	ldr	r2, [pc, #208]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fd fbfc 	bl	80015e8 <HAL_GetTick>
 8003df0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df4:	f7fd fbf8 	bl	80015e8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	@ 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e38f      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e06:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e12:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d035      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d02e      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e30:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e46:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e52:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e58:	4b16      	ldr	r3, [pc, #88]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d114      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd fbc0 	bl	80015e8 <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fbbc 	bl	80015e8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e351      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ee      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ea8:	4b04      	ldr	r3, [pc, #16]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eaa:	400b      	ands	r3, r1
 8003eac:	4901      	ldr	r1, [pc, #4]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	0ffffcff 	.word	0x0ffffcff
 8003ec0:	4bac      	ldr	r3, [pc, #688]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4aab      	ldr	r2, [pc, #684]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003eca:	6093      	str	r3, [r2, #8]
 8003ecc:	4ba9      	ldr	r3, [pc, #676]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ece:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	49a6      	ldr	r1, [pc, #664]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eea:	4ba2      	ldr	r3, [pc, #648]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ef0:	4aa0      	ldr	r2, [pc, #640]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ef6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003efa:	4b9e      	ldr	r3, [pc, #632]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f04:	499b      	ldr	r1, [pc, #620]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f18:	4b96      	ldr	r3, [pc, #600]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f26:	4993      	ldr	r1, [pc, #588]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f3a:	4b8e      	ldr	r3, [pc, #568]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f48:	498a      	ldr	r1, [pc, #552]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f5c:	4b85      	ldr	r3, [pc, #532]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f6a:	4982      	ldr	r1, [pc, #520]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8c:	4979      	ldr	r1, [pc, #484]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa0:	4b74      	ldr	r3, [pc, #464]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	4971      	ldr	r1, [pc, #452]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fc2:	4b6c      	ldr	r3, [pc, #432]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	f023 020c 	bic.w	r2, r3, #12
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd0:	4968      	ldr	r1, [pc, #416]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe4:	4b63      	ldr	r3, [pc, #396]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff2:	4960      	ldr	r1, [pc, #384]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004006:	4b5b      	ldr	r3, [pc, #364]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004014:	4957      	ldr	r1, [pc, #348]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004028:	4b52      	ldr	r3, [pc, #328]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	494f      	ldr	r1, [pc, #316]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800404a:	4b4a      	ldr	r3, [pc, #296]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	4946      	ldr	r1, [pc, #280]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800406c:	4b41      	ldr	r3, [pc, #260]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004072:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407a:	493e      	ldr	r1, [pc, #248]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800408e:	4b39      	ldr	r3, [pc, #228]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004094:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409c:	4935      	ldr	r1, [pc, #212]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040b0:	4b30      	ldr	r3, [pc, #192]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040be:	492d      	ldr	r1, [pc, #180]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d011      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040d2:	4b28      	ldr	r3, [pc, #160]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e0:	4924      	ldr	r1, [pc, #144]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f0:	d101      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040f2:	2301      	movs	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004112:	4b18      	ldr	r3, [pc, #96]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004118:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004120:	4914      	ldr	r1, [pc, #80]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004134:	4b0f      	ldr	r3, [pc, #60]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004144:	490b      	ldr	r1, [pc, #44]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004158:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004168:	4902      	ldr	r1, [pc, #8]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004170:	e002      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004184:	4b8a      	ldr	r3, [pc, #552]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800418a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	4986      	ldr	r1, [pc, #536]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041a8:	4b81      	ldr	r3, [pc, #516]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041b8:	497d      	ldr	r1, [pc, #500]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d006      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80d6 	beq.w	8004380 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041d4:	4b76      	ldr	r3, [pc, #472]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a75      	ldr	r2, [pc, #468]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e0:	f7fd fa02 	bl	80015e8 <HAL_GetTick>
 80041e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041e8:	f7fd f9fe 	bl	80015e8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	@ 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e195      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041fa:	4b6d      	ldr	r3, [pc, #436]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d021      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11d      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800421a:	4b65      	ldr	r3, [pc, #404]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004228:	4b61      	ldr	r3, [pc, #388]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800422e:	0e1b      	lsrs	r3, r3, #24
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	019a      	lsls	r2, r3, #6
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	061b      	lsls	r3, r3, #24
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	071b      	lsls	r3, r3, #28
 800424e:	4958      	ldr	r1, [pc, #352]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02e      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004280:	d129      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004282:	4b4b      	ldr	r3, [pc, #300]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004290:	4b47      	ldr	r3, [pc, #284]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004296:	0f1b      	lsrs	r3, r3, #28
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	019a      	lsls	r2, r3, #6
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	071b      	lsls	r3, r3, #28
 80042b6:	493e      	ldr	r1, [pc, #248]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042be:	4b3c      	ldr	r3, [pc, #240]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042c4:	f023 021f 	bic.w	r2, r3, #31
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	3b01      	subs	r3, #1
 80042ce:	4938      	ldr	r1, [pc, #224]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01d      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042e2:	4b33      	ldr	r3, [pc, #204]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e8:	0e1b      	lsrs	r3, r3, #24
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042f0:	4b2f      	ldr	r3, [pc, #188]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f6:	0f1b      	lsrs	r3, r3, #28
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	019a      	lsls	r2, r3, #6
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	041b      	lsls	r3, r3, #16
 800430a:	431a      	orrs	r2, r3
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	071b      	lsls	r3, r3, #28
 8004316:	4926      	ldr	r1, [pc, #152]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d011      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	491a      	ldr	r1, [pc, #104]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800434e:	4b18      	ldr	r3, [pc, #96]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a17      	ldr	r2, [pc, #92]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004354:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435a:	f7fd f945 	bl	80015e8 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004362:	f7fd f941 	bl	80015e8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b64      	cmp	r3, #100	@ 0x64
 800436e:	d901      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e0d8      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004374:	4b0e      	ldr	r3, [pc, #56]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	f040 80ce 	bne.w	8004524 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004388:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a08      	ldr	r2, [pc, #32]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004394:	f7fd f928 	bl	80015e8 <HAL_GetTick>
 8004398:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800439a:	e00b      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800439c:	f7fd f924 	bl	80015e8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d904      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0bb      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c0:	d0ec      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d02e      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d12a      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ea:	4b51      	ldr	r3, [pc, #324]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fe:	0f1b      	lsrs	r3, r3, #28
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	019a      	lsls	r2, r3, #6
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	071b      	lsls	r3, r3, #28
 800441e:	4944      	ldr	r1, [pc, #272]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004426:	4b42      	ldr	r3, [pc, #264]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800442c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	3b01      	subs	r3, #1
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	493d      	ldr	r1, [pc, #244]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d022      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004454:	d11d      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004456:	4b36      	ldr	r3, [pc, #216]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445c:	0e1b      	lsrs	r3, r3, #24
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004464:	4b32      	ldr	r3, [pc, #200]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	0f1b      	lsrs	r3, r3, #28
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	019a      	lsls	r2, r3, #6
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	431a      	orrs	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	431a      	orrs	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	071b      	lsls	r3, r3, #28
 800448a:	4929      	ldr	r1, [pc, #164]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d028      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800449e:	4b24      	ldr	r3, [pc, #144]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a4:	0e1b      	lsrs	r3, r3, #24
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044ac:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	0c1b      	lsrs	r3, r3, #16
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	019a      	lsls	r2, r3, #6
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	431a      	orrs	r2, r3
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	071b      	lsls	r3, r3, #28
 80044d2:	4917      	ldr	r1, [pc, #92]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044da:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	4911      	ldr	r1, [pc, #68]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fc:	f7fd f874 	bl	80015e8 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004504:	f7fd f870 	bl	80015e8 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	@ 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e007      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800451e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004522:	d1ef      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800

08004534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e09d      	b.n	8004682 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d108      	bne.n	8004560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004556:	d009      	beq.n	800456c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	61da      	str	r2, [r3, #28]
 800455e:	e005      	b.n	800456c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fc fc2a 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045ac:	d902      	bls.n	80045b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e002      	b.n	80045ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80045c2:	d007      	beq.n	80045d4 <HAL_SPI_Init+0xa0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045cc:	d002      	beq.n	80045d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	ea42 0103 	orr.w	r1, r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	0c1b      	lsrs	r3, r3, #16
 8004630:	f003 0204 	and.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004650:	ea42 0103 	orr.w	r1, r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004670:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b088      	sub	sp, #32
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800469a:	f7fc ffa5 	bl	80015e8 <HAL_GetTick>
 800469e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d001      	beq.n	80046b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
 80046b2:	e15c      	b.n	800496e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_SPI_Transmit+0x36>
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e154      	b.n	800496e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_SPI_Transmit+0x48>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e14d      	b.n	800496e <HAL_SPI_Transmit+0x2e4>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2203      	movs	r2, #3
 80046de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004724:	d10f      	bne.n	8004746 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004744:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b40      	cmp	r3, #64	@ 0x40
 8004752:	d007      	beq.n	8004764 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800476c:	d952      	bls.n	8004814 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_SPI_Transmit+0xf2>
 8004776:	8b7b      	ldrh	r3, [r7, #26]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d145      	bne.n	8004808 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	881a      	ldrh	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047a0:	e032      	b.n	8004808 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d112      	bne.n	80047d6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047d4:	e018      	b.n	8004808 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d6:	f7fc ff07 	bl	80015e8 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d803      	bhi.n	80047ee <HAL_SPI_Transmit+0x164>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d102      	bne.n	80047f4 <HAL_SPI_Transmit+0x16a>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e0b2      	b.n	800496e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1c7      	bne.n	80047a2 <HAL_SPI_Transmit+0x118>
 8004812:	e083      	b.n	800491c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_SPI_Transmit+0x198>
 800481c:	8b7b      	ldrh	r3, [r7, #26]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d177      	bne.n	8004912 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d912      	bls.n	8004852 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	1c9a      	adds	r2, r3, #2
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b02      	subs	r3, #2
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004850:	e05f      	b.n	8004912 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004878:	e04b      	b.n	8004912 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d12b      	bne.n	80048e0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d912      	bls.n	80048b8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	881a      	ldrh	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	1c9a      	adds	r2, r3, #2
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b02      	subs	r3, #2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048b6:	e02c      	b.n	8004912 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048de:	e018      	b.n	8004912 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e0:	f7fc fe82 	bl	80015e8 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d803      	bhi.n	80048f8 <HAL_SPI_Transmit+0x26e>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d102      	bne.n	80048fe <HAL_SPI_Transmit+0x274>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e02d      	b.n	800496e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ae      	bne.n	800487a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	6839      	ldr	r1, [r7, #0]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f947 	bl	8004bb4 <SPI_EndRxTxTransaction>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800496c:	2300      	movs	r3, #0
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004988:	f7fc fe2e 	bl	80015e8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	4413      	add	r3, r2
 8004996:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004998:	f7fc fe26 	bl	80015e8 <HAL_GetTick>
 800499c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800499e:	4b39      	ldr	r3, [pc, #228]	@ (8004a84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	015b      	lsls	r3, r3, #5
 80049a4:	0d1b      	lsrs	r3, r3, #20
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ae:	e055      	b.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d051      	beq.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b8:	f7fc fe16 	bl	80015e8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d902      	bls.n	80049ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d13d      	bne.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049e6:	d111      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f0:	d004      	beq.n	80049fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fa:	d107      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a14:	d10f      	bne.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e018      	b.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e002      	b.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d19a      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000000 	.word	0x20000000

08004a88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a9a:	f7fc fda5 	bl	80015e8 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004aaa:	f7fc fd9d 	bl	80015e8 <HAL_GetTick>
 8004aae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00da      	lsls	r2, r3, #3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	0d1b      	lsrs	r3, r3, #20
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ad0:	e061      	b.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ad8:	d107      	bne.n	8004aea <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d051      	beq.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004af2:	f7fc fd79 	bl	80015e8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d902      	bls.n	8004b08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d13d      	bne.n	8004b84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b20:	d111      	bne.n	8004b46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b2a:	d004      	beq.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b34:	d107      	bne.n	8004b46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b4e:	d10f      	bne.n	8004b70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e011      	b.n	8004ba8 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b8e:	e002      	b.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d195      	bne.n	8004ad2 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	@ 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000000 	.word	0x20000000

08004bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff ff5b 	bl	8004a88 <SPI_WaitFifoStateUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bdc:	f043 0220 	orr.w	r2, r3, #32
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e046      	b.n	8004c76 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004be8:	4b25      	ldr	r3, [pc, #148]	@ (8004c80 <SPI_EndRxTxTransaction+0xcc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a25      	ldr	r2, [pc, #148]	@ (8004c84 <SPI_EndRxTxTransaction+0xd0>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	0d5b      	lsrs	r3, r3, #21
 8004bf4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c06:	d112      	bne.n	8004c2e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2180      	movs	r1, #128	@ 0x80
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7ff feb0 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d016      	beq.n	8004c4c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e023      	b.n	8004c76 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c44:	2b80      	cmp	r3, #128	@ 0x80
 8004c46:	d0f2      	beq.n	8004c2e <SPI_EndRxTxTransaction+0x7a>
 8004c48:	e000      	b.n	8004c4c <SPI_EndRxTxTransaction+0x98>
        break;
 8004c4a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff ff15 	bl	8004a88 <SPI_WaitFifoStateUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c68:	f043 0220 	orr.w	r2, r3, #32
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e000      	b.n	8004c76 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000000 	.word	0x20000000
 8004c84:	165e9f81 	.word	0x165e9f81

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e049      	b.n	8004d2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f841 	bl	8004d36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 f9e8 	bl	800509c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
	...

08004d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d001      	beq.n	8004d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e054      	b.n	8004e0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a26      	ldr	r2, [pc, #152]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d022      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x80>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8e:	d01d      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x80>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a22      	ldr	r2, [pc, #136]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d018      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x80>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a21      	ldr	r2, [pc, #132]	@ (8004e24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x80>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00e      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x80>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e2c <HAL_TIM_Base_Start_IT+0xe0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d009      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x80>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xe4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x80>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e34 <HAL_TIM_Base_Start_IT+0xe8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d115      	bne.n	8004df8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	4b19      	ldr	r3, [pc, #100]	@ (8004e38 <HAL_TIM_Base_Start_IT+0xec>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d015      	beq.n	8004e0a <HAL_TIM_Base_Start_IT+0xbe>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de4:	d011      	beq.n	8004e0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0201 	orr.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df6:	e008      	b.n	8004e0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	e000      	b.n	8004e0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40010400 	.word	0x40010400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40001800 	.word	0x40001800
 8004e38:	00010007 	.word	0x00010007

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d020      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0202 	mvn.w	r2, #2
 8004e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f8e9 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f8db 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f8ec 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8c3 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8b5 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f8c6 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d020      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0208 	mvn.w	r2, #8
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f89d 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f88f 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f8a0 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f877 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f869 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f87a 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0201 	mvn.w	r2, #1
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb fedc 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f913 	bl	80051fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f90b 	bl	8005210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00c      	beq.n	800501e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f834 	bl	8005086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00c      	beq.n	8005042 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f06f 0220 	mvn.w	r2, #32
 800503a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8d3 	bl	80051e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a43      	ldr	r2, [pc, #268]	@ (80051bc <TIM_Base_SetConfig+0x120>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a40      	ldr	r2, [pc, #256]	@ (80051c0 <TIM_Base_SetConfig+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3f      	ldr	r2, [pc, #252]	@ (80051c4 <TIM_Base_SetConfig+0x128>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3e      	ldr	r2, [pc, #248]	@ (80051c8 <TIM_Base_SetConfig+0x12c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3d      	ldr	r2, [pc, #244]	@ (80051cc <TIM_Base_SetConfig+0x130>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a32      	ldr	r2, [pc, #200]	@ (80051bc <TIM_Base_SetConfig+0x120>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fc:	d027      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2f      	ldr	r2, [pc, #188]	@ (80051c0 <TIM_Base_SetConfig+0x124>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d023      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2e      	ldr	r2, [pc, #184]	@ (80051c4 <TIM_Base_SetConfig+0x128>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01f      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2d      	ldr	r2, [pc, #180]	@ (80051c8 <TIM_Base_SetConfig+0x12c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2c      	ldr	r2, [pc, #176]	@ (80051cc <TIM_Base_SetConfig+0x130>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d017      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2b      	ldr	r2, [pc, #172]	@ (80051d0 <TIM_Base_SetConfig+0x134>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2a      	ldr	r2, [pc, #168]	@ (80051d4 <TIM_Base_SetConfig+0x138>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00f      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a29      	ldr	r2, [pc, #164]	@ (80051d8 <TIM_Base_SetConfig+0x13c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a28      	ldr	r2, [pc, #160]	@ (80051dc <TIM_Base_SetConfig+0x140>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a27      	ldr	r2, [pc, #156]	@ (80051e0 <TIM_Base_SetConfig+0x144>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a26      	ldr	r2, [pc, #152]	@ (80051e4 <TIM_Base_SetConfig+0x148>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a0e      	ldr	r2, [pc, #56]	@ (80051bc <TIM_Base_SetConfig+0x120>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_Base_SetConfig+0xf2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a10      	ldr	r2, [pc, #64]	@ (80051cc <TIM_Base_SetConfig+0x130>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d103      	bne.n	8005196 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f043 0204 	orr.w	r2, r3, #4
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	601a      	str	r2, [r3, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40010400 	.word	0x40010400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800
 80051dc:	40001800 	.word	0x40001800
 80051e0:	40001c00 	.word	0x40001c00
 80051e4:	40002000 	.word	0x40002000

080051e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e040      	b.n	80052b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fb fe0e 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2224      	movs	r2, #36	@ 0x24
 8005250:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa8c 	bl	8005788 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f825 	bl	80052c0 <UART_SetConfig>
 8005276:	4603      	mov	r3, r0
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e01b      	b.n	80052b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800528e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800529e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fb0b 	bl	80058cc <UART_CheckIdleState>
 80052b6:	4603      	mov	r3, r0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4ba6      	ldr	r3, [pc, #664]	@ (8005584 <UART_SetConfig+0x2c4>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	6979      	ldr	r1, [r7, #20]
 80052f4:	430b      	orrs	r3, r1
 80052f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a94      	ldr	r2, [pc, #592]	@ (8005588 <UART_SetConfig+0x2c8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d120      	bne.n	800537e <UART_SetConfig+0xbe>
 800533c:	4b93      	ldr	r3, [pc, #588]	@ (800558c <UART_SetConfig+0x2cc>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b03      	cmp	r3, #3
 8005348:	d816      	bhi.n	8005378 <UART_SetConfig+0xb8>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0x90>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005361 	.word	0x08005361
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005367 	.word	0x08005367
 800535c:	08005373 	.word	0x08005373
 8005360:	2301      	movs	r3, #1
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	e150      	b.n	8005608 <UART_SetConfig+0x348>
 8005366:	2302      	movs	r3, #2
 8005368:	77fb      	strb	r3, [r7, #31]
 800536a:	e14d      	b.n	8005608 <UART_SetConfig+0x348>
 800536c:	2304      	movs	r3, #4
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e14a      	b.n	8005608 <UART_SetConfig+0x348>
 8005372:	2308      	movs	r3, #8
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e147      	b.n	8005608 <UART_SetConfig+0x348>
 8005378:	2310      	movs	r3, #16
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e144      	b.n	8005608 <UART_SetConfig+0x348>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a83      	ldr	r2, [pc, #524]	@ (8005590 <UART_SetConfig+0x2d0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d132      	bne.n	80053ee <UART_SetConfig+0x12e>
 8005388:	4b80      	ldr	r3, [pc, #512]	@ (800558c <UART_SetConfig+0x2cc>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	f003 030c 	and.w	r3, r3, #12
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d828      	bhi.n	80053e8 <UART_SetConfig+0x128>
 8005396:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <UART_SetConfig+0xdc>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080053e9 	.word	0x080053e9
 80053a4:	080053e9 	.word	0x080053e9
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053dd 	.word	0x080053dd
 80053b0:	080053e9 	.word	0x080053e9
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	080053e9 	.word	0x080053e9
 80053bc:	080053d7 	.word	0x080053d7
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053e9 	.word	0x080053e9
 80053cc:	080053e3 	.word	0x080053e3
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e118      	b.n	8005608 <UART_SetConfig+0x348>
 80053d6:	2302      	movs	r3, #2
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e115      	b.n	8005608 <UART_SetConfig+0x348>
 80053dc:	2304      	movs	r3, #4
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e112      	b.n	8005608 <UART_SetConfig+0x348>
 80053e2:	2308      	movs	r3, #8
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e10f      	b.n	8005608 <UART_SetConfig+0x348>
 80053e8:	2310      	movs	r3, #16
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e10c      	b.n	8005608 <UART_SetConfig+0x348>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a68      	ldr	r2, [pc, #416]	@ (8005594 <UART_SetConfig+0x2d4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d120      	bne.n	800543a <UART_SetConfig+0x17a>
 80053f8:	4b64      	ldr	r3, [pc, #400]	@ (800558c <UART_SetConfig+0x2cc>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005402:	2b30      	cmp	r3, #48	@ 0x30
 8005404:	d013      	beq.n	800542e <UART_SetConfig+0x16e>
 8005406:	2b30      	cmp	r3, #48	@ 0x30
 8005408:	d814      	bhi.n	8005434 <UART_SetConfig+0x174>
 800540a:	2b20      	cmp	r3, #32
 800540c:	d009      	beq.n	8005422 <UART_SetConfig+0x162>
 800540e:	2b20      	cmp	r3, #32
 8005410:	d810      	bhi.n	8005434 <UART_SetConfig+0x174>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <UART_SetConfig+0x15c>
 8005416:	2b10      	cmp	r3, #16
 8005418:	d006      	beq.n	8005428 <UART_SetConfig+0x168>
 800541a:	e00b      	b.n	8005434 <UART_SetConfig+0x174>
 800541c:	2300      	movs	r3, #0
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e0f2      	b.n	8005608 <UART_SetConfig+0x348>
 8005422:	2302      	movs	r3, #2
 8005424:	77fb      	strb	r3, [r7, #31]
 8005426:	e0ef      	b.n	8005608 <UART_SetConfig+0x348>
 8005428:	2304      	movs	r3, #4
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e0ec      	b.n	8005608 <UART_SetConfig+0x348>
 800542e:	2308      	movs	r3, #8
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e0e9      	b.n	8005608 <UART_SetConfig+0x348>
 8005434:	2310      	movs	r3, #16
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e0e6      	b.n	8005608 <UART_SetConfig+0x348>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a56      	ldr	r2, [pc, #344]	@ (8005598 <UART_SetConfig+0x2d8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d120      	bne.n	8005486 <UART_SetConfig+0x1c6>
 8005444:	4b51      	ldr	r3, [pc, #324]	@ (800558c <UART_SetConfig+0x2cc>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800544e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005450:	d013      	beq.n	800547a <UART_SetConfig+0x1ba>
 8005452:	2bc0      	cmp	r3, #192	@ 0xc0
 8005454:	d814      	bhi.n	8005480 <UART_SetConfig+0x1c0>
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d009      	beq.n	800546e <UART_SetConfig+0x1ae>
 800545a:	2b80      	cmp	r3, #128	@ 0x80
 800545c:	d810      	bhi.n	8005480 <UART_SetConfig+0x1c0>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <UART_SetConfig+0x1a8>
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d006      	beq.n	8005474 <UART_SetConfig+0x1b4>
 8005466:	e00b      	b.n	8005480 <UART_SetConfig+0x1c0>
 8005468:	2300      	movs	r3, #0
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e0cc      	b.n	8005608 <UART_SetConfig+0x348>
 800546e:	2302      	movs	r3, #2
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e0c9      	b.n	8005608 <UART_SetConfig+0x348>
 8005474:	2304      	movs	r3, #4
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e0c6      	b.n	8005608 <UART_SetConfig+0x348>
 800547a:	2308      	movs	r3, #8
 800547c:	77fb      	strb	r3, [r7, #31]
 800547e:	e0c3      	b.n	8005608 <UART_SetConfig+0x348>
 8005480:	2310      	movs	r3, #16
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e0c0      	b.n	8005608 <UART_SetConfig+0x348>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a44      	ldr	r2, [pc, #272]	@ (800559c <UART_SetConfig+0x2dc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d125      	bne.n	80054dc <UART_SetConfig+0x21c>
 8005490:	4b3e      	ldr	r3, [pc, #248]	@ (800558c <UART_SetConfig+0x2cc>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549e:	d017      	beq.n	80054d0 <UART_SetConfig+0x210>
 80054a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054a4:	d817      	bhi.n	80054d6 <UART_SetConfig+0x216>
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054aa:	d00b      	beq.n	80054c4 <UART_SetConfig+0x204>
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b0:	d811      	bhi.n	80054d6 <UART_SetConfig+0x216>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <UART_SetConfig+0x1fe>
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ba:	d006      	beq.n	80054ca <UART_SetConfig+0x20a>
 80054bc:	e00b      	b.n	80054d6 <UART_SetConfig+0x216>
 80054be:	2300      	movs	r3, #0
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e0a1      	b.n	8005608 <UART_SetConfig+0x348>
 80054c4:	2302      	movs	r3, #2
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e09e      	b.n	8005608 <UART_SetConfig+0x348>
 80054ca:	2304      	movs	r3, #4
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e09b      	b.n	8005608 <UART_SetConfig+0x348>
 80054d0:	2308      	movs	r3, #8
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e098      	b.n	8005608 <UART_SetConfig+0x348>
 80054d6:	2310      	movs	r3, #16
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e095      	b.n	8005608 <UART_SetConfig+0x348>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2f      	ldr	r2, [pc, #188]	@ (80055a0 <UART_SetConfig+0x2e0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d125      	bne.n	8005532 <UART_SetConfig+0x272>
 80054e6:	4b29      	ldr	r3, [pc, #164]	@ (800558c <UART_SetConfig+0x2cc>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054f4:	d017      	beq.n	8005526 <UART_SetConfig+0x266>
 80054f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054fa:	d817      	bhi.n	800552c <UART_SetConfig+0x26c>
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005500:	d00b      	beq.n	800551a <UART_SetConfig+0x25a>
 8005502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005506:	d811      	bhi.n	800552c <UART_SetConfig+0x26c>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <UART_SetConfig+0x254>
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005510:	d006      	beq.n	8005520 <UART_SetConfig+0x260>
 8005512:	e00b      	b.n	800552c <UART_SetConfig+0x26c>
 8005514:	2301      	movs	r3, #1
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e076      	b.n	8005608 <UART_SetConfig+0x348>
 800551a:	2302      	movs	r3, #2
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e073      	b.n	8005608 <UART_SetConfig+0x348>
 8005520:	2304      	movs	r3, #4
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e070      	b.n	8005608 <UART_SetConfig+0x348>
 8005526:	2308      	movs	r3, #8
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e06d      	b.n	8005608 <UART_SetConfig+0x348>
 800552c:	2310      	movs	r3, #16
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e06a      	b.n	8005608 <UART_SetConfig+0x348>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <UART_SetConfig+0x2e4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d138      	bne.n	80055ae <UART_SetConfig+0x2ee>
 800553c:	4b13      	ldr	r3, [pc, #76]	@ (800558c <UART_SetConfig+0x2cc>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005542:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005546:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800554a:	d017      	beq.n	800557c <UART_SetConfig+0x2bc>
 800554c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005550:	d82a      	bhi.n	80055a8 <UART_SetConfig+0x2e8>
 8005552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005556:	d00b      	beq.n	8005570 <UART_SetConfig+0x2b0>
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800555c:	d824      	bhi.n	80055a8 <UART_SetConfig+0x2e8>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <UART_SetConfig+0x2aa>
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005566:	d006      	beq.n	8005576 <UART_SetConfig+0x2b6>
 8005568:	e01e      	b.n	80055a8 <UART_SetConfig+0x2e8>
 800556a:	2300      	movs	r3, #0
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e04b      	b.n	8005608 <UART_SetConfig+0x348>
 8005570:	2302      	movs	r3, #2
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e048      	b.n	8005608 <UART_SetConfig+0x348>
 8005576:	2304      	movs	r3, #4
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e045      	b.n	8005608 <UART_SetConfig+0x348>
 800557c:	2308      	movs	r3, #8
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e042      	b.n	8005608 <UART_SetConfig+0x348>
 8005582:	bf00      	nop
 8005584:	efff69f3 	.word	0xefff69f3
 8005588:	40011000 	.word	0x40011000
 800558c:	40023800 	.word	0x40023800
 8005590:	40004400 	.word	0x40004400
 8005594:	40004800 	.word	0x40004800
 8005598:	40004c00 	.word	0x40004c00
 800559c:	40005000 	.word	0x40005000
 80055a0:	40011400 	.word	0x40011400
 80055a4:	40007800 	.word	0x40007800
 80055a8:	2310      	movs	r3, #16
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e02c      	b.n	8005608 <UART_SetConfig+0x348>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a72      	ldr	r2, [pc, #456]	@ (800577c <UART_SetConfig+0x4bc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d125      	bne.n	8005604 <UART_SetConfig+0x344>
 80055b8:	4b71      	ldr	r3, [pc, #452]	@ (8005780 <UART_SetConfig+0x4c0>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80055c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80055c6:	d017      	beq.n	80055f8 <UART_SetConfig+0x338>
 80055c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80055cc:	d817      	bhi.n	80055fe <UART_SetConfig+0x33e>
 80055ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d2:	d00b      	beq.n	80055ec <UART_SetConfig+0x32c>
 80055d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d8:	d811      	bhi.n	80055fe <UART_SetConfig+0x33e>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <UART_SetConfig+0x326>
 80055de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e2:	d006      	beq.n	80055f2 <UART_SetConfig+0x332>
 80055e4:	e00b      	b.n	80055fe <UART_SetConfig+0x33e>
 80055e6:	2300      	movs	r3, #0
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e00d      	b.n	8005608 <UART_SetConfig+0x348>
 80055ec:	2302      	movs	r3, #2
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e00a      	b.n	8005608 <UART_SetConfig+0x348>
 80055f2:	2304      	movs	r3, #4
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e007      	b.n	8005608 <UART_SetConfig+0x348>
 80055f8:	2308      	movs	r3, #8
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e004      	b.n	8005608 <UART_SetConfig+0x348>
 80055fe:	2310      	movs	r3, #16
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e001      	b.n	8005608 <UART_SetConfig+0x348>
 8005604:	2310      	movs	r3, #16
 8005606:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005610:	d15b      	bne.n	80056ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005612:	7ffb      	ldrb	r3, [r7, #31]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d828      	bhi.n	800566a <UART_SetConfig+0x3aa>
 8005618:	a201      	add	r2, pc, #4	@ (adr r2, 8005620 <UART_SetConfig+0x360>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005645 	.word	0x08005645
 8005624:	0800564d 	.word	0x0800564d
 8005628:	08005655 	.word	0x08005655
 800562c:	0800566b 	.word	0x0800566b
 8005630:	0800565b 	.word	0x0800565b
 8005634:	0800566b 	.word	0x0800566b
 8005638:	0800566b 	.word	0x0800566b
 800563c:	0800566b 	.word	0x0800566b
 8005640:	08005663 	.word	0x08005663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fe faf4 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8005648:	61b8      	str	r0, [r7, #24]
        break;
 800564a:	e013      	b.n	8005674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7fe fb04 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8005650:	61b8      	str	r0, [r7, #24]
        break;
 8005652:	e00f      	b.n	8005674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005654:	4b4b      	ldr	r3, [pc, #300]	@ (8005784 <UART_SetConfig+0x4c4>)
 8005656:	61bb      	str	r3, [r7, #24]
        break;
 8005658:	e00c      	b.n	8005674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565a:	f7fe f9d7 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 800565e:	61b8      	str	r0, [r7, #24]
        break;
 8005660:	e008      	b.n	8005674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005666:	61bb      	str	r3, [r7, #24]
        break;
 8005668:	e004      	b.n	8005674 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	77bb      	strb	r3, [r7, #30]
        break;
 8005672:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d074      	beq.n	8005764 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	005a      	lsls	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	441a      	add	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b0f      	cmp	r3, #15
 8005694:	d916      	bls.n	80056c4 <UART_SetConfig+0x404>
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800569c:	d212      	bcs.n	80056c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f023 030f 	bic.w	r3, r3, #15
 80056a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	89fb      	ldrh	r3, [r7, #14]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	89fa      	ldrh	r2, [r7, #14]
 80056c0:	60da      	str	r2, [r3, #12]
 80056c2:	e04f      	b.n	8005764 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	77bb      	strb	r3, [r7, #30]
 80056c8:	e04c      	b.n	8005764 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d828      	bhi.n	8005722 <UART_SetConfig+0x462>
 80056d0:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <UART_SetConfig+0x418>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005705 	.word	0x08005705
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	08005723 	.word	0x08005723
 80056e8:	08005713 	.word	0x08005713
 80056ec:	08005723 	.word	0x08005723
 80056f0:	08005723 	.word	0x08005723
 80056f4:	08005723 	.word	0x08005723
 80056f8:	0800571b 	.word	0x0800571b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fc:	f7fe fa98 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8005700:	61b8      	str	r0, [r7, #24]
        break;
 8005702:	e013      	b.n	800572c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005704:	f7fe faa8 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8005708:	61b8      	str	r0, [r7, #24]
        break;
 800570a:	e00f      	b.n	800572c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800570c:	4b1d      	ldr	r3, [pc, #116]	@ (8005784 <UART_SetConfig+0x4c4>)
 800570e:	61bb      	str	r3, [r7, #24]
        break;
 8005710:	e00c      	b.n	800572c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005712:	f7fe f97b 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8005716:	61b8      	str	r0, [r7, #24]
        break;
 8005718:	e008      	b.n	800572c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800571e:	61bb      	str	r3, [r7, #24]
        break;
 8005720:	e004      	b.n	800572c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	77bb      	strb	r3, [r7, #30]
        break;
 800572a:	bf00      	nop
    }

    if (pclk != 0U)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d018      	beq.n	8005764 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	085a      	lsrs	r2, r3, #1
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	441a      	add	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b0f      	cmp	r3, #15
 800574a:	d909      	bls.n	8005760 <UART_SetConfig+0x4a0>
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005752:	d205      	bcs.n	8005760 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	b29a      	uxth	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	e001      	b.n	8005764 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005770:	7fbb      	ldrb	r3, [r7, #30]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40007c00 	.word	0x40007c00
 8005780:	40023800 	.word	0x40023800
 8005784:	00f42400 	.word	0x00f42400

08005788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01a      	beq.n	800589e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005886:	d10a      	bne.n	800589e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b098      	sub	sp, #96	@ 0x60
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058dc:	f7fb fe84 	bl	80015e8 <HAL_GetTick>
 80058e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d12e      	bne.n	800594e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f88c 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d021      	beq.n	800594e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800592e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e6      	bne.n	800590a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e062      	b.n	8005a14 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d149      	bne.n	80059f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005964:	2200      	movs	r2, #0
 8005966:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f856 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03c      	beq.n	80059f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	623b      	str	r3, [r7, #32]
   return(result);
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800598a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30
 8005996:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800599a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059c8:	61fa      	str	r2, [r7, #28]
 80059ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	617b      	str	r3, [r7, #20]
   return(result);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e011      	b.n	8005a14 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3758      	adds	r7, #88	@ 0x58
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	e04f      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d04b      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fb fdd7 	bl	80015e8 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e04e      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d037      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b80      	cmp	r3, #128	@ 0x80
 8005a62:	d034      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d031      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d110      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f838 	bl	8005af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e029      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aa8:	d111      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f81e 	bl	8005af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d0a0      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b095      	sub	sp, #84	@ 0x54
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e6      	bne.n	8005afe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d118      	bne.n	8005b9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6979      	ldr	r1, [r7, #20]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	613b      	str	r3, [r7, #16]
   return(result);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e6      	bne.n	8005b6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bb2:	bf00      	nop
 8005bb4:	3754      	adds	r7, #84	@ 0x54
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	f107 001c 	add.w	r0, r7, #28
 8005bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d121      	bne.n	8005c1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	4b21      	ldr	r3, [pc, #132]	@ (8005c70 <USB_CoreInit+0xb0>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d105      	bne.n	8005c12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa92 	bl	800613c <USB_CoreReset>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73fb      	strb	r3, [r7, #15]
 8005c1c:	e010      	b.n	8005c40 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa86 	bl	800613c <USB_CoreReset>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c40:	7fbb      	ldrb	r3, [r7, #30]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10b      	bne.n	8005c5e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f043 0206 	orr.w	r2, r3, #6
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f043 0220 	orr.w	r2, r3, #32
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c6a:	b004      	add	sp, #16
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	ffbdffbf 	.word	0xffbdffbf

08005c74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f023 0201 	bic.w	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d115      	bne.n	8005ce4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cc4:	200a      	movs	r0, #10
 8005cc6:	f7fb fc9b 	bl	8001600 <HAL_Delay>
      ms += 10U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	330a      	adds	r3, #10
 8005cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fa25 	bl	8006120 <USB_GetMode>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d01e      	beq.n	8005d1a <USB_SetCurrentMode+0x84>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ce0:	d9f0      	bls.n	8005cc4 <USB_SetCurrentMode+0x2e>
 8005ce2:	e01a      	b.n	8005d1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d115      	bne.n	8005d16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cf6:	200a      	movs	r0, #10
 8005cf8:	f7fb fc82 	bl	8001600 <HAL_Delay>
      ms += 10U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	330a      	adds	r3, #10
 8005d00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa0c 	bl	8006120 <USB_GetMode>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <USB_SetCurrentMode+0x84>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d12:	d9f0      	bls.n	8005cf6 <USB_SetCurrentMode+0x60>
 8005d14:	e001      	b.n	8005d1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e005      	b.n	8005d26 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d1e:	d101      	bne.n	8005d24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d30:	b084      	sub	sp, #16
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	e009      	b.n	8005d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3340      	adds	r3, #64	@ 0x40
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3301      	adds	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b0e      	cmp	r3, #14
 8005d68:	d9f2      	bls.n	8005d50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11c      	bne.n	8005dac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e005      	b.n	8005db8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dc4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10d      	bne.n	8005de8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f968 	bl	80060ac <USB_SetDevSpeed>
 8005ddc:	e008      	b.n	8005df0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dde:	2101      	movs	r1, #1
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f963 	bl	80060ac <USB_SetDevSpeed>
 8005de6:	e003      	b.n	8005df0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005de8:	2103      	movs	r1, #3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f95e 	bl	80060ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005df0:	2110      	movs	r1, #16
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8fa 	bl	8005fec <USB_FlushTxFifo>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f924 	bl	8006050 <USB_FlushRxFifo>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	e043      	b.n	8005ec4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e52:	d118      	bne.n	8005e86 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e66:	461a      	mov	r2, r3
 8005e68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e013      	b.n	8005e98 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	e008      	b.n	8005e98 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e92:	461a      	mov	r2, r3
 8005e94:	2300      	movs	r3, #0
 8005e96:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ec8:	461a      	mov	r2, r3
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d3b5      	bcc.n	8005e3c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	e043      	b.n	8005f5e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eec:	d118      	bne.n	8005f20 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f00:	461a      	mov	r2, r3
 8005f02:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e013      	b.n	8005f32 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f16:	461a      	mov	r2, r3
 8005f18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e008      	b.n	8005f32 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	461a      	mov	r2, r3
 8005f52:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f62:	461a      	mov	r2, r3
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d3b5      	bcc.n	8005ed6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f7c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005f8a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f043 0210 	orr.w	r2, r3, #16
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe4 <USB_DevInit+0x2b4>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f043 0208 	orr.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d105      	bne.n	8005fd4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <USB_DevInit+0x2b8>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fe0:	b004      	add	sp, #16
 8005fe2:	4770      	bx	lr
 8005fe4:	803c3800 	.word	0x803c3800
 8005fe8:	40000004 	.word	0x40000004

08005fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006006:	d901      	bls.n	800600c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e01b      	b.n	8006044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	daf2      	bge.n	8005ffa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	019b      	lsls	r3, r3, #6
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006030:	d901      	bls.n	8006036 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e006      	b.n	8006044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b20      	cmp	r3, #32
 8006040:	d0f0      	beq.n	8006024 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006068:	d901      	bls.n	800606e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e018      	b.n	80060a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	daf2      	bge.n	800605c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2210      	movs	r2, #16
 800607e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800608c:	d901      	bls.n	8006092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e006      	b.n	80060a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d0f0      	beq.n	8006080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060f8:	f023 0303 	bic.w	r3, r3, #3
 80060fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800610c:	f043 0302 	orr.w	r3, r3, #2
 8006110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f003 0301 	and.w	r3, r3, #1
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006154:	d901      	bls.n	800615a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e022      	b.n	80061a0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	daf2      	bge.n	8006148 <USB_CoreReset+0xc>

  count = 10U;
 8006162:	230a      	movs	r3, #10
 8006164:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006166:	e002      	b.n	800616e <USB_CoreReset+0x32>
  {
    count--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3b01      	subs	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f9      	bne.n	8006168 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f043 0201 	orr.w	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800618c:	d901      	bls.n	8006192 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e006      	b.n	80061a0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d0f0      	beq.n	8006180 <USB_CoreReset+0x44>

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80061b2:	f003 f9da 	bl	800956a <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80061b6:	4b12      	ldr	r3, [pc, #72]	@ (8006200 <MX_LWIP_Init+0x54>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80061bc:	4b11      	ldr	r3, [pc, #68]	@ (8006204 <MX_LWIP_Init+0x58>)
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80061c2:	4b11      	ldr	r3, [pc, #68]	@ (8006208 <MX_LWIP_Init+0x5c>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80061c8:	4b10      	ldr	r3, [pc, #64]	@ (800620c <MX_LWIP_Init+0x60>)
 80061ca:	9302      	str	r3, [sp, #8]
 80061cc:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <MX_LWIP_Init+0x64>)
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	2300      	movs	r3, #0
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006208 <MX_LWIP_Init+0x5c>)
 80061d6:	4a0b      	ldr	r2, [pc, #44]	@ (8006204 <MX_LWIP_Init+0x58>)
 80061d8:	4909      	ldr	r1, [pc, #36]	@ (8006200 <MX_LWIP_Init+0x54>)
 80061da:	480e      	ldr	r0, [pc, #56]	@ (8006214 <MX_LWIP_Init+0x68>)
 80061dc:	f003 feac 	bl	8009f38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80061e0:	480c      	ldr	r0, [pc, #48]	@ (8006214 <MX_LWIP_Init+0x68>)
 80061e2:	f004 f863 	bl	800a2ac <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80061e6:	480b      	ldr	r0, [pc, #44]	@ (8006214 <MX_LWIP_Init+0x68>)
 80061e8:	f004 f870 	bl	800a2cc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80061ec:	490a      	ldr	r1, [pc, #40]	@ (8006218 <MX_LWIP_Init+0x6c>)
 80061ee:	4809      	ldr	r0, [pc, #36]	@ (8006214 <MX_LWIP_Init+0x68>)
 80061f0:	f004 f972 	bl	800a4d8 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80061f4:	4807      	ldr	r0, [pc, #28]	@ (8006214 <MX_LWIP_Init+0x68>)
 80061f6:	f00b fa07 	bl	8011608 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80061fa:	bf00      	nop
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20000708 	.word	0x20000708
 8006204:	2000070c 	.word	0x2000070c
 8006208:	20000710 	.word	0x20000710
 800620c:	0801504d 	.word	0x0801504d
 8006210:	08006475 	.word	0x08006475
 8006214:	200006d0 	.word	0x200006d0
 8006218:	0800621d 	.word	0x0800621d

0800621c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800623c:	4b44      	ldr	r3, [pc, #272]	@ (8006350 <low_level_init+0x120>)
 800623e:	4a45      	ldr	r2, [pc, #276]	@ (8006354 <low_level_init+0x124>)
 8006240:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006242:	2300      	movs	r3, #0
 8006244:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006246:	2380      	movs	r3, #128	@ 0x80
 8006248:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800624a:	23e1      	movs	r3, #225	@ 0xe1
 800624c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800624e:	2300      	movs	r3, #0
 8006250:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006252:	2300      	movs	r3, #0
 8006254:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006256:	2300      	movs	r3, #0
 8006258:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800625a:	4a3d      	ldr	r2, [pc, #244]	@ (8006350 <low_level_init+0x120>)
 800625c:	f107 0308 	add.w	r3, r7, #8
 8006260:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006262:	4b3b      	ldr	r3, [pc, #236]	@ (8006350 <low_level_init+0x120>)
 8006264:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006268:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800626a:	4b39      	ldr	r3, [pc, #228]	@ (8006350 <low_level_init+0x120>)
 800626c:	4a3a      	ldr	r2, [pc, #232]	@ (8006358 <low_level_init+0x128>)
 800626e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006270:	4b37      	ldr	r3, [pc, #220]	@ (8006350 <low_level_init+0x120>)
 8006272:	4a3a      	ldr	r2, [pc, #232]	@ (800635c <low_level_init+0x12c>)
 8006274:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006276:	4b36      	ldr	r3, [pc, #216]	@ (8006350 <low_level_init+0x120>)
 8006278:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800627c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800627e:	4834      	ldr	r0, [pc, #208]	@ (8006350 <low_level_init+0x120>)
 8006280:	f7fb fb3c 	bl	80018fc <HAL_ETH_Init>
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006288:	2238      	movs	r2, #56	@ 0x38
 800628a:	2100      	movs	r1, #0
 800628c:	4834      	ldr	r0, [pc, #208]	@ (8006360 <low_level_init+0x130>)
 800628e:	f00f f918 	bl	80154c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006292:	4b33      	ldr	r3, [pc, #204]	@ (8006360 <low_level_init+0x130>)
 8006294:	2221      	movs	r2, #33	@ 0x21
 8006296:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006298:	4b31      	ldr	r3, [pc, #196]	@ (8006360 <low_level_init+0x130>)
 800629a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800629e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80062a0:	4b2f      	ldr	r3, [pc, #188]	@ (8006360 <low_level_init+0x130>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80062a6:	482f      	ldr	r0, [pc, #188]	@ (8006364 <low_level_init+0x134>)
 80062a8:	f003 fd0e 	bl	8009cc8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2206      	movs	r2, #6
 80062b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80062b4:	4b26      	ldr	r3, [pc, #152]	@ (8006350 <low_level_init+0x120>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80062c0:	4b23      	ldr	r3, [pc, #140]	@ (8006350 <low_level_init+0x120>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	785a      	ldrb	r2, [r3, #1]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80062cc:	4b20      	ldr	r3, [pc, #128]	@ (8006350 <low_level_init+0x120>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	789a      	ldrb	r2, [r3, #2]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80062d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006350 <low_level_init+0x120>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	78da      	ldrb	r2, [r3, #3]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80062e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006350 <low_level_init+0x120>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	791a      	ldrb	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80062f0:	4b17      	ldr	r3, [pc, #92]	@ (8006350 <low_level_init+0x120>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	795a      	ldrb	r2, [r3, #5]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006302:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800630a:	f043 030a 	orr.w	r3, r3, #10
 800630e:	b2da      	uxtb	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006316:	4914      	ldr	r1, [pc, #80]	@ (8006368 <low_level_init+0x138>)
 8006318:	4814      	ldr	r0, [pc, #80]	@ (800636c <low_level_init+0x13c>)
 800631a:	f7fb f82e 	bl	800137a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800631e:	4813      	ldr	r0, [pc, #76]	@ (800636c <low_level_init+0x13c>)
 8006320:	f7fb f85d 	bl	80013de <LAN8742_Init>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f004 f8a4 	bl	800a478 <netif_set_link_down>
    netif_set_down(netif);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f004 f837 	bl	800a3a4 <netif_set_down>
 8006336:	e008      	b.n	800634a <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f9f6 	bl	8006730 <ethernet_link_check_state>
 8006344:	e001      	b.n	800634a <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8006346:	f7fa fd1d 	bl	8000d84 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200050a0 	.word	0x200050a0
 8006354:	40028000 	.word	0x40028000
 8006358:	2007c0a0 	.word	0x2007c0a0
 800635c:	2007c000 	.word	0x2007c000
 8006360:	20005150 	.word	0x20005150
 8006364:	080190bc 	.word	0x080190bc
 8006368:	2000000c 	.word	0x2000000c
 800636c:	20005188 	.word	0x20005188

08006370 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b092      	sub	sp, #72	@ 0x48
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006388:	f107 030c 	add.w	r3, r7, #12
 800638c:	2230      	movs	r2, #48	@ 0x30
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f00f f896 	bl	80154c2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006396:	f107 030c 	add.w	r3, r7, #12
 800639a:	2230      	movs	r2, #48	@ 0x30
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f00f f88f 	bl	80154c2 <memset>

  for(q = p; q != NULL; q = q->next)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80063a8:	e045      	b.n	8006436 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80063aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d902      	bls.n	80063b6 <low_level_output+0x46>
      return ERR_IF;
 80063b0:	f06f 030b 	mvn.w	r3, #11
 80063b4:	e055      	b.n	8006462 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80063b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063b8:	6859      	ldr	r1, [r3, #4]
 80063ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063bc:	4613      	mov	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	3348      	adds	r3, #72	@ 0x48
 80063c6:	443b      	add	r3, r7
 80063c8:	3b3c      	subs	r3, #60	@ 0x3c
 80063ca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80063cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ce:	895b      	ldrh	r3, [r3, #10]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063d4:	4613      	mov	r3, r2
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	3348      	adds	r3, #72	@ 0x48
 80063de:	443b      	add	r3, r7
 80063e0:	3b38      	subs	r3, #56	@ 0x38
 80063e2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80063e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d011      	beq.n	800640e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80063ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ec:	1e5a      	subs	r2, r3, #1
 80063ee:	f107 000c 	add.w	r0, r7, #12
 80063f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063f4:	460b      	mov	r3, r1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	440b      	add	r3, r1
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	18c1      	adds	r1, r0, r3
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	3348      	adds	r3, #72	@ 0x48
 8006408:	443b      	add	r3, r7
 800640a:	3b34      	subs	r3, #52	@ 0x34
 800640c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800640e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006418:	4613      	mov	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	3348      	adds	r3, #72	@ 0x48
 8006422:	443b      	add	r3, r7
 8006424:	3b34      	subs	r3, #52	@ 0x34
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
    }

    i++;
 800642a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800642c:	3301      	adds	r3, #1
 800642e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	643b      	str	r3, [r7, #64]	@ 0x40
 8006436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1b6      	bne.n	80063aa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	891b      	ldrh	r3, [r3, #8]
 8006440:	461a      	mov	r2, r3
 8006442:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <low_level_output+0xfc>)
 8006444:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006446:	4a09      	ldr	r2, [pc, #36]	@ (800646c <low_level_output+0xfc>)
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800644e:	4a07      	ldr	r2, [pc, #28]	@ (800646c <low_level_output+0xfc>)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006454:	2214      	movs	r2, #20
 8006456:	4905      	ldr	r1, [pc, #20]	@ (800646c <low_level_output+0xfc>)
 8006458:	4805      	ldr	r0, [pc, #20]	@ (8006470 <low_level_output+0x100>)
 800645a:	f7fb fbd9 	bl	8001c10 <HAL_ETH_Transmit>

  return errval;
 800645e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006462:	4618      	mov	r0, r3
 8006464:	3748      	adds	r7, #72	@ 0x48
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20005150 	.word	0x20005150
 8006470:	200050a0 	.word	0x200050a0

08006474 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <ethernetif_init+0x1c>
 8006482:	4b0e      	ldr	r3, [pc, #56]	@ (80064bc <ethernetif_init+0x48>)
 8006484:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8006488:	490d      	ldr	r1, [pc, #52]	@ (80064c0 <ethernetif_init+0x4c>)
 800648a:	480e      	ldr	r0, [pc, #56]	@ (80064c4 <ethernetif_init+0x50>)
 800648c:	f00e ffb4 	bl	80153f8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2273      	movs	r2, #115	@ 0x73
 8006494:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2274      	movs	r2, #116	@ 0x74
 800649c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a09      	ldr	r2, [pc, #36]	@ (80064c8 <ethernetif_init+0x54>)
 80064a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a08      	ldr	r2, [pc, #32]	@ (80064cc <ethernetif_init+0x58>)
 80064aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff febf 	bl	8006230 <low_level_init>

  return ERR_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	080162e8 	.word	0x080162e8
 80064c0:	08016304 	.word	0x08016304
 80064c4:	08016314 	.word	0x08016314
 80064c8:	080134c9 	.word	0x080134c9
 80064cc:	08006371 	.word	0x08006371

080064d0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80064dc:	68f9      	ldr	r1, [r7, #12]
 80064de:	4807      	ldr	r0, [pc, #28]	@ (80064fc <pbuf_free_custom+0x2c>)
 80064e0:	f003 fcd4 	bl	8009e8c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <pbuf_free_custom+0x30>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d102      	bne.n	80064f2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80064ec:	4b04      	ldr	r3, [pc, #16]	@ (8006500 <pbuf_free_custom+0x30>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
  }
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	080190bc 	.word	0x080190bc
 8006500:	2000509c 	.word	0x2000509c

08006504 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006508:	f7fb f86e 	bl	80015e8 <HAL_GetTick>
 800650c:	4603      	mov	r3, r0
}
 800650e:	4618      	mov	r0, r3
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	@ 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800651c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	60da      	str	r2, [r3, #12]
 800652a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a52      	ldr	r2, [pc, #328]	@ (800667c <HAL_ETH_MspInit+0x168>)
 8006532:	4293      	cmp	r3, r2
 8006534:	f040 809e 	bne.w	8006674 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006538:	4b51      	ldr	r3, [pc, #324]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653c:	4a50      	ldr	r2, [pc, #320]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 800653e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006542:	6313      	str	r3, [r2, #48]	@ 0x30
 8006544:	4b4e      	ldr	r3, [pc, #312]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 8006546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654c:	623b      	str	r3, [r7, #32]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	4b4b      	ldr	r3, [pc, #300]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006554:	4a4a      	ldr	r2, [pc, #296]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 8006556:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800655a:	6313      	str	r3, [r2, #48]	@ 0x30
 800655c:	4b48      	ldr	r3, [pc, #288]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006560:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4b45      	ldr	r3, [pc, #276]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656c:	4a44      	ldr	r2, [pc, #272]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 800656e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006572:	6313      	str	r3, [r2, #48]	@ 0x30
 8006574:	4b42      	ldr	r3, [pc, #264]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006580:	4b3f      	ldr	r3, [pc, #252]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	4a3e      	ldr	r2, [pc, #248]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 8006586:	f043 0304 	orr.w	r3, r3, #4
 800658a:	6313      	str	r3, [r2, #48]	@ 0x30
 800658c:	4b3c      	ldr	r3, [pc, #240]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006598:	4b39      	ldr	r3, [pc, #228]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659c:	4a38      	ldr	r2, [pc, #224]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80065a4:	4b36      	ldr	r3, [pc, #216]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 80065a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b0:	4b33      	ldr	r3, [pc, #204]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b4:	4a32      	ldr	r2, [pc, #200]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 80065b6:	f043 0302 	orr.w	r3, r3, #2
 80065ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80065bc:	4b30      	ldr	r3, [pc, #192]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80065c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 80065ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80065d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006680 <HAL_ETH_MspInit+0x16c>)
 80065d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80065e0:	233a      	movs	r3, #58	@ 0x3a
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e4:	2302      	movs	r3, #2
 80065e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065ec:	2303      	movs	r3, #3
 80065ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80065f0:	230b      	movs	r3, #11
 80065f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065f8:	4619      	mov	r1, r3
 80065fa:	4822      	ldr	r0, [pc, #136]	@ (8006684 <HAL_ETH_MspInit+0x170>)
 80065fc:	f7fc fb0c 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 8006600:	238e      	movs	r3, #142	@ 0x8e
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006604:	2302      	movs	r3, #2
 8006606:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006608:	2300      	movs	r3, #0
 800660a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660c:	2303      	movs	r3, #3
 800660e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006610:	230b      	movs	r3, #11
 8006612:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006618:	4619      	mov	r1, r3
 800661a:	481b      	ldr	r0, [pc, #108]	@ (8006688 <HAL_ETH_MspInit+0x174>)
 800661c:	f7fc fafc 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8006620:	f242 0301 	movw	r3, #8193	@ 0x2001
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006626:	2302      	movs	r3, #2
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662a:	2300      	movs	r3, #0
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800662e:	2303      	movs	r3, #3
 8006630:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006632:	230b      	movs	r3, #11
 8006634:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800663a:	4619      	mov	r1, r3
 800663c:	4813      	ldr	r0, [pc, #76]	@ (800668c <HAL_ETH_MspInit+0x178>)
 800663e:	f7fc faeb 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006642:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006648:	2302      	movs	r3, #2
 800664a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664c:	2300      	movs	r3, #0
 800664e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006650:	2303      	movs	r3, #3
 8006652:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006654:	230b      	movs	r3, #11
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800665c:	4619      	mov	r1, r3
 800665e:	480c      	ldr	r0, [pc, #48]	@ (8006690 <HAL_ETH_MspInit+0x17c>)
 8006660:	f7fc fada 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006664:	2200      	movs	r2, #0
 8006666:	2105      	movs	r1, #5
 8006668:	203d      	movs	r0, #61	@ 0x3d
 800666a:	f7fb f8a5 	bl	80017b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800666e:	203d      	movs	r0, #61	@ 0x3d
 8006670:	f7fb f8be 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006674:	bf00      	nop
 8006676:	3738      	adds	r7, #56	@ 0x38
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40028000 	.word	0x40028000
 8006680:	40023800 	.word	0x40023800
 8006684:	40020800 	.word	0x40020800
 8006688:	40020000 	.word	0x40020000
 800668c:	40020400 	.word	0x40020400
 8006690:	40021800 	.word	0x40021800

08006694 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006698:	4802      	ldr	r0, [pc, #8]	@ (80066a4 <ETH_PHY_IO_Init+0x10>)
 800669a:	f7fb fe5b 	bl	8002354 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	200050a0 	.word	0x200050a0

080066a8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return 0;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	4807      	ldr	r0, [pc, #28]	@ (80066e8 <ETH_PHY_IO_ReadReg+0x30>)
 80066cc:	f7fb fc9c 	bl	8002008 <HAL_ETH_ReadPHYRegister>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295
 80066da:	e000      	b.n	80066de <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200050a0 	.word	0x200050a0

080066ec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	68f9      	ldr	r1, [r7, #12]
 80066fe:	4807      	ldr	r0, [pc, #28]	@ (800671c <ETH_PHY_IO_WriteReg+0x30>)
 8006700:	f7fb fccd 	bl	800209e <HAL_ETH_WritePHYRegister>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800670a:	f04f 33ff 	mov.w	r3, #4294967295
 800670e:	e000      	b.n	8006712 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200050a0 	.word	0x200050a0

08006720 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006724:	f7fa ff60 	bl	80015e8 <HAL_GetTick>
 8006728:	4603      	mov	r3, r0
}
 800672a:	4618      	mov	r0, r3
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b0a0      	sub	sp, #128	@ 0x80
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006738:	f107 030c 	add.w	r3, r7, #12
 800673c:	2264      	movs	r2, #100	@ 0x64
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f00e febe 	bl	80154c2 <memset>
  int32_t PHYLinkState = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800674e:	2300      	movs	r3, #0
 8006750:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006752:	2300      	movs	r3, #0
 8006754:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006756:	483a      	ldr	r0, [pc, #232]	@ (8006840 <ethernet_link_check_state+0x110>)
 8006758:	f7fa fe8e 	bl	8001478 <LAN8742_GetLinkState>
 800675c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006764:	089b      	lsrs	r3, r3, #2
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <ethernet_link_check_state+0x5a>
 8006770:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006772:	2b01      	cmp	r3, #1
 8006774:	dc09      	bgt.n	800678a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8006776:	4833      	ldr	r0, [pc, #204]	@ (8006844 <ethernet_link_check_state+0x114>)
 8006778:	f7fb f9ca 	bl	8001b10 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f003 fe11 	bl	800a3a4 <netif_set_down>
    netif_set_link_down(netif);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f003 fe78 	bl	800a478 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006788:	e055      	b.n	8006836 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d14e      	bne.n	8006836 <ethernet_link_check_state+0x106>
 8006798:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800679a:	2b01      	cmp	r3, #1
 800679c:	dd4b      	ble.n	8006836 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800679e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067a0:	3b02      	subs	r3, #2
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d82a      	bhi.n	80067fc <ethernet_link_check_state+0xcc>
 80067a6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ac <ethernet_link_check_state+0x7c>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067cf 	.word	0x080067cf
 80067b4:	080067df 	.word	0x080067df
 80067b8:	080067ef 	.word	0x080067ef
      duplex = ETH_FULLDUPLEX_MODE;
 80067bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80067c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80067c8:	2301      	movs	r3, #1
 80067ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80067cc:	e017      	b.n	80067fe <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80067d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80067d8:	2301      	movs	r3, #1
 80067da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80067dc:	e00f      	b.n	80067fe <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80067de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067e2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80067e4:	2300      	movs	r3, #0
 80067e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80067e8:	2301      	movs	r3, #1
 80067ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80067ec:	e007      	b.n	80067fe <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80067f2:	2300      	movs	r3, #0
 80067f4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80067f6:	2301      	movs	r3, #1
 80067f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80067fa:	e000      	b.n	80067fe <ethernet_link_check_state+0xce>
      break;
 80067fc:	bf00      	nop
    if(linkchanged)
 80067fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d018      	beq.n	8006836 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006804:	f107 030c 	add.w	r3, r7, #12
 8006808:	4619      	mov	r1, r3
 800680a:	480e      	ldr	r0, [pc, #56]	@ (8006844 <ethernet_link_check_state+0x114>)
 800680c:	f7fb fc90 	bl	8002130 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006816:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006818:	f107 030c 	add.w	r3, r7, #12
 800681c:	4619      	mov	r1, r3
 800681e:	4809      	ldr	r0, [pc, #36]	@ (8006844 <ethernet_link_check_state+0x114>)
 8006820:	f7fb fd7d 	bl	800231e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006824:	4807      	ldr	r0, [pc, #28]	@ (8006844 <ethernet_link_check_state+0x114>)
 8006826:	f7fb f903 	bl	8001a30 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f003 fd4e 	bl	800a2cc <netif_set_up>
      netif_set_link_up(netif);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f003 fde9 	bl	800a408 <netif_set_link_up>
}
 8006836:	bf00      	nop
 8006838:	3780      	adds	r7, #128	@ 0x80
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20005188 	.word	0x20005188
 8006844:	200050a0 	.word	0x200050a0

08006848 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af02      	add	r7, sp, #8
 800684e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006850:	4812      	ldr	r0, [pc, #72]	@ (800689c <HAL_ETH_RxAllocateCallback+0x54>)
 8006852:	f003 faad 	bl	8009db0 <memp_malloc_pool>
 8006856:	60f8      	str	r0, [r7, #12]
  if (p)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d014      	beq.n	8006888 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f103 0220 	add.w	r2, r3, #32
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a0d      	ldr	r2, [pc, #52]	@ (80068a0 <HAL_ETH_RxAllocateCallback+0x58>)
 800686c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006876:	9201      	str	r2, [sp, #4]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2241      	movs	r2, #65	@ 0x41
 800687e:	2100      	movs	r1, #0
 8006880:	2000      	movs	r0, #0
 8006882:	f003 ffcf 	bl	800a824 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006886:	e005      	b.n	8006894 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800688a:	2201      	movs	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	080190bc 	.word	0x080190bc
 80068a0:	080064d1 	.word	0x080064d1
 80068a4:	2000509c 	.word	0x2000509c

080068a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068be:	f3ef 8305 	mrs	r3, IPSR
 80068c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10f      	bne.n	80068ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ca:	f3ef 8310 	mrs	r3, PRIMASK
 80068ce:	607b      	str	r3, [r7, #4]
  return(result);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068d6:	f3ef 8311 	mrs	r3, BASEPRI
 80068da:	603b      	str	r3, [r7, #0]
  return(result);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <osKernelInitialize+0x3a>
 80068e2:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <osKernelInitialize+0x64>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d103      	bne.n	80068f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80068ea:	f06f 0305 	mvn.w	r3, #5
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e00c      	b.n	800690c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068f2:	4b0a      	ldr	r3, [pc, #40]	@ (800691c <osKernelInitialize+0x64>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068fa:	4b08      	ldr	r3, [pc, #32]	@ (800691c <osKernelInitialize+0x64>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e002      	b.n	800690c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006906:	f04f 33ff 	mov.w	r3, #4294967295
 800690a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800690c:	68fb      	ldr	r3, [r7, #12]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	200051a8 	.word	0x200051a8

08006920 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006926:	f3ef 8305 	mrs	r3, IPSR
 800692a:	60bb      	str	r3, [r7, #8]
  return(result);
 800692c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10f      	bne.n	8006952 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006932:	f3ef 8310 	mrs	r3, PRIMASK
 8006936:	607b      	str	r3, [r7, #4]
  return(result);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800693e:	f3ef 8311 	mrs	r3, BASEPRI
 8006942:	603b      	str	r3, [r7, #0]
  return(result);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <osKernelStart+0x3a>
 800694a:	4b0f      	ldr	r3, [pc, #60]	@ (8006988 <osKernelStart+0x68>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d103      	bne.n	800695a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006952:	f06f 0305 	mvn.w	r3, #5
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	e010      	b.n	800697c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800695a:	4b0b      	ldr	r3, [pc, #44]	@ (8006988 <osKernelStart+0x68>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d109      	bne.n	8006976 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006962:	f7ff ffa1 	bl	80068a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006966:	4b08      	ldr	r3, [pc, #32]	@ (8006988 <osKernelStart+0x68>)
 8006968:	2202      	movs	r2, #2
 800696a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800696c:	f001 f8e2 	bl	8007b34 <vTaskStartScheduler>
      stat = osOK;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e002      	b.n	800697c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006976:	f04f 33ff 	mov.w	r3, #4294967295
 800697a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800697c:	68fb      	ldr	r3, [r7, #12]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	200051a8 	.word	0x200051a8

0800698c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b090      	sub	sp, #64	@ 0x40
 8006990:	af04      	add	r7, sp, #16
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800699c:	f3ef 8305 	mrs	r3, IPSR
 80069a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80069a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f040 8090 	bne.w	8006aca <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069aa:	f3ef 8310 	mrs	r3, PRIMASK
 80069ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069b6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ba:	617b      	str	r3, [r7, #20]
  return(result);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <osThreadNew+0x3e>
 80069c2:	4b44      	ldr	r3, [pc, #272]	@ (8006ad4 <osThreadNew+0x148>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d07f      	beq.n	8006aca <osThreadNew+0x13e>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d07c      	beq.n	8006aca <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80069d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80069d6:	2318      	movs	r3, #24
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80069de:	f04f 33ff 	mov.w	r3, #4294967295
 80069e2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d045      	beq.n	8006a76 <osThreadNew+0xea>
      if (attr->name != NULL) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <osThreadNew+0x6c>
        name = attr->name;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <osThreadNew+0x92>
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	2b38      	cmp	r3, #56	@ 0x38
 8006a10:	d805      	bhi.n	8006a1e <osThreadNew+0x92>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <osThreadNew+0x96>
        return (NULL);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e054      	b.n	8006acc <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	089b      	lsrs	r3, r3, #2
 8006a30:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00e      	beq.n	8006a58 <osThreadNew+0xcc>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006a40:	d90a      	bls.n	8006a58 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d006      	beq.n	8006a58 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <osThreadNew+0xcc>
        mem = 1;
 8006a52:	2301      	movs	r3, #1
 8006a54:	623b      	str	r3, [r7, #32]
 8006a56:	e010      	b.n	8006a7a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10c      	bne.n	8006a7a <osThreadNew+0xee>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d108      	bne.n	8006a7a <osThreadNew+0xee>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <osThreadNew+0xee>
          mem = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	e001      	b.n	8006a7a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d110      	bne.n	8006aa2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a88:	9202      	str	r2, [sp, #8]
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 fe4e 	bl	8007738 <xTaskCreateStatic>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	e013      	b.n	8006aca <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d110      	bne.n	8006aca <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	f107 0310 	add.w	r3, r7, #16
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fea2 	bl	8007804 <xTaskCreate>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d001      	beq.n	8006aca <osThreadNew+0x13e>
          hTask = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006aca:	693b      	ldr	r3, [r7, #16]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3730      	adds	r7, #48	@ 0x30
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	200051a8 	.word	0x200051a8

08006ad8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae0:	f3ef 8305 	mrs	r3, IPSR
 8006ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ae6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10f      	bne.n	8006b0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aec:	f3ef 8310 	mrs	r3, PRIMASK
 8006af0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d105      	bne.n	8006b04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006af8:	f3ef 8311 	mrs	r3, BASEPRI
 8006afc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <osDelay+0x3c>
 8006b04:	4b0a      	ldr	r3, [pc, #40]	@ (8006b30 <osDelay+0x58>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d103      	bne.n	8006b14 <osDelay+0x3c>
    stat = osErrorISR;
 8006b0c:	f06f 0305 	mvn.w	r3, #5
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e007      	b.n	8006b24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 ffd0 	bl	8007ac4 <vTaskDelay>
    }
  }

  return (stat);
 8006b24:	697b      	ldr	r3, [r7, #20]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	200051a8 	.word	0x200051a8

08006b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4a07      	ldr	r2, [pc, #28]	@ (8006b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8006b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4a06      	ldr	r2, [pc, #24]	@ (8006b64 <vApplicationGetIdleTaskMemory+0x30>)
 8006b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b52:	601a      	str	r2, [r3, #0]
}
 8006b54:	bf00      	nop
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	200051ac 	.word	0x200051ac
 8006b64:	20005254 	.word	0x20005254

08006b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4a07      	ldr	r2, [pc, #28]	@ (8006b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4a06      	ldr	r2, [pc, #24]	@ (8006b98 <vApplicationGetTimerTaskMemory+0x30>)
 8006b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b86:	601a      	str	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20005654 	.word	0x20005654
 8006b98:	200056fc 	.word	0x200056fc

08006b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f103 0208 	add.w	r2, r3, #8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f103 0208 	add.w	r2, r3, #8
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f103 0208 	add.w	r2, r3, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	601a      	str	r2, [r3, #0]
}
 8006c32:	bf00      	nop
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d103      	bne.n	8006c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e00c      	b.n	8006c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3308      	adds	r3, #8
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e002      	b.n	8006c6c <vListInsert+0x2e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d2f6      	bcs.n	8006c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6892      	ldr	r2, [r2, #8]
 8006cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6852      	ldr	r2, [r2, #4]
 8006cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d103      	bne.n	8006ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	1e5a      	subs	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10d      	bne.n	8006d34 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	b672      	cpsid	i
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	b662      	cpsie	i
 8006d2c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006d34:	f002 f8d2 	bl	8008edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d40:	68f9      	ldr	r1, [r7, #12]
 8006d42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	441a      	add	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d64:	3b01      	subs	r3, #1
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	441a      	add	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	22ff      	movs	r2, #255	@ 0xff
 8006d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	22ff      	movs	r2, #255	@ 0xff
 8006d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d114      	bne.n	8006db4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01a      	beq.n	8006dc8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3310      	adds	r3, #16
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 f978 	bl	800808c <xTaskRemoveFromEventList>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d012      	beq.n	8006dc8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006da2:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd8 <xQueueGenericReset+0xd4>)
 8006da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	e009      	b.n	8006dc8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3310      	adds	r3, #16
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff feef 	bl	8006b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3324      	adds	r3, #36	@ 0x24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff feea 	bl	8006b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006dc8:	f002 f8be 	bl	8008f48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006dcc:	2301      	movs	r3, #1
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08e      	sub	sp, #56	@ 0x38
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10d      	bne.n	8006e0c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	b672      	cpsid	i
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	b662      	cpsie	i
 8006e04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	e7fd      	b.n	8006e08 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10d      	bne.n	8006e2e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	b672      	cpsid	i
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	b662      	cpsie	i
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	e7fd      	b.n	8006e2a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <xQueueGenericCreateStatic+0x5e>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <xQueueGenericCreateStatic+0x62>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <xQueueGenericCreateStatic+0x64>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10d      	bne.n	8006e60 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e48:	b672      	cpsid	i
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	b662      	cpsie	i
 8006e58:	623b      	str	r3, [r7, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	bf00      	nop
 8006e5e:	e7fd      	b.n	8006e5c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <xQueueGenericCreateStatic+0x90>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <xQueueGenericCreateStatic+0x94>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <xQueueGenericCreateStatic+0x96>
 8006e70:	2300      	movs	r3, #0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7a:	b672      	cpsid	i
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	b662      	cpsie	i
 8006e8a:	61fb      	str	r3, [r7, #28]
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e92:	2350      	movs	r3, #80	@ 0x50
 8006e94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b50      	cmp	r3, #80	@ 0x50
 8006e9a:	d00d      	beq.n	8006eb8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	b672      	cpsid	i
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	b662      	cpsie	i
 8006eb0:	61bb      	str	r3, [r7, #24]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006eb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00d      	beq.n	8006ee0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ecc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 f805 	bl	8006eea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3730      	adds	r7, #48	@ 0x30
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e002      	b.n	8006f0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f18:	2101      	movs	r1, #1
 8006f1a:	69b8      	ldr	r0, [r7, #24]
 8006f1c:	f7ff fef2 	bl	8006d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08e      	sub	sp, #56	@ 0x38
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10d      	bne.n	8006f68 <xQueueGenericSend+0x38>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	b672      	cpsid	i
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	b662      	cpsie	i
 8006f60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d103      	bne.n	8006f76 <xQueueGenericSend+0x46>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <xQueueGenericSend+0x4a>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <xQueueGenericSend+0x4c>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10d      	bne.n	8006f9c <xQueueGenericSend+0x6c>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f84:	b672      	cpsid	i
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	b662      	cpsie	i
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	e7fd      	b.n	8006f98 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d103      	bne.n	8006faa <xQueueGenericSend+0x7a>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <xQueueGenericSend+0x7e>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <xQueueGenericSend+0x80>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10d      	bne.n	8006fd0 <xQueueGenericSend+0xa0>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb8:	b672      	cpsid	i
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	b662      	cpsie	i
 8006fc8:	623b      	str	r3, [r7, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fd0:	f001 fa2a 	bl	8008428 <xTaskGetSchedulerState>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <xQueueGenericSend+0xb0>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <xQueueGenericSend+0xb4>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <xQueueGenericSend+0xb6>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10d      	bne.n	8007006 <xQueueGenericSend+0xd6>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	b672      	cpsid	i
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	b662      	cpsie	i
 8006ffe:	61fb      	str	r3, [r7, #28]
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007006:	f001 ff69 	bl	8008edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <xQueueGenericSend+0xec>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d129      	bne.n	8007070 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007022:	f000 fa1b 	bl	800745c <prvCopyDataToQueue>
 8007026:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	d010      	beq.n	8007052 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007032:	3324      	adds	r3, #36	@ 0x24
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f829 	bl	800808c <xTaskRemoveFromEventList>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d013      	beq.n	8007068 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007040:	4b3f      	ldr	r3, [pc, #252]	@ (8007140 <xQueueGenericSend+0x210>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	e00a      	b.n	8007068 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007058:	4b39      	ldr	r3, [pc, #228]	@ (8007140 <xQueueGenericSend+0x210>)
 800705a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007068:	f001 ff6e 	bl	8008f48 <vPortExitCritical>
				return pdPASS;
 800706c:	2301      	movs	r3, #1
 800706e:	e063      	b.n	8007138 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d103      	bne.n	800707e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007076:	f001 ff67 	bl	8008f48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800707a:	2300      	movs	r3, #0
 800707c:	e05c      	b.n	8007138 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800707e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007084:	f107 0314 	add.w	r3, r7, #20
 8007088:	4618      	mov	r0, r3
 800708a:	f001 f865 	bl	8008158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800708e:	2301      	movs	r3, #1
 8007090:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007092:	f001 ff59 	bl	8008f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007096:	f000 fdc1 	bl	8007c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800709a:	f001 ff1f 	bl	8008edc <vPortEnterCritical>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070a4:	b25b      	sxtb	r3, r3
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d103      	bne.n	80070b4 <xQueueGenericSend+0x184>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c0:	d103      	bne.n	80070ca <xQueueGenericSend+0x19a>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070ca:	f001 ff3d 	bl	8008f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070ce:	1d3a      	adds	r2, r7, #4
 80070d0:	f107 0314 	add.w	r3, r7, #20
 80070d4:	4611      	mov	r1, r2
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 f854 	bl	8008184 <xTaskCheckForTimeOut>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d124      	bne.n	800712c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070e4:	f000 fab2 	bl	800764c <prvIsQueueFull>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d018      	beq.n	8007120 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	3310      	adds	r3, #16
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4611      	mov	r1, r2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 ff72 	bl	8007fe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070fe:	f000 fa3d 	bl	800757c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007102:	f000 fd99 	bl	8007c38 <xTaskResumeAll>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	f47f af7c 	bne.w	8007006 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800710e:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <xQueueGenericSend+0x210>)
 8007110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	e772      	b.n	8007006 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007122:	f000 fa2b 	bl	800757c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007126:	f000 fd87 	bl	8007c38 <xTaskResumeAll>
 800712a:	e76c      	b.n	8007006 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800712c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800712e:	f000 fa25 	bl	800757c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007132:	f000 fd81 	bl	8007c38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007136:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007138:	4618      	mov	r0, r3
 800713a:	3738      	adds	r7, #56	@ 0x38
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	e000ed04 	.word	0xe000ed04

08007144 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08e      	sub	sp, #56	@ 0x38
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10d      	bne.n	8007178 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	b672      	cpsid	i
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	b662      	cpsie	i
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	e7fd      	b.n	8007174 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <xQueueGenericSendFromISR+0x42>
 800717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <xQueueGenericSendFromISR+0x46>
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <xQueueGenericSendFromISR+0x48>
 800718a:	2300      	movs	r3, #0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10d      	bne.n	80071ac <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	b672      	cpsid	i
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	b662      	cpsie	i
 80071a4:	623b      	str	r3, [r7, #32]
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	e7fd      	b.n	80071a8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d103      	bne.n	80071ba <xQueueGenericSendFromISR+0x76>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <xQueueGenericSendFromISR+0x7a>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueGenericSendFromISR+0x7c>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10d      	bne.n	80071e0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c8:	b672      	cpsid	i
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	b662      	cpsie	i
 80071d8:	61fb      	str	r3, [r7, #28]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071e0:	f001 ff64 	bl	80090ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071e4:	f3ef 8211 	mrs	r2, BASEPRI
 80071e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ec:	b672      	cpsid	i
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	b662      	cpsie	i
 80071fc:	61ba      	str	r2, [r7, #24]
 80071fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007200:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007202:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800720c:	429a      	cmp	r2, r3
 800720e:	d302      	bcc.n	8007216 <xQueueGenericSendFromISR+0xd2>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d12c      	bne.n	8007270 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800721c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007226:	f000 f919 	bl	800745c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800722a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d112      	bne.n	800725a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d016      	beq.n	800726a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	3324      	adds	r3, #36	@ 0x24
 8007240:	4618      	mov	r0, r3
 8007242:	f000 ff23 	bl	800808c <xTaskRemoveFromEventList>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00e      	beq.n	800726a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e007      	b.n	800726a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800725a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800725e:	3301      	adds	r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	b25a      	sxtb	r2, r3
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800726a:	2301      	movs	r3, #1
 800726c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800726e:	e001      	b.n	8007274 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007270:	2300      	movs	r3, #0
 8007272:	637b      	str	r3, [r7, #52]	@ 0x34
 8007274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007276:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800727e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007282:	4618      	mov	r0, r3
 8007284:	3738      	adds	r7, #56	@ 0x38
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08c      	sub	sp, #48	@ 0x30
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007298:	2300      	movs	r3, #0
 800729a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10d      	bne.n	80072c2 <xQueueReceive+0x36>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	b672      	cpsid	i
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	b662      	cpsie	i
 80072ba:	623b      	str	r3, [r7, #32]
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d103      	bne.n	80072d0 <xQueueReceive+0x44>
 80072c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <xQueueReceive+0x48>
 80072d0:	2301      	movs	r3, #1
 80072d2:	e000      	b.n	80072d6 <xQueueReceive+0x4a>
 80072d4:	2300      	movs	r3, #0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10d      	bne.n	80072f6 <xQueueReceive+0x6a>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072de:	b672      	cpsid	i
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	b662      	cpsie	i
 80072ee:	61fb      	str	r3, [r7, #28]
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	e7fd      	b.n	80072f2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072f6:	f001 f897 	bl	8008428 <xTaskGetSchedulerState>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <xQueueReceive+0x7a>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <xQueueReceive+0x7e>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <xQueueReceive+0x80>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10d      	bne.n	800732c <xQueueReceive+0xa0>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	b672      	cpsid	i
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	b662      	cpsie	i
 8007324:	61bb      	str	r3, [r7, #24]
}
 8007326:	bf00      	nop
 8007328:	bf00      	nop
 800732a:	e7fd      	b.n	8007328 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800732c:	f001 fdd6 	bl	8008edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01f      	beq.n	800737c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007340:	f000 f8f6 	bl	8007530 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	1e5a      	subs	r2, r3, #1
 8007348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800734c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00f      	beq.n	8007374 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	3310      	adds	r3, #16
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fe97 	bl	800808c <xTaskRemoveFromEventList>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d007      	beq.n	8007374 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007364:	4b3c      	ldr	r3, [pc, #240]	@ (8007458 <xQueueReceive+0x1cc>)
 8007366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007374:	f001 fde8 	bl	8008f48 <vPortExitCritical>
				return pdPASS;
 8007378:	2301      	movs	r3, #1
 800737a:	e069      	b.n	8007450 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d103      	bne.n	800738a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007382:	f001 fde1 	bl	8008f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007386:	2300      	movs	r3, #0
 8007388:	e062      	b.n	8007450 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800738a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007390:	f107 0310 	add.w	r3, r7, #16
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fedf 	bl	8008158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800739a:	2301      	movs	r3, #1
 800739c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800739e:	f001 fdd3 	bl	8008f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073a2:	f000 fc3b 	bl	8007c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073a6:	f001 fd99 	bl	8008edc <vPortEnterCritical>
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073b0:	b25b      	sxtb	r3, r3
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d103      	bne.n	80073c0 <xQueueReceive+0x134>
 80073b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073c6:	b25b      	sxtb	r3, r3
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d103      	bne.n	80073d6 <xQueueReceive+0x14a>
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073d6:	f001 fdb7 	bl	8008f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073da:	1d3a      	adds	r2, r7, #4
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fece 	bl	8008184 <xTaskCheckForTimeOut>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d123      	bne.n	8007436 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073f0:	f000 f916 	bl	8007620 <prvIsQueueEmpty>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d017      	beq.n	800742a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	3324      	adds	r3, #36	@ 0x24
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	4611      	mov	r1, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fdec 	bl	8007fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800740a:	f000 f8b7 	bl	800757c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800740e:	f000 fc13 	bl	8007c38 <xTaskResumeAll>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d189      	bne.n	800732c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007418:	4b0f      	ldr	r3, [pc, #60]	@ (8007458 <xQueueReceive+0x1cc>)
 800741a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	e780      	b.n	800732c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800742a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800742c:	f000 f8a6 	bl	800757c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007430:	f000 fc02 	bl	8007c38 <xTaskResumeAll>
 8007434:	e77a      	b.n	800732c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007438:	f000 f8a0 	bl	800757c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800743c:	f000 fbfc 	bl	8007c38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007442:	f000 f8ed 	bl	8007620 <prvIsQueueEmpty>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	f43f af6f 	beq.w	800732c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800744e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007450:	4618      	mov	r0, r3
 8007452:	3730      	adds	r7, #48	@ 0x30
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007468:	2300      	movs	r3, #0
 800746a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10d      	bne.n	8007496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d14d      	bne.n	800751e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 ffec 	bl	8008464 <xTaskPriorityDisinherit>
 800748c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	e043      	b.n	800751e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d119      	bne.n	80074d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6858      	ldr	r0, [r3, #4]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a4:	461a      	mov	r2, r3
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	f00e f8df 	bl	801566a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	441a      	add	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d32b      	bcc.n	800751e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	e026      	b.n	800751e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	68d8      	ldr	r0, [r3, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d8:	461a      	mov	r2, r3
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	f00e f8c5 	bl	801566a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e8:	425b      	negs	r3, r3
 80074ea:	441a      	add	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d207      	bcs.n	800750c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007504:	425b      	negs	r3, r3
 8007506:	441a      	add	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d105      	bne.n	800751e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3b01      	subs	r3, #1
 800751c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007526:	697b      	ldr	r3, [r7, #20]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d018      	beq.n	8007574 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754a:	441a      	add	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	429a      	cmp	r2, r3
 800755a:	d303      	bcc.n	8007564 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68d9      	ldr	r1, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756c:	461a      	mov	r2, r3
 800756e:	6838      	ldr	r0, [r7, #0]
 8007570:	f00e f87b 	bl	801566a <memcpy>
	}
}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007584:	f001 fcaa 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800758e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007590:	e011      	b.n	80075b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d012      	beq.n	80075c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3324      	adds	r3, #36	@ 0x24
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fd74 	bl	800808c <xTaskRemoveFromEventList>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075aa:	f000 fe53 	bl	8008254 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dce9      	bgt.n	8007592 <prvUnlockQueue+0x16>
 80075be:	e000      	b.n	80075c2 <prvUnlockQueue+0x46>
					break;
 80075c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	22ff      	movs	r2, #255	@ 0xff
 80075c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80075ca:	f001 fcbd 	bl	8008f48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075ce:	f001 fc85 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075da:	e011      	b.n	8007600 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d012      	beq.n	800760a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3310      	adds	r3, #16
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fd4f 	bl	800808c <xTaskRemoveFromEventList>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80075f4:	f000 fe2e 	bl	8008254 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dce9      	bgt.n	80075dc <prvUnlockQueue+0x60>
 8007608:	e000      	b.n	800760c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800760a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	22ff      	movs	r2, #255	@ 0xff
 8007610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007614:	f001 fc98 	bl	8008f48 <vPortExitCritical>
}
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007628:	f001 fc58 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007634:	2301      	movs	r3, #1
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e001      	b.n	800763e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800763e:	f001 fc83 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 8007642:	68fb      	ldr	r3, [r7, #12]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007654:	f001 fc42 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007660:	429a      	cmp	r2, r3
 8007662:	d102      	bne.n	800766a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	e001      	b.n	800766e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800766e:	f001 fc6b 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 8007672:	68fb      	ldr	r3, [r7, #12]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e014      	b.n	80076b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800768c:	4a0f      	ldr	r2, [pc, #60]	@ (80076cc <vQueueAddToRegistry+0x50>)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007698:	490c      	ldr	r1, [pc, #48]	@ (80076cc <vQueueAddToRegistry+0x50>)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076a2:	4a0a      	ldr	r2, [pc, #40]	@ (80076cc <vQueueAddToRegistry+0x50>)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	4413      	add	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076ae:	e006      	b.n	80076be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3301      	adds	r3, #1
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b07      	cmp	r3, #7
 80076ba:	d9e7      	bls.n	800768c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20005efc 	.word	0x20005efc

080076d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80076e0:	f001 fbfc 	bl	8008edc <vPortEnterCritical>
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d103      	bne.n	80076fa <vQueueWaitForMessageRestricted+0x2a>
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007700:	b25b      	sxtb	r3, r3
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d103      	bne.n	8007710 <vQueueWaitForMessageRestricted+0x40>
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007710:	f001 fc1a 	bl	8008f48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3324      	adds	r3, #36	@ 0x24
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fc83 	bl	8008030 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800772a:	6978      	ldr	r0, [r7, #20]
 800772c:	f7ff ff26 	bl	800757c <prvUnlockQueue>
	}
 8007730:	bf00      	nop
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08e      	sub	sp, #56	@ 0x38
 800773c:	af04      	add	r7, sp, #16
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10d      	bne.n	8007768 <xTaskCreateStatic+0x30>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007750:	b672      	cpsid	i
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	b662      	cpsie	i
 8007760:	623b      	str	r3, [r7, #32]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10d      	bne.n	800778a <xTaskCreateStatic+0x52>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	b672      	cpsid	i
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	b662      	cpsie	i
 8007782:	61fb      	str	r3, [r7, #28]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800778a:	23a8      	movs	r3, #168	@ 0xa8
 800778c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2ba8      	cmp	r3, #168	@ 0xa8
 8007792:	d00d      	beq.n	80077b0 <xTaskCreateStatic+0x78>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	b672      	cpsid	i
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	b662      	cpsie	i
 80077a8:	61bb      	str	r3, [r7, #24]
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	e7fd      	b.n	80077ac <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01e      	beq.n	80077f6 <xTaskCreateStatic+0xbe>
 80077b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d01b      	beq.n	80077f6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077d0:	2300      	movs	r3, #0
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	f107 0314 	add.w	r3, r7, #20
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f851 	bl	8007890 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077f0:	f000 f8f8 	bl	80079e4 <prvAddNewTaskToReadyList>
 80077f4:	e001      	b.n	80077fa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077fa:	697b      	ldr	r3, [r7, #20]
	}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3728      	adds	r7, #40	@ 0x28
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08c      	sub	sp, #48	@ 0x30
 8007808:	af04      	add	r7, sp, #16
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fc8d 	bl	8009138 <pvPortMalloc>
 800781e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007826:	20a8      	movs	r0, #168	@ 0xa8
 8007828:	f001 fc86 	bl	8009138 <pvPortMalloc>
 800782c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	631a      	str	r2, [r3, #48]	@ 0x30
 800783a:	e005      	b.n	8007848 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800783c:	6978      	ldr	r0, [r7, #20]
 800783e:	f001 fd49 	bl	80092d4 <vPortFree>
 8007842:	e001      	b.n	8007848 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007844:	2300      	movs	r3, #0
 8007846:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d017      	beq.n	800787e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	2300      	movs	r3, #0
 800785a:	9303      	str	r3, [sp, #12]
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	9302      	str	r3, [sp, #8]
 8007860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007862:	9301      	str	r3, [sp, #4]
 8007864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f80f 	bl	8007890 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007872:	69f8      	ldr	r0, [r7, #28]
 8007874:	f000 f8b6 	bl	80079e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007878:	2301      	movs	r3, #1
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	e002      	b.n	8007884 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800787e:	f04f 33ff 	mov.w	r3, #4294967295
 8007882:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007884:	69bb      	ldr	r3, [r7, #24]
	}
 8007886:	4618      	mov	r0, r3
 8007888:	3720      	adds	r7, #32
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	461a      	mov	r2, r3
 80078a8:	21a5      	movs	r1, #165	@ 0xa5
 80078aa:	f00d fe0a 	bl	80154c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80078b8:	440b      	add	r3, r1
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f023 0307 	bic.w	r3, r3, #7
 80078c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00d      	beq.n	80078ee <prvInitialiseNewTask+0x5e>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	b672      	cpsid	i
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	b662      	cpsie	i
 80078e6:	617b      	str	r3, [r7, #20]
}
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	e7fd      	b.n	80078ea <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01f      	beq.n	8007934 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	e012      	b.n	8007920 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	4413      	add	r3, r2
 8007900:	7819      	ldrb	r1, [r3, #0]
 8007902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	3334      	adds	r3, #52	@ 0x34
 800790a:	460a      	mov	r2, r1
 800790c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	4413      	add	r3, r2
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d006      	beq.n	8007928 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	3301      	adds	r3, #1
 800791e:	61fb      	str	r3, [r7, #28]
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d9e9      	bls.n	80078fa <prvInitialiseNewTask+0x6a>
 8007926:	e000      	b.n	800792a <prvInitialiseNewTask+0x9a>
			{
				break;
 8007928:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007932:	e003      	b.n	800793c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	2b37      	cmp	r3, #55	@ 0x37
 8007940:	d901      	bls.n	8007946 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007942:	2337      	movs	r3, #55	@ 0x37
 8007944:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800794a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007950:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	2200      	movs	r2, #0
 8007956:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795a:	3304      	adds	r3, #4
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff f93d 	bl	8006bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	3318      	adds	r3, #24
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff f938 	bl	8006bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007970:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007974:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007980:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	2200      	movs	r2, #0
 8007986:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	2200      	movs	r2, #0
 800798e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	3354      	adds	r3, #84	@ 0x54
 8007996:	224c      	movs	r2, #76	@ 0x4c
 8007998:	2100      	movs	r1, #0
 800799a:	4618      	mov	r0, r3
 800799c:	f00d fd91 	bl	80154c2 <memset>
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	4a0d      	ldr	r2, [pc, #52]	@ (80079d8 <prvInitialiseNewTask+0x148>)
 80079a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	4a0c      	ldr	r2, [pc, #48]	@ (80079dc <prvInitialiseNewTask+0x14c>)
 80079aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	4a0c      	ldr	r2, [pc, #48]	@ (80079e0 <prvInitialiseNewTask+0x150>)
 80079b0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	68f9      	ldr	r1, [r7, #12]
 80079b6:	69b8      	ldr	r0, [r7, #24]
 80079b8:	f001 f984 	bl	8008cc4 <pxPortInitialiseStack>
 80079bc:	4602      	mov	r2, r0
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079ce:	bf00      	nop
 80079d0:	3720      	adds	r7, #32
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	2000d254 	.word	0x2000d254
 80079dc:	2000d2bc 	.word	0x2000d2bc
 80079e0:	2000d324 	.word	0x2000d324

080079e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079ec:	f001 fa76 	bl	8008edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079f0:	4b2d      	ldr	r3, [pc, #180]	@ (8007aa8 <prvAddNewTaskToReadyList+0xc4>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	4a2c      	ldr	r2, [pc, #176]	@ (8007aa8 <prvAddNewTaskToReadyList+0xc4>)
 80079f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079fa:	4b2c      	ldr	r3, [pc, #176]	@ (8007aac <prvAddNewTaskToReadyList+0xc8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a02:	4a2a      	ldr	r2, [pc, #168]	@ (8007aac <prvAddNewTaskToReadyList+0xc8>)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a08:	4b27      	ldr	r3, [pc, #156]	@ (8007aa8 <prvAddNewTaskToReadyList+0xc4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d110      	bne.n	8007a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a10:	f000 fc44 	bl	800829c <prvInitialiseTaskLists>
 8007a14:	e00d      	b.n	8007a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a16:	4b26      	ldr	r3, [pc, #152]	@ (8007ab0 <prvAddNewTaskToReadyList+0xcc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d109      	bne.n	8007a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a1e:	4b23      	ldr	r3, [pc, #140]	@ (8007aac <prvAddNewTaskToReadyList+0xc8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d802      	bhi.n	8007a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007aac <prvAddNewTaskToReadyList+0xc8>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a32:	4b20      	ldr	r3, [pc, #128]	@ (8007ab4 <prvAddNewTaskToReadyList+0xd0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3301      	adds	r3, #1
 8007a38:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab4 <prvAddNewTaskToReadyList+0xd0>)
 8007a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab4 <prvAddNewTaskToReadyList+0xd0>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a48:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <prvAddNewTaskToReadyList+0xd4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d903      	bls.n	8007a58 <prvAddNewTaskToReadyList+0x74>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	4a18      	ldr	r2, [pc, #96]	@ (8007ab8 <prvAddNewTaskToReadyList+0xd4>)
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4a15      	ldr	r2, [pc, #84]	@ (8007abc <prvAddNewTaskToReadyList+0xd8>)
 8007a66:	441a      	add	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f7ff f8c1 	bl	8006bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a74:	f001 fa68 	bl	8008f48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a78:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <prvAddNewTaskToReadyList+0xcc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a80:	4b0a      	ldr	r3, [pc, #40]	@ (8007aac <prvAddNewTaskToReadyList+0xc8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d207      	bcs.n	8007a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac0 <prvAddNewTaskToReadyList+0xdc>)
 8007a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20006410 	.word	0x20006410
 8007aac:	20005f3c 	.word	0x20005f3c
 8007ab0:	2000641c 	.word	0x2000641c
 8007ab4:	2000642c 	.word	0x2000642c
 8007ab8:	20006418 	.word	0x20006418
 8007abc:	20005f40 	.word	0x20005f40
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d01a      	beq.n	8007b0c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ad6:	4b15      	ldr	r3, [pc, #84]	@ (8007b2c <vTaskDelay+0x68>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <vTaskDelay+0x36>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	b672      	cpsid	i
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	b662      	cpsie	i
 8007af2:	60bb      	str	r3, [r7, #8]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007afa:	f000 f88f 	bl	8007c1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007afe:	2100      	movs	r1, #0
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fd23 	bl	800854c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b06:	f000 f897 	bl	8007c38 <xTaskResumeAll>
 8007b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d107      	bne.n	8007b22 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007b12:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <vTaskDelay+0x6c>)
 8007b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b22:	bf00      	nop
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20006438 	.word	0x20006438
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	@ 0x28
 8007b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b42:	463a      	mov	r2, r7
 8007b44:	1d39      	adds	r1, r7, #4
 8007b46:	f107 0308 	add.w	r3, r7, #8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe fff2 	bl	8006b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	9202      	str	r2, [sp, #8]
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	460a      	mov	r2, r1
 8007b62:	4926      	ldr	r1, [pc, #152]	@ (8007bfc <vTaskStartScheduler+0xc8>)
 8007b64:	4826      	ldr	r0, [pc, #152]	@ (8007c00 <vTaskStartScheduler+0xcc>)
 8007b66:	f7ff fde7 	bl	8007738 <xTaskCreateStatic>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4a25      	ldr	r2, [pc, #148]	@ (8007c04 <vTaskStartScheduler+0xd0>)
 8007b6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b70:	4b24      	ldr	r3, [pc, #144]	@ (8007c04 <vTaskStartScheduler+0xd0>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e001      	b.n	8007b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d102      	bne.n	8007b8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b88:	f000 fd34 	bl	80085f4 <xTimerCreateTimerTask>
 8007b8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d11d      	bne.n	8007bd0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b98:	b672      	cpsid	i
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	b662      	cpsie	i
 8007ba8:	613b      	str	r3, [r7, #16]
}
 8007baa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bac:	4b16      	ldr	r3, [pc, #88]	@ (8007c08 <vTaskStartScheduler+0xd4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3354      	adds	r3, #84	@ 0x54
 8007bb2:	4a16      	ldr	r2, [pc, #88]	@ (8007c0c <vTaskStartScheduler+0xd8>)
 8007bb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bb6:	4b16      	ldr	r3, [pc, #88]	@ (8007c10 <vTaskStartScheduler+0xdc>)
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bbe:	4b15      	ldr	r3, [pc, #84]	@ (8007c14 <vTaskStartScheduler+0xe0>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007bc4:	4b14      	ldr	r3, [pc, #80]	@ (8007c18 <vTaskStartScheduler+0xe4>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bca:	f001 f909 	bl	8008de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bce:	e011      	b.n	8007bf4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd6:	d10d      	bne.n	8007bf4 <vTaskStartScheduler+0xc0>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	b672      	cpsid	i
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	b662      	cpsie	i
 8007bec:	60fb      	str	r3, [r7, #12]
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	e7fd      	b.n	8007bf0 <vTaskStartScheduler+0xbc>
}
 8007bf4:	bf00      	nop
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	0801633c 	.word	0x0801633c
 8007c00:	0800826d 	.word	0x0800826d
 8007c04:	20006434 	.word	0x20006434
 8007c08:	20005f3c 	.word	0x20005f3c
 8007c0c:	20000040 	.word	0x20000040
 8007c10:	20006430 	.word	0x20006430
 8007c14:	2000641c 	.word	0x2000641c
 8007c18:	20006414 	.word	0x20006414

08007c1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c20:	4b04      	ldr	r3, [pc, #16]	@ (8007c34 <vTaskSuspendAll+0x18>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	4a03      	ldr	r2, [pc, #12]	@ (8007c34 <vTaskSuspendAll+0x18>)
 8007c28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c2a:	bf00      	nop
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20006438 	.word	0x20006438

08007c38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c46:	4b43      	ldr	r3, [pc, #268]	@ (8007d54 <xTaskResumeAll+0x11c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <xTaskResumeAll+0x32>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	b672      	cpsid	i
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	b662      	cpsie	i
 8007c62:	603b      	str	r3, [r7, #0]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c6a:	f001 f937 	bl	8008edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c6e:	4b39      	ldr	r3, [pc, #228]	@ (8007d54 <xTaskResumeAll+0x11c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	4a37      	ldr	r2, [pc, #220]	@ (8007d54 <xTaskResumeAll+0x11c>)
 8007c76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c78:	4b36      	ldr	r3, [pc, #216]	@ (8007d54 <xTaskResumeAll+0x11c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d162      	bne.n	8007d46 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c80:	4b35      	ldr	r3, [pc, #212]	@ (8007d58 <xTaskResumeAll+0x120>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d05e      	beq.n	8007d46 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c88:	e02f      	b.n	8007cea <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c8a:	4b34      	ldr	r3, [pc, #208]	@ (8007d5c <xTaskResumeAll+0x124>)
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3318      	adds	r3, #24
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff f80a 	bl	8006cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff f805 	bl	8006cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007caa:	4b2d      	ldr	r3, [pc, #180]	@ (8007d60 <xTaskResumeAll+0x128>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d903      	bls.n	8007cba <xTaskResumeAll+0x82>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d60 <xTaskResumeAll+0x128>)
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4a27      	ldr	r2, [pc, #156]	@ (8007d64 <xTaskResumeAll+0x12c>)
 8007cc8:	441a      	add	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fe ff90 	bl	8006bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cda:	4b23      	ldr	r3, [pc, #140]	@ (8007d68 <xTaskResumeAll+0x130>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d302      	bcc.n	8007cea <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007ce4:	4b21      	ldr	r3, [pc, #132]	@ (8007d6c <xTaskResumeAll+0x134>)
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cea:	4b1c      	ldr	r3, [pc, #112]	@ (8007d5c <xTaskResumeAll+0x124>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1cb      	bne.n	8007c8a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cf8:	f000 fb76 	bl	80083e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8007d70 <xTaskResumeAll+0x138>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d010      	beq.n	8007d2a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d08:	f000 f846 	bl	8007d98 <xTaskIncrementTick>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007d12:	4b16      	ldr	r3, [pc, #88]	@ (8007d6c <xTaskResumeAll+0x134>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f1      	bne.n	8007d08 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007d24:	4b12      	ldr	r3, [pc, #72]	@ (8007d70 <xTaskResumeAll+0x138>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d2a:	4b10      	ldr	r3, [pc, #64]	@ (8007d6c <xTaskResumeAll+0x134>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d009      	beq.n	8007d46 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d32:	2301      	movs	r3, #1
 8007d34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d36:	4b0f      	ldr	r3, [pc, #60]	@ (8007d74 <xTaskResumeAll+0x13c>)
 8007d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d46:	f001 f8ff 	bl	8008f48 <vPortExitCritical>

	return xAlreadyYielded;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20006438 	.word	0x20006438
 8007d58:	20006410 	.word	0x20006410
 8007d5c:	200063d0 	.word	0x200063d0
 8007d60:	20006418 	.word	0x20006418
 8007d64:	20005f40 	.word	0x20005f40
 8007d68:	20005f3c 	.word	0x20005f3c
 8007d6c:	20006424 	.word	0x20006424
 8007d70:	20006420 	.word	0x20006420
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d7e:	4b05      	ldr	r3, [pc, #20]	@ (8007d94 <xTaskGetTickCount+0x1c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d84:	687b      	ldr	r3, [r7, #4]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20006414 	.word	0x20006414

08007d98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007da2:	4b50      	ldr	r3, [pc, #320]	@ (8007ee4 <xTaskIncrementTick+0x14c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f040 808c 	bne.w	8007ec4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dac:	4b4e      	ldr	r3, [pc, #312]	@ (8007ee8 <xTaskIncrementTick+0x150>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007db4:	4a4c      	ldr	r2, [pc, #304]	@ (8007ee8 <xTaskIncrementTick+0x150>)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d123      	bne.n	8007e08 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8007eec <xTaskIncrementTick+0x154>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00d      	beq.n	8007de6 <xTaskIncrementTick+0x4e>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	b672      	cpsid	i
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	b662      	cpsie	i
 8007dde:	603b      	str	r3, [r7, #0]
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	e7fd      	b.n	8007de2 <xTaskIncrementTick+0x4a>
 8007de6:	4b41      	ldr	r3, [pc, #260]	@ (8007eec <xTaskIncrementTick+0x154>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	4b40      	ldr	r3, [pc, #256]	@ (8007ef0 <xTaskIncrementTick+0x158>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a3e      	ldr	r2, [pc, #248]	@ (8007eec <xTaskIncrementTick+0x154>)
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ef0 <xTaskIncrementTick+0x158>)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8007ef4 <xTaskIncrementTick+0x15c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	4a3c      	ldr	r2, [pc, #240]	@ (8007ef4 <xTaskIncrementTick+0x15c>)
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	f000 faf0 	bl	80083e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e08:	4b3b      	ldr	r3, [pc, #236]	@ (8007ef8 <xTaskIncrementTick+0x160>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d349      	bcc.n	8007ea6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e12:	4b36      	ldr	r3, [pc, #216]	@ (8007eec <xTaskIncrementTick+0x154>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e1c:	4b36      	ldr	r3, [pc, #216]	@ (8007ef8 <xTaskIncrementTick+0x160>)
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e22:	601a      	str	r2, [r3, #0]
					break;
 8007e24:	e03f      	b.n	8007ea6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e26:	4b31      	ldr	r3, [pc, #196]	@ (8007eec <xTaskIncrementTick+0x154>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d203      	bcs.n	8007e46 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8007ef8 <xTaskIncrementTick+0x160>)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e44:	e02f      	b.n	8007ea6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe ff30 	bl	8006cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	3318      	adds	r3, #24
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe ff27 	bl	8006cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e66:	4b25      	ldr	r3, [pc, #148]	@ (8007efc <xTaskIncrementTick+0x164>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d903      	bls.n	8007e76 <xTaskIncrementTick+0xde>
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e72:	4a22      	ldr	r2, [pc, #136]	@ (8007efc <xTaskIncrementTick+0x164>)
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4a1f      	ldr	r2, [pc, #124]	@ (8007f00 <xTaskIncrementTick+0x168>)
 8007e84:	441a      	add	r2, r3
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fe feb2 	bl	8006bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e96:	4b1b      	ldr	r3, [pc, #108]	@ (8007f04 <xTaskIncrementTick+0x16c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d3b8      	bcc.n	8007e12 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ea4:	e7b5      	b.n	8007e12 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ea6:	4b17      	ldr	r3, [pc, #92]	@ (8007f04 <xTaskIncrementTick+0x16c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eac:	4914      	ldr	r1, [pc, #80]	@ (8007f00 <xTaskIncrementTick+0x168>)
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d907      	bls.n	8007ece <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e004      	b.n	8007ece <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ec4:	4b10      	ldr	r3, [pc, #64]	@ (8007f08 <xTaskIncrementTick+0x170>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	4a0f      	ldr	r2, [pc, #60]	@ (8007f08 <xTaskIncrementTick+0x170>)
 8007ecc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ece:	4b0f      	ldr	r3, [pc, #60]	@ (8007f0c <xTaskIncrementTick+0x174>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007eda:	697b      	ldr	r3, [r7, #20]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20006438 	.word	0x20006438
 8007ee8:	20006414 	.word	0x20006414
 8007eec:	200063c8 	.word	0x200063c8
 8007ef0:	200063cc 	.word	0x200063cc
 8007ef4:	20006428 	.word	0x20006428
 8007ef8:	20006430 	.word	0x20006430
 8007efc:	20006418 	.word	0x20006418
 8007f00:	20005f40 	.word	0x20005f40
 8007f04:	20005f3c 	.word	0x20005f3c
 8007f08:	20006420 	.word	0x20006420
 8007f0c:	20006424 	.word	0x20006424

08007f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f16:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc8 <vTaskSwitchContext+0xb8>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007fcc <vTaskSwitchContext+0xbc>)
 8007f20:	2201      	movs	r2, #1
 8007f22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f24:	e049      	b.n	8007fba <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007f26:	4b29      	ldr	r3, [pc, #164]	@ (8007fcc <vTaskSwitchContext+0xbc>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	4b28      	ldr	r3, [pc, #160]	@ (8007fd0 <vTaskSwitchContext+0xc0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	e013      	b.n	8007f5c <vTaskSwitchContext+0x4c>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10d      	bne.n	8007f56 <vTaskSwitchContext+0x46>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3e:	b672      	cpsid	i
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	b662      	cpsie	i
 8007f4e:	607b      	str	r3, [r7, #4]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <vTaskSwitchContext+0x42>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	491d      	ldr	r1, [pc, #116]	@ (8007fd4 <vTaskSwitchContext+0xc4>)
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0e1      	beq.n	8007f34 <vTaskSwitchContext+0x24>
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4a16      	ldr	r2, [pc, #88]	@ (8007fd4 <vTaskSwitchContext+0xc4>)
 8007f7c:	4413      	add	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	605a      	str	r2, [r3, #4]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	3308      	adds	r3, #8
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d104      	bne.n	8007fa0 <vTaskSwitchContext+0x90>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	605a      	str	r2, [r3, #4]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd8 <vTaskSwitchContext+0xc8>)
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	4a09      	ldr	r2, [pc, #36]	@ (8007fd0 <vTaskSwitchContext+0xc0>)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fb0:	4b09      	ldr	r3, [pc, #36]	@ (8007fd8 <vTaskSwitchContext+0xc8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3354      	adds	r3, #84	@ 0x54
 8007fb6:	4a09      	ldr	r2, [pc, #36]	@ (8007fdc <vTaskSwitchContext+0xcc>)
 8007fb8:	6013      	str	r3, [r2, #0]
}
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	20006438 	.word	0x20006438
 8007fcc:	20006424 	.word	0x20006424
 8007fd0:	20006418 	.word	0x20006418
 8007fd4:	20005f40 	.word	0x20005f40
 8007fd8:	20005f3c 	.word	0x20005f3c
 8007fdc:	20000040 	.word	0x20000040

08007fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10d      	bne.n	800800c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff4:	b672      	cpsid	i
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	b662      	cpsie	i
 8008004:	60fb      	str	r3, [r7, #12]
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	e7fd      	b.n	8008008 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800800c:	4b07      	ldr	r3, [pc, #28]	@ (800802c <vTaskPlaceOnEventList+0x4c>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3318      	adds	r3, #24
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7fe fe12 	bl	8006c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800801a:	2101      	movs	r1, #1
 800801c:	6838      	ldr	r0, [r7, #0]
 800801e:	f000 fa95 	bl	800854c <prvAddCurrentTaskToDelayedList>
}
 8008022:	bf00      	nop
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20005f3c 	.word	0x20005f3c

08008030 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10d      	bne.n	800805e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	b672      	cpsid	i
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	b662      	cpsie	i
 8008056:	617b      	str	r3, [r7, #20]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800805e:	4b0a      	ldr	r3, [pc, #40]	@ (8008088 <vTaskPlaceOnEventListRestricted+0x58>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3318      	adds	r3, #24
 8008064:	4619      	mov	r1, r3
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7fe fdc5 	bl	8006bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	68b8      	ldr	r0, [r7, #8]
 800807c:	f000 fa66 	bl	800854c <prvAddCurrentTaskToDelayedList>
	}
 8008080:	bf00      	nop
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20005f3c 	.word	0x20005f3c

0800808c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10d      	bne.n	80080be <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a6:	b672      	cpsid	i
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	b662      	cpsie	i
 80080b6:	60fb      	str	r3, [r7, #12]
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	e7fd      	b.n	80080ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3318      	adds	r3, #24
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fdf4 	bl	8006cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008140 <xTaskRemoveFromEventList+0xb4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d11d      	bne.n	800810c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fdeb 	bl	8006cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080de:	4b19      	ldr	r3, [pc, #100]	@ (8008144 <xTaskRemoveFromEventList+0xb8>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d903      	bls.n	80080ee <xTaskRemoveFromEventList+0x62>
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ea:	4a16      	ldr	r2, [pc, #88]	@ (8008144 <xTaskRemoveFromEventList+0xb8>)
 80080ec:	6013      	str	r3, [r2, #0]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4a13      	ldr	r2, [pc, #76]	@ (8008148 <xTaskRemoveFromEventList+0xbc>)
 80080fc:	441a      	add	r2, r3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	3304      	adds	r3, #4
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f7fe fd76 	bl	8006bf6 <vListInsertEnd>
 800810a:	e005      	b.n	8008118 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3318      	adds	r3, #24
 8008110:	4619      	mov	r1, r3
 8008112:	480e      	ldr	r0, [pc, #56]	@ (800814c <xTaskRemoveFromEventList+0xc0>)
 8008114:	f7fe fd6f 	bl	8006bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811c:	4b0c      	ldr	r3, [pc, #48]	@ (8008150 <xTaskRemoveFromEventList+0xc4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	429a      	cmp	r2, r3
 8008124:	d905      	bls.n	8008132 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008126:	2301      	movs	r3, #1
 8008128:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800812a:	4b0a      	ldr	r3, [pc, #40]	@ (8008154 <xTaskRemoveFromEventList+0xc8>)
 800812c:	2201      	movs	r2, #1
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	e001      	b.n	8008136 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008136:	697b      	ldr	r3, [r7, #20]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20006438 	.word	0x20006438
 8008144:	20006418 	.word	0x20006418
 8008148:	20005f40 	.word	0x20005f40
 800814c:	200063d0 	.word	0x200063d0
 8008150:	20005f3c 	.word	0x20005f3c
 8008154:	20006424 	.word	0x20006424

08008158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008160:	4b06      	ldr	r3, [pc, #24]	@ (800817c <vTaskInternalSetTimeOutState+0x24>)
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008168:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <vTaskInternalSetTimeOutState+0x28>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	605a      	str	r2, [r3, #4]
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	20006428 	.word	0x20006428
 8008180:	20006414 	.word	0x20006414

08008184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10d      	bne.n	80081b0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008198:	b672      	cpsid	i
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	b662      	cpsie	i
 80081a8:	613b      	str	r3, [r7, #16]
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	e7fd      	b.n	80081ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10d      	bne.n	80081d2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ba:	b672      	cpsid	i
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	b662      	cpsie	i
 80081ca:	60fb      	str	r3, [r7, #12]
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	e7fd      	b.n	80081ce <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80081d2:	f000 fe83 	bl	8008edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081d6:	4b1d      	ldr	r3, [pc, #116]	@ (800824c <xTaskCheckForTimeOut+0xc8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d102      	bne.n	80081f6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
 80081f4:	e023      	b.n	800823e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	4b15      	ldr	r3, [pc, #84]	@ (8008250 <xTaskCheckForTimeOut+0xcc>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d007      	beq.n	8008212 <xTaskCheckForTimeOut+0x8e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	429a      	cmp	r2, r3
 800820a:	d302      	bcc.n	8008212 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	e015      	b.n	800823e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	429a      	cmp	r2, r3
 800821a:	d20b      	bcs.n	8008234 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	1ad2      	subs	r2, r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff ff95 	bl	8008158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	61fb      	str	r3, [r7, #28]
 8008232:	e004      	b.n	800823e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800823a:	2301      	movs	r3, #1
 800823c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800823e:	f000 fe83 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 8008242:	69fb      	ldr	r3, [r7, #28]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20006414 	.word	0x20006414
 8008250:	20006428 	.word	0x20006428

08008254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008258:	4b03      	ldr	r3, [pc, #12]	@ (8008268 <vTaskMissedYield+0x14>)
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]
}
 800825e:	bf00      	nop
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	20006424 	.word	0x20006424

0800826c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008274:	f000 f852 	bl	800831c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008278:	4b06      	ldr	r3, [pc, #24]	@ (8008294 <prvIdleTask+0x28>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d9f9      	bls.n	8008274 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008280:	4b05      	ldr	r3, [pc, #20]	@ (8008298 <prvIdleTask+0x2c>)
 8008282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008290:	e7f0      	b.n	8008274 <prvIdleTask+0x8>
 8008292:	bf00      	nop
 8008294:	20005f40 	.word	0x20005f40
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082a2:	2300      	movs	r3, #0
 80082a4:	607b      	str	r3, [r7, #4]
 80082a6:	e00c      	b.n	80082c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	4613      	mov	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4a12      	ldr	r2, [pc, #72]	@ (80082fc <prvInitialiseTaskLists+0x60>)
 80082b4:	4413      	add	r3, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fc70 	bl	8006b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3301      	adds	r3, #1
 80082c0:	607b      	str	r3, [r7, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b37      	cmp	r3, #55	@ 0x37
 80082c6:	d9ef      	bls.n	80082a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082c8:	480d      	ldr	r0, [pc, #52]	@ (8008300 <prvInitialiseTaskLists+0x64>)
 80082ca:	f7fe fc67 	bl	8006b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082ce:	480d      	ldr	r0, [pc, #52]	@ (8008304 <prvInitialiseTaskLists+0x68>)
 80082d0:	f7fe fc64 	bl	8006b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082d4:	480c      	ldr	r0, [pc, #48]	@ (8008308 <prvInitialiseTaskLists+0x6c>)
 80082d6:	f7fe fc61 	bl	8006b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082da:	480c      	ldr	r0, [pc, #48]	@ (800830c <prvInitialiseTaskLists+0x70>)
 80082dc:	f7fe fc5e 	bl	8006b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082e0:	480b      	ldr	r0, [pc, #44]	@ (8008310 <prvInitialiseTaskLists+0x74>)
 80082e2:	f7fe fc5b 	bl	8006b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008314 <prvInitialiseTaskLists+0x78>)
 80082e8:	4a05      	ldr	r2, [pc, #20]	@ (8008300 <prvInitialiseTaskLists+0x64>)
 80082ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008318 <prvInitialiseTaskLists+0x7c>)
 80082ee:	4a05      	ldr	r2, [pc, #20]	@ (8008304 <prvInitialiseTaskLists+0x68>)
 80082f0:	601a      	str	r2, [r3, #0]
}
 80082f2:	bf00      	nop
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20005f40 	.word	0x20005f40
 8008300:	200063a0 	.word	0x200063a0
 8008304:	200063b4 	.word	0x200063b4
 8008308:	200063d0 	.word	0x200063d0
 800830c:	200063e4 	.word	0x200063e4
 8008310:	200063fc 	.word	0x200063fc
 8008314:	200063c8 	.word	0x200063c8
 8008318:	200063cc 	.word	0x200063cc

0800831c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008322:	e019      	b.n	8008358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008324:	f000 fdda 	bl	8008edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008328:	4b10      	ldr	r3, [pc, #64]	@ (800836c <prvCheckTasksWaitingTermination+0x50>)
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3304      	adds	r3, #4
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe fcbb 	bl	8006cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800833a:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <prvCheckTasksWaitingTermination+0x54>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3b01      	subs	r3, #1
 8008340:	4a0b      	ldr	r2, [pc, #44]	@ (8008370 <prvCheckTasksWaitingTermination+0x54>)
 8008342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008344:	4b0b      	ldr	r3, [pc, #44]	@ (8008374 <prvCheckTasksWaitingTermination+0x58>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3b01      	subs	r3, #1
 800834a:	4a0a      	ldr	r2, [pc, #40]	@ (8008374 <prvCheckTasksWaitingTermination+0x58>)
 800834c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800834e:	f000 fdfb 	bl	8008f48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f810 	bl	8008378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008358:	4b06      	ldr	r3, [pc, #24]	@ (8008374 <prvCheckTasksWaitingTermination+0x58>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e1      	bne.n	8008324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200063e4 	.word	0x200063e4
 8008370:	20006410 	.word	0x20006410
 8008374:	200063f8 	.word	0x200063f8

08008378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3354      	adds	r3, #84	@ 0x54
 8008384:	4618      	mov	r0, r3
 8008386:	f00d f8b5 	bl	80154f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008390:	2b00      	cmp	r3, #0
 8008392:	d108      	bne.n	80083a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008398:	4618      	mov	r0, r3
 800839a:	f000 ff9b 	bl	80092d4 <vPortFree>
				vPortFree( pxTCB );
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 ff98 	bl	80092d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083a4:	e01b      	b.n	80083de <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d103      	bne.n	80083b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 ff8f 	bl	80092d4 <vPortFree>
	}
 80083b6:	e012      	b.n	80083de <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d00d      	beq.n	80083de <prvDeleteTCB+0x66>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c6:	b672      	cpsid	i
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	b662      	cpsie	i
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <prvDeleteTCB+0x62>
	}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008420 <prvResetNextTaskUnblockTime+0x38>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008424 <prvResetNextTaskUnblockTime+0x3c>)
 80083fa:	f04f 32ff 	mov.w	r2, #4294967295
 80083fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008400:	e008      	b.n	8008414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008402:	4b07      	ldr	r3, [pc, #28]	@ (8008420 <prvResetNextTaskUnblockTime+0x38>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4a04      	ldr	r2, [pc, #16]	@ (8008424 <prvResetNextTaskUnblockTime+0x3c>)
 8008412:	6013      	str	r3, [r2, #0]
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	200063c8 	.word	0x200063c8
 8008424:	20006430 	.word	0x20006430

08008428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800842e:	4b0b      	ldr	r3, [pc, #44]	@ (800845c <xTaskGetSchedulerState+0x34>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008436:	2301      	movs	r3, #1
 8008438:	607b      	str	r3, [r7, #4]
 800843a:	e008      	b.n	800844e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800843c:	4b08      	ldr	r3, [pc, #32]	@ (8008460 <xTaskGetSchedulerState+0x38>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008444:	2302      	movs	r3, #2
 8008446:	607b      	str	r3, [r7, #4]
 8008448:	e001      	b.n	800844e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800844a:	2300      	movs	r3, #0
 800844c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800844e:	687b      	ldr	r3, [r7, #4]
	}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	2000641c 	.word	0x2000641c
 8008460:	20006438 	.word	0x20006438

08008464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d05c      	beq.n	8008534 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800847a:	4b31      	ldr	r3, [pc, #196]	@ (8008540 <xTaskPriorityDisinherit+0xdc>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	429a      	cmp	r2, r3
 8008482:	d00d      	beq.n	80084a0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	b672      	cpsid	i
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	b662      	cpsie	i
 8008498:	60fb      	str	r3, [r7, #12]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10d      	bne.n	80084c4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	b672      	cpsid	i
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	b662      	cpsie	i
 80084bc:	60bb      	str	r3, [r7, #8]
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c8:	1e5a      	subs	r2, r3, #1
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d02c      	beq.n	8008534 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d128      	bne.n	8008534 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fbe2 	bl	8006cb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008504:	4b0f      	ldr	r3, [pc, #60]	@ (8008544 <xTaskPriorityDisinherit+0xe0>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d903      	bls.n	8008514 <xTaskPriorityDisinherit+0xb0>
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008510:	4a0c      	ldr	r2, [pc, #48]	@ (8008544 <xTaskPriorityDisinherit+0xe0>)
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4a09      	ldr	r2, [pc, #36]	@ (8008548 <xTaskPriorityDisinherit+0xe4>)
 8008522:	441a      	add	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	3304      	adds	r3, #4
 8008528:	4619      	mov	r1, r3
 800852a:	4610      	mov	r0, r2
 800852c:	f7fe fb63 	bl	8006bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008530:	2301      	movs	r3, #1
 8008532:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008534:	697b      	ldr	r3, [r7, #20]
	}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20005f3c 	.word	0x20005f3c
 8008544:	20006418 	.word	0x20006418
 8008548:	20005f40 	.word	0x20005f40

0800854c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008556:	4b21      	ldr	r3, [pc, #132]	@ (80085dc <prvAddCurrentTaskToDelayedList+0x90>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800855c:	4b20      	ldr	r3, [pc, #128]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3304      	adds	r3, #4
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fba4 	bl	8006cb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856e:	d10a      	bne.n	8008586 <prvAddCurrentTaskToDelayedList+0x3a>
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008576:	4b1a      	ldr	r3, [pc, #104]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4819      	ldr	r0, [pc, #100]	@ (80085e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008580:	f7fe fb39 	bl	8006bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008584:	e026      	b.n	80085d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4413      	add	r3, r2
 800858c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800858e:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	429a      	cmp	r2, r3
 800859c:	d209      	bcs.n	80085b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800859e:	4b12      	ldr	r3, [pc, #72]	@ (80085e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b0f      	ldr	r3, [pc, #60]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3304      	adds	r3, #4
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f7fe fb47 	bl	8006c3e <vListInsert>
}
 80085b0:	e010      	b.n	80085d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085b2:	4b0e      	ldr	r3, [pc, #56]	@ (80085ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b0a      	ldr	r3, [pc, #40]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3304      	adds	r3, #4
 80085bc:	4619      	mov	r1, r3
 80085be:	4610      	mov	r0, r2
 80085c0:	f7fe fb3d 	bl	8006c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085c4:	4b0a      	ldr	r3, [pc, #40]	@ (80085f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d202      	bcs.n	80085d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085ce:	4a08      	ldr	r2, [pc, #32]	@ (80085f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	6013      	str	r3, [r2, #0]
}
 80085d4:	bf00      	nop
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20006414 	.word	0x20006414
 80085e0:	20005f3c 	.word	0x20005f3c
 80085e4:	200063fc 	.word	0x200063fc
 80085e8:	200063cc 	.word	0x200063cc
 80085ec:	200063c8 	.word	0x200063c8
 80085f0:	20006430 	.word	0x20006430

080085f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	@ 0x28
 80085f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80085fe:	f000 fb21 	bl	8008c44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008602:	4b1e      	ldr	r3, [pc, #120]	@ (800867c <xTimerCreateTimerTask+0x88>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d021      	beq.n	800864e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800860e:	2300      	movs	r3, #0
 8008610:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008612:	1d3a      	adds	r2, r7, #4
 8008614:	f107 0108 	add.w	r1, r7, #8
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	4618      	mov	r0, r3
 800861e:	f7fe faa3 	bl	8006b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	9202      	str	r2, [sp, #8]
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	2302      	movs	r3, #2
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	2300      	movs	r3, #0
 8008632:	460a      	mov	r2, r1
 8008634:	4912      	ldr	r1, [pc, #72]	@ (8008680 <xTimerCreateTimerTask+0x8c>)
 8008636:	4813      	ldr	r0, [pc, #76]	@ (8008684 <xTimerCreateTimerTask+0x90>)
 8008638:	f7ff f87e 	bl	8007738 <xTaskCreateStatic>
 800863c:	4603      	mov	r3, r0
 800863e:	4a12      	ldr	r2, [pc, #72]	@ (8008688 <xTimerCreateTimerTask+0x94>)
 8008640:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008642:	4b11      	ldr	r3, [pc, #68]	@ (8008688 <xTimerCreateTimerTask+0x94>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800864a:	2301      	movs	r3, #1
 800864c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10d      	bne.n	8008670 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	b672      	cpsid	i
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	b662      	cpsie	i
 8008668:	613b      	str	r3, [r7, #16]
}
 800866a:	bf00      	nop
 800866c:	bf00      	nop
 800866e:	e7fd      	b.n	800866c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008670:	697b      	ldr	r3, [r7, #20]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	2000646c 	.word	0x2000646c
 8008680:	08016344 	.word	0x08016344
 8008684:	080087cd 	.word	0x080087cd
 8008688:	20006470 	.word	0x20006470

0800868c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08a      	sub	sp, #40	@ 0x28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800869a:	2300      	movs	r3, #0
 800869c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10d      	bne.n	80086c0 <xTimerGenericCommand+0x34>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a8:	b672      	cpsid	i
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	b662      	cpsie	i
 80086b8:	623b      	str	r3, [r7, #32]
}
 80086ba:	bf00      	nop
 80086bc:	bf00      	nop
 80086be:	e7fd      	b.n	80086bc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086c0:	4b19      	ldr	r3, [pc, #100]	@ (8008728 <xTimerGenericCommand+0x9c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d02a      	beq.n	800871e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	dc18      	bgt.n	800870c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086da:	f7ff fea5 	bl	8008428 <xTaskGetSchedulerState>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d109      	bne.n	80086f8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086e4:	4b10      	ldr	r3, [pc, #64]	@ (8008728 <xTimerGenericCommand+0x9c>)
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	f107 0110 	add.w	r1, r7, #16
 80086ec:	2300      	movs	r3, #0
 80086ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086f0:	f7fe fc1e 	bl	8006f30 <xQueueGenericSend>
 80086f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80086f6:	e012      	b.n	800871e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008728 <xTimerGenericCommand+0x9c>)
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	f107 0110 	add.w	r1, r7, #16
 8008700:	2300      	movs	r3, #0
 8008702:	2200      	movs	r2, #0
 8008704:	f7fe fc14 	bl	8006f30 <xQueueGenericSend>
 8008708:	6278      	str	r0, [r7, #36]	@ 0x24
 800870a:	e008      	b.n	800871e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800870c:	4b06      	ldr	r3, [pc, #24]	@ (8008728 <xTimerGenericCommand+0x9c>)
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	f107 0110 	add.w	r1, r7, #16
 8008714:	2300      	movs	r3, #0
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	f7fe fd14 	bl	8007144 <xQueueGenericSendFromISR>
 800871c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008720:	4618      	mov	r0, r3
 8008722:	3728      	adds	r7, #40	@ 0x28
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	2000646c 	.word	0x2000646c

0800872c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af02      	add	r7, sp, #8
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008736:	4b24      	ldr	r3, [pc, #144]	@ (80087c8 <prvProcessExpiredTimer+0x9c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	3304      	adds	r3, #4
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe fab3 	bl	8006cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d025      	beq.n	80087a4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	18d1      	adds	r1, r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	6978      	ldr	r0, [r7, #20]
 8008766:	f000 f8d7 	bl	8008918 <prvInsertTimerInActiveList>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d022      	beq.n	80087b6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008770:	2300      	movs	r3, #0
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	2300      	movs	r3, #0
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	2100      	movs	r1, #0
 800877a:	6978      	ldr	r0, [r7, #20]
 800877c:	f7ff ff86 	bl	800868c <xTimerGenericCommand>
 8008780:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d116      	bne.n	80087b6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878c:	b672      	cpsid	i
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	b662      	cpsie	i
 800879c:	60fb      	str	r3, [r7, #12]
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	e7fd      	b.n	80087a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087aa:	f023 0301 	bic.w	r3, r3, #1
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	6978      	ldr	r0, [r7, #20]
 80087bc:	4798      	blx	r3
}
 80087be:	bf00      	nop
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20006464 	.word	0x20006464

080087cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087d4:	f107 0308 	add.w	r3, r7, #8
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 f859 	bl	8008890 <prvGetNextExpireTime>
 80087de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4619      	mov	r1, r3
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f805 	bl	80087f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087ea:	f000 f8d7 	bl	800899c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087ee:	bf00      	nop
 80087f0:	e7f0      	b.n	80087d4 <prvTimerTask+0x8>
	...

080087f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087fe:	f7ff fa0d 	bl	8007c1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f866 	bl	80088d8 <prvSampleTimeNow>
 800880c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d130      	bne.n	8008876 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10a      	bne.n	8008830 <prvProcessTimerOrBlockTask+0x3c>
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	429a      	cmp	r2, r3
 8008820:	d806      	bhi.n	8008830 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008822:	f7ff fa09 	bl	8007c38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008826:	68f9      	ldr	r1, [r7, #12]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ff7f 	bl	800872c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800882e:	e024      	b.n	800887a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008836:	4b13      	ldr	r3, [pc, #76]	@ (8008884 <prvProcessTimerOrBlockTask+0x90>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <prvProcessTimerOrBlockTask+0x50>
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <prvProcessTimerOrBlockTask+0x52>
 8008844:	2300      	movs	r3, #0
 8008846:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008848:	4b0f      	ldr	r3, [pc, #60]	@ (8008888 <prvProcessTimerOrBlockTask+0x94>)
 800884a:	6818      	ldr	r0, [r3, #0]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	4619      	mov	r1, r3
 8008856:	f7fe ff3b 	bl	80076d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800885a:	f7ff f9ed 	bl	8007c38 <xTaskResumeAll>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008864:	4b09      	ldr	r3, [pc, #36]	@ (800888c <prvProcessTimerOrBlockTask+0x98>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
}
 8008874:	e001      	b.n	800887a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008876:	f7ff f9df 	bl	8007c38 <xTaskResumeAll>
}
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20006468 	.word	0x20006468
 8008888:	2000646c 	.word	0x2000646c
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008898:	4b0e      	ldr	r3, [pc, #56]	@ (80088d4 <prvGetNextExpireTime+0x44>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <prvGetNextExpireTime+0x16>
 80088a2:	2201      	movs	r2, #1
 80088a4:	e000      	b.n	80088a8 <prvGetNextExpireTime+0x18>
 80088a6:	2200      	movs	r2, #0
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d105      	bne.n	80088c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088b4:	4b07      	ldr	r3, [pc, #28]	@ (80088d4 <prvGetNextExpireTime+0x44>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	e001      	b.n	80088c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088c4:	68fb      	ldr	r3, [r7, #12]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20006464 	.word	0x20006464

080088d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088e0:	f7ff fa4a 	bl	8007d78 <xTaskGetTickCount>
 80088e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008914 <prvSampleTimeNow+0x3c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d205      	bcs.n	80088fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088f0:	f000 f940 	bl	8008b74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	e002      	b.n	8008902 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008902:	4a04      	ldr	r2, [pc, #16]	@ (8008914 <prvSampleTimeNow+0x3c>)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008908:	68fb      	ldr	r3, [r7, #12]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20006474 	.word	0x20006474

08008918 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	429a      	cmp	r2, r3
 800893c:	d812      	bhi.n	8008964 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	1ad2      	subs	r2, r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	429a      	cmp	r2, r3
 800894a:	d302      	bcc.n	8008952 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	e01b      	b.n	800898a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008952:	4b10      	ldr	r3, [pc, #64]	@ (8008994 <prvInsertTimerInActiveList+0x7c>)
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3304      	adds	r3, #4
 800895a:	4619      	mov	r1, r3
 800895c:	4610      	mov	r0, r2
 800895e:	f7fe f96e 	bl	8006c3e <vListInsert>
 8008962:	e012      	b.n	800898a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	429a      	cmp	r2, r3
 800896a:	d206      	bcs.n	800897a <prvInsertTimerInActiveList+0x62>
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d302      	bcc.n	800897a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e007      	b.n	800898a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800897a:	4b07      	ldr	r3, [pc, #28]	@ (8008998 <prvInsertTimerInActiveList+0x80>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3304      	adds	r3, #4
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fe f95a 	bl	8006c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800898a:	697b      	ldr	r3, [r7, #20]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20006468 	.word	0x20006468
 8008998:	20006464 	.word	0x20006464

0800899c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08e      	sub	sp, #56	@ 0x38
 80089a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089a2:	e0d4      	b.n	8008b4e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da1b      	bge.n	80089e2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089aa:	1d3b      	adds	r3, r7, #4
 80089ac:	3304      	adds	r3, #4
 80089ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10d      	bne.n	80089d2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ba:	b672      	cpsid	i
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	b662      	cpsie	i
 80089ca:	61fb      	str	r3, [r7, #28]
}
 80089cc:	bf00      	nop
 80089ce:	bf00      	nop
 80089d0:	e7fd      	b.n	80089ce <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089d8:	6850      	ldr	r0, [r2, #4]
 80089da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089dc:	6892      	ldr	r2, [r2, #8]
 80089de:	4611      	mov	r1, r2
 80089e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f2c0 80b2 	blt.w	8008b4e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d004      	beq.n	8008a00 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f8:	3304      	adds	r3, #4
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe f958 	bl	8006cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a00:	463b      	mov	r3, r7
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff ff68 	bl	80088d8 <prvSampleTimeNow>
 8008a08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b09      	cmp	r3, #9
 8008a0e:	f200 809b 	bhi.w	8008b48 <prvProcessReceivedCommands+0x1ac>
 8008a12:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <prvProcessReceivedCommands+0x7c>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	08008abb 	.word	0x08008abb
 8008a28:	08008acf 	.word	0x08008acf
 8008a2c:	08008b1f 	.word	0x08008b1f
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a41 	.word	0x08008a41
 8008a38:	08008abb 	.word	0x08008abb
 8008a3c:	08008acf 	.word	0x08008acf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a46:	f043 0301 	orr.w	r3, r3, #1
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	18d1      	adds	r1, r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a60:	f7ff ff5a 	bl	8008918 <prvInsertTimerInActiveList>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d070      	beq.n	8008b4c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d065      	beq.n	8008b4c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	441a      	add	r2, r3
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2100      	movs	r1, #0
 8008a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a92:	f7ff fdfb 	bl	800868c <xTimerGenericCommand>
 8008a96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d156      	bne.n	8008b4c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	b672      	cpsid	i
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	b662      	cpsie	i
 8008ab2:	61bb      	str	r3, [r7, #24]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008acc:	e03f      	b.n	8008b4e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ad4:	f043 0301 	orr.w	r3, r3, #1
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008adc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10d      	bne.n	8008b0a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	b672      	cpsid	i
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	b662      	cpsie	i
 8008b02:	617b      	str	r3, [r7, #20]
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	e7fd      	b.n	8008b06 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0c:	699a      	ldr	r2, [r3, #24]
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	18d1      	adds	r1, r2, r3
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b18:	f7ff fefe 	bl	8008918 <prvInsertTimerInActiveList>
					break;
 8008b1c:	e017      	b.n	8008b4e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d103      	bne.n	8008b34 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008b2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b2e:	f000 fbd1 	bl	80092d4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b32:	e00c      	b.n	8008b4e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b3a:	f023 0301 	bic.w	r3, r3, #1
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b46:	e002      	b.n	8008b4e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <prvProcessReceivedCommands+0x1b2>
					break;
 8008b4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b4e:	4b08      	ldr	r3, [pc, #32]	@ (8008b70 <prvProcessReceivedCommands+0x1d4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	1d39      	adds	r1, r7, #4
 8008b54:	2200      	movs	r2, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fb98 	bl	800728c <xQueueReceive>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f47f af20 	bne.w	80089a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	3730      	adds	r7, #48	@ 0x30
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	2000646c 	.word	0x2000646c

08008b74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b7a:	e04b      	b.n	8008c14 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8008c3c <prvSwitchTimerLists+0xc8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b86:	4b2d      	ldr	r3, [pc, #180]	@ (8008c3c <prvSwitchTimerLists+0xc8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3304      	adds	r3, #4
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe f88b 	bl	8006cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ba8:	f003 0304 	and.w	r3, r3, #4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d031      	beq.n	8008c14 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d90e      	bls.n	8008be0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bce:	4b1b      	ldr	r3, [pc, #108]	@ (8008c3c <prvSwitchTimerLists+0xc8>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f7fe f830 	bl	8006c3e <vListInsert>
 8008bde:	e019      	b.n	8008c14 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008be0:	2300      	movs	r3, #0
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	2300      	movs	r3, #0
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	2100      	movs	r1, #0
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7ff fd4e 	bl	800868c <xTimerGenericCommand>
 8008bf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10d      	bne.n	8008c14 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfc:	b672      	cpsid	i
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	b662      	cpsie	i
 8008c0c:	603b      	str	r3, [r7, #0]
}
 8008c0e:	bf00      	nop
 8008c10:	bf00      	nop
 8008c12:	e7fd      	b.n	8008c10 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c14:	4b09      	ldr	r3, [pc, #36]	@ (8008c3c <prvSwitchTimerLists+0xc8>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1ae      	bne.n	8008b7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c1e:	4b07      	ldr	r3, [pc, #28]	@ (8008c3c <prvSwitchTimerLists+0xc8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c24:	4b06      	ldr	r3, [pc, #24]	@ (8008c40 <prvSwitchTimerLists+0xcc>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a04      	ldr	r2, [pc, #16]	@ (8008c3c <prvSwitchTimerLists+0xc8>)
 8008c2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c2c:	4a04      	ldr	r2, [pc, #16]	@ (8008c40 <prvSwitchTimerLists+0xcc>)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	6013      	str	r3, [r2, #0]
}
 8008c32:	bf00      	nop
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20006464 	.word	0x20006464
 8008c40:	20006468 	.word	0x20006468

08008c44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c4a:	f000 f947 	bl	8008edc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ca4 <prvCheckForValidListAndQueue+0x60>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d120      	bne.n	8008c98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c56:	4814      	ldr	r0, [pc, #80]	@ (8008ca8 <prvCheckForValidListAndQueue+0x64>)
 8008c58:	f7fd ffa0 	bl	8006b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c5c:	4813      	ldr	r0, [pc, #76]	@ (8008cac <prvCheckForValidListAndQueue+0x68>)
 8008c5e:	f7fd ff9d 	bl	8006b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c62:	4b13      	ldr	r3, [pc, #76]	@ (8008cb0 <prvCheckForValidListAndQueue+0x6c>)
 8008c64:	4a10      	ldr	r2, [pc, #64]	@ (8008ca8 <prvCheckForValidListAndQueue+0x64>)
 8008c66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c68:	4b12      	ldr	r3, [pc, #72]	@ (8008cb4 <prvCheckForValidListAndQueue+0x70>)
 8008c6a:	4a10      	ldr	r2, [pc, #64]	@ (8008cac <prvCheckForValidListAndQueue+0x68>)
 8008c6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	4b11      	ldr	r3, [pc, #68]	@ (8008cb8 <prvCheckForValidListAndQueue+0x74>)
 8008c74:	4a11      	ldr	r2, [pc, #68]	@ (8008cbc <prvCheckForValidListAndQueue+0x78>)
 8008c76:	2110      	movs	r1, #16
 8008c78:	200a      	movs	r0, #10
 8008c7a:	f7fe f8af 	bl	8006ddc <xQueueGenericCreateStatic>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4a08      	ldr	r2, [pc, #32]	@ (8008ca4 <prvCheckForValidListAndQueue+0x60>)
 8008c82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c84:	4b07      	ldr	r3, [pc, #28]	@ (8008ca4 <prvCheckForValidListAndQueue+0x60>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ca4 <prvCheckForValidListAndQueue+0x60>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	490b      	ldr	r1, [pc, #44]	@ (8008cc0 <prvCheckForValidListAndQueue+0x7c>)
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fcf2 	bl	800767c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c98:	f000 f956 	bl	8008f48 <vPortExitCritical>
}
 8008c9c:	bf00      	nop
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	2000646c 	.word	0x2000646c
 8008ca8:	2000643c 	.word	0x2000643c
 8008cac:	20006450 	.word	0x20006450
 8008cb0:	20006464 	.word	0x20006464
 8008cb4:	20006468 	.word	0x20006468
 8008cb8:	20006518 	.word	0x20006518
 8008cbc:	20006478 	.word	0x20006478
 8008cc0:	0801634c 	.word	0x0801634c

08008cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3b04      	subs	r3, #4
 8008cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f023 0201 	bic.w	r2, r3, #1
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3b04      	subs	r3, #4
 8008cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8008d28 <pxPortInitialiseStack+0x64>)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3b14      	subs	r3, #20
 8008cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3b04      	subs	r3, #4
 8008d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f06f 0202 	mvn.w	r2, #2
 8008d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3b20      	subs	r3, #32
 8008d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	08008d2d 	.word	0x08008d2d

08008d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d36:	4b15      	ldr	r3, [pc, #84]	@ (8008d8c <prvTaskExitError+0x60>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d00d      	beq.n	8008d5c <prvTaskExitError+0x30>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	b672      	cpsid	i
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	b662      	cpsie	i
 8008d54:	60fb      	str	r3, [r7, #12]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <prvTaskExitError+0x2c>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d60:	b672      	cpsid	i
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	b662      	cpsie	i
 8008d70:	60bb      	str	r3, [r7, #8]
}
 8008d72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d74:	bf00      	nop
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0fc      	beq.n	8008d76 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	20000020 	.word	0x20000020

08008d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d90:	4b07      	ldr	r3, [pc, #28]	@ (8008db0 <pxCurrentTCBConst2>)
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	6808      	ldr	r0, [r1, #0]
 8008d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f380 8809 	msr	PSP, r0
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8811 	msr	BASEPRI, r0
 8008daa:	4770      	bx	lr
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst2>:
 8008db0:	20005f3c 	.word	0x20005f3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008db8:	4808      	ldr	r0, [pc, #32]	@ (8008ddc <prvPortStartFirstTask+0x24>)
 8008dba:	6800      	ldr	r0, [r0, #0]
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	f380 8808 	msr	MSP, r0
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8814 	msr	CONTROL, r0
 8008dca:	b662      	cpsie	i
 8008dcc:	b661      	cpsie	f
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	df00      	svc	0
 8008dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dda:	bf00      	nop
 8008ddc:	e000ed08 	.word	0xe000ed08

08008de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008de6:	4b37      	ldr	r3, [pc, #220]	@ (8008ec4 <xPortStartScheduler+0xe4>)
 8008de8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	22ff      	movs	r2, #255	@ 0xff
 8008df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e10:	2207      	movs	r2, #7
 8008e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e14:	e009      	b.n	8008e2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e16:	4b2d      	ldr	r3, [pc, #180]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e32:	2b80      	cmp	r3, #128	@ 0x80
 8008e34:	d0ef      	beq.n	8008e16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e36:	4b25      	ldr	r3, [pc, #148]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f1c3 0307 	rsb	r3, r3, #7
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d00d      	beq.n	8008e5e <xPortStartScheduler+0x7e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	b672      	cpsid	i
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	b662      	cpsie	i
 8008e56:	60bb      	str	r3, [r7, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	021b      	lsls	r3, r3, #8
 8008e64:	4a19      	ldr	r2, [pc, #100]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e68:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e70:	4a16      	ldr	r2, [pc, #88]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e7c:	4b14      	ldr	r3, [pc, #80]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a13      	ldr	r2, [pc, #76]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e88:	4b11      	ldr	r3, [pc, #68]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a10      	ldr	r2, [pc, #64]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e94:	f000 f8dc 	bl	8009050 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e98:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <xPortStartScheduler+0xf4>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e9e:	f000 f8fb 	bl	8009098 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed8 <xPortStartScheduler+0xf8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed8 <xPortStartScheduler+0xf8>)
 8008ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eae:	f7ff ff83 	bl	8008db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008eb2:	f7ff f82d 	bl	8007f10 <vTaskSwitchContext>
	prvTaskExitError();
 8008eb6:	f7ff ff39 	bl	8008d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	e000e400 	.word	0xe000e400
 8008ec8:	20006568 	.word	0x20006568
 8008ecc:	2000656c 	.word	0x2000656c
 8008ed0:	e000ed20 	.word	0xe000ed20
 8008ed4:	20000020 	.word	0x20000020
 8008ed8:	e000ef34 	.word	0xe000ef34

08008edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	b672      	cpsid	i
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	b662      	cpsie	i
 8008ef6:	607b      	str	r3, [r7, #4]
}
 8008ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008efa:	4b11      	ldr	r3, [pc, #68]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	4a0f      	ldr	r2, [pc, #60]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008f02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f04:	4b0e      	ldr	r3, [pc, #56]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d112      	bne.n	8008f32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f44 <vPortEnterCritical+0x68>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00d      	beq.n	8008f32 <vPortEnterCritical+0x56>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	b672      	cpsid	i
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	b662      	cpsie	i
 8008f2a:	603b      	str	r3, [r7, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	e7fd      	b.n	8008f2e <vPortEnterCritical+0x52>
	}
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000020 	.word	0x20000020
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f4e:	4b13      	ldr	r3, [pc, #76]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <vPortExitCritical+0x2a>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	607b      	str	r3, [r7, #4]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008f72:	4b0a      	ldr	r3, [pc, #40]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	4a08      	ldr	r2, [pc, #32]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f7c:	4b07      	ldr	r3, [pc, #28]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <vPortExitCritical+0x48>
 8008f84:	2300      	movs	r3, #0
 8008f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	f383 8811 	msr	BASEPRI, r3
}
 8008f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	20000020 	.word	0x20000020

08008fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fa0:	f3ef 8009 	mrs	r0, PSP
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	4b15      	ldr	r3, [pc, #84]	@ (8009000 <pxCurrentTCBConst>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	f01e 0f10 	tst.w	lr, #16
 8008fb0:	bf08      	it	eq
 8008fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	6010      	str	r0, [r2, #0]
 8008fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008fc4:	b672      	cpsid	i
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	b662      	cpsie	i
 8008fd4:	f7fe ff9c 	bl	8007f10 <vTaskSwitchContext>
 8008fd8:	f04f 0000 	mov.w	r0, #0
 8008fdc:	f380 8811 	msr	BASEPRI, r0
 8008fe0:	bc09      	pop	{r0, r3}
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	6808      	ldr	r0, [r1, #0]
 8008fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fea:	f01e 0f10 	tst.w	lr, #16
 8008fee:	bf08      	it	eq
 8008ff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ff4:	f380 8809 	msr	PSP, r0
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop

08009000 <pxCurrentTCBConst>:
 8009000:	20005f3c 	.word	0x20005f3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop

08009008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	b672      	cpsid	i
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	b662      	cpsie	i
 8009022:	607b      	str	r3, [r7, #4]
}
 8009024:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009026:	f7fe feb7 	bl	8007d98 <xTaskIncrementTick>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <SysTick_Handler+0x44>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	2300      	movs	r3, #0
 800903a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f383 8811 	msr	BASEPRI, r3
}
 8009042:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009054:	4b0b      	ldr	r3, [pc, #44]	@ (8009084 <vPortSetupTimerInterrupt+0x34>)
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800905a:	4b0b      	ldr	r3, [pc, #44]	@ (8009088 <vPortSetupTimerInterrupt+0x38>)
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009060:	4b0a      	ldr	r3, [pc, #40]	@ (800908c <vPortSetupTimerInterrupt+0x3c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a0a      	ldr	r2, [pc, #40]	@ (8009090 <vPortSetupTimerInterrupt+0x40>)
 8009066:	fba2 2303 	umull	r2, r3, r2, r3
 800906a:	099b      	lsrs	r3, r3, #6
 800906c:	4a09      	ldr	r2, [pc, #36]	@ (8009094 <vPortSetupTimerInterrupt+0x44>)
 800906e:	3b01      	subs	r3, #1
 8009070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009072:	4b04      	ldr	r3, [pc, #16]	@ (8009084 <vPortSetupTimerInterrupt+0x34>)
 8009074:	2207      	movs	r2, #7
 8009076:	601a      	str	r2, [r3, #0]
}
 8009078:	bf00      	nop
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	e000e010 	.word	0xe000e010
 8009088:	e000e018 	.word	0xe000e018
 800908c:	20000000 	.word	0x20000000
 8009090:	10624dd3 	.word	0x10624dd3
 8009094:	e000e014 	.word	0xe000e014

08009098 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009098:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090a8 <vPortEnableVFP+0x10>
 800909c:	6801      	ldr	r1, [r0, #0]
 800909e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090a2:	6001      	str	r1, [r0, #0]
 80090a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090a6:	bf00      	nop
 80090a8:	e000ed88 	.word	0xe000ed88

080090ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090b2:	f3ef 8305 	mrs	r3, IPSR
 80090b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	d917      	bls.n	80090ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090be:	4a1a      	ldr	r2, [pc, #104]	@ (8009128 <vPortValidateInterruptPriority+0x7c>)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090c8:	4b18      	ldr	r3, [pc, #96]	@ (800912c <vPortValidateInterruptPriority+0x80>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	7afa      	ldrb	r2, [r7, #11]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d20d      	bcs.n	80090ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	b672      	cpsid	i
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	b662      	cpsie	i
 80090e6:	607b      	str	r3, [r7, #4]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090ee:	4b10      	ldr	r3, [pc, #64]	@ (8009130 <vPortValidateInterruptPriority+0x84>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80090f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009134 <vPortValidateInterruptPriority+0x88>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d90d      	bls.n	800911a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	b672      	cpsid	i
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	b662      	cpsie	i
 8009112:	603b      	str	r3, [r7, #0]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <vPortValidateInterruptPriority+0x6a>
	}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	e000e3f0 	.word	0xe000e3f0
 800912c:	20006568 	.word	0x20006568
 8009130:	e000ed0c 	.word	0xe000ed0c
 8009134:	2000656c 	.word	0x2000656c

08009138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	@ 0x28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009140:	2300      	movs	r3, #0
 8009142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009144:	f7fe fd6a 	bl	8007c1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009148:	4b5d      	ldr	r3, [pc, #372]	@ (80092c0 <pvPortMalloc+0x188>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009150:	f000 f920 	bl	8009394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009154:	4b5b      	ldr	r3, [pc, #364]	@ (80092c4 <pvPortMalloc+0x18c>)
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4013      	ands	r3, r2
 800915c:	2b00      	cmp	r3, #0
 800915e:	f040 8094 	bne.w	800928a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d020      	beq.n	80091aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009168:	2208      	movs	r2, #8
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4413      	add	r3, r2
 800916e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b00      	cmp	r3, #0
 8009178:	d017      	beq.n	80091aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f023 0307 	bic.w	r3, r3, #7
 8009180:	3308      	adds	r3, #8
 8009182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00d      	beq.n	80091aa <pvPortMalloc+0x72>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	b672      	cpsid	i
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	b662      	cpsie	i
 80091a2:	617b      	str	r3, [r7, #20]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d06c      	beq.n	800928a <pvPortMalloc+0x152>
 80091b0:	4b45      	ldr	r3, [pc, #276]	@ (80092c8 <pvPortMalloc+0x190>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d867      	bhi.n	800928a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091ba:	4b44      	ldr	r3, [pc, #272]	@ (80092cc <pvPortMalloc+0x194>)
 80091bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091be:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <pvPortMalloc+0x194>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091c4:	e004      	b.n	80091d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d903      	bls.n	80091e2 <pvPortMalloc+0xaa>
 80091da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f1      	bne.n	80091c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091e2:	4b37      	ldr	r3, [pc, #220]	@ (80092c0 <pvPortMalloc+0x188>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d04e      	beq.n	800928a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2208      	movs	r2, #8
 80091f2:	4413      	add	r3, r2
 80091f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	1ad2      	subs	r2, r2, r3
 8009206:	2308      	movs	r3, #8
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	429a      	cmp	r2, r3
 800920c:	d922      	bls.n	8009254 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800920e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00d      	beq.n	800923c <pvPortMalloc+0x104>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	b672      	cpsid	i
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	b662      	cpsie	i
 8009234:	613b      	str	r3, [r7, #16]
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	1ad2      	subs	r2, r2, r3
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800924e:	69b8      	ldr	r0, [r7, #24]
 8009250:	f000 f902 	bl	8009458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009254:	4b1c      	ldr	r3, [pc, #112]	@ (80092c8 <pvPortMalloc+0x190>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	4a1a      	ldr	r2, [pc, #104]	@ (80092c8 <pvPortMalloc+0x190>)
 8009260:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009262:	4b19      	ldr	r3, [pc, #100]	@ (80092c8 <pvPortMalloc+0x190>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b1a      	ldr	r3, [pc, #104]	@ (80092d0 <pvPortMalloc+0x198>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d203      	bcs.n	8009276 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800926e:	4b16      	ldr	r3, [pc, #88]	@ (80092c8 <pvPortMalloc+0x190>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a17      	ldr	r2, [pc, #92]	@ (80092d0 <pvPortMalloc+0x198>)
 8009274:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	4b12      	ldr	r3, [pc, #72]	@ (80092c4 <pvPortMalloc+0x18c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	431a      	orrs	r2, r3
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800928a:	f7fe fcd5 	bl	8007c38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00d      	beq.n	80092b4 <pvPortMalloc+0x17c>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	b672      	cpsid	i
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	b662      	cpsie	i
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <pvPortMalloc+0x178>
	return pvReturn;
 80092b4:	69fb      	ldr	r3, [r7, #28]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3728      	adds	r7, #40	@ 0x28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	2000a178 	.word	0x2000a178
 80092c4:	2000a184 	.word	0x2000a184
 80092c8:	2000a17c 	.word	0x2000a17c
 80092cc:	2000a170 	.word	0x2000a170
 80092d0:	2000a180 	.word	0x2000a180

080092d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d04e      	beq.n	8009384 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092e6:	2308      	movs	r3, #8
 80092e8:	425b      	negs	r3, r3
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4413      	add	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	4b24      	ldr	r3, [pc, #144]	@ (800938c <vPortFree+0xb8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4013      	ands	r3, r2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10d      	bne.n	800931e <vPortFree+0x4a>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	60fb      	str	r3, [r7, #12]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <vPortFree+0x6e>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	60bb      	str	r3, [r7, #8]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	4b11      	ldr	r3, [pc, #68]	@ (800938c <vPortFree+0xb8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d019      	beq.n	8009384 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d115      	bne.n	8009384 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	4b0b      	ldr	r3, [pc, #44]	@ (800938c <vPortFree+0xb8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	43db      	mvns	r3, r3
 8009362:	401a      	ands	r2, r3
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009368:	f7fe fc58 	bl	8007c1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	4b07      	ldr	r3, [pc, #28]	@ (8009390 <vPortFree+0xbc>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4413      	add	r3, r2
 8009376:	4a06      	ldr	r2, [pc, #24]	@ (8009390 <vPortFree+0xbc>)
 8009378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800937a:	6938      	ldr	r0, [r7, #16]
 800937c:	f000 f86c 	bl	8009458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009380:	f7fe fc5a 	bl	8007c38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009384:	bf00      	nop
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	2000a184 	.word	0x2000a184
 8009390:	2000a17c 	.word	0x2000a17c

08009394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800939a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800939e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093a0:	4b27      	ldr	r3, [pc, #156]	@ (8009440 <prvHeapInit+0xac>)
 80093a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00c      	beq.n	80093c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3307      	adds	r3, #7
 80093b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 0307 	bic.w	r3, r3, #7
 80093ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009440 <prvHeapInit+0xac>)
 80093c4:	4413      	add	r3, r2
 80093c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009444 <prvHeapInit+0xb0>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009444 <prvHeapInit+0xb0>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093e0:	2208      	movs	r2, #8
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0307 	bic.w	r3, r3, #7
 80093ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4a15      	ldr	r2, [pc, #84]	@ (8009448 <prvHeapInit+0xb4>)
 80093f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093f6:	4b14      	ldr	r3, [pc, #80]	@ (8009448 <prvHeapInit+0xb4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2200      	movs	r2, #0
 80093fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093fe:	4b12      	ldr	r3, [pc, #72]	@ (8009448 <prvHeapInit+0xb4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <prvHeapInit+0xb4>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	4a0a      	ldr	r2, [pc, #40]	@ (800944c <prvHeapInit+0xb8>)
 8009422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	4a09      	ldr	r2, [pc, #36]	@ (8009450 <prvHeapInit+0xbc>)
 800942a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800942c:	4b09      	ldr	r3, [pc, #36]	@ (8009454 <prvHeapInit+0xc0>)
 800942e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009432:	601a      	str	r2, [r3, #0]
}
 8009434:	bf00      	nop
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	20006570 	.word	0x20006570
 8009444:	2000a170 	.word	0x2000a170
 8009448:	2000a178 	.word	0x2000a178
 800944c:	2000a180 	.word	0x2000a180
 8009450:	2000a17c 	.word	0x2000a17c
 8009454:	2000a184 	.word	0x2000a184

08009458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009460:	4b28      	ldr	r3, [pc, #160]	@ (8009504 <prvInsertBlockIntoFreeList+0xac>)
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e002      	b.n	800946c <prvInsertBlockIntoFreeList+0x14>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	429a      	cmp	r2, r3
 8009474:	d8f7      	bhi.n	8009466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	429a      	cmp	r2, r3
 8009486:	d108      	bne.n	800949a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	441a      	add	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d118      	bne.n	80094e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b15      	ldr	r3, [pc, #84]	@ (8009508 <prvInsertBlockIntoFreeList+0xb0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d00d      	beq.n	80094d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	441a      	add	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	e008      	b.n	80094e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009508 <prvInsertBlockIntoFreeList+0xb0>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	e003      	b.n	80094e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d002      	beq.n	80094f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	2000a170 	.word	0x2000a170
 8009508:	2000a178 	.word	0x2000a178

0800950c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	b21a      	sxth	r2, r3
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	0a1b      	lsrs	r3, r3, #8
 8009522:	b29b      	uxth	r3, r3
 8009524:	b21b      	sxth	r3, r3
 8009526:	4313      	orrs	r3, r2
 8009528:	b21b      	sxth	r3, r3
 800952a:	b29b      	uxth	r3, r3
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	061a      	lsls	r2, r3, #24
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	0a1b      	lsrs	r3, r3, #8
 8009552:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	0e1b      	lsrs	r3, r3, #24
 800955c:	4313      	orrs	r3, r2
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009574:	f000 f8d4 	bl	8009720 <mem_init>
  memp_init();
 8009578:	f000 fbd6 	bl	8009d28 <memp_init>
  pbuf_init();
  netif_init();
 800957c:	f000 fcd4 	bl	8009f28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009580:	f007 f808 	bl	8010594 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009584:	f001 fda6 	bl	800b0d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009588:	f006 ffbc 	bl	8010504 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800959e:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <ptr_to_mem+0x20>)
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	88fb      	ldrh	r3, [r7, #6]
 80095a4:	4413      	add	r3, r2
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	2000a1a0 	.word	0x2000a1a0

080095b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80095c0:	4b05      	ldr	r3, [pc, #20]	@ (80095d8 <mem_to_ptr+0x20>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	b29b      	uxth	r3, r3
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	2000a1a0 	.word	0x2000a1a0

080095dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80095dc:	b590      	push	{r4, r7, lr}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80095e4:	4b45      	ldr	r3, [pc, #276]	@ (80096fc <plug_holes+0x120>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d206      	bcs.n	80095fc <plug_holes+0x20>
 80095ee:	4b44      	ldr	r3, [pc, #272]	@ (8009700 <plug_holes+0x124>)
 80095f0:	f240 12df 	movw	r2, #479	@ 0x1df
 80095f4:	4943      	ldr	r1, [pc, #268]	@ (8009704 <plug_holes+0x128>)
 80095f6:	4844      	ldr	r0, [pc, #272]	@ (8009708 <plug_holes+0x12c>)
 80095f8:	f00b fefe 	bl	80153f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80095fc:	4b43      	ldr	r3, [pc, #268]	@ (800970c <plug_holes+0x130>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	429a      	cmp	r2, r3
 8009604:	d306      	bcc.n	8009614 <plug_holes+0x38>
 8009606:	4b3e      	ldr	r3, [pc, #248]	@ (8009700 <plug_holes+0x124>)
 8009608:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800960c:	4940      	ldr	r1, [pc, #256]	@ (8009710 <plug_holes+0x134>)
 800960e:	483e      	ldr	r0, [pc, #248]	@ (8009708 <plug_holes+0x12c>)
 8009610:	f00b fef2 	bl	80153f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	791b      	ldrb	r3, [r3, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d006      	beq.n	800962a <plug_holes+0x4e>
 800961c:	4b38      	ldr	r3, [pc, #224]	@ (8009700 <plug_holes+0x124>)
 800961e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009622:	493c      	ldr	r1, [pc, #240]	@ (8009714 <plug_holes+0x138>)
 8009624:	4838      	ldr	r0, [pc, #224]	@ (8009708 <plug_holes+0x12c>)
 8009626:	f00b fee7 	bl	80153f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009632:	d906      	bls.n	8009642 <plug_holes+0x66>
 8009634:	4b32      	ldr	r3, [pc, #200]	@ (8009700 <plug_holes+0x124>)
 8009636:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800963a:	4937      	ldr	r1, [pc, #220]	@ (8009718 <plug_holes+0x13c>)
 800963c:	4832      	ldr	r0, [pc, #200]	@ (8009708 <plug_holes+0x12c>)
 800963e:	f00b fedb 	bl	80153f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	881b      	ldrh	r3, [r3, #0]
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff ffa4 	bl	8009594 <ptr_to_mem>
 800964c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	429a      	cmp	r2, r3
 8009654:	d024      	beq.n	80096a0 <plug_holes+0xc4>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	791b      	ldrb	r3, [r3, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d120      	bne.n	80096a0 <plug_holes+0xc4>
 800965e:	4b2b      	ldr	r3, [pc, #172]	@ (800970c <plug_holes+0x130>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	429a      	cmp	r2, r3
 8009666:	d01b      	beq.n	80096a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009668:	4b2c      	ldr	r3, [pc, #176]	@ (800971c <plug_holes+0x140>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	429a      	cmp	r2, r3
 8009670:	d102      	bne.n	8009678 <plug_holes+0x9c>
      lfree = mem;
 8009672:	4a2a      	ldr	r2, [pc, #168]	@ (800971c <plug_holes+0x140>)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	881a      	ldrh	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009688:	d00a      	beq.n	80096a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff ff80 	bl	8009594 <ptr_to_mem>
 8009694:	4604      	mov	r4, r0
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff ff8e 	bl	80095b8 <mem_to_ptr>
 800969c:	4603      	mov	r3, r0
 800969e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	885b      	ldrh	r3, [r3, #2]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff ff75 	bl	8009594 <ptr_to_mem>
 80096aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d01f      	beq.n	80096f4 <plug_holes+0x118>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	791b      	ldrb	r3, [r3, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d11b      	bne.n	80096f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80096bc:	4b17      	ldr	r3, [pc, #92]	@ (800971c <plug_holes+0x140>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d102      	bne.n	80096cc <plug_holes+0xf0>
      lfree = pmem;
 80096c6:	4a15      	ldr	r2, [pc, #84]	@ (800971c <plug_holes+0x140>)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	881a      	ldrh	r2, [r3, #0]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80096dc:	d00a      	beq.n	80096f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff ff56 	bl	8009594 <ptr_to_mem>
 80096e8:	4604      	mov	r4, r0
 80096ea:	68b8      	ldr	r0, [r7, #8]
 80096ec:	f7ff ff64 	bl	80095b8 <mem_to_ptr>
 80096f0:	4603      	mov	r3, r0
 80096f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd90      	pop	{r4, r7, pc}
 80096fc:	2000a1a0 	.word	0x2000a1a0
 8009700:	08016354 	.word	0x08016354
 8009704:	08016384 	.word	0x08016384
 8009708:	0801639c 	.word	0x0801639c
 800970c:	2000a1a4 	.word	0x2000a1a4
 8009710:	080163c4 	.word	0x080163c4
 8009714:	080163e0 	.word	0x080163e0
 8009718:	080163fc 	.word	0x080163fc
 800971c:	2000a1a8 	.word	0x2000a1a8

08009720 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009726:	4b16      	ldr	r3, [pc, #88]	@ (8009780 <mem_init+0x60>)
 8009728:	4a16      	ldr	r2, [pc, #88]	@ (8009784 <mem_init+0x64>)
 800972a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800972c:	4b14      	ldr	r3, [pc, #80]	@ (8009780 <mem_init+0x60>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8009738:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009746:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800974a:	f7ff ff23 	bl	8009594 <ptr_to_mem>
 800974e:	4603      	mov	r3, r0
 8009750:	4a0d      	ldr	r2, [pc, #52]	@ (8009788 <mem_init+0x68>)
 8009752:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009754:	4b0c      	ldr	r3, [pc, #48]	@ (8009788 <mem_init+0x68>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2201      	movs	r2, #1
 800975a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800975c:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <mem_init+0x68>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8009764:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009766:	4b08      	ldr	r3, [pc, #32]	@ (8009788 <mem_init+0x68>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800976e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009770:	4b03      	ldr	r3, [pc, #12]	@ (8009780 <mem_init+0x60>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a05      	ldr	r2, [pc, #20]	@ (800978c <mem_init+0x6c>)
 8009776:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	2000a1a0 	.word	0x2000a1a0
 8009784:	2007c140 	.word	0x2007c140
 8009788:	2000a1a4 	.word	0x2000a1a4
 800978c:	2000a1a8 	.word	0x2000a1a8

08009790 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff ff0d 	bl	80095b8 <mem_to_ptr>
 800979e:	4603      	mov	r3, r0
 80097a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff fef4 	bl	8009594 <ptr_to_mem>
 80097ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	885b      	ldrh	r3, [r3, #2]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff feee 	bl	8009594 <ptr_to_mem>
 80097b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80097c2:	d818      	bhi.n	80097f6 <mem_link_valid+0x66>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	885b      	ldrh	r3, [r3, #2]
 80097c8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80097cc:	d813      	bhi.n	80097f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80097d2:	8afa      	ldrh	r2, [r7, #22]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d004      	beq.n	80097e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	8afa      	ldrh	r2, [r7, #22]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d109      	bne.n	80097f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80097e2:	4b08      	ldr	r3, [pc, #32]	@ (8009804 <mem_link_valid+0x74>)
 80097e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d006      	beq.n	80097fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	885b      	ldrh	r3, [r3, #2]
 80097f0:	8afa      	ldrh	r2, [r7, #22]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d001      	beq.n	80097fa <mem_link_valid+0x6a>
    return 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	e000      	b.n	80097fc <mem_link_valid+0x6c>
  }
  return 1;
 80097fa:	2301      	movs	r3, #1
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	2000a1a4 	.word	0x2000a1a4

08009808 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d04c      	beq.n	80098b0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f003 0303 	and.w	r3, r3, #3
 800981c:	2b00      	cmp	r3, #0
 800981e:	d007      	beq.n	8009830 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009820:	4b25      	ldr	r3, [pc, #148]	@ (80098b8 <mem_free+0xb0>)
 8009822:	f240 2273 	movw	r2, #627	@ 0x273
 8009826:	4925      	ldr	r1, [pc, #148]	@ (80098bc <mem_free+0xb4>)
 8009828:	4825      	ldr	r0, [pc, #148]	@ (80098c0 <mem_free+0xb8>)
 800982a:	f00b fde5 	bl	80153f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800982e:	e040      	b.n	80098b2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3b08      	subs	r3, #8
 8009834:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009836:	4b23      	ldr	r3, [pc, #140]	@ (80098c4 <mem_free+0xbc>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	429a      	cmp	r2, r3
 800983e:	d306      	bcc.n	800984e <mem_free+0x46>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f103 020c 	add.w	r2, r3, #12
 8009846:	4b20      	ldr	r3, [pc, #128]	@ (80098c8 <mem_free+0xc0>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	d907      	bls.n	800985e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800984e:	4b1a      	ldr	r3, [pc, #104]	@ (80098b8 <mem_free+0xb0>)
 8009850:	f240 227f 	movw	r2, #639	@ 0x27f
 8009854:	491d      	ldr	r1, [pc, #116]	@ (80098cc <mem_free+0xc4>)
 8009856:	481a      	ldr	r0, [pc, #104]	@ (80098c0 <mem_free+0xb8>)
 8009858:	f00b fdce 	bl	80153f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800985c:	e029      	b.n	80098b2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	791b      	ldrb	r3, [r3, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d107      	bne.n	8009876 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009866:	4b14      	ldr	r3, [pc, #80]	@ (80098b8 <mem_free+0xb0>)
 8009868:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800986c:	4918      	ldr	r1, [pc, #96]	@ (80098d0 <mem_free+0xc8>)
 800986e:	4814      	ldr	r0, [pc, #80]	@ (80098c0 <mem_free+0xb8>)
 8009870:	f00b fdc2 	bl	80153f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009874:	e01d      	b.n	80098b2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff ff8a 	bl	8009790 <mem_link_valid>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d107      	bne.n	8009892 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009882:	4b0d      	ldr	r3, [pc, #52]	@ (80098b8 <mem_free+0xb0>)
 8009884:	f240 2295 	movw	r2, #661	@ 0x295
 8009888:	4912      	ldr	r1, [pc, #72]	@ (80098d4 <mem_free+0xcc>)
 800988a:	480d      	ldr	r0, [pc, #52]	@ (80098c0 <mem_free+0xb8>)
 800988c:	f00b fdb4 	bl	80153f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009890:	e00f      	b.n	80098b2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009898:	4b0f      	ldr	r3, [pc, #60]	@ (80098d8 <mem_free+0xd0>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d202      	bcs.n	80098a8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80098a2:	4a0d      	ldr	r2, [pc, #52]	@ (80098d8 <mem_free+0xd0>)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f7ff fe97 	bl	80095dc <plug_holes>
 80098ae:	e000      	b.n	80098b2 <mem_free+0xaa>
    return;
 80098b0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	08016354 	.word	0x08016354
 80098bc:	08016428 	.word	0x08016428
 80098c0:	0801639c 	.word	0x0801639c
 80098c4:	2000a1a0 	.word	0x2000a1a0
 80098c8:	2000a1a4 	.word	0x2000a1a4
 80098cc:	0801644c 	.word	0x0801644c
 80098d0:	08016468 	.word	0x08016468
 80098d4:	08016490 	.word	0x08016490
 80098d8:	2000a1a8 	.word	0x2000a1a8

080098dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80098e8:	887b      	ldrh	r3, [r7, #2]
 80098ea:	3303      	adds	r3, #3
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f023 0303 	bic.w	r3, r3, #3
 80098f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80098f4:	8bfb      	ldrh	r3, [r7, #30]
 80098f6:	2b0b      	cmp	r3, #11
 80098f8:	d801      	bhi.n	80098fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80098fa:	230c      	movs	r3, #12
 80098fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80098fe:	8bfb      	ldrh	r3, [r7, #30]
 8009900:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009904:	d803      	bhi.n	800990e <mem_trim+0x32>
 8009906:	8bfa      	ldrh	r2, [r7, #30]
 8009908:	887b      	ldrh	r3, [r7, #2]
 800990a:	429a      	cmp	r2, r3
 800990c:	d201      	bcs.n	8009912 <mem_trim+0x36>
    return NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	e0cc      	b.n	8009aac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009912:	4b68      	ldr	r3, [pc, #416]	@ (8009ab4 <mem_trim+0x1d8>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	429a      	cmp	r2, r3
 800991a:	d304      	bcc.n	8009926 <mem_trim+0x4a>
 800991c:	4b66      	ldr	r3, [pc, #408]	@ (8009ab8 <mem_trim+0x1dc>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	429a      	cmp	r2, r3
 8009924:	d306      	bcc.n	8009934 <mem_trim+0x58>
 8009926:	4b65      	ldr	r3, [pc, #404]	@ (8009abc <mem_trim+0x1e0>)
 8009928:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800992c:	4964      	ldr	r1, [pc, #400]	@ (8009ac0 <mem_trim+0x1e4>)
 800992e:	4865      	ldr	r0, [pc, #404]	@ (8009ac4 <mem_trim+0x1e8>)
 8009930:	f00b fd62 	bl	80153f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009934:	4b5f      	ldr	r3, [pc, #380]	@ (8009ab4 <mem_trim+0x1d8>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	429a      	cmp	r2, r3
 800993c:	d304      	bcc.n	8009948 <mem_trim+0x6c>
 800993e:	4b5e      	ldr	r3, [pc, #376]	@ (8009ab8 <mem_trim+0x1dc>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d301      	bcc.n	800994c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	e0af      	b.n	8009aac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3b08      	subs	r3, #8
 8009950:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009952:	69b8      	ldr	r0, [r7, #24]
 8009954:	f7ff fe30 	bl	80095b8 <mem_to_ptr>
 8009958:	4603      	mov	r3, r0
 800995a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	881a      	ldrh	r2, [r3, #0]
 8009960:	8afb      	ldrh	r3, [r7, #22]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	b29b      	uxth	r3, r3
 8009966:	3b08      	subs	r3, #8
 8009968:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800996a:	8bfa      	ldrh	r2, [r7, #30]
 800996c:	8abb      	ldrh	r3, [r7, #20]
 800996e:	429a      	cmp	r2, r3
 8009970:	d906      	bls.n	8009980 <mem_trim+0xa4>
 8009972:	4b52      	ldr	r3, [pc, #328]	@ (8009abc <mem_trim+0x1e0>)
 8009974:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009978:	4953      	ldr	r1, [pc, #332]	@ (8009ac8 <mem_trim+0x1ec>)
 800997a:	4852      	ldr	r0, [pc, #328]	@ (8009ac4 <mem_trim+0x1e8>)
 800997c:	f00b fd3c 	bl	80153f8 <iprintf>
  if (newsize > size) {
 8009980:	8bfa      	ldrh	r2, [r7, #30]
 8009982:	8abb      	ldrh	r3, [r7, #20]
 8009984:	429a      	cmp	r2, r3
 8009986:	d901      	bls.n	800998c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009988:	2300      	movs	r3, #0
 800998a:	e08f      	b.n	8009aac <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800998c:	8bfa      	ldrh	r2, [r7, #30]
 800998e:	8abb      	ldrh	r3, [r7, #20]
 8009990:	429a      	cmp	r2, r3
 8009992:	d101      	bne.n	8009998 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	e089      	b.n	8009aac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fdf9 	bl	8009594 <ptr_to_mem>
 80099a2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	791b      	ldrb	r3, [r3, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d13f      	bne.n	8009a2c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80099b4:	d106      	bne.n	80099c4 <mem_trim+0xe8>
 80099b6:	4b41      	ldr	r3, [pc, #260]	@ (8009abc <mem_trim+0x1e0>)
 80099b8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80099bc:	4943      	ldr	r1, [pc, #268]	@ (8009acc <mem_trim+0x1f0>)
 80099be:	4841      	ldr	r0, [pc, #260]	@ (8009ac4 <mem_trim+0x1e8>)
 80099c0:	f00b fd1a 	bl	80153f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80099ca:	8afa      	ldrh	r2, [r7, #22]
 80099cc:	8bfb      	ldrh	r3, [r7, #30]
 80099ce:	4413      	add	r3, r2
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3308      	adds	r3, #8
 80099d4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80099d6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ad0 <mem_trim+0x1f4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d106      	bne.n	80099ee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80099e0:	89fb      	ldrh	r3, [r7, #14]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fdd6 	bl	8009594 <ptr_to_mem>
 80099e8:	4603      	mov	r3, r0
 80099ea:	4a39      	ldr	r2, [pc, #228]	@ (8009ad0 <mem_trim+0x1f4>)
 80099ec:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80099ee:	89fb      	ldrh	r3, [r7, #14]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fdcf 	bl	8009594 <ptr_to_mem>
 80099f6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	2200      	movs	r2, #0
 80099fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	89ba      	ldrh	r2, [r7, #12]
 8009a02:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	8afa      	ldrh	r2, [r7, #22]
 8009a08:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	89fa      	ldrh	r2, [r7, #14]
 8009a0e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009a18:	d047      	beq.n	8009aaa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7ff fdb8 	bl	8009594 <ptr_to_mem>
 8009a24:	4602      	mov	r2, r0
 8009a26:	89fb      	ldrh	r3, [r7, #14]
 8009a28:	8053      	strh	r3, [r2, #2]
 8009a2a:	e03e      	b.n	8009aaa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009a2c:	8bfb      	ldrh	r3, [r7, #30]
 8009a2e:	f103 0214 	add.w	r2, r3, #20
 8009a32:	8abb      	ldrh	r3, [r7, #20]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d838      	bhi.n	8009aaa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009a38:	8afa      	ldrh	r2, [r7, #22]
 8009a3a:	8bfb      	ldrh	r3, [r7, #30]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	3308      	adds	r3, #8
 8009a42:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009a4c:	d106      	bne.n	8009a5c <mem_trim+0x180>
 8009a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8009abc <mem_trim+0x1e0>)
 8009a50:	f240 3216 	movw	r2, #790	@ 0x316
 8009a54:	491d      	ldr	r1, [pc, #116]	@ (8009acc <mem_trim+0x1f0>)
 8009a56:	481b      	ldr	r0, [pc, #108]	@ (8009ac4 <mem_trim+0x1e8>)
 8009a58:	f00b fcce 	bl	80153f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009a5c:	89fb      	ldrh	r3, [r7, #14]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff fd98 	bl	8009594 <ptr_to_mem>
 8009a64:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009a66:	4b1a      	ldr	r3, [pc, #104]	@ (8009ad0 <mem_trim+0x1f4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d202      	bcs.n	8009a76 <mem_trim+0x19a>
      lfree = mem2;
 8009a70:	4a17      	ldr	r2, [pc, #92]	@ (8009ad0 <mem_trim+0x1f4>)
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	881a      	ldrh	r2, [r3, #0]
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	8afa      	ldrh	r2, [r7, #22]
 8009a88:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	89fa      	ldrh	r2, [r7, #14]
 8009a8e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009a98:	d007      	beq.n	8009aaa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff fd78 	bl	8009594 <ptr_to_mem>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	89fb      	ldrh	r3, [r7, #14]
 8009aa8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009aaa:	687b      	ldr	r3, [r7, #4]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3720      	adds	r7, #32
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	2000a1a0 	.word	0x2000a1a0
 8009ab8:	2000a1a4 	.word	0x2000a1a4
 8009abc:	08016354 	.word	0x08016354
 8009ac0:	080164c4 	.word	0x080164c4
 8009ac4:	0801639c 	.word	0x0801639c
 8009ac8:	080164dc 	.word	0x080164dc
 8009acc:	080164fc 	.word	0x080164fc
 8009ad0:	2000a1a8 	.word	0x2000a1a8

08009ad4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	4603      	mov	r3, r0
 8009adc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009ade:	88fb      	ldrh	r3, [r7, #6]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <mem_malloc+0x14>
    return NULL;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e0d9      	b.n	8009c9c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	3303      	adds	r3, #3
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	f023 0303 	bic.w	r3, r3, #3
 8009af2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009af4:	8bbb      	ldrh	r3, [r7, #28]
 8009af6:	2b0b      	cmp	r3, #11
 8009af8:	d801      	bhi.n	8009afe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009afa:	230c      	movs	r3, #12
 8009afc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009afe:	8bbb      	ldrh	r3, [r7, #28]
 8009b00:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009b04:	d803      	bhi.n	8009b0e <mem_malloc+0x3a>
 8009b06:	8bba      	ldrh	r2, [r7, #28]
 8009b08:	88fb      	ldrh	r3, [r7, #6]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d201      	bcs.n	8009b12 <mem_malloc+0x3e>
    return NULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	e0c4      	b.n	8009c9c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009b12:	4b64      	ldr	r3, [pc, #400]	@ (8009ca4 <mem_malloc+0x1d0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fd4e 	bl	80095b8 <mem_to_ptr>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	83fb      	strh	r3, [r7, #30]
 8009b20:	e0b4      	b.n	8009c8c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009b22:	8bfb      	ldrh	r3, [r7, #30]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7ff fd35 	bl	8009594 <ptr_to_mem>
 8009b2a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	791b      	ldrb	r3, [r3, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f040 80a4 	bne.w	8009c7e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	8bfb      	ldrh	r3, [r7, #30]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	f1a3 0208 	sub.w	r2, r3, #8
 8009b44:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009b46:	429a      	cmp	r2, r3
 8009b48:	f0c0 8099 	bcc.w	8009c7e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	461a      	mov	r2, r3
 8009b52:	8bfb      	ldrh	r3, [r7, #30]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	f1a3 0208 	sub.w	r2, r3, #8
 8009b5a:	8bbb      	ldrh	r3, [r7, #28]
 8009b5c:	3314      	adds	r3, #20
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d333      	bcc.n	8009bca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009b62:	8bfa      	ldrh	r2, [r7, #30]
 8009b64:	8bbb      	ldrh	r3, [r7, #28]
 8009b66:	4413      	add	r3, r2
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	3308      	adds	r3, #8
 8009b6c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009b6e:	8a7b      	ldrh	r3, [r7, #18]
 8009b70:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009b74:	d106      	bne.n	8009b84 <mem_malloc+0xb0>
 8009b76:	4b4c      	ldr	r3, [pc, #304]	@ (8009ca8 <mem_malloc+0x1d4>)
 8009b78:	f240 3287 	movw	r2, #903	@ 0x387
 8009b7c:	494b      	ldr	r1, [pc, #300]	@ (8009cac <mem_malloc+0x1d8>)
 8009b7e:	484c      	ldr	r0, [pc, #304]	@ (8009cb0 <mem_malloc+0x1dc>)
 8009b80:	f00b fc3a 	bl	80153f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009b84:	8a7b      	ldrh	r3, [r7, #18]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fd04 	bl	8009594 <ptr_to_mem>
 8009b8c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	881a      	ldrh	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8bfa      	ldrh	r2, [r7, #30]
 8009ba0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	8a7a      	ldrh	r2, [r7, #18]
 8009ba6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2201      	movs	r2, #1
 8009bac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009bb6:	d00b      	beq.n	8009bd0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff fce9 	bl	8009594 <ptr_to_mem>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	8a7b      	ldrh	r3, [r7, #18]
 8009bc6:	8053      	strh	r3, [r2, #2]
 8009bc8:	e002      	b.n	8009bd0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009bd0:	4b34      	ldr	r3, [pc, #208]	@ (8009ca4 <mem_malloc+0x1d0>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d127      	bne.n	8009c2a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009bda:	4b32      	ldr	r3, [pc, #200]	@ (8009ca4 <mem_malloc+0x1d0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009be0:	e005      	b.n	8009bee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff fcd4 	bl	8009594 <ptr_to_mem>
 8009bec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	791b      	ldrb	r3, [r3, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <mem_malloc+0x12c>
 8009bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8009cb4 <mem_malloc+0x1e0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d1f0      	bne.n	8009be2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8009c00:	4a28      	ldr	r2, [pc, #160]	@ (8009ca4 <mem_malloc+0x1d0>)
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009c06:	4b27      	ldr	r3, [pc, #156]	@ (8009ca4 <mem_malloc+0x1d0>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8009cb4 <mem_malloc+0x1e0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d00b      	beq.n	8009c2a <mem_malloc+0x156>
 8009c12:	4b24      	ldr	r3, [pc, #144]	@ (8009ca4 <mem_malloc+0x1d0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	791b      	ldrb	r3, [r3, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d006      	beq.n	8009c2a <mem_malloc+0x156>
 8009c1c:	4b22      	ldr	r3, [pc, #136]	@ (8009ca8 <mem_malloc+0x1d4>)
 8009c1e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009c22:	4925      	ldr	r1, [pc, #148]	@ (8009cb8 <mem_malloc+0x1e4>)
 8009c24:	4822      	ldr	r0, [pc, #136]	@ (8009cb0 <mem_malloc+0x1dc>)
 8009c26:	f00b fbe7 	bl	80153f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c2a:	8bba      	ldrh	r2, [r7, #28]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	4413      	add	r3, r2
 8009c30:	3308      	adds	r3, #8
 8009c32:	4a20      	ldr	r2, [pc, #128]	@ (8009cb4 <mem_malloc+0x1e0>)
 8009c34:	6812      	ldr	r2, [r2, #0]
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d906      	bls.n	8009c48 <mem_malloc+0x174>
 8009c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca8 <mem_malloc+0x1d4>)
 8009c3c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009c40:	491e      	ldr	r1, [pc, #120]	@ (8009cbc <mem_malloc+0x1e8>)
 8009c42:	481b      	ldr	r0, [pc, #108]	@ (8009cb0 <mem_malloc+0x1dc>)
 8009c44:	f00b fbd8 	bl	80153f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f003 0303 	and.w	r3, r3, #3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d006      	beq.n	8009c60 <mem_malloc+0x18c>
 8009c52:	4b15      	ldr	r3, [pc, #84]	@ (8009ca8 <mem_malloc+0x1d4>)
 8009c54:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009c58:	4919      	ldr	r1, [pc, #100]	@ (8009cc0 <mem_malloc+0x1ec>)
 8009c5a:	4815      	ldr	r0, [pc, #84]	@ (8009cb0 <mem_malloc+0x1dc>)
 8009c5c:	f00b fbcc 	bl	80153f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d006      	beq.n	8009c78 <mem_malloc+0x1a4>
 8009c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca8 <mem_malloc+0x1d4>)
 8009c6c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009c70:	4914      	ldr	r1, [pc, #80]	@ (8009cc4 <mem_malloc+0x1f0>)
 8009c72:	480f      	ldr	r0, [pc, #60]	@ (8009cb0 <mem_malloc+0x1dc>)
 8009c74:	f00b fbc0 	bl	80153f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	e00e      	b.n	8009c9c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009c7e:	8bfb      	ldrh	r3, [r7, #30]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff fc87 	bl	8009594 <ptr_to_mem>
 8009c86:	4603      	mov	r3, r0
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c8c:	8bfa      	ldrh	r2, [r7, #30]
 8009c8e:	8bbb      	ldrh	r3, [r7, #28]
 8009c90:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 8009c94:	429a      	cmp	r2, r3
 8009c96:	f4ff af44 	bcc.w	8009b22 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	2000a1a8 	.word	0x2000a1a8
 8009ca8:	08016354 	.word	0x08016354
 8009cac:	080164fc 	.word	0x080164fc
 8009cb0:	0801639c 	.word	0x0801639c
 8009cb4:	2000a1a4 	.word	0x2000a1a4
 8009cb8:	08016510 	.word	0x08016510
 8009cbc:	0801652c 	.word	0x0801652c
 8009cc0:	0801655c 	.word	0x0801655c
 8009cc4:	0801658c 	.word	0x0801658c

08009cc8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	3303      	adds	r3, #3
 8009cde:	f023 0303 	bic.w	r3, r3, #3
 8009ce2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	e011      	b.n	8009d0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4413      	add	r3, r2
 8009d06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	60fb      	str	r3, [r7, #12]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	885b      	ldrh	r3, [r3, #2]
 8009d12:	461a      	mov	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4293      	cmp	r3, r2
 8009d18:	dbe7      	blt.n	8009cea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d2e:	2300      	movs	r3, #0
 8009d30:	80fb      	strh	r3, [r7, #6]
 8009d32:	e009      	b.n	8009d48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009d34:	88fb      	ldrh	r3, [r7, #6]
 8009d36:	4a08      	ldr	r2, [pc, #32]	@ (8009d58 <memp_init+0x30>)
 8009d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7ff ffc3 	bl	8009cc8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d42:	88fb      	ldrh	r3, [r7, #6]
 8009d44:	3301      	adds	r3, #1
 8009d46:	80fb      	strh	r3, [r7, #6]
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	2b08      	cmp	r3, #8
 8009d4c:	d9f2      	bls.n	8009d34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	08019134 	.word	0x08019134

08009d5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d012      	beq.n	8009d98 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	6812      	ldr	r2, [r2, #0]
 8009d7a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f003 0303 	and.w	r3, r3, #3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d006      	beq.n	8009d94 <do_memp_malloc_pool+0x38>
 8009d86:	4b07      	ldr	r3, [pc, #28]	@ (8009da4 <do_memp_malloc_pool+0x48>)
 8009d88:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009d8c:	4906      	ldr	r1, [pc, #24]	@ (8009da8 <do_memp_malloc_pool+0x4c>)
 8009d8e:	4807      	ldr	r0, [pc, #28]	@ (8009dac <do_memp_malloc_pool+0x50>)
 8009d90:	f00b fb32 	bl	80153f8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	e000      	b.n	8009d9a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	080165b0 	.word	0x080165b0
 8009da8:	080165e0 	.word	0x080165e0
 8009dac:	08016604 	.word	0x08016604

08009db0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <memp_malloc_pool+0x1c>
 8009dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009de8 <memp_malloc_pool+0x38>)
 8009dc0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8009dc4:	4909      	ldr	r1, [pc, #36]	@ (8009dec <memp_malloc_pool+0x3c>)
 8009dc6:	480a      	ldr	r0, [pc, #40]	@ (8009df0 <memp_malloc_pool+0x40>)
 8009dc8:	f00b fb16 	bl	80153f8 <iprintf>
  if (desc == NULL) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <memp_malloc_pool+0x26>
    return NULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e003      	b.n	8009dde <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff ffc0 	bl	8009d5c <do_memp_malloc_pool>
 8009ddc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	080165b0 	.word	0x080165b0
 8009dec:	0801662c 	.word	0x0801662c
 8009df0:	08016604 	.word	0x08016604

08009df4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	2b08      	cmp	r3, #8
 8009e02:	d908      	bls.n	8009e16 <memp_malloc+0x22>
 8009e04:	4b0a      	ldr	r3, [pc, #40]	@ (8009e30 <memp_malloc+0x3c>)
 8009e06:	f240 1257 	movw	r2, #343	@ 0x157
 8009e0a:	490a      	ldr	r1, [pc, #40]	@ (8009e34 <memp_malloc+0x40>)
 8009e0c:	480a      	ldr	r0, [pc, #40]	@ (8009e38 <memp_malloc+0x44>)
 8009e0e:	f00b faf3 	bl	80153f8 <iprintf>
 8009e12:	2300      	movs	r3, #0
 8009e14:	e008      	b.n	8009e28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	4a08      	ldr	r2, [pc, #32]	@ (8009e3c <memp_malloc+0x48>)
 8009e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7ff ff9c 	bl	8009d5c <do_memp_malloc_pool>
 8009e24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009e26:	68fb      	ldr	r3, [r7, #12]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	080165b0 	.word	0x080165b0
 8009e34:	08016640 	.word	0x08016640
 8009e38:	08016604 	.word	0x08016604
 8009e3c:	08019134 	.word	0x08019134

08009e40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	f003 0303 	and.w	r3, r3, #3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d006      	beq.n	8009e62 <do_memp_free_pool+0x22>
 8009e54:	4b0a      	ldr	r3, [pc, #40]	@ (8009e80 <do_memp_free_pool+0x40>)
 8009e56:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8009e5a:	490a      	ldr	r1, [pc, #40]	@ (8009e84 <do_memp_free_pool+0x44>)
 8009e5c:	480a      	ldr	r0, [pc, #40]	@ (8009e88 <do_memp_free_pool+0x48>)
 8009e5e:	f00b facb 	bl	80153f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	080165b0 	.word	0x080165b0
 8009e84:	08016660 	.word	0x08016660
 8009e88:	08016604 	.word	0x08016604

08009e8c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d106      	bne.n	8009eaa <memp_free_pool+0x1e>
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec8 <memp_free_pool+0x3c>)
 8009e9e:	f240 1295 	movw	r2, #405	@ 0x195
 8009ea2:	490a      	ldr	r1, [pc, #40]	@ (8009ecc <memp_free_pool+0x40>)
 8009ea4:	480a      	ldr	r0, [pc, #40]	@ (8009ed0 <memp_free_pool+0x44>)
 8009ea6:	f00b faa7 	bl	80153f8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d007      	beq.n	8009ec0 <memp_free_pool+0x34>
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d004      	beq.n	8009ec0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff ffc1 	bl	8009e40 <do_memp_free_pool>
 8009ebe:	e000      	b.n	8009ec2 <memp_free_pool+0x36>
    return;
 8009ec0:	bf00      	nop
}
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	080165b0 	.word	0x080165b0
 8009ecc:	0801662c 	.word	0x0801662c
 8009ed0:	08016604 	.word	0x08016604

08009ed4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	6039      	str	r1, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	2b08      	cmp	r3, #8
 8009ee4:	d907      	bls.n	8009ef6 <memp_free+0x22>
 8009ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8009f18 <memp_free+0x44>)
 8009ee8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8009eec:	490b      	ldr	r1, [pc, #44]	@ (8009f1c <memp_free+0x48>)
 8009eee:	480c      	ldr	r0, [pc, #48]	@ (8009f20 <memp_free+0x4c>)
 8009ef0:	f00b fa82 	bl	80153f8 <iprintf>
 8009ef4:	e00c      	b.n	8009f10 <memp_free+0x3c>

  if (mem == NULL) {
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d008      	beq.n	8009f0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	4a09      	ldr	r2, [pc, #36]	@ (8009f24 <memp_free+0x50>)
 8009f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff ff9a 	bl	8009e40 <do_memp_free_pool>
 8009f0c:	e000      	b.n	8009f10 <memp_free+0x3c>
    return;
 8009f0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	080165b0 	.word	0x080165b0
 8009f1c:	08016680 	.word	0x08016680
 8009f20:	08016604 	.word	0x08016604
 8009f24:	08019134 	.word	0x08019134

08009f28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009f2c:	bf00      	nop
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
	...

08009f38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d108      	bne.n	8009f5e <netif_add+0x26>
 8009f4c:	4b5b      	ldr	r3, [pc, #364]	@ (800a0bc <netif_add+0x184>)
 8009f4e:	f240 1227 	movw	r2, #295	@ 0x127
 8009f52:	495b      	ldr	r1, [pc, #364]	@ (800a0c0 <netif_add+0x188>)
 8009f54:	485b      	ldr	r0, [pc, #364]	@ (800a0c4 <netif_add+0x18c>)
 8009f56:	f00b fa4f 	bl	80153f8 <iprintf>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	e0a9      	b.n	800a0b2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d108      	bne.n	8009f76 <netif_add+0x3e>
 8009f64:	4b55      	ldr	r3, [pc, #340]	@ (800a0bc <netif_add+0x184>)
 8009f66:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8009f6a:	4957      	ldr	r1, [pc, #348]	@ (800a0c8 <netif_add+0x190>)
 8009f6c:	4855      	ldr	r0, [pc, #340]	@ (800a0c4 <netif_add+0x18c>)
 8009f6e:	f00b fa43 	bl	80153f8 <iprintf>
 8009f72:	2300      	movs	r3, #0
 8009f74:	e09d      	b.n	800a0b2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009f7c:	4b53      	ldr	r3, [pc, #332]	@ (800a0cc <netif_add+0x194>)
 8009f7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009f86:	4b51      	ldr	r3, [pc, #324]	@ (800a0cc <netif_add+0x194>)
 8009f88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009f90:	4b4e      	ldr	r3, [pc, #312]	@ (800a0cc <netif_add+0x194>)
 8009f92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4a49      	ldr	r2, [pc, #292]	@ (800a0d0 <netif_add+0x198>)
 8009faa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3324      	adds	r3, #36	@ 0x24
 8009fbe:	2204      	movs	r2, #4
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f00b fa7d 	bl	80154c2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6a3a      	ldr	r2, [r7, #32]
 8009fd2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009fd4:	4b3f      	ldr	r3, [pc, #252]	@ (800a0d4 <netif_add+0x19c>)
 8009fd6:	781a      	ldrb	r2, [r3, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fe2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	68b9      	ldr	r1, [r7, #8]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 f914 	bl	800a218 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	4798      	blx	r3
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <netif_add+0xc8>
    return NULL;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e058      	b.n	800a0b2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a006:	2bff      	cmp	r3, #255	@ 0xff
 800a008:	d103      	bne.n	800a012 <netif_add+0xda>
        netif->num = 0;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a016:	4b30      	ldr	r3, [pc, #192]	@ (800a0d8 <netif_add+0x1a0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	e02b      	b.n	800a076 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	429a      	cmp	r2, r3
 800a024:	d106      	bne.n	800a034 <netif_add+0xfc>
 800a026:	4b25      	ldr	r3, [pc, #148]	@ (800a0bc <netif_add+0x184>)
 800a028:	f240 128b 	movw	r2, #395	@ 0x18b
 800a02c:	492b      	ldr	r1, [pc, #172]	@ (800a0dc <netif_add+0x1a4>)
 800a02e:	4825      	ldr	r0, [pc, #148]	@ (800a0c4 <netif_add+0x18c>)
 800a030:	f00b f9e2 	bl	80153f8 <iprintf>
        num_netifs++;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	3301      	adds	r3, #1
 800a038:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	2bff      	cmp	r3, #255	@ 0xff
 800a03e:	dd06      	ble.n	800a04e <netif_add+0x116>
 800a040:	4b1e      	ldr	r3, [pc, #120]	@ (800a0bc <netif_add+0x184>)
 800a042:	f240 128d 	movw	r2, #397	@ 0x18d
 800a046:	4926      	ldr	r1, [pc, #152]	@ (800a0e0 <netif_add+0x1a8>)
 800a048:	481e      	ldr	r0, [pc, #120]	@ (800a0c4 <netif_add+0x18c>)
 800a04a:	f00b f9d5 	bl	80153f8 <iprintf>
        if (netif2->num == netif->num) {
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d108      	bne.n	800a070 <netif_add+0x138>
          netif->num++;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a064:	3301      	adds	r3, #1
 800a066:	b2da      	uxtb	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800a06e:	e005      	b.n	800a07c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1d0      	bne.n	800a01e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1be      	bne.n	800a000 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a088:	2bfe      	cmp	r3, #254	@ 0xfe
 800a08a:	d103      	bne.n	800a094 <netif_add+0x15c>
    netif_num = 0;
 800a08c:	4b11      	ldr	r3, [pc, #68]	@ (800a0d4 <netif_add+0x19c>)
 800a08e:	2200      	movs	r2, #0
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	e006      	b.n	800a0a2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a09a:	3301      	adds	r3, #1
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <netif_add+0x19c>)
 800a0a0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d8 <netif_add+0x1a0>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a0aa:	4a0b      	ldr	r2, [pc, #44]	@ (800a0d8 <netif_add+0x1a0>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0801669c 	.word	0x0801669c
 800a0c0:	08016730 	.word	0x08016730
 800a0c4:	080166ec 	.word	0x080166ec
 800a0c8:	0801674c 	.word	0x0801674c
 800a0cc:	080191a8 	.word	0x080191a8
 800a0d0:	0800a4fb 	.word	0x0800a4fb
 800a0d4:	2000d0c0 	.word	0x2000d0c0
 800a0d8:	2000d0b8 	.word	0x2000d0b8
 800a0dc:	08016770 	.word	0x08016770
 800a0e0:	08016784 	.word	0x08016784

0800a0e4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f002 fb39 	bl	800c768 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f006 fed7 	bl	8010eac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a0fe:	bf00      	nop
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <netif_do_set_ipaddr+0x20>
 800a11a:	4b1d      	ldr	r3, [pc, #116]	@ (800a190 <netif_do_set_ipaddr+0x88>)
 800a11c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800a120:	491c      	ldr	r1, [pc, #112]	@ (800a194 <netif_do_set_ipaddr+0x8c>)
 800a122:	481d      	ldr	r0, [pc, #116]	@ (800a198 <netif_do_set_ipaddr+0x90>)
 800a124:	f00b f968 	bl	80153f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <netif_do_set_ipaddr+0x34>
 800a12e:	4b18      	ldr	r3, [pc, #96]	@ (800a190 <netif_do_set_ipaddr+0x88>)
 800a130:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800a134:	4917      	ldr	r1, [pc, #92]	@ (800a194 <netif_do_set_ipaddr+0x8c>)
 800a136:	4818      	ldr	r0, [pc, #96]	@ (800a198 <netif_do_set_ipaddr+0x90>)
 800a138:	f00b f95e 	bl	80153f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3304      	adds	r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	429a      	cmp	r2, r3
 800a148:	d01c      	beq.n	800a184 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3304      	adds	r3, #4
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a15a:	f107 0314 	add.w	r3, r7, #20
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff ffbf 	bl	800a0e4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <netif_do_set_ipaddr+0x6a>
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	e000      	b.n	800a174 <netif_do_set_ipaddr+0x6c>
 800a172:	2300      	movs	r3, #0
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a178:	2101      	movs	r1, #1
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 f8d2 	bl	800a324 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	0801669c 	.word	0x0801669c
 800a194:	080167b4 	.word	0x080167b4
 800a198:	080166ec 	.word	0x080166ec

0800a19c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3308      	adds	r3, #8
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d00a      	beq.n	800a1cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <netif_do_set_netmask+0x26>
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	e000      	b.n	800a1c4 <netif_do_set_netmask+0x28>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e000      	b.n	800a1ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	330c      	adds	r3, #12
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d00a      	beq.n	800a20a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <netif_do_set_gw+0x26>
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	e000      	b.n	800a202 <netif_do_set_gw+0x28>
 800a200:	2300      	movs	r3, #0
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a206:	2301      	movs	r3, #1
 800a208:	e000      	b.n	800a20c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a234:	4b1c      	ldr	r3, [pc, #112]	@ (800a2a8 <netif_set_addr+0x90>)
 800a236:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a23e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2a8 <netif_set_addr+0x90>)
 800a240:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a248:	4b17      	ldr	r3, [pc, #92]	@ (800a2a8 <netif_set_addr+0x90>)
 800a24a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <netif_set_addr+0x42>
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <netif_set_addr+0x46>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <netif_set_addr+0x48>
 800a25e:	2300      	movs	r3, #0
 800a260:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d006      	beq.n	800a276 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a268:	f107 0310 	add.w	r3, r7, #16
 800a26c:	461a      	mov	r2, r3
 800a26e:	68b9      	ldr	r1, [r7, #8]
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7ff ff49 	bl	800a108 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a276:	69fa      	ldr	r2, [r7, #28]
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f7ff ff8e 	bl	800a19c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a280:	69ba      	ldr	r2, [r7, #24]
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f7ff ffa8 	bl	800a1da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d106      	bne.n	800a29e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a290:	f107 0310 	add.w	r3, r7, #16
 800a294:	461a      	mov	r2, r3
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f7ff ff35 	bl	800a108 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a29e:	bf00      	nop
 800a2a0:	3720      	adds	r7, #32
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	080191a8 	.word	0x080191a8

0800a2ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a2b4:	4a04      	ldr	r2, [pc, #16]	@ (800a2c8 <netif_set_default+0x1c>)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a2ba:	bf00      	nop
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	2000d0bc 	.word	0x2000d0bc

0800a2cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d107      	bne.n	800a2ea <netif_set_up+0x1e>
 800a2da:	4b0f      	ldr	r3, [pc, #60]	@ (800a318 <netif_set_up+0x4c>)
 800a2dc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800a2e0:	490e      	ldr	r1, [pc, #56]	@ (800a31c <netif_set_up+0x50>)
 800a2e2:	480f      	ldr	r0, [pc, #60]	@ (800a320 <netif_set_up+0x54>)
 800a2e4:	f00b f888 	bl	80153f8 <iprintf>
 800a2e8:	e013      	b.n	800a312 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10c      	bne.n	800a312 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a2fe:	f043 0301 	orr.w	r3, r3, #1
 800a302:	b2da      	uxtb	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a30a:	2103      	movs	r1, #3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f809 	bl	800a324 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0801669c 	.word	0x0801669c
 800a31c:	08016824 	.word	0x08016824
 800a320:	080166ec 	.word	0x080166ec

0800a324 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d106      	bne.n	800a344 <netif_issue_reports+0x20>
 800a336:	4b18      	ldr	r3, [pc, #96]	@ (800a398 <netif_issue_reports+0x74>)
 800a338:	f240 326d 	movw	r2, #877	@ 0x36d
 800a33c:	4917      	ldr	r1, [pc, #92]	@ (800a39c <netif_issue_reports+0x78>)
 800a33e:	4818      	ldr	r0, [pc, #96]	@ (800a3a0 <netif_issue_reports+0x7c>)
 800a340:	f00b f85a 	bl	80153f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d01e      	beq.n	800a390 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a358:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d017      	beq.n	800a390 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d013      	beq.n	800a392 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	3304      	adds	r3, #4
 800a36e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00e      	beq.n	800a392 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a37a:	f003 0308 	and.w	r3, r3, #8
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d007      	beq.n	800a392 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3304      	adds	r3, #4
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f009 fb8b 	bl	8013aa4 <etharp_request>
 800a38e:	e000      	b.n	800a392 <netif_issue_reports+0x6e>
    return;
 800a390:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	0801669c 	.word	0x0801669c
 800a39c:	08016840 	.word	0x08016840
 800a3a0:	080166ec 	.word	0x080166ec

0800a3a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d107      	bne.n	800a3c2 <netif_set_down+0x1e>
 800a3b2:	4b12      	ldr	r3, [pc, #72]	@ (800a3fc <netif_set_down+0x58>)
 800a3b4:	f240 329b 	movw	r2, #923	@ 0x39b
 800a3b8:	4911      	ldr	r1, [pc, #68]	@ (800a400 <netif_set_down+0x5c>)
 800a3ba:	4812      	ldr	r0, [pc, #72]	@ (800a404 <netif_set_down+0x60>)
 800a3bc:	f00b f81c 	bl	80153f8 <iprintf>
 800a3c0:	e019      	b.n	800a3f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d012      	beq.n	800a3f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a3d6:	f023 0301 	bic.w	r3, r3, #1
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a3e8:	f003 0308 	and.w	r3, r3, #8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f008 ff11 	bl	8013218 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	0801669c 	.word	0x0801669c
 800a400:	08016864 	.word	0x08016864
 800a404:	080166ec 	.word	0x080166ec

0800a408 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d107      	bne.n	800a426 <netif_set_link_up+0x1e>
 800a416:	4b15      	ldr	r3, [pc, #84]	@ (800a46c <netif_set_link_up+0x64>)
 800a418:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800a41c:	4914      	ldr	r1, [pc, #80]	@ (800a470 <netif_set_link_up+0x68>)
 800a41e:	4815      	ldr	r0, [pc, #84]	@ (800a474 <netif_set_link_up+0x6c>)
 800a420:	f00a ffea 	bl	80153f8 <iprintf>
 800a424:	e01e      	b.n	800a464 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d117      	bne.n	800a464 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a43a:	f043 0304 	orr.w	r3, r3, #4
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f007 f95c 	bl	8011704 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a44c:	2103      	movs	r1, #3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff ff68 	bl	800a324 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <netif_set_link_up+0x5c>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	0801669c 	.word	0x0801669c
 800a470:	08016884 	.word	0x08016884
 800a474:	080166ec 	.word	0x080166ec

0800a478 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d107      	bne.n	800a496 <netif_set_link_down+0x1e>
 800a486:	4b11      	ldr	r3, [pc, #68]	@ (800a4cc <netif_set_link_down+0x54>)
 800a488:	f240 4206 	movw	r2, #1030	@ 0x406
 800a48c:	4910      	ldr	r1, [pc, #64]	@ (800a4d0 <netif_set_link_down+0x58>)
 800a48e:	4811      	ldr	r0, [pc, #68]	@ (800a4d4 <netif_set_link_down+0x5c>)
 800a490:	f00a ffb2 	bl	80153f8 <iprintf>
 800a494:	e017      	b.n	800a4c6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d010      	beq.n	800a4c6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4aa:	f023 0304 	bic.w	r3, r3, #4
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <netif_set_link_down+0x4e>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	0801669c 	.word	0x0801669c
 800a4d0:	080168a8 	.word	0x080168a8
 800a4d4:	080166ec 	.word	0x080166ec

0800a4d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	61da      	str	r2, [r3, #28]
  }
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a506:	f06f 030b 	mvn.w	r3, #11
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
	...

0800a518 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d013      	beq.n	800a550 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a528:	4b0d      	ldr	r3, [pc, #52]	@ (800a560 <netif_get_by_index+0x48>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	e00c      	b.n	800a54a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a536:	3301      	adds	r3, #1
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	79fa      	ldrb	r2, [r7, #7]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d101      	bne.n	800a544 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	e006      	b.n	800a552 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1ef      	bne.n	800a530 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	2000d0b8 	.word	0x2000d0b8

0800a564 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a568:	4b03      	ldr	r3, [pc, #12]	@ (800a578 <pbuf_pool_is_empty+0x14>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a56e:	bf00      	nop
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	2000d0c1 	.word	0x2000d0c1

0800a57c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	4611      	mov	r1, r2
 800a588:	461a      	mov	r2, r3
 800a58a:	460b      	mov	r3, r1
 800a58c:	80fb      	strh	r3, [r7, #6]
 800a58e:	4613      	mov	r3, r2
 800a590:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	88fa      	ldrh	r2, [r7, #6]
 800a5a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	88ba      	ldrh	r2, [r7, #4]
 800a5a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a5aa:	8b3b      	ldrh	r3, [r7, #24]
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	7f3a      	ldrb	r2, [r7, #28]
 800a5b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	73da      	strb	r2, [r3, #15]
}
 800a5c4:	bf00      	nop
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08c      	sub	sp, #48	@ 0x30
 800a5d4:	af02      	add	r7, sp, #8
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	71fb      	strb	r3, [r7, #7]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	80bb      	strh	r3, [r7, #4]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a5e6:	887b      	ldrh	r3, [r7, #2]
 800a5e8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a5ec:	d07f      	beq.n	800a6ee <pbuf_alloc+0x11e>
 800a5ee:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a5f2:	f300 80c8 	bgt.w	800a786 <pbuf_alloc+0x1b6>
 800a5f6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a5fa:	d010      	beq.n	800a61e <pbuf_alloc+0x4e>
 800a5fc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a600:	f300 80c1 	bgt.w	800a786 <pbuf_alloc+0x1b6>
 800a604:	2b01      	cmp	r3, #1
 800a606:	d002      	beq.n	800a60e <pbuf_alloc+0x3e>
 800a608:	2b41      	cmp	r3, #65	@ 0x41
 800a60a:	f040 80bc 	bne.w	800a786 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a60e:	887a      	ldrh	r2, [r7, #2]
 800a610:	88bb      	ldrh	r3, [r7, #4]
 800a612:	4619      	mov	r1, r3
 800a614:	2000      	movs	r0, #0
 800a616:	f000 f8d1 	bl	800a7bc <pbuf_alloc_reference>
 800a61a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800a61c:	e0bd      	b.n	800a79a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a626:	88bb      	ldrh	r3, [r7, #4]
 800a628:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a62a:	2008      	movs	r0, #8
 800a62c:	f7ff fbe2 	bl	8009df4 <memp_malloc>
 800a630:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d109      	bne.n	800a64c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a638:	f7ff ff94 	bl	800a564 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d002      	beq.n	800a648 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a642:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a644:	f000 faa8 	bl	800ab98 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a648:	2300      	movs	r3, #0
 800a64a:	e0a7      	b.n	800a79c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a64c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a64e:	3303      	adds	r3, #3
 800a650:	b29b      	uxth	r3, r3
 800a652:	f023 0303 	bic.w	r3, r3, #3
 800a656:	b29b      	uxth	r3, r3
 800a658:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	8b7a      	ldrh	r2, [r7, #26]
 800a660:	4293      	cmp	r3, r2
 800a662:	bf28      	it	cs
 800a664:	4613      	movcs	r3, r2
 800a666:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a668:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a66a:	3310      	adds	r3, #16
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4413      	add	r3, r2
 800a670:	3303      	adds	r3, #3
 800a672:	f023 0303 	bic.w	r3, r3, #3
 800a676:	4618      	mov	r0, r3
 800a678:	89f9      	ldrh	r1, [r7, #14]
 800a67a:	8b7a      	ldrh	r2, [r7, #26]
 800a67c:	2300      	movs	r3, #0
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	887b      	ldrh	r3, [r7, #2]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	460b      	mov	r3, r1
 800a686:	4601      	mov	r1, r0
 800a688:	6938      	ldr	r0, [r7, #16]
 800a68a:	f7ff ff77 	bl	800a57c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f003 0303 	and.w	r3, r3, #3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d006      	beq.n	800a6a8 <pbuf_alloc+0xd8>
 800a69a:	4b42      	ldr	r3, [pc, #264]	@ (800a7a4 <pbuf_alloc+0x1d4>)
 800a69c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a6a0:	4941      	ldr	r1, [pc, #260]	@ (800a7a8 <pbuf_alloc+0x1d8>)
 800a6a2:	4842      	ldr	r0, [pc, #264]	@ (800a7ac <pbuf_alloc+0x1dc>)
 800a6a4:	f00a fea8 	bl	80153f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a6a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a6aa:	3303      	adds	r3, #3
 800a6ac:	f023 0303 	bic.w	r3, r3, #3
 800a6b0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800a6b4:	d106      	bne.n	800a6c4 <pbuf_alloc+0xf4>
 800a6b6:	4b3b      	ldr	r3, [pc, #236]	@ (800a7a4 <pbuf_alloc+0x1d4>)
 800a6b8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800a6bc:	493c      	ldr	r1, [pc, #240]	@ (800a7b0 <pbuf_alloc+0x1e0>)
 800a6be:	483b      	ldr	r0, [pc, #236]	@ (800a7ac <pbuf_alloc+0x1dc>)
 800a6c0:	f00a fe9a 	bl	80153f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d102      	bne.n	800a6d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6ce:	e002      	b.n	800a6d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a6da:	8b7a      	ldrh	r2, [r7, #26]
 800a6dc:	89fb      	ldrh	r3, [r7, #14]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800a6e6:	8b7b      	ldrh	r3, [r7, #26]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d19e      	bne.n	800a62a <pbuf_alloc+0x5a>
      break;
 800a6ec:	e055      	b.n	800a79a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a6ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a6f0:	3303      	adds	r3, #3
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	88bb      	ldrh	r3, [r7, #4]
 800a6fc:	3303      	adds	r3, #3
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	f023 0303 	bic.w	r3, r3, #3
 800a704:	b29b      	uxth	r3, r3
 800a706:	4413      	add	r3, r2
 800a708:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a70a:	8b3b      	ldrh	r3, [r7, #24]
 800a70c:	3310      	adds	r3, #16
 800a70e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a710:	8b3a      	ldrh	r2, [r7, #24]
 800a712:	88bb      	ldrh	r3, [r7, #4]
 800a714:	3303      	adds	r3, #3
 800a716:	f023 0303 	bic.w	r3, r3, #3
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d306      	bcc.n	800a72c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a71e:	8afa      	ldrh	r2, [r7, #22]
 800a720:	88bb      	ldrh	r3, [r7, #4]
 800a722:	3303      	adds	r3, #3
 800a724:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a728:	429a      	cmp	r2, r3
 800a72a:	d201      	bcs.n	800a730 <pbuf_alloc+0x160>
        return NULL;
 800a72c:	2300      	movs	r3, #0
 800a72e:	e035      	b.n	800a79c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a730:	8afb      	ldrh	r3, [r7, #22]
 800a732:	4618      	mov	r0, r3
 800a734:	f7ff f9ce 	bl	8009ad4 <mem_malloc>
 800a738:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <pbuf_alloc+0x174>
        return NULL;
 800a740:	2300      	movs	r3, #0
 800a742:	e02b      	b.n	800a79c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a744:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a746:	3310      	adds	r3, #16
 800a748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a74a:	4413      	add	r3, r2
 800a74c:	3303      	adds	r3, #3
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	4618      	mov	r0, r3
 800a754:	88b9      	ldrh	r1, [r7, #4]
 800a756:	88ba      	ldrh	r2, [r7, #4]
 800a758:	2300      	movs	r3, #0
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	887b      	ldrh	r3, [r7, #2]
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	460b      	mov	r3, r1
 800a762:	4601      	mov	r1, r0
 800a764:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a766:	f7ff ff09 	bl	800a57c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d010      	beq.n	800a798 <pbuf_alloc+0x1c8>
 800a776:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a4 <pbuf_alloc+0x1d4>)
 800a778:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800a77c:	490d      	ldr	r1, [pc, #52]	@ (800a7b4 <pbuf_alloc+0x1e4>)
 800a77e:	480b      	ldr	r0, [pc, #44]	@ (800a7ac <pbuf_alloc+0x1dc>)
 800a780:	f00a fe3a 	bl	80153f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a784:	e008      	b.n	800a798 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a786:	4b07      	ldr	r3, [pc, #28]	@ (800a7a4 <pbuf_alloc+0x1d4>)
 800a788:	f240 1227 	movw	r2, #295	@ 0x127
 800a78c:	490a      	ldr	r1, [pc, #40]	@ (800a7b8 <pbuf_alloc+0x1e8>)
 800a78e:	4807      	ldr	r0, [pc, #28]	@ (800a7ac <pbuf_alloc+0x1dc>)
 800a790:	f00a fe32 	bl	80153f8 <iprintf>
      return NULL;
 800a794:	2300      	movs	r3, #0
 800a796:	e001      	b.n	800a79c <pbuf_alloc+0x1cc>
      break;
 800a798:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3728      	adds	r7, #40	@ 0x28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	080168cc 	.word	0x080168cc
 800a7a8:	080168fc 	.word	0x080168fc
 800a7ac:	0801692c 	.word	0x0801692c
 800a7b0:	08016954 	.word	0x08016954
 800a7b4:	08016988 	.word	0x08016988
 800a7b8:	080169b4 	.word	0x080169b4

0800a7bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af02      	add	r7, sp, #8
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	807b      	strh	r3, [r7, #2]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a7cc:	883b      	ldrh	r3, [r7, #0]
 800a7ce:	2b41      	cmp	r3, #65	@ 0x41
 800a7d0:	d009      	beq.n	800a7e6 <pbuf_alloc_reference+0x2a>
 800a7d2:	883b      	ldrh	r3, [r7, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d006      	beq.n	800a7e6 <pbuf_alloc_reference+0x2a>
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a818 <pbuf_alloc_reference+0x5c>)
 800a7da:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800a7de:	490f      	ldr	r1, [pc, #60]	@ (800a81c <pbuf_alloc_reference+0x60>)
 800a7e0:	480f      	ldr	r0, [pc, #60]	@ (800a820 <pbuf_alloc_reference+0x64>)
 800a7e2:	f00a fe09 	bl	80153f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a7e6:	2007      	movs	r0, #7
 800a7e8:	f7ff fb04 	bl	8009df4 <memp_malloc>
 800a7ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	e00b      	b.n	800a810 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a7f8:	8879      	ldrh	r1, [r7, #2]
 800a7fa:	887a      	ldrh	r2, [r7, #2]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	883b      	ldrh	r3, [r7, #0]
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	460b      	mov	r3, r1
 800a806:	6879      	ldr	r1, [r7, #4]
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f7ff feb7 	bl	800a57c <pbuf_init_alloced_pbuf>
  return p;
 800a80e:	68fb      	ldr	r3, [r7, #12]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	080168cc 	.word	0x080168cc
 800a81c:	080169d0 	.word	0x080169d0
 800a820:	0801692c 	.word	0x0801692c

0800a824 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af02      	add	r7, sp, #8
 800a82a:	607b      	str	r3, [r7, #4]
 800a82c:	4603      	mov	r3, r0
 800a82e:	73fb      	strb	r3, [r7, #15]
 800a830:	460b      	mov	r3, r1
 800a832:	81bb      	strh	r3, [r7, #12]
 800a834:	4613      	mov	r3, r2
 800a836:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a83c:	8a7b      	ldrh	r3, [r7, #18]
 800a83e:	3303      	adds	r3, #3
 800a840:	f023 0203 	bic.w	r2, r3, #3
 800a844:	89bb      	ldrh	r3, [r7, #12]
 800a846:	441a      	add	r2, r3
 800a848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d901      	bls.n	800a852 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	e018      	b.n	800a884 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a852:	6a3b      	ldr	r3, [r7, #32]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d007      	beq.n	800a868 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a858:	8a7b      	ldrh	r3, [r7, #18]
 800a85a:	3303      	adds	r3, #3
 800a85c:	f023 0303 	bic.w	r3, r3, #3
 800a860:	6a3a      	ldr	r2, [r7, #32]
 800a862:	4413      	add	r3, r2
 800a864:	617b      	str	r3, [r7, #20]
 800a866:	e001      	b.n	800a86c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a868:	2300      	movs	r3, #0
 800a86a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	89b9      	ldrh	r1, [r7, #12]
 800a870:	89ba      	ldrh	r2, [r7, #12]
 800a872:	2302      	movs	r3, #2
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	897b      	ldrh	r3, [r7, #10]
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	460b      	mov	r3, r1
 800a87c:	6979      	ldr	r1, [r7, #20]
 800a87e:	f7ff fe7d 	bl	800a57c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a882:	687b      	ldr	r3, [r7, #4]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d106      	bne.n	800a8ac <pbuf_realloc+0x20>
 800a89e:	4b3a      	ldr	r3, [pc, #232]	@ (800a988 <pbuf_realloc+0xfc>)
 800a8a0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800a8a4:	4939      	ldr	r1, [pc, #228]	@ (800a98c <pbuf_realloc+0x100>)
 800a8a6:	483a      	ldr	r0, [pc, #232]	@ (800a990 <pbuf_realloc+0x104>)
 800a8a8:	f00a fda6 	bl	80153f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	891b      	ldrh	r3, [r3, #8]
 800a8b0:	887a      	ldrh	r2, [r7, #2]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d263      	bcs.n	800a97e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	891a      	ldrh	r2, [r3, #8]
 800a8ba:	887b      	ldrh	r3, [r7, #2]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a8c0:	887b      	ldrh	r3, [r7, #2]
 800a8c2:	817b      	strh	r3, [r7, #10]
  q = p;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a8c8:	e018      	b.n	800a8fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	895b      	ldrh	r3, [r3, #10]
 800a8ce:	897a      	ldrh	r2, [r7, #10]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	891a      	ldrh	r2, [r3, #8]
 800a8d8:	893b      	ldrh	r3, [r7, #8]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d106      	bne.n	800a8fc <pbuf_realloc+0x70>
 800a8ee:	4b26      	ldr	r3, [pc, #152]	@ (800a988 <pbuf_realloc+0xfc>)
 800a8f0:	f240 12af 	movw	r2, #431	@ 0x1af
 800a8f4:	4927      	ldr	r1, [pc, #156]	@ (800a994 <pbuf_realloc+0x108>)
 800a8f6:	4826      	ldr	r0, [pc, #152]	@ (800a990 <pbuf_realloc+0x104>)
 800a8f8:	f00a fd7e 	bl	80153f8 <iprintf>
  while (rem_len > q->len) {
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	895b      	ldrh	r3, [r3, #10]
 800a900:	897a      	ldrh	r2, [r7, #10]
 800a902:	429a      	cmp	r2, r3
 800a904:	d8e1      	bhi.n	800a8ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	7b1b      	ldrb	r3, [r3, #12]
 800a90a:	f003 030f 	and.w	r3, r3, #15
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d121      	bne.n	800a956 <pbuf_realloc+0xca>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	895b      	ldrh	r3, [r3, #10]
 800a916:	897a      	ldrh	r2, [r7, #10]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d01c      	beq.n	800a956 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	7b5b      	ldrb	r3, [r3, #13]
 800a920:	f003 0302 	and.w	r3, r3, #2
 800a924:	2b00      	cmp	r3, #0
 800a926:	d116      	bne.n	800a956 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	b29a      	uxth	r2, r3
 800a932:	897b      	ldrh	r3, [r7, #10]
 800a934:	4413      	add	r3, r2
 800a936:	b29b      	uxth	r3, r3
 800a938:	4619      	mov	r1, r3
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7fe ffce 	bl	80098dc <mem_trim>
 800a940:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d106      	bne.n	800a956 <pbuf_realloc+0xca>
 800a948:	4b0f      	ldr	r3, [pc, #60]	@ (800a988 <pbuf_realloc+0xfc>)
 800a94a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800a94e:	4912      	ldr	r1, [pc, #72]	@ (800a998 <pbuf_realloc+0x10c>)
 800a950:	480f      	ldr	r0, [pc, #60]	@ (800a990 <pbuf_realloc+0x104>)
 800a952:	f00a fd51 	bl	80153f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	897a      	ldrh	r2, [r7, #10]
 800a95a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	895a      	ldrh	r2, [r3, #10]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d004      	beq.n	800a976 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f911 	bl	800ab98 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	e000      	b.n	800a980 <pbuf_realloc+0xf4>
    return;
 800a97e:	bf00      	nop

}
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	080168cc 	.word	0x080168cc
 800a98c:	080169e4 	.word	0x080169e4
 800a990:	0801692c 	.word	0x0801692c
 800a994:	080169fc 	.word	0x080169fc
 800a998:	08016a14 	.word	0x08016a14

0800a99c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <pbuf_add_header_impl+0x22>
 800a9b0:	4b2b      	ldr	r3, [pc, #172]	@ (800aa60 <pbuf_add_header_impl+0xc4>)
 800a9b2:	f240 12df 	movw	r2, #479	@ 0x1df
 800a9b6:	492b      	ldr	r1, [pc, #172]	@ (800aa64 <pbuf_add_header_impl+0xc8>)
 800a9b8:	482b      	ldr	r0, [pc, #172]	@ (800aa68 <pbuf_add_header_impl+0xcc>)
 800a9ba:	f00a fd1d 	bl	80153f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <pbuf_add_header_impl+0x30>
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9ca:	d301      	bcc.n	800a9d0 <pbuf_add_header_impl+0x34>
    return 1;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e043      	b.n	800aa58 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <pbuf_add_header_impl+0x3e>
    return 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	e03e      	b.n	800aa58 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	891a      	ldrh	r2, [r3, #8]
 800a9e2:	8a7b      	ldrh	r3, [r7, #18]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	8a7a      	ldrh	r2, [r7, #18]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d901      	bls.n	800a9f2 <pbuf_add_header_impl+0x56>
    return 1;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e032      	b.n	800aa58 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	7b1b      	ldrb	r3, [r3, #12]
 800a9f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a9f8:	8a3b      	ldrh	r3, [r7, #16]
 800a9fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00c      	beq.n	800aa1c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	425b      	negs	r3, r3
 800aa0a:	4413      	add	r3, r2
 800aa0c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3310      	adds	r3, #16
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d20d      	bcs.n	800aa34 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e01d      	b.n	800aa58 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d006      	beq.n	800aa30 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	425b      	negs	r3, r3
 800aa2a:	4413      	add	r3, r2
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	e001      	b.n	800aa34 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e011      	b.n	800aa58 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	895a      	ldrh	r2, [r3, #10]
 800aa3e:	8a7b      	ldrh	r3, [r7, #18]
 800aa40:	4413      	add	r3, r2
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	891a      	ldrh	r2, [r3, #8]
 800aa4c:	8a7b      	ldrh	r3, [r7, #18]
 800aa4e:	4413      	add	r3, r2
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	811a      	strh	r2, [r3, #8]


  return 0;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3718      	adds	r7, #24
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	080168cc 	.word	0x080168cc
 800aa64:	08016a30 	.word	0x08016a30
 800aa68:	0801692c 	.word	0x0801692c

0800aa6c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800aa76:	2200      	movs	r2, #0
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff ff8e 	bl	800a99c <pbuf_add_header_impl>
 800aa80:	4603      	mov	r3, r0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d106      	bne.n	800aaaa <pbuf_remove_header+0x1e>
 800aa9c:	4b20      	ldr	r3, [pc, #128]	@ (800ab20 <pbuf_remove_header+0x94>)
 800aa9e:	f240 224b 	movw	r2, #587	@ 0x24b
 800aaa2:	4920      	ldr	r1, [pc, #128]	@ (800ab24 <pbuf_remove_header+0x98>)
 800aaa4:	4820      	ldr	r0, [pc, #128]	@ (800ab28 <pbuf_remove_header+0x9c>)
 800aaa6:	f00a fca7 	bl	80153f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <pbuf_remove_header+0x2c>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aab6:	d301      	bcc.n	800aabc <pbuf_remove_header+0x30>
    return 1;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e02c      	b.n	800ab16 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <pbuf_remove_header+0x3a>
    return 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e027      	b.n	800ab16 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	895b      	ldrh	r3, [r3, #10]
 800aace:	89fa      	ldrh	r2, [r7, #14]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d908      	bls.n	800aae6 <pbuf_remove_header+0x5a>
 800aad4:	4b12      	ldr	r3, [pc, #72]	@ (800ab20 <pbuf_remove_header+0x94>)
 800aad6:	f240 2255 	movw	r2, #597	@ 0x255
 800aada:	4914      	ldr	r1, [pc, #80]	@ (800ab2c <pbuf_remove_header+0xa0>)
 800aadc:	4812      	ldr	r0, [pc, #72]	@ (800ab28 <pbuf_remove_header+0x9c>)
 800aade:	f00a fc8b 	bl	80153f8 <iprintf>
 800aae2:	2301      	movs	r3, #1
 800aae4:	e017      	b.n	800ab16 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	441a      	add	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	895a      	ldrh	r2, [r3, #10]
 800aafc:	89fb      	ldrh	r3, [r7, #14]
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	891a      	ldrh	r2, [r3, #8]
 800ab0a:	89fb      	ldrh	r3, [r7, #14]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	080168cc 	.word	0x080168cc
 800ab24:	08016a30 	.word	0x08016a30
 800ab28:	0801692c 	.word	0x0801692c
 800ab2c:	08016a3c 	.word	0x08016a3c

0800ab30 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	807b      	strh	r3, [r7, #2]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ab40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	da08      	bge.n	800ab5a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ab48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab4c:	425b      	negs	r3, r3
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff ff9b 	bl	800aa8c <pbuf_remove_header>
 800ab56:	4603      	mov	r3, r0
 800ab58:	e007      	b.n	800ab6a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ab5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab5e:	787a      	ldrb	r2, [r7, #1]
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7ff ff1a 	bl	800a99c <pbuf_add_header_impl>
 800ab68:	4603      	mov	r3, r0
  }
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b082      	sub	sp, #8
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ab7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab82:	2201      	movs	r2, #1
 800ab84:	4619      	mov	r1, r3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff ffd2 	bl	800ab30 <pbuf_header_impl>
 800ab8c:	4603      	mov	r3, r0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d106      	bne.n	800abba <pbuf_free+0x22>
 800abac:	4b38      	ldr	r3, [pc, #224]	@ (800ac90 <pbuf_free+0xf8>)
 800abae:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800abb2:	4938      	ldr	r1, [pc, #224]	@ (800ac94 <pbuf_free+0xfc>)
 800abb4:	4838      	ldr	r0, [pc, #224]	@ (800ac98 <pbuf_free+0x100>)
 800abb6:	f00a fc1f 	bl	80153f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	e063      	b.n	800ac86 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800abc2:	e05c      	b.n	800ac7e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	7b9b      	ldrb	r3, [r3, #14]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d106      	bne.n	800abda <pbuf_free+0x42>
 800abcc:	4b30      	ldr	r3, [pc, #192]	@ (800ac90 <pbuf_free+0xf8>)
 800abce:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800abd2:	4932      	ldr	r1, [pc, #200]	@ (800ac9c <pbuf_free+0x104>)
 800abd4:	4830      	ldr	r0, [pc, #192]	@ (800ac98 <pbuf_free+0x100>)
 800abd6:	f00a fc0f 	bl	80153f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	7b9b      	ldrb	r3, [r3, #14]
 800abde:	3b01      	subs	r3, #1
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	739a      	strb	r2, [r3, #14]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7b9b      	ldrb	r3, [r3, #14]
 800abea:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800abec:	7dbb      	ldrb	r3, [r7, #22]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d143      	bne.n	800ac7a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	7b1b      	ldrb	r3, [r3, #12]
 800abfc:	f003 030f 	and.w	r3, r3, #15
 800ac00:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	7b5b      	ldrb	r3, [r3, #13]
 800ac06:	f003 0302 	and.w	r3, r3, #2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d011      	beq.n	800ac32 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <pbuf_free+0x90>
 800ac1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ac90 <pbuf_free+0xf8>)
 800ac1c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ac20:	491f      	ldr	r1, [pc, #124]	@ (800aca0 <pbuf_free+0x108>)
 800ac22:	481d      	ldr	r0, [pc, #116]	@ (800ac98 <pbuf_free+0x100>)
 800ac24:	f00a fbe8 	bl	80153f8 <iprintf>
        pc->custom_free_function(p);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	4798      	blx	r3
 800ac30:	e01d      	b.n	800ac6e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d104      	bne.n	800ac42 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	2008      	movs	r0, #8
 800ac3c:	f7ff f94a 	bl	8009ed4 <memp_free>
 800ac40:	e015      	b.n	800ac6e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d104      	bne.n	800ac52 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800ac48:	6879      	ldr	r1, [r7, #4]
 800ac4a:	2007      	movs	r0, #7
 800ac4c:	f7ff f942 	bl	8009ed4 <memp_free>
 800ac50:	e00d      	b.n	800ac6e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d103      	bne.n	800ac60 <pbuf_free+0xc8>
          mem_free(p);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7fe fdd5 	bl	8009808 <mem_free>
 800ac5e:	e006      	b.n	800ac6e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ac60:	4b0b      	ldr	r3, [pc, #44]	@ (800ac90 <pbuf_free+0xf8>)
 800ac62:	f240 320f 	movw	r2, #783	@ 0x30f
 800ac66:	490f      	ldr	r1, [pc, #60]	@ (800aca4 <pbuf_free+0x10c>)
 800ac68:	480b      	ldr	r0, [pc, #44]	@ (800ac98 <pbuf_free+0x100>)
 800ac6a:	f00a fbc5 	bl	80153f8 <iprintf>
        }
      }
      count++;
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
 800ac70:	3301      	adds	r3, #1
 800ac72:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	607b      	str	r3, [r7, #4]
 800ac78:	e001      	b.n	800ac7e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d19f      	bne.n	800abc4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	080168cc 	.word	0x080168cc
 800ac94:	08016a30 	.word	0x08016a30
 800ac98:	0801692c 	.word	0x0801692c
 800ac9c:	08016a5c 	.word	0x08016a5c
 800aca0:	08016a74 	.word	0x08016a74
 800aca4:	08016a98 	.word	0x08016a98

0800aca8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800acb4:	e005      	b.n	800acc2 <pbuf_clen+0x1a>
    ++len;
 800acb6:	89fb      	ldrh	r3, [r7, #14]
 800acb8:	3301      	adds	r3, #1
 800acba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1f6      	bne.n	800acb6 <pbuf_clen+0xe>
  }
  return len;
 800acc8:	89fb      	ldrh	r3, [r7, #14]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
	...

0800acd8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d010      	beq.n	800ad08 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	7b9b      	ldrb	r3, [r3, #14]
 800acea:	3301      	adds	r3, #1
 800acec:	b2da      	uxtb	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	7b9b      	ldrb	r3, [r3, #14]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d106      	bne.n	800ad08 <pbuf_ref+0x30>
 800acfa:	4b05      	ldr	r3, [pc, #20]	@ (800ad10 <pbuf_ref+0x38>)
 800acfc:	f240 3242 	movw	r2, #834	@ 0x342
 800ad00:	4904      	ldr	r1, [pc, #16]	@ (800ad14 <pbuf_ref+0x3c>)
 800ad02:	4805      	ldr	r0, [pc, #20]	@ (800ad18 <pbuf_ref+0x40>)
 800ad04:	f00a fb78 	bl	80153f8 <iprintf>
  }
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	080168cc 	.word	0x080168cc
 800ad14:	08016aac 	.word	0x08016aac
 800ad18:	0801692c 	.word	0x0801692c

0800ad1c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <pbuf_cat+0x16>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d107      	bne.n	800ad42 <pbuf_cat+0x26>
 800ad32:	4b20      	ldr	r3, [pc, #128]	@ (800adb4 <pbuf_cat+0x98>)
 800ad34:	f240 3259 	movw	r2, #857	@ 0x359
 800ad38:	491f      	ldr	r1, [pc, #124]	@ (800adb8 <pbuf_cat+0x9c>)
 800ad3a:	4820      	ldr	r0, [pc, #128]	@ (800adbc <pbuf_cat+0xa0>)
 800ad3c:	f00a fb5c 	bl	80153f8 <iprintf>
 800ad40:	e034      	b.n	800adac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	e00a      	b.n	800ad5e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	891a      	ldrh	r2, [r3, #8]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	891b      	ldrh	r3, [r3, #8]
 800ad50:	4413      	add	r3, r2
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	60fb      	str	r3, [r7, #12]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1f0      	bne.n	800ad48 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	891a      	ldrh	r2, [r3, #8]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	895b      	ldrh	r3, [r3, #10]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d006      	beq.n	800ad80 <pbuf_cat+0x64>
 800ad72:	4b10      	ldr	r3, [pc, #64]	@ (800adb4 <pbuf_cat+0x98>)
 800ad74:	f240 3262 	movw	r2, #866	@ 0x362
 800ad78:	4911      	ldr	r1, [pc, #68]	@ (800adc0 <pbuf_cat+0xa4>)
 800ad7a:	4810      	ldr	r0, [pc, #64]	@ (800adbc <pbuf_cat+0xa0>)
 800ad7c:	f00a fb3c 	bl	80153f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d006      	beq.n	800ad96 <pbuf_cat+0x7a>
 800ad88:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <pbuf_cat+0x98>)
 800ad8a:	f240 3263 	movw	r2, #867	@ 0x363
 800ad8e:	490d      	ldr	r1, [pc, #52]	@ (800adc4 <pbuf_cat+0xa8>)
 800ad90:	480a      	ldr	r0, [pc, #40]	@ (800adbc <pbuf_cat+0xa0>)
 800ad92:	f00a fb31 	bl	80153f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	891a      	ldrh	r2, [r3, #8]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	891b      	ldrh	r3, [r3, #8]
 800ad9e:	4413      	add	r3, r2
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	080168cc 	.word	0x080168cc
 800adb8:	08016ac0 	.word	0x08016ac0
 800adbc:	0801692c 	.word	0x0801692c
 800adc0:	08016af8 	.word	0x08016af8
 800adc4:	08016b28 	.word	0x08016b28

0800adc8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7ff ffa1 	bl	800ad1c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800adda:	6838      	ldr	r0, [r7, #0]
 800addc:	f7ff ff7c 	bl	800acd8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ade0:	bf00      	nop
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800adf2:	2300      	movs	r3, #0
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	2300      	movs	r3, #0
 800adf8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d008      	beq.n	800ae12 <pbuf_copy+0x2a>
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <pbuf_copy+0x2a>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	891a      	ldrh	r2, [r3, #8]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	891b      	ldrh	r3, [r3, #8]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d209      	bcs.n	800ae26 <pbuf_copy+0x3e>
 800ae12:	4b57      	ldr	r3, [pc, #348]	@ (800af70 <pbuf_copy+0x188>)
 800ae14:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ae18:	4956      	ldr	r1, [pc, #344]	@ (800af74 <pbuf_copy+0x18c>)
 800ae1a:	4857      	ldr	r0, [pc, #348]	@ (800af78 <pbuf_copy+0x190>)
 800ae1c:	f00a faec 	bl	80153f8 <iprintf>
 800ae20:	f06f 030f 	mvn.w	r3, #15
 800ae24:	e09f      	b.n	800af66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	895b      	ldrh	r3, [r3, #10]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	1ad2      	subs	r2, r2, r3
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	895b      	ldrh	r3, [r3, #10]
 800ae34:	4619      	mov	r1, r3
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	1acb      	subs	r3, r1, r3
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d306      	bcc.n	800ae4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	895b      	ldrh	r3, [r3, #10]
 800ae42:	461a      	mov	r2, r3
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	e005      	b.n	800ae58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	895b      	ldrh	r3, [r3, #10]
 800ae50:	461a      	mov	r2, r3
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	18d0      	adds	r0, r2, r3
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	4413      	add	r3, r2
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	f00a fbfd 	bl	801566a <memcpy>
    offset_to += len;
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	895b      	ldrh	r3, [r3, #10]
 800ae84:	461a      	mov	r2, r3
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d906      	bls.n	800ae9a <pbuf_copy+0xb2>
 800ae8c:	4b38      	ldr	r3, [pc, #224]	@ (800af70 <pbuf_copy+0x188>)
 800ae8e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ae92:	493a      	ldr	r1, [pc, #232]	@ (800af7c <pbuf_copy+0x194>)
 800ae94:	4838      	ldr	r0, [pc, #224]	@ (800af78 <pbuf_copy+0x190>)
 800ae96:	f00a faaf 	bl	80153f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	895b      	ldrh	r3, [r3, #10]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d906      	bls.n	800aeb4 <pbuf_copy+0xcc>
 800aea6:	4b32      	ldr	r3, [pc, #200]	@ (800af70 <pbuf_copy+0x188>)
 800aea8:	f240 32da 	movw	r2, #986	@ 0x3da
 800aeac:	4934      	ldr	r1, [pc, #208]	@ (800af80 <pbuf_copy+0x198>)
 800aeae:	4832      	ldr	r0, [pc, #200]	@ (800af78 <pbuf_copy+0x190>)
 800aeb0:	f00a faa2 	bl	80153f8 <iprintf>
    if (offset_from >= p_from->len) {
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	895b      	ldrh	r3, [r3, #10]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d304      	bcc.n	800aeca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	895b      	ldrh	r3, [r3, #10]
 800aece:	461a      	mov	r2, r3
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d114      	bne.n	800af00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10c      	bne.n	800af00 <pbuf_copy+0x118>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d009      	beq.n	800af00 <pbuf_copy+0x118>
 800aeec:	4b20      	ldr	r3, [pc, #128]	@ (800af70 <pbuf_copy+0x188>)
 800aeee:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800aef2:	4924      	ldr	r1, [pc, #144]	@ (800af84 <pbuf_copy+0x19c>)
 800aef4:	4820      	ldr	r0, [pc, #128]	@ (800af78 <pbuf_copy+0x190>)
 800aef6:	f00a fa7f 	bl	80153f8 <iprintf>
 800aefa:	f06f 030f 	mvn.w	r3, #15
 800aefe:	e032      	b.n	800af66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d013      	beq.n	800af2e <pbuf_copy+0x146>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	895a      	ldrh	r2, [r3, #10]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	891b      	ldrh	r3, [r3, #8]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d10d      	bne.n	800af2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d009      	beq.n	800af2e <pbuf_copy+0x146>
 800af1a:	4b15      	ldr	r3, [pc, #84]	@ (800af70 <pbuf_copy+0x188>)
 800af1c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800af20:	4919      	ldr	r1, [pc, #100]	@ (800af88 <pbuf_copy+0x1a0>)
 800af22:	4815      	ldr	r0, [pc, #84]	@ (800af78 <pbuf_copy+0x190>)
 800af24:	f00a fa68 	bl	80153f8 <iprintf>
 800af28:	f06f 0305 	mvn.w	r3, #5
 800af2c:	e01b      	b.n	800af66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d013      	beq.n	800af5c <pbuf_copy+0x174>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	895a      	ldrh	r2, [r3, #10]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	891b      	ldrh	r3, [r3, #8]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d10d      	bne.n	800af5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d009      	beq.n	800af5c <pbuf_copy+0x174>
 800af48:	4b09      	ldr	r3, [pc, #36]	@ (800af70 <pbuf_copy+0x188>)
 800af4a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800af4e:	490e      	ldr	r1, [pc, #56]	@ (800af88 <pbuf_copy+0x1a0>)
 800af50:	4809      	ldr	r0, [pc, #36]	@ (800af78 <pbuf_copy+0x190>)
 800af52:	f00a fa51 	bl	80153f8 <iprintf>
 800af56:	f06f 0305 	mvn.w	r3, #5
 800af5a:	e004      	b.n	800af66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f47f af61 	bne.w	800ae26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	080168cc 	.word	0x080168cc
 800af74:	08016b74 	.word	0x08016b74
 800af78:	0801692c 	.word	0x0801692c
 800af7c:	08016ba4 	.word	0x08016ba4
 800af80:	08016bbc 	.word	0x08016bbc
 800af84:	08016bd8 	.word	0x08016bd8
 800af88:	08016be8 	.word	0x08016be8

0800af8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4611      	mov	r1, r2
 800af98:	461a      	mov	r2, r3
 800af9a:	460b      	mov	r3, r1
 800af9c:	80fb      	strh	r3, [r7, #6]
 800af9e:	4613      	mov	r3, r2
 800afa0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d108      	bne.n	800afc2 <pbuf_copy_partial+0x36>
 800afb0:	4b2b      	ldr	r3, [pc, #172]	@ (800b060 <pbuf_copy_partial+0xd4>)
 800afb2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800afb6:	492b      	ldr	r1, [pc, #172]	@ (800b064 <pbuf_copy_partial+0xd8>)
 800afb8:	482b      	ldr	r0, [pc, #172]	@ (800b068 <pbuf_copy_partial+0xdc>)
 800afba:	f00a fa1d 	bl	80153f8 <iprintf>
 800afbe:	2300      	movs	r3, #0
 800afc0:	e04a      	b.n	800b058 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d108      	bne.n	800afda <pbuf_copy_partial+0x4e>
 800afc8:	4b25      	ldr	r3, [pc, #148]	@ (800b060 <pbuf_copy_partial+0xd4>)
 800afca:	f240 420b 	movw	r2, #1035	@ 0x40b
 800afce:	4927      	ldr	r1, [pc, #156]	@ (800b06c <pbuf_copy_partial+0xe0>)
 800afd0:	4825      	ldr	r0, [pc, #148]	@ (800b068 <pbuf_copy_partial+0xdc>)
 800afd2:	f00a fa11 	bl	80153f8 <iprintf>
 800afd6:	2300      	movs	r3, #0
 800afd8:	e03e      	b.n	800b058 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	61fb      	str	r3, [r7, #28]
 800afde:	e034      	b.n	800b04a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800afe0:	88bb      	ldrh	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <pbuf_copy_partial+0x70>
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	895b      	ldrh	r3, [r3, #10]
 800afea:	88ba      	ldrh	r2, [r7, #4]
 800afec:	429a      	cmp	r2, r3
 800afee:	d305      	bcc.n	800affc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	895b      	ldrh	r3, [r3, #10]
 800aff4:	88ba      	ldrh	r2, [r7, #4]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	80bb      	strh	r3, [r7, #4]
 800affa:	e023      	b.n	800b044 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	895a      	ldrh	r2, [r3, #10]
 800b000:	88bb      	ldrh	r3, [r7, #4]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b006:	8b3a      	ldrh	r2, [r7, #24]
 800b008:	88fb      	ldrh	r3, [r7, #6]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d901      	bls.n	800b012 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b00e:	88fb      	ldrh	r3, [r7, #6]
 800b010:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b012:	8b7b      	ldrh	r3, [r7, #26]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	18d0      	adds	r0, r2, r3
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	88bb      	ldrh	r3, [r7, #4]
 800b01e:	4413      	add	r3, r2
 800b020:	8b3a      	ldrh	r2, [r7, #24]
 800b022:	4619      	mov	r1, r3
 800b024:	f00a fb21 	bl	801566a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b028:	8afa      	ldrh	r2, [r7, #22]
 800b02a:	8b3b      	ldrh	r3, [r7, #24]
 800b02c:	4413      	add	r3, r2
 800b02e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b030:	8b7a      	ldrh	r2, [r7, #26]
 800b032:	8b3b      	ldrh	r3, [r7, #24]
 800b034:	4413      	add	r3, r2
 800b036:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b038:	88fa      	ldrh	r2, [r7, #6]
 800b03a:	8b3b      	ldrh	r3, [r7, #24]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	61fb      	str	r3, [r7, #28]
 800b04a:	88fb      	ldrh	r3, [r7, #6]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <pbuf_copy_partial+0xca>
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1c4      	bne.n	800afe0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b056:	8afb      	ldrh	r3, [r7, #22]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	080168cc 	.word	0x080168cc
 800b064:	08016c14 	.word	0x08016c14
 800b068:	0801692c 	.word	0x0801692c
 800b06c:	08016c34 	.word	0x08016c34

0800b070 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	4603      	mov	r3, r0
 800b078:	603a      	str	r2, [r7, #0]
 800b07a:	71fb      	strb	r3, [r7, #7]
 800b07c:	460b      	mov	r3, r1
 800b07e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	8919      	ldrh	r1, [r3, #8]
 800b084:	88ba      	ldrh	r2, [r7, #4]
 800b086:	79fb      	ldrb	r3, [r7, #7]
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff faa1 	bl	800a5d0 <pbuf_alloc>
 800b08e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <pbuf_clone+0x2a>
    return NULL;
 800b096:	2300      	movs	r3, #0
 800b098:	e011      	b.n	800b0be <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7ff fea3 	bl	800ade8 <pbuf_copy>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b0a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d006      	beq.n	800b0bc <pbuf_clone+0x4c>
 800b0ae:	4b06      	ldr	r3, [pc, #24]	@ (800b0c8 <pbuf_clone+0x58>)
 800b0b0:	f240 5224 	movw	r2, #1316	@ 0x524
 800b0b4:	4905      	ldr	r1, [pc, #20]	@ (800b0cc <pbuf_clone+0x5c>)
 800b0b6:	4806      	ldr	r0, [pc, #24]	@ (800b0d0 <pbuf_clone+0x60>)
 800b0b8:	f00a f99e 	bl	80153f8 <iprintf>
  return q;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	080168cc 	.word	0x080168cc
 800b0cc:	08016d40 	.word	0x08016d40
 800b0d0:	0801692c 	.word	0x0801692c

0800b0d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b0d8:	f00a f88e 	bl	80151f8 <rand>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	4b01      	ldr	r3, [pc, #4]	@ (800b0f4 <tcp_init+0x20>)
 800b0ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b0f0:	bf00      	nop
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	20000024 	.word	0x20000024

0800b0f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7d1b      	ldrb	r3, [r3, #20]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d105      	bne.n	800b114 <tcp_free+0x1c>
 800b108:	4b06      	ldr	r3, [pc, #24]	@ (800b124 <tcp_free+0x2c>)
 800b10a:	22d4      	movs	r2, #212	@ 0xd4
 800b10c:	4906      	ldr	r1, [pc, #24]	@ (800b128 <tcp_free+0x30>)
 800b10e:	4807      	ldr	r0, [pc, #28]	@ (800b12c <tcp_free+0x34>)
 800b110:	f00a f972 	bl	80153f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	2001      	movs	r0, #1
 800b118:	f7fe fedc 	bl	8009ed4 <memp_free>
}
 800b11c:	bf00      	nop
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	08016dcc 	.word	0x08016dcc
 800b128:	08016dfc 	.word	0x08016dfc
 800b12c:	08016e10 	.word	0x08016e10

0800b130 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	7d1b      	ldrb	r3, [r3, #20]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d105      	bne.n	800b14c <tcp_free_listen+0x1c>
 800b140:	4b06      	ldr	r3, [pc, #24]	@ (800b15c <tcp_free_listen+0x2c>)
 800b142:	22df      	movs	r2, #223	@ 0xdf
 800b144:	4906      	ldr	r1, [pc, #24]	@ (800b160 <tcp_free_listen+0x30>)
 800b146:	4807      	ldr	r0, [pc, #28]	@ (800b164 <tcp_free_listen+0x34>)
 800b148:	f00a f956 	bl	80153f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	2002      	movs	r0, #2
 800b150:	f7fe fec0 	bl	8009ed4 <memp_free>
}
 800b154:	bf00      	nop
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	08016dcc 	.word	0x08016dcc
 800b160:	08016e38 	.word	0x08016e38
 800b164:	08016e10 	.word	0x08016e10

0800b168 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b16c:	f000 fea4 	bl	800beb8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b170:	4b07      	ldr	r3, [pc, #28]	@ (800b190 <tcp_tmr+0x28>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	b2da      	uxtb	r2, r3
 800b178:	4b05      	ldr	r3, [pc, #20]	@ (800b190 <tcp_tmr+0x28>)
 800b17a:	701a      	strb	r2, [r3, #0]
 800b17c:	4b04      	ldr	r3, [pc, #16]	@ (800b190 <tcp_tmr+0x28>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b188:	f000 fb54 	bl	800b834 <tcp_slowtmr>
  }
}
 800b18c:	bf00      	nop
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	2000d0d9 	.word	0x2000d0d9

0800b194 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d105      	bne.n	800b1b0 <tcp_remove_listener+0x1c>
 800b1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b1dc <tcp_remove_listener+0x48>)
 800b1a6:	22ff      	movs	r2, #255	@ 0xff
 800b1a8:	490d      	ldr	r1, [pc, #52]	@ (800b1e0 <tcp_remove_listener+0x4c>)
 800b1aa:	480e      	ldr	r0, [pc, #56]	@ (800b1e4 <tcp_remove_listener+0x50>)
 800b1ac:	f00a f924 	bl	80153f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	e00a      	b.n	800b1cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d102      	bne.n	800b1c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f1      	bne.n	800b1b6 <tcp_remove_listener+0x22>
    }
  }
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	08016dcc 	.word	0x08016dcc
 800b1e0:	08016e54 	.word	0x08016e54
 800b1e4:	08016e10 	.word	0x08016e10

0800b1e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d106      	bne.n	800b204 <tcp_listen_closed+0x1c>
 800b1f6:	4b14      	ldr	r3, [pc, #80]	@ (800b248 <tcp_listen_closed+0x60>)
 800b1f8:	f240 1211 	movw	r2, #273	@ 0x111
 800b1fc:	4913      	ldr	r1, [pc, #76]	@ (800b24c <tcp_listen_closed+0x64>)
 800b1fe:	4814      	ldr	r0, [pc, #80]	@ (800b250 <tcp_listen_closed+0x68>)
 800b200:	f00a f8fa 	bl	80153f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	7d1b      	ldrb	r3, [r3, #20]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d006      	beq.n	800b21a <tcp_listen_closed+0x32>
 800b20c:	4b0e      	ldr	r3, [pc, #56]	@ (800b248 <tcp_listen_closed+0x60>)
 800b20e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800b212:	4910      	ldr	r1, [pc, #64]	@ (800b254 <tcp_listen_closed+0x6c>)
 800b214:	480e      	ldr	r0, [pc, #56]	@ (800b250 <tcp_listen_closed+0x68>)
 800b216:	f00a f8ef 	bl	80153f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b21a:	2301      	movs	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e00b      	b.n	800b238 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b220:	4a0d      	ldr	r2, [pc, #52]	@ (800b258 <tcp_listen_closed+0x70>)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff ffb1 	bl	800b194 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3301      	adds	r3, #1
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d9f0      	bls.n	800b220 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b23e:	bf00      	nop
 800b240:	bf00      	nop
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	08016dcc 	.word	0x08016dcc
 800b24c:	08016e7c 	.word	0x08016e7c
 800b250:	08016e10 	.word	0x08016e10
 800b254:	08016e88 	.word	0x08016e88
 800b258:	08019170 	.word	0x08019170

0800b25c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b25c:	b5b0      	push	{r4, r5, r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af04      	add	r7, sp, #16
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d106      	bne.n	800b27c <tcp_close_shutdown+0x20>
 800b26e:	4b63      	ldr	r3, [pc, #396]	@ (800b3fc <tcp_close_shutdown+0x1a0>)
 800b270:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b274:	4962      	ldr	r1, [pc, #392]	@ (800b400 <tcp_close_shutdown+0x1a4>)
 800b276:	4863      	ldr	r0, [pc, #396]	@ (800b404 <tcp_close_shutdown+0x1a8>)
 800b278:	f00a f8be 	bl	80153f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d066      	beq.n	800b350 <tcp_close_shutdown+0xf4>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	7d1b      	ldrb	r3, [r3, #20]
 800b286:	2b04      	cmp	r3, #4
 800b288:	d003      	beq.n	800b292 <tcp_close_shutdown+0x36>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	7d1b      	ldrb	r3, [r3, #20]
 800b28e:	2b07      	cmp	r3, #7
 800b290:	d15e      	bne.n	800b350 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b296:	2b00      	cmp	r3, #0
 800b298:	d104      	bne.n	800b2a4 <tcp_close_shutdown+0x48>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b29e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b2a2:	d055      	beq.n	800b350 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	8b5b      	ldrh	r3, [r3, #26]
 800b2a8:	f003 0310 	and.w	r3, r3, #16
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d106      	bne.n	800b2be <tcp_close_shutdown+0x62>
 800b2b0:	4b52      	ldr	r3, [pc, #328]	@ (800b3fc <tcp_close_shutdown+0x1a0>)
 800b2b2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800b2b6:	4954      	ldr	r1, [pc, #336]	@ (800b408 <tcp_close_shutdown+0x1ac>)
 800b2b8:	4852      	ldr	r0, [pc, #328]	@ (800b404 <tcp_close_shutdown+0x1a8>)
 800b2ba:	f00a f89d 	bl	80153f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b2c6:	687d      	ldr	r5, [r7, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	8ad2      	ldrh	r2, [r2, #22]
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	8b09      	ldrh	r1, [r1, #24]
 800b2d4:	9102      	str	r1, [sp, #8]
 800b2d6:	9201      	str	r2, [sp, #4]
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	462b      	mov	r3, r5
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4601      	mov	r1, r0
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f004 fe8d 	bl	8010000 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 f8c8 	bl	800c47c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b2ec:	4b47      	ldr	r3, [pc, #284]	@ (800b40c <tcp_close_shutdown+0x1b0>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d105      	bne.n	800b302 <tcp_close_shutdown+0xa6>
 800b2f6:	4b45      	ldr	r3, [pc, #276]	@ (800b40c <tcp_close_shutdown+0x1b0>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	4a43      	ldr	r2, [pc, #268]	@ (800b40c <tcp_close_shutdown+0x1b0>)
 800b2fe:	6013      	str	r3, [r2, #0]
 800b300:	e013      	b.n	800b32a <tcp_close_shutdown+0xce>
 800b302:	4b42      	ldr	r3, [pc, #264]	@ (800b40c <tcp_close_shutdown+0x1b0>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	e00c      	b.n	800b324 <tcp_close_shutdown+0xc8>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	429a      	cmp	r2, r3
 800b312:	d104      	bne.n	800b31e <tcp_close_shutdown+0xc2>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68da      	ldr	r2, [r3, #12]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	60da      	str	r2, [r3, #12]
 800b31c:	e005      	b.n	800b32a <tcp_close_shutdown+0xce>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1ef      	bne.n	800b30a <tcp_close_shutdown+0xae>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	60da      	str	r2, [r3, #12]
 800b330:	4b37      	ldr	r3, [pc, #220]	@ (800b410 <tcp_close_shutdown+0x1b4>)
 800b332:	2201      	movs	r2, #1
 800b334:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b336:	4b37      	ldr	r3, [pc, #220]	@ (800b414 <tcp_close_shutdown+0x1b8>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d102      	bne.n	800b346 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b340:	f003 fd5c 	bl	800edfc <tcp_trigger_input_pcb_close>
 800b344:	e002      	b.n	800b34c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fed6 	bl	800b0f8 <tcp_free>
      }
      return ERR_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	e050      	b.n	800b3f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	7d1b      	ldrb	r3, [r3, #20]
 800b354:	2b02      	cmp	r3, #2
 800b356:	d03b      	beq.n	800b3d0 <tcp_close_shutdown+0x174>
 800b358:	2b02      	cmp	r3, #2
 800b35a:	dc44      	bgt.n	800b3e6 <tcp_close_shutdown+0x18a>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <tcp_close_shutdown+0x10a>
 800b360:	2b01      	cmp	r3, #1
 800b362:	d02a      	beq.n	800b3ba <tcp_close_shutdown+0x15e>
 800b364:	e03f      	b.n	800b3e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	8adb      	ldrh	r3, [r3, #22]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d021      	beq.n	800b3b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b36e:	4b2a      	ldr	r3, [pc, #168]	@ (800b418 <tcp_close_shutdown+0x1bc>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	429a      	cmp	r2, r3
 800b376:	d105      	bne.n	800b384 <tcp_close_shutdown+0x128>
 800b378:	4b27      	ldr	r3, [pc, #156]	@ (800b418 <tcp_close_shutdown+0x1bc>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	4a26      	ldr	r2, [pc, #152]	@ (800b418 <tcp_close_shutdown+0x1bc>)
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	e013      	b.n	800b3ac <tcp_close_shutdown+0x150>
 800b384:	4b24      	ldr	r3, [pc, #144]	@ (800b418 <tcp_close_shutdown+0x1bc>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	60bb      	str	r3, [r7, #8]
 800b38a:	e00c      	b.n	800b3a6 <tcp_close_shutdown+0x14a>
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	429a      	cmp	r2, r3
 800b394:	d104      	bne.n	800b3a0 <tcp_close_shutdown+0x144>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68da      	ldr	r2, [r3, #12]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	60da      	str	r2, [r3, #12]
 800b39e:	e005      	b.n	800b3ac <tcp_close_shutdown+0x150>
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	60bb      	str	r3, [r7, #8]
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1ef      	bne.n	800b38c <tcp_close_shutdown+0x130>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff fea0 	bl	800b0f8 <tcp_free>
      break;
 800b3b8:	e01a      	b.n	800b3f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7ff ff14 	bl	800b1e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	4816      	ldr	r0, [pc, #88]	@ (800b41c <tcp_close_shutdown+0x1c0>)
 800b3c4:	f001 f8aa 	bl	800c51c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff feb1 	bl	800b130 <tcp_free_listen>
      break;
 800b3ce:	e00f      	b.n	800b3f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b3d0:	6879      	ldr	r1, [r7, #4]
 800b3d2:	480e      	ldr	r0, [pc, #56]	@ (800b40c <tcp_close_shutdown+0x1b0>)
 800b3d4:	f001 f8a2 	bl	800c51c <tcp_pcb_remove>
 800b3d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b410 <tcp_close_shutdown+0x1b4>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7ff fe8a 	bl	800b0f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b3e4:	e004      	b.n	800b3f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f81a 	bl	800b420 <tcp_close_shutdown_fin>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	e000      	b.n	800b3f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	08016dcc 	.word	0x08016dcc
 800b400:	08016ea0 	.word	0x08016ea0
 800b404:	08016e10 	.word	0x08016e10
 800b408:	08016ec0 	.word	0x08016ec0
 800b40c:	2000d0d0 	.word	0x2000d0d0
 800b410:	2000d0d8 	.word	0x2000d0d8
 800b414:	2000d110 	.word	0x2000d110
 800b418:	2000d0c8 	.word	0x2000d0c8
 800b41c:	2000d0cc 	.word	0x2000d0cc

0800b420 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d106      	bne.n	800b43c <tcp_close_shutdown_fin+0x1c>
 800b42e:	4b2e      	ldr	r3, [pc, #184]	@ (800b4e8 <tcp_close_shutdown_fin+0xc8>)
 800b430:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b434:	492d      	ldr	r1, [pc, #180]	@ (800b4ec <tcp_close_shutdown_fin+0xcc>)
 800b436:	482e      	ldr	r0, [pc, #184]	@ (800b4f0 <tcp_close_shutdown_fin+0xd0>)
 800b438:	f009 ffde 	bl	80153f8 <iprintf>

  switch (pcb->state) {
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7d1b      	ldrb	r3, [r3, #20]
 800b440:	2b07      	cmp	r3, #7
 800b442:	d020      	beq.n	800b486 <tcp_close_shutdown_fin+0x66>
 800b444:	2b07      	cmp	r3, #7
 800b446:	dc2b      	bgt.n	800b4a0 <tcp_close_shutdown_fin+0x80>
 800b448:	2b03      	cmp	r3, #3
 800b44a:	d002      	beq.n	800b452 <tcp_close_shutdown_fin+0x32>
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d00d      	beq.n	800b46c <tcp_close_shutdown_fin+0x4c>
 800b450:	e026      	b.n	800b4a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f003 fee2 	bl	800f21c <tcp_send_fin>
 800b458:	4603      	mov	r3, r0
 800b45a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d11f      	bne.n	800b4a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2205      	movs	r2, #5
 800b468:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b46a:	e01b      	b.n	800b4a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f003 fed5 	bl	800f21c <tcp_send_fin>
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d114      	bne.n	800b4a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2205      	movs	r2, #5
 800b482:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b484:	e010      	b.n	800b4a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f003 fec8 	bl	800f21c <tcp_send_fin>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d109      	bne.n	800b4ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2209      	movs	r2, #9
 800b49c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b49e:	e005      	b.n	800b4ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e01c      	b.n	800b4de <tcp_close_shutdown_fin+0xbe>
      break;
 800b4a4:	bf00      	nop
 800b4a6:	e002      	b.n	800b4ae <tcp_close_shutdown_fin+0x8e>
      break;
 800b4a8:	bf00      	nop
 800b4aa:	e000      	b.n	800b4ae <tcp_close_shutdown_fin+0x8e>
      break;
 800b4ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b4ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d103      	bne.n	800b4be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f003 ffee 	bl	800f498 <tcp_output>
 800b4bc:	e00d      	b.n	800b4da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b4be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c6:	d108      	bne.n	800b4da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	8b5b      	ldrh	r3, [r3, #26]
 800b4cc:	f043 0308 	orr.w	r3, r3, #8
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e001      	b.n	800b4de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b4da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	08016dcc 	.word	0x08016dcc
 800b4ec:	08016e7c 	.word	0x08016e7c
 800b4f0:	08016e10 	.word	0x08016e10

0800b4f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <tcp_close+0x22>
 800b502:	4b0f      	ldr	r3, [pc, #60]	@ (800b540 <tcp_close+0x4c>)
 800b504:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800b508:	490e      	ldr	r1, [pc, #56]	@ (800b544 <tcp_close+0x50>)
 800b50a:	480f      	ldr	r0, [pc, #60]	@ (800b548 <tcp_close+0x54>)
 800b50c:	f009 ff74 	bl	80153f8 <iprintf>
 800b510:	f06f 030f 	mvn.w	r3, #15
 800b514:	e00f      	b.n	800b536 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	7d1b      	ldrb	r3, [r3, #20]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d006      	beq.n	800b52c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	8b5b      	ldrh	r3, [r3, #26]
 800b522:	f043 0310 	orr.w	r3, r3, #16
 800b526:	b29a      	uxth	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b52c:	2101      	movs	r1, #1
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff fe94 	bl	800b25c <tcp_close_shutdown>
 800b534:	4603      	mov	r3, r0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	08016dcc 	.word	0x08016dcc
 800b544:	08016edc 	.word	0x08016edc
 800b548:	08016e10 	.word	0x08016e10

0800b54c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08e      	sub	sp, #56	@ 0x38
 800b550:	af04      	add	r7, sp, #16
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d107      	bne.n	800b56c <tcp_abandon+0x20>
 800b55c:	4b52      	ldr	r3, [pc, #328]	@ (800b6a8 <tcp_abandon+0x15c>)
 800b55e:	f240 223d 	movw	r2, #573	@ 0x23d
 800b562:	4952      	ldr	r1, [pc, #328]	@ (800b6ac <tcp_abandon+0x160>)
 800b564:	4852      	ldr	r0, [pc, #328]	@ (800b6b0 <tcp_abandon+0x164>)
 800b566:	f009 ff47 	bl	80153f8 <iprintf>
 800b56a:	e099      	b.n	800b6a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	7d1b      	ldrb	r3, [r3, #20]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d106      	bne.n	800b582 <tcp_abandon+0x36>
 800b574:	4b4c      	ldr	r3, [pc, #304]	@ (800b6a8 <tcp_abandon+0x15c>)
 800b576:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800b57a:	494e      	ldr	r1, [pc, #312]	@ (800b6b4 <tcp_abandon+0x168>)
 800b57c:	484c      	ldr	r0, [pc, #304]	@ (800b6b0 <tcp_abandon+0x164>)
 800b57e:	f009 ff3b 	bl	80153f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	7d1b      	ldrb	r3, [r3, #20]
 800b586:	2b0a      	cmp	r3, #10
 800b588:	d107      	bne.n	800b59a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	484a      	ldr	r0, [pc, #296]	@ (800b6b8 <tcp_abandon+0x16c>)
 800b58e:	f000 ffc5 	bl	800c51c <tcp_pcb_remove>
    tcp_free(pcb);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff fdb0 	bl	800b0f8 <tcp_free>
 800b598:	e082      	b.n	800b6a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7d1b      	ldrb	r3, [r3, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d126      	bne.n	800b612 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	8adb      	ldrh	r3, [r3, #22]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d02e      	beq.n	800b62a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b5cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b6bc <tcp_abandon+0x170>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d105      	bne.n	800b5e2 <tcp_abandon+0x96>
 800b5d6:	4b39      	ldr	r3, [pc, #228]	@ (800b6bc <tcp_abandon+0x170>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	4a37      	ldr	r2, [pc, #220]	@ (800b6bc <tcp_abandon+0x170>)
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	e013      	b.n	800b60a <tcp_abandon+0xbe>
 800b5e2:	4b36      	ldr	r3, [pc, #216]	@ (800b6bc <tcp_abandon+0x170>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	e00c      	b.n	800b604 <tcp_abandon+0xb8>
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d104      	bne.n	800b5fe <tcp_abandon+0xb2>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68da      	ldr	r2, [r3, #12]
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	60da      	str	r2, [r3, #12]
 800b5fc:	e005      	b.n	800b60a <tcp_abandon+0xbe>
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	61fb      	str	r3, [r7, #28]
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1ef      	bne.n	800b5ea <tcp_abandon+0x9e>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	60da      	str	r2, [r3, #12]
 800b610:	e00b      	b.n	800b62a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	8adb      	ldrh	r3, [r3, #22]
 800b61a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	4828      	ldr	r0, [pc, #160]	@ (800b6c0 <tcp_abandon+0x174>)
 800b620:	f000 ff7c 	bl	800c51c <tcp_pcb_remove>
 800b624:	4b27      	ldr	r3, [pc, #156]	@ (800b6c4 <tcp_abandon+0x178>)
 800b626:	2201      	movs	r2, #1
 800b628:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d004      	beq.n	800b63c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b636:	4618      	mov	r0, r3
 800b638:	f000 fd1e 	bl	800c078 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b640:	2b00      	cmp	r3, #0
 800b642:	d004      	beq.n	800b64e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 fd15 	bl	800c078 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b652:	2b00      	cmp	r3, #0
 800b654:	d004      	beq.n	800b660 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 fd0c 	bl	800c078 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00e      	beq.n	800b684 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b666:	6879      	ldr	r1, [r7, #4]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3304      	adds	r3, #4
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	8b12      	ldrh	r2, [r2, #24]
 800b670:	9202      	str	r2, [sp, #8]
 800b672:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b674:	9201      	str	r2, [sp, #4]
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	460b      	mov	r3, r1
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	69b9      	ldr	r1, [r7, #24]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f004 fcbe 	bl	8010000 <tcp_rst>
    }
    last_state = pcb->state;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	7d1b      	ldrb	r3, [r3, #20]
 800b688:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff fd34 	bl	800b0f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d004      	beq.n	800b6a0 <tcp_abandon+0x154>
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	f06f 010c 	mvn.w	r1, #12
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	4798      	blx	r3
  }
}
 800b6a0:	3728      	adds	r7, #40	@ 0x28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	08016dcc 	.word	0x08016dcc
 800b6ac:	08016f10 	.word	0x08016f10
 800b6b0:	08016e10 	.word	0x08016e10
 800b6b4:	08016f2c 	.word	0x08016f2c
 800b6b8:	2000d0d4 	.word	0x2000d0d4
 800b6bc:	2000d0c8 	.word	0x2000d0c8
 800b6c0:	2000d0d0 	.word	0x2000d0d0
 800b6c4:	2000d0d8 	.word	0x2000d0d8

0800b6c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff ff3a 	bl	800b54c <tcp_abandon>
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d106      	bne.n	800b6fc <tcp_update_rcv_ann_wnd+0x1c>
 800b6ee:	4b25      	ldr	r3, [pc, #148]	@ (800b784 <tcp_update_rcv_ann_wnd+0xa4>)
 800b6f0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b6f4:	4924      	ldr	r1, [pc, #144]	@ (800b788 <tcp_update_rcv_ann_wnd+0xa8>)
 800b6f6:	4825      	ldr	r0, [pc, #148]	@ (800b78c <tcp_update_rcv_ann_wnd+0xac>)
 800b6f8:	f009 fe7e 	bl	80153f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b704:	4413      	add	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800b710:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800b714:	bf28      	it	cs
 800b716:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800b71a:	b292      	uxth	r2, r2
 800b71c:	4413      	add	r3, r2
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	db08      	blt.n	800b738 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	e020      	b.n	800b77a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	2b00      	cmp	r3, #0
 800b744:	dd03      	ble.n	800b74e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b74c:	e014      	b.n	800b778 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b760:	d306      	bcc.n	800b770 <tcp_update_rcv_ann_wnd+0x90>
 800b762:	4b08      	ldr	r3, [pc, #32]	@ (800b784 <tcp_update_rcv_ann_wnd+0xa4>)
 800b764:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800b768:	4909      	ldr	r1, [pc, #36]	@ (800b790 <tcp_update_rcv_ann_wnd+0xb0>)
 800b76a:	4808      	ldr	r0, [pc, #32]	@ (800b78c <tcp_update_rcv_ann_wnd+0xac>)
 800b76c:	f009 fe44 	bl	80153f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	b29a      	uxth	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800b778:	2300      	movs	r3, #0
  }
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	08016dcc 	.word	0x08016dcc
 800b788:	08017028 	.word	0x08017028
 800b78c:	08016e10 	.word	0x08016e10
 800b790:	0801704c 	.word	0x0801704c

0800b794 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d107      	bne.n	800b7b6 <tcp_recved+0x22>
 800b7a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b824 <tcp_recved+0x90>)
 800b7a8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800b7ac:	491e      	ldr	r1, [pc, #120]	@ (800b828 <tcp_recved+0x94>)
 800b7ae:	481f      	ldr	r0, [pc, #124]	@ (800b82c <tcp_recved+0x98>)
 800b7b0:	f009 fe22 	bl	80153f8 <iprintf>
 800b7b4:	e032      	b.n	800b81c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7d1b      	ldrb	r3, [r3, #20]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d106      	bne.n	800b7cc <tcp_recved+0x38>
 800b7be:	4b19      	ldr	r3, [pc, #100]	@ (800b824 <tcp_recved+0x90>)
 800b7c0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800b7c4:	491a      	ldr	r1, [pc, #104]	@ (800b830 <tcp_recved+0x9c>)
 800b7c6:	4819      	ldr	r0, [pc, #100]	@ (800b82c <tcp_recved+0x98>)
 800b7c8:	f009 fe16 	bl	80153f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b7d0:	887b      	ldrh	r3, [r7, #2]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b7d6:	89fb      	ldrh	r3, [r7, #14]
 800b7d8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b7dc:	d804      	bhi.n	800b7e8 <tcp_recved+0x54>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7e2:	89fa      	ldrh	r2, [r7, #14]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d204      	bcs.n	800b7f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b7ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b7f0:	e002      	b.n	800b7f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	89fa      	ldrh	r2, [r7, #14]
 800b7f6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ff71 	bl	800b6e0 <tcp_update_rcv_ann_wnd>
 800b7fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b806:	d309      	bcc.n	800b81c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	8b5b      	ldrh	r3, [r3, #26]
 800b80c:	f043 0302 	orr.w	r3, r3, #2
 800b810:	b29a      	uxth	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f003 fe3e 	bl	800f498 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	08016dcc 	.word	0x08016dcc
 800b828:	08017068 	.word	0x08017068
 800b82c:	08016e10 	.word	0x08016e10
 800b830:	08017080 	.word	0x08017080

0800b834 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b834:	b5b0      	push	{r4, r5, r7, lr}
 800b836:	b090      	sub	sp, #64	@ 0x40
 800b838:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800b840:	4b95      	ldr	r3, [pc, #596]	@ (800ba98 <tcp_slowtmr+0x264>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	4a94      	ldr	r2, [pc, #592]	@ (800ba98 <tcp_slowtmr+0x264>)
 800b848:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b84a:	4b94      	ldr	r3, [pc, #592]	@ (800ba9c <tcp_slowtmr+0x268>)
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	3301      	adds	r3, #1
 800b850:	b2da      	uxtb	r2, r3
 800b852:	4b92      	ldr	r3, [pc, #584]	@ (800ba9c <tcp_slowtmr+0x268>)
 800b854:	701a      	strb	r2, [r3, #0]
 800b856:	e000      	b.n	800b85a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800b858:	bf00      	nop
  prev = NULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800b85e:	4b90      	ldr	r3, [pc, #576]	@ (800baa0 <tcp_slowtmr+0x26c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b864:	e29d      	b.n	800bda2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b868:	7d1b      	ldrb	r3, [r3, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <tcp_slowtmr+0x48>
 800b86e:	4b8d      	ldr	r3, [pc, #564]	@ (800baa4 <tcp_slowtmr+0x270>)
 800b870:	f240 42be 	movw	r2, #1214	@ 0x4be
 800b874:	498c      	ldr	r1, [pc, #560]	@ (800baa8 <tcp_slowtmr+0x274>)
 800b876:	488d      	ldr	r0, [pc, #564]	@ (800baac <tcp_slowtmr+0x278>)
 800b878:	f009 fdbe 	bl	80153f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b87e:	7d1b      	ldrb	r3, [r3, #20]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d106      	bne.n	800b892 <tcp_slowtmr+0x5e>
 800b884:	4b87      	ldr	r3, [pc, #540]	@ (800baa4 <tcp_slowtmr+0x270>)
 800b886:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800b88a:	4989      	ldr	r1, [pc, #548]	@ (800bab0 <tcp_slowtmr+0x27c>)
 800b88c:	4887      	ldr	r0, [pc, #540]	@ (800baac <tcp_slowtmr+0x278>)
 800b88e:	f009 fdb3 	bl	80153f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b894:	7d1b      	ldrb	r3, [r3, #20]
 800b896:	2b0a      	cmp	r3, #10
 800b898:	d106      	bne.n	800b8a8 <tcp_slowtmr+0x74>
 800b89a:	4b82      	ldr	r3, [pc, #520]	@ (800baa4 <tcp_slowtmr+0x270>)
 800b89c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800b8a0:	4984      	ldr	r1, [pc, #528]	@ (800bab4 <tcp_slowtmr+0x280>)
 800b8a2:	4882      	ldr	r0, [pc, #520]	@ (800baac <tcp_slowtmr+0x278>)
 800b8a4:	f009 fda8 	bl	80153f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8aa:	7f9a      	ldrb	r2, [r3, #30]
 800b8ac:	4b7b      	ldr	r3, [pc, #492]	@ (800ba9c <tcp_slowtmr+0x268>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d105      	bne.n	800b8c0 <tcp_slowtmr+0x8c>
      prev = pcb;
 800b8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800b8be:	e270      	b.n	800bda2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800b8c0:	4b76      	ldr	r3, [pc, #472]	@ (800ba9c <tcp_slowtmr+0x268>)
 800b8c2:	781a      	ldrb	r2, [r3, #0]
 800b8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d6:	7d1b      	ldrb	r3, [r3, #20]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d10a      	bne.n	800b8f2 <tcp_slowtmr+0xbe>
 800b8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b8e2:	2b05      	cmp	r3, #5
 800b8e4:	d905      	bls.n	800b8f2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b8f0:	e11e      	b.n	800bb30 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b8f8:	2b0b      	cmp	r3, #11
 800b8fa:	d905      	bls.n	800b908 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800b8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b900:	3301      	adds	r3, #1
 800b902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b906:	e113      	b.n	800bb30 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800b908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b90a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d075      	beq.n	800b9fe <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b916:	2b00      	cmp	r3, #0
 800b918:	d006      	beq.n	800b928 <tcp_slowtmr+0xf4>
 800b91a:	4b62      	ldr	r3, [pc, #392]	@ (800baa4 <tcp_slowtmr+0x270>)
 800b91c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800b920:	4965      	ldr	r1, [pc, #404]	@ (800bab8 <tcp_slowtmr+0x284>)
 800b922:	4862      	ldr	r0, [pc, #392]	@ (800baac <tcp_slowtmr+0x278>)
 800b924:	f009 fd68 	bl	80153f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d106      	bne.n	800b93e <tcp_slowtmr+0x10a>
 800b930:	4b5c      	ldr	r3, [pc, #368]	@ (800baa4 <tcp_slowtmr+0x270>)
 800b932:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800b936:	4961      	ldr	r1, [pc, #388]	@ (800babc <tcp_slowtmr+0x288>)
 800b938:	485c      	ldr	r0, [pc, #368]	@ (800baac <tcp_slowtmr+0x278>)
 800b93a:	f009 fd5d 	bl	80153f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b940:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b944:	2b0b      	cmp	r3, #11
 800b946:	d905      	bls.n	800b954 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800b948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b94c:	3301      	adds	r3, #1
 800b94e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b952:	e0ed      	b.n	800bb30 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b956:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b95a:	3b01      	subs	r3, #1
 800b95c:	4a58      	ldr	r2, [pc, #352]	@ (800bac0 <tcp_slowtmr+0x28c>)
 800b95e:	5cd3      	ldrb	r3, [r2, r3]
 800b960:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b964:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b968:	7c7a      	ldrb	r2, [r7, #17]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d907      	bls.n	800b97e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800b96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b970:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b974:	3301      	adds	r3, #1
 800b976:	b2da      	uxtb	r2, r3
 800b978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b97a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b980:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b984:	7c7a      	ldrb	r2, [r7, #17]
 800b986:	429a      	cmp	r2, r3
 800b988:	f200 80d2 	bhi.w	800bb30 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800b98c:	2301      	movs	r3, #1
 800b98e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800b990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b996:	2b00      	cmp	r3, #0
 800b998:	d108      	bne.n	800b9ac <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b99a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b99c:	f004 fc24 	bl	80101e8 <tcp_zero_window_probe>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d014      	beq.n	800b9d0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	623b      	str	r3, [r7, #32]
 800b9aa:	e011      	b.n	800b9d0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b9b6:	f003 fae9 	bl	800ef8c <tcp_split_unsent_seg>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d107      	bne.n	800b9d0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800b9c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b9c2:	f003 fd69 	bl	800f498 <tcp_output>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800b9d0:	6a3b      	ldr	r3, [r7, #32]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f000 80ac 	beq.w	800bb30 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800b9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b9e6:	2b06      	cmp	r3, #6
 800b9e8:	f200 80a2 	bhi.w	800bb30 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800b9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800b9fc:	e098      	b.n	800bb30 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	db0f      	blt.n	800ba28 <tcp_slowtmr+0x1f4>
 800ba08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ba0e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d008      	beq.n	800ba28 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ba16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	3301      	adds	r3, #1
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	b21a      	sxth	r2, r3
 800ba24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba26:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ba28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba2a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ba2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba30:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ba34:	429a      	cmp	r2, r3
 800ba36:	db7b      	blt.n	800bb30 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ba38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba3a:	f004 f821 	bl	800fa80 <tcp_rexmit_rto_prepare>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d007      	beq.n	800ba54 <tcp_slowtmr+0x220>
 800ba44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d171      	bne.n	800bb30 <tcp_slowtmr+0x2fc>
 800ba4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d06d      	beq.n	800bb30 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ba54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba56:	7d1b      	ldrb	r3, [r3, #20]
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d03a      	beq.n	800bad2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ba5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba62:	2b0c      	cmp	r3, #12
 800ba64:	bf28      	it	cs
 800ba66:	230c      	movcs	r3, #12
 800ba68:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ba6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ba70:	10db      	asrs	r3, r3, #3
 800ba72:	b21b      	sxth	r3, r3
 800ba74:	461a      	mov	r2, r3
 800ba76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ba7c:	4413      	add	r3, r2
 800ba7e:	7efa      	ldrb	r2, [r7, #27]
 800ba80:	4910      	ldr	r1, [pc, #64]	@ (800bac4 <tcp_slowtmr+0x290>)
 800ba82:	5c8a      	ldrb	r2, [r1, r2]
 800ba84:	4093      	lsls	r3, r2
 800ba86:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	dc1a      	bgt.n	800bac8 <tcp_slowtmr+0x294>
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	b21a      	sxth	r2, r3
 800ba96:	e019      	b.n	800bacc <tcp_slowtmr+0x298>
 800ba98:	2000d0c4 	.word	0x2000d0c4
 800ba9c:	2000d0da 	.word	0x2000d0da
 800baa0:	2000d0d0 	.word	0x2000d0d0
 800baa4:	08016dcc 	.word	0x08016dcc
 800baa8:	08017110 	.word	0x08017110
 800baac:	08016e10 	.word	0x08016e10
 800bab0:	0801713c 	.word	0x0801713c
 800bab4:	08017168 	.word	0x08017168
 800bab8:	08017198 	.word	0x08017198
 800babc:	080171cc 	.word	0x080171cc
 800bac0:	08019168 	.word	0x08019168
 800bac4:	08019158 	.word	0x08019158
 800bac8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bace:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800bad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad4:	2200      	movs	r2, #0
 800bad6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bada:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bae4:	4293      	cmp	r3, r2
 800bae6:	bf28      	it	cs
 800bae8:	4613      	movcs	r3, r2
 800baea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800baec:	8a7b      	ldrh	r3, [r7, #18]
 800baee:	085b      	lsrs	r3, r3, #1
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800baf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb02:	005b      	lsls	r3, r3, #1
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d206      	bcs.n	800bb18 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb14:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800bb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800bb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800bb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb24:	2200      	movs	r2, #0
 800bb26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800bb2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb2c:	f004 f818 	bl	800fb60 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800bb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb32:	7d1b      	ldrb	r3, [r3, #20]
 800bb34:	2b06      	cmp	r3, #6
 800bb36:	d111      	bne.n	800bb5c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800bb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3a:	8b5b      	ldrh	r3, [r3, #26]
 800bb3c:	f003 0310 	and.w	r3, r3, #16
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00b      	beq.n	800bb5c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb44:	4b9c      	ldr	r3, [pc, #624]	@ (800bdb8 <tcp_slowtmr+0x584>)
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4a:	6a1b      	ldr	r3, [r3, #32]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	2b28      	cmp	r3, #40	@ 0x28
 800bb50:	d904      	bls.n	800bb5c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800bb52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb56:	3301      	adds	r3, #1
 800bb58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5e:	7a5b      	ldrb	r3, [r3, #9]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d04a      	beq.n	800bbfe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800bb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d003      	beq.n	800bb78 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800bb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb72:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bb74:	2b07      	cmp	r3, #7
 800bb76:	d142      	bne.n	800bbfe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb78:	4b8f      	ldr	r3, [pc, #572]	@ (800bdb8 <tcp_slowtmr+0x584>)
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb84:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800bb88:	4b8c      	ldr	r3, [pc, #560]	@ (800bdbc <tcp_slowtmr+0x588>)
 800bb8a:	440b      	add	r3, r1
 800bb8c:	498c      	ldr	r1, [pc, #560]	@ (800bdc0 <tcp_slowtmr+0x58c>)
 800bb8e:	fba1 1303 	umull	r1, r3, r1, r3
 800bb92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d90a      	bls.n	800bbae <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800bb98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800bba2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bba6:	3301      	adds	r3, #1
 800bba8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bbac:	e027      	b.n	800bbfe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbae:	4b82      	ldr	r3, [pc, #520]	@ (800bdb8 <tcp_slowtmr+0x584>)
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbba:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800bbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	4b7f      	ldr	r3, [pc, #508]	@ (800bdc4 <tcp_slowtmr+0x590>)
 800bbc8:	fb00 f303 	mul.w	r3, r0, r3
 800bbcc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bbce:	497c      	ldr	r1, [pc, #496]	@ (800bdc0 <tcp_slowtmr+0x58c>)
 800bbd0:	fba1 1303 	umull	r1, r3, r1, r3
 800bbd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d911      	bls.n	800bbfe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bbda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbdc:	f004 fac4 	bl	8010168 <tcp_keepalive>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800bbe6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d107      	bne.n	800bbfe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800bbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d011      	beq.n	800bc2a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bc06:	4b6c      	ldr	r3, [pc, #432]	@ (800bdb8 <tcp_slowtmr+0x584>)
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bc16:	4619      	mov	r1, r3
 800bc18:	460b      	mov	r3, r1
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	440b      	add	r3, r1
 800bc1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d302      	bcc.n	800bc2a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800bc24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc26:	f000 fddd 	bl	800c7e4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800bc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc2c:	7d1b      	ldrb	r3, [r3, #20]
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	d10b      	bne.n	800bc4a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc32:	4b61      	ldr	r3, [pc, #388]	@ (800bdb8 <tcp_slowtmr+0x584>)
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	2b28      	cmp	r3, #40	@ 0x28
 800bc3e:	d904      	bls.n	800bc4a <tcp_slowtmr+0x416>
        ++pcb_remove;
 800bc40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc44:	3301      	adds	r3, #1
 800bc46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800bc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4c:	7d1b      	ldrb	r3, [r3, #20]
 800bc4e:	2b09      	cmp	r3, #9
 800bc50:	d10b      	bne.n	800bc6a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bc52:	4b59      	ldr	r3, [pc, #356]	@ (800bdb8 <tcp_slowtmr+0x584>)
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2bf0      	cmp	r3, #240	@ 0xf0
 800bc5e:	d904      	bls.n	800bc6a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800bc60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc64:	3301      	adds	r3, #1
 800bc66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800bc6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d060      	beq.n	800bd34 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800bc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc78:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800bc7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc7c:	f000 fbfe 	bl	800c47c <tcp_pcb_purge>
      if (prev != NULL) {
 800bc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d010      	beq.n	800bca8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bc86:	4b50      	ldr	r3, [pc, #320]	@ (800bdc8 <tcp_slowtmr+0x594>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d106      	bne.n	800bc9e <tcp_slowtmr+0x46a>
 800bc90:	4b4e      	ldr	r3, [pc, #312]	@ (800bdcc <tcp_slowtmr+0x598>)
 800bc92:	f240 526d 	movw	r2, #1389	@ 0x56d
 800bc96:	494e      	ldr	r1, [pc, #312]	@ (800bdd0 <tcp_slowtmr+0x59c>)
 800bc98:	484e      	ldr	r0, [pc, #312]	@ (800bdd4 <tcp_slowtmr+0x5a0>)
 800bc9a:	f009 fbad 	bl	80153f8 <iprintf>
        prev->next = pcb->next;
 800bc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca0:	68da      	ldr	r2, [r3, #12]
 800bca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca4:	60da      	str	r2, [r3, #12]
 800bca6:	e00f      	b.n	800bcc8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bca8:	4b47      	ldr	r3, [pc, #284]	@ (800bdc8 <tcp_slowtmr+0x594>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d006      	beq.n	800bcc0 <tcp_slowtmr+0x48c>
 800bcb2:	4b46      	ldr	r3, [pc, #280]	@ (800bdcc <tcp_slowtmr+0x598>)
 800bcb4:	f240 5271 	movw	r2, #1393	@ 0x571
 800bcb8:	4947      	ldr	r1, [pc, #284]	@ (800bdd8 <tcp_slowtmr+0x5a4>)
 800bcba:	4846      	ldr	r0, [pc, #280]	@ (800bdd4 <tcp_slowtmr+0x5a0>)
 800bcbc:	f009 fb9c 	bl	80153f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	4a40      	ldr	r2, [pc, #256]	@ (800bdc8 <tcp_slowtmr+0x594>)
 800bcc6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800bcc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d013      	beq.n	800bcf8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bcd8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800bcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcdc:	3304      	adds	r3, #4
 800bcde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce0:	8ad2      	ldrh	r2, [r2, #22]
 800bce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bce4:	8b09      	ldrh	r1, [r1, #24]
 800bce6:	9102      	str	r1, [sp, #8]
 800bce8:	9201      	str	r2, [sp, #4]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	462b      	mov	r3, r5
 800bcee:	4622      	mov	r2, r4
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcf4:	f004 f984 	bl	8010000 <tcp_rst>
      err_arg = pcb->callback_arg;
 800bcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bcfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd00:	7d1b      	ldrb	r3, [r3, #20]
 800bd02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800bd0e:	6838      	ldr	r0, [r7, #0]
 800bd10:	f7ff f9f2 	bl	800b0f8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800bd14:	4b31      	ldr	r3, [pc, #196]	@ (800bddc <tcp_slowtmr+0x5a8>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d004      	beq.n	800bd2a <tcp_slowtmr+0x4f6>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f06f 010c 	mvn.w	r1, #12
 800bd26:	68b8      	ldr	r0, [r7, #8]
 800bd28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bd2a:	4b2c      	ldr	r3, [pc, #176]	@ (800bddc <tcp_slowtmr+0x5a8>)
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d037      	beq.n	800bda2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800bd32:	e592      	b.n	800b85a <tcp_slowtmr+0x26>
      prev = pcb;
 800bd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd36:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800bd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800bd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd40:	7f1b      	ldrb	r3, [r3, #28]
 800bd42:	3301      	adds	r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4c:	7f1a      	ldrb	r2, [r3, #28]
 800bd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd50:	7f5b      	ldrb	r3, [r3, #29]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d325      	bcc.n	800bda2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800bd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd58:	2200      	movs	r2, #0
 800bd5a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800bd5c:	4b1f      	ldr	r3, [pc, #124]	@ (800bddc <tcp_slowtmr+0x5a8>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00b      	beq.n	800bd84 <tcp_slowtmr+0x550>
 800bd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd74:	6912      	ldr	r2, [r2, #16]
 800bd76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800bd82:	e002      	b.n	800bd8a <tcp_slowtmr+0x556>
 800bd84:	2300      	movs	r3, #0
 800bd86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800bd8a:	4b14      	ldr	r3, [pc, #80]	@ (800bddc <tcp_slowtmr+0x5a8>)
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f47f ad62 	bne.w	800b858 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bd94:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d102      	bne.n	800bda2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800bd9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd9e:	f003 fb7b 	bl	800f498 <tcp_output>
  while (pcb != NULL) {
 800bda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f47f ad5e 	bne.w	800b866 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800bdae:	4b0c      	ldr	r3, [pc, #48]	@ (800bde0 <tcp_slowtmr+0x5ac>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800bdb4:	e069      	b.n	800be8a <tcp_slowtmr+0x656>
 800bdb6:	bf00      	nop
 800bdb8:	2000d0c4 	.word	0x2000d0c4
 800bdbc:	000a4cb8 	.word	0x000a4cb8
 800bdc0:	10624dd3 	.word	0x10624dd3
 800bdc4:	000124f8 	.word	0x000124f8
 800bdc8:	2000d0d0 	.word	0x2000d0d0
 800bdcc:	08016dcc 	.word	0x08016dcc
 800bdd0:	08017204 	.word	0x08017204
 800bdd4:	08016e10 	.word	0x08016e10
 800bdd8:	08017230 	.word	0x08017230
 800bddc:	2000d0d8 	.word	0x2000d0d8
 800bde0:	2000d0d4 	.word	0x2000d0d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde6:	7d1b      	ldrb	r3, [r3, #20]
 800bde8:	2b0a      	cmp	r3, #10
 800bdea:	d006      	beq.n	800bdfa <tcp_slowtmr+0x5c6>
 800bdec:	4b2b      	ldr	r3, [pc, #172]	@ (800be9c <tcp_slowtmr+0x668>)
 800bdee:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800bdf2:	492b      	ldr	r1, [pc, #172]	@ (800bea0 <tcp_slowtmr+0x66c>)
 800bdf4:	482b      	ldr	r0, [pc, #172]	@ (800bea4 <tcp_slowtmr+0x670>)
 800bdf6:	f009 faff 	bl	80153f8 <iprintf>
    pcb_remove = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800be00:	4b29      	ldr	r3, [pc, #164]	@ (800bea8 <tcp_slowtmr+0x674>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be06:	6a1b      	ldr	r3, [r3, #32]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	2bf0      	cmp	r3, #240	@ 0xf0
 800be0c:	d904      	bls.n	800be18 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800be0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be12:	3301      	adds	r3, #1
 800be14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800be18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d02f      	beq.n	800be80 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800be20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be22:	f000 fb2b 	bl	800c47c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800be26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d010      	beq.n	800be4e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800be2c:	4b1f      	ldr	r3, [pc, #124]	@ (800beac <tcp_slowtmr+0x678>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be32:	429a      	cmp	r2, r3
 800be34:	d106      	bne.n	800be44 <tcp_slowtmr+0x610>
 800be36:	4b19      	ldr	r3, [pc, #100]	@ (800be9c <tcp_slowtmr+0x668>)
 800be38:	f240 52af 	movw	r2, #1455	@ 0x5af
 800be3c:	491c      	ldr	r1, [pc, #112]	@ (800beb0 <tcp_slowtmr+0x67c>)
 800be3e:	4819      	ldr	r0, [pc, #100]	@ (800bea4 <tcp_slowtmr+0x670>)
 800be40:	f009 fada 	bl	80153f8 <iprintf>
        prev->next = pcb->next;
 800be44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be46:	68da      	ldr	r2, [r3, #12]
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	60da      	str	r2, [r3, #12]
 800be4c:	e00f      	b.n	800be6e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800be4e:	4b17      	ldr	r3, [pc, #92]	@ (800beac <tcp_slowtmr+0x678>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be54:	429a      	cmp	r2, r3
 800be56:	d006      	beq.n	800be66 <tcp_slowtmr+0x632>
 800be58:	4b10      	ldr	r3, [pc, #64]	@ (800be9c <tcp_slowtmr+0x668>)
 800be5a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800be5e:	4915      	ldr	r1, [pc, #84]	@ (800beb4 <tcp_slowtmr+0x680>)
 800be60:	4810      	ldr	r0, [pc, #64]	@ (800bea4 <tcp_slowtmr+0x670>)
 800be62:	f009 fac9 	bl	80153f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800be66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	4a10      	ldr	r2, [pc, #64]	@ (800beac <tcp_slowtmr+0x678>)
 800be6c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800be6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be70:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800be72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800be78:	69f8      	ldr	r0, [r7, #28]
 800be7a:	f7ff f93d 	bl	800b0f8 <tcp_free>
 800be7e:	e004      	b.n	800be8a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800be80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be82:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800be8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1a9      	bne.n	800bde4 <tcp_slowtmr+0x5b0>
    }
  }
}
 800be90:	bf00      	nop
 800be92:	bf00      	nop
 800be94:	3730      	adds	r7, #48	@ 0x30
 800be96:	46bd      	mov	sp, r7
 800be98:	bdb0      	pop	{r4, r5, r7, pc}
 800be9a:	bf00      	nop
 800be9c:	08016dcc 	.word	0x08016dcc
 800bea0:	0801725c 	.word	0x0801725c
 800bea4:	08016e10 	.word	0x08016e10
 800bea8:	2000d0c4 	.word	0x2000d0c4
 800beac:	2000d0d4 	.word	0x2000d0d4
 800beb0:	0801728c 	.word	0x0801728c
 800beb4:	080172b4 	.word	0x080172b4

0800beb8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bebe:	4b2d      	ldr	r3, [pc, #180]	@ (800bf74 <tcp_fasttmr+0xbc>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	4b2b      	ldr	r3, [pc, #172]	@ (800bf74 <tcp_fasttmr+0xbc>)
 800bec8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800beca:	4b2b      	ldr	r3, [pc, #172]	@ (800bf78 <tcp_fasttmr+0xc0>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bed0:	e048      	b.n	800bf64 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7f9a      	ldrb	r2, [r3, #30]
 800bed6:	4b27      	ldr	r3, [pc, #156]	@ (800bf74 <tcp_fasttmr+0xbc>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d03f      	beq.n	800bf5e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bede:	4b25      	ldr	r3, [pc, #148]	@ (800bf74 <tcp_fasttmr+0xbc>)
 800bee0:	781a      	ldrb	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	8b5b      	ldrh	r3, [r3, #26]
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d010      	beq.n	800bf14 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	8b5b      	ldrh	r3, [r3, #26]
 800bef6:	f043 0302 	orr.w	r3, r3, #2
 800befa:	b29a      	uxth	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f003 fac9 	bl	800f498 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	8b5b      	ldrh	r3, [r3, #26]
 800bf0a:	f023 0303 	bic.w	r3, r3, #3
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	8b5b      	ldrh	r3, [r3, #26]
 800bf18:	f003 0308 	and.w	r3, r3, #8
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d009      	beq.n	800bf34 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	8b5b      	ldrh	r3, [r3, #26]
 800bf24:	f023 0308 	bic.w	r3, r3, #8
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff fa76 	bl	800b420 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00a      	beq.n	800bf58 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bf42:	4b0e      	ldr	r3, [pc, #56]	@ (800bf7c <tcp_fasttmr+0xc4>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 f819 	bl	800bf80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bf4e:	4b0b      	ldr	r3, [pc, #44]	@ (800bf7c <tcp_fasttmr+0xc4>)
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d000      	beq.n	800bf58 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bf56:	e7b8      	b.n	800beca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	607b      	str	r3, [r7, #4]
 800bf5c:	e002      	b.n	800bf64 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1b3      	bne.n	800bed2 <tcp_fasttmr+0x1a>
    }
  }
}
 800bf6a:	bf00      	nop
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	2000d0da 	.word	0x2000d0da
 800bf78:	2000d0d0 	.word	0x2000d0d0
 800bf7c:	2000d0d8 	.word	0x2000d0d8

0800bf80 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bf80:	b590      	push	{r4, r7, lr}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d109      	bne.n	800bfa2 <tcp_process_refused_data+0x22>
 800bf8e:	4b37      	ldr	r3, [pc, #220]	@ (800c06c <tcp_process_refused_data+0xec>)
 800bf90:	f240 6209 	movw	r2, #1545	@ 0x609
 800bf94:	4936      	ldr	r1, [pc, #216]	@ (800c070 <tcp_process_refused_data+0xf0>)
 800bf96:	4837      	ldr	r0, [pc, #220]	@ (800c074 <tcp_process_refused_data+0xf4>)
 800bf98:	f009 fa2e 	bl	80153f8 <iprintf>
 800bf9c:	f06f 030f 	mvn.w	r3, #15
 800bfa0:	e060      	b.n	800c064 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bfa6:	7b5b      	ldrb	r3, [r3, #13]
 800bfa8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bfae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00b      	beq.n	800bfd8 <tcp_process_refused_data+0x58>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6918      	ldr	r0, [r3, #16]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	47a0      	blx	r4
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73fb      	strb	r3, [r7, #15]
 800bfd6:	e007      	b.n	800bfe8 <tcp_process_refused_data+0x68>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	2000      	movs	r0, #0
 800bfe0:	f000 f8a4 	bl	800c12c <tcp_recv_null>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bfe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d12a      	bne.n	800c046 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bff0:	7bbb      	ldrb	r3, [r7, #14]
 800bff2:	f003 0320 	and.w	r3, r3, #32
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d033      	beq.n	800c062 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bffe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c002:	d005      	beq.n	800c010 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c008:	3301      	adds	r3, #1
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00b      	beq.n	800c032 <tcp_process_refused_data+0xb2>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6918      	ldr	r0, [r3, #16]
 800c024:	2300      	movs	r3, #0
 800c026:	2200      	movs	r2, #0
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	47a0      	blx	r4
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]
 800c030:	e001      	b.n	800c036 <tcp_process_refused_data+0xb6>
 800c032:	2300      	movs	r3, #0
 800c034:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c03a:	f113 0f0d 	cmn.w	r3, #13
 800c03e:	d110      	bne.n	800c062 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c040:	f06f 030c 	mvn.w	r3, #12
 800c044:	e00e      	b.n	800c064 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c04a:	f113 0f0d 	cmn.w	r3, #13
 800c04e:	d102      	bne.n	800c056 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c050:	f06f 030c 	mvn.w	r3, #12
 800c054:	e006      	b.n	800c064 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800c05c:	f06f 0304 	mvn.w	r3, #4
 800c060:	e000      	b.n	800c064 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd90      	pop	{r4, r7, pc}
 800c06c:	08016dcc 	.word	0x08016dcc
 800c070:	080172dc 	.word	0x080172dc
 800c074:	08016e10 	.word	0x08016e10

0800c078 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c080:	e007      	b.n	800c092 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f80a 	bl	800c0a2 <tcp_seg_free>
    seg = next;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1f4      	bne.n	800c082 <tcp_segs_free+0xa>
  }
}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00c      	beq.n	800c0ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d004      	beq.n	800c0c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fd6b 	bl	800ab98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	2003      	movs	r0, #3
 800c0c6:	f7fd ff05 	bl	8009ed4 <memp_free>
  }
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
	...

0800c0d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <tcp_seg_copy+0x1c>
 800c0e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c120 <tcp_seg_copy+0x4c>)
 800c0e4:	f240 6282 	movw	r2, #1666	@ 0x682
 800c0e8:	490e      	ldr	r1, [pc, #56]	@ (800c124 <tcp_seg_copy+0x50>)
 800c0ea:	480f      	ldr	r0, [pc, #60]	@ (800c128 <tcp_seg_copy+0x54>)
 800c0ec:	f009 f984 	bl	80153f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c0f0:	2003      	movs	r0, #3
 800c0f2:	f7fd fe7f 	bl	8009df4 <memp_malloc>
 800c0f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <tcp_seg_copy+0x2e>
    return NULL;
 800c0fe:	2300      	movs	r3, #0
 800c100:	e00a      	b.n	800c118 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c102:	2210      	movs	r2, #16
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f009 faaf 	bl	801566a <memcpy>
  pbuf_ref(cseg->p);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe fde1 	bl	800acd8 <pbuf_ref>
  return cseg;
 800c116:	68fb      	ldr	r3, [r7, #12]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	08016dcc 	.word	0x08016dcc
 800c124:	08017320 	.word	0x08017320
 800c128:	08016e10 	.word	0x08016e10

0800c12c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d109      	bne.n	800c154 <tcp_recv_null+0x28>
 800c140:	4b12      	ldr	r3, [pc, #72]	@ (800c18c <tcp_recv_null+0x60>)
 800c142:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c146:	4912      	ldr	r1, [pc, #72]	@ (800c190 <tcp_recv_null+0x64>)
 800c148:	4812      	ldr	r0, [pc, #72]	@ (800c194 <tcp_recv_null+0x68>)
 800c14a:	f009 f955 	bl	80153f8 <iprintf>
 800c14e:	f06f 030f 	mvn.w	r3, #15
 800c152:	e016      	b.n	800c182 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d009      	beq.n	800c16e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	891b      	ldrh	r3, [r3, #8]
 800c15e:	4619      	mov	r1, r3
 800c160:	68b8      	ldr	r0, [r7, #8]
 800c162:	f7ff fb17 	bl	800b794 <tcp_recved>
    pbuf_free(p);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7fe fd16 	bl	800ab98 <pbuf_free>
 800c16c:	e008      	b.n	800c180 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c16e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d104      	bne.n	800c180 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c176:	68b8      	ldr	r0, [r7, #8]
 800c178:	f7ff f9bc 	bl	800b4f4 <tcp_close>
 800c17c:	4603      	mov	r3, r0
 800c17e:	e000      	b.n	800c182 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	08016dcc 	.word	0x08016dcc
 800c190:	0801733c 	.word	0x0801733c
 800c194:	08016e10 	.word	0x08016e10

0800c198 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c1a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	db01      	blt.n	800c1ae <tcp_kill_prio+0x16>
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	e000      	b.n	800c1b0 <tcp_kill_prio+0x18>
 800c1ae:	237f      	movs	r3, #127	@ 0x7f
 800c1b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c1b2:	7afb      	ldrb	r3, [r7, #11]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d034      	beq.n	800c222 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c1b8:	7afb      	ldrb	r3, [r7, #11]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1c6:	4b19      	ldr	r3, [pc, #100]	@ (800c22c <tcp_kill_prio+0x94>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	e01f      	b.n	800c20e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	7d5b      	ldrb	r3, [r3, #21]
 800c1d2:	7afa      	ldrb	r2, [r7, #11]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d80c      	bhi.n	800c1f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c1dc:	7afa      	ldrb	r2, [r7, #11]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d112      	bne.n	800c208 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c1e2:	4b13      	ldr	r3, [pc, #76]	@ (800c230 <tcp_kill_prio+0x98>)
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	6a1b      	ldr	r3, [r3, #32]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d80a      	bhi.n	800c208 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c1f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c230 <tcp_kill_prio+0x98>)
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	7d5b      	ldrb	r3, [r3, #21]
 800c206:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1dc      	bne.n	800c1ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c21a:	6938      	ldr	r0, [r7, #16]
 800c21c:	f7ff fa54 	bl	800b6c8 <tcp_abort>
 800c220:	e000      	b.n	800c224 <tcp_kill_prio+0x8c>
    return;
 800c222:	bf00      	nop
  }
}
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	2000d0d0 	.word	0x2000d0d0
 800c230:	2000d0c4 	.word	0x2000d0c4

0800c234 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	4603      	mov	r3, r0
 800c23c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c23e:	79fb      	ldrb	r3, [r7, #7]
 800c240:	2b08      	cmp	r3, #8
 800c242:	d009      	beq.n	800c258 <tcp_kill_state+0x24>
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	2b09      	cmp	r3, #9
 800c248:	d006      	beq.n	800c258 <tcp_kill_state+0x24>
 800c24a:	4b1a      	ldr	r3, [pc, #104]	@ (800c2b4 <tcp_kill_state+0x80>)
 800c24c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800c250:	4919      	ldr	r1, [pc, #100]	@ (800c2b8 <tcp_kill_state+0x84>)
 800c252:	481a      	ldr	r0, [pc, #104]	@ (800c2bc <tcp_kill_state+0x88>)
 800c254:	f009 f8d0 	bl	80153f8 <iprintf>

  inactivity = 0;
 800c258:	2300      	movs	r3, #0
 800c25a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c25c:	2300      	movs	r3, #0
 800c25e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c260:	4b17      	ldr	r3, [pc, #92]	@ (800c2c0 <tcp_kill_state+0x8c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	617b      	str	r3, [r7, #20]
 800c266:	e017      	b.n	800c298 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	7d1b      	ldrb	r3, [r3, #20]
 800c26c:	79fa      	ldrb	r2, [r7, #7]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d10f      	bne.n	800c292 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c272:	4b14      	ldr	r3, [pc, #80]	@ (800c2c4 <tcp_kill_state+0x90>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d807      	bhi.n	800c292 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c282:	4b10      	ldr	r3, [pc, #64]	@ (800c2c4 <tcp_kill_state+0x90>)
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	617b      	str	r3, [r7, #20]
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1e4      	bne.n	800c268 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d003      	beq.n	800c2ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	6938      	ldr	r0, [r7, #16]
 800c2a8:	f7ff f950 	bl	800b54c <tcp_abandon>
  }
}
 800c2ac:	bf00      	nop
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	08016dcc 	.word	0x08016dcc
 800c2b8:	08017358 	.word	0x08017358
 800c2bc:	08016e10 	.word	0x08016e10
 800c2c0:	2000d0d0 	.word	0x2000d0d0
 800c2c4:	2000d0c4 	.word	0x2000d0c4

0800c2c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2d6:	4b12      	ldr	r3, [pc, #72]	@ (800c320 <tcp_kill_timewait+0x58>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	60fb      	str	r3, [r7, #12]
 800c2dc:	e012      	b.n	800c304 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c2de:	4b11      	ldr	r3, [pc, #68]	@ (800c324 <tcp_kill_timewait+0x5c>)
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6a1b      	ldr	r3, [r3, #32]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d807      	bhi.n	800c2fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c324 <tcp_kill_timewait+0x5c>)
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6a1b      	ldr	r3, [r3, #32]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e9      	bne.n	800c2de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c310:	68b8      	ldr	r0, [r7, #8]
 800c312:	f7ff f9d9 	bl	800b6c8 <tcp_abort>
  }
}
 800c316:	bf00      	nop
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	2000d0d4 	.word	0x2000d0d4
 800c324:	2000d0c4 	.word	0x2000d0c4

0800c328 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c32e:	4b10      	ldr	r3, [pc, #64]	@ (800c370 <tcp_handle_closepend+0x48>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c334:	e014      	b.n	800c360 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	8b5b      	ldrh	r3, [r3, #26]
 800c340:	f003 0308 	and.w	r3, r3, #8
 800c344:	2b00      	cmp	r3, #0
 800c346:	d009      	beq.n	800c35c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	8b5b      	ldrh	r3, [r3, #26]
 800c34c:	f023 0308 	bic.w	r3, r3, #8
 800c350:	b29a      	uxth	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff f862 	bl	800b420 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1e7      	bne.n	800c336 <tcp_handle_closepend+0xe>
  }
}
 800c366:	bf00      	nop
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	2000d0d0 	.word	0x2000d0d0

0800c374 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c37e:	2001      	movs	r0, #1
 800c380:	f7fd fd38 	bl	8009df4 <memp_malloc>
 800c384:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d126      	bne.n	800c3da <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c38c:	f7ff ffcc 	bl	800c328 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c390:	f7ff ff9a 	bl	800c2c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c394:	2001      	movs	r0, #1
 800c396:	f7fd fd2d 	bl	8009df4 <memp_malloc>
 800c39a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d11b      	bne.n	800c3da <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c3a2:	2009      	movs	r0, #9
 800c3a4:	f7ff ff46 	bl	800c234 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c3a8:	2001      	movs	r0, #1
 800c3aa:	f7fd fd23 	bl	8009df4 <memp_malloc>
 800c3ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d111      	bne.n	800c3da <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c3b6:	2008      	movs	r0, #8
 800c3b8:	f7ff ff3c 	bl	800c234 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c3bc:	2001      	movs	r0, #1
 800c3be:	f7fd fd19 	bl	8009df4 <memp_malloc>
 800c3c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d107      	bne.n	800c3da <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c3ca:	79fb      	ldrb	r3, [r7, #7]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fee3 	bl	800c198 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c3d2:	2001      	movs	r0, #1
 800c3d4:	f7fd fd0e 	bl	8009df4 <memp_malloc>
 800c3d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d03f      	beq.n	800c460 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c3e0:	229c      	movs	r2, #156	@ 0x9c
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f009 f86c 	bl	80154c2 <memset>
    pcb->prio = prio;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	79fa      	ldrb	r2, [r7, #7]
 800c3ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c3f6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c400:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	22ff      	movs	r2, #255	@ 0xff
 800c40e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c416:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2206      	movs	r2, #6
 800c41c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2206      	movs	r2, #6
 800c424:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c42c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2201      	movs	r2, #1
 800c432:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800c436:	4b0d      	ldr	r3, [pc, #52]	@ (800c46c <tcp_alloc+0xf8>)
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c43e:	4b0c      	ldr	r3, [pc, #48]	@ (800c470 <tcp_alloc+0xfc>)
 800c440:	781a      	ldrb	r2, [r3, #0]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c44c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4a08      	ldr	r2, [pc, #32]	@ (800c474 <tcp_alloc+0x100>)
 800c454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4a07      	ldr	r2, [pc, #28]	@ (800c478 <tcp_alloc+0x104>)
 800c45c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c460:	68fb      	ldr	r3, [r7, #12]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	2000d0c4 	.word	0x2000d0c4
 800c470:	2000d0da 	.word	0x2000d0da
 800c474:	0800c12d 	.word	0x0800c12d
 800c478:	006ddd00 	.word	0x006ddd00

0800c47c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d107      	bne.n	800c49a <tcp_pcb_purge+0x1e>
 800c48a:	4b21      	ldr	r3, [pc, #132]	@ (800c510 <tcp_pcb_purge+0x94>)
 800c48c:	f640 0251 	movw	r2, #2129	@ 0x851
 800c490:	4920      	ldr	r1, [pc, #128]	@ (800c514 <tcp_pcb_purge+0x98>)
 800c492:	4821      	ldr	r0, [pc, #132]	@ (800c518 <tcp_pcb_purge+0x9c>)
 800c494:	f008 ffb0 	bl	80153f8 <iprintf>
 800c498:	e037      	b.n	800c50a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7d1b      	ldrb	r3, [r3, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d033      	beq.n	800c50a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c4a6:	2b0a      	cmp	r3, #10
 800c4a8:	d02f      	beq.n	800c50a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d02b      	beq.n	800c50a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d007      	beq.n	800c4ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fb6a 	bl	800ab98 <pbuf_free>
      pcb->refused_data = NULL;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d002      	beq.n	800c4d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f986 	bl	800c7e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c4de:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7ff fdc7 	bl	800c078 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7ff fdc2 	bl	800c078 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	08016dcc 	.word	0x08016dcc
 800c514:	08017418 	.word	0x08017418
 800c518:	08016e10 	.word	0x08016e10

0800c51c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d106      	bne.n	800c53a <tcp_pcb_remove+0x1e>
 800c52c:	4b3e      	ldr	r3, [pc, #248]	@ (800c628 <tcp_pcb_remove+0x10c>)
 800c52e:	f640 0283 	movw	r2, #2179	@ 0x883
 800c532:	493e      	ldr	r1, [pc, #248]	@ (800c62c <tcp_pcb_remove+0x110>)
 800c534:	483e      	ldr	r0, [pc, #248]	@ (800c630 <tcp_pcb_remove+0x114>)
 800c536:	f008 ff5f 	bl	80153f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d106      	bne.n	800c54e <tcp_pcb_remove+0x32>
 800c540:	4b39      	ldr	r3, [pc, #228]	@ (800c628 <tcp_pcb_remove+0x10c>)
 800c542:	f640 0284 	movw	r2, #2180	@ 0x884
 800c546:	493b      	ldr	r1, [pc, #236]	@ (800c634 <tcp_pcb_remove+0x118>)
 800c548:	4839      	ldr	r0, [pc, #228]	@ (800c630 <tcp_pcb_remove+0x114>)
 800c54a:	f008 ff55 	bl	80153f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	429a      	cmp	r2, r3
 800c556:	d105      	bne.n	800c564 <tcp_pcb_remove+0x48>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68da      	ldr	r2, [r3, #12]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	e013      	b.n	800c58c <tcp_pcb_remove+0x70>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	60fb      	str	r3, [r7, #12]
 800c56a:	e00c      	b.n	800c586 <tcp_pcb_remove+0x6a>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d104      	bne.n	800c580 <tcp_pcb_remove+0x64>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68da      	ldr	r2, [r3, #12]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	60da      	str	r2, [r3, #12]
 800c57e:	e005      	b.n	800c58c <tcp_pcb_remove+0x70>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1ef      	bne.n	800c56c <tcp_pcb_remove+0x50>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2200      	movs	r2, #0
 800c590:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c592:	6838      	ldr	r0, [r7, #0]
 800c594:	f7ff ff72 	bl	800c47c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	7d1b      	ldrb	r3, [r3, #20]
 800c59c:	2b0a      	cmp	r3, #10
 800c59e:	d013      	beq.n	800c5c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d00f      	beq.n	800c5c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	8b5b      	ldrh	r3, [r3, #26]
 800c5ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d009      	beq.n	800c5c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	8b5b      	ldrh	r3, [r3, #26]
 800c5b8:	f043 0302 	orr.w	r3, r3, #2
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c5c2:	6838      	ldr	r0, [r7, #0]
 800c5c4:	f002 ff68 	bl	800f498 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	7d1b      	ldrb	r3, [r3, #20]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d020      	beq.n	800c612 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d006      	beq.n	800c5e6 <tcp_pcb_remove+0xca>
 800c5d8:	4b13      	ldr	r3, [pc, #76]	@ (800c628 <tcp_pcb_remove+0x10c>)
 800c5da:	f640 0293 	movw	r2, #2195	@ 0x893
 800c5de:	4916      	ldr	r1, [pc, #88]	@ (800c638 <tcp_pcb_remove+0x11c>)
 800c5e0:	4813      	ldr	r0, [pc, #76]	@ (800c630 <tcp_pcb_remove+0x114>)
 800c5e2:	f008 ff09 	bl	80153f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d006      	beq.n	800c5fc <tcp_pcb_remove+0xe0>
 800c5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c628 <tcp_pcb_remove+0x10c>)
 800c5f0:	f640 0294 	movw	r2, #2196	@ 0x894
 800c5f4:	4911      	ldr	r1, [pc, #68]	@ (800c63c <tcp_pcb_remove+0x120>)
 800c5f6:	480e      	ldr	r0, [pc, #56]	@ (800c630 <tcp_pcb_remove+0x114>)
 800c5f8:	f008 fefe 	bl	80153f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c600:	2b00      	cmp	r3, #0
 800c602:	d006      	beq.n	800c612 <tcp_pcb_remove+0xf6>
 800c604:	4b08      	ldr	r3, [pc, #32]	@ (800c628 <tcp_pcb_remove+0x10c>)
 800c606:	f640 0296 	movw	r2, #2198	@ 0x896
 800c60a:	490d      	ldr	r1, [pc, #52]	@ (800c640 <tcp_pcb_remove+0x124>)
 800c60c:	4808      	ldr	r0, [pc, #32]	@ (800c630 <tcp_pcb_remove+0x114>)
 800c60e:	f008 fef3 	bl	80153f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2200      	movs	r2, #0
 800c616:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2200      	movs	r2, #0
 800c61c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	08016dcc 	.word	0x08016dcc
 800c62c:	08017434 	.word	0x08017434
 800c630:	08016e10 	.word	0x08016e10
 800c634:	08017450 	.word	0x08017450
 800c638:	08017470 	.word	0x08017470
 800c63c:	08017488 	.word	0x08017488
 800c640:	080174a4 	.word	0x080174a4

0800c644 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d106      	bne.n	800c660 <tcp_next_iss+0x1c>
 800c652:	4b0a      	ldr	r3, [pc, #40]	@ (800c67c <tcp_next_iss+0x38>)
 800c654:	f640 02af 	movw	r2, #2223	@ 0x8af
 800c658:	4909      	ldr	r1, [pc, #36]	@ (800c680 <tcp_next_iss+0x3c>)
 800c65a:	480a      	ldr	r0, [pc, #40]	@ (800c684 <tcp_next_iss+0x40>)
 800c65c:	f008 fecc 	bl	80153f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c660:	4b09      	ldr	r3, [pc, #36]	@ (800c688 <tcp_next_iss+0x44>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	4b09      	ldr	r3, [pc, #36]	@ (800c68c <tcp_next_iss+0x48>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4413      	add	r3, r2
 800c66a:	4a07      	ldr	r2, [pc, #28]	@ (800c688 <tcp_next_iss+0x44>)
 800c66c:	6013      	str	r3, [r2, #0]
  return iss;
 800c66e:	4b06      	ldr	r3, [pc, #24]	@ (800c688 <tcp_next_iss+0x44>)
 800c670:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	08016dcc 	.word	0x08016dcc
 800c680:	080174bc 	.word	0x080174bc
 800c684:	08016e10 	.word	0x08016e10
 800c688:	20000028 	.word	0x20000028
 800c68c:	2000d0c4 	.word	0x2000d0c4

0800c690 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b086      	sub	sp, #24
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
 800c69c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d106      	bne.n	800c6b2 <tcp_eff_send_mss_netif+0x22>
 800c6a4:	4b14      	ldr	r3, [pc, #80]	@ (800c6f8 <tcp_eff_send_mss_netif+0x68>)
 800c6a6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800c6aa:	4914      	ldr	r1, [pc, #80]	@ (800c6fc <tcp_eff_send_mss_netif+0x6c>)
 800c6ac:	4814      	ldr	r0, [pc, #80]	@ (800c700 <tcp_eff_send_mss_netif+0x70>)
 800c6ae:	f008 fea3 	bl	80153f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c6b8:	89fb      	ldrh	r3, [r7, #14]
 800c6ba:	e019      	b.n	800c6f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c6c2:	8afb      	ldrh	r3, [r7, #22]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d012      	beq.n	800c6ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c6c8:	2328      	movs	r3, #40	@ 0x28
 800c6ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c6cc:	8afa      	ldrh	r2, [r7, #22]
 800c6ce:	8abb      	ldrh	r3, [r7, #20]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d904      	bls.n	800c6de <tcp_eff_send_mss_netif+0x4e>
 800c6d4:	8afa      	ldrh	r2, [r7, #22]
 800c6d6:	8abb      	ldrh	r3, [r7, #20]
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	e000      	b.n	800c6e0 <tcp_eff_send_mss_netif+0x50>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c6e2:	8a7a      	ldrh	r2, [r7, #18]
 800c6e4:	89fb      	ldrh	r3, [r7, #14]
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	bf28      	it	cs
 800c6ea:	4613      	movcs	r3, r2
 800c6ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c6ee:	89fb      	ldrh	r3, [r7, #14]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3718      	adds	r7, #24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	08016dcc 	.word	0x08016dcc
 800c6fc:	080174d8 	.word	0x080174d8
 800c700:	08016e10 	.word	0x08016e10

0800c704 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d119      	bne.n	800c74c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c718:	4b10      	ldr	r3, [pc, #64]	@ (800c75c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c71a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800c71e:	4910      	ldr	r1, [pc, #64]	@ (800c760 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c720:	4810      	ldr	r0, [pc, #64]	@ (800c764 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c722:	f008 fe69 	bl	80153f8 <iprintf>

  while (pcb != NULL) {
 800c726:	e011      	b.n	800c74c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d108      	bne.n	800c746 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f7fe ffc4 	bl	800b6c8 <tcp_abort>
      pcb = next;
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	e002      	b.n	800c74c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1ea      	bne.n	800c728 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c752:	bf00      	nop
 800c754:	bf00      	nop
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	08016dcc 	.word	0x08016dcc
 800c760:	08017500 	.word	0x08017500
 800c764:	08016e10 	.word	0x08016e10

0800c768 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d02a      	beq.n	800c7ce <tcp_netif_ip_addr_changed+0x66>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d026      	beq.n	800c7ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c780:	4b15      	ldr	r3, [pc, #84]	@ (800c7d8 <tcp_netif_ip_addr_changed+0x70>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff ffbc 	bl	800c704 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c78c:	4b13      	ldr	r3, [pc, #76]	@ (800c7dc <tcp_netif_ip_addr_changed+0x74>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff ffb6 	bl	800c704 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d017      	beq.n	800c7ce <tcp_netif_ip_addr_changed+0x66>
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d013      	beq.n	800c7ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c7a6:	4b0e      	ldr	r3, [pc, #56]	@ (800c7e0 <tcp_netif_ip_addr_changed+0x78>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	e00c      	b.n	800c7c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d103      	bne.n	800c7c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1ef      	bne.n	800c7ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c7ce:	bf00      	nop
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	2000d0d0 	.word	0x2000d0d0
 800c7dc:	2000d0c8 	.word	0x2000d0c8
 800c7e0:	2000d0cc 	.word	0x2000d0cc

0800c7e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d007      	beq.n	800c804 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff fc3d 	bl	800c078 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c80c:	b590      	push	{r4, r7, lr}
 800c80e:	b08d      	sub	sp, #52	@ 0x34
 800c810:	af04      	add	r7, sp, #16
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d105      	bne.n	800c828 <tcp_input+0x1c>
 800c81c:	4b9b      	ldr	r3, [pc, #620]	@ (800ca8c <tcp_input+0x280>)
 800c81e:	2283      	movs	r2, #131	@ 0x83
 800c820:	499b      	ldr	r1, [pc, #620]	@ (800ca90 <tcp_input+0x284>)
 800c822:	489c      	ldr	r0, [pc, #624]	@ (800ca94 <tcp_input+0x288>)
 800c824:	f008 fde8 	bl	80153f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	4a9a      	ldr	r2, [pc, #616]	@ (800ca98 <tcp_input+0x28c>)
 800c82e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	895b      	ldrh	r3, [r3, #10]
 800c834:	2b13      	cmp	r3, #19
 800c836:	f240 83d1 	bls.w	800cfdc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c83a:	4b98      	ldr	r3, [pc, #608]	@ (800ca9c <tcp_input+0x290>)
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	4a97      	ldr	r2, [pc, #604]	@ (800ca9c <tcp_input+0x290>)
 800c840:	6812      	ldr	r2, [r2, #0]
 800c842:	4611      	mov	r1, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f007 fd81 	bl	801434c <ip4_addr_isbroadcast_u32>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f040 83c7 	bne.w	800cfe0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c852:	4b92      	ldr	r3, [pc, #584]	@ (800ca9c <tcp_input+0x290>)
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c85a:	2be0      	cmp	r3, #224	@ 0xe0
 800c85c:	f000 83c0 	beq.w	800cfe0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c860:	4b8d      	ldr	r3, [pc, #564]	@ (800ca98 <tcp_input+0x28c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	899b      	ldrh	r3, [r3, #12]
 800c866:	b29b      	uxth	r3, r3
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fc fe4f 	bl	800950c <lwip_htons>
 800c86e:	4603      	mov	r3, r0
 800c870:	0b1b      	lsrs	r3, r3, #12
 800c872:	b29b      	uxth	r3, r3
 800c874:	b2db      	uxtb	r3, r3
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c87a:	7cbb      	ldrb	r3, [r7, #18]
 800c87c:	2b13      	cmp	r3, #19
 800c87e:	f240 83b1 	bls.w	800cfe4 <tcp_input+0x7d8>
 800c882:	7cbb      	ldrb	r3, [r7, #18]
 800c884:	b29a      	uxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	891b      	ldrh	r3, [r3, #8]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	f200 83aa 	bhi.w	800cfe4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c890:	7cbb      	ldrb	r3, [r7, #18]
 800c892:	b29b      	uxth	r3, r3
 800c894:	3b14      	subs	r3, #20
 800c896:	b29a      	uxth	r2, r3
 800c898:	4b81      	ldr	r3, [pc, #516]	@ (800caa0 <tcp_input+0x294>)
 800c89a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c89c:	4b81      	ldr	r3, [pc, #516]	@ (800caa4 <tcp_input+0x298>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	895a      	ldrh	r2, [r3, #10]
 800c8a6:	7cbb      	ldrb	r3, [r7, #18]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d309      	bcc.n	800c8c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c8ae:	4b7c      	ldr	r3, [pc, #496]	@ (800caa0 <tcp_input+0x294>)
 800c8b0:	881a      	ldrh	r2, [r3, #0]
 800c8b2:	4b7d      	ldr	r3, [pc, #500]	@ (800caa8 <tcp_input+0x29c>)
 800c8b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c8b6:	7cbb      	ldrb	r3, [r7, #18]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7fe f8e6 	bl	800aa8c <pbuf_remove_header>
 800c8c0:	e04e      	b.n	800c960 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d105      	bne.n	800c8d6 <tcp_input+0xca>
 800c8ca:	4b70      	ldr	r3, [pc, #448]	@ (800ca8c <tcp_input+0x280>)
 800c8cc:	22c2      	movs	r2, #194	@ 0xc2
 800c8ce:	4977      	ldr	r1, [pc, #476]	@ (800caac <tcp_input+0x2a0>)
 800c8d0:	4870      	ldr	r0, [pc, #448]	@ (800ca94 <tcp_input+0x288>)
 800c8d2:	f008 fd91 	bl	80153f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c8d6:	2114      	movs	r1, #20
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7fe f8d7 	bl	800aa8c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	895a      	ldrh	r2, [r3, #10]
 800c8e2:	4b71      	ldr	r3, [pc, #452]	@ (800caa8 <tcp_input+0x29c>)
 800c8e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c8e6:	4b6e      	ldr	r3, [pc, #440]	@ (800caa0 <tcp_input+0x294>)
 800c8e8:	881a      	ldrh	r2, [r3, #0]
 800c8ea:	4b6f      	ldr	r3, [pc, #444]	@ (800caa8 <tcp_input+0x29c>)
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c8f2:	4b6d      	ldr	r3, [pc, #436]	@ (800caa8 <tcp_input+0x29c>)
 800c8f4:	881b      	ldrh	r3, [r3, #0]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7fe f8c7 	bl	800aa8c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	895b      	ldrh	r3, [r3, #10]
 800c904:	8a3a      	ldrh	r2, [r7, #16]
 800c906:	429a      	cmp	r2, r3
 800c908:	f200 836e 	bhi.w	800cfe8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	4a64      	ldr	r2, [pc, #400]	@ (800caa4 <tcp_input+0x298>)
 800c914:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	8a3a      	ldrh	r2, [r7, #16]
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe f8b4 	bl	800aa8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	891a      	ldrh	r2, [r3, #8]
 800c928:	8a3b      	ldrh	r3, [r7, #16]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	895b      	ldrh	r3, [r3, #10]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d005      	beq.n	800c946 <tcp_input+0x13a>
 800c93a:	4b54      	ldr	r3, [pc, #336]	@ (800ca8c <tcp_input+0x280>)
 800c93c:	22df      	movs	r2, #223	@ 0xdf
 800c93e:	495c      	ldr	r1, [pc, #368]	@ (800cab0 <tcp_input+0x2a4>)
 800c940:	4854      	ldr	r0, [pc, #336]	@ (800ca94 <tcp_input+0x288>)
 800c942:	f008 fd59 	bl	80153f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	891a      	ldrh	r2, [r3, #8]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	891b      	ldrh	r3, [r3, #8]
 800c950:	429a      	cmp	r2, r3
 800c952:	d005      	beq.n	800c960 <tcp_input+0x154>
 800c954:	4b4d      	ldr	r3, [pc, #308]	@ (800ca8c <tcp_input+0x280>)
 800c956:	22e0      	movs	r2, #224	@ 0xe0
 800c958:	4956      	ldr	r1, [pc, #344]	@ (800cab4 <tcp_input+0x2a8>)
 800c95a:	484e      	ldr	r0, [pc, #312]	@ (800ca94 <tcp_input+0x288>)
 800c95c:	f008 fd4c 	bl	80153f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c960:	4b4d      	ldr	r3, [pc, #308]	@ (800ca98 <tcp_input+0x28c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	b29b      	uxth	r3, r3
 800c968:	4a4b      	ldr	r2, [pc, #300]	@ (800ca98 <tcp_input+0x28c>)
 800c96a:	6814      	ldr	r4, [r2, #0]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fc fdcd 	bl	800950c <lwip_htons>
 800c972:	4603      	mov	r3, r0
 800c974:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c976:	4b48      	ldr	r3, [pc, #288]	@ (800ca98 <tcp_input+0x28c>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	885b      	ldrh	r3, [r3, #2]
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	4a46      	ldr	r2, [pc, #280]	@ (800ca98 <tcp_input+0x28c>)
 800c980:	6814      	ldr	r4, [r2, #0]
 800c982:	4618      	mov	r0, r3
 800c984:	f7fc fdc2 	bl	800950c <lwip_htons>
 800c988:	4603      	mov	r3, r0
 800c98a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c98c:	4b42      	ldr	r3, [pc, #264]	@ (800ca98 <tcp_input+0x28c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	4a41      	ldr	r2, [pc, #260]	@ (800ca98 <tcp_input+0x28c>)
 800c994:	6814      	ldr	r4, [r2, #0]
 800c996:	4618      	mov	r0, r3
 800c998:	f7fc fdce 	bl	8009538 <lwip_htonl>
 800c99c:	4603      	mov	r3, r0
 800c99e:	6063      	str	r3, [r4, #4]
 800c9a0:	6863      	ldr	r3, [r4, #4]
 800c9a2:	4a45      	ldr	r2, [pc, #276]	@ (800cab8 <tcp_input+0x2ac>)
 800c9a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c9a6:	4b3c      	ldr	r3, [pc, #240]	@ (800ca98 <tcp_input+0x28c>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	4a3a      	ldr	r2, [pc, #232]	@ (800ca98 <tcp_input+0x28c>)
 800c9ae:	6814      	ldr	r4, [r2, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fc fdc1 	bl	8009538 <lwip_htonl>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	60a3      	str	r3, [r4, #8]
 800c9ba:	68a3      	ldr	r3, [r4, #8]
 800c9bc:	4a3f      	ldr	r2, [pc, #252]	@ (800cabc <tcp_input+0x2b0>)
 800c9be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c9c0:	4b35      	ldr	r3, [pc, #212]	@ (800ca98 <tcp_input+0x28c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	89db      	ldrh	r3, [r3, #14]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	4a33      	ldr	r2, [pc, #204]	@ (800ca98 <tcp_input+0x28c>)
 800c9ca:	6814      	ldr	r4, [r2, #0]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fc fd9d 	bl	800950c <lwip_htons>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c9d6:	4b30      	ldr	r3, [pc, #192]	@ (800ca98 <tcp_input+0x28c>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	899b      	ldrh	r3, [r3, #12]
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fc fd94 	bl	800950c <lwip_htons>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	4b34      	ldr	r3, [pc, #208]	@ (800cac0 <tcp_input+0x2b4>)
 800c9f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	891a      	ldrh	r2, [r3, #8]
 800c9f6:	4b33      	ldr	r3, [pc, #204]	@ (800cac4 <tcp_input+0x2b8>)
 800c9f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c9fa:	4b31      	ldr	r3, [pc, #196]	@ (800cac0 <tcp_input+0x2b4>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	f003 0303 	and.w	r3, r3, #3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00c      	beq.n	800ca20 <tcp_input+0x214>
    tcplen++;
 800ca06:	4b2f      	ldr	r3, [pc, #188]	@ (800cac4 <tcp_input+0x2b8>)
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	4b2d      	ldr	r3, [pc, #180]	@ (800cac4 <tcp_input+0x2b8>)
 800ca10:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	891a      	ldrh	r2, [r3, #8]
 800ca16:	4b2b      	ldr	r3, [pc, #172]	@ (800cac4 <tcp_input+0x2b8>)
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	f200 82e6 	bhi.w	800cfec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ca20:	2300      	movs	r3, #0
 800ca22:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca24:	4b28      	ldr	r3, [pc, #160]	@ (800cac8 <tcp_input+0x2bc>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	61fb      	str	r3, [r7, #28]
 800ca2a:	e09d      	b.n	800cb68 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	7d1b      	ldrb	r3, [r3, #20]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d105      	bne.n	800ca40 <tcp_input+0x234>
 800ca34:	4b15      	ldr	r3, [pc, #84]	@ (800ca8c <tcp_input+0x280>)
 800ca36:	22fb      	movs	r2, #251	@ 0xfb
 800ca38:	4924      	ldr	r1, [pc, #144]	@ (800cacc <tcp_input+0x2c0>)
 800ca3a:	4816      	ldr	r0, [pc, #88]	@ (800ca94 <tcp_input+0x288>)
 800ca3c:	f008 fcdc 	bl	80153f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	7d1b      	ldrb	r3, [r3, #20]
 800ca44:	2b0a      	cmp	r3, #10
 800ca46:	d105      	bne.n	800ca54 <tcp_input+0x248>
 800ca48:	4b10      	ldr	r3, [pc, #64]	@ (800ca8c <tcp_input+0x280>)
 800ca4a:	22fc      	movs	r2, #252	@ 0xfc
 800ca4c:	4920      	ldr	r1, [pc, #128]	@ (800cad0 <tcp_input+0x2c4>)
 800ca4e:	4811      	ldr	r0, [pc, #68]	@ (800ca94 <tcp_input+0x288>)
 800ca50:	f008 fcd2 	bl	80153f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	7d1b      	ldrb	r3, [r3, #20]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d105      	bne.n	800ca68 <tcp_input+0x25c>
 800ca5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca8c <tcp_input+0x280>)
 800ca5e:	22fd      	movs	r2, #253	@ 0xfd
 800ca60:	491c      	ldr	r1, [pc, #112]	@ (800cad4 <tcp_input+0x2c8>)
 800ca62:	480c      	ldr	r0, [pc, #48]	@ (800ca94 <tcp_input+0x288>)
 800ca64:	f008 fcc8 	bl	80153f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	7a1b      	ldrb	r3, [r3, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d033      	beq.n	800cad8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	7a1a      	ldrb	r2, [r3, #8]
 800ca74:	4b09      	ldr	r3, [pc, #36]	@ (800ca9c <tcp_input+0x290>)
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d029      	beq.n	800cad8 <tcp_input+0x2cc>
      prev = pcb;
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	61bb      	str	r3, [r7, #24]
      continue;
 800ca88:	e06b      	b.n	800cb62 <tcp_input+0x356>
 800ca8a:	bf00      	nop
 800ca8c:	08017534 	.word	0x08017534
 800ca90:	08017568 	.word	0x08017568
 800ca94:	08017580 	.word	0x08017580
 800ca98:	2000d0ec 	.word	0x2000d0ec
 800ca9c:	2000a188 	.word	0x2000a188
 800caa0:	2000d0f0 	.word	0x2000d0f0
 800caa4:	2000d0f4 	.word	0x2000d0f4
 800caa8:	2000d0f2 	.word	0x2000d0f2
 800caac:	080175a8 	.word	0x080175a8
 800cab0:	080175b8 	.word	0x080175b8
 800cab4:	080175c4 	.word	0x080175c4
 800cab8:	2000d0fc 	.word	0x2000d0fc
 800cabc:	2000d100 	.word	0x2000d100
 800cac0:	2000d108 	.word	0x2000d108
 800cac4:	2000d106 	.word	0x2000d106
 800cac8:	2000d0d0 	.word	0x2000d0d0
 800cacc:	080175e4 	.word	0x080175e4
 800cad0:	0801760c 	.word	0x0801760c
 800cad4:	08017638 	.word	0x08017638
    }

    if (pcb->remote_port == tcphdr->src &&
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	8b1a      	ldrh	r2, [r3, #24]
 800cadc:	4b72      	ldr	r3, [pc, #456]	@ (800cca8 <tcp_input+0x49c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	881b      	ldrh	r3, [r3, #0]
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d13a      	bne.n	800cb5e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	8ada      	ldrh	r2, [r3, #22]
 800caec:	4b6e      	ldr	r3, [pc, #440]	@ (800cca8 <tcp_input+0x49c>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	885b      	ldrh	r3, [r3, #2]
 800caf2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d132      	bne.n	800cb5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	4b6b      	ldr	r3, [pc, #428]	@ (800ccac <tcp_input+0x4a0>)
 800cafe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d12c      	bne.n	800cb5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	4b68      	ldr	r3, [pc, #416]	@ (800ccac <tcp_input+0x4a0>)
 800cb0a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d126      	bne.n	800cb5e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	69fa      	ldr	r2, [r7, #28]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d106      	bne.n	800cb28 <tcp_input+0x31c>
 800cb1a:	4b65      	ldr	r3, [pc, #404]	@ (800ccb0 <tcp_input+0x4a4>)
 800cb1c:	f240 120d 	movw	r2, #269	@ 0x10d
 800cb20:	4964      	ldr	r1, [pc, #400]	@ (800ccb4 <tcp_input+0x4a8>)
 800cb22:	4865      	ldr	r0, [pc, #404]	@ (800ccb8 <tcp_input+0x4ac>)
 800cb24:	f008 fc68 	bl	80153f8 <iprintf>
      if (prev != NULL) {
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00a      	beq.n	800cb44 <tcp_input+0x338>
        prev->next = pcb->next;
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	68da      	ldr	r2, [r3, #12]
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cb36:	4b61      	ldr	r3, [pc, #388]	@ (800ccbc <tcp_input+0x4b0>)
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cb3e:	4a5f      	ldr	r2, [pc, #380]	@ (800ccbc <tcp_input+0x4b0>)
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	69fa      	ldr	r2, [r7, #28]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d111      	bne.n	800cb72 <tcp_input+0x366>
 800cb4e:	4b58      	ldr	r3, [pc, #352]	@ (800ccb0 <tcp_input+0x4a4>)
 800cb50:	f240 1215 	movw	r2, #277	@ 0x115
 800cb54:	495a      	ldr	r1, [pc, #360]	@ (800ccc0 <tcp_input+0x4b4>)
 800cb56:	4858      	ldr	r0, [pc, #352]	@ (800ccb8 <tcp_input+0x4ac>)
 800cb58:	f008 fc4e 	bl	80153f8 <iprintf>
      break;
 800cb5c:	e009      	b.n	800cb72 <tcp_input+0x366>
    }
    prev = pcb;
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	61fb      	str	r3, [r7, #28]
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f47f af5e 	bne.w	800ca2c <tcp_input+0x220>
 800cb70:	e000      	b.n	800cb74 <tcp_input+0x368>
      break;
 800cb72:	bf00      	nop
  }

  if (pcb == NULL) {
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f040 80aa 	bne.w	800ccd0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb7c:	4b51      	ldr	r3, [pc, #324]	@ (800ccc4 <tcp_input+0x4b8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	61fb      	str	r3, [r7, #28]
 800cb82:	e03f      	b.n	800cc04 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	7d1b      	ldrb	r3, [r3, #20]
 800cb88:	2b0a      	cmp	r3, #10
 800cb8a:	d006      	beq.n	800cb9a <tcp_input+0x38e>
 800cb8c:	4b48      	ldr	r3, [pc, #288]	@ (800ccb0 <tcp_input+0x4a4>)
 800cb8e:	f240 121f 	movw	r2, #287	@ 0x11f
 800cb92:	494d      	ldr	r1, [pc, #308]	@ (800ccc8 <tcp_input+0x4bc>)
 800cb94:	4848      	ldr	r0, [pc, #288]	@ (800ccb8 <tcp_input+0x4ac>)
 800cb96:	f008 fc2f 	bl	80153f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	7a1b      	ldrb	r3, [r3, #8]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d009      	beq.n	800cbb6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	7a1a      	ldrb	r2, [r3, #8]
 800cba6:	4b41      	ldr	r3, [pc, #260]	@ (800ccac <tcp_input+0x4a0>)
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cbae:	3301      	adds	r3, #1
 800cbb0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d122      	bne.n	800cbfc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	8b1a      	ldrh	r2, [r3, #24]
 800cbba:	4b3b      	ldr	r3, [pc, #236]	@ (800cca8 <tcp_input+0x49c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d11b      	bne.n	800cbfe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	8ada      	ldrh	r2, [r3, #22]
 800cbca:	4b37      	ldr	r3, [pc, #220]	@ (800cca8 <tcp_input+0x49c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	885b      	ldrh	r3, [r3, #2]
 800cbd0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d113      	bne.n	800cbfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	4b34      	ldr	r3, [pc, #208]	@ (800ccac <tcp_input+0x4a0>)
 800cbdc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d10d      	bne.n	800cbfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	4b31      	ldr	r3, [pc, #196]	@ (800ccac <tcp_input+0x4a0>)
 800cbe8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d107      	bne.n	800cbfe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cbee:	69f8      	ldr	r0, [r7, #28]
 800cbf0:	f000 fb56 	bl	800d2a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7fd ffcf 	bl	800ab98 <pbuf_free>
        return;
 800cbfa:	e1fd      	b.n	800cff8 <tcp_input+0x7ec>
        continue;
 800cbfc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	61fb      	str	r3, [r7, #28]
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1bc      	bne.n	800cb84 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cc0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cccc <tcp_input+0x4c0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	617b      	str	r3, [r7, #20]
 800cc14:	e02a      	b.n	800cc6c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	7a1b      	ldrb	r3, [r3, #8]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00c      	beq.n	800cc38 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	7a1a      	ldrb	r2, [r3, #8]
 800cc22:	4b22      	ldr	r3, [pc, #136]	@ (800ccac <tcp_input+0x4a0>)
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d002      	beq.n	800cc38 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	61bb      	str	r3, [r7, #24]
        continue;
 800cc36:	e016      	b.n	800cc66 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	8ada      	ldrh	r2, [r3, #22]
 800cc3c:	4b1a      	ldr	r3, [pc, #104]	@ (800cca8 <tcp_input+0x49c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	885b      	ldrh	r3, [r3, #2]
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d10c      	bne.n	800cc62 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	4b17      	ldr	r3, [pc, #92]	@ (800ccac <tcp_input+0x4a0>)
 800cc4e:	695b      	ldr	r3, [r3, #20]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d00f      	beq.n	800cc74 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00d      	beq.n	800cc76 <tcp_input+0x46a>
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d009      	beq.n	800cc76 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	617b      	str	r3, [r7, #20]
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1d1      	bne.n	800cc16 <tcp_input+0x40a>
 800cc72:	e000      	b.n	800cc76 <tcp_input+0x46a>
            break;
 800cc74:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d029      	beq.n	800ccd0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00a      	beq.n	800cc98 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	68da      	ldr	r2, [r3, #12]
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cc8a:	4b10      	ldr	r3, [pc, #64]	@ (800cccc <tcp_input+0x4c0>)
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cc92:	4a0e      	ldr	r2, [pc, #56]	@ (800cccc <tcp_input+0x4c0>)
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cc98:	6978      	ldr	r0, [r7, #20]
 800cc9a:	f000 fa03 	bl	800d0a4 <tcp_listen_input>
      }
      pbuf_free(p);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7fd ff7a 	bl	800ab98 <pbuf_free>
      return;
 800cca4:	e1a8      	b.n	800cff8 <tcp_input+0x7ec>
 800cca6:	bf00      	nop
 800cca8:	2000d0ec 	.word	0x2000d0ec
 800ccac:	2000a188 	.word	0x2000a188
 800ccb0:	08017534 	.word	0x08017534
 800ccb4:	08017660 	.word	0x08017660
 800ccb8:	08017580 	.word	0x08017580
 800ccbc:	2000d0d0 	.word	0x2000d0d0
 800ccc0:	0801768c 	.word	0x0801768c
 800ccc4:	2000d0d4 	.word	0x2000d0d4
 800ccc8:	080176b8 	.word	0x080176b8
 800cccc:	2000d0cc 	.word	0x2000d0cc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f000 8158 	beq.w	800cf88 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ccd8:	4b95      	ldr	r3, [pc, #596]	@ (800cf30 <tcp_input+0x724>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	891a      	ldrh	r2, [r3, #8]
 800cce2:	4b93      	ldr	r3, [pc, #588]	@ (800cf30 <tcp_input+0x724>)
 800cce4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cce6:	4a92      	ldr	r2, [pc, #584]	@ (800cf30 <tcp_input+0x724>)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ccec:	4b91      	ldr	r3, [pc, #580]	@ (800cf34 <tcp_input+0x728>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a8f      	ldr	r2, [pc, #572]	@ (800cf30 <tcp_input+0x724>)
 800ccf2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ccf4:	4b90      	ldr	r3, [pc, #576]	@ (800cf38 <tcp_input+0x72c>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ccfa:	4b90      	ldr	r3, [pc, #576]	@ (800cf3c <tcp_input+0x730>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cd00:	4b8f      	ldr	r3, [pc, #572]	@ (800cf40 <tcp_input+0x734>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cd06:	4b8f      	ldr	r3, [pc, #572]	@ (800cf44 <tcp_input+0x738>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	f003 0308 	and.w	r3, r3, #8
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d006      	beq.n	800cd20 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	7b5b      	ldrb	r3, [r3, #13]
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d017      	beq.n	800cd58 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cd28:	69f8      	ldr	r0, [r7, #28]
 800cd2a:	f7ff f929 	bl	800bf80 <tcp_process_refused_data>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	f113 0f0d 	cmn.w	r3, #13
 800cd34:	d007      	beq.n	800cd46 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00c      	beq.n	800cd58 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cd3e:	4b82      	ldr	r3, [pc, #520]	@ (800cf48 <tcp_input+0x73c>)
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d008      	beq.n	800cd58 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f040 80e3 	bne.w	800cf16 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cd50:	69f8      	ldr	r0, [r7, #28]
 800cd52:	f003 f9a7 	bl	80100a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cd56:	e0de      	b.n	800cf16 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800cd58:	4a7c      	ldr	r2, [pc, #496]	@ (800cf4c <tcp_input+0x740>)
 800cd5a:	69fb      	ldr	r3, [r7, #28]
 800cd5c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cd5e:	69f8      	ldr	r0, [r7, #28]
 800cd60:	f000 fb18 	bl	800d394 <tcp_process>
 800cd64:	4603      	mov	r3, r0
 800cd66:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cd68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd6c:	f113 0f0d 	cmn.w	r3, #13
 800cd70:	f000 80d3 	beq.w	800cf1a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800cd74:	4b71      	ldr	r3, [pc, #452]	@ (800cf3c <tcp_input+0x730>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	f003 0308 	and.w	r3, r3, #8
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d015      	beq.n	800cdac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d008      	beq.n	800cd9c <tcp_input+0x590>
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd90:	69fa      	ldr	r2, [r7, #28]
 800cd92:	6912      	ldr	r2, [r2, #16]
 800cd94:	f06f 010d 	mvn.w	r1, #13
 800cd98:	4610      	mov	r0, r2
 800cd9a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cd9c:	69f9      	ldr	r1, [r7, #28]
 800cd9e:	486c      	ldr	r0, [pc, #432]	@ (800cf50 <tcp_input+0x744>)
 800cda0:	f7ff fbbc 	bl	800c51c <tcp_pcb_remove>
        tcp_free(pcb);
 800cda4:	69f8      	ldr	r0, [r7, #28]
 800cda6:	f7fe f9a7 	bl	800b0f8 <tcp_free>
 800cdaa:	e0da      	b.n	800cf62 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cdb0:	4b63      	ldr	r3, [pc, #396]	@ (800cf40 <tcp_input+0x734>)
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d01d      	beq.n	800cdf4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cdb8:	4b61      	ldr	r3, [pc, #388]	@ (800cf40 <tcp_input+0x734>)
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00a      	beq.n	800cdde <tcp_input+0x5d2>
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdce:	69fa      	ldr	r2, [r7, #28]
 800cdd0:	6910      	ldr	r0, [r2, #16]
 800cdd2:	89fa      	ldrh	r2, [r7, #14]
 800cdd4:	69f9      	ldr	r1, [r7, #28]
 800cdd6:	4798      	blx	r3
 800cdd8:	4603      	mov	r3, r0
 800cdda:	74fb      	strb	r3, [r7, #19]
 800cddc:	e001      	b.n	800cde2 <tcp_input+0x5d6>
 800cdde:	2300      	movs	r3, #0
 800cde0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cde2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cde6:	f113 0f0d 	cmn.w	r3, #13
 800cdea:	f000 8098 	beq.w	800cf1e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cdee:	4b54      	ldr	r3, [pc, #336]	@ (800cf40 <tcp_input+0x734>)
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cdf4:	69f8      	ldr	r0, [r7, #28]
 800cdf6:	f000 f915 	bl	800d024 <tcp_input_delayed_close>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f040 8090 	bne.w	800cf22 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ce02:	4b4d      	ldr	r3, [pc, #308]	@ (800cf38 <tcp_input+0x72c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d041      	beq.n	800ce8e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d006      	beq.n	800ce20 <tcp_input+0x614>
 800ce12:	4b50      	ldr	r3, [pc, #320]	@ (800cf54 <tcp_input+0x748>)
 800ce14:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ce18:	494f      	ldr	r1, [pc, #316]	@ (800cf58 <tcp_input+0x74c>)
 800ce1a:	4850      	ldr	r0, [pc, #320]	@ (800cf5c <tcp_input+0x750>)
 800ce1c:	f008 faec 	bl	80153f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	8b5b      	ldrh	r3, [r3, #26]
 800ce24:	f003 0310 	and.w	r3, r3, #16
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d008      	beq.n	800ce3e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ce2c:	4b42      	ldr	r3, [pc, #264]	@ (800cf38 <tcp_input+0x72c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fd feb1 	bl	800ab98 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ce36:	69f8      	ldr	r0, [r7, #28]
 800ce38:	f7fe fc46 	bl	800b6c8 <tcp_abort>
            goto aborted;
 800ce3c:	e091      	b.n	800cf62 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00c      	beq.n	800ce62 <tcp_input+0x656>
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	6918      	ldr	r0, [r3, #16]
 800ce52:	4b39      	ldr	r3, [pc, #228]	@ (800cf38 <tcp_input+0x72c>)
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	2300      	movs	r3, #0
 800ce58:	69f9      	ldr	r1, [r7, #28]
 800ce5a:	47a0      	blx	r4
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	74fb      	strb	r3, [r7, #19]
 800ce60:	e008      	b.n	800ce74 <tcp_input+0x668>
 800ce62:	4b35      	ldr	r3, [pc, #212]	@ (800cf38 <tcp_input+0x72c>)
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	2300      	movs	r3, #0
 800ce68:	69f9      	ldr	r1, [r7, #28]
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	f7ff f95e 	bl	800c12c <tcp_recv_null>
 800ce70:	4603      	mov	r3, r0
 800ce72:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ce74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce78:	f113 0f0d 	cmn.w	r3, #13
 800ce7c:	d053      	beq.n	800cf26 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ce7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ce86:	4b2c      	ldr	r3, [pc, #176]	@ (800cf38 <tcp_input+0x72c>)
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ce8e:	4b2b      	ldr	r3, [pc, #172]	@ (800cf3c <tcp_input+0x730>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	f003 0320 	and.w	r3, r3, #32
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d030      	beq.n	800cefc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d009      	beq.n	800ceb6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cea6:	7b5a      	ldrb	r2, [r3, #13]
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ceac:	f042 0220 	orr.w	r2, r2, #32
 800ceb0:	b2d2      	uxtb	r2, r2
 800ceb2:	735a      	strb	r2, [r3, #13]
 800ceb4:	e022      	b.n	800cefc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ceba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cebe:	d005      	beq.n	800cecc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cec4:	3301      	adds	r3, #1
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00b      	beq.n	800ceee <tcp_input+0x6e2>
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	6918      	ldr	r0, [r3, #16]
 800cee0:	2300      	movs	r3, #0
 800cee2:	2200      	movs	r2, #0
 800cee4:	69f9      	ldr	r1, [r7, #28]
 800cee6:	47a0      	blx	r4
 800cee8:	4603      	mov	r3, r0
 800ceea:	74fb      	strb	r3, [r7, #19]
 800ceec:	e001      	b.n	800cef2 <tcp_input+0x6e6>
 800ceee:	2300      	movs	r3, #0
 800cef0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cef2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cef6:	f113 0f0d 	cmn.w	r3, #13
 800cefa:	d016      	beq.n	800cf2a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cefc:	4b13      	ldr	r3, [pc, #76]	@ (800cf4c <tcp_input+0x740>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cf02:	69f8      	ldr	r0, [r7, #28]
 800cf04:	f000 f88e 	bl	800d024 <tcp_input_delayed_close>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d128      	bne.n	800cf60 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cf0e:	69f8      	ldr	r0, [r7, #28]
 800cf10:	f002 fac2 	bl	800f498 <tcp_output>
 800cf14:	e025      	b.n	800cf62 <tcp_input+0x756>
        goto aborted;
 800cf16:	bf00      	nop
 800cf18:	e023      	b.n	800cf62 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cf1a:	bf00      	nop
 800cf1c:	e021      	b.n	800cf62 <tcp_input+0x756>
              goto aborted;
 800cf1e:	bf00      	nop
 800cf20:	e01f      	b.n	800cf62 <tcp_input+0x756>
          goto aborted;
 800cf22:	bf00      	nop
 800cf24:	e01d      	b.n	800cf62 <tcp_input+0x756>
            goto aborted;
 800cf26:	bf00      	nop
 800cf28:	e01b      	b.n	800cf62 <tcp_input+0x756>
              goto aborted;
 800cf2a:	bf00      	nop
 800cf2c:	e019      	b.n	800cf62 <tcp_input+0x756>
 800cf2e:	bf00      	nop
 800cf30:	2000d0dc 	.word	0x2000d0dc
 800cf34:	2000d0ec 	.word	0x2000d0ec
 800cf38:	2000d10c 	.word	0x2000d10c
 800cf3c:	2000d109 	.word	0x2000d109
 800cf40:	2000d104 	.word	0x2000d104
 800cf44:	2000d108 	.word	0x2000d108
 800cf48:	2000d106 	.word	0x2000d106
 800cf4c:	2000d110 	.word	0x2000d110
 800cf50:	2000d0d0 	.word	0x2000d0d0
 800cf54:	08017534 	.word	0x08017534
 800cf58:	080176e8 	.word	0x080176e8
 800cf5c:	08017580 	.word	0x08017580
          goto aborted;
 800cf60:	bf00      	nop
    tcp_input_pcb = NULL;
 800cf62:	4b27      	ldr	r3, [pc, #156]	@ (800d000 <tcp_input+0x7f4>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cf68:	4b26      	ldr	r3, [pc, #152]	@ (800d004 <tcp_input+0x7f8>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cf6e:	4b26      	ldr	r3, [pc, #152]	@ (800d008 <tcp_input+0x7fc>)
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d03f      	beq.n	800cff6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cf76:	4b24      	ldr	r3, [pc, #144]	@ (800d008 <tcp_input+0x7fc>)
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fd fe0c 	bl	800ab98 <pbuf_free>
      inseg.p = NULL;
 800cf80:	4b21      	ldr	r3, [pc, #132]	@ (800d008 <tcp_input+0x7fc>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cf86:	e036      	b.n	800cff6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cf88:	4b20      	ldr	r3, [pc, #128]	@ (800d00c <tcp_input+0x800>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	899b      	ldrh	r3, [r3, #12]
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fc fabb 	bl	800950c <lwip_htons>
 800cf96:	4603      	mov	r3, r0
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	f003 0304 	and.w	r3, r3, #4
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d118      	bne.n	800cfd4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfa2:	4b1b      	ldr	r3, [pc, #108]	@ (800d010 <tcp_input+0x804>)
 800cfa4:	6819      	ldr	r1, [r3, #0]
 800cfa6:	4b1b      	ldr	r3, [pc, #108]	@ (800d014 <tcp_input+0x808>)
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	4b1a      	ldr	r3, [pc, #104]	@ (800d018 <tcp_input+0x80c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfb2:	4b16      	ldr	r3, [pc, #88]	@ (800d00c <tcp_input+0x800>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfb6:	885b      	ldrh	r3, [r3, #2]
 800cfb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfba:	4a14      	ldr	r2, [pc, #80]	@ (800d00c <tcp_input+0x800>)
 800cfbc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfbe:	8812      	ldrh	r2, [r2, #0]
 800cfc0:	b292      	uxth	r2, r2
 800cfc2:	9202      	str	r2, [sp, #8]
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	4b15      	ldr	r3, [pc, #84]	@ (800d01c <tcp_input+0x810>)
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	4b15      	ldr	r3, [pc, #84]	@ (800d020 <tcp_input+0x814>)
 800cfcc:	4602      	mov	r2, r0
 800cfce:	2000      	movs	r0, #0
 800cfd0:	f003 f816 	bl	8010000 <tcp_rst>
    pbuf_free(p);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7fd fddf 	bl	800ab98 <pbuf_free>
  return;
 800cfda:	e00c      	b.n	800cff6 <tcp_input+0x7ea>
    goto dropped;
 800cfdc:	bf00      	nop
 800cfde:	e006      	b.n	800cfee <tcp_input+0x7e2>
    goto dropped;
 800cfe0:	bf00      	nop
 800cfe2:	e004      	b.n	800cfee <tcp_input+0x7e2>
    goto dropped;
 800cfe4:	bf00      	nop
 800cfe6:	e002      	b.n	800cfee <tcp_input+0x7e2>
      goto dropped;
 800cfe8:	bf00      	nop
 800cfea:	e000      	b.n	800cfee <tcp_input+0x7e2>
      goto dropped;
 800cfec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7fd fdd2 	bl	800ab98 <pbuf_free>
 800cff4:	e000      	b.n	800cff8 <tcp_input+0x7ec>
  return;
 800cff6:	bf00      	nop
}
 800cff8:	3724      	adds	r7, #36	@ 0x24
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd90      	pop	{r4, r7, pc}
 800cffe:	bf00      	nop
 800d000:	2000d110 	.word	0x2000d110
 800d004:	2000d10c 	.word	0x2000d10c
 800d008:	2000d0dc 	.word	0x2000d0dc
 800d00c:	2000d0ec 	.word	0x2000d0ec
 800d010:	2000d100 	.word	0x2000d100
 800d014:	2000d106 	.word	0x2000d106
 800d018:	2000d0fc 	.word	0x2000d0fc
 800d01c:	2000a198 	.word	0x2000a198
 800d020:	2000a19c 	.word	0x2000a19c

0800d024 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <tcp_input_delayed_close+0x1c>
 800d032:	4b17      	ldr	r3, [pc, #92]	@ (800d090 <tcp_input_delayed_close+0x6c>)
 800d034:	f240 225a 	movw	r2, #602	@ 0x25a
 800d038:	4916      	ldr	r1, [pc, #88]	@ (800d094 <tcp_input_delayed_close+0x70>)
 800d03a:	4817      	ldr	r0, [pc, #92]	@ (800d098 <tcp_input_delayed_close+0x74>)
 800d03c:	f008 f9dc 	bl	80153f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d040:	4b16      	ldr	r3, [pc, #88]	@ (800d09c <tcp_input_delayed_close+0x78>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	f003 0310 	and.w	r3, r3, #16
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d01c      	beq.n	800d086 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	8b5b      	ldrh	r3, [r3, #26]
 800d050:	f003 0310 	and.w	r3, r3, #16
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10d      	bne.n	800d074 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d008      	beq.n	800d074 <tcp_input_delayed_close+0x50>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	6912      	ldr	r2, [r2, #16]
 800d06c:	f06f 010e 	mvn.w	r1, #14
 800d070:	4610      	mov	r0, r2
 800d072:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d074:	6879      	ldr	r1, [r7, #4]
 800d076:	480a      	ldr	r0, [pc, #40]	@ (800d0a0 <tcp_input_delayed_close+0x7c>)
 800d078:	f7ff fa50 	bl	800c51c <tcp_pcb_remove>
    tcp_free(pcb);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7fe f83b 	bl	800b0f8 <tcp_free>
    return 1;
 800d082:	2301      	movs	r3, #1
 800d084:	e000      	b.n	800d088 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	08017534 	.word	0x08017534
 800d094:	08017704 	.word	0x08017704
 800d098:	08017580 	.word	0x08017580
 800d09c:	2000d109 	.word	0x2000d109
 800d0a0:	2000d0d0 	.word	0x2000d0d0

0800d0a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d0a4:	b590      	push	{r4, r7, lr}
 800d0a6:	b08b      	sub	sp, #44	@ 0x2c
 800d0a8:	af04      	add	r7, sp, #16
 800d0aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d0ac:	4b6f      	ldr	r3, [pc, #444]	@ (800d26c <tcp_listen_input+0x1c8>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	f003 0304 	and.w	r3, r3, #4
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f040 80d2 	bne.w	800d25e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d106      	bne.n	800d0ce <tcp_listen_input+0x2a>
 800d0c0:	4b6b      	ldr	r3, [pc, #428]	@ (800d270 <tcp_listen_input+0x1cc>)
 800d0c2:	f240 2281 	movw	r2, #641	@ 0x281
 800d0c6:	496b      	ldr	r1, [pc, #428]	@ (800d274 <tcp_listen_input+0x1d0>)
 800d0c8:	486b      	ldr	r0, [pc, #428]	@ (800d278 <tcp_listen_input+0x1d4>)
 800d0ca:	f008 f995 	bl	80153f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d0ce:	4b67      	ldr	r3, [pc, #412]	@ (800d26c <tcp_listen_input+0x1c8>)
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	f003 0310 	and.w	r3, r3, #16
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d019      	beq.n	800d10e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0da:	4b68      	ldr	r3, [pc, #416]	@ (800d27c <tcp_listen_input+0x1d8>)
 800d0dc:	6819      	ldr	r1, [r3, #0]
 800d0de:	4b68      	ldr	r3, [pc, #416]	@ (800d280 <tcp_listen_input+0x1dc>)
 800d0e0:	881b      	ldrh	r3, [r3, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	4b67      	ldr	r3, [pc, #412]	@ (800d284 <tcp_listen_input+0x1e0>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0ea:	4b67      	ldr	r3, [pc, #412]	@ (800d288 <tcp_listen_input+0x1e4>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0ee:	885b      	ldrh	r3, [r3, #2]
 800d0f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0f2:	4a65      	ldr	r2, [pc, #404]	@ (800d288 <tcp_listen_input+0x1e4>)
 800d0f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0f6:	8812      	ldrh	r2, [r2, #0]
 800d0f8:	b292      	uxth	r2, r2
 800d0fa:	9202      	str	r2, [sp, #8]
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	4b63      	ldr	r3, [pc, #396]	@ (800d28c <tcp_listen_input+0x1e8>)
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	4b63      	ldr	r3, [pc, #396]	@ (800d290 <tcp_listen_input+0x1ec>)
 800d104:	4602      	mov	r2, r0
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f002 ff7a 	bl	8010000 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d10c:	e0a9      	b.n	800d262 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d10e:	4b57      	ldr	r3, [pc, #348]	@ (800d26c <tcp_listen_input+0x1c8>)
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	f003 0302 	and.w	r3, r3, #2
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 80a3 	beq.w	800d262 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	7d5b      	ldrb	r3, [r3, #21]
 800d120:	4618      	mov	r0, r3
 800d122:	f7ff f927 	bl	800c374 <tcp_alloc>
 800d126:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d111      	bne.n	800d152 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00a      	beq.n	800d14c <tcp_listen_input+0xa8>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	699b      	ldr	r3, [r3, #24]
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	6910      	ldr	r0, [r2, #16]
 800d13e:	f04f 32ff 	mov.w	r2, #4294967295
 800d142:	2100      	movs	r1, #0
 800d144:	4798      	blx	r3
 800d146:	4603      	mov	r3, r0
 800d148:	73bb      	strb	r3, [r7, #14]
      return;
 800d14a:	e08b      	b.n	800d264 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d14c:	23f0      	movs	r3, #240	@ 0xf0
 800d14e:	73bb      	strb	r3, [r7, #14]
      return;
 800d150:	e088      	b.n	800d264 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d152:	4b50      	ldr	r3, [pc, #320]	@ (800d294 <tcp_listen_input+0x1f0>)
 800d154:	695a      	ldr	r2, [r3, #20]
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d15a:	4b4e      	ldr	r3, [pc, #312]	@ (800d294 <tcp_listen_input+0x1f0>)
 800d15c:	691a      	ldr	r2, [r3, #16]
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	8ada      	ldrh	r2, [r3, #22]
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d16a:	4b47      	ldr	r3, [pc, #284]	@ (800d288 <tcp_listen_input+0x1e4>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	b29a      	uxth	r2, r3
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2203      	movs	r2, #3
 800d17a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d17c:	4b41      	ldr	r3, [pc, #260]	@ (800d284 <tcp_listen_input+0x1e0>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800d18e:	6978      	ldr	r0, [r7, #20]
 800d190:	f7ff fa58 	bl	800c644 <tcp_next_iss>
 800d194:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d1ae:	4b35      	ldr	r3, [pc, #212]	@ (800d284 <tcp_listen_input+0x1e0>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	1e5a      	subs	r2, r3, #1
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	691a      	ldr	r2, [r3, #16]
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	7a5b      	ldrb	r3, [r3, #9]
 800d1ca:	f003 030c 	and.w	r3, r3, #12
 800d1ce:	b2da      	uxtb	r2, r3
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7a1a      	ldrb	r2, [r3, #8]
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d1dc:	4b2e      	ldr	r3, [pc, #184]	@ (800d298 <tcp_listen_input+0x1f4>)
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	60da      	str	r2, [r3, #12]
 800d1e4:	4a2c      	ldr	r2, [pc, #176]	@ (800d298 <tcp_listen_input+0x1f4>)
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	6013      	str	r3, [r2, #0]
 800d1ea:	f003 f8cb 	bl	8010384 <tcp_timer_needed>
 800d1ee:	4b2b      	ldr	r3, [pc, #172]	@ (800d29c <tcp_listen_input+0x1f8>)
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d1f4:	6978      	ldr	r0, [r7, #20]
 800d1f6:	f001 fd8b 	bl	800ed10 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d1fa:	4b23      	ldr	r3, [pc, #140]	@ (800d288 <tcp_listen_input+0x1e4>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	89db      	ldrh	r3, [r3, #14]
 800d200:	b29a      	uxth	r2, r3
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	3304      	adds	r3, #4
 800d21c:	4618      	mov	r0, r3
 800d21e:	f006 fde1 	bl	8013de4 <ip4_route>
 800d222:	4601      	mov	r1, r0
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	3304      	adds	r3, #4
 800d228:	461a      	mov	r2, r3
 800d22a:	4620      	mov	r0, r4
 800d22c:	f7ff fa30 	bl	800c690 <tcp_eff_send_mss_netif>
 800d230:	4603      	mov	r3, r0
 800d232:	461a      	mov	r2, r3
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d238:	2112      	movs	r1, #18
 800d23a:	6978      	ldr	r0, [r7, #20]
 800d23c:	f002 f83e 	bl	800f2bc <tcp_enqueue_flags>
 800d240:	4603      	mov	r3, r0
 800d242:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d24c:	2100      	movs	r1, #0
 800d24e:	6978      	ldr	r0, [r7, #20]
 800d250:	f7fe f97c 	bl	800b54c <tcp_abandon>
      return;
 800d254:	e006      	b.n	800d264 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d256:	6978      	ldr	r0, [r7, #20]
 800d258:	f002 f91e 	bl	800f498 <tcp_output>
  return;
 800d25c:	e001      	b.n	800d262 <tcp_listen_input+0x1be>
    return;
 800d25e:	bf00      	nop
 800d260:	e000      	b.n	800d264 <tcp_listen_input+0x1c0>
  return;
 800d262:	bf00      	nop
}
 800d264:	371c      	adds	r7, #28
 800d266:	46bd      	mov	sp, r7
 800d268:	bd90      	pop	{r4, r7, pc}
 800d26a:	bf00      	nop
 800d26c:	2000d108 	.word	0x2000d108
 800d270:	08017534 	.word	0x08017534
 800d274:	0801772c 	.word	0x0801772c
 800d278:	08017580 	.word	0x08017580
 800d27c:	2000d100 	.word	0x2000d100
 800d280:	2000d106 	.word	0x2000d106
 800d284:	2000d0fc 	.word	0x2000d0fc
 800d288:	2000d0ec 	.word	0x2000d0ec
 800d28c:	2000a198 	.word	0x2000a198
 800d290:	2000a19c 	.word	0x2000a19c
 800d294:	2000a188 	.word	0x2000a188
 800d298:	2000d0d0 	.word	0x2000d0d0
 800d29c:	2000d0d8 	.word	0x2000d0d8

0800d2a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af04      	add	r7, sp, #16
 800d2a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d2a8:	4b2f      	ldr	r3, [pc, #188]	@ (800d368 <tcp_timewait_input+0xc8>)
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	f003 0304 	and.w	r3, r3, #4
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d153      	bne.n	800d35c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d106      	bne.n	800d2c8 <tcp_timewait_input+0x28>
 800d2ba:	4b2c      	ldr	r3, [pc, #176]	@ (800d36c <tcp_timewait_input+0xcc>)
 800d2bc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d2c0:	492b      	ldr	r1, [pc, #172]	@ (800d370 <tcp_timewait_input+0xd0>)
 800d2c2:	482c      	ldr	r0, [pc, #176]	@ (800d374 <tcp_timewait_input+0xd4>)
 800d2c4:	f008 f898 	bl	80153f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d2c8:	4b27      	ldr	r3, [pc, #156]	@ (800d368 <tcp_timewait_input+0xc8>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	f003 0302 	and.w	r3, r3, #2
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d02a      	beq.n	800d32a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d2d4:	4b28      	ldr	r3, [pc, #160]	@ (800d378 <tcp_timewait_input+0xd8>)
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	db2d      	blt.n	800d33e <tcp_timewait_input+0x9e>
 800d2e2:	4b25      	ldr	r3, [pc, #148]	@ (800d378 <tcp_timewait_input+0xd8>)
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ea:	6879      	ldr	r1, [r7, #4]
 800d2ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d2ee:	440b      	add	r3, r1
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	dc23      	bgt.n	800d33e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2f6:	4b21      	ldr	r3, [pc, #132]	@ (800d37c <tcp_timewait_input+0xdc>)
 800d2f8:	6819      	ldr	r1, [r3, #0]
 800d2fa:	4b21      	ldr	r3, [pc, #132]	@ (800d380 <tcp_timewait_input+0xe0>)
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	4b1d      	ldr	r3, [pc, #116]	@ (800d378 <tcp_timewait_input+0xd8>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d306:	4b1f      	ldr	r3, [pc, #124]	@ (800d384 <tcp_timewait_input+0xe4>)
 800d308:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d30a:	885b      	ldrh	r3, [r3, #2]
 800d30c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d30e:	4a1d      	ldr	r2, [pc, #116]	@ (800d384 <tcp_timewait_input+0xe4>)
 800d310:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d312:	8812      	ldrh	r2, [r2, #0]
 800d314:	b292      	uxth	r2, r2
 800d316:	9202      	str	r2, [sp, #8]
 800d318:	9301      	str	r3, [sp, #4]
 800d31a:	4b1b      	ldr	r3, [pc, #108]	@ (800d388 <tcp_timewait_input+0xe8>)
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	4b1b      	ldr	r3, [pc, #108]	@ (800d38c <tcp_timewait_input+0xec>)
 800d320:	4602      	mov	r2, r0
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f002 fe6c 	bl	8010000 <tcp_rst>
      return;
 800d328:	e01b      	b.n	800d362 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d32a:	4b0f      	ldr	r3, [pc, #60]	@ (800d368 <tcp_timewait_input+0xc8>)
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	f003 0301 	and.w	r3, r3, #1
 800d332:	2b00      	cmp	r3, #0
 800d334:	d003      	beq.n	800d33e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d336:	4b16      	ldr	r3, [pc, #88]	@ (800d390 <tcp_timewait_input+0xf0>)
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d33e:	4b10      	ldr	r3, [pc, #64]	@ (800d380 <tcp_timewait_input+0xe0>)
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00c      	beq.n	800d360 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	8b5b      	ldrh	r3, [r3, #26]
 800d34a:	f043 0302 	orr.w	r3, r3, #2
 800d34e:	b29a      	uxth	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f002 f89f 	bl	800f498 <tcp_output>
  }
  return;
 800d35a:	e001      	b.n	800d360 <tcp_timewait_input+0xc0>
    return;
 800d35c:	bf00      	nop
 800d35e:	e000      	b.n	800d362 <tcp_timewait_input+0xc2>
  return;
 800d360:	bf00      	nop
}
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	2000d108 	.word	0x2000d108
 800d36c:	08017534 	.word	0x08017534
 800d370:	0801774c 	.word	0x0801774c
 800d374:	08017580 	.word	0x08017580
 800d378:	2000d0fc 	.word	0x2000d0fc
 800d37c:	2000d100 	.word	0x2000d100
 800d380:	2000d106 	.word	0x2000d106
 800d384:	2000d0ec 	.word	0x2000d0ec
 800d388:	2000a198 	.word	0x2000a198
 800d38c:	2000a19c 	.word	0x2000a19c
 800d390:	2000d0c4 	.word	0x2000d0c4

0800d394 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d394:	b590      	push	{r4, r7, lr}
 800d396:	b08d      	sub	sp, #52	@ 0x34
 800d398:	af04      	add	r7, sp, #16
 800d39a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <tcp_process+0x24>
 800d3aa:	4b9d      	ldr	r3, [pc, #628]	@ (800d620 <tcp_process+0x28c>)
 800d3ac:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d3b0:	499c      	ldr	r1, [pc, #624]	@ (800d624 <tcp_process+0x290>)
 800d3b2:	489d      	ldr	r0, [pc, #628]	@ (800d628 <tcp_process+0x294>)
 800d3b4:	f008 f820 	bl	80153f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d3b8:	4b9c      	ldr	r3, [pc, #624]	@ (800d62c <tcp_process+0x298>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	f003 0304 	and.w	r3, r3, #4
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d04e      	beq.n	800d462 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7d1b      	ldrb	r3, [r3, #20]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d108      	bne.n	800d3de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d3d0:	4b97      	ldr	r3, [pc, #604]	@ (800d630 <tcp_process+0x29c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d123      	bne.n	800d420 <tcp_process+0x8c>
        acceptable = 1;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	76fb      	strb	r3, [r7, #27]
 800d3dc:	e020      	b.n	800d420 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3e2:	4b94      	ldr	r3, [pc, #592]	@ (800d634 <tcp_process+0x2a0>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d102      	bne.n	800d3f0 <tcp_process+0x5c>
        acceptable = 1;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	76fb      	strb	r3, [r7, #27]
 800d3ee:	e017      	b.n	800d420 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d3f0:	4b90      	ldr	r3, [pc, #576]	@ (800d634 <tcp_process+0x2a0>)
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	db10      	blt.n	800d420 <tcp_process+0x8c>
 800d3fe:	4b8d      	ldr	r3, [pc, #564]	@ (800d634 <tcp_process+0x2a0>)
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d406:	6879      	ldr	r1, [r7, #4]
 800d408:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d40a:	440b      	add	r3, r1
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	dc06      	bgt.n	800d420 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	8b5b      	ldrh	r3, [r3, #26]
 800d416:	f043 0302 	orr.w	r3, r3, #2
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d420:	7efb      	ldrb	r3, [r7, #27]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d01b      	beq.n	800d45e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7d1b      	ldrb	r3, [r3, #20]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d106      	bne.n	800d43c <tcp_process+0xa8>
 800d42e:	4b7c      	ldr	r3, [pc, #496]	@ (800d620 <tcp_process+0x28c>)
 800d430:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800d434:	4980      	ldr	r1, [pc, #512]	@ (800d638 <tcp_process+0x2a4>)
 800d436:	487c      	ldr	r0, [pc, #496]	@ (800d628 <tcp_process+0x294>)
 800d438:	f007 ffde 	bl	80153f8 <iprintf>
      recv_flags |= TF_RESET;
 800d43c:	4b7f      	ldr	r3, [pc, #508]	@ (800d63c <tcp_process+0x2a8>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	f043 0308 	orr.w	r3, r3, #8
 800d444:	b2da      	uxtb	r2, r3
 800d446:	4b7d      	ldr	r3, [pc, #500]	@ (800d63c <tcp_process+0x2a8>)
 800d448:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	8b5b      	ldrh	r3, [r3, #26]
 800d44e:	f023 0301 	bic.w	r3, r3, #1
 800d452:	b29a      	uxth	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d458:	f06f 030d 	mvn.w	r3, #13
 800d45c:	e37a      	b.n	800db54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	e378      	b.n	800db54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d462:	4b72      	ldr	r3, [pc, #456]	@ (800d62c <tcp_process+0x298>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	f003 0302 	and.w	r3, r3, #2
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d010      	beq.n	800d490 <tcp_process+0xfc>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7d1b      	ldrb	r3, [r3, #20]
 800d472:	2b02      	cmp	r3, #2
 800d474:	d00c      	beq.n	800d490 <tcp_process+0xfc>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	7d1b      	ldrb	r3, [r3, #20]
 800d47a:	2b03      	cmp	r3, #3
 800d47c:	d008      	beq.n	800d490 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	8b5b      	ldrh	r3, [r3, #26]
 800d482:	f043 0302 	orr.w	r3, r3, #2
 800d486:	b29a      	uxth	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	e361      	b.n	800db54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	8b5b      	ldrh	r3, [r3, #26]
 800d494:	f003 0310 	and.w	r3, r3, #16
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d103      	bne.n	800d4a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d49c:	4b68      	ldr	r3, [pc, #416]	@ (800d640 <tcp_process+0x2ac>)
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f001 fc2b 	bl	800ed10 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	7d1b      	ldrb	r3, [r3, #20]
 800d4be:	3b02      	subs	r3, #2
 800d4c0:	2b07      	cmp	r3, #7
 800d4c2:	f200 8337 	bhi.w	800db34 <tcp_process+0x7a0>
 800d4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d4cc <tcp_process+0x138>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d4ed 	.word	0x0800d4ed
 800d4d0:	0800d71d 	.word	0x0800d71d
 800d4d4:	0800d895 	.word	0x0800d895
 800d4d8:	0800d8bf 	.word	0x0800d8bf
 800d4dc:	0800d9e3 	.word	0x0800d9e3
 800d4e0:	0800d895 	.word	0x0800d895
 800d4e4:	0800da6f 	.word	0x0800da6f
 800d4e8:	0800daff 	.word	0x0800daff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d4ec:	4b4f      	ldr	r3, [pc, #316]	@ (800d62c <tcp_process+0x298>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	f003 0310 	and.w	r3, r3, #16
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	f000 80e4 	beq.w	800d6c2 <tcp_process+0x32e>
 800d4fa:	4b4c      	ldr	r3, [pc, #304]	@ (800d62c <tcp_process+0x298>)
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	f003 0302 	and.w	r3, r3, #2
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 80dd 	beq.w	800d6c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	4b48      	ldr	r3, [pc, #288]	@ (800d630 <tcp_process+0x29c>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	429a      	cmp	r2, r3
 800d514:	f040 80d5 	bne.w	800d6c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d518:	4b46      	ldr	r3, [pc, #280]	@ (800d634 <tcp_process+0x2a0>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	1c5a      	adds	r2, r3, #1
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800d52a:	4b41      	ldr	r3, [pc, #260]	@ (800d630 <tcp_process+0x29c>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d532:	4b44      	ldr	r3, [pc, #272]	@ (800d644 <tcp_process+0x2b0>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	89db      	ldrh	r3, [r3, #14]
 800d538:	b29a      	uxth	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d54c:	4b39      	ldr	r3, [pc, #228]	@ (800d634 <tcp_process+0x2a0>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	1e5a      	subs	r2, r3, #1
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2204      	movs	r2, #4
 800d55a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3304      	adds	r3, #4
 800d564:	4618      	mov	r0, r3
 800d566:	f006 fc3d 	bl	8013de4 <ip4_route>
 800d56a:	4601      	mov	r1, r0
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	3304      	adds	r3, #4
 800d570:	461a      	mov	r2, r3
 800d572:	4620      	mov	r0, r4
 800d574:	f7ff f88c 	bl	800c690 <tcp_eff_send_mss_netif>
 800d578:	4603      	mov	r3, r0
 800d57a:	461a      	mov	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d584:	009a      	lsls	r2, r3, #2
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d58a:	005b      	lsls	r3, r3, #1
 800d58c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d590:	428b      	cmp	r3, r1
 800d592:	bf38      	it	cc
 800d594:	460b      	movcc	r3, r1
 800d596:	429a      	cmp	r2, r3
 800d598:	d204      	bcs.n	800d5a4 <tcp_process+0x210>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	e00d      	b.n	800d5c0 <tcp_process+0x22c>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d904      	bls.n	800d5bc <tcp_process+0x228>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	e001      	b.n	800d5c0 <tcp_process+0x22c>
 800d5bc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d106      	bne.n	800d5de <tcp_process+0x24a>
 800d5d0:	4b13      	ldr	r3, [pc, #76]	@ (800d620 <tcp_process+0x28c>)
 800d5d2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800d5d6:	491c      	ldr	r1, [pc, #112]	@ (800d648 <tcp_process+0x2b4>)
 800d5d8:	4813      	ldr	r0, [pc, #76]	@ (800d628 <tcp_process+0x294>)
 800d5da:	f007 ff0d 	bl	80153f8 <iprintf>
        --pcb->snd_queuelen;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d12a      	bne.n	800d650 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <tcp_process+0x280>
 800d606:	4b06      	ldr	r3, [pc, #24]	@ (800d620 <tcp_process+0x28c>)
 800d608:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800d60c:	490f      	ldr	r1, [pc, #60]	@ (800d64c <tcp_process+0x2b8>)
 800d60e:	4806      	ldr	r0, [pc, #24]	@ (800d628 <tcp_process+0x294>)
 800d610:	f007 fef2 	bl	80153f8 <iprintf>
          pcb->unsent = rseg->next;
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d61c:	e01c      	b.n	800d658 <tcp_process+0x2c4>
 800d61e:	bf00      	nop
 800d620:	08017534 	.word	0x08017534
 800d624:	0801776c 	.word	0x0801776c
 800d628:	08017580 	.word	0x08017580
 800d62c:	2000d108 	.word	0x2000d108
 800d630:	2000d100 	.word	0x2000d100
 800d634:	2000d0fc 	.word	0x2000d0fc
 800d638:	08017788 	.word	0x08017788
 800d63c:	2000d109 	.word	0x2000d109
 800d640:	2000d0c4 	.word	0x2000d0c4
 800d644:	2000d0ec 	.word	0x2000d0ec
 800d648:	080177a8 	.word	0x080177a8
 800d64c:	080177c0 	.word	0x080177c0
        } else {
          pcb->unacked = rseg->next;
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800d658:	69f8      	ldr	r0, [r7, #28]
 800d65a:	f7fe fd22 	bl	800c0a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d662:	2b00      	cmp	r3, #0
 800d664:	d104      	bne.n	800d670 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d66c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d66e:	e006      	b.n	800d67e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d684:	2b00      	cmp	r3, #0
 800d686:	d00a      	beq.n	800d69e <tcp_process+0x30a>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	6910      	ldr	r0, [r2, #16]
 800d692:	2200      	movs	r2, #0
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	4798      	blx	r3
 800d698:	4603      	mov	r3, r0
 800d69a:	76bb      	strb	r3, [r7, #26]
 800d69c:	e001      	b.n	800d6a2 <tcp_process+0x30e>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d6a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d6a6:	f113 0f0d 	cmn.w	r3, #13
 800d6aa:	d102      	bne.n	800d6b2 <tcp_process+0x31e>
          return ERR_ABRT;
 800d6ac:	f06f 030c 	mvn.w	r3, #12
 800d6b0:	e250      	b.n	800db54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	8b5b      	ldrh	r3, [r3, #26]
 800d6b6:	f043 0302 	orr.w	r3, r3, #2
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d6c0:	e23a      	b.n	800db38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d6c2:	4b98      	ldr	r3, [pc, #608]	@ (800d924 <tcp_process+0x590>)
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	f003 0310 	and.w	r3, r3, #16
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 8234 	beq.w	800db38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6d0:	4b95      	ldr	r3, [pc, #596]	@ (800d928 <tcp_process+0x594>)
 800d6d2:	6819      	ldr	r1, [r3, #0]
 800d6d4:	4b95      	ldr	r3, [pc, #596]	@ (800d92c <tcp_process+0x598>)
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	461a      	mov	r2, r3
 800d6da:	4b95      	ldr	r3, [pc, #596]	@ (800d930 <tcp_process+0x59c>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d6e0:	4b94      	ldr	r3, [pc, #592]	@ (800d934 <tcp_process+0x5a0>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6e4:	885b      	ldrh	r3, [r3, #2]
 800d6e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d6e8:	4a92      	ldr	r2, [pc, #584]	@ (800d934 <tcp_process+0x5a0>)
 800d6ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6ec:	8812      	ldrh	r2, [r2, #0]
 800d6ee:	b292      	uxth	r2, r2
 800d6f0:	9202      	str	r2, [sp, #8]
 800d6f2:	9301      	str	r3, [sp, #4]
 800d6f4:	4b90      	ldr	r3, [pc, #576]	@ (800d938 <tcp_process+0x5a4>)
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	4b90      	ldr	r3, [pc, #576]	@ (800d93c <tcp_process+0x5a8>)
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f002 fc7f 	bl	8010000 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d708:	2b05      	cmp	r3, #5
 800d70a:	f200 8215 	bhi.w	800db38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f002 fa4b 	bl	800fbb0 <tcp_rexmit_rto>
      break;
 800d71a:	e20d      	b.n	800db38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d71c:	4b81      	ldr	r3, [pc, #516]	@ (800d924 <tcp_process+0x590>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	f003 0310 	and.w	r3, r3, #16
 800d724:	2b00      	cmp	r3, #0
 800d726:	f000 80a1 	beq.w	800d86c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d72a:	4b7f      	ldr	r3, [pc, #508]	@ (800d928 <tcp_process+0x594>)
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	3b01      	subs	r3, #1
 800d736:	2b00      	cmp	r3, #0
 800d738:	db7e      	blt.n	800d838 <tcp_process+0x4a4>
 800d73a:	4b7b      	ldr	r3, [pc, #492]	@ (800d928 <tcp_process+0x594>)
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	2b00      	cmp	r3, #0
 800d746:	dc77      	bgt.n	800d838 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2204      	movs	r2, #4
 800d74c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d752:	2b00      	cmp	r3, #0
 800d754:	d102      	bne.n	800d75c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d756:	23fa      	movs	r3, #250	@ 0xfa
 800d758:	76bb      	strb	r3, [r7, #26]
 800d75a:	e01d      	b.n	800d798 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d106      	bne.n	800d774 <tcp_process+0x3e0>
 800d766:	4b76      	ldr	r3, [pc, #472]	@ (800d940 <tcp_process+0x5ac>)
 800d768:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800d76c:	4975      	ldr	r1, [pc, #468]	@ (800d944 <tcp_process+0x5b0>)
 800d76e:	4876      	ldr	r0, [pc, #472]	@ (800d948 <tcp_process+0x5b4>)
 800d770:	f007 fe42 	bl	80153f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00a      	beq.n	800d794 <tcp_process+0x400>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	6910      	ldr	r0, [r2, #16]
 800d788:	2200      	movs	r2, #0
 800d78a:	6879      	ldr	r1, [r7, #4]
 800d78c:	4798      	blx	r3
 800d78e:	4603      	mov	r3, r0
 800d790:	76bb      	strb	r3, [r7, #26]
 800d792:	e001      	b.n	800d798 <tcp_process+0x404>
 800d794:	23f0      	movs	r3, #240	@ 0xf0
 800d796:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d798:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00a      	beq.n	800d7b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d7a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d7a4:	f113 0f0d 	cmn.w	r3, #13
 800d7a8:	d002      	beq.n	800d7b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7fd ff8c 	bl	800b6c8 <tcp_abort>
            }
            return ERR_ABRT;
 800d7b0:	f06f 030c 	mvn.w	r3, #12
 800d7b4:	e1ce      	b.n	800db54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fae0 	bl	800dd7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d7bc:	4b63      	ldr	r3, [pc, #396]	@ (800d94c <tcp_process+0x5b8>)
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d005      	beq.n	800d7d0 <tcp_process+0x43c>
            recv_acked--;
 800d7c4:	4b61      	ldr	r3, [pc, #388]	@ (800d94c <tcp_process+0x5b8>)
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	4b5f      	ldr	r3, [pc, #380]	@ (800d94c <tcp_process+0x5b8>)
 800d7ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7d4:	009a      	lsls	r2, r3, #2
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7da:	005b      	lsls	r3, r3, #1
 800d7dc:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d7e0:	428b      	cmp	r3, r1
 800d7e2:	bf38      	it	cc
 800d7e4:	460b      	movcc	r3, r1
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d204      	bcs.n	800d7f4 <tcp_process+0x460>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	e00d      	b.n	800d810 <tcp_process+0x47c>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7f8:	005b      	lsls	r3, r3, #1
 800d7fa:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d904      	bls.n	800d80c <tcp_process+0x478>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	b29b      	uxth	r3, r3
 800d80a:	e001      	b.n	800d810 <tcp_process+0x47c>
 800d80c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d816:	4b4e      	ldr	r3, [pc, #312]	@ (800d950 <tcp_process+0x5bc>)
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	f003 0320 	and.w	r3, r3, #32
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d037      	beq.n	800d892 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	8b5b      	ldrh	r3, [r3, #26]
 800d826:	f043 0302 	orr.w	r3, r3, #2
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2207      	movs	r2, #7
 800d834:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d836:	e02c      	b.n	800d892 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d838:	4b3b      	ldr	r3, [pc, #236]	@ (800d928 <tcp_process+0x594>)
 800d83a:	6819      	ldr	r1, [r3, #0]
 800d83c:	4b3b      	ldr	r3, [pc, #236]	@ (800d92c <tcp_process+0x598>)
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	461a      	mov	r2, r3
 800d842:	4b3b      	ldr	r3, [pc, #236]	@ (800d930 <tcp_process+0x59c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d848:	4b3a      	ldr	r3, [pc, #232]	@ (800d934 <tcp_process+0x5a0>)
 800d84a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d84c:	885b      	ldrh	r3, [r3, #2]
 800d84e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d850:	4a38      	ldr	r2, [pc, #224]	@ (800d934 <tcp_process+0x5a0>)
 800d852:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d854:	8812      	ldrh	r2, [r2, #0]
 800d856:	b292      	uxth	r2, r2
 800d858:	9202      	str	r2, [sp, #8]
 800d85a:	9301      	str	r3, [sp, #4]
 800d85c:	4b36      	ldr	r3, [pc, #216]	@ (800d938 <tcp_process+0x5a4>)
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	4b36      	ldr	r3, [pc, #216]	@ (800d93c <tcp_process+0x5a8>)
 800d862:	4602      	mov	r2, r0
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f002 fbcb 	bl	8010000 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d86a:	e167      	b.n	800db3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d86c:	4b2d      	ldr	r3, [pc, #180]	@ (800d924 <tcp_process+0x590>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	f003 0302 	and.w	r3, r3, #2
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 8161 	beq.w	800db3c <tcp_process+0x7a8>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d87e:	1e5a      	subs	r2, r3, #1
 800d880:	4b2b      	ldr	r3, [pc, #172]	@ (800d930 <tcp_process+0x59c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	429a      	cmp	r2, r3
 800d886:	f040 8159 	bne.w	800db3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f002 f9b2 	bl	800fbf4 <tcp_rexmit>
      break;
 800d890:	e154      	b.n	800db3c <tcp_process+0x7a8>
 800d892:	e153      	b.n	800db3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fa71 	bl	800dd7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d89a:	4b2d      	ldr	r3, [pc, #180]	@ (800d950 <tcp_process+0x5bc>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	f003 0320 	and.w	r3, r3, #32
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f000 814c 	beq.w	800db40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	8b5b      	ldrh	r3, [r3, #26]
 800d8ac:	f043 0302 	orr.w	r3, r3, #2
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2207      	movs	r2, #7
 800d8ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8bc:	e140      	b.n	800db40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 fa5c 	bl	800dd7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d8c4:	4b22      	ldr	r3, [pc, #136]	@ (800d950 <tcp_process+0x5bc>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	f003 0320 	and.w	r3, r3, #32
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d071      	beq.n	800d9b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d8d0:	4b14      	ldr	r3, [pc, #80]	@ (800d924 <tcp_process+0x590>)
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	f003 0310 	and.w	r3, r3, #16
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d060      	beq.n	800d99e <tcp_process+0x60a>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d8e0:	4b11      	ldr	r3, [pc, #68]	@ (800d928 <tcp_process+0x594>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d15a      	bne.n	800d99e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d156      	bne.n	800d99e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	8b5b      	ldrh	r3, [r3, #26]
 800d8f4:	f043 0302 	orr.w	r3, r3, #2
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7fe fdbc 	bl	800c47c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d904:	4b13      	ldr	r3, [pc, #76]	@ (800d954 <tcp_process+0x5c0>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d105      	bne.n	800d91a <tcp_process+0x586>
 800d90e:	4b11      	ldr	r3, [pc, #68]	@ (800d954 <tcp_process+0x5c0>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	4a0f      	ldr	r2, [pc, #60]	@ (800d954 <tcp_process+0x5c0>)
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	e02e      	b.n	800d978 <tcp_process+0x5e4>
 800d91a:	4b0e      	ldr	r3, [pc, #56]	@ (800d954 <tcp_process+0x5c0>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	617b      	str	r3, [r7, #20]
 800d920:	e027      	b.n	800d972 <tcp_process+0x5de>
 800d922:	bf00      	nop
 800d924:	2000d108 	.word	0x2000d108
 800d928:	2000d100 	.word	0x2000d100
 800d92c:	2000d106 	.word	0x2000d106
 800d930:	2000d0fc 	.word	0x2000d0fc
 800d934:	2000d0ec 	.word	0x2000d0ec
 800d938:	2000a198 	.word	0x2000a198
 800d93c:	2000a19c 	.word	0x2000a19c
 800d940:	08017534 	.word	0x08017534
 800d944:	080177d4 	.word	0x080177d4
 800d948:	08017580 	.word	0x08017580
 800d94c:	2000d104 	.word	0x2000d104
 800d950:	2000d109 	.word	0x2000d109
 800d954:	2000d0d0 	.word	0x2000d0d0
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d104      	bne.n	800d96c <tcp_process+0x5d8>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68da      	ldr	r2, [r3, #12]
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	60da      	str	r2, [r3, #12]
 800d96a:	e005      	b.n	800d978 <tcp_process+0x5e4>
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	617b      	str	r3, [r7, #20]
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1ef      	bne.n	800d958 <tcp_process+0x5c4>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	60da      	str	r2, [r3, #12]
 800d97e:	4b77      	ldr	r3, [pc, #476]	@ (800db5c <tcp_process+0x7c8>)
 800d980:	2201      	movs	r2, #1
 800d982:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	220a      	movs	r2, #10
 800d988:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d98a:	4b75      	ldr	r3, [pc, #468]	@ (800db60 <tcp_process+0x7cc>)
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	60da      	str	r2, [r3, #12]
 800d992:	4a73      	ldr	r2, [pc, #460]	@ (800db60 <tcp_process+0x7cc>)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6013      	str	r3, [r2, #0]
 800d998:	f002 fcf4 	bl	8010384 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d99c:	e0d2      	b.n	800db44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	8b5b      	ldrh	r3, [r3, #26]
 800d9a2:	f043 0302 	orr.w	r3, r3, #2
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2208      	movs	r2, #8
 800d9b0:	751a      	strb	r2, [r3, #20]
      break;
 800d9b2:	e0c7      	b.n	800db44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d9b4:	4b6b      	ldr	r3, [pc, #428]	@ (800db64 <tcp_process+0x7d0>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	f003 0310 	and.w	r3, r3, #16
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 80c1 	beq.w	800db44 <tcp_process+0x7b0>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d9c6:	4b68      	ldr	r3, [pc, #416]	@ (800db68 <tcp_process+0x7d4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	f040 80ba 	bne.w	800db44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f040 80b5 	bne.w	800db44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2206      	movs	r2, #6
 800d9de:	751a      	strb	r2, [r3, #20]
      break;
 800d9e0:	e0b0      	b.n	800db44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 f9ca 	bl	800dd7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d9e8:	4b60      	ldr	r3, [pc, #384]	@ (800db6c <tcp_process+0x7d8>)
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	f003 0320 	and.w	r3, r3, #32
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 80a9 	beq.w	800db48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	8b5b      	ldrh	r3, [r3, #26]
 800d9fa:	f043 0302 	orr.w	r3, r3, #2
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7fe fd39 	bl	800c47c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800da0a:	4b59      	ldr	r3, [pc, #356]	@ (800db70 <tcp_process+0x7dc>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	429a      	cmp	r2, r3
 800da12:	d105      	bne.n	800da20 <tcp_process+0x68c>
 800da14:	4b56      	ldr	r3, [pc, #344]	@ (800db70 <tcp_process+0x7dc>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	4a55      	ldr	r2, [pc, #340]	@ (800db70 <tcp_process+0x7dc>)
 800da1c:	6013      	str	r3, [r2, #0]
 800da1e:	e013      	b.n	800da48 <tcp_process+0x6b4>
 800da20:	4b53      	ldr	r3, [pc, #332]	@ (800db70 <tcp_process+0x7dc>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	613b      	str	r3, [r7, #16]
 800da26:	e00c      	b.n	800da42 <tcp_process+0x6ae>
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d104      	bne.n	800da3c <tcp_process+0x6a8>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	68da      	ldr	r2, [r3, #12]
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	60da      	str	r2, [r3, #12]
 800da3a:	e005      	b.n	800da48 <tcp_process+0x6b4>
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	613b      	str	r3, [r7, #16]
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1ef      	bne.n	800da28 <tcp_process+0x694>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	60da      	str	r2, [r3, #12]
 800da4e:	4b43      	ldr	r3, [pc, #268]	@ (800db5c <tcp_process+0x7c8>)
 800da50:	2201      	movs	r2, #1
 800da52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	220a      	movs	r2, #10
 800da58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800da5a:	4b41      	ldr	r3, [pc, #260]	@ (800db60 <tcp_process+0x7cc>)
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	60da      	str	r2, [r3, #12]
 800da62:	4a3f      	ldr	r2, [pc, #252]	@ (800db60 <tcp_process+0x7cc>)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6013      	str	r3, [r2, #0]
 800da68:	f002 fc8c 	bl	8010384 <tcp_timer_needed>
      }
      break;
 800da6c:	e06c      	b.n	800db48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 f984 	bl	800dd7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800da74:	4b3b      	ldr	r3, [pc, #236]	@ (800db64 <tcp_process+0x7d0>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	f003 0310 	and.w	r3, r3, #16
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d065      	beq.n	800db4c <tcp_process+0x7b8>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800da84:	4b38      	ldr	r3, [pc, #224]	@ (800db68 <tcp_process+0x7d4>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d15f      	bne.n	800db4c <tcp_process+0x7b8>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da90:	2b00      	cmp	r3, #0
 800da92:	d15b      	bne.n	800db4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7fe fcf1 	bl	800c47c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800da9a:	4b35      	ldr	r3, [pc, #212]	@ (800db70 <tcp_process+0x7dc>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d105      	bne.n	800dab0 <tcp_process+0x71c>
 800daa4:	4b32      	ldr	r3, [pc, #200]	@ (800db70 <tcp_process+0x7dc>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	4a31      	ldr	r2, [pc, #196]	@ (800db70 <tcp_process+0x7dc>)
 800daac:	6013      	str	r3, [r2, #0]
 800daae:	e013      	b.n	800dad8 <tcp_process+0x744>
 800dab0:	4b2f      	ldr	r3, [pc, #188]	@ (800db70 <tcp_process+0x7dc>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	60fb      	str	r3, [r7, #12]
 800dab6:	e00c      	b.n	800dad2 <tcp_process+0x73e>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d104      	bne.n	800dacc <tcp_process+0x738>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	68da      	ldr	r2, [r3, #12]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	60da      	str	r2, [r3, #12]
 800daca:	e005      	b.n	800dad8 <tcp_process+0x744>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1ef      	bne.n	800dab8 <tcp_process+0x724>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	60da      	str	r2, [r3, #12]
 800dade:	4b1f      	ldr	r3, [pc, #124]	@ (800db5c <tcp_process+0x7c8>)
 800dae0:	2201      	movs	r2, #1
 800dae2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	220a      	movs	r2, #10
 800dae8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800daea:	4b1d      	ldr	r3, [pc, #116]	@ (800db60 <tcp_process+0x7cc>)
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	60da      	str	r2, [r3, #12]
 800daf2:	4a1b      	ldr	r2, [pc, #108]	@ (800db60 <tcp_process+0x7cc>)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	f002 fc44 	bl	8010384 <tcp_timer_needed>
      }
      break;
 800dafc:	e026      	b.n	800db4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f93c 	bl	800dd7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800db04:	4b17      	ldr	r3, [pc, #92]	@ (800db64 <tcp_process+0x7d0>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	f003 0310 	and.w	r3, r3, #16
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d01f      	beq.n	800db50 <tcp_process+0x7bc>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db14:	4b14      	ldr	r3, [pc, #80]	@ (800db68 <tcp_process+0x7d4>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d119      	bne.n	800db50 <tcp_process+0x7bc>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db20:	2b00      	cmp	r3, #0
 800db22:	d115      	bne.n	800db50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800db24:	4b11      	ldr	r3, [pc, #68]	@ (800db6c <tcp_process+0x7d8>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	f043 0310 	orr.w	r3, r3, #16
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	4b0f      	ldr	r3, [pc, #60]	@ (800db6c <tcp_process+0x7d8>)
 800db30:	701a      	strb	r2, [r3, #0]
      }
      break;
 800db32:	e00d      	b.n	800db50 <tcp_process+0x7bc>
    default:
      break;
 800db34:	bf00      	nop
 800db36:	e00c      	b.n	800db52 <tcp_process+0x7be>
      break;
 800db38:	bf00      	nop
 800db3a:	e00a      	b.n	800db52 <tcp_process+0x7be>
      break;
 800db3c:	bf00      	nop
 800db3e:	e008      	b.n	800db52 <tcp_process+0x7be>
      break;
 800db40:	bf00      	nop
 800db42:	e006      	b.n	800db52 <tcp_process+0x7be>
      break;
 800db44:	bf00      	nop
 800db46:	e004      	b.n	800db52 <tcp_process+0x7be>
      break;
 800db48:	bf00      	nop
 800db4a:	e002      	b.n	800db52 <tcp_process+0x7be>
      break;
 800db4c:	bf00      	nop
 800db4e:	e000      	b.n	800db52 <tcp_process+0x7be>
      break;
 800db50:	bf00      	nop
  }
  return ERR_OK;
 800db52:	2300      	movs	r3, #0
}
 800db54:	4618      	mov	r0, r3
 800db56:	3724      	adds	r7, #36	@ 0x24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd90      	pop	{r4, r7, pc}
 800db5c:	2000d0d8 	.word	0x2000d0d8
 800db60:	2000d0d4 	.word	0x2000d0d4
 800db64:	2000d108 	.word	0x2000d108
 800db68:	2000d100 	.word	0x2000d100
 800db6c:	2000d109 	.word	0x2000d109
 800db70:	2000d0d0 	.word	0x2000d0d0

0800db74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800db74:	b590      	push	{r4, r7, lr}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d106      	bne.n	800db92 <tcp_oos_insert_segment+0x1e>
 800db84:	4b3b      	ldr	r3, [pc, #236]	@ (800dc74 <tcp_oos_insert_segment+0x100>)
 800db86:	f240 421f 	movw	r2, #1055	@ 0x41f
 800db8a:	493b      	ldr	r1, [pc, #236]	@ (800dc78 <tcp_oos_insert_segment+0x104>)
 800db8c:	483b      	ldr	r0, [pc, #236]	@ (800dc7c <tcp_oos_insert_segment+0x108>)
 800db8e:	f007 fc33 	bl	80153f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	899b      	ldrh	r3, [r3, #12]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fb fcb6 	bl	800950c <lwip_htons>
 800dba0:	4603      	mov	r3, r0
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	f003 0301 	and.w	r3, r3, #1
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d028      	beq.n	800dbfe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800dbac:	6838      	ldr	r0, [r7, #0]
 800dbae:	f7fe fa63 	bl	800c078 <tcp_segs_free>
    next = NULL;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	603b      	str	r3, [r7, #0]
 800dbb6:	e056      	b.n	800dc66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	899b      	ldrh	r3, [r3, #12]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7fb fca3 	bl	800950c <lwip_htons>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00d      	beq.n	800dbee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	899b      	ldrh	r3, [r3, #12]
 800dbd8:	b29c      	uxth	r4, r3
 800dbda:	2001      	movs	r0, #1
 800dbdc:	f7fb fc96 	bl	800950c <lwip_htons>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	4322      	orrs	r2, r4
 800dbea:	b292      	uxth	r2, r2
 800dbec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f7fe fa52 	bl	800c0a2 <tcp_seg_free>
    while (next &&
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00e      	beq.n	800dc22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	891b      	ldrh	r3, [r3, #8]
 800dc08:	461a      	mov	r2, r3
 800dc0a:	4b1d      	ldr	r3, [pc, #116]	@ (800dc80 <tcp_oos_insert_segment+0x10c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	441a      	add	r2, r3
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	8909      	ldrh	r1, [r1, #8]
 800dc1a:	440b      	add	r3, r1
 800dc1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	daca      	bge.n	800dbb8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01e      	beq.n	800dc66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	891b      	ldrh	r3, [r3, #8]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	4b14      	ldr	r3, [pc, #80]	@ (800dc80 <tcp_oos_insert_segment+0x10c>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	441a      	add	r2, r3
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	dd12      	ble.n	800dc66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	4b0d      	ldr	r3, [pc, #52]	@ (800dc80 <tcp_oos_insert_segment+0x10c>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	685a      	ldr	r2, [r3, #4]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	891b      	ldrh	r3, [r3, #8]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	4610      	mov	r0, r2
 800dc62:	f7fc fe13 	bl	800a88c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	683a      	ldr	r2, [r7, #0]
 800dc6a:	601a      	str	r2, [r3, #0]
}
 800dc6c:	bf00      	nop
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd90      	pop	{r4, r7, pc}
 800dc74:	08017534 	.word	0x08017534
 800dc78:	080177f4 	.word	0x080177f4
 800dc7c:	08017580 	.word	0x08017580
 800dc80:	2000d0fc 	.word	0x2000d0fc

0800dc84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800dc84:	b5b0      	push	{r4, r5, r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dc92:	e03e      	b.n	800dd12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fd f800 	bl	800aca8 <pbuf_clen>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dcb2:	8a7a      	ldrh	r2, [r7, #18]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d906      	bls.n	800dcc6 <tcp_free_acked_segments+0x42>
 800dcb8:	4b2a      	ldr	r3, [pc, #168]	@ (800dd64 <tcp_free_acked_segments+0xe0>)
 800dcba:	f240 4257 	movw	r2, #1111	@ 0x457
 800dcbe:	492a      	ldr	r1, [pc, #168]	@ (800dd68 <tcp_free_acked_segments+0xe4>)
 800dcc0:	482a      	ldr	r0, [pc, #168]	@ (800dd6c <tcp_free_acked_segments+0xe8>)
 800dcc2:	f007 fb99 	bl	80153f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800dccc:	8a7b      	ldrh	r3, [r7, #18]
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	891a      	ldrh	r2, [r3, #8]
 800dcdc:	4b24      	ldr	r3, [pc, #144]	@ (800dd70 <tcp_free_acked_segments+0xec>)
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	4413      	add	r3, r2
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	4b22      	ldr	r3, [pc, #136]	@ (800dd70 <tcp_free_acked_segments+0xec>)
 800dce6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dce8:	6978      	ldr	r0, [r7, #20]
 800dcea:	f7fe f9da 	bl	800c0a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00c      	beq.n	800dd12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d109      	bne.n	800dd12 <tcp_free_acked_segments+0x8e>
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d106      	bne.n	800dd12 <tcp_free_acked_segments+0x8e>
 800dd04:	4b17      	ldr	r3, [pc, #92]	@ (800dd64 <tcp_free_acked_segments+0xe0>)
 800dd06:	f240 4261 	movw	r2, #1121	@ 0x461
 800dd0a:	491a      	ldr	r1, [pc, #104]	@ (800dd74 <tcp_free_acked_segments+0xf0>)
 800dd0c:	4817      	ldr	r0, [pc, #92]	@ (800dd6c <tcp_free_acked_segments+0xe8>)
 800dd0e:	f007 fb73 	bl	80153f8 <iprintf>
  while (seg_list != NULL &&
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d020      	beq.n	800dd5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fb fc0a 	bl	8009538 <lwip_htonl>
 800dd24:	4604      	mov	r4, r0
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	891b      	ldrh	r3, [r3, #8]
 800dd2a:	461d      	mov	r5, r3
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	899b      	ldrh	r3, [r3, #12]
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fb fbe9 	bl	800950c <lwip_htons>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	f003 0303 	and.w	r3, r3, #3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d001      	beq.n	800dd4a <tcp_free_acked_segments+0xc6>
 800dd46:	2301      	movs	r3, #1
 800dd48:	e000      	b.n	800dd4c <tcp_free_acked_segments+0xc8>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	442b      	add	r3, r5
 800dd4e:	18e2      	adds	r2, r4, r3
 800dd50:	4b09      	ldr	r3, [pc, #36]	@ (800dd78 <tcp_free_acked_segments+0xf4>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	dd9c      	ble.n	800dc94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3718      	adds	r7, #24
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bdb0      	pop	{r4, r5, r7, pc}
 800dd64:	08017534 	.word	0x08017534
 800dd68:	0801781c 	.word	0x0801781c
 800dd6c:	08017580 	.word	0x08017580
 800dd70:	2000d104 	.word	0x2000d104
 800dd74:	08017844 	.word	0x08017844
 800dd78:	2000d100 	.word	0x2000d100

0800dd7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800dd7c:	b5b0      	push	{r4, r5, r7, lr}
 800dd7e:	b094      	sub	sp, #80	@ 0x50
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <tcp_receive+0x20>
 800dd8e:	4b91      	ldr	r3, [pc, #580]	@ (800dfd4 <tcp_receive+0x258>)
 800dd90:	f240 427b 	movw	r2, #1147	@ 0x47b
 800dd94:	4990      	ldr	r1, [pc, #576]	@ (800dfd8 <tcp_receive+0x25c>)
 800dd96:	4891      	ldr	r0, [pc, #580]	@ (800dfdc <tcp_receive+0x260>)
 800dd98:	f007 fb2e 	bl	80153f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	7d1b      	ldrb	r3, [r3, #20]
 800dda0:	2b03      	cmp	r3, #3
 800dda2:	d806      	bhi.n	800ddb2 <tcp_receive+0x36>
 800dda4:	4b8b      	ldr	r3, [pc, #556]	@ (800dfd4 <tcp_receive+0x258>)
 800dda6:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ddaa:	498d      	ldr	r1, [pc, #564]	@ (800dfe0 <tcp_receive+0x264>)
 800ddac:	488b      	ldr	r0, [pc, #556]	@ (800dfdc <tcp_receive+0x260>)
 800ddae:	f007 fb23 	bl	80153f8 <iprintf>

  if (flags & TCP_ACK) {
 800ddb2:	4b8c      	ldr	r3, [pc, #560]	@ (800dfe4 <tcp_receive+0x268>)
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	f003 0310 	and.w	r3, r3, #16
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f000 8264 	beq.w	800e288 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddcc:	4413      	add	r3, r2
 800ddce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ddd4:	4b84      	ldr	r3, [pc, #528]	@ (800dfe8 <tcp_receive+0x26c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	db1b      	blt.n	800de16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dde2:	4b81      	ldr	r3, [pc, #516]	@ (800dfe8 <tcp_receive+0x26c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d106      	bne.n	800ddf8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ddee:	4b7f      	ldr	r3, [pc, #508]	@ (800dfec <tcp_receive+0x270>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	db0e      	blt.n	800de16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ddfc:	4b7b      	ldr	r3, [pc, #492]	@ (800dfec <tcp_receive+0x270>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800de00:	429a      	cmp	r2, r3
 800de02:	d125      	bne.n	800de50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800de04:	4b7a      	ldr	r3, [pc, #488]	@ (800dff0 <tcp_receive+0x274>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	89db      	ldrh	r3, [r3, #14]
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de12:	429a      	cmp	r2, r3
 800de14:	d91c      	bls.n	800de50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800de16:	4b76      	ldr	r3, [pc, #472]	@ (800dff0 <tcp_receive+0x274>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	89db      	ldrh	r3, [r3, #14]
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de30:	429a      	cmp	r2, r3
 800de32:	d205      	bcs.n	800de40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800de40:	4b69      	ldr	r3, [pc, #420]	@ (800dfe8 <tcp_receive+0x26c>)
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800de48:	4b68      	ldr	r3, [pc, #416]	@ (800dfec <tcp_receive+0x270>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800de50:	4b66      	ldr	r3, [pc, #408]	@ (800dfec <tcp_receive+0x270>)
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	dc58      	bgt.n	800df10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800de5e:	4b65      	ldr	r3, [pc, #404]	@ (800dff4 <tcp_receive+0x278>)
 800de60:	881b      	ldrh	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d14b      	bne.n	800defe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800de70:	4413      	add	r3, r2
 800de72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de74:	429a      	cmp	r2, r3
 800de76:	d142      	bne.n	800defe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de7e:	2b00      	cmp	r3, #0
 800de80:	db3d      	blt.n	800defe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de86:	4b59      	ldr	r3, [pc, #356]	@ (800dfec <tcp_receive+0x270>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d137      	bne.n	800defe <tcp_receive+0x182>
              found_dupack = 1;
 800de8e:	2301      	movs	r3, #1
 800de90:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800de98:	2bff      	cmp	r3, #255	@ 0xff
 800de9a:	d007      	beq.n	800deac <tcp_receive+0x130>
                ++pcb->dupacks;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dea2:	3301      	adds	r3, #1
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d91b      	bls.n	800deee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dec0:	4413      	add	r3, r2
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800deca:	429a      	cmp	r2, r3
 800decc:	d30a      	bcc.n	800dee4 <tcp_receive+0x168>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ded8:	4413      	add	r3, r2
 800deda:	b29a      	uxth	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800dee2:	e004      	b.n	800deee <tcp_receive+0x172>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800deea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800def4:	2b02      	cmp	r3, #2
 800def6:	d902      	bls.n	800defe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f001 fee7 	bl	800fccc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800defe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df00:	2b00      	cmp	r3, #0
 800df02:	f040 8161 	bne.w	800e1c8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800df0e:	e15b      	b.n	800e1c8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df10:	4b36      	ldr	r3, [pc, #216]	@ (800dfec <tcp_receive+0x270>)
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	3b01      	subs	r3, #1
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f2c0 814e 	blt.w	800e1be <tcp_receive+0x442>
 800df22:	4b32      	ldr	r3, [pc, #200]	@ (800dfec <tcp_receive+0x270>)
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df2a:	1ad3      	subs	r3, r2, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f300 8146 	bgt.w	800e1be <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	8b5b      	ldrh	r3, [r3, #26]
 800df36:	f003 0304 	and.w	r3, r3, #4
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d010      	beq.n	800df60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	8b5b      	ldrh	r3, [r3, #26]
 800df42:	f023 0304 	bic.w	r3, r3, #4
 800df46:	b29a      	uxth	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800df6e:	10db      	asrs	r3, r3, #3
 800df70:	b21b      	sxth	r3, r3
 800df72:	b29a      	uxth	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	4413      	add	r3, r2
 800df7e:	b29b      	uxth	r3, r3
 800df80:	b21a      	sxth	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800df88:	4b18      	ldr	r3, [pc, #96]	@ (800dfec <tcp_receive+0x270>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df92:	b29b      	uxth	r3, r3
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800dfa0:	4b12      	ldr	r3, [pc, #72]	@ (800dfec <tcp_receive+0x270>)
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7d1b      	ldrb	r3, [r3, #20]
 800dfac:	2b03      	cmp	r3, #3
 800dfae:	f240 8097 	bls.w	800e0e0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d245      	bcs.n	800e04e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	8b5b      	ldrh	r3, [r3, #26]
 800dfc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d014      	beq.n	800dff8 <tcp_receive+0x27c>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e013      	b.n	800dffa <tcp_receive+0x27e>
 800dfd2:	bf00      	nop
 800dfd4:	08017534 	.word	0x08017534
 800dfd8:	08017864 	.word	0x08017864
 800dfdc:	08017580 	.word	0x08017580
 800dfe0:	08017880 	.word	0x08017880
 800dfe4:	2000d108 	.word	0x2000d108
 800dfe8:	2000d0fc 	.word	0x2000d0fc
 800dfec:	2000d100 	.word	0x2000d100
 800dff0:	2000d0ec 	.word	0x2000d0ec
 800dff4:	2000d106 	.word	0x2000d106
 800dff8:	2302      	movs	r3, #2
 800dffa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dffe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800e002:	b29a      	uxth	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e008:	fb12 f303 	smulbb	r3, r2, r3
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e010:	4293      	cmp	r3, r2
 800e012:	bf28      	it	cs
 800e014:	4613      	movcs	r3, r2
 800e016:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e01e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e020:	4413      	add	r3, r2
 800e022:	b29a      	uxth	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d309      	bcc.n	800e042 <tcp_receive+0x2c6>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e034:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e036:	4413      	add	r3, r2
 800e038:	b29a      	uxth	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e040:	e04e      	b.n	800e0e0 <tcp_receive+0x364>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e048:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e04c:	e048      	b.n	800e0e0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e054:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e056:	4413      	add	r3, r2
 800e058:	b29a      	uxth	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e060:	429a      	cmp	r2, r3
 800e062:	d309      	bcc.n	800e078 <tcp_receive+0x2fc>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e06a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e06c:	4413      	add	r3, r2
 800e06e:	b29a      	uxth	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e076:	e004      	b.n	800e082 <tcp_receive+0x306>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e07e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e08e:	429a      	cmp	r2, r3
 800e090:	d326      	bcc.n	800e0e0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e09e:	1ad3      	subs	r3, r2, r3
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0b2:	4413      	add	r3, r2
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d30a      	bcc.n	800e0d6 <tcp_receive+0x35a>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0ca:	4413      	add	r3, r2
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e0d4:	e004      	b.n	800e0e0 <tcp_receive+0x364>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0e8:	4a98      	ldr	r2, [pc, #608]	@ (800e34c <tcp_receive+0x5d0>)
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7ff fdca 	bl	800dc84 <tcp_free_acked_segments>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0fe:	4a94      	ldr	r2, [pc, #592]	@ (800e350 <tcp_receive+0x5d4>)
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7ff fdbf 	bl	800dc84 <tcp_free_acked_segments>
 800e106:	4602      	mov	r2, r0
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e110:	2b00      	cmp	r3, #0
 800e112:	d104      	bne.n	800e11e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e11a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e11c:	e002      	b.n	800e124 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d103      	bne.n	800e13a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800e140:	4b84      	ldr	r3, [pc, #528]	@ (800e354 <tcp_receive+0x5d8>)
 800e142:	881b      	ldrh	r3, [r3, #0]
 800e144:	4413      	add	r3, r2
 800e146:	b29a      	uxth	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	8b5b      	ldrh	r3, [r3, #26]
 800e152:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e156:	2b00      	cmp	r3, #0
 800e158:	d035      	beq.n	800e1c6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d118      	bne.n	800e194 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00c      	beq.n	800e184 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	4618      	mov	r0, r3
 800e178:	f7fb f9de 	bl	8009538 <lwip_htonl>
 800e17c:	4603      	mov	r3, r0
 800e17e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e180:	2b00      	cmp	r3, #0
 800e182:	dc20      	bgt.n	800e1c6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	8b5b      	ldrh	r3, [r3, #26]
 800e188:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e192:	e018      	b.n	800e1c6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fb f9c9 	bl	8009538 <lwip_htonl>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	1ae3      	subs	r3, r4, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	dc0b      	bgt.n	800e1c6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8b5b      	ldrh	r3, [r3, #26]
 800e1b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e1bc:	e003      	b.n	800e1c6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f001 ff70 	bl	80100a4 <tcp_send_empty_ack>
 800e1c4:	e000      	b.n	800e1c8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e1c6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d05b      	beq.n	800e288 <tcp_receive+0x50c>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1d4:	4b60      	ldr	r3, [pc, #384]	@ (800e358 <tcp_receive+0x5dc>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	1ad3      	subs	r3, r2, r3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	da54      	bge.n	800e288 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e1de:	4b5f      	ldr	r3, [pc, #380]	@ (800e35c <tcp_receive+0x5e0>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	1ad3      	subs	r3, r2, r3
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e1f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e1fc:	10db      	asrs	r3, r3, #3
 800e1fe:	b21b      	sxth	r3, r3
 800e200:	b29b      	uxth	r3, r3
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	b29b      	uxth	r3, r3
 800e206:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e210:	b29a      	uxth	r2, r3
 800e212:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e216:	4413      	add	r3, r2
 800e218:	b29b      	uxth	r3, r3
 800e21a:	b21a      	sxth	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800e220:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800e224:	2b00      	cmp	r3, #0
 800e226:	da05      	bge.n	800e234 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e22c:	425b      	negs	r3, r3
 800e22e:	b29b      	uxth	r3, r3
 800e230:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e234:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e23e:	109b      	asrs	r3, r3, #2
 800e240:	b21b      	sxth	r3, r3
 800e242:	b29b      	uxth	r3, r3
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	b29b      	uxth	r3, r3
 800e248:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e252:	b29a      	uxth	r2, r3
 800e254:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e258:	4413      	add	r3, r2
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	b21a      	sxth	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e268:	10db      	asrs	r3, r3, #3
 800e26a:	b21b      	sxth	r3, r3
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e274:	b29b      	uxth	r3, r3
 800e276:	4413      	add	r3, r2
 800e278:	b29b      	uxth	r3, r3
 800e27a:	b21a      	sxth	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2200      	movs	r2, #0
 800e286:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e288:	4b35      	ldr	r3, [pc, #212]	@ (800e360 <tcp_receive+0x5e4>)
 800e28a:	881b      	ldrh	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 84df 	beq.w	800ec50 <tcp_receive+0xed4>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7d1b      	ldrb	r3, [r3, #20]
 800e296:	2b06      	cmp	r3, #6
 800e298:	f200 84da 	bhi.w	800ec50 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2a0:	4b30      	ldr	r3, [pc, #192]	@ (800e364 <tcp_receive+0x5e8>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f2c0 808f 	blt.w	800e3cc <tcp_receive+0x650>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2b2:	4b2b      	ldr	r3, [pc, #172]	@ (800e360 <tcp_receive+0x5e4>)
 800e2b4:	881b      	ldrh	r3, [r3, #0]
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4b2a      	ldr	r3, [pc, #168]	@ (800e364 <tcp_receive+0x5e8>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	440b      	add	r3, r1
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f300 8082 	bgt.w	800e3cc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e2c8:	4b27      	ldr	r3, [pc, #156]	@ (800e368 <tcp_receive+0x5ec>)
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2d2:	4b24      	ldr	r3, [pc, #144]	@ (800e364 <tcp_receive+0x5e8>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e2da:	4b23      	ldr	r3, [pc, #140]	@ (800e368 <tcp_receive+0x5ec>)
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d106      	bne.n	800e2f0 <tcp_receive+0x574>
 800e2e2:	4b22      	ldr	r3, [pc, #136]	@ (800e36c <tcp_receive+0x5f0>)
 800e2e4:	f240 5294 	movw	r2, #1428	@ 0x594
 800e2e8:	4921      	ldr	r1, [pc, #132]	@ (800e370 <tcp_receive+0x5f4>)
 800e2ea:	4822      	ldr	r0, [pc, #136]	@ (800e374 <tcp_receive+0x5f8>)
 800e2ec:	f007 f884 	bl	80153f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d906      	bls.n	800e308 <tcp_receive+0x58c>
 800e2fa:	4b1c      	ldr	r3, [pc, #112]	@ (800e36c <tcp_receive+0x5f0>)
 800e2fc:	f240 5295 	movw	r2, #1429	@ 0x595
 800e300:	491d      	ldr	r1, [pc, #116]	@ (800e378 <tcp_receive+0x5fc>)
 800e302:	481c      	ldr	r0, [pc, #112]	@ (800e374 <tcp_receive+0x5f8>)
 800e304:	f007 f878 	bl	80153f8 <iprintf>
      off = (u16_t)off32;
 800e308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e30a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e30e:	4b16      	ldr	r3, [pc, #88]	@ (800e368 <tcp_receive+0x5ec>)
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	891b      	ldrh	r3, [r3, #8]
 800e314:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e318:	429a      	cmp	r2, r3
 800e31a:	d906      	bls.n	800e32a <tcp_receive+0x5ae>
 800e31c:	4b13      	ldr	r3, [pc, #76]	@ (800e36c <tcp_receive+0x5f0>)
 800e31e:	f240 5297 	movw	r2, #1431	@ 0x597
 800e322:	4916      	ldr	r1, [pc, #88]	@ (800e37c <tcp_receive+0x600>)
 800e324:	4813      	ldr	r0, [pc, #76]	@ (800e374 <tcp_receive+0x5f8>)
 800e326:	f007 f867 	bl	80153f8 <iprintf>
      inseg.len -= off;
 800e32a:	4b0f      	ldr	r3, [pc, #60]	@ (800e368 <tcp_receive+0x5ec>)
 800e32c:	891a      	ldrh	r2, [r3, #8]
 800e32e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	b29a      	uxth	r2, r3
 800e336:	4b0c      	ldr	r3, [pc, #48]	@ (800e368 <tcp_receive+0x5ec>)
 800e338:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e33a:	4b0b      	ldr	r3, [pc, #44]	@ (800e368 <tcp_receive+0x5ec>)
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	891a      	ldrh	r2, [r3, #8]
 800e340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800e348:	e02a      	b.n	800e3a0 <tcp_receive+0x624>
 800e34a:	bf00      	nop
 800e34c:	0801789c 	.word	0x0801789c
 800e350:	080178a4 	.word	0x080178a4
 800e354:	2000d104 	.word	0x2000d104
 800e358:	2000d100 	.word	0x2000d100
 800e35c:	2000d0c4 	.word	0x2000d0c4
 800e360:	2000d106 	.word	0x2000d106
 800e364:	2000d0fc 	.word	0x2000d0fc
 800e368:	2000d0dc 	.word	0x2000d0dc
 800e36c:	08017534 	.word	0x08017534
 800e370:	080178ac 	.word	0x080178ac
 800e374:	08017580 	.word	0x08017580
 800e378:	080178bc 	.word	0x080178bc
 800e37c:	080178cc 	.word	0x080178cc
        off -= p->len;
 800e380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e382:	895b      	ldrh	r3, [r3, #10]
 800e384:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e38e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e390:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e392:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e396:	2200      	movs	r2, #0
 800e398:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e39a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800e3a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3a2:	895b      	ldrh	r3, [r3, #10]
 800e3a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d8e9      	bhi.n	800e380 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e3ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e3b4:	f7fc fb6a 	bl	800aa8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3bc:	4a90      	ldr	r2, [pc, #576]	@ (800e600 <tcp_receive+0x884>)
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	4b90      	ldr	r3, [pc, #576]	@ (800e604 <tcp_receive+0x888>)
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	4a8e      	ldr	r2, [pc, #568]	@ (800e600 <tcp_receive+0x884>)
 800e3c6:	6812      	ldr	r2, [r2, #0]
 800e3c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e3ca:	e00d      	b.n	800e3e8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e3cc:	4b8c      	ldr	r3, [pc, #560]	@ (800e600 <tcp_receive+0x884>)
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	da06      	bge.n	800e3e8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	8b5b      	ldrh	r3, [r3, #26]
 800e3de:	f043 0302 	orr.w	r3, r3, #2
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e3e8:	4b85      	ldr	r3, [pc, #532]	@ (800e600 <tcp_receive+0x884>)
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f2c0 8427 	blt.w	800ec46 <tcp_receive+0xeca>
 800e3f8:	4b81      	ldr	r3, [pc, #516]	@ (800e600 <tcp_receive+0x884>)
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e400:	6879      	ldr	r1, [r7, #4]
 800e402:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e404:	440b      	add	r3, r1
 800e406:	1ad3      	subs	r3, r2, r3
 800e408:	3301      	adds	r3, #1
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f300 841b 	bgt.w	800ec46 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e414:	4b7a      	ldr	r3, [pc, #488]	@ (800e600 <tcp_receive+0x884>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	429a      	cmp	r2, r3
 800e41a:	f040 8298 	bne.w	800e94e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e41e:	4b79      	ldr	r3, [pc, #484]	@ (800e604 <tcp_receive+0x888>)
 800e420:	891c      	ldrh	r4, [r3, #8]
 800e422:	4b78      	ldr	r3, [pc, #480]	@ (800e604 <tcp_receive+0x888>)
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	899b      	ldrh	r3, [r3, #12]
 800e428:	b29b      	uxth	r3, r3
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fb f86e 	bl	800950c <lwip_htons>
 800e430:	4603      	mov	r3, r0
 800e432:	b2db      	uxtb	r3, r3
 800e434:	f003 0303 	and.w	r3, r3, #3
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <tcp_receive+0x6c4>
 800e43c:	2301      	movs	r3, #1
 800e43e:	e000      	b.n	800e442 <tcp_receive+0x6c6>
 800e440:	2300      	movs	r3, #0
 800e442:	4423      	add	r3, r4
 800e444:	b29a      	uxth	r2, r3
 800e446:	4b70      	ldr	r3, [pc, #448]	@ (800e608 <tcp_receive+0x88c>)
 800e448:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e44e:	4b6e      	ldr	r3, [pc, #440]	@ (800e608 <tcp_receive+0x88c>)
 800e450:	881b      	ldrh	r3, [r3, #0]
 800e452:	429a      	cmp	r2, r3
 800e454:	d274      	bcs.n	800e540 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e456:	4b6b      	ldr	r3, [pc, #428]	@ (800e604 <tcp_receive+0x888>)
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	899b      	ldrh	r3, [r3, #12]
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fb f854 	bl	800950c <lwip_htons>
 800e464:	4603      	mov	r3, r0
 800e466:	b2db      	uxtb	r3, r3
 800e468:	f003 0301 	and.w	r3, r3, #1
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d01e      	beq.n	800e4ae <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e470:	4b64      	ldr	r3, [pc, #400]	@ (800e604 <tcp_receive+0x888>)
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	899b      	ldrh	r3, [r3, #12]
 800e476:	b29b      	uxth	r3, r3
 800e478:	b21b      	sxth	r3, r3
 800e47a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e47e:	b21c      	sxth	r4, r3
 800e480:	4b60      	ldr	r3, [pc, #384]	@ (800e604 <tcp_receive+0x888>)
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	899b      	ldrh	r3, [r3, #12]
 800e486:	b29b      	uxth	r3, r3
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fb f83f 	bl	800950c <lwip_htons>
 800e48e:	4603      	mov	r3, r0
 800e490:	b2db      	uxtb	r3, r3
 800e492:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e496:	b29b      	uxth	r3, r3
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fb f837 	bl	800950c <lwip_htons>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	b21b      	sxth	r3, r3
 800e4a2:	4323      	orrs	r3, r4
 800e4a4:	b21a      	sxth	r2, r3
 800e4a6:	4b57      	ldr	r3, [pc, #348]	@ (800e604 <tcp_receive+0x888>)
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	b292      	uxth	r2, r2
 800e4ac:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e4b2:	4b54      	ldr	r3, [pc, #336]	@ (800e604 <tcp_receive+0x888>)
 800e4b4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e4b6:	4b53      	ldr	r3, [pc, #332]	@ (800e604 <tcp_receive+0x888>)
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	899b      	ldrh	r3, [r3, #12]
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fb f824 	bl	800950c <lwip_htons>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	f003 0302 	and.w	r3, r3, #2
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d005      	beq.n	800e4dc <tcp_receive+0x760>
            inseg.len -= 1;
 800e4d0:	4b4c      	ldr	r3, [pc, #304]	@ (800e604 <tcp_receive+0x888>)
 800e4d2:	891b      	ldrh	r3, [r3, #8]
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	4b4a      	ldr	r3, [pc, #296]	@ (800e604 <tcp_receive+0x888>)
 800e4da:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e4dc:	4b49      	ldr	r3, [pc, #292]	@ (800e604 <tcp_receive+0x888>)
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	4a48      	ldr	r2, [pc, #288]	@ (800e604 <tcp_receive+0x888>)
 800e4e2:	8912      	ldrh	r2, [r2, #8]
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fc f9d0 	bl	800a88c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e4ec:	4b45      	ldr	r3, [pc, #276]	@ (800e604 <tcp_receive+0x888>)
 800e4ee:	891c      	ldrh	r4, [r3, #8]
 800e4f0:	4b44      	ldr	r3, [pc, #272]	@ (800e604 <tcp_receive+0x888>)
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	899b      	ldrh	r3, [r3, #12]
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fb f807 	bl	800950c <lwip_htons>
 800e4fe:	4603      	mov	r3, r0
 800e500:	b2db      	uxtb	r3, r3
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <tcp_receive+0x792>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e000      	b.n	800e510 <tcp_receive+0x794>
 800e50e:	2300      	movs	r3, #0
 800e510:	4423      	add	r3, r4
 800e512:	b29a      	uxth	r2, r3
 800e514:	4b3c      	ldr	r3, [pc, #240]	@ (800e608 <tcp_receive+0x88c>)
 800e516:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e518:	4b3b      	ldr	r3, [pc, #236]	@ (800e608 <tcp_receive+0x88c>)
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	461a      	mov	r2, r3
 800e51e:	4b38      	ldr	r3, [pc, #224]	@ (800e600 <tcp_receive+0x884>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	441a      	add	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e528:	6879      	ldr	r1, [r7, #4]
 800e52a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e52c:	440b      	add	r3, r1
 800e52e:	429a      	cmp	r2, r3
 800e530:	d006      	beq.n	800e540 <tcp_receive+0x7c4>
 800e532:	4b36      	ldr	r3, [pc, #216]	@ (800e60c <tcp_receive+0x890>)
 800e534:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800e538:	4935      	ldr	r1, [pc, #212]	@ (800e610 <tcp_receive+0x894>)
 800e53a:	4836      	ldr	r0, [pc, #216]	@ (800e614 <tcp_receive+0x898>)
 800e53c:	f006 ff5c 	bl	80153f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e544:	2b00      	cmp	r3, #0
 800e546:	f000 80e6 	beq.w	800e716 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e54a:	4b2e      	ldr	r3, [pc, #184]	@ (800e604 <tcp_receive+0x888>)
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	899b      	ldrh	r3, [r3, #12]
 800e550:	b29b      	uxth	r3, r3
 800e552:	4618      	mov	r0, r3
 800e554:	f7fa ffda 	bl	800950c <lwip_htons>
 800e558:	4603      	mov	r3, r0
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	f003 0301 	and.w	r3, r3, #1
 800e560:	2b00      	cmp	r3, #0
 800e562:	d010      	beq.n	800e586 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e564:	e00a      	b.n	800e57c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e56a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f7fd fd93 	bl	800c0a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1f0      	bne.n	800e566 <tcp_receive+0x7ea>
 800e584:	e0c7      	b.n	800e716 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e58c:	e051      	b.n	800e632 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	899b      	ldrh	r3, [r3, #12]
 800e594:	b29b      	uxth	r3, r3
 800e596:	4618      	mov	r0, r3
 800e598:	f7fa ffb8 	bl	800950c <lwip_htons>
 800e59c:	4603      	mov	r3, r0
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	f003 0301 	and.w	r3, r3, #1
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d03c      	beq.n	800e622 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e5a8:	4b16      	ldr	r3, [pc, #88]	@ (800e604 <tcp_receive+0x888>)
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	899b      	ldrh	r3, [r3, #12]
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fa ffab 	bl	800950c <lwip_htons>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d12f      	bne.n	800e622 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e5c2:	4b10      	ldr	r3, [pc, #64]	@ (800e604 <tcp_receive+0x888>)
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	899b      	ldrh	r3, [r3, #12]
 800e5c8:	b29c      	uxth	r4, r3
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	f7fa ff9e 	bl	800950c <lwip_htons>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800e604 <tcp_receive+0x888>)
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	4322      	orrs	r2, r4
 800e5da:	b292      	uxth	r2, r2
 800e5dc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e5de:	4b09      	ldr	r3, [pc, #36]	@ (800e604 <tcp_receive+0x888>)
 800e5e0:	891c      	ldrh	r4, [r3, #8]
 800e5e2:	4b08      	ldr	r3, [pc, #32]	@ (800e604 <tcp_receive+0x888>)
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	899b      	ldrh	r3, [r3, #12]
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fa ff8e 	bl	800950c <lwip_htons>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	f003 0303 	and.w	r3, r3, #3
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00d      	beq.n	800e618 <tcp_receive+0x89c>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e00c      	b.n	800e61a <tcp_receive+0x89e>
 800e600:	2000d0fc 	.word	0x2000d0fc
 800e604:	2000d0dc 	.word	0x2000d0dc
 800e608:	2000d106 	.word	0x2000d106
 800e60c:	08017534 	.word	0x08017534
 800e610:	080178dc 	.word	0x080178dc
 800e614:	08017580 	.word	0x08017580
 800e618:	2300      	movs	r3, #0
 800e61a:	4423      	add	r3, r4
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	4b98      	ldr	r3, [pc, #608]	@ (800e880 <tcp_receive+0xb04>)
 800e620:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e624:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800e62c:	6938      	ldr	r0, [r7, #16]
 800e62e:	f7fd fd38 	bl	800c0a2 <tcp_seg_free>
            while (next &&
 800e632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00e      	beq.n	800e656 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e638:	4b91      	ldr	r3, [pc, #580]	@ (800e880 <tcp_receive+0xb04>)
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	461a      	mov	r2, r3
 800e63e:	4b91      	ldr	r3, [pc, #580]	@ (800e884 <tcp_receive+0xb08>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	441a      	add	r2, r3
 800e644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e64c:	8909      	ldrh	r1, [r1, #8]
 800e64e:	440b      	add	r3, r1
 800e650:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e652:	2b00      	cmp	r3, #0
 800e654:	da9b      	bge.n	800e58e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d059      	beq.n	800e710 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e65c:	4b88      	ldr	r3, [pc, #544]	@ (800e880 <tcp_receive+0xb04>)
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	461a      	mov	r2, r3
 800e662:	4b88      	ldr	r3, [pc, #544]	@ (800e884 <tcp_receive+0xb08>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	441a      	add	r2, r3
 800e668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e670:	2b00      	cmp	r3, #0
 800e672:	dd4d      	ble.n	800e710 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	4b81      	ldr	r3, [pc, #516]	@ (800e884 <tcp_receive+0xb08>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	b29b      	uxth	r3, r3
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	b29a      	uxth	r2, r3
 800e686:	4b80      	ldr	r3, [pc, #512]	@ (800e888 <tcp_receive+0xb0c>)
 800e688:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e68a:	4b7f      	ldr	r3, [pc, #508]	@ (800e888 <tcp_receive+0xb0c>)
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	899b      	ldrh	r3, [r3, #12]
 800e690:	b29b      	uxth	r3, r3
 800e692:	4618      	mov	r0, r3
 800e694:	f7fa ff3a 	bl	800950c <lwip_htons>
 800e698:	4603      	mov	r3, r0
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	f003 0302 	and.w	r3, r3, #2
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d005      	beq.n	800e6b0 <tcp_receive+0x934>
                inseg.len -= 1;
 800e6a4:	4b78      	ldr	r3, [pc, #480]	@ (800e888 <tcp_receive+0xb0c>)
 800e6a6:	891b      	ldrh	r3, [r3, #8]
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	4b76      	ldr	r3, [pc, #472]	@ (800e888 <tcp_receive+0xb0c>)
 800e6ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e6b0:	4b75      	ldr	r3, [pc, #468]	@ (800e888 <tcp_receive+0xb0c>)
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	4a74      	ldr	r2, [pc, #464]	@ (800e888 <tcp_receive+0xb0c>)
 800e6b6:	8912      	ldrh	r2, [r2, #8]
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fc f8e6 	bl	800a88c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e6c0:	4b71      	ldr	r3, [pc, #452]	@ (800e888 <tcp_receive+0xb0c>)
 800e6c2:	891c      	ldrh	r4, [r3, #8]
 800e6c4:	4b70      	ldr	r3, [pc, #448]	@ (800e888 <tcp_receive+0xb0c>)
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	899b      	ldrh	r3, [r3, #12]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fa ff1d 	bl	800950c <lwip_htons>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	f003 0303 	and.w	r3, r3, #3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d001      	beq.n	800e6e2 <tcp_receive+0x966>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e000      	b.n	800e6e4 <tcp_receive+0x968>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	4423      	add	r3, r4
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	4b65      	ldr	r3, [pc, #404]	@ (800e880 <tcp_receive+0xb04>)
 800e6ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e6ec:	4b64      	ldr	r3, [pc, #400]	@ (800e880 <tcp_receive+0xb04>)
 800e6ee:	881b      	ldrh	r3, [r3, #0]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4b64      	ldr	r3, [pc, #400]	@ (800e884 <tcp_receive+0xb08>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	441a      	add	r2, r3
 800e6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d006      	beq.n	800e710 <tcp_receive+0x994>
 800e702:	4b62      	ldr	r3, [pc, #392]	@ (800e88c <tcp_receive+0xb10>)
 800e704:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800e708:	4961      	ldr	r1, [pc, #388]	@ (800e890 <tcp_receive+0xb14>)
 800e70a:	4862      	ldr	r0, [pc, #392]	@ (800e894 <tcp_receive+0xb18>)
 800e70c:	f006 fe74 	bl	80153f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e714:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e716:	4b5a      	ldr	r3, [pc, #360]	@ (800e880 <tcp_receive+0xb04>)
 800e718:	881b      	ldrh	r3, [r3, #0]
 800e71a:	461a      	mov	r2, r3
 800e71c:	4b59      	ldr	r3, [pc, #356]	@ (800e884 <tcp_receive+0xb08>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	441a      	add	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e72a:	4b55      	ldr	r3, [pc, #340]	@ (800e880 <tcp_receive+0xb04>)
 800e72c:	881b      	ldrh	r3, [r3, #0]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d206      	bcs.n	800e740 <tcp_receive+0x9c4>
 800e732:	4b56      	ldr	r3, [pc, #344]	@ (800e88c <tcp_receive+0xb10>)
 800e734:	f240 6207 	movw	r2, #1543	@ 0x607
 800e738:	4957      	ldr	r1, [pc, #348]	@ (800e898 <tcp_receive+0xb1c>)
 800e73a:	4856      	ldr	r0, [pc, #344]	@ (800e894 <tcp_receive+0xb18>)
 800e73c:	f006 fe5c 	bl	80153f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e744:	4b4e      	ldr	r3, [pc, #312]	@ (800e880 <tcp_receive+0xb04>)
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7fc ffc5 	bl	800b6e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e756:	4b4c      	ldr	r3, [pc, #304]	@ (800e888 <tcp_receive+0xb0c>)
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	891b      	ldrh	r3, [r3, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d006      	beq.n	800e76e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e760:	4b49      	ldr	r3, [pc, #292]	@ (800e888 <tcp_receive+0xb0c>)
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	4a4d      	ldr	r2, [pc, #308]	@ (800e89c <tcp_receive+0xb20>)
 800e766:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e768:	4b47      	ldr	r3, [pc, #284]	@ (800e888 <tcp_receive+0xb0c>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e76e:	4b46      	ldr	r3, [pc, #280]	@ (800e888 <tcp_receive+0xb0c>)
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	899b      	ldrh	r3, [r3, #12]
 800e774:	b29b      	uxth	r3, r3
 800e776:	4618      	mov	r0, r3
 800e778:	f7fa fec8 	bl	800950c <lwip_htons>
 800e77c:	4603      	mov	r3, r0
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	f003 0301 	and.w	r3, r3, #1
 800e784:	2b00      	cmp	r3, #0
 800e786:	f000 80b8 	beq.w	800e8fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e78a:	4b45      	ldr	r3, [pc, #276]	@ (800e8a0 <tcp_receive+0xb24>)
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	f043 0320 	orr.w	r3, r3, #32
 800e792:	b2da      	uxtb	r2, r3
 800e794:	4b42      	ldr	r3, [pc, #264]	@ (800e8a0 <tcp_receive+0xb24>)
 800e796:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e798:	e0af      	b.n	800e8fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e79e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	4a36      	ldr	r2, [pc, #216]	@ (800e884 <tcp_receive+0xb08>)
 800e7aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	891b      	ldrh	r3, [r3, #8]
 800e7b0:	461c      	mov	r4, r3
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	899b      	ldrh	r3, [r3, #12]
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fa fea6 	bl	800950c <lwip_htons>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	f003 0303 	and.w	r3, r3, #3
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <tcp_receive+0xa54>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e000      	b.n	800e7d2 <tcp_receive+0xa56>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	191a      	adds	r2, r3, r4
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7d8:	441a      	add	r2, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7e2:	461c      	mov	r4, r3
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	891b      	ldrh	r3, [r3, #8]
 800e7e8:	461d      	mov	r5, r3
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	899b      	ldrh	r3, [r3, #12]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fa fe8a 	bl	800950c <lwip_htons>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	f003 0303 	and.w	r3, r3, #3
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <tcp_receive+0xa8c>
 800e804:	2301      	movs	r3, #1
 800e806:	e000      	b.n	800e80a <tcp_receive+0xa8e>
 800e808:	2300      	movs	r3, #0
 800e80a:	442b      	add	r3, r5
 800e80c:	429c      	cmp	r4, r3
 800e80e:	d206      	bcs.n	800e81e <tcp_receive+0xaa2>
 800e810:	4b1e      	ldr	r3, [pc, #120]	@ (800e88c <tcp_receive+0xb10>)
 800e812:	f240 622b 	movw	r2, #1579	@ 0x62b
 800e816:	4923      	ldr	r1, [pc, #140]	@ (800e8a4 <tcp_receive+0xb28>)
 800e818:	481e      	ldr	r0, [pc, #120]	@ (800e894 <tcp_receive+0xb18>)
 800e81a:	f006 fded 	bl	80153f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	891b      	ldrh	r3, [r3, #8]
 800e822:	461c      	mov	r4, r3
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	899b      	ldrh	r3, [r3, #12]
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fa fe6d 	bl	800950c <lwip_htons>
 800e832:	4603      	mov	r3, r0
 800e834:	b2db      	uxtb	r3, r3
 800e836:	f003 0303 	and.w	r3, r3, #3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <tcp_receive+0xac6>
 800e83e:	2301      	movs	r3, #1
 800e840:	e000      	b.n	800e844 <tcp_receive+0xac8>
 800e842:	2300      	movs	r3, #0
 800e844:	1919      	adds	r1, r3, r4
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e84a:	b28b      	uxth	r3, r1
 800e84c:	1ad3      	subs	r3, r2, r3
 800e84e:	b29a      	uxth	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7fc ff43 	bl	800b6e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	891b      	ldrh	r3, [r3, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d028      	beq.n	800e8b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e864:	4b0d      	ldr	r3, [pc, #52]	@ (800e89c <tcp_receive+0xb20>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d01d      	beq.n	800e8a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e86c:	4b0b      	ldr	r3, [pc, #44]	@ (800e89c <tcp_receive+0xb20>)
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f7fc fa50 	bl	800ad1c <pbuf_cat>
 800e87c:	e018      	b.n	800e8b0 <tcp_receive+0xb34>
 800e87e:	bf00      	nop
 800e880:	2000d106 	.word	0x2000d106
 800e884:	2000d0fc 	.word	0x2000d0fc
 800e888:	2000d0dc 	.word	0x2000d0dc
 800e88c:	08017534 	.word	0x08017534
 800e890:	08017914 	.word	0x08017914
 800e894:	08017580 	.word	0x08017580
 800e898:	08017950 	.word	0x08017950
 800e89c:	2000d10c 	.word	0x2000d10c
 800e8a0:	2000d109 	.word	0x2000d109
 800e8a4:	08017970 	.word	0x08017970
            } else {
              recv_data = cseg->p;
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	4a70      	ldr	r2, [pc, #448]	@ (800ea70 <tcp_receive+0xcf4>)
 800e8ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	899b      	ldrh	r3, [r3, #12]
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fa fe24 	bl	800950c <lwip_htons>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	f003 0301 	and.w	r3, r3, #1
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00d      	beq.n	800e8ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e8d0:	4b68      	ldr	r3, [pc, #416]	@ (800ea74 <tcp_receive+0xcf8>)
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	f043 0320 	orr.w	r3, r3, #32
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	4b66      	ldr	r3, [pc, #408]	@ (800ea74 <tcp_receive+0xcf8>)
 800e8dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	7d1b      	ldrb	r3, [r3, #20]
 800e8e2:	2b04      	cmp	r3, #4
 800e8e4:	d102      	bne.n	800e8ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2207      	movs	r2, #7
 800e8ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800e8f4:	68b8      	ldr	r0, [r7, #8]
 800e8f6:	f7fd fbd4 	bl	800c0a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d008      	beq.n	800e914 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800e90e:	429a      	cmp	r2, r3
 800e910:	f43f af43 	beq.w	800e79a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	8b5b      	ldrh	r3, [r3, #26]
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00e      	beq.n	800e93e <tcp_receive+0xbc2>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	8b5b      	ldrh	r3, [r3, #26]
 800e924:	f023 0301 	bic.w	r3, r3, #1
 800e928:	b29a      	uxth	r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	835a      	strh	r2, [r3, #26]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	8b5b      	ldrh	r3, [r3, #26]
 800e932:	f043 0302 	orr.w	r3, r3, #2
 800e936:	b29a      	uxth	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e93c:	e187      	b.n	800ec4e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	8b5b      	ldrh	r3, [r3, #26]
 800e942:	f043 0301 	orr.w	r3, r3, #1
 800e946:	b29a      	uxth	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e94c:	e17f      	b.n	800ec4e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e952:	2b00      	cmp	r3, #0
 800e954:	d106      	bne.n	800e964 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e956:	4848      	ldr	r0, [pc, #288]	@ (800ea78 <tcp_receive+0xcfc>)
 800e958:	f7fd fbbc 	bl	800c0d4 <tcp_seg_copy>
 800e95c:	4602      	mov	r2, r0
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	675a      	str	r2, [r3, #116]	@ 0x74
 800e962:	e16c      	b.n	800ec3e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e964:	2300      	movs	r3, #0
 800e966:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e96c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e96e:	e156      	b.n	800ec1e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800e970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	4b41      	ldr	r3, [pc, #260]	@ (800ea7c <tcp_receive+0xd00>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d11d      	bne.n	800e9ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e97e:	4b3e      	ldr	r3, [pc, #248]	@ (800ea78 <tcp_receive+0xcfc>)
 800e980:	891a      	ldrh	r2, [r3, #8]
 800e982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e984:	891b      	ldrh	r3, [r3, #8]
 800e986:	429a      	cmp	r2, r3
 800e988:	f240 814e 	bls.w	800ec28 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e98c:	483a      	ldr	r0, [pc, #232]	@ (800ea78 <tcp_receive+0xcfc>)
 800e98e:	f7fd fba1 	bl	800c0d4 <tcp_seg_copy>
 800e992:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	2b00      	cmp	r3, #0
 800e998:	f000 8148 	beq.w	800ec2c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800e99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9a4:	697a      	ldr	r2, [r7, #20]
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	e002      	b.n	800e9b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	697a      	ldr	r2, [r7, #20]
 800e9ae:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e9b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e9b2:	6978      	ldr	r0, [r7, #20]
 800e9b4:	f7ff f8de 	bl	800db74 <tcp_oos_insert_segment>
                }
                break;
 800e9b8:	e138      	b.n	800ec2c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d117      	bne.n	800e9f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e9c0:	4b2e      	ldr	r3, [pc, #184]	@ (800ea7c <tcp_receive+0xd00>)
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	da57      	bge.n	800ea80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e9d0:	4829      	ldr	r0, [pc, #164]	@ (800ea78 <tcp_receive+0xcfc>)
 800e9d2:	f7fd fb7f 	bl	800c0d4 <tcp_seg_copy>
 800e9d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f000 8128 	beq.w	800ec30 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	69ba      	ldr	r2, [r7, #24]
 800e9e4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e9e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e9e8:	69b8      	ldr	r0, [r7, #24]
 800e9ea:	f7ff f8c3 	bl	800db74 <tcp_oos_insert_segment>
                  }
                  break;
 800e9ee:	e11f      	b.n	800ec30 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e9f0:	4b22      	ldr	r3, [pc, #136]	@ (800ea7c <tcp_receive+0xd00>)
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	db3e      	blt.n	800ea80 <tcp_receive+0xd04>
 800ea02:	4b1e      	ldr	r3, [pc, #120]	@ (800ea7c <tcp_receive+0xd00>)
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	3301      	adds	r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	dc35      	bgt.n	800ea80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ea14:	4818      	ldr	r0, [pc, #96]	@ (800ea78 <tcp_receive+0xcfc>)
 800ea16:	f7fd fb5d 	bl	800c0d4 <tcp_seg_copy>
 800ea1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f000 8108 	beq.w	800ec34 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ea24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea2c:	8912      	ldrh	r2, [r2, #8]
 800ea2e:	441a      	add	r2, r3
 800ea30:	4b12      	ldr	r3, [pc, #72]	@ (800ea7c <tcp_receive+0xd00>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	dd12      	ble.n	800ea60 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ea3a:	4b10      	ldr	r3, [pc, #64]	@ (800ea7c <tcp_receive+0xd00>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea42:	68db      	ldr	r3, [r3, #12]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ea50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea52:	685a      	ldr	r2, [r3, #4]
 800ea54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea56:	891b      	ldrh	r3, [r3, #8]
 800ea58:	4619      	mov	r1, r3
 800ea5a:	4610      	mov	r0, r2
 800ea5c:	f7fb ff16 	bl	800a88c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ea60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea62:	69fa      	ldr	r2, [r7, #28]
 800ea64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ea66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ea68:	69f8      	ldr	r0, [r7, #28]
 800ea6a:	f7ff f883 	bl	800db74 <tcp_oos_insert_segment>
                  }
                  break;
 800ea6e:	e0e1      	b.n	800ec34 <tcp_receive+0xeb8>
 800ea70:	2000d10c 	.word	0x2000d10c
 800ea74:	2000d109 	.word	0x2000d109
 800ea78:	2000d0dc 	.word	0x2000d0dc
 800ea7c:	2000d0fc 	.word	0x2000d0fc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ea80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea82:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ea84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f040 80c5 	bne.w	800ec18 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ea8e:	4b7f      	ldr	r3, [pc, #508]	@ (800ec8c <tcp_receive+0xf10>)
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f340 80bc 	ble.w	800ec18 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eaa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	899b      	ldrh	r3, [r3, #12]
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fa fd2f 	bl	800950c <lwip_htons>
 800eaae:	4603      	mov	r3, r0
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	f003 0301 	and.w	r3, r3, #1
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f040 80be 	bne.w	800ec38 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800eabc:	4874      	ldr	r0, [pc, #464]	@ (800ec90 <tcp_receive+0xf14>)
 800eabe:	f7fd fb09 	bl	800c0d4 <tcp_seg_copy>
 800eac2:	4602      	mov	r2, r0
 800eac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800eac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f000 80b5 	beq.w	800ec3c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ead2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eada:	8912      	ldrh	r2, [r2, #8]
 800eadc:	441a      	add	r2, r3
 800eade:	4b6b      	ldr	r3, [pc, #428]	@ (800ec8c <tcp_receive+0xf10>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	1ad3      	subs	r3, r2, r3
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dd12      	ble.n	800eb0e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800eae8:	4b68      	ldr	r3, [pc, #416]	@ (800ec8c <tcp_receive+0xf10>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eafc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800eafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb00:	685a      	ldr	r2, [r3, #4]
 800eb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb04:	891b      	ldrh	r3, [r3, #8]
 800eb06:	4619      	mov	r1, r3
 800eb08:	4610      	mov	r0, r2
 800eb0a:	f7fb febf 	bl	800a88c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800eb0e:	4b61      	ldr	r3, [pc, #388]	@ (800ec94 <tcp_receive+0xf18>)
 800eb10:	881b      	ldrh	r3, [r3, #0]
 800eb12:	461a      	mov	r2, r3
 800eb14:	4b5d      	ldr	r3, [pc, #372]	@ (800ec8c <tcp_receive+0xf10>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	441a      	add	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb1e:	6879      	ldr	r1, [r7, #4]
 800eb20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eb22:	440b      	add	r3, r1
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f340 8088 	ble.w	800ec3c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	899b      	ldrh	r3, [r3, #12]
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fa fce8 	bl	800950c <lwip_htons>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d021      	beq.n	800eb8c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800eb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	899b      	ldrh	r3, [r3, #12]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	b21b      	sxth	r3, r3
 800eb54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800eb58:	b21c      	sxth	r4, r3
 800eb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	899b      	ldrh	r3, [r3, #12]
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fa fcd1 	bl	800950c <lwip_htons>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fa fcc9 	bl	800950c <lwip_htons>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	b21b      	sxth	r3, r3
 800eb7e:	4323      	orrs	r3, r4
 800eb80:	b21a      	sxth	r2, r3
 800eb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	b292      	uxth	r2, r2
 800eb8a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb96:	4413      	add	r3, r2
 800eb98:	b299      	uxth	r1, r3
 800eb9a:	4b3c      	ldr	r3, [pc, #240]	@ (800ec8c <tcp_receive+0xf10>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	1a8a      	subs	r2, r1, r2
 800eba6:	b292      	uxth	r2, r2
 800eba8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	685a      	ldr	r2, [r3, #4]
 800ebb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	891b      	ldrh	r3, [r3, #8]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	4610      	mov	r0, r2
 800ebba:	f7fb fe67 	bl	800a88c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	891c      	ldrh	r4, [r3, #8]
 800ebc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	899b      	ldrh	r3, [r3, #12]
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fa fc9c 	bl	800950c <lwip_htons>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	f003 0303 	and.w	r3, r3, #3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <tcp_receive+0xe68>
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	e000      	b.n	800ebe6 <tcp_receive+0xe6a>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	4423      	add	r3, r4
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	4b2a      	ldr	r3, [pc, #168]	@ (800ec94 <tcp_receive+0xf18>)
 800ebec:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ebee:	4b29      	ldr	r3, [pc, #164]	@ (800ec94 <tcp_receive+0xf18>)
 800ebf0:	881b      	ldrh	r3, [r3, #0]
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	4b25      	ldr	r3, [pc, #148]	@ (800ec8c <tcp_receive+0xf10>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	441a      	add	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ec02:	440b      	add	r3, r1
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d019      	beq.n	800ec3c <tcp_receive+0xec0>
 800ec08:	4b23      	ldr	r3, [pc, #140]	@ (800ec98 <tcp_receive+0xf1c>)
 800ec0a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ec0e:	4923      	ldr	r1, [pc, #140]	@ (800ec9c <tcp_receive+0xf20>)
 800ec10:	4823      	ldr	r0, [pc, #140]	@ (800eca0 <tcp_receive+0xf24>)
 800ec12:	f006 fbf1 	bl	80153f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ec16:	e011      	b.n	800ec3c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ec18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	f47f aea5 	bne.w	800e970 <tcp_receive+0xbf4>
 800ec26:	e00a      	b.n	800ec3e <tcp_receive+0xec2>
                break;
 800ec28:	bf00      	nop
 800ec2a:	e008      	b.n	800ec3e <tcp_receive+0xec2>
                break;
 800ec2c:	bf00      	nop
 800ec2e:	e006      	b.n	800ec3e <tcp_receive+0xec2>
                  break;
 800ec30:	bf00      	nop
 800ec32:	e004      	b.n	800ec3e <tcp_receive+0xec2>
                  break;
 800ec34:	bf00      	nop
 800ec36:	e002      	b.n	800ec3e <tcp_receive+0xec2>
                  break;
 800ec38:	bf00      	nop
 800ec3a:	e000      	b.n	800ec3e <tcp_receive+0xec2>
                break;
 800ec3c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f001 fa30 	bl	80100a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ec44:	e003      	b.n	800ec4e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f001 fa2c 	bl	80100a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec4c:	e01a      	b.n	800ec84 <tcp_receive+0xf08>
 800ec4e:	e019      	b.n	800ec84 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ec50:	4b0e      	ldr	r3, [pc, #56]	@ (800ec8c <tcp_receive+0xf10>)
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	db0a      	blt.n	800ec74 <tcp_receive+0xef8>
 800ec5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec8c <tcp_receive+0xf10>)
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec66:	6879      	ldr	r1, [r7, #4]
 800ec68:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ec6a:	440b      	add	r3, r1
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	3301      	adds	r3, #1
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	dd07      	ble.n	800ec84 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	8b5b      	ldrh	r3, [r3, #26]
 800ec78:	f043 0302 	orr.w	r3, r3, #2
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ec82:	e7ff      	b.n	800ec84 <tcp_receive+0xf08>
 800ec84:	bf00      	nop
 800ec86:	3750      	adds	r7, #80	@ 0x50
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bdb0      	pop	{r4, r5, r7, pc}
 800ec8c:	2000d0fc 	.word	0x2000d0fc
 800ec90:	2000d0dc 	.word	0x2000d0dc
 800ec94:	2000d106 	.word	0x2000d106
 800ec98:	08017534 	.word	0x08017534
 800ec9c:	080178dc 	.word	0x080178dc
 800eca0:	08017580 	.word	0x08017580

0800eca4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ecaa:	4b15      	ldr	r3, [pc, #84]	@ (800ed00 <tcp_get_next_optbyte+0x5c>)
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	b291      	uxth	r1, r2
 800ecb2:	4a13      	ldr	r2, [pc, #76]	@ (800ed00 <tcp_get_next_optbyte+0x5c>)
 800ecb4:	8011      	strh	r1, [r2, #0]
 800ecb6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ecb8:	4b12      	ldr	r3, [pc, #72]	@ (800ed04 <tcp_get_next_optbyte+0x60>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <tcp_get_next_optbyte+0x26>
 800ecc0:	4b11      	ldr	r3, [pc, #68]	@ (800ed08 <tcp_get_next_optbyte+0x64>)
 800ecc2:	881b      	ldrh	r3, [r3, #0]
 800ecc4:	88fa      	ldrh	r2, [r7, #6]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d208      	bcs.n	800ecdc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ecca:	4b10      	ldr	r3, [pc, #64]	@ (800ed0c <tcp_get_next_optbyte+0x68>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	3314      	adds	r3, #20
 800ecd0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ecd2:	88fb      	ldrh	r3, [r7, #6]
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	e00b      	b.n	800ecf4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ecdc:	88fb      	ldrh	r3, [r7, #6]
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	4b09      	ldr	r3, [pc, #36]	@ (800ed08 <tcp_get_next_optbyte+0x64>)
 800ece2:	881b      	ldrh	r3, [r3, #0]
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ecea:	4b06      	ldr	r3, [pc, #24]	@ (800ed04 <tcp_get_next_optbyte+0x60>)
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	797b      	ldrb	r3, [r7, #5]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	2000d0f8 	.word	0x2000d0f8
 800ed04:	2000d0f4 	.word	0x2000d0f4
 800ed08:	2000d0f2 	.word	0x2000d0f2
 800ed0c:	2000d0ec 	.word	0x2000d0ec

0800ed10 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d106      	bne.n	800ed2c <tcp_parseopt+0x1c>
 800ed1e:	4b32      	ldr	r3, [pc, #200]	@ (800ede8 <tcp_parseopt+0xd8>)
 800ed20:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ed24:	4931      	ldr	r1, [pc, #196]	@ (800edec <tcp_parseopt+0xdc>)
 800ed26:	4832      	ldr	r0, [pc, #200]	@ (800edf0 <tcp_parseopt+0xe0>)
 800ed28:	f006 fb66 	bl	80153f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ed2c:	4b31      	ldr	r3, [pc, #196]	@ (800edf4 <tcp_parseopt+0xe4>)
 800ed2e:	881b      	ldrh	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d056      	beq.n	800ede2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ed34:	4b30      	ldr	r3, [pc, #192]	@ (800edf8 <tcp_parseopt+0xe8>)
 800ed36:	2200      	movs	r2, #0
 800ed38:	801a      	strh	r2, [r3, #0]
 800ed3a:	e046      	b.n	800edca <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800ed3c:	f7ff ffb2 	bl	800eca4 <tcp_get_next_optbyte>
 800ed40:	4603      	mov	r3, r0
 800ed42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d006      	beq.n	800ed58 <tcp_parseopt+0x48>
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	dc2a      	bgt.n	800eda4 <tcp_parseopt+0x94>
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d042      	beq.n	800edd8 <tcp_parseopt+0xc8>
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d038      	beq.n	800edc8 <tcp_parseopt+0xb8>
 800ed56:	e025      	b.n	800eda4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ed58:	f7ff ffa4 	bl	800eca4 <tcp_get_next_optbyte>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d13c      	bne.n	800eddc <tcp_parseopt+0xcc>
 800ed62:	4b25      	ldr	r3, [pc, #148]	@ (800edf8 <tcp_parseopt+0xe8>)
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	3301      	adds	r3, #1
 800ed68:	4a22      	ldr	r2, [pc, #136]	@ (800edf4 <tcp_parseopt+0xe4>)
 800ed6a:	8812      	ldrh	r2, [r2, #0]
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	da35      	bge.n	800eddc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ed70:	f7ff ff98 	bl	800eca4 <tcp_get_next_optbyte>
 800ed74:	4603      	mov	r3, r0
 800ed76:	021b      	lsls	r3, r3, #8
 800ed78:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ed7a:	f7ff ff93 	bl	800eca4 <tcp_get_next_optbyte>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	461a      	mov	r2, r3
 800ed82:	89bb      	ldrh	r3, [r7, #12]
 800ed84:	4313      	orrs	r3, r2
 800ed86:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ed88:	89bb      	ldrh	r3, [r7, #12]
 800ed8a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ed8e:	d804      	bhi.n	800ed9a <tcp_parseopt+0x8a>
 800ed90:	89bb      	ldrh	r3, [r7, #12]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <tcp_parseopt+0x8a>
 800ed96:	89ba      	ldrh	r2, [r7, #12]
 800ed98:	e001      	b.n	800ed9e <tcp_parseopt+0x8e>
 800ed9a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800eda2:	e012      	b.n	800edca <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800eda4:	f7ff ff7e 	bl	800eca4 <tcp_get_next_optbyte>
 800eda8:	4603      	mov	r3, r0
 800edaa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800edac:	7afb      	ldrb	r3, [r7, #11]
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d916      	bls.n	800ede0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800edb2:	7afb      	ldrb	r3, [r7, #11]
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	4b10      	ldr	r3, [pc, #64]	@ (800edf8 <tcp_parseopt+0xe8>)
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	4413      	add	r3, r2
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	3b02      	subs	r3, #2
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	4b0d      	ldr	r3, [pc, #52]	@ (800edf8 <tcp_parseopt+0xe8>)
 800edc4:	801a      	strh	r2, [r3, #0]
 800edc6:	e000      	b.n	800edca <tcp_parseopt+0xba>
          break;
 800edc8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800edca:	4b0b      	ldr	r3, [pc, #44]	@ (800edf8 <tcp_parseopt+0xe8>)
 800edcc:	881a      	ldrh	r2, [r3, #0]
 800edce:	4b09      	ldr	r3, [pc, #36]	@ (800edf4 <tcp_parseopt+0xe4>)
 800edd0:	881b      	ldrh	r3, [r3, #0]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d3b2      	bcc.n	800ed3c <tcp_parseopt+0x2c>
 800edd6:	e004      	b.n	800ede2 <tcp_parseopt+0xd2>
          return;
 800edd8:	bf00      	nop
 800edda:	e002      	b.n	800ede2 <tcp_parseopt+0xd2>
            return;
 800eddc:	bf00      	nop
 800edde:	e000      	b.n	800ede2 <tcp_parseopt+0xd2>
            return;
 800ede0:	bf00      	nop
      }
    }
  }
}
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	08017534 	.word	0x08017534
 800edec:	08017998 	.word	0x08017998
 800edf0:	08017580 	.word	0x08017580
 800edf4:	2000d0f0 	.word	0x2000d0f0
 800edf8:	2000d0f8 	.word	0x2000d0f8

0800edfc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800edfc:	b480      	push	{r7}
 800edfe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ee00:	4b05      	ldr	r3, [pc, #20]	@ (800ee18 <tcp_trigger_input_pcb_close+0x1c>)
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	f043 0310 	orr.w	r3, r3, #16
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	4b03      	ldr	r3, [pc, #12]	@ (800ee18 <tcp_trigger_input_pcb_close+0x1c>)
 800ee0c:	701a      	strb	r2, [r3, #0]
}
 800ee0e:	bf00      	nop
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr
 800ee18:	2000d109 	.word	0x2000d109

0800ee1c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00a      	beq.n	800ee44 <tcp_route+0x28>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	7a1b      	ldrb	r3, [r3, #8]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d006      	beq.n	800ee44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	7a1b      	ldrb	r3, [r3, #8]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fb fb6c 	bl	800a518 <netif_get_by_index>
 800ee40:	4603      	mov	r3, r0
 800ee42:	e003      	b.n	800ee4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f004 ffcd 	bl	8013de4 <ip4_route>
 800ee4a:	4603      	mov	r3, r0
  }
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ee54:	b590      	push	{r4, r7, lr}
 800ee56:	b087      	sub	sp, #28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	603b      	str	r3, [r7, #0]
 800ee60:	4613      	mov	r3, r2
 800ee62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d105      	bne.n	800ee76 <tcp_create_segment+0x22>
 800ee6a:	4b43      	ldr	r3, [pc, #268]	@ (800ef78 <tcp_create_segment+0x124>)
 800ee6c:	22a3      	movs	r2, #163	@ 0xa3
 800ee6e:	4943      	ldr	r1, [pc, #268]	@ (800ef7c <tcp_create_segment+0x128>)
 800ee70:	4843      	ldr	r0, [pc, #268]	@ (800ef80 <tcp_create_segment+0x12c>)
 800ee72:	f006 fac1 	bl	80153f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d105      	bne.n	800ee88 <tcp_create_segment+0x34>
 800ee7c:	4b3e      	ldr	r3, [pc, #248]	@ (800ef78 <tcp_create_segment+0x124>)
 800ee7e:	22a4      	movs	r2, #164	@ 0xa4
 800ee80:	4940      	ldr	r1, [pc, #256]	@ (800ef84 <tcp_create_segment+0x130>)
 800ee82:	483f      	ldr	r0, [pc, #252]	@ (800ef80 <tcp_create_segment+0x12c>)
 800ee84:	f006 fab8 	bl	80153f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	f003 0304 	and.w	r3, r3, #4
 800ee94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ee96:	2003      	movs	r0, #3
 800ee98:	f7fa ffac 	bl	8009df4 <memp_malloc>
 800ee9c:	6138      	str	r0, [r7, #16]
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d104      	bne.n	800eeae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800eea4:	68b8      	ldr	r0, [r7, #8]
 800eea6:	f7fb fe77 	bl	800ab98 <pbuf_free>
    return NULL;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e060      	b.n	800ef70 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800eeb4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	68ba      	ldr	r2, [r7, #8]
 800eec0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	891a      	ldrh	r2, [r3, #8]
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d205      	bcs.n	800eeda <tcp_create_segment+0x86>
 800eece:	4b2a      	ldr	r3, [pc, #168]	@ (800ef78 <tcp_create_segment+0x124>)
 800eed0:	22b0      	movs	r2, #176	@ 0xb0
 800eed2:	492d      	ldr	r1, [pc, #180]	@ (800ef88 <tcp_create_segment+0x134>)
 800eed4:	482a      	ldr	r0, [pc, #168]	@ (800ef80 <tcp_create_segment+0x12c>)
 800eed6:	f006 fa8f 	bl	80153f8 <iprintf>
  seg->len = p->tot_len - optlen;
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	891a      	ldrh	r2, [r3, #8]
 800eede:	7dfb      	ldrb	r3, [r7, #23]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	b29a      	uxth	r2, r3
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eeea:	2114      	movs	r1, #20
 800eeec:	68b8      	ldr	r0, [r7, #8]
 800eeee:	f7fb fdbd 	bl	800aa6c <pbuf_add_header>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d004      	beq.n	800ef02 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800eef8:	6938      	ldr	r0, [r7, #16]
 800eefa:	f7fd f8d2 	bl	800c0a2 <tcp_seg_free>
    return NULL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	e036      	b.n	800ef70 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	8ada      	ldrh	r2, [r3, #22]
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	68dc      	ldr	r4, [r3, #12]
 800ef14:	4610      	mov	r0, r2
 800ef16:	f7fa faf9 	bl	800950c <lwip_htons>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	8b1a      	ldrh	r2, [r3, #24]
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	68dc      	ldr	r4, [r3, #12]
 800ef26:	4610      	mov	r0, r2
 800ef28:	f7fa faf0 	bl	800950c <lwip_htons>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	68dc      	ldr	r4, [r3, #12]
 800ef34:	6838      	ldr	r0, [r7, #0]
 800ef36:	f7fa faff 	bl	8009538 <lwip_htonl>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ef3e:	7dfb      	ldrb	r3, [r7, #23]
 800ef40:	089b      	lsrs	r3, r3, #2
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	3305      	adds	r3, #5
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	031b      	lsls	r3, r3, #12
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	79fb      	ldrb	r3, [r7, #7]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	4313      	orrs	r3, r2
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	68dc      	ldr	r4, [r3, #12]
 800ef58:	4610      	mov	r0, r2
 800ef5a:	f7fa fad7 	bl	800950c <lwip_htons>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	2200      	movs	r2, #0
 800ef68:	749a      	strb	r2, [r3, #18]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	74da      	strb	r2, [r3, #19]
  return seg;
 800ef6e:	693b      	ldr	r3, [r7, #16]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	371c      	adds	r7, #28
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd90      	pop	{r4, r7, pc}
 800ef78:	080179b4 	.word	0x080179b4
 800ef7c:	080179e8 	.word	0x080179e8
 800ef80:	08017a08 	.word	0x08017a08
 800ef84:	08017a30 	.word	0x08017a30
 800ef88:	08017a54 	.word	0x08017a54

0800ef8c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ef8c:	b590      	push	{r4, r7, lr}
 800ef8e:	b08b      	sub	sp, #44	@ 0x2c
 800ef90:	af02      	add	r7, sp, #8
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	460b      	mov	r3, r1
 800ef96:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	61fb      	str	r3, [r7, #28]
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800efa0:	2300      	movs	r3, #0
 800efa2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d106      	bne.n	800efb8 <tcp_split_unsent_seg+0x2c>
 800efaa:	4b95      	ldr	r3, [pc, #596]	@ (800f200 <tcp_split_unsent_seg+0x274>)
 800efac:	f240 324b 	movw	r2, #843	@ 0x34b
 800efb0:	4994      	ldr	r1, [pc, #592]	@ (800f204 <tcp_split_unsent_seg+0x278>)
 800efb2:	4895      	ldr	r0, [pc, #596]	@ (800f208 <tcp_split_unsent_seg+0x27c>)
 800efb4:	f006 fa20 	bl	80153f8 <iprintf>

  useg = pcb->unsent;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efbc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d102      	bne.n	800efca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800efc4:	f04f 33ff 	mov.w	r3, #4294967295
 800efc8:	e116      	b.n	800f1f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800efca:	887b      	ldrh	r3, [r7, #2]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d109      	bne.n	800efe4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800efd0:	4b8b      	ldr	r3, [pc, #556]	@ (800f200 <tcp_split_unsent_seg+0x274>)
 800efd2:	f240 3253 	movw	r2, #851	@ 0x353
 800efd6:	498d      	ldr	r1, [pc, #564]	@ (800f20c <tcp_split_unsent_seg+0x280>)
 800efd8:	488b      	ldr	r0, [pc, #556]	@ (800f208 <tcp_split_unsent_seg+0x27c>)
 800efda:	f006 fa0d 	bl	80153f8 <iprintf>
    return ERR_VAL;
 800efde:	f06f 0305 	mvn.w	r3, #5
 800efe2:	e109      	b.n	800f1f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	891b      	ldrh	r3, [r3, #8]
 800efe8:	887a      	ldrh	r2, [r7, #2]
 800efea:	429a      	cmp	r2, r3
 800efec:	d301      	bcc.n	800eff2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800efee:	2300      	movs	r3, #0
 800eff0:	e102      	b.n	800f1f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eff6:	887a      	ldrh	r2, [r7, #2]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d906      	bls.n	800f00a <tcp_split_unsent_seg+0x7e>
 800effc:	4b80      	ldr	r3, [pc, #512]	@ (800f200 <tcp_split_unsent_seg+0x274>)
 800effe:	f240 325b 	movw	r2, #859	@ 0x35b
 800f002:	4983      	ldr	r1, [pc, #524]	@ (800f210 <tcp_split_unsent_seg+0x284>)
 800f004:	4880      	ldr	r0, [pc, #512]	@ (800f208 <tcp_split_unsent_seg+0x27c>)
 800f006:	f006 f9f7 	bl	80153f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	891b      	ldrh	r3, [r3, #8]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d106      	bne.n	800f020 <tcp_split_unsent_seg+0x94>
 800f012:	4b7b      	ldr	r3, [pc, #492]	@ (800f200 <tcp_split_unsent_seg+0x274>)
 800f014:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800f018:	497e      	ldr	r1, [pc, #504]	@ (800f214 <tcp_split_unsent_seg+0x288>)
 800f01a:	487b      	ldr	r0, [pc, #492]	@ (800f208 <tcp_split_unsent_seg+0x27c>)
 800f01c:	f006 f9ec 	bl	80153f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	7a9b      	ldrb	r3, [r3, #10]
 800f024:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f026:	7bfb      	ldrb	r3, [r7, #15]
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	f003 0304 	and.w	r3, r3, #4
 800f030:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	891a      	ldrh	r2, [r3, #8]
 800f036:	887b      	ldrh	r3, [r7, #2]
 800f038:	1ad3      	subs	r3, r2, r3
 800f03a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f03c:	7bbb      	ldrb	r3, [r7, #14]
 800f03e:	b29a      	uxth	r2, r3
 800f040:	89bb      	ldrh	r3, [r7, #12]
 800f042:	4413      	add	r3, r2
 800f044:	b29b      	uxth	r3, r3
 800f046:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f04a:	4619      	mov	r1, r3
 800f04c:	2036      	movs	r0, #54	@ 0x36
 800f04e:	f7fb fabf 	bl	800a5d0 <pbuf_alloc>
 800f052:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	2b00      	cmp	r3, #0
 800f058:	f000 80b7 	beq.w	800f1ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	891a      	ldrh	r2, [r3, #8]
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	891b      	ldrh	r3, [r3, #8]
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	b29a      	uxth	r2, r3
 800f06a:	887b      	ldrh	r3, [r7, #2]
 800f06c:	4413      	add	r3, r2
 800f06e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	6858      	ldr	r0, [r3, #4]
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	685a      	ldr	r2, [r3, #4]
 800f078:	7bbb      	ldrb	r3, [r7, #14]
 800f07a:	18d1      	adds	r1, r2, r3
 800f07c:	897b      	ldrh	r3, [r7, #10]
 800f07e:	89ba      	ldrh	r2, [r7, #12]
 800f080:	f7fb ff84 	bl	800af8c <pbuf_copy_partial>
 800f084:	4603      	mov	r3, r0
 800f086:	461a      	mov	r2, r3
 800f088:	89bb      	ldrh	r3, [r7, #12]
 800f08a:	4293      	cmp	r3, r2
 800f08c:	f040 809f 	bne.w	800f1ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	899b      	ldrh	r3, [r3, #12]
 800f096:	b29b      	uxth	r3, r3
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fa fa37 	bl	800950c <lwip_htons>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f0ac:	7efb      	ldrb	r3, [r7, #27]
 800f0ae:	f003 0308 	and.w	r3, r3, #8
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d007      	beq.n	800f0c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f0b6:	7efb      	ldrb	r3, [r7, #27]
 800f0b8:	f023 0308 	bic.w	r3, r3, #8
 800f0bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f0be:	7ebb      	ldrb	r3, [r7, #26]
 800f0c0:	f043 0308 	orr.w	r3, r3, #8
 800f0c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f0c6:	7efb      	ldrb	r3, [r7, #27]
 800f0c8:	f003 0301 	and.w	r3, r3, #1
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d007      	beq.n	800f0e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f0d0:	7efb      	ldrb	r3, [r7, #27]
 800f0d2:	f023 0301 	bic.w	r3, r3, #1
 800f0d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f0d8:	7ebb      	ldrb	r3, [r7, #26]
 800f0da:	f043 0301 	orr.w	r3, r3, #1
 800f0de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fa fa26 	bl	8009538 <lwip_htonl>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	887b      	ldrh	r3, [r7, #2]
 800f0f0:	18d1      	adds	r1, r2, r3
 800f0f2:	7eba      	ldrb	r2, [r7, #26]
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	6939      	ldr	r1, [r7, #16]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7ff fea9 	bl	800ee54 <tcp_create_segment>
 800f102:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d063      	beq.n	800f1d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fb fdca 	bl	800aca8 <pbuf_clen>
 800f114:	4603      	mov	r3, r0
 800f116:	461a      	mov	r2, r3
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f11e:	1a9b      	subs	r3, r3, r2
 800f120:	b29a      	uxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	6858      	ldr	r0, [r3, #4]
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	891a      	ldrh	r2, [r3, #8]
 800f132:	89bb      	ldrh	r3, [r7, #12]
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	b29b      	uxth	r3, r3
 800f138:	4619      	mov	r1, r3
 800f13a:	f7fb fba7 	bl	800a88c <pbuf_realloc>
  useg->len -= remainder;
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	891a      	ldrh	r2, [r3, #8]
 800f142:	89bb      	ldrh	r3, [r7, #12]
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	b29a      	uxth	r2, r3
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	899b      	ldrh	r3, [r3, #12]
 800f152:	b29c      	uxth	r4, r3
 800f154:	7efb      	ldrb	r3, [r7, #27]
 800f156:	b29b      	uxth	r3, r3
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fa f9d7 	bl	800950c <lwip_htons>
 800f15e:	4603      	mov	r3, r0
 800f160:	461a      	mov	r2, r3
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	4322      	orrs	r2, r4
 800f168:	b292      	uxth	r2, r2
 800f16a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	4618      	mov	r0, r3
 800f172:	f7fb fd99 	bl	800aca8 <pbuf_clen>
 800f176:	4603      	mov	r3, r0
 800f178:	461a      	mov	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f180:	4413      	add	r3, r2
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fb fd8a 	bl	800aca8 <pbuf_clen>
 800f194:	4603      	mov	r3, r0
 800f196:	461a      	mov	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f19e:	4413      	add	r3, r2
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	69fa      	ldr	r2, [r7, #28]
 800f1b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d103      	bne.n	800f1c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	e016      	b.n	800f1f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f1ca:	bf00      	nop
 800f1cc:	e002      	b.n	800f1d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f1ce:	bf00      	nop
 800f1d0:	e000      	b.n	800f1d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f1d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d006      	beq.n	800f1e8 <tcp_split_unsent_seg+0x25c>
 800f1da:	4b09      	ldr	r3, [pc, #36]	@ (800f200 <tcp_split_unsent_seg+0x274>)
 800f1dc:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800f1e0:	490d      	ldr	r1, [pc, #52]	@ (800f218 <tcp_split_unsent_seg+0x28c>)
 800f1e2:	4809      	ldr	r0, [pc, #36]	@ (800f208 <tcp_split_unsent_seg+0x27c>)
 800f1e4:	f006 f908 	bl	80153f8 <iprintf>
  if (p != NULL) {
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d002      	beq.n	800f1f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f1ee:	6938      	ldr	r0, [r7, #16]
 800f1f0:	f7fb fcd2 	bl	800ab98 <pbuf_free>
  }

  return ERR_MEM;
 800f1f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3724      	adds	r7, #36	@ 0x24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd90      	pop	{r4, r7, pc}
 800f200:	080179b4 	.word	0x080179b4
 800f204:	08017d48 	.word	0x08017d48
 800f208:	08017a08 	.word	0x08017a08
 800f20c:	08017d6c 	.word	0x08017d6c
 800f210:	08017d90 	.word	0x08017d90
 800f214:	08017da0 	.word	0x08017da0
 800f218:	08017db0 	.word	0x08017db0

0800f21c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f21c:	b590      	push	{r4, r7, lr}
 800f21e:	b085      	sub	sp, #20
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d106      	bne.n	800f238 <tcp_send_fin+0x1c>
 800f22a:	4b21      	ldr	r3, [pc, #132]	@ (800f2b0 <tcp_send_fin+0x94>)
 800f22c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800f230:	4920      	ldr	r1, [pc, #128]	@ (800f2b4 <tcp_send_fin+0x98>)
 800f232:	4821      	ldr	r0, [pc, #132]	@ (800f2b8 <tcp_send_fin+0x9c>)
 800f234:	f006 f8e0 	bl	80153f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d02e      	beq.n	800f29e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f244:	60fb      	str	r3, [r7, #12]
 800f246:	e002      	b.n	800f24e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1f8      	bne.n	800f248 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	899b      	ldrh	r3, [r3, #12]
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fa f954 	bl	800950c <lwip_htons>
 800f264:	4603      	mov	r3, r0
 800f266:	b2db      	uxtb	r3, r3
 800f268:	f003 0307 	and.w	r3, r3, #7
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d116      	bne.n	800f29e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	899b      	ldrh	r3, [r3, #12]
 800f276:	b29c      	uxth	r4, r3
 800f278:	2001      	movs	r0, #1
 800f27a:	f7fa f947 	bl	800950c <lwip_htons>
 800f27e:	4603      	mov	r3, r0
 800f280:	461a      	mov	r2, r3
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	4322      	orrs	r2, r4
 800f288:	b292      	uxth	r2, r2
 800f28a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	8b5b      	ldrh	r3, [r3, #26]
 800f290:	f043 0320 	orr.w	r3, r3, #32
 800f294:	b29a      	uxth	r2, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f29a:	2300      	movs	r3, #0
 800f29c:	e004      	b.n	800f2a8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f29e:	2101      	movs	r1, #1
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 f80b 	bl	800f2bc <tcp_enqueue_flags>
 800f2a6:	4603      	mov	r3, r0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3714      	adds	r7, #20
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd90      	pop	{r4, r7, pc}
 800f2b0:	080179b4 	.word	0x080179b4
 800f2b4:	08017dbc 	.word	0x08017dbc
 800f2b8:	08017a08 	.word	0x08017a08

0800f2bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08a      	sub	sp, #40	@ 0x28
 800f2c0:	af02      	add	r7, sp, #8
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f2d0:	78fb      	ldrb	r3, [r7, #3]
 800f2d2:	f003 0303 	and.w	r3, r3, #3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d106      	bne.n	800f2e8 <tcp_enqueue_flags+0x2c>
 800f2da:	4b67      	ldr	r3, [pc, #412]	@ (800f478 <tcp_enqueue_flags+0x1bc>)
 800f2dc:	f240 4211 	movw	r2, #1041	@ 0x411
 800f2e0:	4966      	ldr	r1, [pc, #408]	@ (800f47c <tcp_enqueue_flags+0x1c0>)
 800f2e2:	4867      	ldr	r0, [pc, #412]	@ (800f480 <tcp_enqueue_flags+0x1c4>)
 800f2e4:	f006 f888 	bl	80153f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d106      	bne.n	800f2fc <tcp_enqueue_flags+0x40>
 800f2ee:	4b62      	ldr	r3, [pc, #392]	@ (800f478 <tcp_enqueue_flags+0x1bc>)
 800f2f0:	f240 4213 	movw	r2, #1043	@ 0x413
 800f2f4:	4963      	ldr	r1, [pc, #396]	@ (800f484 <tcp_enqueue_flags+0x1c8>)
 800f2f6:	4862      	ldr	r0, [pc, #392]	@ (800f480 <tcp_enqueue_flags+0x1c4>)
 800f2f8:	f006 f87e 	bl	80153f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f2fc:	78fb      	ldrb	r3, [r7, #3]
 800f2fe:	f003 0302 	and.w	r3, r3, #2
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f306:	2301      	movs	r3, #1
 800f308:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f30a:	7ffb      	ldrb	r3, [r7, #31]
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	f003 0304 	and.w	r3, r3, #4
 800f314:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f316:	7dfb      	ldrb	r3, [r7, #23]
 800f318:	b29b      	uxth	r3, r3
 800f31a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f31e:	4619      	mov	r1, r3
 800f320:	2036      	movs	r0, #54	@ 0x36
 800f322:	f7fb f955 	bl	800a5d0 <pbuf_alloc>
 800f326:	6138      	str	r0, [r7, #16]
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d109      	bne.n	800f342 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	8b5b      	ldrh	r3, [r3, #26]
 800f332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f336:	b29a      	uxth	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f33c:	f04f 33ff 	mov.w	r3, #4294967295
 800f340:	e095      	b.n	800f46e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	895a      	ldrh	r2, [r3, #10]
 800f346:	7dfb      	ldrb	r3, [r7, #23]
 800f348:	b29b      	uxth	r3, r3
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d206      	bcs.n	800f35c <tcp_enqueue_flags+0xa0>
 800f34e:	4b4a      	ldr	r3, [pc, #296]	@ (800f478 <tcp_enqueue_flags+0x1bc>)
 800f350:	f240 4239 	movw	r2, #1081	@ 0x439
 800f354:	494c      	ldr	r1, [pc, #304]	@ (800f488 <tcp_enqueue_flags+0x1cc>)
 800f356:	484a      	ldr	r0, [pc, #296]	@ (800f480 <tcp_enqueue_flags+0x1c4>)
 800f358:	f006 f84e 	bl	80153f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800f360:	78fa      	ldrb	r2, [r7, #3]
 800f362:	7ffb      	ldrb	r3, [r7, #31]
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	460b      	mov	r3, r1
 800f368:	6939      	ldr	r1, [r7, #16]
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f7ff fd72 	bl	800ee54 <tcp_create_segment>
 800f370:	60f8      	str	r0, [r7, #12]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d109      	bne.n	800f38c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	8b5b      	ldrh	r3, [r3, #26]
 800f37c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f380:	b29a      	uxth	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f386:	f04f 33ff 	mov.w	r3, #4294967295
 800f38a:	e070      	b.n	800f46e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	f003 0303 	and.w	r3, r3, #3
 800f394:	2b00      	cmp	r3, #0
 800f396:	d006      	beq.n	800f3a6 <tcp_enqueue_flags+0xea>
 800f398:	4b37      	ldr	r3, [pc, #220]	@ (800f478 <tcp_enqueue_flags+0x1bc>)
 800f39a:	f240 4242 	movw	r2, #1090	@ 0x442
 800f39e:	493b      	ldr	r1, [pc, #236]	@ (800f48c <tcp_enqueue_flags+0x1d0>)
 800f3a0:	4837      	ldr	r0, [pc, #220]	@ (800f480 <tcp_enqueue_flags+0x1c4>)
 800f3a2:	f006 f829 	bl	80153f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	891b      	ldrh	r3, [r3, #8]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d006      	beq.n	800f3bc <tcp_enqueue_flags+0x100>
 800f3ae:	4b32      	ldr	r3, [pc, #200]	@ (800f478 <tcp_enqueue_flags+0x1bc>)
 800f3b0:	f240 4243 	movw	r2, #1091	@ 0x443
 800f3b4:	4936      	ldr	r1, [pc, #216]	@ (800f490 <tcp_enqueue_flags+0x1d4>)
 800f3b6:	4832      	ldr	r0, [pc, #200]	@ (800f480 <tcp_enqueue_flags+0x1c4>)
 800f3b8:	f006 f81e 	bl	80153f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d103      	bne.n	800f3cc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f3ca:	e00d      	b.n	800f3e8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3d0:	61bb      	str	r3, [r7, #24]
 800f3d2:	e002      	b.n	800f3da <tcp_enqueue_flags+0x11e>
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	61bb      	str	r3, [r7, #24]
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1f8      	bne.n	800f3d4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f3f0:	78fb      	ldrb	r3, [r7, #3]
 800f3f2:	f003 0302 	and.w	r3, r3, #2
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d104      	bne.n	800f404 <tcp_enqueue_flags+0x148>
 800f3fa:	78fb      	ldrb	r3, [r7, #3]
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	2b00      	cmp	r3, #0
 800f402:	d004      	beq.n	800f40e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f408:	1c5a      	adds	r2, r3, #1
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f40e:	78fb      	ldrb	r3, [r7, #3]
 800f410:	f003 0301 	and.w	r3, r3, #1
 800f414:	2b00      	cmp	r3, #0
 800f416:	d006      	beq.n	800f426 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	8b5b      	ldrh	r3, [r3, #26]
 800f41c:	f043 0320 	orr.w	r3, r3, #32
 800f420:	b29a      	uxth	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fb fc3c 	bl	800aca8 <pbuf_clen>
 800f430:	4603      	mov	r3, r0
 800f432:	461a      	mov	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f43a:	4413      	add	r3, r2
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d00e      	beq.n	800f46c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f452:	2b00      	cmp	r3, #0
 800f454:	d10a      	bne.n	800f46c <tcp_enqueue_flags+0x1b0>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d106      	bne.n	800f46c <tcp_enqueue_flags+0x1b0>
 800f45e:	4b06      	ldr	r3, [pc, #24]	@ (800f478 <tcp_enqueue_flags+0x1bc>)
 800f460:	f240 4265 	movw	r2, #1125	@ 0x465
 800f464:	490b      	ldr	r1, [pc, #44]	@ (800f494 <tcp_enqueue_flags+0x1d8>)
 800f466:	4806      	ldr	r0, [pc, #24]	@ (800f480 <tcp_enqueue_flags+0x1c4>)
 800f468:	f005 ffc6 	bl	80153f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3720      	adds	r7, #32
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	080179b4 	.word	0x080179b4
 800f47c:	08017dd8 	.word	0x08017dd8
 800f480:	08017a08 	.word	0x08017a08
 800f484:	08017e30 	.word	0x08017e30
 800f488:	08017e50 	.word	0x08017e50
 800f48c:	08017e8c 	.word	0x08017e8c
 800f490:	08017ea4 	.word	0x08017ea4
 800f494:	08017ed0 	.word	0x08017ed0

0800f498 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f498:	b5b0      	push	{r4, r5, r7, lr}
 800f49a:	b08a      	sub	sp, #40	@ 0x28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d106      	bne.n	800f4b4 <tcp_output+0x1c>
 800f4a6:	4b8a      	ldr	r3, [pc, #552]	@ (800f6d0 <tcp_output+0x238>)
 800f4a8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800f4ac:	4989      	ldr	r1, [pc, #548]	@ (800f6d4 <tcp_output+0x23c>)
 800f4ae:	488a      	ldr	r0, [pc, #552]	@ (800f6d8 <tcp_output+0x240>)
 800f4b0:	f005 ffa2 	bl	80153f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	7d1b      	ldrb	r3, [r3, #20]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d106      	bne.n	800f4ca <tcp_output+0x32>
 800f4bc:	4b84      	ldr	r3, [pc, #528]	@ (800f6d0 <tcp_output+0x238>)
 800f4be:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800f4c2:	4986      	ldr	r1, [pc, #536]	@ (800f6dc <tcp_output+0x244>)
 800f4c4:	4884      	ldr	r0, [pc, #528]	@ (800f6d8 <tcp_output+0x240>)
 800f4c6:	f005 ff97 	bl	80153f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f4ca:	4b85      	ldr	r3, [pc, #532]	@ (800f6e0 <tcp_output+0x248>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d101      	bne.n	800f4d8 <tcp_output+0x40>
    return ERR_OK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	e1ce      	b.n	800f876 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	bf28      	it	cs
 800f4e8:	4613      	movcs	r3, r2
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d10b      	bne.n	800f512 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	8b5b      	ldrh	r3, [r3, #26]
 800f4fe:	f003 0302 	and.w	r3, r3, #2
 800f502:	2b00      	cmp	r3, #0
 800f504:	f000 81aa 	beq.w	800f85c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 fdcb 	bl	80100a4 <tcp_send_empty_ack>
 800f50e:	4603      	mov	r3, r0
 800f510:	e1b1      	b.n	800f876 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f512:	6879      	ldr	r1, [r7, #4]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	3304      	adds	r3, #4
 800f518:	461a      	mov	r2, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7ff fc7e 	bl	800ee1c <tcp_route>
 800f520:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d102      	bne.n	800f52e <tcp_output+0x96>
    return ERR_RTE;
 800f528:	f06f 0303 	mvn.w	r3, #3
 800f52c:	e1a3      	b.n	800f876 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d003      	beq.n	800f53c <tcp_output+0xa4>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d111      	bne.n	800f560 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d002      	beq.n	800f548 <tcp_output+0xb0>
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	3304      	adds	r3, #4
 800f546:	e000      	b.n	800f54a <tcp_output+0xb2>
 800f548:	2300      	movs	r3, #0
 800f54a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d102      	bne.n	800f558 <tcp_output+0xc0>
      return ERR_RTE;
 800f552:	f06f 0303 	mvn.w	r3, #3
 800f556:	e18e      	b.n	800f876 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	4618      	mov	r0, r3
 800f568:	f7f9 ffe6 	bl	8009538 <lwip_htonl>
 800f56c:	4602      	mov	r2, r0
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f576:	8912      	ldrh	r2, [r2, #8]
 800f578:	4413      	add	r3, r2
 800f57a:	69ba      	ldr	r2, [r7, #24]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d227      	bcs.n	800f5d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f586:	461a      	mov	r2, r3
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d114      	bne.n	800f5b8 <tcp_output+0x120>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f592:	2b00      	cmp	r3, #0
 800f594:	d110      	bne.n	800f5b8 <tcp_output+0x120>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10b      	bne.n	800f5b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	8b5b      	ldrh	r3, [r3, #26]
 800f5bc:	f003 0302 	and.w	r3, r3, #2
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f000 814d 	beq.w	800f860 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fd6c 	bl	80100a4 <tcp_send_empty_ack>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	e152      	b.n	800f876 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f5de:	6a3b      	ldr	r3, [r7, #32]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	f000 811c 	beq.w	800f81e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f5e6:	e002      	b.n	800f5ee <tcp_output+0x156>
 800f5e8:	6a3b      	ldr	r3, [r7, #32]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	623b      	str	r3, [r7, #32]
 800f5ee:	6a3b      	ldr	r3, [r7, #32]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1f8      	bne.n	800f5e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f5f6:	e112      	b.n	800f81e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	899b      	ldrh	r3, [r3, #12]
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	4618      	mov	r0, r3
 800f602:	f7f9 ff83 	bl	800950c <lwip_htons>
 800f606:	4603      	mov	r3, r0
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	f003 0304 	and.w	r3, r3, #4
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d006      	beq.n	800f620 <tcp_output+0x188>
 800f612:	4b2f      	ldr	r3, [pc, #188]	@ (800f6d0 <tcp_output+0x238>)
 800f614:	f240 5236 	movw	r2, #1334	@ 0x536
 800f618:	4932      	ldr	r1, [pc, #200]	@ (800f6e4 <tcp_output+0x24c>)
 800f61a:	482f      	ldr	r0, [pc, #188]	@ (800f6d8 <tcp_output+0x240>)
 800f61c:	f005 feec 	bl	80153f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f624:	2b00      	cmp	r3, #0
 800f626:	d01f      	beq.n	800f668 <tcp_output+0x1d0>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	8b5b      	ldrh	r3, [r3, #26]
 800f62c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800f630:	2b00      	cmp	r3, #0
 800f632:	d119      	bne.n	800f668 <tcp_output+0x1d0>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d00b      	beq.n	800f654 <tcp_output+0x1bc>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d110      	bne.n	800f668 <tcp_output+0x1d0>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f64a:	891a      	ldrh	r2, [r3, #8]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f650:	429a      	cmp	r2, r3
 800f652:	d209      	bcs.n	800f668 <tcp_output+0x1d0>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d004      	beq.n	800f668 <tcp_output+0x1d0>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f664:	2b08      	cmp	r3, #8
 800f666:	d901      	bls.n	800f66c <tcp_output+0x1d4>
 800f668:	2301      	movs	r3, #1
 800f66a:	e000      	b.n	800f66e <tcp_output+0x1d6>
 800f66c:	2300      	movs	r3, #0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8b5b      	ldrh	r3, [r3, #26]
 800f676:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f000 80e4 	beq.w	800f848 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	7d1b      	ldrb	r3, [r3, #20]
 800f684:	2b02      	cmp	r3, #2
 800f686:	d00d      	beq.n	800f6a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	899b      	ldrh	r3, [r3, #12]
 800f68e:	b29c      	uxth	r4, r3
 800f690:	2010      	movs	r0, #16
 800f692:	f7f9 ff3b 	bl	800950c <lwip_htons>
 800f696:	4603      	mov	r3, r0
 800f698:	461a      	mov	r2, r3
 800f69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	4322      	orrs	r2, r4
 800f6a0:	b292      	uxth	r2, r2
 800f6a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f6a4:	697a      	ldr	r2, [r7, #20]
 800f6a6:	6879      	ldr	r1, [r7, #4]
 800f6a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f6aa:	f000 f909 	bl	800f8c0 <tcp_output_segment>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d016      	beq.n	800f6e8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	8b5b      	ldrh	r3, [r3, #26]
 800f6be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	835a      	strh	r2, [r3, #26]
      return err;
 800f6c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6cc:	e0d3      	b.n	800f876 <tcp_output+0x3de>
 800f6ce:	bf00      	nop
 800f6d0:	080179b4 	.word	0x080179b4
 800f6d4:	08017ef8 	.word	0x08017ef8
 800f6d8:	08017a08 	.word	0x08017a08
 800f6dc:	08017f10 	.word	0x08017f10
 800f6e0:	2000d110 	.word	0x2000d110
 800f6e4:	08017f38 	.word	0x08017f38
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	7d1b      	ldrb	r3, [r3, #20]
 800f6f4:	2b02      	cmp	r3, #2
 800f6f6:	d006      	beq.n	800f706 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	8b5b      	ldrh	r3, [r3, #26]
 800f6fc:	f023 0303 	bic.w	r3, r3, #3
 800f700:	b29a      	uxth	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7f9 ff13 	bl	8009538 <lwip_htonl>
 800f712:	4604      	mov	r4, r0
 800f714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f716:	891b      	ldrh	r3, [r3, #8]
 800f718:	461d      	mov	r5, r3
 800f71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71c:	68db      	ldr	r3, [r3, #12]
 800f71e:	899b      	ldrh	r3, [r3, #12]
 800f720:	b29b      	uxth	r3, r3
 800f722:	4618      	mov	r0, r3
 800f724:	f7f9 fef2 	bl	800950c <lwip_htons>
 800f728:	4603      	mov	r3, r0
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	f003 0303 	and.w	r3, r3, #3
 800f730:	2b00      	cmp	r3, #0
 800f732:	d001      	beq.n	800f738 <tcp_output+0x2a0>
 800f734:	2301      	movs	r3, #1
 800f736:	e000      	b.n	800f73a <tcp_output+0x2a2>
 800f738:	2300      	movs	r3, #0
 800f73a:	442b      	add	r3, r5
 800f73c:	4423      	add	r3, r4
 800f73e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	1ad3      	subs	r3, r2, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	da02      	bge.n	800f752 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f754:	891b      	ldrh	r3, [r3, #8]
 800f756:	461c      	mov	r4, r3
 800f758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75a:	68db      	ldr	r3, [r3, #12]
 800f75c:	899b      	ldrh	r3, [r3, #12]
 800f75e:	b29b      	uxth	r3, r3
 800f760:	4618      	mov	r0, r3
 800f762:	f7f9 fed3 	bl	800950c <lwip_htons>
 800f766:	4603      	mov	r3, r0
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	f003 0303 	and.w	r3, r3, #3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d001      	beq.n	800f776 <tcp_output+0x2de>
 800f772:	2301      	movs	r3, #1
 800f774:	e000      	b.n	800f778 <tcp_output+0x2e0>
 800f776:	2300      	movs	r3, #0
 800f778:	4423      	add	r3, r4
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d049      	beq.n	800f812 <tcp_output+0x37a>
      seg->next = NULL;
 800f77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f780:	2200      	movs	r2, #0
 800f782:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d105      	bne.n	800f798 <tcp_output+0x300>
        pcb->unacked = seg;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f790:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800f792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f794:	623b      	str	r3, [r7, #32]
 800f796:	e03f      	b.n	800f818 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7f9 feca 	bl	8009538 <lwip_htonl>
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	6a3b      	ldr	r3, [r7, #32]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7f9 fec3 	bl	8009538 <lwip_htonl>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	1ae3      	subs	r3, r4, r3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da24      	bge.n	800f804 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	3370      	adds	r3, #112	@ 0x70
 800f7be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f7c0:	e002      	b.n	800f7c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d011      	beq.n	800f7f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	68db      	ldr	r3, [r3, #12]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7f9 fead 	bl	8009538 <lwip_htonl>
 800f7de:	4604      	mov	r4, r0
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7f9 fea6 	bl	8009538 <lwip_htonl>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	dbe6      	blt.n	800f7c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f800:	601a      	str	r2, [r3, #0]
 800f802:	e009      	b.n	800f818 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f804:	6a3b      	ldr	r3, [r7, #32]
 800f806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f808:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f80a:	6a3b      	ldr	r3, [r7, #32]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	623b      	str	r3, [r7, #32]
 800f810:	e002      	b.n	800f818 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f812:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f814:	f7fc fc45 	bl	800c0a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f81c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800f81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f820:	2b00      	cmp	r3, #0
 800f822:	d012      	beq.n	800f84a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7f9 fe84 	bl	8009538 <lwip_htonl>
 800f830:	4602      	mov	r2, r0
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f83a:	8912      	ldrh	r2, [r2, #8]
 800f83c:	4413      	add	r3, r2
  while (seg != NULL &&
 800f83e:	69ba      	ldr	r2, [r7, #24]
 800f840:	429a      	cmp	r2, r3
 800f842:	f4bf aed9 	bcs.w	800f5f8 <tcp_output+0x160>
 800f846:	e000      	b.n	800f84a <tcp_output+0x3b2>
      break;
 800f848:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d108      	bne.n	800f864 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800f85a:	e004      	b.n	800f866 <tcp_output+0x3ce>
    goto output_done;
 800f85c:	bf00      	nop
 800f85e:	e002      	b.n	800f866 <tcp_output+0x3ce>
    goto output_done;
 800f860:	bf00      	nop
 800f862:	e000      	b.n	800f866 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f864:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	8b5b      	ldrh	r3, [r3, #26]
 800f86a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f86e:	b29a      	uxth	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3728      	adds	r7, #40	@ 0x28
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bdb0      	pop	{r4, r5, r7, pc}
 800f87e:	bf00      	nop

0800f880 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d106      	bne.n	800f89c <tcp_output_segment_busy+0x1c>
 800f88e:	4b09      	ldr	r3, [pc, #36]	@ (800f8b4 <tcp_output_segment_busy+0x34>)
 800f890:	f240 529a 	movw	r2, #1434	@ 0x59a
 800f894:	4908      	ldr	r1, [pc, #32]	@ (800f8b8 <tcp_output_segment_busy+0x38>)
 800f896:	4809      	ldr	r0, [pc, #36]	@ (800f8bc <tcp_output_segment_busy+0x3c>)
 800f898:	f005 fdae 	bl	80153f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	7b9b      	ldrb	r3, [r3, #14]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d001      	beq.n	800f8aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e000      	b.n	800f8ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	080179b4 	.word	0x080179b4
 800f8b8:	08017f50 	.word	0x08017f50
 800f8bc:	08017a08 	.word	0x08017a08

0800f8c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f8c0:	b5b0      	push	{r4, r5, r7, lr}
 800f8c2:	b08c      	sub	sp, #48	@ 0x30
 800f8c4:	af04      	add	r7, sp, #16
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <tcp_output_segment+0x20>
 800f8d2:	4b64      	ldr	r3, [pc, #400]	@ (800fa64 <tcp_output_segment+0x1a4>)
 800f8d4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800f8d8:	4963      	ldr	r1, [pc, #396]	@ (800fa68 <tcp_output_segment+0x1a8>)
 800f8da:	4864      	ldr	r0, [pc, #400]	@ (800fa6c <tcp_output_segment+0x1ac>)
 800f8dc:	f005 fd8c 	bl	80153f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d106      	bne.n	800f8f4 <tcp_output_segment+0x34>
 800f8e6:	4b5f      	ldr	r3, [pc, #380]	@ (800fa64 <tcp_output_segment+0x1a4>)
 800f8e8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800f8ec:	4960      	ldr	r1, [pc, #384]	@ (800fa70 <tcp_output_segment+0x1b0>)
 800f8ee:	485f      	ldr	r0, [pc, #380]	@ (800fa6c <tcp_output_segment+0x1ac>)
 800f8f0:	f005 fd82 	bl	80153f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d106      	bne.n	800f908 <tcp_output_segment+0x48>
 800f8fa:	4b5a      	ldr	r3, [pc, #360]	@ (800fa64 <tcp_output_segment+0x1a4>)
 800f8fc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800f900:	495c      	ldr	r1, [pc, #368]	@ (800fa74 <tcp_output_segment+0x1b4>)
 800f902:	485a      	ldr	r0, [pc, #360]	@ (800fa6c <tcp_output_segment+0x1ac>)
 800f904:	f005 fd78 	bl	80153f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	f7ff ffb9 	bl	800f880 <tcp_output_segment_busy>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d001      	beq.n	800f918 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f914:	2300      	movs	r3, #0
 800f916:	e0a1      	b.n	800fa5c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	68dc      	ldr	r4, [r3, #12]
 800f920:	4610      	mov	r0, r2
 800f922:	f7f9 fe09 	bl	8009538 <lwip_htonl>
 800f926:	4603      	mov	r3, r0
 800f928:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68dc      	ldr	r4, [r3, #12]
 800f932:	4610      	mov	r0, r2
 800f934:	f7f9 fdea 	bl	800950c <lwip_htons>
 800f938:	4603      	mov	r3, r0
 800f93a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f940:	68ba      	ldr	r2, [r7, #8]
 800f942:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f944:	441a      	add	r2, r3
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	3314      	adds	r3, #20
 800f950:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	7a9b      	ldrb	r3, [r3, #10]
 800f956:	f003 0301 	and.w	r3, r3, #1
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d015      	beq.n	800f98a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	3304      	adds	r3, #4
 800f962:	461a      	mov	r2, r3
 800f964:	6879      	ldr	r1, [r7, #4]
 800f966:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800f96a:	f7fc fe91 	bl	800c690 <tcp_eff_send_mss_netif>
 800f96e:	4603      	mov	r3, r0
 800f970:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f972:	8b7b      	ldrh	r3, [r7, #26]
 800f974:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800f978:	4618      	mov	r0, r3
 800f97a:	f7f9 fddd 	bl	8009538 <lwip_htonl>
 800f97e:	4602      	mov	r2, r0
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	3304      	adds	r3, #4
 800f988:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f990:	2b00      	cmp	r3, #0
 800f992:	da02      	bge.n	800f99a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	2200      	movs	r2, #0
 800f998:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d10c      	bne.n	800f9bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f9a2:	4b35      	ldr	r3, [pc, #212]	@ (800fa78 <tcp_output_segment+0x1b8>)
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7f9 fdc1 	bl	8009538 <lwip_htonl>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	68da      	ldr	r2, [r3, #12]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	8959      	ldrh	r1, [r3, #10]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	8b3a      	ldrh	r2, [r7, #24]
 800f9d6:	1a8a      	subs	r2, r1, r2
 800f9d8:	b292      	uxth	r2, r2
 800f9da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	8919      	ldrh	r1, [r3, #8]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	8b3a      	ldrh	r2, [r7, #24]
 800f9e8:	1a8a      	subs	r2, r1, r2
 800f9ea:	b292      	uxth	r2, r2
 800f9ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	68d2      	ldr	r2, [r2, #12]
 800f9f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	741a      	strb	r2, [r3, #16]
 800fa00:	2200      	movs	r2, #0
 800fa02:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	68da      	ldr	r2, [r3, #12]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	7a9b      	ldrb	r3, [r3, #10]
 800fa0c:	f003 0301 	and.w	r3, r3, #1
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <tcp_output_segment+0x158>
 800fa14:	2318      	movs	r3, #24
 800fa16:	e000      	b.n	800fa1a <tcp_output_segment+0x15a>
 800fa18:	2314      	movs	r3, #20
 800fa1a:	4413      	add	r3, r2
 800fa1c:	69fa      	ldr	r2, [r7, #28]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d006      	beq.n	800fa30 <tcp_output_segment+0x170>
 800fa22:	4b10      	ldr	r3, [pc, #64]	@ (800fa64 <tcp_output_segment+0x1a4>)
 800fa24:	f240 621c 	movw	r2, #1564	@ 0x61c
 800fa28:	4914      	ldr	r1, [pc, #80]	@ (800fa7c <tcp_output_segment+0x1bc>)
 800fa2a:	4810      	ldr	r0, [pc, #64]	@ (800fa6c <tcp_output_segment+0x1ac>)
 800fa2c:	f005 fce4 	bl	80153f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6858      	ldr	r0, [r3, #4]
 800fa34:	68b9      	ldr	r1, [r7, #8]
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	1d1c      	adds	r4, r3, #4
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	7add      	ldrb	r5, [r3, #11]
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	7a9b      	ldrb	r3, [r3, #10]
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	9202      	str	r2, [sp, #8]
 800fa46:	2206      	movs	r2, #6
 800fa48:	9201      	str	r2, [sp, #4]
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	462b      	mov	r3, r5
 800fa4e:	4622      	mov	r2, r4
 800fa50:	f004 fba4 	bl	801419c <ip4_output_if>
 800fa54:	4603      	mov	r3, r0
 800fa56:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fa58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3720      	adds	r7, #32
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bdb0      	pop	{r4, r5, r7, pc}
 800fa64:	080179b4 	.word	0x080179b4
 800fa68:	08017f78 	.word	0x08017f78
 800fa6c:	08017a08 	.word	0x08017a08
 800fa70:	08017f98 	.word	0x08017f98
 800fa74:	08017fb8 	.word	0x08017fb8
 800fa78:	2000d0c4 	.word	0x2000d0c4
 800fa7c:	08017fdc 	.word	0x08017fdc

0800fa80 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fa80:	b5b0      	push	{r4, r5, r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <tcp_rexmit_rto_prepare+0x1c>
 800fa8e:	4b31      	ldr	r3, [pc, #196]	@ (800fb54 <tcp_rexmit_rto_prepare+0xd4>)
 800fa90:	f240 6263 	movw	r2, #1635	@ 0x663
 800fa94:	4930      	ldr	r1, [pc, #192]	@ (800fb58 <tcp_rexmit_rto_prepare+0xd8>)
 800fa96:	4831      	ldr	r0, [pc, #196]	@ (800fb5c <tcp_rexmit_rto_prepare+0xdc>)
 800fa98:	f005 fcae 	bl	80153f8 <iprintf>

  if (pcb->unacked == NULL) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d102      	bne.n	800faaa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800faa4:	f06f 0305 	mvn.w	r3, #5
 800faa8:	e050      	b.n	800fb4c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800faae:	60fb      	str	r3, [r7, #12]
 800fab0:	e00b      	b.n	800faca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f7ff fee4 	bl	800f880 <tcp_output_segment_busy>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d002      	beq.n	800fac4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fabe:	f06f 0305 	mvn.w	r3, #5
 800fac2:	e043      	b.n	800fb4c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	60fb      	str	r3, [r7, #12]
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d1ef      	bne.n	800fab2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f7ff fed4 	bl	800f880 <tcp_output_segment_busy>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fade:	f06f 0305 	mvn.w	r3, #5
 800fae2:	e033      	b.n	800fb4c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	8b5b      	ldrh	r3, [r3, #26]
 800fafe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7f9 fd12 	bl	8009538 <lwip_htonl>
 800fb14:	4604      	mov	r4, r0
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	891b      	ldrh	r3, [r3, #8]
 800fb1a:	461d      	mov	r5, r3
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	899b      	ldrh	r3, [r3, #12]
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7f9 fcf1 	bl	800950c <lwip_htons>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	f003 0303 	and.w	r3, r3, #3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <tcp_rexmit_rto_prepare+0xba>
 800fb36:	2301      	movs	r3, #1
 800fb38:	e000      	b.n	800fb3c <tcp_rexmit_rto_prepare+0xbc>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	442b      	add	r3, r5
 800fb3e:	18e2      	adds	r2, r4, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800fb4a:	2300      	movs	r3, #0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3710      	adds	r7, #16
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bdb0      	pop	{r4, r5, r7, pc}
 800fb54:	080179b4 	.word	0x080179b4
 800fb58:	08017ff0 	.word	0x08017ff0
 800fb5c:	08017a08 	.word	0x08017a08

0800fb60 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d106      	bne.n	800fb7c <tcp_rexmit_rto_commit+0x1c>
 800fb6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fba4 <tcp_rexmit_rto_commit+0x44>)
 800fb70:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fb74:	490c      	ldr	r1, [pc, #48]	@ (800fba8 <tcp_rexmit_rto_commit+0x48>)
 800fb76:	480d      	ldr	r0, [pc, #52]	@ (800fbac <tcp_rexmit_rto_commit+0x4c>)
 800fb78:	f005 fc3e 	bl	80153f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fb82:	2bff      	cmp	r3, #255	@ 0xff
 800fb84:	d007      	beq.n	800fb96 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	b2da      	uxtb	r2, r3
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7ff fc7e 	bl	800f498 <tcp_output>
}
 800fb9c:	bf00      	nop
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	080179b4 	.word	0x080179b4
 800fba8:	08018014 	.word	0x08018014
 800fbac:	08017a08 	.word	0x08017a08

0800fbb0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d106      	bne.n	800fbcc <tcp_rexmit_rto+0x1c>
 800fbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe8 <tcp_rexmit_rto+0x38>)
 800fbc0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800fbc4:	4909      	ldr	r1, [pc, #36]	@ (800fbec <tcp_rexmit_rto+0x3c>)
 800fbc6:	480a      	ldr	r0, [pc, #40]	@ (800fbf0 <tcp_rexmit_rto+0x40>)
 800fbc8:	f005 fc16 	bl	80153f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7ff ff57 	bl	800fa80 <tcp_rexmit_rto_prepare>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d102      	bne.n	800fbde <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff ffc1 	bl	800fb60 <tcp_rexmit_rto_commit>
  }
}
 800fbde:	bf00      	nop
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	080179b4 	.word	0x080179b4
 800fbec:	08018038 	.word	0x08018038
 800fbf0:	08017a08 	.word	0x08017a08

0800fbf4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fbf4:	b590      	push	{r4, r7, lr}
 800fbf6:	b085      	sub	sp, #20
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d106      	bne.n	800fc10 <tcp_rexmit+0x1c>
 800fc02:	4b2f      	ldr	r3, [pc, #188]	@ (800fcc0 <tcp_rexmit+0xcc>)
 800fc04:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800fc08:	492e      	ldr	r1, [pc, #184]	@ (800fcc4 <tcp_rexmit+0xd0>)
 800fc0a:	482f      	ldr	r0, [pc, #188]	@ (800fcc8 <tcp_rexmit+0xd4>)
 800fc0c:	f005 fbf4 	bl	80153f8 <iprintf>

  if (pcb->unacked == NULL) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d102      	bne.n	800fc1e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fc18:	f06f 0305 	mvn.w	r3, #5
 800fc1c:	e04c      	b.n	800fcb8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc22:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fc24:	68b8      	ldr	r0, [r7, #8]
 800fc26:	f7ff fe2b 	bl	800f880 <tcp_output_segment_busy>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d002      	beq.n	800fc36 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fc30:	f06f 0305 	mvn.w	r3, #5
 800fc34:	e040      	b.n	800fcb8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	336c      	adds	r3, #108	@ 0x6c
 800fc42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fc44:	e002      	b.n	800fc4c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d011      	beq.n	800fc78 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7f9 fc6b 	bl	8009538 <lwip_htonl>
 800fc62:	4604      	mov	r4, r0
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7f9 fc64 	bl	8009538 <lwip_htonl>
 800fc70:	4603      	mov	r3, r0
 800fc72:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	dbe6      	blt.n	800fc46 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	68ba      	ldr	r2, [r7, #8]
 800fc84:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d103      	bne.n	800fc96 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fc9c:	2bff      	cmp	r3, #255	@ 0xff
 800fc9e:	d007      	beq.n	800fcb0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fca6:	3301      	adds	r3, #1
 800fca8:	b2da      	uxtb	r2, r3
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fcb6:	2300      	movs	r3, #0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3714      	adds	r7, #20
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd90      	pop	{r4, r7, pc}
 800fcc0:	080179b4 	.word	0x080179b4
 800fcc4:	08018054 	.word	0x08018054
 800fcc8:	08017a08 	.word	0x08017a08

0800fccc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d106      	bne.n	800fce8 <tcp_rexmit_fast+0x1c>
 800fcda:	4b2a      	ldr	r3, [pc, #168]	@ (800fd84 <tcp_rexmit_fast+0xb8>)
 800fcdc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800fce0:	4929      	ldr	r1, [pc, #164]	@ (800fd88 <tcp_rexmit_fast+0xbc>)
 800fce2:	482a      	ldr	r0, [pc, #168]	@ (800fd8c <tcp_rexmit_fast+0xc0>)
 800fce4:	f005 fb88 	bl	80153f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d045      	beq.n	800fd7c <tcp_rexmit_fast+0xb0>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	8b5b      	ldrh	r3, [r3, #26]
 800fcf4:	f003 0304 	and.w	r3, r3, #4
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d13f      	bne.n	800fd7c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f7ff ff79 	bl	800fbf4 <tcp_rexmit>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d139      	bne.n	800fd7c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fd14:	4293      	cmp	r3, r2
 800fd16:	bf28      	it	cs
 800fd18:	4613      	movcs	r3, r2
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	da00      	bge.n	800fd22 <tcp_rexmit_fast+0x56>
 800fd20:	3301      	adds	r3, #1
 800fd22:	105b      	asrs	r3, r3, #1
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fd32:	461a      	mov	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd38:	005b      	lsls	r3, r3, #1
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d206      	bcs.n	800fd4c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd42:	005b      	lsls	r3, r3, #1
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd56:	4619      	mov	r1, r3
 800fd58:	0049      	lsls	r1, r1, #1
 800fd5a:	440b      	add	r3, r1
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	4413      	add	r3, r2
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	8b5b      	ldrh	r3, [r3, #26]
 800fd6c:	f043 0304 	orr.w	r3, r3, #4
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800fd7c:	bf00      	nop
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	080179b4 	.word	0x080179b4
 800fd88:	0801806c 	.word	0x0801806c
 800fd8c:	08017a08 	.word	0x08017a08

0800fd90 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	607b      	str	r3, [r7, #4]
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	817b      	strh	r3, [r7, #10]
 800fd9e:	4613      	mov	r3, r2
 800fda0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fda2:	897a      	ldrh	r2, [r7, #10]
 800fda4:	893b      	ldrh	r3, [r7, #8]
 800fda6:	4413      	add	r3, r2
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	3314      	adds	r3, #20
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	2022      	movs	r0, #34	@ 0x22
 800fdb6:	f7fa fc0b 	bl	800a5d0 <pbuf_alloc>
 800fdba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d04d      	beq.n	800fe5e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fdc2:	897b      	ldrh	r3, [r7, #10]
 800fdc4:	3313      	adds	r3, #19
 800fdc6:	697a      	ldr	r2, [r7, #20]
 800fdc8:	8952      	ldrh	r2, [r2, #10]
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	db06      	blt.n	800fddc <tcp_output_alloc_header_common+0x4c>
 800fdce:	4b26      	ldr	r3, [pc, #152]	@ (800fe68 <tcp_output_alloc_header_common+0xd8>)
 800fdd0:	f240 7223 	movw	r2, #1827	@ 0x723
 800fdd4:	4925      	ldr	r1, [pc, #148]	@ (800fe6c <tcp_output_alloc_header_common+0xdc>)
 800fdd6:	4826      	ldr	r0, [pc, #152]	@ (800fe70 <tcp_output_alloc_header_common+0xe0>)
 800fdd8:	f005 fb0e 	bl	80153f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fde2:	8c3b      	ldrh	r3, [r7, #32]
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7f9 fb91 	bl	800950c <lwip_htons>
 800fdea:	4603      	mov	r3, r0
 800fdec:	461a      	mov	r2, r3
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fdf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7f9 fb89 	bl	800950c <lwip_htons>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fe08:	68f8      	ldr	r0, [r7, #12]
 800fe0a:	f7f9 fb95 	bl	8009538 <lwip_htonl>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fe14:	897b      	ldrh	r3, [r7, #10]
 800fe16:	089b      	lsrs	r3, r3, #2
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	3305      	adds	r3, #5
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	031b      	lsls	r3, r3, #12
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7f9 fb6d 	bl	800950c <lwip_htons>
 800fe32:	4603      	mov	r3, r0
 800fe34:	461a      	mov	r2, r3
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fe3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7f9 fb65 	bl	800950c <lwip_htons>
 800fe42:	4603      	mov	r3, r0
 800fe44:	461a      	mov	r2, r3
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	741a      	strb	r2, [r3, #16]
 800fe50:	2200      	movs	r2, #0
 800fe52:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	2200      	movs	r2, #0
 800fe58:	749a      	strb	r2, [r3, #18]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fe5e:	697b      	ldr	r3, [r7, #20]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3718      	adds	r7, #24
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	080179b4 	.word	0x080179b4
 800fe6c:	0801808c 	.word	0x0801808c
 800fe70:	08017a08 	.word	0x08017a08

0800fe74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fe74:	b5b0      	push	{r4, r5, r7, lr}
 800fe76:	b08a      	sub	sp, #40	@ 0x28
 800fe78:	af04      	add	r7, sp, #16
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	607b      	str	r3, [r7, #4]
 800fe7e:	460b      	mov	r3, r1
 800fe80:	817b      	strh	r3, [r7, #10]
 800fe82:	4613      	mov	r3, r2
 800fe84:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d106      	bne.n	800fe9a <tcp_output_alloc_header+0x26>
 800fe8c:	4b15      	ldr	r3, [pc, #84]	@ (800fee4 <tcp_output_alloc_header+0x70>)
 800fe8e:	f240 7242 	movw	r2, #1858	@ 0x742
 800fe92:	4915      	ldr	r1, [pc, #84]	@ (800fee8 <tcp_output_alloc_header+0x74>)
 800fe94:	4815      	ldr	r0, [pc, #84]	@ (800feec <tcp_output_alloc_header+0x78>)
 800fe96:	f005 faaf 	bl	80153f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	8adb      	ldrh	r3, [r3, #22]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	8b12      	ldrh	r2, [r2, #24]
 800fea6:	68f9      	ldr	r1, [r7, #12]
 800fea8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800feaa:	893d      	ldrh	r5, [r7, #8]
 800feac:	897c      	ldrh	r4, [r7, #10]
 800feae:	9103      	str	r1, [sp, #12]
 800feb0:	2110      	movs	r1, #16
 800feb2:	9102      	str	r1, [sp, #8]
 800feb4:	9201      	str	r2, [sp, #4]
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	462a      	mov	r2, r5
 800febc:	4621      	mov	r1, r4
 800febe:	f7ff ff67 	bl	800fd90 <tcp_output_alloc_header_common>
 800fec2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d006      	beq.n	800fed8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800fed2:	441a      	add	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800fed8:	697b      	ldr	r3, [r7, #20]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3718      	adds	r7, #24
 800fede:	46bd      	mov	sp, r7
 800fee0:	bdb0      	pop	{r4, r5, r7, pc}
 800fee2:	bf00      	nop
 800fee4:	080179b4 	.word	0x080179b4
 800fee8:	080180bc 	.word	0x080180bc
 800feec:	08017a08 	.word	0x08017a08

0800fef0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b088      	sub	sp, #32
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	4611      	mov	r1, r2
 800fefc:	461a      	mov	r2, r3
 800fefe:	460b      	mov	r3, r1
 800ff00:	71fb      	strb	r3, [r7, #7]
 800ff02:	4613      	mov	r3, r2
 800ff04:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ff06:	2300      	movs	r3, #0
 800ff08:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d106      	bne.n	800ff1e <tcp_output_fill_options+0x2e>
 800ff10:	4b12      	ldr	r3, [pc, #72]	@ (800ff5c <tcp_output_fill_options+0x6c>)
 800ff12:	f240 7256 	movw	r2, #1878	@ 0x756
 800ff16:	4912      	ldr	r1, [pc, #72]	@ (800ff60 <tcp_output_fill_options+0x70>)
 800ff18:	4812      	ldr	r0, [pc, #72]	@ (800ff64 <tcp_output_fill_options+0x74>)
 800ff1a:	f005 fa6d 	bl	80153f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	3314      	adds	r3, #20
 800ff28:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ff2a:	8bfb      	ldrh	r3, [r7, #30]
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	461a      	mov	r2, r3
 800ff30:	79fb      	ldrb	r3, [r7, #7]
 800ff32:	009b      	lsls	r3, r3, #2
 800ff34:	f003 0304 	and.w	r3, r3, #4
 800ff38:	4413      	add	r3, r2
 800ff3a:	3314      	adds	r3, #20
 800ff3c:	69ba      	ldr	r2, [r7, #24]
 800ff3e:	4413      	add	r3, r2
 800ff40:	697a      	ldr	r2, [r7, #20]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d006      	beq.n	800ff54 <tcp_output_fill_options+0x64>
 800ff46:	4b05      	ldr	r3, [pc, #20]	@ (800ff5c <tcp_output_fill_options+0x6c>)
 800ff48:	f240 7275 	movw	r2, #1909	@ 0x775
 800ff4c:	4906      	ldr	r1, [pc, #24]	@ (800ff68 <tcp_output_fill_options+0x78>)
 800ff4e:	4805      	ldr	r0, [pc, #20]	@ (800ff64 <tcp_output_fill_options+0x74>)
 800ff50:	f005 fa52 	bl	80153f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ff54:	bf00      	nop
 800ff56:	3720      	adds	r7, #32
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	080179b4 	.word	0x080179b4
 800ff60:	080180e4 	.word	0x080180e4
 800ff64:	08017a08 	.word	0x08017a08
 800ff68:	08017fdc 	.word	0x08017fdc

0800ff6c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08a      	sub	sp, #40	@ 0x28
 800ff70:	af04      	add	r7, sp, #16
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
 800ff78:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d106      	bne.n	800ff8e <tcp_output_control_segment+0x22>
 800ff80:	4b1c      	ldr	r3, [pc, #112]	@ (800fff4 <tcp_output_control_segment+0x88>)
 800ff82:	f240 7287 	movw	r2, #1927	@ 0x787
 800ff86:	491c      	ldr	r1, [pc, #112]	@ (800fff8 <tcp_output_control_segment+0x8c>)
 800ff88:	481c      	ldr	r0, [pc, #112]	@ (800fffc <tcp_output_control_segment+0x90>)
 800ff8a:	f005 fa35 	bl	80153f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	6879      	ldr	r1, [r7, #4]
 800ff92:	68f8      	ldr	r0, [r7, #12]
 800ff94:	f7fe ff42 	bl	800ee1c <tcp_route>
 800ff98:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d102      	bne.n	800ffa6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ffa0:	23fc      	movs	r3, #252	@ 0xfc
 800ffa2:	75fb      	strb	r3, [r7, #23]
 800ffa4:	e01c      	b.n	800ffe0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d006      	beq.n	800ffba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	7adb      	ldrb	r3, [r3, #11]
 800ffb0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	7a9b      	ldrb	r3, [r3, #10]
 800ffb6:	757b      	strb	r3, [r7, #21]
 800ffb8:	e003      	b.n	800ffc2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ffba:	23ff      	movs	r3, #255	@ 0xff
 800ffbc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ffc2:	7dba      	ldrb	r2, [r7, #22]
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	9302      	str	r3, [sp, #8]
 800ffc8:	2306      	movs	r3, #6
 800ffca:	9301      	str	r3, [sp, #4]
 800ffcc:	7d7b      	ldrb	r3, [r7, #21]
 800ffce:	9300      	str	r3, [sp, #0]
 800ffd0:	4613      	mov	r3, r2
 800ffd2:	683a      	ldr	r2, [r7, #0]
 800ffd4:	6879      	ldr	r1, [r7, #4]
 800ffd6:	68b8      	ldr	r0, [r7, #8]
 800ffd8:	f004 f8e0 	bl	801419c <ip4_output_if>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ffe0:	68b8      	ldr	r0, [r7, #8]
 800ffe2:	f7fa fdd9 	bl	800ab98 <pbuf_free>
  return err;
 800ffe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3718      	adds	r7, #24
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	080179b4 	.word	0x080179b4
 800fff8:	0801810c 	.word	0x0801810c
 800fffc:	08017a08 	.word	0x08017a08

08010000 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010000:	b590      	push	{r4, r7, lr}
 8010002:	b08b      	sub	sp, #44	@ 0x2c
 8010004:	af04      	add	r7, sp, #16
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
 801000c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d106      	bne.n	8010022 <tcp_rst+0x22>
 8010014:	4b1f      	ldr	r3, [pc, #124]	@ (8010094 <tcp_rst+0x94>)
 8010016:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801001a:	491f      	ldr	r1, [pc, #124]	@ (8010098 <tcp_rst+0x98>)
 801001c:	481f      	ldr	r0, [pc, #124]	@ (801009c <tcp_rst+0x9c>)
 801001e:	f005 f9eb 	bl	80153f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010024:	2b00      	cmp	r3, #0
 8010026:	d106      	bne.n	8010036 <tcp_rst+0x36>
 8010028:	4b1a      	ldr	r3, [pc, #104]	@ (8010094 <tcp_rst+0x94>)
 801002a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801002e:	491c      	ldr	r1, [pc, #112]	@ (80100a0 <tcp_rst+0xa0>)
 8010030:	481a      	ldr	r0, [pc, #104]	@ (801009c <tcp_rst+0x9c>)
 8010032:	f005 f9e1 	bl	80153f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010036:	2300      	movs	r3, #0
 8010038:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801003a:	f246 0308 	movw	r3, #24584	@ 0x6008
 801003e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010040:	7dfb      	ldrb	r3, [r7, #23]
 8010042:	b29c      	uxth	r4, r3
 8010044:	68b8      	ldr	r0, [r7, #8]
 8010046:	f7f9 fa77 	bl	8009538 <lwip_htonl>
 801004a:	4602      	mov	r2, r0
 801004c:	8abb      	ldrh	r3, [r7, #20]
 801004e:	9303      	str	r3, [sp, #12]
 8010050:	2314      	movs	r3, #20
 8010052:	9302      	str	r3, [sp, #8]
 8010054:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010056:	9301      	str	r3, [sp, #4]
 8010058:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801005a:	9300      	str	r3, [sp, #0]
 801005c:	4613      	mov	r3, r2
 801005e:	2200      	movs	r2, #0
 8010060:	4621      	mov	r1, r4
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f7ff fe94 	bl	800fd90 <tcp_output_alloc_header_common>
 8010068:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d00c      	beq.n	801008a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010070:	7dfb      	ldrb	r3, [r7, #23]
 8010072:	2200      	movs	r2, #0
 8010074:	6939      	ldr	r1, [r7, #16]
 8010076:	68f8      	ldr	r0, [r7, #12]
 8010078:	f7ff ff3a 	bl	800fef0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801007c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801007e:	683a      	ldr	r2, [r7, #0]
 8010080:	6939      	ldr	r1, [r7, #16]
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f7ff ff72 	bl	800ff6c <tcp_output_control_segment>
 8010088:	e000      	b.n	801008c <tcp_rst+0x8c>
    return;
 801008a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801008c:	371c      	adds	r7, #28
 801008e:	46bd      	mov	sp, r7
 8010090:	bd90      	pop	{r4, r7, pc}
 8010092:	bf00      	nop
 8010094:	080179b4 	.word	0x080179b4
 8010098:	08018138 	.word	0x08018138
 801009c:	08017a08 	.word	0x08017a08
 80100a0:	08018154 	.word	0x08018154

080100a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80100a4:	b590      	push	{r4, r7, lr}
 80100a6:	b087      	sub	sp, #28
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80100ac:	2300      	movs	r3, #0
 80100ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80100b0:	2300      	movs	r3, #0
 80100b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d106      	bne.n	80100c8 <tcp_send_empty_ack+0x24>
 80100ba:	4b28      	ldr	r3, [pc, #160]	@ (801015c <tcp_send_empty_ack+0xb8>)
 80100bc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80100c0:	4927      	ldr	r1, [pc, #156]	@ (8010160 <tcp_send_empty_ack+0xbc>)
 80100c2:	4828      	ldr	r0, [pc, #160]	@ (8010164 <tcp_send_empty_ack+0xc0>)
 80100c4:	f005 f998 	bl	80153f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80100c8:	7dfb      	ldrb	r3, [r7, #23]
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	f003 0304 	and.w	r3, r3, #4
 80100d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80100d4:	7d7b      	ldrb	r3, [r7, #21]
 80100d6:	b29c      	uxth	r4, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f9 fa2b 	bl	8009538 <lwip_htonl>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2200      	movs	r2, #0
 80100e6:	4621      	mov	r1, r4
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7ff fec3 	bl	800fe74 <tcp_output_alloc_header>
 80100ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d109      	bne.n	801010a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	8b5b      	ldrh	r3, [r3, #26]
 80100fa:	f043 0303 	orr.w	r3, r3, #3
 80100fe:	b29a      	uxth	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010104:	f06f 0301 	mvn.w	r3, #1
 8010108:	e023      	b.n	8010152 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801010a:	7dbb      	ldrb	r3, [r7, #22]
 801010c:	7dfa      	ldrb	r2, [r7, #23]
 801010e:	6939      	ldr	r1, [r7, #16]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7ff feed 	bl	800fef0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	3304      	adds	r3, #4
 801011c:	6939      	ldr	r1, [r7, #16]
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f7ff ff24 	bl	800ff6c <tcp_output_control_segment>
 8010124:	4603      	mov	r3, r0
 8010126:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d007      	beq.n	8010140 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	8b5b      	ldrh	r3, [r3, #26]
 8010134:	f043 0303 	orr.w	r3, r3, #3
 8010138:	b29a      	uxth	r2, r3
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	835a      	strh	r2, [r3, #26]
 801013e:	e006      	b.n	801014e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	8b5b      	ldrh	r3, [r3, #26]
 8010144:	f023 0303 	bic.w	r3, r3, #3
 8010148:	b29a      	uxth	r2, r3
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801014e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010152:	4618      	mov	r0, r3
 8010154:	371c      	adds	r7, #28
 8010156:	46bd      	mov	sp, r7
 8010158:	bd90      	pop	{r4, r7, pc}
 801015a:	bf00      	nop
 801015c:	080179b4 	.word	0x080179b4
 8010160:	08018170 	.word	0x08018170
 8010164:	08017a08 	.word	0x08017a08

08010168 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010168:	b590      	push	{r4, r7, lr}
 801016a:	b087      	sub	sp, #28
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010170:	2300      	movs	r3, #0
 8010172:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d106      	bne.n	8010188 <tcp_keepalive+0x20>
 801017a:	4b18      	ldr	r3, [pc, #96]	@ (80101dc <tcp_keepalive+0x74>)
 801017c:	f640 0224 	movw	r2, #2084	@ 0x824
 8010180:	4917      	ldr	r1, [pc, #92]	@ (80101e0 <tcp_keepalive+0x78>)
 8010182:	4818      	ldr	r0, [pc, #96]	@ (80101e4 <tcp_keepalive+0x7c>)
 8010184:	f005 f938 	bl	80153f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010188:	7dfb      	ldrb	r3, [r7, #23]
 801018a:	b29c      	uxth	r4, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010190:	3b01      	subs	r3, #1
 8010192:	4618      	mov	r0, r3
 8010194:	f7f9 f9d0 	bl	8009538 <lwip_htonl>
 8010198:	4603      	mov	r3, r0
 801019a:	2200      	movs	r2, #0
 801019c:	4621      	mov	r1, r4
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7ff fe68 	bl	800fe74 <tcp_output_alloc_header>
 80101a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d102      	bne.n	80101b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80101ac:	f04f 33ff 	mov.w	r3, #4294967295
 80101b0:	e010      	b.n	80101d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80101b2:	7dfb      	ldrb	r3, [r7, #23]
 80101b4:	2200      	movs	r2, #0
 80101b6:	6939      	ldr	r1, [r7, #16]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff fe99 	bl	800fef0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	3304      	adds	r3, #4
 80101c4:	6939      	ldr	r1, [r7, #16]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7ff fed0 	bl	800ff6c <tcp_output_control_segment>
 80101cc:	4603      	mov	r3, r0
 80101ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80101d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	371c      	adds	r7, #28
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd90      	pop	{r4, r7, pc}
 80101dc:	080179b4 	.word	0x080179b4
 80101e0:	08018190 	.word	0x08018190
 80101e4:	08017a08 	.word	0x08017a08

080101e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80101e8:	b590      	push	{r4, r7, lr}
 80101ea:	b08b      	sub	sp, #44	@ 0x2c
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80101f0:	2300      	movs	r3, #0
 80101f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d106      	bne.n	801020a <tcp_zero_window_probe+0x22>
 80101fc:	4b4c      	ldr	r3, [pc, #304]	@ (8010330 <tcp_zero_window_probe+0x148>)
 80101fe:	f640 024f 	movw	r2, #2127	@ 0x84f
 8010202:	494c      	ldr	r1, [pc, #304]	@ (8010334 <tcp_zero_window_probe+0x14c>)
 8010204:	484c      	ldr	r0, [pc, #304]	@ (8010338 <tcp_zero_window_probe+0x150>)
 8010206:	f005 f8f7 	bl	80153f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801020e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010210:	6a3b      	ldr	r3, [r7, #32]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010216:	2300      	movs	r3, #0
 8010218:	e086      	b.n	8010328 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010220:	2bff      	cmp	r3, #255	@ 0xff
 8010222:	d007      	beq.n	8010234 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801022a:	3301      	adds	r3, #1
 801022c:	b2da      	uxtb	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010234:	6a3b      	ldr	r3, [r7, #32]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	899b      	ldrh	r3, [r3, #12]
 801023a:	b29b      	uxth	r3, r3
 801023c:	4618      	mov	r0, r3
 801023e:	f7f9 f965 	bl	800950c <lwip_htons>
 8010242:	4603      	mov	r3, r0
 8010244:	b2db      	uxtb	r3, r3
 8010246:	f003 0301 	and.w	r3, r3, #1
 801024a:	2b00      	cmp	r3, #0
 801024c:	d005      	beq.n	801025a <tcp_zero_window_probe+0x72>
 801024e:	6a3b      	ldr	r3, [r7, #32]
 8010250:	891b      	ldrh	r3, [r3, #8]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d101      	bne.n	801025a <tcp_zero_window_probe+0x72>
 8010256:	2301      	movs	r3, #1
 8010258:	e000      	b.n	801025c <tcp_zero_window_probe+0x74>
 801025a:	2300      	movs	r3, #0
 801025c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801025e:	7ffb      	ldrb	r3, [r7, #31]
 8010260:	2b00      	cmp	r3, #0
 8010262:	bf0c      	ite	eq
 8010264:	2301      	moveq	r3, #1
 8010266:	2300      	movne	r3, #0
 8010268:	b2db      	uxtb	r3, r3
 801026a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801026c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010270:	b299      	uxth	r1, r3
 8010272:	6a3b      	ldr	r3, [r7, #32]
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	8bba      	ldrh	r2, [r7, #28]
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff fdfa 	bl	800fe74 <tcp_output_alloc_header>
 8010280:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d102      	bne.n	801028e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010288:	f04f 33ff 	mov.w	r3, #4294967295
 801028c:	e04c      	b.n	8010328 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010294:	7ffb      	ldrb	r3, [r7, #31]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d011      	beq.n	80102be <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	899b      	ldrh	r3, [r3, #12]
 801029e:	b29b      	uxth	r3, r3
 80102a0:	b21b      	sxth	r3, r3
 80102a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80102a6:	b21c      	sxth	r4, r3
 80102a8:	2011      	movs	r0, #17
 80102aa:	f7f9 f92f 	bl	800950c <lwip_htons>
 80102ae:	4603      	mov	r3, r0
 80102b0:	b21b      	sxth	r3, r3
 80102b2:	4323      	orrs	r3, r4
 80102b4:	b21b      	sxth	r3, r3
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	819a      	strh	r2, [r3, #12]
 80102bc:	e010      	b.n	80102e0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	3314      	adds	r3, #20
 80102c4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80102c6:	6a3b      	ldr	r3, [r7, #32]
 80102c8:	6858      	ldr	r0, [r3, #4]
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	891a      	ldrh	r2, [r3, #8]
 80102d0:	6a3b      	ldr	r3, [r7, #32]
 80102d2:	891b      	ldrh	r3, [r3, #8]
 80102d4:	1ad3      	subs	r3, r2, r3
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	2201      	movs	r2, #1
 80102da:	6939      	ldr	r1, [r7, #16]
 80102dc:	f7fa fe56 	bl	800af8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80102e0:	6a3b      	ldr	r3, [r7, #32]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7f9 f926 	bl	8009538 <lwip_htonl>
 80102ec:	4603      	mov	r3, r0
 80102ee:	3301      	adds	r3, #1
 80102f0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	da02      	bge.n	8010304 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	68fa      	ldr	r2, [r7, #12]
 8010302:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010308:	2200      	movs	r2, #0
 801030a:	69b9      	ldr	r1, [r7, #24]
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7ff fdef 	bl	800fef0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	3304      	adds	r3, #4
 8010318:	69b9      	ldr	r1, [r7, #24]
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f7ff fe26 	bl	800ff6c <tcp_output_control_segment>
 8010320:	4603      	mov	r3, r0
 8010322:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010324:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010328:	4618      	mov	r0, r3
 801032a:	372c      	adds	r7, #44	@ 0x2c
 801032c:	46bd      	mov	sp, r7
 801032e:	bd90      	pop	{r4, r7, pc}
 8010330:	080179b4 	.word	0x080179b4
 8010334:	080181ac 	.word	0x080181ac
 8010338:	08017a08 	.word	0x08017a08

0801033c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010344:	f7fa ff10 	bl	800b168 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010348:	4b0a      	ldr	r3, [pc, #40]	@ (8010374 <tcpip_tcp_timer+0x38>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d103      	bne.n	8010358 <tcpip_tcp_timer+0x1c>
 8010350:	4b09      	ldr	r3, [pc, #36]	@ (8010378 <tcpip_tcp_timer+0x3c>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d005      	beq.n	8010364 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010358:	2200      	movs	r2, #0
 801035a:	4908      	ldr	r1, [pc, #32]	@ (801037c <tcpip_tcp_timer+0x40>)
 801035c:	20fa      	movs	r0, #250	@ 0xfa
 801035e:	f000 f8f3 	bl	8010548 <sys_timeout>
 8010362:	e003      	b.n	801036c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010364:	4b06      	ldr	r3, [pc, #24]	@ (8010380 <tcpip_tcp_timer+0x44>)
 8010366:	2200      	movs	r2, #0
 8010368:	601a      	str	r2, [r3, #0]
  }
}
 801036a:	bf00      	nop
 801036c:	bf00      	nop
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	2000d0d0 	.word	0x2000d0d0
 8010378:	2000d0d4 	.word	0x2000d0d4
 801037c:	0801033d 	.word	0x0801033d
 8010380:	2000d11c 	.word	0x2000d11c

08010384 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010388:	4b0a      	ldr	r3, [pc, #40]	@ (80103b4 <tcp_timer_needed+0x30>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d10f      	bne.n	80103b0 <tcp_timer_needed+0x2c>
 8010390:	4b09      	ldr	r3, [pc, #36]	@ (80103b8 <tcp_timer_needed+0x34>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d103      	bne.n	80103a0 <tcp_timer_needed+0x1c>
 8010398:	4b08      	ldr	r3, [pc, #32]	@ (80103bc <tcp_timer_needed+0x38>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d007      	beq.n	80103b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80103a0:	4b04      	ldr	r3, [pc, #16]	@ (80103b4 <tcp_timer_needed+0x30>)
 80103a2:	2201      	movs	r2, #1
 80103a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80103a6:	2200      	movs	r2, #0
 80103a8:	4905      	ldr	r1, [pc, #20]	@ (80103c0 <tcp_timer_needed+0x3c>)
 80103aa:	20fa      	movs	r0, #250	@ 0xfa
 80103ac:	f000 f8cc 	bl	8010548 <sys_timeout>
  }
}
 80103b0:	bf00      	nop
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	2000d11c 	.word	0x2000d11c
 80103b8:	2000d0d0 	.word	0x2000d0d0
 80103bc:	2000d0d4 	.word	0x2000d0d4
 80103c0:	0801033d 	.word	0x0801033d

080103c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b086      	sub	sp, #24
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80103d0:	2006      	movs	r0, #6
 80103d2:	f7f9 fd0f 	bl	8009df4 <memp_malloc>
 80103d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d109      	bne.n	80103f2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d151      	bne.n	8010488 <sys_timeout_abs+0xc4>
 80103e4:	4b2a      	ldr	r3, [pc, #168]	@ (8010490 <sys_timeout_abs+0xcc>)
 80103e6:	22be      	movs	r2, #190	@ 0xbe
 80103e8:	492a      	ldr	r1, [pc, #168]	@ (8010494 <sys_timeout_abs+0xd0>)
 80103ea:	482b      	ldr	r0, [pc, #172]	@ (8010498 <sys_timeout_abs+0xd4>)
 80103ec:	f005 f804 	bl	80153f8 <iprintf>
    return;
 80103f0:	e04a      	b.n	8010488 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	2200      	movs	r2, #0
 80103f6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801040a:	4b24      	ldr	r3, [pc, #144]	@ (801049c <sys_timeout_abs+0xd8>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d103      	bne.n	801041a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010412:	4a22      	ldr	r2, [pc, #136]	@ (801049c <sys_timeout_abs+0xd8>)
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	6013      	str	r3, [r2, #0]
    return;
 8010418:	e037      	b.n	801048a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	4b1f      	ldr	r3, [pc, #124]	@ (801049c <sys_timeout_abs+0xd8>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	1ad3      	subs	r3, r2, r3
 8010426:	0fdb      	lsrs	r3, r3, #31
 8010428:	f003 0301 	and.w	r3, r3, #1
 801042c:	b2db      	uxtb	r3, r3
 801042e:	2b00      	cmp	r3, #0
 8010430:	d007      	beq.n	8010442 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010432:	4b1a      	ldr	r3, [pc, #104]	@ (801049c <sys_timeout_abs+0xd8>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801043a:	4a18      	ldr	r2, [pc, #96]	@ (801049c <sys_timeout_abs+0xd8>)
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	6013      	str	r3, [r2, #0]
 8010440:	e023      	b.n	801048a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010442:	4b16      	ldr	r3, [pc, #88]	@ (801049c <sys_timeout_abs+0xd8>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	617b      	str	r3, [r7, #20]
 8010448:	e01a      	b.n	8010480 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00b      	beq.n	801046a <sys_timeout_abs+0xa6>
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	685a      	ldr	r2, [r3, #4]
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	0fdb      	lsrs	r3, r3, #31
 8010460:	f003 0301 	and.w	r3, r3, #1
 8010464:	b2db      	uxtb	r3, r3
 8010466:	2b00      	cmp	r3, #0
 8010468:	d007      	beq.n	801047a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	693a      	ldr	r2, [r7, #16]
 8010476:	601a      	str	r2, [r3, #0]
        break;
 8010478:	e007      	b.n	801048a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	617b      	str	r3, [r7, #20]
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1e1      	bne.n	801044a <sys_timeout_abs+0x86>
 8010486:	e000      	b.n	801048a <sys_timeout_abs+0xc6>
    return;
 8010488:	bf00      	nop
      }
    }
  }
}
 801048a:	3718      	adds	r7, #24
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	080181d0 	.word	0x080181d0
 8010494:	08018204 	.word	0x08018204
 8010498:	08018244 	.word	0x08018244
 801049c:	2000d114 	.word	0x2000d114

080104a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b086      	sub	sp, #24
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	4798      	blx	r3

  now = sys_now();
 80104b2:	f7f6 f827 	bl	8006504 <sys_now>
 80104b6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	4b0f      	ldr	r3, [pc, #60]	@ (80104fc <lwip_cyclic_timer+0x5c>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4413      	add	r3, r2
 80104c2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80104c4:	68fa      	ldr	r2, [r7, #12]
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	0fdb      	lsrs	r3, r3, #31
 80104cc:	f003 0301 	and.w	r3, r3, #1
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d009      	beq.n	80104ea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	4413      	add	r3, r2
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	4907      	ldr	r1, [pc, #28]	@ (8010500 <lwip_cyclic_timer+0x60>)
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7ff ff6e 	bl	80103c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80104e8:	e004      	b.n	80104f4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	4904      	ldr	r1, [pc, #16]	@ (8010500 <lwip_cyclic_timer+0x60>)
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f7ff ff68 	bl	80103c4 <sys_timeout_abs>
}
 80104f4:	bf00      	nop
 80104f6:	3718      	adds	r7, #24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	2000d118 	.word	0x2000d118
 8010500:	080104a1 	.word	0x080104a1

08010504 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801050a:	2301      	movs	r3, #1
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	e00e      	b.n	801052e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010510:	4a0b      	ldr	r2, [pc, #44]	@ (8010540 <sys_timeouts_init+0x3c>)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	00db      	lsls	r3, r3, #3
 801051c:	4a08      	ldr	r2, [pc, #32]	@ (8010540 <sys_timeouts_init+0x3c>)
 801051e:	4413      	add	r3, r2
 8010520:	461a      	mov	r2, r3
 8010522:	4908      	ldr	r1, [pc, #32]	@ (8010544 <sys_timeouts_init+0x40>)
 8010524:	f000 f810 	bl	8010548 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	3301      	adds	r3, #1
 801052c:	607b      	str	r3, [r7, #4]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b04      	cmp	r3, #4
 8010532:	d9ed      	bls.n	8010510 <sys_timeouts_init+0xc>
  }
}
 8010534:	bf00      	nop
 8010536:	bf00      	nop
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	08019180 	.word	0x08019180
 8010544:	080104a1 	.word	0x080104a1

08010548 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b086      	sub	sp, #24
 801054c:	af00      	add	r7, sp, #0
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801055a:	d306      	bcc.n	801056a <sys_timeout+0x22>
 801055c:	4b0a      	ldr	r3, [pc, #40]	@ (8010588 <sys_timeout+0x40>)
 801055e:	f240 1229 	movw	r2, #297	@ 0x129
 8010562:	490a      	ldr	r1, [pc, #40]	@ (801058c <sys_timeout+0x44>)
 8010564:	480a      	ldr	r0, [pc, #40]	@ (8010590 <sys_timeout+0x48>)
 8010566:	f004 ff47 	bl	80153f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801056a:	f7f5 ffcb 	bl	8006504 <sys_now>
 801056e:	4602      	mov	r2, r0
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	4413      	add	r3, r2
 8010574:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	68b9      	ldr	r1, [r7, #8]
 801057a:	6978      	ldr	r0, [r7, #20]
 801057c:	f7ff ff22 	bl	80103c4 <sys_timeout_abs>
#endif
}
 8010580:	bf00      	nop
 8010582:	3718      	adds	r7, #24
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	080181d0 	.word	0x080181d0
 801058c:	0801826c 	.word	0x0801826c
 8010590:	08018244 	.word	0x08018244

08010594 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010598:	f004 fe2e 	bl	80151f8 <rand>
 801059c:	4603      	mov	r3, r0
 801059e:	b29b      	uxth	r3, r3
 80105a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	4b01      	ldr	r3, [pc, #4]	@ (80105b4 <udp_init+0x20>)
 80105ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80105b0:	bf00      	nop
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	2000002c 	.word	0x2000002c

080105b8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80105c2:	4b17      	ldr	r3, [pc, #92]	@ (8010620 <udp_new_port+0x68>)
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	1c5a      	adds	r2, r3, #1
 80105c8:	b291      	uxth	r1, r2
 80105ca:	4a15      	ldr	r2, [pc, #84]	@ (8010620 <udp_new_port+0x68>)
 80105cc:	8011      	strh	r1, [r2, #0]
 80105ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d103      	bne.n	80105de <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80105d6:	4b12      	ldr	r3, [pc, #72]	@ (8010620 <udp_new_port+0x68>)
 80105d8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80105dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80105de:	4b11      	ldr	r3, [pc, #68]	@ (8010624 <udp_new_port+0x6c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	603b      	str	r3, [r7, #0]
 80105e4:	e011      	b.n	801060a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	8a5a      	ldrh	r2, [r3, #18]
 80105ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010620 <udp_new_port+0x68>)
 80105ec:	881b      	ldrh	r3, [r3, #0]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d108      	bne.n	8010604 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80105f2:	88fb      	ldrh	r3, [r7, #6]
 80105f4:	3301      	adds	r3, #1
 80105f6:	80fb      	strh	r3, [r7, #6]
 80105f8:	88fb      	ldrh	r3, [r7, #6]
 80105fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80105fe:	d3e0      	bcc.n	80105c2 <udp_new_port+0xa>
        return 0;
 8010600:	2300      	movs	r3, #0
 8010602:	e007      	b.n	8010614 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	68db      	ldr	r3, [r3, #12]
 8010608:	603b      	str	r3, [r7, #0]
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1ea      	bne.n	80105e6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010610:	4b03      	ldr	r3, [pc, #12]	@ (8010620 <udp_new_port+0x68>)
 8010612:	881b      	ldrh	r3, [r3, #0]
}
 8010614:	4618      	mov	r0, r3
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr
 8010620:	2000002c 	.word	0x2000002c
 8010624:	2000d120 	.word	0x2000d120

08010628 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	4613      	mov	r3, r2
 8010634:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d105      	bne.n	8010648 <udp_input_local_match+0x20>
 801063c:	4b27      	ldr	r3, [pc, #156]	@ (80106dc <udp_input_local_match+0xb4>)
 801063e:	2287      	movs	r2, #135	@ 0x87
 8010640:	4927      	ldr	r1, [pc, #156]	@ (80106e0 <udp_input_local_match+0xb8>)
 8010642:	4828      	ldr	r0, [pc, #160]	@ (80106e4 <udp_input_local_match+0xbc>)
 8010644:	f004 fed8 	bl	80153f8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d105      	bne.n	801065a <udp_input_local_match+0x32>
 801064e:	4b23      	ldr	r3, [pc, #140]	@ (80106dc <udp_input_local_match+0xb4>)
 8010650:	2288      	movs	r2, #136	@ 0x88
 8010652:	4925      	ldr	r1, [pc, #148]	@ (80106e8 <udp_input_local_match+0xc0>)
 8010654:	4823      	ldr	r0, [pc, #140]	@ (80106e4 <udp_input_local_match+0xbc>)
 8010656:	f004 fecf 	bl	80153f8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	7a1b      	ldrb	r3, [r3, #8]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00b      	beq.n	801067a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	7a1a      	ldrb	r2, [r3, #8]
 8010666:	4b21      	ldr	r3, [pc, #132]	@ (80106ec <udp_input_local_match+0xc4>)
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801066e:	3301      	adds	r3, #1
 8010670:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010672:	429a      	cmp	r2, r3
 8010674:	d001      	beq.n	801067a <udp_input_local_match+0x52>
    return 0;
 8010676:	2300      	movs	r3, #0
 8010678:	e02b      	b.n	80106d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801067a:	79fb      	ldrb	r3, [r7, #7]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d018      	beq.n	80106b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d013      	beq.n	80106ae <udp_input_local_match+0x86>
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00f      	beq.n	80106ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801068e:	4b17      	ldr	r3, [pc, #92]	@ (80106ec <udp_input_local_match+0xc4>)
 8010690:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010696:	d00a      	beq.n	80106ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	4b13      	ldr	r3, [pc, #76]	@ (80106ec <udp_input_local_match+0xc4>)
 801069e:	695b      	ldr	r3, [r3, #20]
 80106a0:	405a      	eors	r2, r3
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	3308      	adds	r3, #8
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d110      	bne.n	80106d0 <udp_input_local_match+0xa8>
          return 1;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e00f      	b.n	80106d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d009      	beq.n	80106cc <udp_input_local_match+0xa4>
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d005      	beq.n	80106cc <udp_input_local_match+0xa4>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	4b09      	ldr	r3, [pc, #36]	@ (80106ec <udp_input_local_match+0xc4>)
 80106c6:	695b      	ldr	r3, [r3, #20]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d101      	bne.n	80106d0 <udp_input_local_match+0xa8>
        return 1;
 80106cc:	2301      	movs	r3, #1
 80106ce:	e000      	b.n	80106d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	080182b8 	.word	0x080182b8
 80106e0:	080182e8 	.word	0x080182e8
 80106e4:	0801830c 	.word	0x0801830c
 80106e8:	08018334 	.word	0x08018334
 80106ec:	2000a188 	.word	0x2000a188

080106f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80106f0:	b590      	push	{r4, r7, lr}
 80106f2:	b08d      	sub	sp, #52	@ 0x34
 80106f4:	af02      	add	r7, sp, #8
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80106fa:	2300      	movs	r3, #0
 80106fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d105      	bne.n	8010710 <udp_input+0x20>
 8010704:	4b7c      	ldr	r3, [pc, #496]	@ (80108f8 <udp_input+0x208>)
 8010706:	22cf      	movs	r2, #207	@ 0xcf
 8010708:	497c      	ldr	r1, [pc, #496]	@ (80108fc <udp_input+0x20c>)
 801070a:	487d      	ldr	r0, [pc, #500]	@ (8010900 <udp_input+0x210>)
 801070c:	f004 fe74 	bl	80153f8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d105      	bne.n	8010722 <udp_input+0x32>
 8010716:	4b78      	ldr	r3, [pc, #480]	@ (80108f8 <udp_input+0x208>)
 8010718:	22d0      	movs	r2, #208	@ 0xd0
 801071a:	497a      	ldr	r1, [pc, #488]	@ (8010904 <udp_input+0x214>)
 801071c:	4878      	ldr	r0, [pc, #480]	@ (8010900 <udp_input+0x210>)
 801071e:	f004 fe6b 	bl	80153f8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	895b      	ldrh	r3, [r3, #10]
 8010726:	2b07      	cmp	r3, #7
 8010728:	d803      	bhi.n	8010732 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f7fa fa34 	bl	800ab98 <pbuf_free>
    goto end;
 8010730:	e0de      	b.n	80108f0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010738:	4b73      	ldr	r3, [pc, #460]	@ (8010908 <udp_input+0x218>)
 801073a:	695b      	ldr	r3, [r3, #20]
 801073c:	4a72      	ldr	r2, [pc, #456]	@ (8010908 <udp_input+0x218>)
 801073e:	6812      	ldr	r2, [r2, #0]
 8010740:	4611      	mov	r1, r2
 8010742:	4618      	mov	r0, r3
 8010744:	f003 fe02 	bl	801434c <ip4_addr_isbroadcast_u32>
 8010748:	4603      	mov	r3, r0
 801074a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	881b      	ldrh	r3, [r3, #0]
 8010750:	b29b      	uxth	r3, r3
 8010752:	4618      	mov	r0, r3
 8010754:	f7f8 feda 	bl	800950c <lwip_htons>
 8010758:	4603      	mov	r3, r0
 801075a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	885b      	ldrh	r3, [r3, #2]
 8010760:	b29b      	uxth	r3, r3
 8010762:	4618      	mov	r0, r3
 8010764:	f7f8 fed2 	bl	800950c <lwip_htons>
 8010768:	4603      	mov	r3, r0
 801076a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801076c:	2300      	movs	r3, #0
 801076e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8010770:	2300      	movs	r3, #0
 8010772:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010774:	2300      	movs	r3, #0
 8010776:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010778:	4b64      	ldr	r3, [pc, #400]	@ (801090c <udp_input+0x21c>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	627b      	str	r3, [r7, #36]	@ 0x24
 801077e:	e054      	b.n	801082a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010782:	8a5b      	ldrh	r3, [r3, #18]
 8010784:	89fa      	ldrh	r2, [r7, #14]
 8010786:	429a      	cmp	r2, r3
 8010788:	d14a      	bne.n	8010820 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801078a:	7cfb      	ldrb	r3, [r7, #19]
 801078c:	461a      	mov	r2, r3
 801078e:	6839      	ldr	r1, [r7, #0]
 8010790:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010792:	f7ff ff49 	bl	8010628 <udp_input_local_match>
 8010796:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010798:	2b00      	cmp	r3, #0
 801079a:	d041      	beq.n	8010820 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801079c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079e:	7c1b      	ldrb	r3, [r3, #16]
 80107a0:	f003 0304 	and.w	r3, r3, #4
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d11d      	bne.n	80107e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d102      	bne.n	80107b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80107ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b0:	61fb      	str	r3, [r7, #28]
 80107b2:	e017      	b.n	80107e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80107b4:	7cfb      	ldrb	r3, [r7, #19]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d014      	beq.n	80107e4 <udp_input+0xf4>
 80107ba:	4b53      	ldr	r3, [pc, #332]	@ (8010908 <udp_input+0x218>)
 80107bc:	695b      	ldr	r3, [r3, #20]
 80107be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c2:	d10f      	bne.n	80107e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	3304      	adds	r3, #4
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d008      	beq.n	80107e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80107d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	3304      	adds	r3, #4
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d101      	bne.n	80107e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80107e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80107e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e6:	8a9b      	ldrh	r3, [r3, #20]
 80107e8:	8a3a      	ldrh	r2, [r7, #16]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d118      	bne.n	8010820 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80107ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d005      	beq.n	8010802 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80107f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f8:	685a      	ldr	r2, [r3, #4]
 80107fa:	4b43      	ldr	r3, [pc, #268]	@ (8010908 <udp_input+0x218>)
 80107fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80107fe:	429a      	cmp	r2, r3
 8010800:	d10e      	bne.n	8010820 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d014      	beq.n	8010832 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801080a:	68da      	ldr	r2, [r3, #12]
 801080c:	6a3b      	ldr	r3, [r7, #32]
 801080e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010810:	4b3e      	ldr	r3, [pc, #248]	@ (801090c <udp_input+0x21c>)
 8010812:	681a      	ldr	r2, [r3, #0]
 8010814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010816:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010818:	4a3c      	ldr	r2, [pc, #240]	@ (801090c <udp_input+0x21c>)
 801081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801081c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801081e:	e008      	b.n	8010832 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010822:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	627b      	str	r3, [r7, #36]	@ 0x24
 801082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082c:	2b00      	cmp	r3, #0
 801082e:	d1a7      	bne.n	8010780 <udp_input+0x90>
 8010830:	e000      	b.n	8010834 <udp_input+0x144>
        break;
 8010832:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010836:	2b00      	cmp	r3, #0
 8010838:	d101      	bne.n	801083e <udp_input+0x14e>
    pcb = uncon_pcb;
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010840:	2b00      	cmp	r3, #0
 8010842:	d002      	beq.n	801084a <udp_input+0x15a>
    for_us = 1;
 8010844:	2301      	movs	r3, #1
 8010846:	76fb      	strb	r3, [r7, #27]
 8010848:	e00a      	b.n	8010860 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	3304      	adds	r3, #4
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	4b2d      	ldr	r3, [pc, #180]	@ (8010908 <udp_input+0x218>)
 8010852:	695b      	ldr	r3, [r3, #20]
 8010854:	429a      	cmp	r2, r3
 8010856:	bf0c      	ite	eq
 8010858:	2301      	moveq	r3, #1
 801085a:	2300      	movne	r3, #0
 801085c:	b2db      	uxtb	r3, r3
 801085e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010860:	7efb      	ldrb	r3, [r7, #27]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d041      	beq.n	80108ea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010866:	2108      	movs	r1, #8
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7fa f90f 	bl	800aa8c <pbuf_remove_header>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d00a      	beq.n	801088a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010874:	4b20      	ldr	r3, [pc, #128]	@ (80108f8 <udp_input+0x208>)
 8010876:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801087a:	4925      	ldr	r1, [pc, #148]	@ (8010910 <udp_input+0x220>)
 801087c:	4820      	ldr	r0, [pc, #128]	@ (8010900 <udp_input+0x210>)
 801087e:	f004 fdbb 	bl	80153f8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7fa f988 	bl	800ab98 <pbuf_free>
      goto end;
 8010888:	e032      	b.n	80108f0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801088a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801088c:	2b00      	cmp	r3, #0
 801088e:	d012      	beq.n	80108b6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010892:	699b      	ldr	r3, [r3, #24]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d00a      	beq.n	80108ae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801089a:	699c      	ldr	r4, [r3, #24]
 801089c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801089e:	69d8      	ldr	r0, [r3, #28]
 80108a0:	8a3b      	ldrh	r3, [r7, #16]
 80108a2:	9300      	str	r3, [sp, #0]
 80108a4:	4b1b      	ldr	r3, [pc, #108]	@ (8010914 <udp_input+0x224>)
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80108aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80108ac:	e021      	b.n	80108f2 <udp_input+0x202>
        pbuf_free(p);
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7fa f972 	bl	800ab98 <pbuf_free>
        goto end;
 80108b4:	e01c      	b.n	80108f0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80108b6:	7cfb      	ldrb	r3, [r7, #19]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d112      	bne.n	80108e2 <udp_input+0x1f2>
 80108bc:	4b12      	ldr	r3, [pc, #72]	@ (8010908 <udp_input+0x218>)
 80108be:	695b      	ldr	r3, [r3, #20]
 80108c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80108c4:	2be0      	cmp	r3, #224	@ 0xe0
 80108c6:	d00c      	beq.n	80108e2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80108c8:	4b0f      	ldr	r3, [pc, #60]	@ (8010908 <udp_input+0x218>)
 80108ca:	899b      	ldrh	r3, [r3, #12]
 80108cc:	3308      	adds	r3, #8
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	b21b      	sxth	r3, r3
 80108d2:	4619      	mov	r1, r3
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7fa f94c 	bl	800ab72 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80108da:	2103      	movs	r1, #3
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f003 f9f7 	bl	8013cd0 <icmp_dest_unreach>
      pbuf_free(p);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7fa f958 	bl	800ab98 <pbuf_free>
  return;
 80108e8:	e003      	b.n	80108f2 <udp_input+0x202>
    pbuf_free(p);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7fa f954 	bl	800ab98 <pbuf_free>
  return;
 80108f0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80108f2:	372c      	adds	r7, #44	@ 0x2c
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd90      	pop	{r4, r7, pc}
 80108f8:	080182b8 	.word	0x080182b8
 80108fc:	0801835c 	.word	0x0801835c
 8010900:	0801830c 	.word	0x0801830c
 8010904:	08018374 	.word	0x08018374
 8010908:	2000a188 	.word	0x2000a188
 801090c:	2000d120 	.word	0x2000d120
 8010910:	08018390 	.word	0x08018390
 8010914:	2000a198 	.word	0x2000a198

08010918 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b088      	sub	sp, #32
 801091c:	af02      	add	r7, sp, #8
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	607a      	str	r2, [r7, #4]
 8010924:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d109      	bne.n	8010940 <udp_sendto_if+0x28>
 801092c:	4b2e      	ldr	r3, [pc, #184]	@ (80109e8 <udp_sendto_if+0xd0>)
 801092e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010932:	492e      	ldr	r1, [pc, #184]	@ (80109ec <udp_sendto_if+0xd4>)
 8010934:	482e      	ldr	r0, [pc, #184]	@ (80109f0 <udp_sendto_if+0xd8>)
 8010936:	f004 fd5f 	bl	80153f8 <iprintf>
 801093a:	f06f 030f 	mvn.w	r3, #15
 801093e:	e04f      	b.n	80109e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d109      	bne.n	801095a <udp_sendto_if+0x42>
 8010946:	4b28      	ldr	r3, [pc, #160]	@ (80109e8 <udp_sendto_if+0xd0>)
 8010948:	f240 2281 	movw	r2, #641	@ 0x281
 801094c:	4929      	ldr	r1, [pc, #164]	@ (80109f4 <udp_sendto_if+0xdc>)
 801094e:	4828      	ldr	r0, [pc, #160]	@ (80109f0 <udp_sendto_if+0xd8>)
 8010950:	f004 fd52 	bl	80153f8 <iprintf>
 8010954:	f06f 030f 	mvn.w	r3, #15
 8010958:	e042      	b.n	80109e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d109      	bne.n	8010974 <udp_sendto_if+0x5c>
 8010960:	4b21      	ldr	r3, [pc, #132]	@ (80109e8 <udp_sendto_if+0xd0>)
 8010962:	f240 2282 	movw	r2, #642	@ 0x282
 8010966:	4924      	ldr	r1, [pc, #144]	@ (80109f8 <udp_sendto_if+0xe0>)
 8010968:	4821      	ldr	r0, [pc, #132]	@ (80109f0 <udp_sendto_if+0xd8>)
 801096a:	f004 fd45 	bl	80153f8 <iprintf>
 801096e:	f06f 030f 	mvn.w	r3, #15
 8010972:	e035      	b.n	80109e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d109      	bne.n	801098e <udp_sendto_if+0x76>
 801097a:	4b1b      	ldr	r3, [pc, #108]	@ (80109e8 <udp_sendto_if+0xd0>)
 801097c:	f240 2283 	movw	r2, #643	@ 0x283
 8010980:	491e      	ldr	r1, [pc, #120]	@ (80109fc <udp_sendto_if+0xe4>)
 8010982:	481b      	ldr	r0, [pc, #108]	@ (80109f0 <udp_sendto_if+0xd8>)
 8010984:	f004 fd38 	bl	80153f8 <iprintf>
 8010988:	f06f 030f 	mvn.w	r3, #15
 801098c:	e028      	b.n	80109e0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d009      	beq.n	80109a8 <udp_sendto_if+0x90>
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d005      	beq.n	80109a8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80109a4:	2be0      	cmp	r3, #224	@ 0xe0
 80109a6:	d103      	bne.n	80109b0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80109a8:	6a3b      	ldr	r3, [r7, #32]
 80109aa:	3304      	adds	r3, #4
 80109ac:	617b      	str	r3, [r7, #20]
 80109ae:	e00b      	b.n	80109c8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	6a3b      	ldr	r3, [r7, #32]
 80109b6:	3304      	adds	r3, #4
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d002      	beq.n	80109c4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80109be:	f06f 0303 	mvn.w	r3, #3
 80109c2:	e00d      	b.n	80109e0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80109c8:	887a      	ldrh	r2, [r7, #2]
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	9301      	str	r3, [sp, #4]
 80109ce:	6a3b      	ldr	r3, [r7, #32]
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	4613      	mov	r3, r2
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	68b9      	ldr	r1, [r7, #8]
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f000 f811 	bl	8010a00 <udp_sendto_if_src>
 80109de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3718      	adds	r7, #24
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	080182b8 	.word	0x080182b8
 80109ec:	0801842c 	.word	0x0801842c
 80109f0:	0801830c 	.word	0x0801830c
 80109f4:	08018448 	.word	0x08018448
 80109f8:	08018464 	.word	0x08018464
 80109fc:	08018484 	.word	0x08018484

08010a00 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b08c      	sub	sp, #48	@ 0x30
 8010a04:	af04      	add	r7, sp, #16
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	60b9      	str	r1, [r7, #8]
 8010a0a:	607a      	str	r2, [r7, #4]
 8010a0c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d109      	bne.n	8010a28 <udp_sendto_if_src+0x28>
 8010a14:	4b65      	ldr	r3, [pc, #404]	@ (8010bac <udp_sendto_if_src+0x1ac>)
 8010a16:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010a1a:	4965      	ldr	r1, [pc, #404]	@ (8010bb0 <udp_sendto_if_src+0x1b0>)
 8010a1c:	4865      	ldr	r0, [pc, #404]	@ (8010bb4 <udp_sendto_if_src+0x1b4>)
 8010a1e:	f004 fceb 	bl	80153f8 <iprintf>
 8010a22:	f06f 030f 	mvn.w	r3, #15
 8010a26:	e0bc      	b.n	8010ba2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d109      	bne.n	8010a42 <udp_sendto_if_src+0x42>
 8010a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8010bac <udp_sendto_if_src+0x1ac>)
 8010a30:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8010a34:	4960      	ldr	r1, [pc, #384]	@ (8010bb8 <udp_sendto_if_src+0x1b8>)
 8010a36:	485f      	ldr	r0, [pc, #380]	@ (8010bb4 <udp_sendto_if_src+0x1b4>)
 8010a38:	f004 fcde 	bl	80153f8 <iprintf>
 8010a3c:	f06f 030f 	mvn.w	r3, #15
 8010a40:	e0af      	b.n	8010ba2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d109      	bne.n	8010a5c <udp_sendto_if_src+0x5c>
 8010a48:	4b58      	ldr	r3, [pc, #352]	@ (8010bac <udp_sendto_if_src+0x1ac>)
 8010a4a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8010a4e:	495b      	ldr	r1, [pc, #364]	@ (8010bbc <udp_sendto_if_src+0x1bc>)
 8010a50:	4858      	ldr	r0, [pc, #352]	@ (8010bb4 <udp_sendto_if_src+0x1b4>)
 8010a52:	f004 fcd1 	bl	80153f8 <iprintf>
 8010a56:	f06f 030f 	mvn.w	r3, #15
 8010a5a:	e0a2      	b.n	8010ba2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d109      	bne.n	8010a76 <udp_sendto_if_src+0x76>
 8010a62:	4b52      	ldr	r3, [pc, #328]	@ (8010bac <udp_sendto_if_src+0x1ac>)
 8010a64:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8010a68:	4955      	ldr	r1, [pc, #340]	@ (8010bc0 <udp_sendto_if_src+0x1c0>)
 8010a6a:	4852      	ldr	r0, [pc, #328]	@ (8010bb4 <udp_sendto_if_src+0x1b4>)
 8010a6c:	f004 fcc4 	bl	80153f8 <iprintf>
 8010a70:	f06f 030f 	mvn.w	r3, #15
 8010a74:	e095      	b.n	8010ba2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d109      	bne.n	8010a90 <udp_sendto_if_src+0x90>
 8010a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8010bac <udp_sendto_if_src+0x1ac>)
 8010a7e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8010a82:	4950      	ldr	r1, [pc, #320]	@ (8010bc4 <udp_sendto_if_src+0x1c4>)
 8010a84:	484b      	ldr	r0, [pc, #300]	@ (8010bb4 <udp_sendto_if_src+0x1b4>)
 8010a86:	f004 fcb7 	bl	80153f8 <iprintf>
 8010a8a:	f06f 030f 	mvn.w	r3, #15
 8010a8e:	e088      	b.n	8010ba2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	8a5b      	ldrh	r3, [r3, #18]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d10f      	bne.n	8010ab8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010a98:	68f9      	ldr	r1, [r7, #12]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	8a5b      	ldrh	r3, [r3, #18]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f000 f893 	bl	8010bcc <udp_bind>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010aaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d002      	beq.n	8010ab8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010ab2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010ab6:	e074      	b.n	8010ba2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	891b      	ldrh	r3, [r3, #8]
 8010abc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d902      	bls.n	8010aca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac8:	e06b      	b.n	8010ba2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010aca:	2108      	movs	r1, #8
 8010acc:	68b8      	ldr	r0, [r7, #8]
 8010ace:	f7f9 ffcd 	bl	800aa6c <pbuf_add_header>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d015      	beq.n	8010b04 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010ad8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010adc:	2108      	movs	r1, #8
 8010ade:	2022      	movs	r0, #34	@ 0x22
 8010ae0:	f7f9 fd76 	bl	800a5d0 <pbuf_alloc>
 8010ae4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d102      	bne.n	8010af2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010aec:	f04f 33ff 	mov.w	r3, #4294967295
 8010af0:	e057      	b.n	8010ba2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	891b      	ldrh	r3, [r3, #8]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d006      	beq.n	8010b08 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010afa:	68b9      	ldr	r1, [r7, #8]
 8010afc:	69f8      	ldr	r0, [r7, #28]
 8010afe:	f7fa f963 	bl	800adc8 <pbuf_chain>
 8010b02:	e001      	b.n	8010b08 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	895b      	ldrh	r3, [r3, #10]
 8010b0c:	2b07      	cmp	r3, #7
 8010b0e:	d806      	bhi.n	8010b1e <udp_sendto_if_src+0x11e>
 8010b10:	4b26      	ldr	r3, [pc, #152]	@ (8010bac <udp_sendto_if_src+0x1ac>)
 8010b12:	f240 320d 	movw	r2, #781	@ 0x30d
 8010b16:	492c      	ldr	r1, [pc, #176]	@ (8010bc8 <udp_sendto_if_src+0x1c8>)
 8010b18:	4826      	ldr	r0, [pc, #152]	@ (8010bb4 <udp_sendto_if_src+0x1b4>)
 8010b1a:	f004 fc6d 	bl	80153f8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	8a5b      	ldrh	r3, [r3, #18]
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7f8 fcef 	bl	800950c <lwip_htons>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	461a      	mov	r2, r3
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010b36:	887b      	ldrh	r3, [r7, #2]
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7f8 fce7 	bl	800950c <lwip_htons>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	461a      	mov	r2, r3
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	719a      	strb	r2, [r3, #6]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	891b      	ldrh	r3, [r3, #8]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7f8 fcd9 	bl	800950c <lwip_htons>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010b62:	2311      	movs	r3, #17
 8010b64:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	7adb      	ldrb	r3, [r3, #11]
 8010b6a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	7a9b      	ldrb	r3, [r3, #10]
 8010b70:	7cb9      	ldrb	r1, [r7, #18]
 8010b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b74:	9202      	str	r2, [sp, #8]
 8010b76:	7cfa      	ldrb	r2, [r7, #19]
 8010b78:	9201      	str	r2, [sp, #4]
 8010b7a:	9300      	str	r3, [sp, #0]
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b82:	69f8      	ldr	r0, [r7, #28]
 8010b84:	f003 fb34 	bl	80141f0 <ip4_output_if_src>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010b8c:	69fa      	ldr	r2, [r7, #28]
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d004      	beq.n	8010b9e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010b94:	69f8      	ldr	r0, [r7, #28]
 8010b96:	f7f9 ffff 	bl	800ab98 <pbuf_free>
    q = NULL;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010b9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3720      	adds	r7, #32
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	080182b8 	.word	0x080182b8
 8010bb0:	080184a4 	.word	0x080184a4
 8010bb4:	0801830c 	.word	0x0801830c
 8010bb8:	080184c4 	.word	0x080184c4
 8010bbc:	080184e4 	.word	0x080184e4
 8010bc0:	08018508 	.word	0x08018508
 8010bc4:	0801852c 	.word	0x0801852c
 8010bc8:	08018550 	.word	0x08018550

08010bcc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b086      	sub	sp, #24
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d101      	bne.n	8010be4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010be0:	4b39      	ldr	r3, [pc, #228]	@ (8010cc8 <udp_bind+0xfc>)
 8010be2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d109      	bne.n	8010bfe <udp_bind+0x32>
 8010bea:	4b38      	ldr	r3, [pc, #224]	@ (8010ccc <udp_bind+0x100>)
 8010bec:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8010bf0:	4937      	ldr	r1, [pc, #220]	@ (8010cd0 <udp_bind+0x104>)
 8010bf2:	4838      	ldr	r0, [pc, #224]	@ (8010cd4 <udp_bind+0x108>)
 8010bf4:	f004 fc00 	bl	80153f8 <iprintf>
 8010bf8:	f06f 030f 	mvn.w	r3, #15
 8010bfc:	e060      	b.n	8010cc0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c02:	4b35      	ldr	r3, [pc, #212]	@ (8010cd8 <udp_bind+0x10c>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	617b      	str	r3, [r7, #20]
 8010c08:	e009      	b.n	8010c1e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d102      	bne.n	8010c18 <udp_bind+0x4c>
      rebind = 1;
 8010c12:	2301      	movs	r3, #1
 8010c14:	74fb      	strb	r3, [r7, #19]
      break;
 8010c16:	e005      	b.n	8010c24 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	617b      	str	r3, [r7, #20]
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d1f2      	bne.n	8010c0a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010c24:	88fb      	ldrh	r3, [r7, #6]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d109      	bne.n	8010c3e <udp_bind+0x72>
    port = udp_new_port();
 8010c2a:	f7ff fcc5 	bl	80105b8 <udp_new_port>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010c32:	88fb      	ldrh	r3, [r7, #6]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d12c      	bne.n	8010c92 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010c38:	f06f 0307 	mvn.w	r3, #7
 8010c3c:	e040      	b.n	8010cc0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c3e:	4b26      	ldr	r3, [pc, #152]	@ (8010cd8 <udp_bind+0x10c>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	617b      	str	r3, [r7, #20]
 8010c44:	e022      	b.n	8010c8c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d01b      	beq.n	8010c86 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	8a5b      	ldrh	r3, [r3, #18]
 8010c52:	88fa      	ldrh	r2, [r7, #6]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d116      	bne.n	8010c86 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d00d      	beq.n	8010c80 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00a      	beq.n	8010c80 <udp_bind+0xb4>
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d006      	beq.n	8010c80 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010c72:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d003      	beq.n	8010c80 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d102      	bne.n	8010c86 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010c80:	f06f 0307 	mvn.w	r3, #7
 8010c84:	e01c      	b.n	8010cc0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	617b      	str	r3, [r7, #20]
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1d9      	bne.n	8010c46 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <udp_bind+0xd2>
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	e000      	b.n	8010ca0 <udp_bind+0xd4>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	68fa      	ldr	r2, [r7, #12]
 8010ca2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	88fa      	ldrh	r2, [r7, #6]
 8010ca8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010caa:	7cfb      	ldrb	r3, [r7, #19]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d106      	bne.n	8010cbe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010cb0:	4b09      	ldr	r3, [pc, #36]	@ (8010cd8 <udp_bind+0x10c>)
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010cb8:	4a07      	ldr	r2, [pc, #28]	@ (8010cd8 <udp_bind+0x10c>)
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010cbe:	2300      	movs	r3, #0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3718      	adds	r7, #24
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	080191a8 	.word	0x080191a8
 8010ccc:	080182b8 	.word	0x080182b8
 8010cd0:	08018580 	.word	0x08018580
 8010cd4:	0801830c 	.word	0x0801830c
 8010cd8:	2000d120 	.word	0x2000d120

08010cdc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b086      	sub	sp, #24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d109      	bne.n	8010d04 <udp_connect+0x28>
 8010cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8010da4 <udp_connect+0xc8>)
 8010cf2:	f240 4235 	movw	r2, #1077	@ 0x435
 8010cf6:	492c      	ldr	r1, [pc, #176]	@ (8010da8 <udp_connect+0xcc>)
 8010cf8:	482c      	ldr	r0, [pc, #176]	@ (8010dac <udp_connect+0xd0>)
 8010cfa:	f004 fb7d 	bl	80153f8 <iprintf>
 8010cfe:	f06f 030f 	mvn.w	r3, #15
 8010d02:	e04b      	b.n	8010d9c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d109      	bne.n	8010d1e <udp_connect+0x42>
 8010d0a:	4b26      	ldr	r3, [pc, #152]	@ (8010da4 <udp_connect+0xc8>)
 8010d0c:	f240 4236 	movw	r2, #1078	@ 0x436
 8010d10:	4927      	ldr	r1, [pc, #156]	@ (8010db0 <udp_connect+0xd4>)
 8010d12:	4826      	ldr	r0, [pc, #152]	@ (8010dac <udp_connect+0xd0>)
 8010d14:	f004 fb70 	bl	80153f8 <iprintf>
 8010d18:	f06f 030f 	mvn.w	r3, #15
 8010d1c:	e03e      	b.n	8010d9c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	8a5b      	ldrh	r3, [r3, #18]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10f      	bne.n	8010d46 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010d26:	68f9      	ldr	r1, [r7, #12]
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	8a5b      	ldrh	r3, [r3, #18]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f7ff ff4c 	bl	8010bcc <udp_bind>
 8010d34:	4603      	mov	r3, r0
 8010d36:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010d38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d002      	beq.n	8010d46 <udp_connect+0x6a>
      return err;
 8010d40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d44:	e02a      	b.n	8010d9c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d002      	beq.n	8010d52 <udp_connect+0x76>
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	e000      	b.n	8010d54 <udp_connect+0x78>
 8010d52:	2300      	movs	r3, #0
 8010d54:	68fa      	ldr	r2, [r7, #12]
 8010d56:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	88fa      	ldrh	r2, [r7, #6]
 8010d5c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	7c1b      	ldrb	r3, [r3, #16]
 8010d62:	f043 0304 	orr.w	r3, r3, #4
 8010d66:	b2da      	uxtb	r2, r3
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d6c:	4b11      	ldr	r3, [pc, #68]	@ (8010db4 <udp_connect+0xd8>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	617b      	str	r3, [r7, #20]
 8010d72:	e008      	b.n	8010d86 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010d74:	68fa      	ldr	r2, [r7, #12]
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d101      	bne.n	8010d80 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	e00d      	b.n	8010d9c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	617b      	str	r3, [r7, #20]
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d1f3      	bne.n	8010d74 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010d8c:	4b09      	ldr	r3, [pc, #36]	@ (8010db4 <udp_connect+0xd8>)
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010d94:	4a07      	ldr	r2, [pc, #28]	@ (8010db4 <udp_connect+0xd8>)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010d9a:	2300      	movs	r3, #0
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3718      	adds	r7, #24
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	080182b8 	.word	0x080182b8
 8010da8:	08018598 	.word	0x08018598
 8010dac:	0801830c 	.word	0x0801830c
 8010db0:	080185b4 	.word	0x080185b4
 8010db4:	2000d120 	.word	0x2000d120

08010db8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b084      	sub	sp, #16
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	60b9      	str	r1, [r7, #8]
 8010dc2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d107      	bne.n	8010dda <udp_recv+0x22>
 8010dca:	4b08      	ldr	r3, [pc, #32]	@ (8010dec <udp_recv+0x34>)
 8010dcc:	f240 428a 	movw	r2, #1162	@ 0x48a
 8010dd0:	4907      	ldr	r1, [pc, #28]	@ (8010df0 <udp_recv+0x38>)
 8010dd2:	4808      	ldr	r0, [pc, #32]	@ (8010df4 <udp_recv+0x3c>)
 8010dd4:	f004 fb10 	bl	80153f8 <iprintf>
 8010dd8:	e005      	b.n	8010de6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	68ba      	ldr	r2, [r7, #8]
 8010dde:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	61da      	str	r2, [r3, #28]
}
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	080182b8 	.word	0x080182b8
 8010df0:	080185ec 	.word	0x080185ec
 8010df4:	0801830c 	.word	0x0801830c

08010df8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d107      	bne.n	8010e16 <udp_remove+0x1e>
 8010e06:	4b19      	ldr	r3, [pc, #100]	@ (8010e6c <udp_remove+0x74>)
 8010e08:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8010e0c:	4918      	ldr	r1, [pc, #96]	@ (8010e70 <udp_remove+0x78>)
 8010e0e:	4819      	ldr	r0, [pc, #100]	@ (8010e74 <udp_remove+0x7c>)
 8010e10:	f004 faf2 	bl	80153f8 <iprintf>
 8010e14:	e026      	b.n	8010e64 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010e16:	4b18      	ldr	r3, [pc, #96]	@ (8010e78 <udp_remove+0x80>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d105      	bne.n	8010e2c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010e20:	4b15      	ldr	r3, [pc, #84]	@ (8010e78 <udp_remove+0x80>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	4a14      	ldr	r2, [pc, #80]	@ (8010e78 <udp_remove+0x80>)
 8010e28:	6013      	str	r3, [r2, #0]
 8010e2a:	e017      	b.n	8010e5c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010e2c:	4b12      	ldr	r3, [pc, #72]	@ (8010e78 <udp_remove+0x80>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	60fb      	str	r3, [r7, #12]
 8010e32:	e010      	b.n	8010e56 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d009      	beq.n	8010e50 <udp_remove+0x58>
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d104      	bne.n	8010e50 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	68da      	ldr	r2, [r3, #12]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	60da      	str	r2, [r3, #12]
        break;
 8010e4e:	e005      	b.n	8010e5c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	60fb      	str	r3, [r7, #12]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d1eb      	bne.n	8010e34 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010e5c:	6879      	ldr	r1, [r7, #4]
 8010e5e:	2000      	movs	r0, #0
 8010e60:	f7f9 f838 	bl	8009ed4 <memp_free>
}
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	080182b8 	.word	0x080182b8
 8010e70:	08018604 	.word	0x08018604
 8010e74:	0801830c 	.word	0x0801830c
 8010e78:	2000d120 	.word	0x2000d120

08010e7c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010e82:	2000      	movs	r0, #0
 8010e84:	f7f8 ffb6 	bl	8009df4 <memp_malloc>
 8010e88:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d007      	beq.n	8010ea0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010e90:	2220      	movs	r2, #32
 8010e92:	2100      	movs	r1, #0
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f004 fb14 	bl	80154c2 <memset>
    pcb->ttl = UDP_TTL;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	22ff      	movs	r2, #255	@ 0xff
 8010e9e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010ea0:	687b      	ldr	r3, [r7, #4]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
	...

08010eac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b085      	sub	sp, #20
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d01e      	beq.n	8010efa <udp_netif_ip_addr_changed+0x4e>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d01a      	beq.n	8010efa <udp_netif_ip_addr_changed+0x4e>
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d017      	beq.n	8010efa <udp_netif_ip_addr_changed+0x4e>
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d013      	beq.n	8010efa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8010f08 <udp_netif_ip_addr_changed+0x5c>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	60fb      	str	r3, [r7, #12]
 8010ed8:	e00c      	b.n	8010ef4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d103      	bne.n	8010eee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	60fb      	str	r3, [r7, #12]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d1ef      	bne.n	8010eda <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010efa:	bf00      	nop
 8010efc:	3714      	adds	r7, #20
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr
 8010f06:	bf00      	nop
 8010f08:	2000d120 	.word	0x2000d120

08010f0c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010f10:	4b20      	ldr	r3, [pc, #128]	@ (8010f94 <dhcp_inc_pcb_refcount+0x88>)
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d133      	bne.n	8010f80 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010f18:	4b1f      	ldr	r3, [pc, #124]	@ (8010f98 <dhcp_inc_pcb_refcount+0x8c>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d005      	beq.n	8010f2c <dhcp_inc_pcb_refcount+0x20>
 8010f20:	4b1e      	ldr	r3, [pc, #120]	@ (8010f9c <dhcp_inc_pcb_refcount+0x90>)
 8010f22:	22e5      	movs	r2, #229	@ 0xe5
 8010f24:	491e      	ldr	r1, [pc, #120]	@ (8010fa0 <dhcp_inc_pcb_refcount+0x94>)
 8010f26:	481f      	ldr	r0, [pc, #124]	@ (8010fa4 <dhcp_inc_pcb_refcount+0x98>)
 8010f28:	f004 fa66 	bl	80153f8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010f2c:	f7ff ffa6 	bl	8010e7c <udp_new>
 8010f30:	4603      	mov	r3, r0
 8010f32:	4a19      	ldr	r2, [pc, #100]	@ (8010f98 <dhcp_inc_pcb_refcount+0x8c>)
 8010f34:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8010f36:	4b18      	ldr	r3, [pc, #96]	@ (8010f98 <dhcp_inc_pcb_refcount+0x8c>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d102      	bne.n	8010f44 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f42:	e024      	b.n	8010f8e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010f44:	4b14      	ldr	r3, [pc, #80]	@ (8010f98 <dhcp_inc_pcb_refcount+0x8c>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	7a5a      	ldrb	r2, [r3, #9]
 8010f4a:	4b13      	ldr	r3, [pc, #76]	@ (8010f98 <dhcp_inc_pcb_refcount+0x8c>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f042 0220 	orr.w	r2, r2, #32
 8010f52:	b2d2      	uxtb	r2, r2
 8010f54:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010f56:	4b10      	ldr	r3, [pc, #64]	@ (8010f98 <dhcp_inc_pcb_refcount+0x8c>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2244      	movs	r2, #68	@ 0x44
 8010f5c:	4912      	ldr	r1, [pc, #72]	@ (8010fa8 <dhcp_inc_pcb_refcount+0x9c>)
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7ff fe34 	bl	8010bcc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010f64:	4b0c      	ldr	r3, [pc, #48]	@ (8010f98 <dhcp_inc_pcb_refcount+0x8c>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2243      	movs	r2, #67	@ 0x43
 8010f6a:	490f      	ldr	r1, [pc, #60]	@ (8010fa8 <dhcp_inc_pcb_refcount+0x9c>)
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7ff feb5 	bl	8010cdc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010f72:	4b09      	ldr	r3, [pc, #36]	@ (8010f98 <dhcp_inc_pcb_refcount+0x8c>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2200      	movs	r2, #0
 8010f78:	490c      	ldr	r1, [pc, #48]	@ (8010fac <dhcp_inc_pcb_refcount+0xa0>)
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7ff ff1c 	bl	8010db8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010f80:	4b04      	ldr	r3, [pc, #16]	@ (8010f94 <dhcp_inc_pcb_refcount+0x88>)
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	3301      	adds	r3, #1
 8010f86:	b2da      	uxtb	r2, r3
 8010f88:	4b02      	ldr	r3, [pc, #8]	@ (8010f94 <dhcp_inc_pcb_refcount+0x88>)
 8010f8a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010f8c:	2300      	movs	r3, #0
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	2000d150 	.word	0x2000d150
 8010f98:	2000d14c 	.word	0x2000d14c
 8010f9c:	0801861c 	.word	0x0801861c
 8010fa0:	08018654 	.word	0x08018654
 8010fa4:	0801867c 	.word	0x0801867c
 8010fa8:	080191a8 	.word	0x080191a8
 8010fac:	08012839 	.word	0x08012839

08010fb0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8010ff0 <dhcp_dec_pcb_refcount+0x40>)
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d105      	bne.n	8010fc8 <dhcp_dec_pcb_refcount+0x18>
 8010fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8010ff4 <dhcp_dec_pcb_refcount+0x44>)
 8010fbe:	22ff      	movs	r2, #255	@ 0xff
 8010fc0:	490d      	ldr	r1, [pc, #52]	@ (8010ff8 <dhcp_dec_pcb_refcount+0x48>)
 8010fc2:	480e      	ldr	r0, [pc, #56]	@ (8010ffc <dhcp_dec_pcb_refcount+0x4c>)
 8010fc4:	f004 fa18 	bl	80153f8 <iprintf>
  dhcp_pcb_refcount--;
 8010fc8:	4b09      	ldr	r3, [pc, #36]	@ (8010ff0 <dhcp_dec_pcb_refcount+0x40>)
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	b2da      	uxtb	r2, r3
 8010fd0:	4b07      	ldr	r3, [pc, #28]	@ (8010ff0 <dhcp_dec_pcb_refcount+0x40>)
 8010fd2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8010fd4:	4b06      	ldr	r3, [pc, #24]	@ (8010ff0 <dhcp_dec_pcb_refcount+0x40>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d107      	bne.n	8010fec <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8010fdc:	4b08      	ldr	r3, [pc, #32]	@ (8011000 <dhcp_dec_pcb_refcount+0x50>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff ff09 	bl	8010df8 <udp_remove>
    dhcp_pcb = NULL;
 8010fe6:	4b06      	ldr	r3, [pc, #24]	@ (8011000 <dhcp_dec_pcb_refcount+0x50>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	601a      	str	r2, [r3, #0]
  }
}
 8010fec:	bf00      	nop
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	2000d150 	.word	0x2000d150
 8010ff4:	0801861c 	.word	0x0801861c
 8010ff8:	080186a4 	.word	0x080186a4
 8010ffc:	0801867c 	.word	0x0801867c
 8011000:	2000d14c 	.word	0x2000d14c

08011004 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011010:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011012:	210c      	movs	r1, #12
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f001 f851 	bl	80120bc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801101a:	4b06      	ldr	r3, [pc, #24]	@ (8011034 <dhcp_handle_nak+0x30>)
 801101c:	4a05      	ldr	r2, [pc, #20]	@ (8011034 <dhcp_handle_nak+0x30>)
 801101e:	4905      	ldr	r1, [pc, #20]	@ (8011034 <dhcp_handle_nak+0x30>)
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7f9 f8f9 	bl	800a218 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 fc4a 	bl	80118c0 <dhcp_discover>
}
 801102c:	bf00      	nop
 801102e:	3710      	adds	r7, #16
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}
 8011034:	080191a8 	.word	0x080191a8

08011038 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011044:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011046:	2108      	movs	r1, #8
 8011048:	68f8      	ldr	r0, [r7, #12]
 801104a:	f001 f837 	bl	80120bc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	331c      	adds	r3, #28
 8011052:	2200      	movs	r2, #0
 8011054:	4619      	mov	r1, r3
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f002 fb38 	bl	80136cc <etharp_query>
 801105c:	4603      	mov	r3, r0
 801105e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	799b      	ldrb	r3, [r3, #6]
 8011064:	2bff      	cmp	r3, #255	@ 0xff
 8011066:	d005      	beq.n	8011074 <dhcp_check+0x3c>
    dhcp->tries++;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	799b      	ldrb	r3, [r3, #6]
 801106c:	3301      	adds	r3, #1
 801106e:	b2da      	uxtb	r2, r3
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011074:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011078:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801107a:	893b      	ldrh	r3, [r7, #8]
 801107c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011080:	4a06      	ldr	r2, [pc, #24]	@ (801109c <dhcp_check+0x64>)
 8011082:	fb82 1203 	smull	r1, r2, r2, r3
 8011086:	1152      	asrs	r2, r2, #5
 8011088:	17db      	asrs	r3, r3, #31
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	b29a      	uxth	r2, r3
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8011092:	bf00      	nop
 8011094:	3710      	adds	r7, #16
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	10624dd3 	.word	0x10624dd3

080110a0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80110b0:	4b0c      	ldr	r3, [pc, #48]	@ (80110e4 <dhcp_handle_offer+0x44>)
 80110b2:	789b      	ldrb	r3, [r3, #2]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d011      	beq.n	80110dc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2200      	movs	r2, #0
 80110bc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80110be:	4b0a      	ldr	r3, [pc, #40]	@ (80110e8 <dhcp_handle_offer+0x48>)
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7f8 fa38 	bl	8009538 <lwip_htonl>
 80110c8:	4602      	mov	r2, r0
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	691a      	ldr	r2, [r3, #16]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f000 f808 	bl	80110ec <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80110dc:	bf00      	nop
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	2000d144 	.word	0x2000d144
 80110e8:	2000d124 	.word	0x2000d124

080110ec <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80110ec:	b5b0      	push	{r4, r5, r7, lr}
 80110ee:	b08a      	sub	sp, #40	@ 0x28
 80110f0:	af02      	add	r7, sp, #8
 80110f2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d109      	bne.n	801110e <dhcp_select+0x22>
 80110fa:	4b71      	ldr	r3, [pc, #452]	@ (80112c0 <dhcp_select+0x1d4>)
 80110fc:	f240 1277 	movw	r2, #375	@ 0x177
 8011100:	4970      	ldr	r1, [pc, #448]	@ (80112c4 <dhcp_select+0x1d8>)
 8011102:	4871      	ldr	r0, [pc, #452]	@ (80112c8 <dhcp_select+0x1dc>)
 8011104:	f004 f978 	bl	80153f8 <iprintf>
 8011108:	f06f 030f 	mvn.w	r3, #15
 801110c:	e0d3      	b.n	80112b6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011112:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d109      	bne.n	801112e <dhcp_select+0x42>
 801111a:	4b69      	ldr	r3, [pc, #420]	@ (80112c0 <dhcp_select+0x1d4>)
 801111c:	f240 1279 	movw	r2, #377	@ 0x179
 8011120:	496a      	ldr	r1, [pc, #424]	@ (80112cc <dhcp_select+0x1e0>)
 8011122:	4869      	ldr	r0, [pc, #420]	@ (80112c8 <dhcp_select+0x1dc>)
 8011124:	f004 f968 	bl	80153f8 <iprintf>
 8011128:	f06f 0305 	mvn.w	r3, #5
 801112c:	e0c3      	b.n	80112b6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801112e:	2101      	movs	r1, #1
 8011130:	69b8      	ldr	r0, [r7, #24]
 8011132:	f000 ffc3 	bl	80120bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011136:	f107 030c 	add.w	r3, r7, #12
 801113a:	2203      	movs	r2, #3
 801113c:	69b9      	ldr	r1, [r7, #24]
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f001 fc48 	bl	80129d4 <dhcp_create_msg>
 8011144:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	2b00      	cmp	r3, #0
 801114a:	f000 8085 	beq.w	8011258 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011154:	89b8      	ldrh	r0, [r7, #12]
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801115c:	2302      	movs	r3, #2
 801115e:	2239      	movs	r2, #57	@ 0x39
 8011160:	f000 ffc6 	bl	80120f0 <dhcp_option>
 8011164:	4603      	mov	r3, r0
 8011166:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011168:	89b8      	ldrh	r0, [r7, #12]
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011174:	461a      	mov	r2, r3
 8011176:	f001 f815 	bl	80121a4 <dhcp_option_short>
 801117a:	4603      	mov	r3, r0
 801117c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801117e:	89b8      	ldrh	r0, [r7, #12]
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011186:	2304      	movs	r3, #4
 8011188:	2232      	movs	r2, #50	@ 0x32
 801118a:	f000 ffb1 	bl	80120f0 <dhcp_option>
 801118e:	4603      	mov	r3, r0
 8011190:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011192:	89bc      	ldrh	r4, [r7, #12]
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801119a:	69bb      	ldr	r3, [r7, #24]
 801119c:	69db      	ldr	r3, [r3, #28]
 801119e:	4618      	mov	r0, r3
 80111a0:	f7f8 f9ca 	bl	8009538 <lwip_htonl>
 80111a4:	4603      	mov	r3, r0
 80111a6:	461a      	mov	r2, r3
 80111a8:	4629      	mov	r1, r5
 80111aa:	4620      	mov	r0, r4
 80111ac:	f001 f82c 	bl	8012208 <dhcp_option_long>
 80111b0:	4603      	mov	r3, r0
 80111b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80111b4:	89b8      	ldrh	r0, [r7, #12]
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80111bc:	2304      	movs	r3, #4
 80111be:	2236      	movs	r2, #54	@ 0x36
 80111c0:	f000 ff96 	bl	80120f0 <dhcp_option>
 80111c4:	4603      	mov	r3, r0
 80111c6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80111c8:	89bc      	ldrh	r4, [r7, #12]
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	699b      	ldr	r3, [r3, #24]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7f8 f9af 	bl	8009538 <lwip_htonl>
 80111da:	4603      	mov	r3, r0
 80111dc:	461a      	mov	r2, r3
 80111de:	4629      	mov	r1, r5
 80111e0:	4620      	mov	r0, r4
 80111e2:	f001 f811 	bl	8012208 <dhcp_option_long>
 80111e6:	4603      	mov	r3, r0
 80111e8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80111ea:	89b8      	ldrh	r0, [r7, #12]
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80111f2:	2303      	movs	r3, #3
 80111f4:	2237      	movs	r2, #55	@ 0x37
 80111f6:	f000 ff7b 	bl	80120f0 <dhcp_option>
 80111fa:	4603      	mov	r3, r0
 80111fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80111fe:	2300      	movs	r3, #0
 8011200:	77bb      	strb	r3, [r7, #30]
 8011202:	e00e      	b.n	8011222 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011204:	89b8      	ldrh	r0, [r7, #12]
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801120c:	7fbb      	ldrb	r3, [r7, #30]
 801120e:	4a30      	ldr	r2, [pc, #192]	@ (80112d0 <dhcp_select+0x1e4>)
 8011210:	5cd3      	ldrb	r3, [r2, r3]
 8011212:	461a      	mov	r2, r3
 8011214:	f000 ffa0 	bl	8012158 <dhcp_option_byte>
 8011218:	4603      	mov	r3, r0
 801121a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801121c:	7fbb      	ldrb	r3, [r7, #30]
 801121e:	3301      	adds	r3, #1
 8011220:	77bb      	strb	r3, [r7, #30]
 8011222:	7fbb      	ldrb	r3, [r7, #30]
 8011224:	2b02      	cmp	r3, #2
 8011226:	d9ed      	bls.n	8011204 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011228:	89b8      	ldrh	r0, [r7, #12]
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	33f0      	adds	r3, #240	@ 0xf0
 801122e:	697a      	ldr	r2, [r7, #20]
 8011230:	4619      	mov	r1, r3
 8011232:	f001 fca5 	bl	8012b80 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011236:	4b27      	ldr	r3, [pc, #156]	@ (80112d4 <dhcp_select+0x1e8>)
 8011238:	6818      	ldr	r0, [r3, #0]
 801123a:	4b27      	ldr	r3, [pc, #156]	@ (80112d8 <dhcp_select+0x1ec>)
 801123c:	9301      	str	r3, [sp, #4]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	9300      	str	r3, [sp, #0]
 8011242:	2343      	movs	r3, #67	@ 0x43
 8011244:	4a25      	ldr	r2, [pc, #148]	@ (80112dc <dhcp_select+0x1f0>)
 8011246:	6979      	ldr	r1, [r7, #20]
 8011248:	f7ff fbda 	bl	8010a00 <udp_sendto_if_src>
 801124c:	4603      	mov	r3, r0
 801124e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011250:	6978      	ldr	r0, [r7, #20]
 8011252:	f7f9 fca1 	bl	800ab98 <pbuf_free>
 8011256:	e001      	b.n	801125c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011258:	23ff      	movs	r3, #255	@ 0xff
 801125a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	799b      	ldrb	r3, [r3, #6]
 8011260:	2bff      	cmp	r3, #255	@ 0xff
 8011262:	d005      	beq.n	8011270 <dhcp_select+0x184>
    dhcp->tries++;
 8011264:	69bb      	ldr	r3, [r7, #24]
 8011266:	799b      	ldrb	r3, [r3, #6]
 8011268:	3301      	adds	r3, #1
 801126a:	b2da      	uxtb	r2, r3
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	799b      	ldrb	r3, [r3, #6]
 8011274:	2b05      	cmp	r3, #5
 8011276:	d80d      	bhi.n	8011294 <dhcp_select+0x1a8>
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	799b      	ldrb	r3, [r3, #6]
 801127c:	461a      	mov	r2, r3
 801127e:	2301      	movs	r3, #1
 8011280:	4093      	lsls	r3, r2
 8011282:	b29b      	uxth	r3, r3
 8011284:	461a      	mov	r2, r3
 8011286:	0152      	lsls	r2, r2, #5
 8011288:	1ad2      	subs	r2, r2, r3
 801128a:	0092      	lsls	r2, r2, #2
 801128c:	4413      	add	r3, r2
 801128e:	00db      	lsls	r3, r3, #3
 8011290:	b29b      	uxth	r3, r3
 8011292:	e001      	b.n	8011298 <dhcp_select+0x1ac>
 8011294:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8011298:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801129a:	89fb      	ldrh	r3, [r7, #14]
 801129c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80112a0:	4a0f      	ldr	r2, [pc, #60]	@ (80112e0 <dhcp_select+0x1f4>)
 80112a2:	fb82 1203 	smull	r1, r2, r2, r3
 80112a6:	1152      	asrs	r2, r2, #5
 80112a8:	17db      	asrs	r3, r3, #31
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80112b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3720      	adds	r7, #32
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bdb0      	pop	{r4, r5, r7, pc}
 80112be:	bf00      	nop
 80112c0:	0801861c 	.word	0x0801861c
 80112c4:	080186c8 	.word	0x080186c8
 80112c8:	0801867c 	.word	0x0801867c
 80112cc:	080186e4 	.word	0x080186e4
 80112d0:	20000030 	.word	0x20000030
 80112d4:	2000d14c 	.word	0x2000d14c
 80112d8:	080191a8 	.word	0x080191a8
 80112dc:	080191ac 	.word	0x080191ac
 80112e0:	10624dd3 	.word	0x10624dd3

080112e4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80112ea:	4b27      	ldr	r3, [pc, #156]	@ (8011388 <dhcp_coarse_tmr+0xa4>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	607b      	str	r3, [r7, #4]
 80112f0:	e042      	b.n	8011378 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112f6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d039      	beq.n	8011372 <dhcp_coarse_tmr+0x8e>
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	795b      	ldrb	r3, [r3, #5]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d035      	beq.n	8011372 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	8a9b      	ldrh	r3, [r3, #20]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d012      	beq.n	8011334 <dhcp_coarse_tmr+0x50>
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	8a5b      	ldrh	r3, [r3, #18]
 8011312:	3301      	adds	r3, #1
 8011314:	b29a      	uxth	r2, r3
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	825a      	strh	r2, [r3, #18]
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	8a5a      	ldrh	r2, [r3, #18]
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	8a9b      	ldrh	r3, [r3, #20]
 8011322:	429a      	cmp	r2, r3
 8011324:	d106      	bne.n	8011334 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 fe2e 	bl	8011f88 <dhcp_release_and_stop>
        dhcp_start(netif);
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f000 f96b 	bl	8011608 <dhcp_start>
 8011332:	e01e      	b.n	8011372 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	8a1b      	ldrh	r3, [r3, #16]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d00b      	beq.n	8011354 <dhcp_coarse_tmr+0x70>
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	8a1b      	ldrh	r3, [r3, #16]
 8011340:	1e5a      	subs	r2, r3, #1
 8011342:	b291      	uxth	r1, r2
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	8211      	strh	r1, [r2, #16]
 8011348:	2b01      	cmp	r3, #1
 801134a:	d103      	bne.n	8011354 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f000 f8c7 	bl	80114e0 <dhcp_t2_timeout>
 8011352:	e00e      	b.n	8011372 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	89db      	ldrh	r3, [r3, #14]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d00a      	beq.n	8011372 <dhcp_coarse_tmr+0x8e>
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	89db      	ldrh	r3, [r3, #14]
 8011360:	1e5a      	subs	r2, r3, #1
 8011362:	b291      	uxth	r1, r2
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	81d1      	strh	r1, [r2, #14]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d102      	bne.n	8011372 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f000 f888 	bl	8011482 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	607b      	str	r3, [r7, #4]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d1b9      	bne.n	80112f2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801137e:	bf00      	nop
 8011380:	bf00      	nop
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	2000d0b8 	.word	0x2000d0b8

0801138c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8011392:	4b16      	ldr	r3, [pc, #88]	@ (80113ec <dhcp_fine_tmr+0x60>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	607b      	str	r3, [r7, #4]
 8011398:	e020      	b.n	80113dc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801139e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d017      	beq.n	80113d6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	891b      	ldrh	r3, [r3, #8]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d906      	bls.n	80113bc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	891b      	ldrh	r3, [r3, #8]
 80113b2:	3b01      	subs	r3, #1
 80113b4:	b29a      	uxth	r2, r3
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	811a      	strh	r2, [r3, #8]
 80113ba:	e00c      	b.n	80113d6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	891b      	ldrh	r3, [r3, #8]
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d108      	bne.n	80113d6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	891b      	ldrh	r3, [r3, #8]
 80113c8:	3b01      	subs	r3, #1
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f000 f80d 	bl	80113f0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	607b      	str	r3, [r7, #4]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1db      	bne.n	801139a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80113e2:	bf00      	nop
 80113e4:	bf00      	nop
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	2000d0b8 	.word	0x2000d0b8

080113f0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	795b      	ldrb	r3, [r3, #5]
 8011402:	2b0c      	cmp	r3, #12
 8011404:	d003      	beq.n	801140e <dhcp_timeout+0x1e>
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	795b      	ldrb	r3, [r3, #5]
 801140a:	2b06      	cmp	r3, #6
 801140c:	d103      	bne.n	8011416 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 fa56 	bl	80118c0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011414:	e031      	b.n	801147a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	795b      	ldrb	r3, [r3, #5]
 801141a:	2b01      	cmp	r3, #1
 801141c:	d10e      	bne.n	801143c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	799b      	ldrb	r3, [r3, #6]
 8011422:	2b05      	cmp	r3, #5
 8011424:	d803      	bhi.n	801142e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f7ff fe60 	bl	80110ec <dhcp_select>
}
 801142c:	e025      	b.n	801147a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 fdaa 	bl	8011f88 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f000 f8e7 	bl	8011608 <dhcp_start>
}
 801143a:	e01e      	b.n	801147a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	795b      	ldrb	r3, [r3, #5]
 8011440:	2b08      	cmp	r3, #8
 8011442:	d10b      	bne.n	801145c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	799b      	ldrb	r3, [r3, #6]
 8011448:	2b01      	cmp	r3, #1
 801144a:	d803      	bhi.n	8011454 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f7ff fdf3 	bl	8011038 <dhcp_check>
}
 8011452:	e012      	b.n	801147a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 fad5 	bl	8011a04 <dhcp_bind>
}
 801145a:	e00e      	b.n	801147a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	795b      	ldrb	r3, [r3, #5]
 8011460:	2b03      	cmp	r3, #3
 8011462:	d10a      	bne.n	801147a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	799b      	ldrb	r3, [r3, #6]
 8011468:	2b01      	cmp	r3, #1
 801146a:	d803      	bhi.n	8011474 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 fcd7 	bl	8011e20 <dhcp_reboot>
}
 8011472:	e002      	b.n	801147a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fa23 	bl	80118c0 <dhcp_discover>
}
 801147a:	bf00      	nop
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b084      	sub	sp, #16
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801148e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	795b      	ldrb	r3, [r3, #5]
 8011494:	2b01      	cmp	r3, #1
 8011496:	d007      	beq.n	80114a8 <dhcp_t1_timeout+0x26>
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	795b      	ldrb	r3, [r3, #5]
 801149c:	2b0a      	cmp	r3, #10
 801149e:	d003      	beq.n	80114a8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80114a4:	2b05      	cmp	r3, #5
 80114a6:	d117      	bne.n	80114d8 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f000 fb85 	bl	8011bb8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	899b      	ldrh	r3, [r3, #12]
 80114b2:	461a      	mov	r2, r3
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	8a5b      	ldrh	r3, [r3, #18]
 80114b8:	1ad3      	subs	r3, r2, r3
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	dd0c      	ble.n	80114d8 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	899b      	ldrh	r3, [r3, #12]
 80114c2:	461a      	mov	r2, r3
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	8a5b      	ldrh	r3, [r3, #18]
 80114c8:	1ad3      	subs	r3, r2, r3
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	da00      	bge.n	80114d0 <dhcp_t1_timeout+0x4e>
 80114ce:	3301      	adds	r3, #1
 80114d0:	105b      	asrs	r3, r3, #1
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80114d8:	bf00      	nop
 80114da:	3710      	adds	r7, #16
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114ec:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	795b      	ldrb	r3, [r3, #5]
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d00b      	beq.n	801150e <dhcp_t2_timeout+0x2e>
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	795b      	ldrb	r3, [r3, #5]
 80114fa:	2b0a      	cmp	r3, #10
 80114fc:	d007      	beq.n	801150e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011502:	2b05      	cmp	r3, #5
 8011504:	d003      	beq.n	801150e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	795b      	ldrb	r3, [r3, #5]
 801150a:	2b04      	cmp	r3, #4
 801150c:	d117      	bne.n	801153e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f000 fbec 	bl	8011cec <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	8a9b      	ldrh	r3, [r3, #20]
 8011518:	461a      	mov	r2, r3
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	8a5b      	ldrh	r3, [r3, #18]
 801151e:	1ad3      	subs	r3, r2, r3
 8011520:	2b01      	cmp	r3, #1
 8011522:	dd0c      	ble.n	801153e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	8a9b      	ldrh	r3, [r3, #20]
 8011528:	461a      	mov	r2, r3
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	8a5b      	ldrh	r3, [r3, #18]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	2b00      	cmp	r3, #0
 8011532:	da00      	bge.n	8011536 <dhcp_t2_timeout+0x56>
 8011534:	3301      	adds	r3, #1
 8011536:	105b      	asrs	r3, r3, #1
 8011538:	b29a      	uxth	r2, r3
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801153e:	bf00      	nop
 8011540:	3710      	adds	r7, #16
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
	...

08011548 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b084      	sub	sp, #16
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011556:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2200      	movs	r2, #0
 801155c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2200      	movs	r2, #0
 8011562:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011564:	4b26      	ldr	r3, [pc, #152]	@ (8011600 <dhcp_handle_ack+0xb8>)
 8011566:	78db      	ldrb	r3, [r3, #3]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d003      	beq.n	8011574 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801156c:	4b25      	ldr	r3, [pc, #148]	@ (8011604 <dhcp_handle_ack+0xbc>)
 801156e:	68da      	ldr	r2, [r3, #12]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011574:	4b22      	ldr	r3, [pc, #136]	@ (8011600 <dhcp_handle_ack+0xb8>)
 8011576:	791b      	ldrb	r3, [r3, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d004      	beq.n	8011586 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801157c:	4b21      	ldr	r3, [pc, #132]	@ (8011604 <dhcp_handle_ack+0xbc>)
 801157e:	691a      	ldr	r2, [r3, #16]
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011584:	e004      	b.n	8011590 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801158a:	085a      	lsrs	r2, r3, #1
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011590:	4b1b      	ldr	r3, [pc, #108]	@ (8011600 <dhcp_handle_ack+0xb8>)
 8011592:	795b      	ldrb	r3, [r3, #5]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d004      	beq.n	80115a2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011598:	4b1a      	ldr	r3, [pc, #104]	@ (8011604 <dhcp_handle_ack+0xbc>)
 801159a:	695a      	ldr	r2, [r3, #20]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	631a      	str	r2, [r3, #48]	@ 0x30
 80115a0:	e007      	b.n	80115b2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80115a6:	4613      	mov	r3, r2
 80115a8:	00db      	lsls	r3, r3, #3
 80115aa:	1a9b      	subs	r3, r3, r2
 80115ac:	08da      	lsrs	r2, r3, #3
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	691a      	ldr	r2, [r3, #16]
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80115ba:	4b11      	ldr	r3, [pc, #68]	@ (8011600 <dhcp_handle_ack+0xb8>)
 80115bc:	799b      	ldrb	r3, [r3, #6]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00b      	beq.n	80115da <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80115c2:	4b10      	ldr	r3, [pc, #64]	@ (8011604 <dhcp_handle_ack+0xbc>)
 80115c4:	699b      	ldr	r3, [r3, #24]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7f7 ffb6 	bl	8009538 <lwip_htonl>
 80115cc:	4602      	mov	r2, r0
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2201      	movs	r2, #1
 80115d6:	71da      	strb	r2, [r3, #7]
 80115d8:	e002      	b.n	80115e0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2200      	movs	r2, #0
 80115de:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80115e0:	4b07      	ldr	r3, [pc, #28]	@ (8011600 <dhcp_handle_ack+0xb8>)
 80115e2:	79db      	ldrb	r3, [r3, #7]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d007      	beq.n	80115f8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80115e8:	4b06      	ldr	r3, [pc, #24]	@ (8011604 <dhcp_handle_ack+0xbc>)
 80115ea:	69db      	ldr	r3, [r3, #28]
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7f7 ffa3 	bl	8009538 <lwip_htonl>
 80115f2:	4602      	mov	r2, r0
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80115f8:	bf00      	nop
 80115fa:	3710      	adds	r7, #16
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	2000d144 	.word	0x2000d144
 8011604:	2000d124 	.word	0x2000d124

08011608 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d109      	bne.n	801162a <dhcp_start+0x22>
 8011616:	4b37      	ldr	r3, [pc, #220]	@ (80116f4 <dhcp_start+0xec>)
 8011618:	f240 22e7 	movw	r2, #743	@ 0x2e7
 801161c:	4936      	ldr	r1, [pc, #216]	@ (80116f8 <dhcp_start+0xf0>)
 801161e:	4837      	ldr	r0, [pc, #220]	@ (80116fc <dhcp_start+0xf4>)
 8011620:	f003 feea 	bl	80153f8 <iprintf>
 8011624:	f06f 030f 	mvn.w	r3, #15
 8011628:	e060      	b.n	80116ec <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011630:	f003 0301 	and.w	r3, r3, #1
 8011634:	2b00      	cmp	r3, #0
 8011636:	d109      	bne.n	801164c <dhcp_start+0x44>
 8011638:	4b2e      	ldr	r3, [pc, #184]	@ (80116f4 <dhcp_start+0xec>)
 801163a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801163e:	4930      	ldr	r1, [pc, #192]	@ (8011700 <dhcp_start+0xf8>)
 8011640:	482e      	ldr	r0, [pc, #184]	@ (80116fc <dhcp_start+0xf4>)
 8011642:	f003 fed9 	bl	80153f8 <iprintf>
 8011646:	f06f 030f 	mvn.w	r3, #15
 801164a:	e04f      	b.n	80116ec <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011650:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011656:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801165a:	d202      	bcs.n	8011662 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801165c:	f04f 33ff 	mov.w	r3, #4294967295
 8011660:	e044      	b.n	80116ec <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d10d      	bne.n	8011684 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011668:	2034      	movs	r0, #52	@ 0x34
 801166a:	f7f8 fa33 	bl	8009ad4 <mem_malloc>
 801166e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d102      	bne.n	801167c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8011676:	f04f 33ff 	mov.w	r3, #4294967295
 801167a:	e037      	b.n	80116ec <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	68fa      	ldr	r2, [r7, #12]
 8011680:	625a      	str	r2, [r3, #36]	@ 0x24
 8011682:	e005      	b.n	8011690 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	791b      	ldrb	r3, [r3, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d001      	beq.n	8011690 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801168c:	f7ff fc90 	bl	8010fb0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011690:	2234      	movs	r2, #52	@ 0x34
 8011692:	2100      	movs	r1, #0
 8011694:	68f8      	ldr	r0, [r7, #12]
 8011696:	f003 ff14 	bl	80154c2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801169a:	f7ff fc37 	bl	8010f0c <dhcp_inc_pcb_refcount>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d002      	beq.n	80116aa <dhcp_start+0xa2>
    return ERR_MEM;
 80116a4:	f04f 33ff 	mov.w	r3, #4294967295
 80116a8:	e020      	b.n	80116ec <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2201      	movs	r2, #1
 80116ae:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80116b6:	f003 0304 	and.w	r3, r3, #4
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d105      	bne.n	80116ca <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80116be:	2102      	movs	r1, #2
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f000 fcfb 	bl	80120bc <dhcp_set_state>
    return ERR_OK;
 80116c6:	2300      	movs	r3, #0
 80116c8:	e010      	b.n	80116ec <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 f8f8 	bl	80118c0 <dhcp_discover>
 80116d0:	4603      	mov	r3, r0
 80116d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80116d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d005      	beq.n	80116e8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f000 fc53 	bl	8011f88 <dhcp_release_and_stop>
    return ERR_MEM;
 80116e2:	f04f 33ff 	mov.w	r3, #4294967295
 80116e6:	e001      	b.n	80116ec <dhcp_start+0xe4>
  }
  return result;
 80116e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3710      	adds	r7, #16
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	0801861c 	.word	0x0801861c
 80116f8:	08018700 	.word	0x08018700
 80116fc:	0801867c 	.word	0x0801867c
 8011700:	08018744 	.word	0x08018744

08011704 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011710:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d025      	beq.n	8011764 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	795b      	ldrb	r3, [r3, #5]
 801171c:	2b0a      	cmp	r3, #10
 801171e:	d008      	beq.n	8011732 <dhcp_network_changed+0x2e>
 8011720:	2b0a      	cmp	r3, #10
 8011722:	dc0d      	bgt.n	8011740 <dhcp_network_changed+0x3c>
 8011724:	2b00      	cmp	r3, #0
 8011726:	d01f      	beq.n	8011768 <dhcp_network_changed+0x64>
 8011728:	2b00      	cmp	r3, #0
 801172a:	db09      	blt.n	8011740 <dhcp_network_changed+0x3c>
 801172c:	3b03      	subs	r3, #3
 801172e:	2b02      	cmp	r3, #2
 8011730:	d806      	bhi.n	8011740 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2200      	movs	r2, #0
 8011736:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 fb71 	bl	8011e20 <dhcp_reboot>
      break;
 801173e:	e014      	b.n	801176a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	795b      	ldrb	r3, [r3, #5]
 8011744:	2b0c      	cmp	r3, #12
 8011746:	d906      	bls.n	8011756 <dhcp_network_changed+0x52>
 8011748:	4b09      	ldr	r3, [pc, #36]	@ (8011770 <dhcp_network_changed+0x6c>)
 801174a:	f240 326d 	movw	r2, #877	@ 0x36d
 801174e:	4909      	ldr	r1, [pc, #36]	@ (8011774 <dhcp_network_changed+0x70>)
 8011750:	4809      	ldr	r0, [pc, #36]	@ (8011778 <dhcp_network_changed+0x74>)
 8011752:	f003 fe51 	bl	80153f8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2200      	movs	r2, #0
 801175a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 f8af 	bl	80118c0 <dhcp_discover>
      break;
 8011762:	e002      	b.n	801176a <dhcp_network_changed+0x66>
    return;
 8011764:	bf00      	nop
 8011766:	e000      	b.n	801176a <dhcp_network_changed+0x66>
      break;
 8011768:	bf00      	nop
  }
}
 801176a:	3710      	adds	r7, #16
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	0801861c 	.word	0x0801861c
 8011774:	08018768 	.word	0x08018768
 8011778:	0801867c 	.word	0x0801867c

0801177c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d107      	bne.n	801179c <dhcp_arp_reply+0x20>
 801178c:	4b0e      	ldr	r3, [pc, #56]	@ (80117c8 <dhcp_arp_reply+0x4c>)
 801178e:	f240 328b 	movw	r2, #907	@ 0x38b
 8011792:	490e      	ldr	r1, [pc, #56]	@ (80117cc <dhcp_arp_reply+0x50>)
 8011794:	480e      	ldr	r0, [pc, #56]	@ (80117d0 <dhcp_arp_reply+0x54>)
 8011796:	f003 fe2f 	bl	80153f8 <iprintf>
 801179a:	e012      	b.n	80117c2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117a0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d00c      	beq.n	80117c2 <dhcp_arp_reply+0x46>
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	795b      	ldrb	r3, [r3, #5]
 80117ac:	2b08      	cmp	r3, #8
 80117ae:	d108      	bne.n	80117c2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	69db      	ldr	r3, [r3, #28]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d102      	bne.n	80117c2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f000 f809 	bl	80117d4 <dhcp_decline>
    }
  }
}
 80117c2:	3710      	adds	r7, #16
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	0801861c 	.word	0x0801861c
 80117cc:	08018700 	.word	0x08018700
 80117d0:	0801867c 	.word	0x0801867c

080117d4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80117d4:	b5b0      	push	{r4, r5, r7, lr}
 80117d6:	b08a      	sub	sp, #40	@ 0x28
 80117d8:	af02      	add	r7, sp, #8
 80117da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117e0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80117e2:	210c      	movs	r1, #12
 80117e4:	69b8      	ldr	r0, [r7, #24]
 80117e6:	f000 fc69 	bl	80120bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80117ea:	f107 030c 	add.w	r3, r7, #12
 80117ee:	2204      	movs	r2, #4
 80117f0:	69b9      	ldr	r1, [r7, #24]
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f001 f8ee 	bl	80129d4 <dhcp_create_msg>
 80117f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d035      	beq.n	801186c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011806:	89b8      	ldrh	r0, [r7, #12]
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801180e:	2304      	movs	r3, #4
 8011810:	2232      	movs	r2, #50	@ 0x32
 8011812:	f000 fc6d 	bl	80120f0 <dhcp_option>
 8011816:	4603      	mov	r3, r0
 8011818:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801181a:	89bc      	ldrh	r4, [r7, #12]
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	69db      	ldr	r3, [r3, #28]
 8011826:	4618      	mov	r0, r3
 8011828:	f7f7 fe86 	bl	8009538 <lwip_htonl>
 801182c:	4603      	mov	r3, r0
 801182e:	461a      	mov	r2, r3
 8011830:	4629      	mov	r1, r5
 8011832:	4620      	mov	r0, r4
 8011834:	f000 fce8 	bl	8012208 <dhcp_option_long>
 8011838:	4603      	mov	r3, r0
 801183a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801183c:	89b8      	ldrh	r0, [r7, #12]
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	33f0      	adds	r3, #240	@ 0xf0
 8011842:	697a      	ldr	r2, [r7, #20]
 8011844:	4619      	mov	r1, r3
 8011846:	f001 f99b 	bl	8012b80 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801184a:	4b19      	ldr	r3, [pc, #100]	@ (80118b0 <dhcp_decline+0xdc>)
 801184c:	6818      	ldr	r0, [r3, #0]
 801184e:	4b19      	ldr	r3, [pc, #100]	@ (80118b4 <dhcp_decline+0xe0>)
 8011850:	9301      	str	r3, [sp, #4]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	9300      	str	r3, [sp, #0]
 8011856:	2343      	movs	r3, #67	@ 0x43
 8011858:	4a17      	ldr	r2, [pc, #92]	@ (80118b8 <dhcp_decline+0xe4>)
 801185a:	6979      	ldr	r1, [r7, #20]
 801185c:	f7ff f8d0 	bl	8010a00 <udp_sendto_if_src>
 8011860:	4603      	mov	r3, r0
 8011862:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011864:	6978      	ldr	r0, [r7, #20]
 8011866:	f7f9 f997 	bl	800ab98 <pbuf_free>
 801186a:	e001      	b.n	8011870 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801186c:	23ff      	movs	r3, #255	@ 0xff
 801186e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	799b      	ldrb	r3, [r3, #6]
 8011874:	2bff      	cmp	r3, #255	@ 0xff
 8011876:	d005      	beq.n	8011884 <dhcp_decline+0xb0>
    dhcp->tries++;
 8011878:	69bb      	ldr	r3, [r7, #24]
 801187a:	799b      	ldrb	r3, [r3, #6]
 801187c:	3301      	adds	r3, #1
 801187e:	b2da      	uxtb	r2, r3
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8011884:	f242 7310 	movw	r3, #10000	@ 0x2710
 8011888:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801188a:	89fb      	ldrh	r3, [r7, #14]
 801188c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011890:	4a0a      	ldr	r2, [pc, #40]	@ (80118bc <dhcp_decline+0xe8>)
 8011892:	fb82 1203 	smull	r1, r2, r2, r3
 8011896:	1152      	asrs	r2, r2, #5
 8011898:	17db      	asrs	r3, r3, #31
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	b29a      	uxth	r2, r3
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80118a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3720      	adds	r7, #32
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bdb0      	pop	{r4, r5, r7, pc}
 80118ae:	bf00      	nop
 80118b0:	2000d14c 	.word	0x2000d14c
 80118b4:	080191a8 	.word	0x080191a8
 80118b8:	080191ac 	.word	0x080191ac
 80118bc:	10624dd3 	.word	0x10624dd3

080118c0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b08a      	sub	sp, #40	@ 0x28
 80118c4:	af02      	add	r7, sp, #8
 80118c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118cc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80118ce:	2300      	movs	r3, #0
 80118d0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	2200      	movs	r2, #0
 80118d6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80118d8:	2106      	movs	r1, #6
 80118da:	69b8      	ldr	r0, [r7, #24]
 80118dc:	f000 fbee 	bl	80120bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80118e0:	f107 0308 	add.w	r3, r7, #8
 80118e4:	2201      	movs	r2, #1
 80118e6:	69b9      	ldr	r1, [r7, #24]
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f001 f873 	bl	80129d4 <dhcp_create_msg>
 80118ee:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d04b      	beq.n	801198e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80118fc:	8938      	ldrh	r0, [r7, #8]
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011904:	2302      	movs	r3, #2
 8011906:	2239      	movs	r2, #57	@ 0x39
 8011908:	f000 fbf2 	bl	80120f0 <dhcp_option>
 801190c:	4603      	mov	r3, r0
 801190e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011910:	8938      	ldrh	r0, [r7, #8]
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801191c:	461a      	mov	r2, r3
 801191e:	f000 fc41 	bl	80121a4 <dhcp_option_short>
 8011922:	4603      	mov	r3, r0
 8011924:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011926:	8938      	ldrh	r0, [r7, #8]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801192e:	2303      	movs	r3, #3
 8011930:	2237      	movs	r2, #55	@ 0x37
 8011932:	f000 fbdd 	bl	80120f0 <dhcp_option>
 8011936:	4603      	mov	r3, r0
 8011938:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801193a:	2300      	movs	r3, #0
 801193c:	77fb      	strb	r3, [r7, #31]
 801193e:	e00e      	b.n	801195e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011940:	8938      	ldrh	r0, [r7, #8]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011948:	7ffb      	ldrb	r3, [r7, #31]
 801194a:	4a29      	ldr	r2, [pc, #164]	@ (80119f0 <dhcp_discover+0x130>)
 801194c:	5cd3      	ldrb	r3, [r2, r3]
 801194e:	461a      	mov	r2, r3
 8011950:	f000 fc02 	bl	8012158 <dhcp_option_byte>
 8011954:	4603      	mov	r3, r0
 8011956:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011958:	7ffb      	ldrb	r3, [r7, #31]
 801195a:	3301      	adds	r3, #1
 801195c:	77fb      	strb	r3, [r7, #31]
 801195e:	7ffb      	ldrb	r3, [r7, #31]
 8011960:	2b02      	cmp	r3, #2
 8011962:	d9ed      	bls.n	8011940 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011964:	8938      	ldrh	r0, [r7, #8]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	33f0      	adds	r3, #240	@ 0xf0
 801196a:	693a      	ldr	r2, [r7, #16]
 801196c:	4619      	mov	r1, r3
 801196e:	f001 f907 	bl	8012b80 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011972:	4b20      	ldr	r3, [pc, #128]	@ (80119f4 <dhcp_discover+0x134>)
 8011974:	6818      	ldr	r0, [r3, #0]
 8011976:	4b20      	ldr	r3, [pc, #128]	@ (80119f8 <dhcp_discover+0x138>)
 8011978:	9301      	str	r3, [sp, #4]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	9300      	str	r3, [sp, #0]
 801197e:	2343      	movs	r3, #67	@ 0x43
 8011980:	4a1e      	ldr	r2, [pc, #120]	@ (80119fc <dhcp_discover+0x13c>)
 8011982:	6939      	ldr	r1, [r7, #16]
 8011984:	f7ff f83c 	bl	8010a00 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8011988:	6938      	ldr	r0, [r7, #16]
 801198a:	f7f9 f905 	bl	800ab98 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801198e:	69bb      	ldr	r3, [r7, #24]
 8011990:	799b      	ldrb	r3, [r3, #6]
 8011992:	2bff      	cmp	r3, #255	@ 0xff
 8011994:	d005      	beq.n	80119a2 <dhcp_discover+0xe2>
    dhcp->tries++;
 8011996:	69bb      	ldr	r3, [r7, #24]
 8011998:	799b      	ldrb	r3, [r3, #6]
 801199a:	3301      	adds	r3, #1
 801199c:	b2da      	uxtb	r2, r3
 801199e:	69bb      	ldr	r3, [r7, #24]
 80119a0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	799b      	ldrb	r3, [r3, #6]
 80119a6:	2b05      	cmp	r3, #5
 80119a8:	d80d      	bhi.n	80119c6 <dhcp_discover+0x106>
 80119aa:	69bb      	ldr	r3, [r7, #24]
 80119ac:	799b      	ldrb	r3, [r3, #6]
 80119ae:	461a      	mov	r2, r3
 80119b0:	2301      	movs	r3, #1
 80119b2:	4093      	lsls	r3, r2
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	461a      	mov	r2, r3
 80119b8:	0152      	lsls	r2, r2, #5
 80119ba:	1ad2      	subs	r2, r2, r3
 80119bc:	0092      	lsls	r2, r2, #2
 80119be:	4413      	add	r3, r2
 80119c0:	00db      	lsls	r3, r3, #3
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	e001      	b.n	80119ca <dhcp_discover+0x10a>
 80119c6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80119ca:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80119cc:	897b      	ldrh	r3, [r7, #10]
 80119ce:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80119d2:	4a0b      	ldr	r2, [pc, #44]	@ (8011a00 <dhcp_discover+0x140>)
 80119d4:	fb82 1203 	smull	r1, r2, r2, r3
 80119d8:	1152      	asrs	r2, r2, #5
 80119da:	17db      	asrs	r3, r3, #31
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	b29a      	uxth	r2, r3
 80119e0:	69bb      	ldr	r3, [r7, #24]
 80119e2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80119e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3720      	adds	r7, #32
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	20000030 	.word	0x20000030
 80119f4:	2000d14c 	.word	0x2000d14c
 80119f8:	080191a8 	.word	0x080191a8
 80119fc:	080191ac 	.word	0x080191ac
 8011a00:	10624dd3 	.word	0x10624dd3

08011a04 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b088      	sub	sp, #32
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d107      	bne.n	8011a22 <dhcp_bind+0x1e>
 8011a12:	4b64      	ldr	r3, [pc, #400]	@ (8011ba4 <dhcp_bind+0x1a0>)
 8011a14:	f240 4215 	movw	r2, #1045	@ 0x415
 8011a18:	4963      	ldr	r1, [pc, #396]	@ (8011ba8 <dhcp_bind+0x1a4>)
 8011a1a:	4864      	ldr	r0, [pc, #400]	@ (8011bac <dhcp_bind+0x1a8>)
 8011a1c:	f003 fcec 	bl	80153f8 <iprintf>
 8011a20:	e0bc      	b.n	8011b9c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a26:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011a28:	69bb      	ldr	r3, [r7, #24]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d107      	bne.n	8011a3e <dhcp_bind+0x3a>
 8011a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8011ba4 <dhcp_bind+0x1a0>)
 8011a30:	f240 4217 	movw	r2, #1047	@ 0x417
 8011a34:	495e      	ldr	r1, [pc, #376]	@ (8011bb0 <dhcp_bind+0x1ac>)
 8011a36:	485d      	ldr	r0, [pc, #372]	@ (8011bac <dhcp_bind+0x1a8>)
 8011a38:	f003 fcde 	bl	80153f8 <iprintf>
 8011a3c:	e0ae      	b.n	8011b9c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	2200      	movs	r2, #0
 8011a42:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8011a44:	69bb      	ldr	r3, [r7, #24]
 8011a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a4c:	d019      	beq.n	8011a82 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a52:	331e      	adds	r3, #30
 8011a54:	4a57      	ldr	r2, [pc, #348]	@ (8011bb4 <dhcp_bind+0x1b0>)
 8011a56:	fba2 2303 	umull	r2, r3, r2, r3
 8011a5a:	095b      	lsrs	r3, r3, #5
 8011a5c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011a64:	d302      	bcc.n	8011a6c <dhcp_bind+0x68>
      timeout = 0xffff;
 8011a66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a6a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	b29a      	uxth	r2, r3
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8011a74:	69bb      	ldr	r3, [r7, #24]
 8011a76:	8a9b      	ldrh	r3, [r3, #20]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d102      	bne.n	8011a82 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8011a7c:	69bb      	ldr	r3, [r7, #24]
 8011a7e:	2201      	movs	r2, #1
 8011a80:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a8a:	d01d      	beq.n	8011ac8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a90:	331e      	adds	r3, #30
 8011a92:	4a48      	ldr	r2, [pc, #288]	@ (8011bb4 <dhcp_bind+0x1b0>)
 8011a94:	fba2 2303 	umull	r2, r3, r2, r3
 8011a98:	095b      	lsrs	r3, r3, #5
 8011a9a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011aa2:	d302      	bcc.n	8011aaa <dhcp_bind+0xa6>
      timeout = 0xffff;
 8011aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011aa8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	b29a      	uxth	r2, r3
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	895b      	ldrh	r3, [r3, #10]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d102      	bne.n	8011ac0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	2201      	movs	r2, #1
 8011abe:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	895a      	ldrh	r2, [r3, #10]
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011ac8:	69bb      	ldr	r3, [r7, #24]
 8011aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ad0:	d01d      	beq.n	8011b0e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ad6:	331e      	adds	r3, #30
 8011ad8:	4a36      	ldr	r2, [pc, #216]	@ (8011bb4 <dhcp_bind+0x1b0>)
 8011ada:	fba2 2303 	umull	r2, r3, r2, r3
 8011ade:	095b      	lsrs	r3, r3, #5
 8011ae0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ae8:	d302      	bcc.n	8011af0 <dhcp_bind+0xec>
      timeout = 0xffff;
 8011aea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011aee:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	69bb      	ldr	r3, [r7, #24]
 8011af6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	899b      	ldrh	r3, [r3, #12]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d102      	bne.n	8011b06 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	2201      	movs	r2, #1
 8011b04:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	899a      	ldrh	r2, [r3, #12]
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	895a      	ldrh	r2, [r3, #10]
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	899b      	ldrh	r3, [r3, #12]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d306      	bcc.n	8011b28 <dhcp_bind+0x124>
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	899b      	ldrh	r3, [r3, #12]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d002      	beq.n	8011b28 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	2200      	movs	r2, #0
 8011b26:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	79db      	ldrb	r3, [r3, #7]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d003      	beq.n	8011b38 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	6a1b      	ldr	r3, [r3, #32]
 8011b34:	613b      	str	r3, [r7, #16]
 8011b36:	e014      	b.n	8011b62 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	331c      	adds	r3, #28
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8011b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	db02      	blt.n	8011b4e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011b48:	23ff      	movs	r3, #255	@ 0xff
 8011b4a:	613b      	str	r3, [r7, #16]
 8011b4c:	e009      	b.n	8011b62 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8011b4e:	7dfb      	ldrb	r3, [r7, #23]
 8011b50:	2bbf      	cmp	r3, #191	@ 0xbf
 8011b52:	d903      	bls.n	8011b5c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8011b54:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8011b58:	613b      	str	r3, [r7, #16]
 8011b5a:	e002      	b.n	8011b62 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8011b5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011b60:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b66:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d108      	bne.n	8011b80 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	69da      	ldr	r2, [r3, #28]
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	4013      	ands	r3, r2
 8011b76:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011b7e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8011b80:	210a      	movs	r1, #10
 8011b82:	69b8      	ldr	r0, [r7, #24]
 8011b84:	f000 fa9a 	bl	80120bc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	f103 011c 	add.w	r1, r3, #28
 8011b8e:	f107 030c 	add.w	r3, r7, #12
 8011b92:	f107 0210 	add.w	r2, r7, #16
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7f8 fb3e 	bl	800a218 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8011b9c:	3720      	adds	r7, #32
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	0801861c 	.word	0x0801861c
 8011ba8:	0801877c 	.word	0x0801877c
 8011bac:	0801867c 	.word	0x0801867c
 8011bb0:	08018798 	.word	0x08018798
 8011bb4:	88888889 	.word	0x88888889

08011bb8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b08a      	sub	sp, #40	@ 0x28
 8011bbc:	af02      	add	r7, sp, #8
 8011bbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bc4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011bc6:	2105      	movs	r1, #5
 8011bc8:	69b8      	ldr	r0, [r7, #24]
 8011bca:	f000 fa77 	bl	80120bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011bce:	f107 030c 	add.w	r3, r7, #12
 8011bd2:	2203      	movs	r2, #3
 8011bd4:	69b9      	ldr	r1, [r7, #24]
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f000 fefc 	bl	80129d4 <dhcp_create_msg>
 8011bdc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d04e      	beq.n	8011c82 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011bea:	89b8      	ldrh	r0, [r7, #12]
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011bf2:	2302      	movs	r3, #2
 8011bf4:	2239      	movs	r2, #57	@ 0x39
 8011bf6:	f000 fa7b 	bl	80120f0 <dhcp_option>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011bfe:	89b8      	ldrh	r0, [r7, #12]
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	f000 faca 	bl	80121a4 <dhcp_option_short>
 8011c10:	4603      	mov	r3, r0
 8011c12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011c14:	89b8      	ldrh	r0, [r7, #12]
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011c1c:	2303      	movs	r3, #3
 8011c1e:	2237      	movs	r2, #55	@ 0x37
 8011c20:	f000 fa66 	bl	80120f0 <dhcp_option>
 8011c24:	4603      	mov	r3, r0
 8011c26:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011c28:	2300      	movs	r3, #0
 8011c2a:	77bb      	strb	r3, [r7, #30]
 8011c2c:	e00e      	b.n	8011c4c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011c2e:	89b8      	ldrh	r0, [r7, #12]
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011c36:	7fbb      	ldrb	r3, [r7, #30]
 8011c38:	4a29      	ldr	r2, [pc, #164]	@ (8011ce0 <dhcp_renew+0x128>)
 8011c3a:	5cd3      	ldrb	r3, [r2, r3]
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	f000 fa8b 	bl	8012158 <dhcp_option_byte>
 8011c42:	4603      	mov	r3, r0
 8011c44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011c46:	7fbb      	ldrb	r3, [r7, #30]
 8011c48:	3301      	adds	r3, #1
 8011c4a:	77bb      	strb	r3, [r7, #30]
 8011c4c:	7fbb      	ldrb	r3, [r7, #30]
 8011c4e:	2b02      	cmp	r3, #2
 8011c50:	d9ed      	bls.n	8011c2e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011c52:	89b8      	ldrh	r0, [r7, #12]
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	33f0      	adds	r3, #240	@ 0xf0
 8011c58:	697a      	ldr	r2, [r7, #20]
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	f000 ff90 	bl	8012b80 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011c60:	4b20      	ldr	r3, [pc, #128]	@ (8011ce4 <dhcp_renew+0x12c>)
 8011c62:	6818      	ldr	r0, [r3, #0]
 8011c64:	69bb      	ldr	r3, [r7, #24]
 8011c66:	f103 0218 	add.w	r2, r3, #24
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	2343      	movs	r3, #67	@ 0x43
 8011c70:	6979      	ldr	r1, [r7, #20]
 8011c72:	f7fe fe51 	bl	8010918 <udp_sendto_if>
 8011c76:	4603      	mov	r3, r0
 8011c78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011c7a:	6978      	ldr	r0, [r7, #20]
 8011c7c:	f7f8 ff8c 	bl	800ab98 <pbuf_free>
 8011c80:	e001      	b.n	8011c86 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011c82:	23ff      	movs	r3, #255	@ 0xff
 8011c84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	799b      	ldrb	r3, [r3, #6]
 8011c8a:	2bff      	cmp	r3, #255	@ 0xff
 8011c8c:	d005      	beq.n	8011c9a <dhcp_renew+0xe2>
    dhcp->tries++;
 8011c8e:	69bb      	ldr	r3, [r7, #24]
 8011c90:	799b      	ldrb	r3, [r3, #6]
 8011c92:	3301      	adds	r3, #1
 8011c94:	b2da      	uxtb	r2, r3
 8011c96:	69bb      	ldr	r3, [r7, #24]
 8011c98:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8011c9a:	69bb      	ldr	r3, [r7, #24]
 8011c9c:	799b      	ldrb	r3, [r3, #6]
 8011c9e:	2b09      	cmp	r3, #9
 8011ca0:	d809      	bhi.n	8011cb6 <dhcp_renew+0xfe>
 8011ca2:	69bb      	ldr	r3, [r7, #24]
 8011ca4:	799b      	ldrb	r3, [r3, #6]
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	0152      	lsls	r2, r2, #5
 8011caa:	1ad2      	subs	r2, r2, r3
 8011cac:	0092      	lsls	r2, r2, #2
 8011cae:	4413      	add	r3, r2
 8011cb0:	011b      	lsls	r3, r3, #4
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	e001      	b.n	8011cba <dhcp_renew+0x102>
 8011cb6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011cba:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011cbc:	89fb      	ldrh	r3, [r7, #14]
 8011cbe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011cc2:	4a09      	ldr	r2, [pc, #36]	@ (8011ce8 <dhcp_renew+0x130>)
 8011cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8011cc8:	1152      	asrs	r2, r2, #5
 8011cca:	17db      	asrs	r3, r3, #31
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	69bb      	ldr	r3, [r7, #24]
 8011cd2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011cd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3720      	adds	r7, #32
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	20000030 	.word	0x20000030
 8011ce4:	2000d14c 	.word	0x2000d14c
 8011ce8:	10624dd3 	.word	0x10624dd3

08011cec <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b08a      	sub	sp, #40	@ 0x28
 8011cf0:	af02      	add	r7, sp, #8
 8011cf2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cf8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8011cfa:	2104      	movs	r1, #4
 8011cfc:	69b8      	ldr	r0, [r7, #24]
 8011cfe:	f000 f9dd 	bl	80120bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011d02:	f107 030c 	add.w	r3, r7, #12
 8011d06:	2203      	movs	r2, #3
 8011d08:	69b9      	ldr	r1, [r7, #24]
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 fe62 	bl	80129d4 <dhcp_create_msg>
 8011d10:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d04c      	beq.n	8011db2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011d1e:	89b8      	ldrh	r0, [r7, #12]
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d26:	2302      	movs	r3, #2
 8011d28:	2239      	movs	r2, #57	@ 0x39
 8011d2a:	f000 f9e1 	bl	80120f0 <dhcp_option>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011d32:	89b8      	ldrh	r0, [r7, #12]
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d3e:	461a      	mov	r2, r3
 8011d40:	f000 fa30 	bl	80121a4 <dhcp_option_short>
 8011d44:	4603      	mov	r3, r0
 8011d46:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011d48:	89b8      	ldrh	r0, [r7, #12]
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d50:	2303      	movs	r3, #3
 8011d52:	2237      	movs	r2, #55	@ 0x37
 8011d54:	f000 f9cc 	bl	80120f0 <dhcp_option>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	77bb      	strb	r3, [r7, #30]
 8011d60:	e00e      	b.n	8011d80 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011d62:	89b8      	ldrh	r0, [r7, #12]
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d6a:	7fbb      	ldrb	r3, [r7, #30]
 8011d6c:	4a28      	ldr	r2, [pc, #160]	@ (8011e10 <dhcp_rebind+0x124>)
 8011d6e:	5cd3      	ldrb	r3, [r2, r3]
 8011d70:	461a      	mov	r2, r3
 8011d72:	f000 f9f1 	bl	8012158 <dhcp_option_byte>
 8011d76:	4603      	mov	r3, r0
 8011d78:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d7a:	7fbb      	ldrb	r3, [r7, #30]
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	77bb      	strb	r3, [r7, #30]
 8011d80:	7fbb      	ldrb	r3, [r7, #30]
 8011d82:	2b02      	cmp	r3, #2
 8011d84:	d9ed      	bls.n	8011d62 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011d86:	89b8      	ldrh	r0, [r7, #12]
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	33f0      	adds	r3, #240	@ 0xf0
 8011d8c:	697a      	ldr	r2, [r7, #20]
 8011d8e:	4619      	mov	r1, r3
 8011d90:	f000 fef6 	bl	8012b80 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011d94:	4b1f      	ldr	r3, [pc, #124]	@ (8011e14 <dhcp_rebind+0x128>)
 8011d96:	6818      	ldr	r0, [r3, #0]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	9300      	str	r3, [sp, #0]
 8011d9c:	2343      	movs	r3, #67	@ 0x43
 8011d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8011e18 <dhcp_rebind+0x12c>)
 8011da0:	6979      	ldr	r1, [r7, #20]
 8011da2:	f7fe fdb9 	bl	8010918 <udp_sendto_if>
 8011da6:	4603      	mov	r3, r0
 8011da8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011daa:	6978      	ldr	r0, [r7, #20]
 8011dac:	f7f8 fef4 	bl	800ab98 <pbuf_free>
 8011db0:	e001      	b.n	8011db6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011db2:	23ff      	movs	r3, #255	@ 0xff
 8011db4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011db6:	69bb      	ldr	r3, [r7, #24]
 8011db8:	799b      	ldrb	r3, [r3, #6]
 8011dba:	2bff      	cmp	r3, #255	@ 0xff
 8011dbc:	d005      	beq.n	8011dca <dhcp_rebind+0xde>
    dhcp->tries++;
 8011dbe:	69bb      	ldr	r3, [r7, #24]
 8011dc0:	799b      	ldrb	r3, [r3, #6]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	b2da      	uxtb	r2, r3
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011dca:	69bb      	ldr	r3, [r7, #24]
 8011dcc:	799b      	ldrb	r3, [r3, #6]
 8011dce:	2b09      	cmp	r3, #9
 8011dd0:	d809      	bhi.n	8011de6 <dhcp_rebind+0xfa>
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	799b      	ldrb	r3, [r3, #6]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	0152      	lsls	r2, r2, #5
 8011dda:	1ad2      	subs	r2, r2, r3
 8011ddc:	0092      	lsls	r2, r2, #2
 8011dde:	4413      	add	r3, r2
 8011de0:	00db      	lsls	r3, r3, #3
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	e001      	b.n	8011dea <dhcp_rebind+0xfe>
 8011de6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8011dea:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011dec:	89fb      	ldrh	r3, [r7, #14]
 8011dee:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011df2:	4a0a      	ldr	r2, [pc, #40]	@ (8011e1c <dhcp_rebind+0x130>)
 8011df4:	fb82 1203 	smull	r1, r2, r2, r3
 8011df8:	1152      	asrs	r2, r2, #5
 8011dfa:	17db      	asrs	r3, r3, #31
 8011dfc:	1ad3      	subs	r3, r2, r3
 8011dfe:	b29a      	uxth	r2, r3
 8011e00:	69bb      	ldr	r3, [r7, #24]
 8011e02:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3720      	adds	r7, #32
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	20000030 	.word	0x20000030
 8011e14:	2000d14c 	.word	0x2000d14c
 8011e18:	080191ac 	.word	0x080191ac
 8011e1c:	10624dd3 	.word	0x10624dd3

08011e20 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011e20:	b5b0      	push	{r4, r5, r7, lr}
 8011e22:	b08a      	sub	sp, #40	@ 0x28
 8011e24:	af02      	add	r7, sp, #8
 8011e26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e2c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011e2e:	2103      	movs	r1, #3
 8011e30:	69b8      	ldr	r0, [r7, #24]
 8011e32:	f000 f943 	bl	80120bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011e36:	f107 030c 	add.w	r3, r7, #12
 8011e3a:	2203      	movs	r2, #3
 8011e3c:	69b9      	ldr	r1, [r7, #24]
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 fdc8 	bl	80129d4 <dhcp_create_msg>
 8011e44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d066      	beq.n	8011f1a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011e52:	89b8      	ldrh	r0, [r7, #12]
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011e5a:	2302      	movs	r3, #2
 8011e5c:	2239      	movs	r2, #57	@ 0x39
 8011e5e:	f000 f947 	bl	80120f0 <dhcp_option>
 8011e62:	4603      	mov	r3, r0
 8011e64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8011e66:	89b8      	ldrh	r0, [r7, #12]
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	33f0      	adds	r3, #240	@ 0xf0
 8011e6c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8011e70:	4619      	mov	r1, r3
 8011e72:	f000 f997 	bl	80121a4 <dhcp_option_short>
 8011e76:	4603      	mov	r3, r0
 8011e78:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011e7a:	89b8      	ldrh	r0, [r7, #12]
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011e82:	2304      	movs	r3, #4
 8011e84:	2232      	movs	r2, #50	@ 0x32
 8011e86:	f000 f933 	bl	80120f0 <dhcp_option>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011e8e:	89bc      	ldrh	r4, [r7, #12]
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	69db      	ldr	r3, [r3, #28]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7f7 fb4c 	bl	8009538 <lwip_htonl>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f000 f9ae 	bl	8012208 <dhcp_option_long>
 8011eac:	4603      	mov	r3, r0
 8011eae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011eb0:	89b8      	ldrh	r0, [r7, #12]
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011eb8:	2303      	movs	r3, #3
 8011eba:	2237      	movs	r2, #55	@ 0x37
 8011ebc:	f000 f918 	bl	80120f0 <dhcp_option>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	77bb      	strb	r3, [r7, #30]
 8011ec8:	e00e      	b.n	8011ee8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011eca:	89b8      	ldrh	r0, [r7, #12]
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011ed2:	7fbb      	ldrb	r3, [r7, #30]
 8011ed4:	4a28      	ldr	r2, [pc, #160]	@ (8011f78 <dhcp_reboot+0x158>)
 8011ed6:	5cd3      	ldrb	r3, [r2, r3]
 8011ed8:	461a      	mov	r2, r3
 8011eda:	f000 f93d 	bl	8012158 <dhcp_option_byte>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011ee2:	7fbb      	ldrb	r3, [r7, #30]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	77bb      	strb	r3, [r7, #30]
 8011ee8:	7fbb      	ldrb	r3, [r7, #30]
 8011eea:	2b02      	cmp	r3, #2
 8011eec:	d9ed      	bls.n	8011eca <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011eee:	89b8      	ldrh	r0, [r7, #12]
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	33f0      	adds	r3, #240	@ 0xf0
 8011ef4:	697a      	ldr	r2, [r7, #20]
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	f000 fe42 	bl	8012b80 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011efc:	4b1f      	ldr	r3, [pc, #124]	@ (8011f7c <dhcp_reboot+0x15c>)
 8011efe:	6818      	ldr	r0, [r3, #0]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	2343      	movs	r3, #67	@ 0x43
 8011f06:	4a1e      	ldr	r2, [pc, #120]	@ (8011f80 <dhcp_reboot+0x160>)
 8011f08:	6979      	ldr	r1, [r7, #20]
 8011f0a:	f7fe fd05 	bl	8010918 <udp_sendto_if>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011f12:	6978      	ldr	r0, [r7, #20]
 8011f14:	f7f8 fe40 	bl	800ab98 <pbuf_free>
 8011f18:	e001      	b.n	8011f1e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011f1a:	23ff      	movs	r3, #255	@ 0xff
 8011f1c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	799b      	ldrb	r3, [r3, #6]
 8011f22:	2bff      	cmp	r3, #255	@ 0xff
 8011f24:	d005      	beq.n	8011f32 <dhcp_reboot+0x112>
    dhcp->tries++;
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	799b      	ldrb	r3, [r3, #6]
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	b2da      	uxtb	r2, r3
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011f32:	69bb      	ldr	r3, [r7, #24]
 8011f34:	799b      	ldrb	r3, [r3, #6]
 8011f36:	2b09      	cmp	r3, #9
 8011f38:	d809      	bhi.n	8011f4e <dhcp_reboot+0x12e>
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	799b      	ldrb	r3, [r3, #6]
 8011f3e:	461a      	mov	r2, r3
 8011f40:	0152      	lsls	r2, r2, #5
 8011f42:	1ad2      	subs	r2, r2, r3
 8011f44:	0092      	lsls	r2, r2, #2
 8011f46:	4413      	add	r3, r2
 8011f48:	00db      	lsls	r3, r3, #3
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	e001      	b.n	8011f52 <dhcp_reboot+0x132>
 8011f4e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8011f52:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011f54:	89fb      	ldrh	r3, [r7, #14]
 8011f56:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8011f84 <dhcp_reboot+0x164>)
 8011f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8011f60:	1152      	asrs	r2, r2, #5
 8011f62:	17db      	asrs	r3, r3, #31
 8011f64:	1ad3      	subs	r3, r2, r3
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	69bb      	ldr	r3, [r7, #24]
 8011f6a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011f6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3720      	adds	r7, #32
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bdb0      	pop	{r4, r5, r7, pc}
 8011f78:	20000030 	.word	0x20000030
 8011f7c:	2000d14c 	.word	0x2000d14c
 8011f80:	080191ac 	.word	0x080191ac
 8011f84:	10624dd3 	.word	0x10624dd3

08011f88 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011f88:	b5b0      	push	{r4, r5, r7, lr}
 8011f8a:	b08a      	sub	sp, #40	@ 0x28
 8011f8c:	af02      	add	r7, sp, #8
 8011f8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f94:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	f000 8084 	beq.w	80120a6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8011f9e:	69fb      	ldr	r3, [r7, #28]
 8011fa0:	795b      	ldrb	r3, [r3, #5]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 8081 	beq.w	80120aa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	699b      	ldr	r3, [r3, #24]
 8011fac:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011fc6:	69fb      	ldr	r3, [r7, #28]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	829a      	strh	r2, [r3, #20]
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	8a9a      	ldrh	r2, [r3, #20]
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	825a      	strh	r2, [r3, #18]
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	8a5a      	ldrh	r2, [r3, #18]
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	821a      	strh	r2, [r3, #16]
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	8a1a      	ldrh	r2, [r3, #16]
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 fdee 	bl	8012bdc <dhcp_supplied_address>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d03b      	beq.n	801207e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012006:	f107 030e 	add.w	r3, r7, #14
 801200a:	2207      	movs	r2, #7
 801200c:	69f9      	ldr	r1, [r7, #28]
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 fce0 	bl	80129d4 <dhcp_create_msg>
 8012014:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d030      	beq.n	801207e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012022:	89f8      	ldrh	r0, [r7, #14]
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801202a:	2304      	movs	r3, #4
 801202c:	2236      	movs	r2, #54	@ 0x36
 801202e:	f000 f85f 	bl	80120f0 <dhcp_option>
 8012032:	4603      	mov	r3, r0
 8012034:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012036:	89fc      	ldrh	r4, [r7, #14]
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	4618      	mov	r0, r3
 8012042:	f7f7 fa79 	bl	8009538 <lwip_htonl>
 8012046:	4603      	mov	r3, r0
 8012048:	461a      	mov	r2, r3
 801204a:	4629      	mov	r1, r5
 801204c:	4620      	mov	r0, r4
 801204e:	f000 f8db 	bl	8012208 <dhcp_option_long>
 8012052:	4603      	mov	r3, r0
 8012054:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012056:	89f8      	ldrh	r0, [r7, #14]
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	33f0      	adds	r3, #240	@ 0xf0
 801205c:	69ba      	ldr	r2, [r7, #24]
 801205e:	4619      	mov	r1, r3
 8012060:	f000 fd8e 	bl	8012b80 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012064:	4b13      	ldr	r3, [pc, #76]	@ (80120b4 <dhcp_release_and_stop+0x12c>)
 8012066:	6818      	ldr	r0, [r3, #0]
 8012068:	f107 0210 	add.w	r2, r7, #16
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	2343      	movs	r3, #67	@ 0x43
 8012072:	69b9      	ldr	r1, [r7, #24]
 8012074:	f7fe fc50 	bl	8010918 <udp_sendto_if>
      pbuf_free(p_out);
 8012078:	69b8      	ldr	r0, [r7, #24]
 801207a:	f7f8 fd8d 	bl	800ab98 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801207e:	4b0e      	ldr	r3, [pc, #56]	@ (80120b8 <dhcp_release_and_stop+0x130>)
 8012080:	4a0d      	ldr	r2, [pc, #52]	@ (80120b8 <dhcp_release_and_stop+0x130>)
 8012082:	490d      	ldr	r1, [pc, #52]	@ (80120b8 <dhcp_release_and_stop+0x130>)
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7f8 f8c7 	bl	800a218 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801208a:	2100      	movs	r1, #0
 801208c:	69f8      	ldr	r0, [r7, #28]
 801208e:	f000 f815 	bl	80120bc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	791b      	ldrb	r3, [r3, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d008      	beq.n	80120ac <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801209a:	f7fe ff89 	bl	8010fb0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	2200      	movs	r2, #0
 80120a2:	711a      	strb	r2, [r3, #4]
 80120a4:	e002      	b.n	80120ac <dhcp_release_and_stop+0x124>
    return;
 80120a6:	bf00      	nop
 80120a8:	e000      	b.n	80120ac <dhcp_release_and_stop+0x124>
    return;
 80120aa:	bf00      	nop
  }
}
 80120ac:	3720      	adds	r7, #32
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bdb0      	pop	{r4, r5, r7, pc}
 80120b2:	bf00      	nop
 80120b4:	2000d14c 	.word	0x2000d14c
 80120b8:	080191a8 	.word	0x080191a8

080120bc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	460b      	mov	r3, r1
 80120c6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	795b      	ldrb	r3, [r3, #5]
 80120cc:	78fa      	ldrb	r2, [r7, #3]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d008      	beq.n	80120e4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	78fa      	ldrb	r2, [r7, #3]
 80120d6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2200      	movs	r2, #0
 80120e2:	811a      	strh	r2, [r3, #8]
  }
}
 80120e4:	bf00      	nop
 80120e6:	370c      	adds	r7, #12
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr

080120f0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6039      	str	r1, [r7, #0]
 80120f8:	4611      	mov	r1, r2
 80120fa:	461a      	mov	r2, r3
 80120fc:	4603      	mov	r3, r0
 80120fe:	80fb      	strh	r3, [r7, #6]
 8012100:	460b      	mov	r3, r1
 8012102:	717b      	strb	r3, [r7, #5]
 8012104:	4613      	mov	r3, r2
 8012106:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012108:	88fa      	ldrh	r2, [r7, #6]
 801210a:	793b      	ldrb	r3, [r7, #4]
 801210c:	4413      	add	r3, r2
 801210e:	3302      	adds	r3, #2
 8012110:	2b44      	cmp	r3, #68	@ 0x44
 8012112:	d906      	bls.n	8012122 <dhcp_option+0x32>
 8012114:	4b0d      	ldr	r3, [pc, #52]	@ (801214c <dhcp_option+0x5c>)
 8012116:	f240 529a 	movw	r2, #1434	@ 0x59a
 801211a:	490d      	ldr	r1, [pc, #52]	@ (8012150 <dhcp_option+0x60>)
 801211c:	480d      	ldr	r0, [pc, #52]	@ (8012154 <dhcp_option+0x64>)
 801211e:	f003 f96b 	bl	80153f8 <iprintf>
  options[options_out_len++] = option_type;
 8012122:	88fb      	ldrh	r3, [r7, #6]
 8012124:	1c5a      	adds	r2, r3, #1
 8012126:	80fa      	strh	r2, [r7, #6]
 8012128:	461a      	mov	r2, r3
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	4413      	add	r3, r2
 801212e:	797a      	ldrb	r2, [r7, #5]
 8012130:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8012132:	88fb      	ldrh	r3, [r7, #6]
 8012134:	1c5a      	adds	r2, r3, #1
 8012136:	80fa      	strh	r2, [r7, #6]
 8012138:	461a      	mov	r2, r3
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	4413      	add	r3, r2
 801213e:	793a      	ldrb	r2, [r7, #4]
 8012140:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012142:	88fb      	ldrh	r3, [r7, #6]
}
 8012144:	4618      	mov	r0, r3
 8012146:	3708      	adds	r7, #8
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}
 801214c:	0801861c 	.word	0x0801861c
 8012150:	080187b0 	.word	0x080187b0
 8012154:	0801867c 	.word	0x0801867c

08012158 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	4603      	mov	r3, r0
 8012160:	6039      	str	r1, [r7, #0]
 8012162:	80fb      	strh	r3, [r7, #6]
 8012164:	4613      	mov	r3, r2
 8012166:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012168:	88fb      	ldrh	r3, [r7, #6]
 801216a:	2b43      	cmp	r3, #67	@ 0x43
 801216c:	d906      	bls.n	801217c <dhcp_option_byte+0x24>
 801216e:	4b0a      	ldr	r3, [pc, #40]	@ (8012198 <dhcp_option_byte+0x40>)
 8012170:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8012174:	4909      	ldr	r1, [pc, #36]	@ (801219c <dhcp_option_byte+0x44>)
 8012176:	480a      	ldr	r0, [pc, #40]	@ (80121a0 <dhcp_option_byte+0x48>)
 8012178:	f003 f93e 	bl	80153f8 <iprintf>
  options[options_out_len++] = value;
 801217c:	88fb      	ldrh	r3, [r7, #6]
 801217e:	1c5a      	adds	r2, r3, #1
 8012180:	80fa      	strh	r2, [r7, #6]
 8012182:	461a      	mov	r2, r3
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	4413      	add	r3, r2
 8012188:	797a      	ldrb	r2, [r7, #5]
 801218a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801218c:	88fb      	ldrh	r3, [r7, #6]
}
 801218e:	4618      	mov	r0, r3
 8012190:	3708      	adds	r7, #8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	0801861c 	.word	0x0801861c
 801219c:	080187f4 	.word	0x080187f4
 80121a0:	0801867c 	.word	0x0801867c

080121a4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	4603      	mov	r3, r0
 80121ac:	6039      	str	r1, [r7, #0]
 80121ae:	80fb      	strh	r3, [r7, #6]
 80121b0:	4613      	mov	r3, r2
 80121b2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80121b4:	88fb      	ldrh	r3, [r7, #6]
 80121b6:	3302      	adds	r3, #2
 80121b8:	2b44      	cmp	r3, #68	@ 0x44
 80121ba:	d906      	bls.n	80121ca <dhcp_option_short+0x26>
 80121bc:	4b0f      	ldr	r3, [pc, #60]	@ (80121fc <dhcp_option_short+0x58>)
 80121be:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80121c2:	490f      	ldr	r1, [pc, #60]	@ (8012200 <dhcp_option_short+0x5c>)
 80121c4:	480f      	ldr	r0, [pc, #60]	@ (8012204 <dhcp_option_short+0x60>)
 80121c6:	f003 f917 	bl	80153f8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80121ca:	88bb      	ldrh	r3, [r7, #4]
 80121cc:	0a1b      	lsrs	r3, r3, #8
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	88fb      	ldrh	r3, [r7, #6]
 80121d2:	1c59      	adds	r1, r3, #1
 80121d4:	80f9      	strh	r1, [r7, #6]
 80121d6:	4619      	mov	r1, r3
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	440b      	add	r3, r1
 80121dc:	b2d2      	uxtb	r2, r2
 80121de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80121e0:	88fb      	ldrh	r3, [r7, #6]
 80121e2:	1c5a      	adds	r2, r3, #1
 80121e4:	80fa      	strh	r2, [r7, #6]
 80121e6:	461a      	mov	r2, r3
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	4413      	add	r3, r2
 80121ec:	88ba      	ldrh	r2, [r7, #4]
 80121ee:	b2d2      	uxtb	r2, r2
 80121f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80121f2:	88fb      	ldrh	r3, [r7, #6]
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	0801861c 	.word	0x0801861c
 8012200:	0801882c 	.word	0x0801882c
 8012204:	0801867c 	.word	0x0801867c

08012208 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af00      	add	r7, sp, #0
 801220e:	4603      	mov	r3, r0
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	607a      	str	r2, [r7, #4]
 8012214:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8012216:	89fb      	ldrh	r3, [r7, #14]
 8012218:	3304      	adds	r3, #4
 801221a:	2b44      	cmp	r3, #68	@ 0x44
 801221c:	d906      	bls.n	801222c <dhcp_option_long+0x24>
 801221e:	4b19      	ldr	r3, [pc, #100]	@ (8012284 <dhcp_option_long+0x7c>)
 8012220:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8012224:	4918      	ldr	r1, [pc, #96]	@ (8012288 <dhcp_option_long+0x80>)
 8012226:	4819      	ldr	r0, [pc, #100]	@ (801228c <dhcp_option_long+0x84>)
 8012228:	f003 f8e6 	bl	80153f8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	0e1a      	lsrs	r2, r3, #24
 8012230:	89fb      	ldrh	r3, [r7, #14]
 8012232:	1c59      	adds	r1, r3, #1
 8012234:	81f9      	strh	r1, [r7, #14]
 8012236:	4619      	mov	r1, r3
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	440b      	add	r3, r1
 801223c:	b2d2      	uxtb	r2, r2
 801223e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	0c1a      	lsrs	r2, r3, #16
 8012244:	89fb      	ldrh	r3, [r7, #14]
 8012246:	1c59      	adds	r1, r3, #1
 8012248:	81f9      	strh	r1, [r7, #14]
 801224a:	4619      	mov	r1, r3
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	440b      	add	r3, r1
 8012250:	b2d2      	uxtb	r2, r2
 8012252:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	0a1a      	lsrs	r2, r3, #8
 8012258:	89fb      	ldrh	r3, [r7, #14]
 801225a:	1c59      	adds	r1, r3, #1
 801225c:	81f9      	strh	r1, [r7, #14]
 801225e:	4619      	mov	r1, r3
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	440b      	add	r3, r1
 8012264:	b2d2      	uxtb	r2, r2
 8012266:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8012268:	89fb      	ldrh	r3, [r7, #14]
 801226a:	1c5a      	adds	r2, r3, #1
 801226c:	81fa      	strh	r2, [r7, #14]
 801226e:	461a      	mov	r2, r3
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	4413      	add	r3, r2
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	b2d2      	uxtb	r2, r2
 8012278:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801227a:	89fb      	ldrh	r3, [r7, #14]
}
 801227c:	4618      	mov	r0, r3
 801227e:	3710      	adds	r7, #16
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	0801861c 	.word	0x0801861c
 8012288:	08018868 	.word	0x08018868
 801228c:	0801867c 	.word	0x0801867c

08012290 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b090      	sub	sp, #64	@ 0x40
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801229a:	2300      	movs	r3, #0
 801229c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801229e:	2300      	movs	r3, #0
 80122a0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80122a2:	2208      	movs	r2, #8
 80122a4:	2100      	movs	r1, #0
 80122a6:	48b5      	ldr	r0, [pc, #724]	@ (801257c <dhcp_parse_reply+0x2ec>)
 80122a8:	f003 f90b 	bl	80154c2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	895b      	ldrh	r3, [r3, #10]
 80122b0:	2b2b      	cmp	r3, #43	@ 0x2b
 80122b2:	d802      	bhi.n	80122ba <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80122b4:	f06f 0301 	mvn.w	r3, #1
 80122b8:	e2a7      	b.n	801280a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80122c0:	23f0      	movs	r3, #240	@ 0xf0
 80122c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	891b      	ldrh	r3, [r3, #8]
 80122c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80122ce:	e00c      	b.n	80122ea <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80122d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d2:	895b      	ldrh	r3, [r3, #10]
 80122d4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80122d6:	1ad3      	subs	r3, r2, r3
 80122d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80122da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122dc:	895b      	ldrh	r3, [r3, #10]
 80122de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80122e0:	1ad3      	subs	r3, r2, r3
 80122e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 80122e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80122ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d004      	beq.n	80122fa <dhcp_parse_reply+0x6a>
 80122f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f2:	895b      	ldrh	r3, [r3, #10]
 80122f4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d2ea      	bcs.n	80122d0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80122fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d102      	bne.n	8012306 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012300:	f06f 0301 	mvn.w	r3, #1
 8012304:	e281      	b.n	801280a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8012306:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012308:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801230a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801230c:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012314:	e239      	b.n	801278a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8012316:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012318:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801231a:	4413      	add	r3, r2
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012320:	2300      	movs	r3, #0
 8012322:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8012326:	f04f 33ff 	mov.w	r3, #4294967295
 801232a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801232c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801232e:	3302      	adds	r3, #2
 8012330:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8012332:	8bfa      	ldrh	r2, [r7, #30]
 8012334:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012336:	429a      	cmp	r2, r3
 8012338:	d202      	bcs.n	8012340 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801233a:	f06f 0301 	mvn.w	r3, #1
 801233e:	e264      	b.n	801280a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8012340:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012342:	3301      	adds	r3, #1
 8012344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012346:	8952      	ldrh	r2, [r2, #10]
 8012348:	4293      	cmp	r3, r2
 801234a:	da07      	bge.n	801235c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801234c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801234e:	3301      	adds	r3, #1
 8012350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012352:	4413      	add	r3, r2
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801235a:	e00b      	b.n	8012374 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d004      	beq.n	801236e <dhcp_parse_reply+0xde>
 8012364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	e000      	b.n	8012370 <dhcp_parse_reply+0xe0>
 801236e:	2300      	movs	r3, #0
 8012370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8012374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012378:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 801237c:	7dfb      	ldrb	r3, [r7, #23]
 801237e:	2b3b      	cmp	r3, #59	@ 0x3b
 8012380:	f200 812c 	bhi.w	80125dc <dhcp_parse_reply+0x34c>
 8012384:	a201      	add	r2, pc, #4	@ (adr r2, 801238c <dhcp_parse_reply+0xfc>)
 8012386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801238a:	bf00      	nop
 801238c:	0801247d 	.word	0x0801247d
 8012390:	0801248d 	.word	0x0801248d
 8012394:	080125dd 	.word	0x080125dd
 8012398:	080124af 	.word	0x080124af
 801239c:	080125dd 	.word	0x080125dd
 80123a0:	080125dd 	.word	0x080125dd
 80123a4:	080125dd 	.word	0x080125dd
 80123a8:	080125dd 	.word	0x080125dd
 80123ac:	080125dd 	.word	0x080125dd
 80123b0:	080125dd 	.word	0x080125dd
 80123b4:	080125dd 	.word	0x080125dd
 80123b8:	080125dd 	.word	0x080125dd
 80123bc:	080125dd 	.word	0x080125dd
 80123c0:	080125dd 	.word	0x080125dd
 80123c4:	080125dd 	.word	0x080125dd
 80123c8:	080125dd 	.word	0x080125dd
 80123cc:	080125dd 	.word	0x080125dd
 80123d0:	080125dd 	.word	0x080125dd
 80123d4:	080125dd 	.word	0x080125dd
 80123d8:	080125dd 	.word	0x080125dd
 80123dc:	080125dd 	.word	0x080125dd
 80123e0:	080125dd 	.word	0x080125dd
 80123e4:	080125dd 	.word	0x080125dd
 80123e8:	080125dd 	.word	0x080125dd
 80123ec:	080125dd 	.word	0x080125dd
 80123f0:	080125dd 	.word	0x080125dd
 80123f4:	080125dd 	.word	0x080125dd
 80123f8:	080125dd 	.word	0x080125dd
 80123fc:	080125dd 	.word	0x080125dd
 8012400:	080125dd 	.word	0x080125dd
 8012404:	080125dd 	.word	0x080125dd
 8012408:	080125dd 	.word	0x080125dd
 801240c:	080125dd 	.word	0x080125dd
 8012410:	080125dd 	.word	0x080125dd
 8012414:	080125dd 	.word	0x080125dd
 8012418:	080125dd 	.word	0x080125dd
 801241c:	080125dd 	.word	0x080125dd
 8012420:	080125dd 	.word	0x080125dd
 8012424:	080125dd 	.word	0x080125dd
 8012428:	080125dd 	.word	0x080125dd
 801242c:	080125dd 	.word	0x080125dd
 8012430:	080125dd 	.word	0x080125dd
 8012434:	080125dd 	.word	0x080125dd
 8012438:	080125dd 	.word	0x080125dd
 801243c:	080125dd 	.word	0x080125dd
 8012440:	080125dd 	.word	0x080125dd
 8012444:	080125dd 	.word	0x080125dd
 8012448:	080125dd 	.word	0x080125dd
 801244c:	080125dd 	.word	0x080125dd
 8012450:	080125dd 	.word	0x080125dd
 8012454:	080125dd 	.word	0x080125dd
 8012458:	080124db 	.word	0x080124db
 801245c:	080124fd 	.word	0x080124fd
 8012460:	08012539 	.word	0x08012539
 8012464:	0801255b 	.word	0x0801255b
 8012468:	080125dd 	.word	0x080125dd
 801246c:	080125dd 	.word	0x080125dd
 8012470:	080125dd 	.word	0x080125dd
 8012474:	08012599 	.word	0x08012599
 8012478:	080125bb 	.word	0x080125bb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801247c:	2300      	movs	r3, #0
 801247e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012482:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012486:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801248a:	e0ab      	b.n	80125e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801248c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012490:	2b04      	cmp	r3, #4
 8012492:	d009      	beq.n	80124a8 <dhcp_parse_reply+0x218>
 8012494:	4b3a      	ldr	r3, [pc, #232]	@ (8012580 <dhcp_parse_reply+0x2f0>)
 8012496:	f240 622e 	movw	r2, #1582	@ 0x62e
 801249a:	493a      	ldr	r1, [pc, #232]	@ (8012584 <dhcp_parse_reply+0x2f4>)
 801249c:	483a      	ldr	r0, [pc, #232]	@ (8012588 <dhcp_parse_reply+0x2f8>)
 801249e:	f002 ffab 	bl	80153f8 <iprintf>
 80124a2:	f06f 0305 	mvn.w	r3, #5
 80124a6:	e1b0      	b.n	801280a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80124a8:	2306      	movs	r3, #6
 80124aa:	623b      	str	r3, [r7, #32]
        break;
 80124ac:	e09a      	b.n	80125e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80124ae:	2304      	movs	r3, #4
 80124b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80124b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80124b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80124bc:	429a      	cmp	r2, r3
 80124be:	d209      	bcs.n	80124d4 <dhcp_parse_reply+0x244>
 80124c0:	4b2f      	ldr	r3, [pc, #188]	@ (8012580 <dhcp_parse_reply+0x2f0>)
 80124c2:	f240 6233 	movw	r2, #1587	@ 0x633
 80124c6:	4931      	ldr	r1, [pc, #196]	@ (801258c <dhcp_parse_reply+0x2fc>)
 80124c8:	482f      	ldr	r0, [pc, #188]	@ (8012588 <dhcp_parse_reply+0x2f8>)
 80124ca:	f002 ff95 	bl	80153f8 <iprintf>
 80124ce:	f06f 0305 	mvn.w	r3, #5
 80124d2:	e19a      	b.n	801280a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80124d4:	2307      	movs	r3, #7
 80124d6:	623b      	str	r3, [r7, #32]
        break;
 80124d8:	e084      	b.n	80125e4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80124da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80124de:	2b04      	cmp	r3, #4
 80124e0:	d009      	beq.n	80124f6 <dhcp_parse_reply+0x266>
 80124e2:	4b27      	ldr	r3, [pc, #156]	@ (8012580 <dhcp_parse_reply+0x2f0>)
 80124e4:	f240 6241 	movw	r2, #1601	@ 0x641
 80124e8:	4926      	ldr	r1, [pc, #152]	@ (8012584 <dhcp_parse_reply+0x2f4>)
 80124ea:	4827      	ldr	r0, [pc, #156]	@ (8012588 <dhcp_parse_reply+0x2f8>)
 80124ec:	f002 ff84 	bl	80153f8 <iprintf>
 80124f0:	f06f 0305 	mvn.w	r3, #5
 80124f4:	e189      	b.n	801280a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80124f6:	2303      	movs	r3, #3
 80124f8:	623b      	str	r3, [r7, #32]
        break;
 80124fa:	e073      	b.n	80125e4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80124fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012500:	2b01      	cmp	r3, #1
 8012502:	d009      	beq.n	8012518 <dhcp_parse_reply+0x288>
 8012504:	4b1e      	ldr	r3, [pc, #120]	@ (8012580 <dhcp_parse_reply+0x2f0>)
 8012506:	f240 624f 	movw	r2, #1615	@ 0x64f
 801250a:	4921      	ldr	r1, [pc, #132]	@ (8012590 <dhcp_parse_reply+0x300>)
 801250c:	481e      	ldr	r0, [pc, #120]	@ (8012588 <dhcp_parse_reply+0x2f8>)
 801250e:	f002 ff73 	bl	80153f8 <iprintf>
 8012512:	f06f 0305 	mvn.w	r3, #5
 8012516:	e178      	b.n	801280a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012518:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801251a:	2bf0      	cmp	r3, #240	@ 0xf0
 801251c:	d009      	beq.n	8012532 <dhcp_parse_reply+0x2a2>
 801251e:	4b18      	ldr	r3, [pc, #96]	@ (8012580 <dhcp_parse_reply+0x2f0>)
 8012520:	f240 6251 	movw	r2, #1617	@ 0x651
 8012524:	491b      	ldr	r1, [pc, #108]	@ (8012594 <dhcp_parse_reply+0x304>)
 8012526:	4818      	ldr	r0, [pc, #96]	@ (8012588 <dhcp_parse_reply+0x2f8>)
 8012528:	f002 ff66 	bl	80153f8 <iprintf>
 801252c:	f06f 0305 	mvn.w	r3, #5
 8012530:	e16b      	b.n	801280a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8012532:	2300      	movs	r3, #0
 8012534:	623b      	str	r3, [r7, #32]
        break;
 8012536:	e055      	b.n	80125e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801253c:	2b01      	cmp	r3, #1
 801253e:	d009      	beq.n	8012554 <dhcp_parse_reply+0x2c4>
 8012540:	4b0f      	ldr	r3, [pc, #60]	@ (8012580 <dhcp_parse_reply+0x2f0>)
 8012542:	f240 6255 	movw	r2, #1621	@ 0x655
 8012546:	4912      	ldr	r1, [pc, #72]	@ (8012590 <dhcp_parse_reply+0x300>)
 8012548:	480f      	ldr	r0, [pc, #60]	@ (8012588 <dhcp_parse_reply+0x2f8>)
 801254a:	f002 ff55 	bl	80153f8 <iprintf>
 801254e:	f06f 0305 	mvn.w	r3, #5
 8012552:	e15a      	b.n	801280a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012554:	2301      	movs	r3, #1
 8012556:	623b      	str	r3, [r7, #32]
        break;
 8012558:	e044      	b.n	80125e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801255a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801255e:	2b04      	cmp	r3, #4
 8012560:	d009      	beq.n	8012576 <dhcp_parse_reply+0x2e6>
 8012562:	4b07      	ldr	r3, [pc, #28]	@ (8012580 <dhcp_parse_reply+0x2f0>)
 8012564:	f240 6259 	movw	r2, #1625	@ 0x659
 8012568:	4906      	ldr	r1, [pc, #24]	@ (8012584 <dhcp_parse_reply+0x2f4>)
 801256a:	4807      	ldr	r0, [pc, #28]	@ (8012588 <dhcp_parse_reply+0x2f8>)
 801256c:	f002 ff44 	bl	80153f8 <iprintf>
 8012570:	f06f 0305 	mvn.w	r3, #5
 8012574:	e149      	b.n	801280a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8012576:	2302      	movs	r3, #2
 8012578:	623b      	str	r3, [r7, #32]
        break;
 801257a:	e033      	b.n	80125e4 <dhcp_parse_reply+0x354>
 801257c:	2000d144 	.word	0x2000d144
 8012580:	0801861c 	.word	0x0801861c
 8012584:	080188a4 	.word	0x080188a4
 8012588:	0801867c 	.word	0x0801867c
 801258c:	080188b0 	.word	0x080188b0
 8012590:	080188c4 	.word	0x080188c4
 8012594:	080188d0 	.word	0x080188d0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801259c:	2b04      	cmp	r3, #4
 801259e:	d009      	beq.n	80125b4 <dhcp_parse_reply+0x324>
 80125a0:	4b9c      	ldr	r3, [pc, #624]	@ (8012814 <dhcp_parse_reply+0x584>)
 80125a2:	f240 625d 	movw	r2, #1629	@ 0x65d
 80125a6:	499c      	ldr	r1, [pc, #624]	@ (8012818 <dhcp_parse_reply+0x588>)
 80125a8:	489c      	ldr	r0, [pc, #624]	@ (801281c <dhcp_parse_reply+0x58c>)
 80125aa:	f002 ff25 	bl	80153f8 <iprintf>
 80125ae:	f06f 0305 	mvn.w	r3, #5
 80125b2:	e12a      	b.n	801280a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80125b4:	2304      	movs	r3, #4
 80125b6:	623b      	str	r3, [r7, #32]
        break;
 80125b8:	e014      	b.n	80125e4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80125ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125be:	2b04      	cmp	r3, #4
 80125c0:	d009      	beq.n	80125d6 <dhcp_parse_reply+0x346>
 80125c2:	4b94      	ldr	r3, [pc, #592]	@ (8012814 <dhcp_parse_reply+0x584>)
 80125c4:	f240 6261 	movw	r2, #1633	@ 0x661
 80125c8:	4993      	ldr	r1, [pc, #588]	@ (8012818 <dhcp_parse_reply+0x588>)
 80125ca:	4894      	ldr	r0, [pc, #592]	@ (801281c <dhcp_parse_reply+0x58c>)
 80125cc:	f002 ff14 	bl	80153f8 <iprintf>
 80125d0:	f06f 0305 	mvn.w	r3, #5
 80125d4:	e119      	b.n	801280a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80125d6:	2305      	movs	r3, #5
 80125d8:	623b      	str	r3, [r7, #32]
        break;
 80125da:	e003      	b.n	80125e4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80125dc:	2300      	movs	r3, #0
 80125de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80125e2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80125e4:	7dfb      	ldrb	r3, [r7, #23]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d103      	bne.n	80125f2 <dhcp_parse_reply+0x362>
      offset++;
 80125ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80125ec:	3301      	adds	r3, #1
 80125ee:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80125f0:	e0a1      	b.n	8012736 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80125f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80125f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125f8:	4413      	add	r3, r2
 80125fa:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80125fe:	4293      	cmp	r3, r2
 8012600:	dd02      	ble.n	8012608 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8012602:	f06f 0301 	mvn.w	r3, #1
 8012606:	e100      	b.n	801280a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8012608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801260c:	b29a      	uxth	r2, r3
 801260e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012610:	4413      	add	r3, r2
 8012612:	b29b      	uxth	r3, r3
 8012614:	3302      	adds	r3, #2
 8012616:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8012618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801261c:	2b00      	cmp	r3, #0
 801261e:	f000 808a 	beq.w	8012736 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8012622:	2300      	movs	r3, #0
 8012624:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012626:	6a3b      	ldr	r3, [r7, #32]
 8012628:	2b00      	cmp	r3, #0
 801262a:	db02      	blt.n	8012632 <dhcp_parse_reply+0x3a2>
 801262c:	6a3b      	ldr	r3, [r7, #32]
 801262e:	2b07      	cmp	r3, #7
 8012630:	dd06      	ble.n	8012640 <dhcp_parse_reply+0x3b0>
 8012632:	4b78      	ldr	r3, [pc, #480]	@ (8012814 <dhcp_parse_reply+0x584>)
 8012634:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8012638:	4979      	ldr	r1, [pc, #484]	@ (8012820 <dhcp_parse_reply+0x590>)
 801263a:	4878      	ldr	r0, [pc, #480]	@ (801281c <dhcp_parse_reply+0x58c>)
 801263c:	f002 fedc 	bl	80153f8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012640:	4a78      	ldr	r2, [pc, #480]	@ (8012824 <dhcp_parse_reply+0x594>)
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	4413      	add	r3, r2
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d174      	bne.n	8012736 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801264c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012650:	2b04      	cmp	r3, #4
 8012652:	bf28      	it	cs
 8012654:	2304      	movcs	r3, #4
 8012656:	b2db      	uxtb	r3, r3
 8012658:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801265a:	8bfb      	ldrh	r3, [r7, #30]
 801265c:	8aba      	ldrh	r2, [r7, #20]
 801265e:	f107 0108 	add.w	r1, r7, #8
 8012662:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012664:	f7f8 fc92 	bl	800af8c <pbuf_copy_partial>
 8012668:	4603      	mov	r3, r0
 801266a:	461a      	mov	r2, r3
 801266c:	8abb      	ldrh	r3, [r7, #20]
 801266e:	4293      	cmp	r3, r2
 8012670:	d002      	beq.n	8012678 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8012672:	f06f 0301 	mvn.w	r3, #1
 8012676:	e0c8      	b.n	801280a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8012678:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801267c:	2b04      	cmp	r3, #4
 801267e:	d933      	bls.n	80126e8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012684:	f003 0303 	and.w	r3, r3, #3
 8012688:	b2db      	uxtb	r3, r3
 801268a:	2b00      	cmp	r3, #0
 801268c:	d009      	beq.n	80126a2 <dhcp_parse_reply+0x412>
 801268e:	4b61      	ldr	r3, [pc, #388]	@ (8012814 <dhcp_parse_reply+0x584>)
 8012690:	f240 6281 	movw	r2, #1665	@ 0x681
 8012694:	4964      	ldr	r1, [pc, #400]	@ (8012828 <dhcp_parse_reply+0x598>)
 8012696:	4861      	ldr	r0, [pc, #388]	@ (801281c <dhcp_parse_reply+0x58c>)
 8012698:	f002 feae 	bl	80153f8 <iprintf>
 801269c:	f06f 0305 	mvn.w	r3, #5
 80126a0:	e0b3      	b.n	801280a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80126a2:	4a60      	ldr	r2, [pc, #384]	@ (8012824 <dhcp_parse_reply+0x594>)
 80126a4:	6a3b      	ldr	r3, [r7, #32]
 80126a6:	4413      	add	r3, r2
 80126a8:	2201      	movs	r2, #1
 80126aa:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7f6 ff42 	bl	8009538 <lwip_htonl>
 80126b4:	4602      	mov	r2, r0
 80126b6:	495d      	ldr	r1, [pc, #372]	@ (801282c <dhcp_parse_reply+0x59c>)
 80126b8:	6a3b      	ldr	r3, [r7, #32]
 80126ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80126be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80126c2:	3b04      	subs	r3, #4
 80126c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80126c8:	8bfb      	ldrh	r3, [r7, #30]
 80126ca:	3304      	adds	r3, #4
 80126cc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80126ce:	8a7a      	ldrh	r2, [r7, #18]
 80126d0:	8bfb      	ldrh	r3, [r7, #30]
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d202      	bcs.n	80126dc <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80126d6:	f06f 0301 	mvn.w	r3, #1
 80126da:	e096      	b.n	801280a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80126dc:	8a7b      	ldrh	r3, [r7, #18]
 80126de:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80126e0:	6a3b      	ldr	r3, [r7, #32]
 80126e2:	3301      	adds	r3, #1
 80126e4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80126e6:	e79e      	b.n	8012626 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80126e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80126ec:	2b04      	cmp	r3, #4
 80126ee:	d106      	bne.n	80126fe <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7f6 ff20 	bl	8009538 <lwip_htonl>
 80126f8:	4603      	mov	r3, r0
 80126fa:	60bb      	str	r3, [r7, #8]
 80126fc:	e011      	b.n	8012722 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80126fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012702:	2b01      	cmp	r3, #1
 8012704:	d009      	beq.n	801271a <dhcp_parse_reply+0x48a>
 8012706:	4b43      	ldr	r3, [pc, #268]	@ (8012814 <dhcp_parse_reply+0x584>)
 8012708:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801270c:	4948      	ldr	r1, [pc, #288]	@ (8012830 <dhcp_parse_reply+0x5a0>)
 801270e:	4843      	ldr	r0, [pc, #268]	@ (801281c <dhcp_parse_reply+0x58c>)
 8012710:	f002 fe72 	bl	80153f8 <iprintf>
 8012714:	f06f 0305 	mvn.w	r3, #5
 8012718:	e077      	b.n	801280a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801271a:	f107 0308 	add.w	r3, r7, #8
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012722:	4a40      	ldr	r2, [pc, #256]	@ (8012824 <dhcp_parse_reply+0x594>)
 8012724:	6a3b      	ldr	r3, [r7, #32]
 8012726:	4413      	add	r3, r2
 8012728:	2201      	movs	r2, #1
 801272a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801272c:	68ba      	ldr	r2, [r7, #8]
 801272e:	493f      	ldr	r1, [pc, #252]	@ (801282c <dhcp_parse_reply+0x59c>)
 8012730:	6a3b      	ldr	r3, [r7, #32]
 8012732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012738:	895b      	ldrh	r3, [r3, #10]
 801273a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801273c:	429a      	cmp	r2, r3
 801273e:	d324      	bcc.n	801278a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8012740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012742:	895b      	ldrh	r3, [r3, #10]
 8012744:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801274c:	895b      	ldrh	r3, [r3, #10]
 801274e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8012754:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012756:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8012758:	429a      	cmp	r2, r3
 801275a:	d213      	bcs.n	8012784 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801275c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012764:	2b00      	cmp	r3, #0
 8012766:	d109      	bne.n	801277c <dhcp_parse_reply+0x4ec>
 8012768:	4b2a      	ldr	r3, [pc, #168]	@ (8012814 <dhcp_parse_reply+0x584>)
 801276a:	f240 629d 	movw	r2, #1693	@ 0x69d
 801276e:	4931      	ldr	r1, [pc, #196]	@ (8012834 <dhcp_parse_reply+0x5a4>)
 8012770:	482a      	ldr	r0, [pc, #168]	@ (801281c <dhcp_parse_reply+0x58c>)
 8012772:	f002 fe41 	bl	80153f8 <iprintf>
 8012776:	f06f 0305 	mvn.w	r3, #5
 801277a:	e046      	b.n	801280a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012782:	e002      	b.n	801278a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012784:	f06f 0301 	mvn.w	r3, #1
 8012788:	e03f      	b.n	801280a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801278a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00a      	beq.n	80127a6 <dhcp_parse_reply+0x516>
 8012790:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012792:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8012794:	429a      	cmp	r2, r3
 8012796:	d206      	bcs.n	80127a6 <dhcp_parse_reply+0x516>
 8012798:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801279a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801279c:	4413      	add	r3, r2
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	2bff      	cmp	r3, #255	@ 0xff
 80127a2:	f47f adb8 	bne.w	8012316 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80127a6:	4b1f      	ldr	r3, [pc, #124]	@ (8012824 <dhcp_parse_reply+0x594>)
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d018      	beq.n	80127e0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80127ae:	4b1f      	ldr	r3, [pc, #124]	@ (801282c <dhcp_parse_reply+0x59c>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80127b4:	4b1b      	ldr	r3, [pc, #108]	@ (8012824 <dhcp_parse_reply+0x594>)
 80127b6:	2200      	movs	r2, #0
 80127b8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2b01      	cmp	r3, #1
 80127be:	d102      	bne.n	80127c6 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80127c0:	2301      	movs	r3, #1
 80127c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127c4:	e00c      	b.n	80127e0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2b02      	cmp	r3, #2
 80127ca:	d102      	bne.n	80127d2 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80127cc:	2301      	movs	r3, #1
 80127ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80127d0:	e006      	b.n	80127e0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	2b03      	cmp	r3, #3
 80127d6:	d103      	bne.n	80127e0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80127d8:	2301      	movs	r3, #1
 80127da:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 80127dc:	2301      	movs	r3, #1
 80127de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80127e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d006      	beq.n	80127f4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80127e6:	2300      	movs	r3, #0
 80127e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 80127ea:	236c      	movs	r3, #108	@ 0x6c
 80127ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80127ee:	23ec      	movs	r3, #236	@ 0xec
 80127f0:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80127f2:	e56a      	b.n	80122ca <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80127f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d006      	beq.n	8012808 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80127fa:	2300      	movs	r3, #0
 80127fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 80127fe:	232c      	movs	r3, #44	@ 0x2c
 8012800:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012802:	236c      	movs	r3, #108	@ 0x6c
 8012804:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8012806:	e560      	b.n	80122ca <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8012808:	2300      	movs	r3, #0
}
 801280a:	4618      	mov	r0, r3
 801280c:	3740      	adds	r7, #64	@ 0x40
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	0801861c 	.word	0x0801861c
 8012818:	080188a4 	.word	0x080188a4
 801281c:	0801867c 	.word	0x0801867c
 8012820:	080188e8 	.word	0x080188e8
 8012824:	2000d144 	.word	0x2000d144
 8012828:	080188fc 	.word	0x080188fc
 801282c:	2000d124 	.word	0x2000d124
 8012830:	08018914 	.word	0x08018914
 8012834:	08018928 	.word	0x08018928

08012838 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b08a      	sub	sp, #40	@ 0x28
 801283c:	af00      	add	r7, sp, #0
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
 8012844:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8012846:	4b60      	ldr	r3, [pc, #384]	@ (80129c8 <dhcp_recv+0x190>)
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801284c:	6a3b      	ldr	r3, [r7, #32]
 801284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012850:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	2b00      	cmp	r3, #0
 801285c:	f000 809d 	beq.w	801299a <dhcp_recv+0x162>
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	791b      	ldrb	r3, [r3, #4]
 8012864:	2b00      	cmp	r3, #0
 8012866:	f000 8098 	beq.w	801299a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	895b      	ldrh	r3, [r3, #10]
 801286e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012870:	f240 8095 	bls.w	801299e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	2b02      	cmp	r3, #2
 801287a:	f040 8092 	bne.w	80129a2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801287e:	2300      	movs	r3, #0
 8012880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012884:	e012      	b.n	80128ac <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801288a:	6a3a      	ldr	r2, [r7, #32]
 801288c:	4413      	add	r3, r2
 801288e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8012892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012896:	69b9      	ldr	r1, [r7, #24]
 8012898:	440b      	add	r3, r1
 801289a:	7f1b      	ldrb	r3, [r3, #28]
 801289c:	429a      	cmp	r2, r3
 801289e:	f040 8082 	bne.w	80129a6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80128a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128a6:	3301      	adds	r3, #1
 80128a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80128ac:	6a3b      	ldr	r3, [r7, #32]
 80128ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80128b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d203      	bcs.n	80128c2 <dhcp_recv+0x8a>
 80128ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128be:	2b05      	cmp	r3, #5
 80128c0:	d9e1      	bls.n	8012886 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7f6 fe36 	bl	8009538 <lwip_htonl>
 80128cc:	4602      	mov	r2, r0
 80128ce:	69fb      	ldr	r3, [r7, #28]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d169      	bne.n	80129aa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80128d6:	69f9      	ldr	r1, [r7, #28]
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f7ff fcd9 	bl	8012290 <dhcp_parse_reply>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d164      	bne.n	80129ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80128e4:	4b39      	ldr	r3, [pc, #228]	@ (80129cc <dhcp_recv+0x194>)
 80128e6:	785b      	ldrb	r3, [r3, #1]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d062      	beq.n	80129b2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	685b      	ldr	r3, [r3, #4]
 80128f0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80128f2:	4b37      	ldr	r3, [pc, #220]	@ (80129d0 <dhcp_recv+0x198>)
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80128f8:	7cfb      	ldrb	r3, [r7, #19]
 80128fa:	2b05      	cmp	r3, #5
 80128fc:	d12a      	bne.n	8012954 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80128fe:	69fb      	ldr	r3, [r7, #28]
 8012900:	795b      	ldrb	r3, [r3, #5]
 8012902:	2b01      	cmp	r3, #1
 8012904:	d112      	bne.n	801292c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8012906:	6979      	ldr	r1, [r7, #20]
 8012908:	6a38      	ldr	r0, [r7, #32]
 801290a:	f7fe fe1d 	bl	8011548 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801290e:	6a3b      	ldr	r3, [r7, #32]
 8012910:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012914:	f003 0308 	and.w	r3, r3, #8
 8012918:	2b00      	cmp	r3, #0
 801291a:	d003      	beq.n	8012924 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801291c:	6a38      	ldr	r0, [r7, #32]
 801291e:	f7fe fb8b 	bl	8011038 <dhcp_check>
 8012922:	e049      	b.n	80129b8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012924:	6a38      	ldr	r0, [r7, #32]
 8012926:	f7ff f86d 	bl	8011a04 <dhcp_bind>
 801292a:	e045      	b.n	80129b8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	795b      	ldrb	r3, [r3, #5]
 8012930:	2b03      	cmp	r3, #3
 8012932:	d007      	beq.n	8012944 <dhcp_recv+0x10c>
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	795b      	ldrb	r3, [r3, #5]
 8012938:	2b04      	cmp	r3, #4
 801293a:	d003      	beq.n	8012944 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012940:	2b05      	cmp	r3, #5
 8012942:	d139      	bne.n	80129b8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8012944:	6979      	ldr	r1, [r7, #20]
 8012946:	6a38      	ldr	r0, [r7, #32]
 8012948:	f7fe fdfe 	bl	8011548 <dhcp_handle_ack>
      dhcp_bind(netif);
 801294c:	6a38      	ldr	r0, [r7, #32]
 801294e:	f7ff f859 	bl	8011a04 <dhcp_bind>
 8012952:	e031      	b.n	80129b8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012954:	7cfb      	ldrb	r3, [r7, #19]
 8012956:	2b06      	cmp	r3, #6
 8012958:	d113      	bne.n	8012982 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801295a:	69fb      	ldr	r3, [r7, #28]
 801295c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801295e:	2b03      	cmp	r3, #3
 8012960:	d00b      	beq.n	801297a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	795b      	ldrb	r3, [r3, #5]
 8012966:	2b01      	cmp	r3, #1
 8012968:	d007      	beq.n	801297a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801296a:	69fb      	ldr	r3, [r7, #28]
 801296c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801296e:	2b04      	cmp	r3, #4
 8012970:	d003      	beq.n	801297a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	795b      	ldrb	r3, [r3, #5]
 8012976:	2b05      	cmp	r3, #5
 8012978:	d103      	bne.n	8012982 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801297a:	6a38      	ldr	r0, [r7, #32]
 801297c:	f7fe fb42 	bl	8011004 <dhcp_handle_nak>
 8012980:	e01a      	b.n	80129b8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8012982:	7cfb      	ldrb	r3, [r7, #19]
 8012984:	2b02      	cmp	r3, #2
 8012986:	d116      	bne.n	80129b6 <dhcp_recv+0x17e>
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	795b      	ldrb	r3, [r3, #5]
 801298c:	2b06      	cmp	r3, #6
 801298e:	d112      	bne.n	80129b6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8012990:	6979      	ldr	r1, [r7, #20]
 8012992:	6a38      	ldr	r0, [r7, #32]
 8012994:	f7fe fb84 	bl	80110a0 <dhcp_handle_offer>
 8012998:	e00e      	b.n	80129b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801299a:	bf00      	nop
 801299c:	e00c      	b.n	80129b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801299e:	bf00      	nop
 80129a0:	e00a      	b.n	80129b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80129a2:	bf00      	nop
 80129a4:	e008      	b.n	80129b8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80129a6:	bf00      	nop
 80129a8:	e006      	b.n	80129b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80129aa:	bf00      	nop
 80129ac:	e004      	b.n	80129b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80129ae:	bf00      	nop
 80129b0:	e002      	b.n	80129b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80129b2:	bf00      	nop
 80129b4:	e000      	b.n	80129b8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80129b6:	bf00      	nop
  pbuf_free(p);
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f7f8 f8ed 	bl	800ab98 <pbuf_free>
}
 80129be:	bf00      	nop
 80129c0:	3728      	adds	r7, #40	@ 0x28
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	2000a188 	.word	0x2000a188
 80129cc:	2000d144 	.word	0x2000d144
 80129d0:	2000d124 	.word	0x2000d124

080129d4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b088      	sub	sp, #32
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	603b      	str	r3, [r7, #0]
 80129e0:	4613      	mov	r3, r2
 80129e2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d108      	bne.n	80129fc <dhcp_create_msg+0x28>
 80129ea:	4b5f      	ldr	r3, [pc, #380]	@ (8012b68 <dhcp_create_msg+0x194>)
 80129ec:	f240 7269 	movw	r2, #1897	@ 0x769
 80129f0:	495e      	ldr	r1, [pc, #376]	@ (8012b6c <dhcp_create_msg+0x198>)
 80129f2:	485f      	ldr	r0, [pc, #380]	@ (8012b70 <dhcp_create_msg+0x19c>)
 80129f4:	f002 fd00 	bl	80153f8 <iprintf>
 80129f8:	2300      	movs	r3, #0
 80129fa:	e0b1      	b.n	8012b60 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d108      	bne.n	8012a14 <dhcp_create_msg+0x40>
 8012a02:	4b59      	ldr	r3, [pc, #356]	@ (8012b68 <dhcp_create_msg+0x194>)
 8012a04:	f240 726a 	movw	r2, #1898	@ 0x76a
 8012a08:	495a      	ldr	r1, [pc, #360]	@ (8012b74 <dhcp_create_msg+0x1a0>)
 8012a0a:	4859      	ldr	r0, [pc, #356]	@ (8012b70 <dhcp_create_msg+0x19c>)
 8012a0c:	f002 fcf4 	bl	80153f8 <iprintf>
 8012a10:	2300      	movs	r3, #0
 8012a12:	e0a5      	b.n	8012b60 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012a14:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012a18:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8012a1c:	2036      	movs	r0, #54	@ 0x36
 8012a1e:	f7f7 fdd7 	bl	800a5d0 <pbuf_alloc>
 8012a22:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012a24:	69bb      	ldr	r3, [r7, #24]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d101      	bne.n	8012a2e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	e098      	b.n	8012b60 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	895b      	ldrh	r3, [r3, #10]
 8012a32:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8012a36:	d206      	bcs.n	8012a46 <dhcp_create_msg+0x72>
 8012a38:	4b4b      	ldr	r3, [pc, #300]	@ (8012b68 <dhcp_create_msg+0x194>)
 8012a3a:	f240 7271 	movw	r2, #1905	@ 0x771
 8012a3e:	494e      	ldr	r1, [pc, #312]	@ (8012b78 <dhcp_create_msg+0x1a4>)
 8012a40:	484b      	ldr	r0, [pc, #300]	@ (8012b70 <dhcp_create_msg+0x19c>)
 8012a42:	f002 fcd9 	bl	80153f8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8012a46:	79fb      	ldrb	r3, [r7, #7]
 8012a48:	2b03      	cmp	r3, #3
 8012a4a:	d103      	bne.n	8012a54 <dhcp_create_msg+0x80>
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	795b      	ldrb	r3, [r3, #5]
 8012a50:	2b03      	cmp	r3, #3
 8012a52:	d10d      	bne.n	8012a70 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	799b      	ldrb	r3, [r3, #6]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d105      	bne.n	8012a68 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8012a5c:	f002 fbcc 	bl	80151f8 <rand>
 8012a60:	4603      	mov	r3, r0
 8012a62:	461a      	mov	r2, r3
 8012a64:	4b45      	ldr	r3, [pc, #276]	@ (8012b7c <dhcp_create_msg+0x1a8>)
 8012a66:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8012a68:	4b44      	ldr	r3, [pc, #272]	@ (8012b7c <dhcp_create_msg+0x1a8>)
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8012a70:	69bb      	ldr	r3, [r7, #24]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8012a76:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8012a7a:	2100      	movs	r1, #0
 8012a7c:	6978      	ldr	r0, [r7, #20]
 8012a7e:	f002 fd20 	bl	80154c2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	2201      	movs	r2, #1
 8012a86:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7f6 fd4b 	bl	8009538 <lwip_htonl>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012aa8:	79fb      	ldrb	r3, [r7, #7]
 8012aaa:	2b08      	cmp	r3, #8
 8012aac:	d010      	beq.n	8012ad0 <dhcp_create_msg+0xfc>
 8012aae:	79fb      	ldrb	r3, [r7, #7]
 8012ab0:	2b04      	cmp	r3, #4
 8012ab2:	d00d      	beq.n	8012ad0 <dhcp_create_msg+0xfc>
 8012ab4:	79fb      	ldrb	r3, [r7, #7]
 8012ab6:	2b07      	cmp	r3, #7
 8012ab8:	d00a      	beq.n	8012ad0 <dhcp_create_msg+0xfc>
 8012aba:	79fb      	ldrb	r3, [r7, #7]
 8012abc:	2b03      	cmp	r3, #3
 8012abe:	d10c      	bne.n	8012ada <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012ac4:	2b05      	cmp	r3, #5
 8012ac6:	d003      	beq.n	8012ad0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	795b      	ldrb	r3, [r3, #5]
 8012acc:	2b04      	cmp	r3, #4
 8012ace:	d104      	bne.n	8012ada <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	3304      	adds	r3, #4
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012ada:	2300      	movs	r3, #0
 8012adc:	83fb      	strh	r3, [r7, #30]
 8012ade:	e00c      	b.n	8012afa <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012ae0:	8bfa      	ldrh	r2, [r7, #30]
 8012ae2:	8bfb      	ldrh	r3, [r7, #30]
 8012ae4:	68f9      	ldr	r1, [r7, #12]
 8012ae6:	440a      	add	r2, r1
 8012ae8:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8012aec:	697a      	ldr	r2, [r7, #20]
 8012aee:	4413      	add	r3, r2
 8012af0:	460a      	mov	r2, r1
 8012af2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012af4:	8bfb      	ldrh	r3, [r7, #30]
 8012af6:	3301      	adds	r3, #1
 8012af8:	83fb      	strh	r3, [r7, #30]
 8012afa:	8bfb      	ldrh	r3, [r7, #30]
 8012afc:	2b05      	cmp	r3, #5
 8012afe:	d9ef      	bls.n	8012ae0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	2200      	movs	r2, #0
 8012b04:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8012b08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8012b12:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8012b16:	2200      	movs	r2, #0
 8012b18:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8012b1c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8012b20:	2200      	movs	r2, #0
 8012b22:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8012b26:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012b30:	2301      	movs	r3, #1
 8012b32:	2235      	movs	r2, #53	@ 0x35
 8012b34:	2000      	movs	r0, #0
 8012b36:	f7ff fadb 	bl	80120f0 <dhcp_option>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012b44:	79fa      	ldrb	r2, [r7, #7]
 8012b46:	8a7b      	ldrh	r3, [r7, #18]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7ff fb05 	bl	8012158 <dhcp_option_byte>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d002      	beq.n	8012b5e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	8a7a      	ldrh	r2, [r7, #18]
 8012b5c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8012b5e:	69bb      	ldr	r3, [r7, #24]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3720      	adds	r7, #32
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	0801861c 	.word	0x0801861c
 8012b6c:	0801893c 	.word	0x0801893c
 8012b70:	0801867c 	.word	0x0801867c
 8012b74:	0801895c 	.word	0x0801895c
 8012b78:	0801897c 	.word	0x0801897c
 8012b7c:	2000d154 	.word	0x2000d154

08012b80 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	4603      	mov	r3, r0
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
 8012b8c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8012b8e:	89fb      	ldrh	r3, [r7, #14]
 8012b90:	1c5a      	adds	r2, r3, #1
 8012b92:	81fa      	strh	r2, [r7, #14]
 8012b94:	461a      	mov	r2, r3
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	4413      	add	r3, r2
 8012b9a:	22ff      	movs	r2, #255	@ 0xff
 8012b9c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012b9e:	e007      	b.n	8012bb0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8012ba0:	89fb      	ldrh	r3, [r7, #14]
 8012ba2:	1c5a      	adds	r2, r3, #1
 8012ba4:	81fa      	strh	r2, [r7, #14]
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	4413      	add	r3, r2
 8012bac:	2200      	movs	r2, #0
 8012bae:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012bb0:	89fb      	ldrh	r3, [r7, #14]
 8012bb2:	2b43      	cmp	r3, #67	@ 0x43
 8012bb4:	d904      	bls.n	8012bc0 <dhcp_option_trailer+0x40>
 8012bb6:	89fb      	ldrh	r3, [r7, #14]
 8012bb8:	f003 0303 	and.w	r3, r3, #3
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <dhcp_option_trailer+0x46>
 8012bc0:	89fb      	ldrh	r3, [r7, #14]
 8012bc2:	2b43      	cmp	r3, #67	@ 0x43
 8012bc4:	d9ec      	bls.n	8012ba0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012bc6:	89fb      	ldrh	r3, [r7, #14]
 8012bc8:	33f0      	adds	r3, #240	@ 0xf0
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	4619      	mov	r1, r3
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7f7 fe5c 	bl	800a88c <pbuf_realloc>
}
 8012bd4:	bf00      	nop
 8012bd6:	3710      	adds	r7, #16
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b085      	sub	sp, #20
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d017      	beq.n	8012c1a <dhcp_supplied_address+0x3e>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d013      	beq.n	8012c1a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bf6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	795b      	ldrb	r3, [r3, #5]
 8012bfc:	2b0a      	cmp	r3, #10
 8012bfe:	d007      	beq.n	8012c10 <dhcp_supplied_address+0x34>
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	795b      	ldrb	r3, [r3, #5]
 8012c04:	2b05      	cmp	r3, #5
 8012c06:	d003      	beq.n	8012c10 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012c0c:	2b04      	cmp	r3, #4
 8012c0e:	d101      	bne.n	8012c14 <dhcp_supplied_address+0x38>
 8012c10:	2301      	movs	r3, #1
 8012c12:	e000      	b.n	8012c16 <dhcp_supplied_address+0x3a>
 8012c14:	2300      	movs	r3, #0
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	e000      	b.n	8012c1c <dhcp_supplied_address+0x40>
  }
  return 0;
 8012c1a:	2300      	movs	r3, #0
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3714      	adds	r7, #20
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012c30:	4915      	ldr	r1, [pc, #84]	@ (8012c88 <etharp_free_entry+0x60>)
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	4613      	mov	r3, r2
 8012c36:	005b      	lsls	r3, r3, #1
 8012c38:	4413      	add	r3, r2
 8012c3a:	00db      	lsls	r3, r3, #3
 8012c3c:	440b      	add	r3, r1
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d013      	beq.n	8012c6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012c44:	4910      	ldr	r1, [pc, #64]	@ (8012c88 <etharp_free_entry+0x60>)
 8012c46:	687a      	ldr	r2, [r7, #4]
 8012c48:	4613      	mov	r3, r2
 8012c4a:	005b      	lsls	r3, r3, #1
 8012c4c:	4413      	add	r3, r2
 8012c4e:	00db      	lsls	r3, r3, #3
 8012c50:	440b      	add	r3, r1
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7f7 ff9f 	bl	800ab98 <pbuf_free>
    arp_table[i].q = NULL;
 8012c5a:	490b      	ldr	r1, [pc, #44]	@ (8012c88 <etharp_free_entry+0x60>)
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	4613      	mov	r3, r2
 8012c60:	005b      	lsls	r3, r3, #1
 8012c62:	4413      	add	r3, r2
 8012c64:	00db      	lsls	r3, r3, #3
 8012c66:	440b      	add	r3, r1
 8012c68:	2200      	movs	r2, #0
 8012c6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012c6c:	4906      	ldr	r1, [pc, #24]	@ (8012c88 <etharp_free_entry+0x60>)
 8012c6e:	687a      	ldr	r2, [r7, #4]
 8012c70:	4613      	mov	r3, r2
 8012c72:	005b      	lsls	r3, r3, #1
 8012c74:	4413      	add	r3, r2
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	440b      	add	r3, r1
 8012c7a:	3314      	adds	r3, #20
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012c80:	bf00      	nop
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	2000d158 	.word	0x2000d158

08012c8c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c92:	2300      	movs	r3, #0
 8012c94:	607b      	str	r3, [r7, #4]
 8012c96:	e096      	b.n	8012dc6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012c98:	494f      	ldr	r1, [pc, #316]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	005b      	lsls	r3, r3, #1
 8012ca0:	4413      	add	r3, r2
 8012ca2:	00db      	lsls	r3, r3, #3
 8012ca4:	440b      	add	r3, r1
 8012ca6:	3314      	adds	r3, #20
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012cac:	78fb      	ldrb	r3, [r7, #3]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f000 8086 	beq.w	8012dc0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012cb4:	4948      	ldr	r1, [pc, #288]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012cb6:	687a      	ldr	r2, [r7, #4]
 8012cb8:	4613      	mov	r3, r2
 8012cba:	005b      	lsls	r3, r3, #1
 8012cbc:	4413      	add	r3, r2
 8012cbe:	00db      	lsls	r3, r3, #3
 8012cc0:	440b      	add	r3, r1
 8012cc2:	3312      	adds	r3, #18
 8012cc4:	881b      	ldrh	r3, [r3, #0]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	b298      	uxth	r0, r3
 8012cca:	4943      	ldr	r1, [pc, #268]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012ccc:	687a      	ldr	r2, [r7, #4]
 8012cce:	4613      	mov	r3, r2
 8012cd0:	005b      	lsls	r3, r3, #1
 8012cd2:	4413      	add	r3, r2
 8012cd4:	00db      	lsls	r3, r3, #3
 8012cd6:	440b      	add	r3, r1
 8012cd8:	3312      	adds	r3, #18
 8012cda:	4602      	mov	r2, r0
 8012cdc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012cde:	493e      	ldr	r1, [pc, #248]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	4413      	add	r3, r2
 8012ce8:	00db      	lsls	r3, r3, #3
 8012cea:	440b      	add	r3, r1
 8012cec:	3312      	adds	r3, #18
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012cf4:	d215      	bcs.n	8012d22 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012cf6:	4938      	ldr	r1, [pc, #224]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	005b      	lsls	r3, r3, #1
 8012cfe:	4413      	add	r3, r2
 8012d00:	00db      	lsls	r3, r3, #3
 8012d02:	440b      	add	r3, r1
 8012d04:	3314      	adds	r3, #20
 8012d06:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d10e      	bne.n	8012d2a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012d0c:	4932      	ldr	r1, [pc, #200]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	4613      	mov	r3, r2
 8012d12:	005b      	lsls	r3, r3, #1
 8012d14:	4413      	add	r3, r2
 8012d16:	00db      	lsls	r3, r3, #3
 8012d18:	440b      	add	r3, r1
 8012d1a:	3312      	adds	r3, #18
 8012d1c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012d1e:	2b04      	cmp	r3, #4
 8012d20:	d903      	bls.n	8012d2a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7ff ff80 	bl	8012c28 <etharp_free_entry>
 8012d28:	e04a      	b.n	8012dc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012d2a:	492b      	ldr	r1, [pc, #172]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	4613      	mov	r3, r2
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	4413      	add	r3, r2
 8012d34:	00db      	lsls	r3, r3, #3
 8012d36:	440b      	add	r3, r1
 8012d38:	3314      	adds	r3, #20
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	2b03      	cmp	r3, #3
 8012d3e:	d10a      	bne.n	8012d56 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012d40:	4925      	ldr	r1, [pc, #148]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	4613      	mov	r3, r2
 8012d46:	005b      	lsls	r3, r3, #1
 8012d48:	4413      	add	r3, r2
 8012d4a:	00db      	lsls	r3, r3, #3
 8012d4c:	440b      	add	r3, r1
 8012d4e:	3314      	adds	r3, #20
 8012d50:	2204      	movs	r2, #4
 8012d52:	701a      	strb	r2, [r3, #0]
 8012d54:	e034      	b.n	8012dc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012d56:	4920      	ldr	r1, [pc, #128]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	4613      	mov	r3, r2
 8012d5c:	005b      	lsls	r3, r3, #1
 8012d5e:	4413      	add	r3, r2
 8012d60:	00db      	lsls	r3, r3, #3
 8012d62:	440b      	add	r3, r1
 8012d64:	3314      	adds	r3, #20
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	2b04      	cmp	r3, #4
 8012d6a:	d10a      	bne.n	8012d82 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012d6c:	491a      	ldr	r1, [pc, #104]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	4613      	mov	r3, r2
 8012d72:	005b      	lsls	r3, r3, #1
 8012d74:	4413      	add	r3, r2
 8012d76:	00db      	lsls	r3, r3, #3
 8012d78:	440b      	add	r3, r1
 8012d7a:	3314      	adds	r3, #20
 8012d7c:	2202      	movs	r2, #2
 8012d7e:	701a      	strb	r2, [r3, #0]
 8012d80:	e01e      	b.n	8012dc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012d82:	4915      	ldr	r1, [pc, #84]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	4613      	mov	r3, r2
 8012d88:	005b      	lsls	r3, r3, #1
 8012d8a:	4413      	add	r3, r2
 8012d8c:	00db      	lsls	r3, r3, #3
 8012d8e:	440b      	add	r3, r1
 8012d90:	3314      	adds	r3, #20
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d113      	bne.n	8012dc0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012d98:	490f      	ldr	r1, [pc, #60]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	005b      	lsls	r3, r3, #1
 8012da0:	4413      	add	r3, r2
 8012da2:	00db      	lsls	r3, r3, #3
 8012da4:	440b      	add	r3, r1
 8012da6:	3308      	adds	r3, #8
 8012da8:	6818      	ldr	r0, [r3, #0]
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	4613      	mov	r3, r2
 8012dae:	005b      	lsls	r3, r3, #1
 8012db0:	4413      	add	r3, r2
 8012db2:	00db      	lsls	r3, r3, #3
 8012db4:	4a08      	ldr	r2, [pc, #32]	@ (8012dd8 <etharp_tmr+0x14c>)
 8012db6:	4413      	add	r3, r2
 8012db8:	3304      	adds	r3, #4
 8012dba:	4619      	mov	r1, r3
 8012dbc:	f000 fe72 	bl	8013aa4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	607b      	str	r3, [r7, #4]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2b09      	cmp	r3, #9
 8012dca:	f77f af65 	ble.w	8012c98 <etharp_tmr+0xc>
      }
    }
  }
}
 8012dce:	bf00      	nop
 8012dd0:	bf00      	nop
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	2000d158 	.word	0x2000d158

08012ddc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b08a      	sub	sp, #40	@ 0x28
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	460b      	mov	r3, r1
 8012de6:	607a      	str	r2, [r7, #4]
 8012de8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012dea:	230a      	movs	r3, #10
 8012dec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012dee:	230a      	movs	r3, #10
 8012df0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012df2:	230a      	movs	r3, #10
 8012df4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012df6:	2300      	movs	r3, #0
 8012df8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012dfa:	230a      	movs	r3, #10
 8012dfc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	83bb      	strh	r3, [r7, #28]
 8012e02:	2300      	movs	r3, #0
 8012e04:	837b      	strh	r3, [r7, #26]
 8012e06:	2300      	movs	r3, #0
 8012e08:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	843b      	strh	r3, [r7, #32]
 8012e0e:	e0ae      	b.n	8012f6e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012e10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e14:	49a6      	ldr	r1, [pc, #664]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012e16:	4613      	mov	r3, r2
 8012e18:	005b      	lsls	r3, r3, #1
 8012e1a:	4413      	add	r3, r2
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	440b      	add	r3, r1
 8012e20:	3314      	adds	r3, #20
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012e26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012e2a:	2b0a      	cmp	r3, #10
 8012e2c:	d105      	bne.n	8012e3a <etharp_find_entry+0x5e>
 8012e2e:	7dfb      	ldrb	r3, [r7, #23]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d102      	bne.n	8012e3a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012e34:	8c3b      	ldrh	r3, [r7, #32]
 8012e36:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012e38:	e095      	b.n	8012f66 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	f000 8092 	beq.w	8012f66 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d009      	beq.n	8012e5c <etharp_find_entry+0x80>
 8012e48:	7dfb      	ldrb	r3, [r7, #23]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d806      	bhi.n	8012e5c <etharp_find_entry+0x80>
 8012e4e:	4b99      	ldr	r3, [pc, #612]	@ (80130b4 <etharp_find_entry+0x2d8>)
 8012e50:	f240 1223 	movw	r2, #291	@ 0x123
 8012e54:	4998      	ldr	r1, [pc, #608]	@ (80130b8 <etharp_find_entry+0x2dc>)
 8012e56:	4899      	ldr	r0, [pc, #612]	@ (80130bc <etharp_find_entry+0x2e0>)
 8012e58:	f002 face 	bl	80153f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d020      	beq.n	8012ea4 <etharp_find_entry+0xc8>
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	6819      	ldr	r1, [r3, #0]
 8012e66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e6a:	4891      	ldr	r0, [pc, #580]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012e6c:	4613      	mov	r3, r2
 8012e6e:	005b      	lsls	r3, r3, #1
 8012e70:	4413      	add	r3, r2
 8012e72:	00db      	lsls	r3, r3, #3
 8012e74:	4403      	add	r3, r0
 8012e76:	3304      	adds	r3, #4
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4299      	cmp	r1, r3
 8012e7c:	d112      	bne.n	8012ea4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d00c      	beq.n	8012e9e <etharp_find_entry+0xc2>
 8012e84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e88:	4989      	ldr	r1, [pc, #548]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012e8a:	4613      	mov	r3, r2
 8012e8c:	005b      	lsls	r3, r3, #1
 8012e8e:	4413      	add	r3, r2
 8012e90:	00db      	lsls	r3, r3, #3
 8012e92:	440b      	add	r3, r1
 8012e94:	3308      	adds	r3, #8
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	687a      	ldr	r2, [r7, #4]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d102      	bne.n	8012ea4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012e9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ea2:	e100      	b.n	80130a6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012ea4:	7dfb      	ldrb	r3, [r7, #23]
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	d140      	bne.n	8012f2c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012eaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012eae:	4980      	ldr	r1, [pc, #512]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012eb0:	4613      	mov	r3, r2
 8012eb2:	005b      	lsls	r3, r3, #1
 8012eb4:	4413      	add	r3, r2
 8012eb6:	00db      	lsls	r3, r3, #3
 8012eb8:	440b      	add	r3, r1
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d01a      	beq.n	8012ef6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012ec0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ec4:	497a      	ldr	r1, [pc, #488]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012ec6:	4613      	mov	r3, r2
 8012ec8:	005b      	lsls	r3, r3, #1
 8012eca:	4413      	add	r3, r2
 8012ecc:	00db      	lsls	r3, r3, #3
 8012ece:	440b      	add	r3, r1
 8012ed0:	3312      	adds	r3, #18
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	8bba      	ldrh	r2, [r7, #28]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d845      	bhi.n	8012f66 <etharp_find_entry+0x18a>
            old_queue = i;
 8012eda:	8c3b      	ldrh	r3, [r7, #32]
 8012edc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012ede:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ee2:	4973      	ldr	r1, [pc, #460]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012ee4:	4613      	mov	r3, r2
 8012ee6:	005b      	lsls	r3, r3, #1
 8012ee8:	4413      	add	r3, r2
 8012eea:	00db      	lsls	r3, r3, #3
 8012eec:	440b      	add	r3, r1
 8012eee:	3312      	adds	r3, #18
 8012ef0:	881b      	ldrh	r3, [r3, #0]
 8012ef2:	83bb      	strh	r3, [r7, #28]
 8012ef4:	e037      	b.n	8012f66 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012ef6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012efa:	496d      	ldr	r1, [pc, #436]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012efc:	4613      	mov	r3, r2
 8012efe:	005b      	lsls	r3, r3, #1
 8012f00:	4413      	add	r3, r2
 8012f02:	00db      	lsls	r3, r3, #3
 8012f04:	440b      	add	r3, r1
 8012f06:	3312      	adds	r3, #18
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	8b7a      	ldrh	r2, [r7, #26]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d82a      	bhi.n	8012f66 <etharp_find_entry+0x18a>
            old_pending = i;
 8012f10:	8c3b      	ldrh	r3, [r7, #32]
 8012f12:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012f14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f18:	4965      	ldr	r1, [pc, #404]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012f1a:	4613      	mov	r3, r2
 8012f1c:	005b      	lsls	r3, r3, #1
 8012f1e:	4413      	add	r3, r2
 8012f20:	00db      	lsls	r3, r3, #3
 8012f22:	440b      	add	r3, r1
 8012f24:	3312      	adds	r3, #18
 8012f26:	881b      	ldrh	r3, [r3, #0]
 8012f28:	837b      	strh	r3, [r7, #26]
 8012f2a:	e01c      	b.n	8012f66 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012f2c:	7dfb      	ldrb	r3, [r7, #23]
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	d919      	bls.n	8012f66 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012f32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f36:	495e      	ldr	r1, [pc, #376]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012f38:	4613      	mov	r3, r2
 8012f3a:	005b      	lsls	r3, r3, #1
 8012f3c:	4413      	add	r3, r2
 8012f3e:	00db      	lsls	r3, r3, #3
 8012f40:	440b      	add	r3, r1
 8012f42:	3312      	adds	r3, #18
 8012f44:	881b      	ldrh	r3, [r3, #0]
 8012f46:	8b3a      	ldrh	r2, [r7, #24]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d80c      	bhi.n	8012f66 <etharp_find_entry+0x18a>
            old_stable = i;
 8012f4c:	8c3b      	ldrh	r3, [r7, #32]
 8012f4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012f50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f54:	4956      	ldr	r1, [pc, #344]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012f56:	4613      	mov	r3, r2
 8012f58:	005b      	lsls	r3, r3, #1
 8012f5a:	4413      	add	r3, r2
 8012f5c:	00db      	lsls	r3, r3, #3
 8012f5e:	440b      	add	r3, r1
 8012f60:	3312      	adds	r3, #18
 8012f62:	881b      	ldrh	r3, [r3, #0]
 8012f64:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f66:	8c3b      	ldrh	r3, [r7, #32]
 8012f68:	3301      	adds	r3, #1
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	843b      	strh	r3, [r7, #32]
 8012f6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012f72:	2b09      	cmp	r3, #9
 8012f74:	f77f af4c 	ble.w	8012e10 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012f78:	7afb      	ldrb	r3, [r7, #11]
 8012f7a:	f003 0302 	and.w	r3, r3, #2
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d108      	bne.n	8012f94 <etharp_find_entry+0x1b8>
 8012f82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012f86:	2b0a      	cmp	r3, #10
 8012f88:	d107      	bne.n	8012f9a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012f8a:	7afb      	ldrb	r3, [r7, #11]
 8012f8c:	f003 0301 	and.w	r3, r3, #1
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d102      	bne.n	8012f9a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012f94:	f04f 33ff 	mov.w	r3, #4294967295
 8012f98:	e085      	b.n	80130a6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012f9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012f9e:	2b09      	cmp	r3, #9
 8012fa0:	dc02      	bgt.n	8012fa8 <etharp_find_entry+0x1cc>
    i = empty;
 8012fa2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012fa4:	843b      	strh	r3, [r7, #32]
 8012fa6:	e039      	b.n	801301c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012fa8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012fac:	2b09      	cmp	r3, #9
 8012fae:	dc14      	bgt.n	8012fda <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012fb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fb2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012fb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fb8:	493d      	ldr	r1, [pc, #244]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8012fba:	4613      	mov	r3, r2
 8012fbc:	005b      	lsls	r3, r3, #1
 8012fbe:	4413      	add	r3, r2
 8012fc0:	00db      	lsls	r3, r3, #3
 8012fc2:	440b      	add	r3, r1
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d018      	beq.n	8012ffc <etharp_find_entry+0x220>
 8012fca:	4b3a      	ldr	r3, [pc, #232]	@ (80130b4 <etharp_find_entry+0x2d8>)
 8012fcc:	f240 126d 	movw	r2, #365	@ 0x16d
 8012fd0:	493b      	ldr	r1, [pc, #236]	@ (80130c0 <etharp_find_entry+0x2e4>)
 8012fd2:	483a      	ldr	r0, [pc, #232]	@ (80130bc <etharp_find_entry+0x2e0>)
 8012fd4:	f002 fa10 	bl	80153f8 <iprintf>
 8012fd8:	e010      	b.n	8012ffc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012fda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012fde:	2b09      	cmp	r3, #9
 8012fe0:	dc02      	bgt.n	8012fe8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012fe2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012fe4:	843b      	strh	r3, [r7, #32]
 8012fe6:	e009      	b.n	8012ffc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012fe8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012fec:	2b09      	cmp	r3, #9
 8012fee:	dc02      	bgt.n	8012ff6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012ff0:	8bfb      	ldrh	r3, [r7, #30]
 8012ff2:	843b      	strh	r3, [r7, #32]
 8012ff4:	e002      	b.n	8012ffc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8012ffa:	e054      	b.n	80130a6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012ffc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013000:	2b09      	cmp	r3, #9
 8013002:	dd06      	ble.n	8013012 <etharp_find_entry+0x236>
 8013004:	4b2b      	ldr	r3, [pc, #172]	@ (80130b4 <etharp_find_entry+0x2d8>)
 8013006:	f240 127f 	movw	r2, #383	@ 0x17f
 801300a:	492e      	ldr	r1, [pc, #184]	@ (80130c4 <etharp_find_entry+0x2e8>)
 801300c:	482b      	ldr	r0, [pc, #172]	@ (80130bc <etharp_find_entry+0x2e0>)
 801300e:	f002 f9f3 	bl	80153f8 <iprintf>
    etharp_free_entry(i);
 8013012:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff fe06 	bl	8012c28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801301c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013020:	2b09      	cmp	r3, #9
 8013022:	dd06      	ble.n	8013032 <etharp_find_entry+0x256>
 8013024:	4b23      	ldr	r3, [pc, #140]	@ (80130b4 <etharp_find_entry+0x2d8>)
 8013026:	f240 1283 	movw	r2, #387	@ 0x183
 801302a:	4926      	ldr	r1, [pc, #152]	@ (80130c4 <etharp_find_entry+0x2e8>)
 801302c:	4823      	ldr	r0, [pc, #140]	@ (80130bc <etharp_find_entry+0x2e0>)
 801302e:	f002 f9e3 	bl	80153f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013036:	491e      	ldr	r1, [pc, #120]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8013038:	4613      	mov	r3, r2
 801303a:	005b      	lsls	r3, r3, #1
 801303c:	4413      	add	r3, r2
 801303e:	00db      	lsls	r3, r3, #3
 8013040:	440b      	add	r3, r1
 8013042:	3314      	adds	r3, #20
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d006      	beq.n	8013058 <etharp_find_entry+0x27c>
 801304a:	4b1a      	ldr	r3, [pc, #104]	@ (80130b4 <etharp_find_entry+0x2d8>)
 801304c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013050:	491d      	ldr	r1, [pc, #116]	@ (80130c8 <etharp_find_entry+0x2ec>)
 8013052:	481a      	ldr	r0, [pc, #104]	@ (80130bc <etharp_find_entry+0x2e0>)
 8013054:	f002 f9d0 	bl	80153f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d00b      	beq.n	8013076 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801305e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	6819      	ldr	r1, [r3, #0]
 8013066:	4812      	ldr	r0, [pc, #72]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8013068:	4613      	mov	r3, r2
 801306a:	005b      	lsls	r3, r3, #1
 801306c:	4413      	add	r3, r2
 801306e:	00db      	lsls	r3, r3, #3
 8013070:	4403      	add	r3, r0
 8013072:	3304      	adds	r3, #4
 8013074:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013076:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801307a:	490d      	ldr	r1, [pc, #52]	@ (80130b0 <etharp_find_entry+0x2d4>)
 801307c:	4613      	mov	r3, r2
 801307e:	005b      	lsls	r3, r3, #1
 8013080:	4413      	add	r3, r2
 8013082:	00db      	lsls	r3, r3, #3
 8013084:	440b      	add	r3, r1
 8013086:	3312      	adds	r3, #18
 8013088:	2200      	movs	r2, #0
 801308a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801308c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013090:	4907      	ldr	r1, [pc, #28]	@ (80130b0 <etharp_find_entry+0x2d4>)
 8013092:	4613      	mov	r3, r2
 8013094:	005b      	lsls	r3, r3, #1
 8013096:	4413      	add	r3, r2
 8013098:	00db      	lsls	r3, r3, #3
 801309a:	440b      	add	r3, r1
 801309c:	3308      	adds	r3, #8
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80130a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3728      	adds	r7, #40	@ 0x28
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	2000d158 	.word	0x2000d158
 80130b4:	080189bc 	.word	0x080189bc
 80130b8:	080189f4 	.word	0x080189f4
 80130bc:	08018a34 	.word	0x08018a34
 80130c0:	08018a5c 	.word	0x08018a5c
 80130c4:	08018a74 	.word	0x08018a74
 80130c8:	08018a88 	.word	0x08018a88

080130cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b088      	sub	sp, #32
 80130d0:	af02      	add	r7, sp, #8
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
 80130d8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130e0:	2b06      	cmp	r3, #6
 80130e2:	d006      	beq.n	80130f2 <etharp_update_arp_entry+0x26>
 80130e4:	4b48      	ldr	r3, [pc, #288]	@ (8013208 <etharp_update_arp_entry+0x13c>)
 80130e6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80130ea:	4948      	ldr	r1, [pc, #288]	@ (801320c <etharp_update_arp_entry+0x140>)
 80130ec:	4848      	ldr	r0, [pc, #288]	@ (8013210 <etharp_update_arp_entry+0x144>)
 80130ee:	f002 f983 	bl	80153f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d012      	beq.n	801311e <etharp_update_arp_entry+0x52>
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d00e      	beq.n	801311e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	68f9      	ldr	r1, [r7, #12]
 8013106:	4618      	mov	r0, r3
 8013108:	f001 f920 	bl	801434c <ip4_addr_isbroadcast_u32>
 801310c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801310e:	2b00      	cmp	r3, #0
 8013110:	d105      	bne.n	801311e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801311a:	2be0      	cmp	r3, #224	@ 0xe0
 801311c:	d102      	bne.n	8013124 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801311e:	f06f 030f 	mvn.w	r3, #15
 8013122:	e06c      	b.n	80131fe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013124:	78fb      	ldrb	r3, [r7, #3]
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	4619      	mov	r1, r3
 801312a:	68b8      	ldr	r0, [r7, #8]
 801312c:	f7ff fe56 	bl	8012ddc <etharp_find_entry>
 8013130:	4603      	mov	r3, r0
 8013132:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013134:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013138:	2b00      	cmp	r3, #0
 801313a:	da02      	bge.n	8013142 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801313c:	8afb      	ldrh	r3, [r7, #22]
 801313e:	b25b      	sxtb	r3, r3
 8013140:	e05d      	b.n	80131fe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013142:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013146:	4933      	ldr	r1, [pc, #204]	@ (8013214 <etharp_update_arp_entry+0x148>)
 8013148:	4613      	mov	r3, r2
 801314a:	005b      	lsls	r3, r3, #1
 801314c:	4413      	add	r3, r2
 801314e:	00db      	lsls	r3, r3, #3
 8013150:	440b      	add	r3, r1
 8013152:	3314      	adds	r3, #20
 8013154:	2202      	movs	r2, #2
 8013156:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013158:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801315c:	492d      	ldr	r1, [pc, #180]	@ (8013214 <etharp_update_arp_entry+0x148>)
 801315e:	4613      	mov	r3, r2
 8013160:	005b      	lsls	r3, r3, #1
 8013162:	4413      	add	r3, r2
 8013164:	00db      	lsls	r3, r3, #3
 8013166:	440b      	add	r3, r1
 8013168:	3308      	adds	r3, #8
 801316a:	68fa      	ldr	r2, [r7, #12]
 801316c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801316e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013172:	4613      	mov	r3, r2
 8013174:	005b      	lsls	r3, r3, #1
 8013176:	4413      	add	r3, r2
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	3308      	adds	r3, #8
 801317c:	4a25      	ldr	r2, [pc, #148]	@ (8013214 <etharp_update_arp_entry+0x148>)
 801317e:	4413      	add	r3, r2
 8013180:	3304      	adds	r3, #4
 8013182:	2206      	movs	r2, #6
 8013184:	6879      	ldr	r1, [r7, #4]
 8013186:	4618      	mov	r0, r3
 8013188:	f002 fa6f 	bl	801566a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801318c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013190:	4920      	ldr	r1, [pc, #128]	@ (8013214 <etharp_update_arp_entry+0x148>)
 8013192:	4613      	mov	r3, r2
 8013194:	005b      	lsls	r3, r3, #1
 8013196:	4413      	add	r3, r2
 8013198:	00db      	lsls	r3, r3, #3
 801319a:	440b      	add	r3, r1
 801319c:	3312      	adds	r3, #18
 801319e:	2200      	movs	r2, #0
 80131a0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80131a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80131a6:	491b      	ldr	r1, [pc, #108]	@ (8013214 <etharp_update_arp_entry+0x148>)
 80131a8:	4613      	mov	r3, r2
 80131aa:	005b      	lsls	r3, r3, #1
 80131ac:	4413      	add	r3, r2
 80131ae:	00db      	lsls	r3, r3, #3
 80131b0:	440b      	add	r3, r1
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d021      	beq.n	80131fc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80131b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80131bc:	4915      	ldr	r1, [pc, #84]	@ (8013214 <etharp_update_arp_entry+0x148>)
 80131be:	4613      	mov	r3, r2
 80131c0:	005b      	lsls	r3, r3, #1
 80131c2:	4413      	add	r3, r2
 80131c4:	00db      	lsls	r3, r3, #3
 80131c6:	440b      	add	r3, r1
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80131cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80131d0:	4910      	ldr	r1, [pc, #64]	@ (8013214 <etharp_update_arp_entry+0x148>)
 80131d2:	4613      	mov	r3, r2
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	4413      	add	r3, r2
 80131d8:	00db      	lsls	r3, r3, #3
 80131da:	440b      	add	r3, r1
 80131dc:	2200      	movs	r2, #0
 80131de:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80131e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80131ea:	9300      	str	r3, [sp, #0]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6939      	ldr	r1, [r7, #16]
 80131f0:	68f8      	ldr	r0, [r7, #12]
 80131f2:	f001 ffb9 	bl	8015168 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80131f6:	6938      	ldr	r0, [r7, #16]
 80131f8:	f7f7 fcce 	bl	800ab98 <pbuf_free>
  }
  return ERR_OK;
 80131fc:	2300      	movs	r3, #0
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3718      	adds	r7, #24
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	080189bc 	.word	0x080189bc
 801320c:	08018ab4 	.word	0x08018ab4
 8013210:	08018a34 	.word	0x08018a34
 8013214:	2000d158 	.word	0x2000d158

08013218 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013220:	2300      	movs	r3, #0
 8013222:	60fb      	str	r3, [r7, #12]
 8013224:	e01e      	b.n	8013264 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013226:	4913      	ldr	r1, [pc, #76]	@ (8013274 <etharp_cleanup_netif+0x5c>)
 8013228:	68fa      	ldr	r2, [r7, #12]
 801322a:	4613      	mov	r3, r2
 801322c:	005b      	lsls	r3, r3, #1
 801322e:	4413      	add	r3, r2
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	440b      	add	r3, r1
 8013234:	3314      	adds	r3, #20
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801323a:	7afb      	ldrb	r3, [r7, #11]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d00e      	beq.n	801325e <etharp_cleanup_netif+0x46>
 8013240:	490c      	ldr	r1, [pc, #48]	@ (8013274 <etharp_cleanup_netif+0x5c>)
 8013242:	68fa      	ldr	r2, [r7, #12]
 8013244:	4613      	mov	r3, r2
 8013246:	005b      	lsls	r3, r3, #1
 8013248:	4413      	add	r3, r2
 801324a:	00db      	lsls	r3, r3, #3
 801324c:	440b      	add	r3, r1
 801324e:	3308      	adds	r3, #8
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	429a      	cmp	r2, r3
 8013256:	d102      	bne.n	801325e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f7ff fce5 	bl	8012c28 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	3301      	adds	r3, #1
 8013262:	60fb      	str	r3, [r7, #12]
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2b09      	cmp	r3, #9
 8013268:	dddd      	ble.n	8013226 <etharp_cleanup_netif+0xe>
    }
  }
}
 801326a:	bf00      	nop
 801326c:	bf00      	nop
 801326e:	3710      	adds	r7, #16
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}
 8013274:	2000d158 	.word	0x2000d158

08013278 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013278:	b5b0      	push	{r4, r5, r7, lr}
 801327a:	b08a      	sub	sp, #40	@ 0x28
 801327c:	af04      	add	r7, sp, #16
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d107      	bne.n	8013298 <etharp_input+0x20>
 8013288:	4b3f      	ldr	r3, [pc, #252]	@ (8013388 <etharp_input+0x110>)
 801328a:	f240 228a 	movw	r2, #650	@ 0x28a
 801328e:	493f      	ldr	r1, [pc, #252]	@ (801338c <etharp_input+0x114>)
 8013290:	483f      	ldr	r0, [pc, #252]	@ (8013390 <etharp_input+0x118>)
 8013292:	f002 f8b1 	bl	80153f8 <iprintf>
 8013296:	e074      	b.n	8013382 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	881b      	ldrh	r3, [r3, #0]
 80132a2:	b29b      	uxth	r3, r3
 80132a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132a8:	d10c      	bne.n	80132c4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80132ae:	2b06      	cmp	r3, #6
 80132b0:	d108      	bne.n	80132c4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80132b6:	2b04      	cmp	r3, #4
 80132b8:	d104      	bne.n	80132c4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	885b      	ldrh	r3, [r3, #2]
 80132be:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80132c0:	2b08      	cmp	r3, #8
 80132c2:	d003      	beq.n	80132cc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f7f7 fc67 	bl	800ab98 <pbuf_free>
    return;
 80132ca:	e05a      	b.n	8013382 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	330e      	adds	r3, #14
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	3318      	adds	r3, #24
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	3304      	adds	r3, #4
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d102      	bne.n	80132ec <etharp_input+0x74>
    for_us = 0;
 80132e6:	2300      	movs	r3, #0
 80132e8:	75fb      	strb	r3, [r7, #23]
 80132ea:	e009      	b.n	8013300 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80132ec:	68ba      	ldr	r2, [r7, #8]
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	3304      	adds	r3, #4
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	bf0c      	ite	eq
 80132f8:	2301      	moveq	r3, #1
 80132fa:	2300      	movne	r3, #0
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	f103 0208 	add.w	r2, r3, #8
 8013306:	7dfb      	ldrb	r3, [r7, #23]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d001      	beq.n	8013310 <etharp_input+0x98>
 801330c:	2301      	movs	r3, #1
 801330e:	e000      	b.n	8013312 <etharp_input+0x9a>
 8013310:	2302      	movs	r3, #2
 8013312:	f107 010c 	add.w	r1, r7, #12
 8013316:	6838      	ldr	r0, [r7, #0]
 8013318:	f7ff fed8 	bl	80130cc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	88db      	ldrh	r3, [r3, #6]
 8013320:	b29b      	uxth	r3, r3
 8013322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013326:	d003      	beq.n	8013330 <etharp_input+0xb8>
 8013328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801332c:	d01e      	beq.n	801336c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801332e:	e025      	b.n	801337c <etharp_input+0x104>
      if (for_us) {
 8013330:	7dfb      	ldrb	r3, [r7, #23]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d021      	beq.n	801337a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801334c:	693a      	ldr	r2, [r7, #16]
 801334e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013350:	2102      	movs	r1, #2
 8013352:	9103      	str	r1, [sp, #12]
 8013354:	f107 010c 	add.w	r1, r7, #12
 8013358:	9102      	str	r1, [sp, #8]
 801335a:	9201      	str	r2, [sp, #4]
 801335c:	9300      	str	r3, [sp, #0]
 801335e:	462b      	mov	r3, r5
 8013360:	4622      	mov	r2, r4
 8013362:	4601      	mov	r1, r0
 8013364:	6838      	ldr	r0, [r7, #0]
 8013366:	f000 faef 	bl	8013948 <etharp_raw>
      break;
 801336a:	e006      	b.n	801337a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801336c:	f107 030c 	add.w	r3, r7, #12
 8013370:	4619      	mov	r1, r3
 8013372:	6838      	ldr	r0, [r7, #0]
 8013374:	f7fe fa02 	bl	801177c <dhcp_arp_reply>
      break;
 8013378:	e000      	b.n	801337c <etharp_input+0x104>
      break;
 801337a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f7f7 fc0b 	bl	800ab98 <pbuf_free>
}
 8013382:	3718      	adds	r7, #24
 8013384:	46bd      	mov	sp, r7
 8013386:	bdb0      	pop	{r4, r5, r7, pc}
 8013388:	080189bc 	.word	0x080189bc
 801338c:	08018b0c 	.word	0x08018b0c
 8013390:	08018a34 	.word	0x08018a34

08013394 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b086      	sub	sp, #24
 8013398:	af02      	add	r7, sp, #8
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	4613      	mov	r3, r2
 80133a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80133a2:	79fa      	ldrb	r2, [r7, #7]
 80133a4:	4944      	ldr	r1, [pc, #272]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 80133a6:	4613      	mov	r3, r2
 80133a8:	005b      	lsls	r3, r3, #1
 80133aa:	4413      	add	r3, r2
 80133ac:	00db      	lsls	r3, r3, #3
 80133ae:	440b      	add	r3, r1
 80133b0:	3314      	adds	r3, #20
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	2b01      	cmp	r3, #1
 80133b6:	d806      	bhi.n	80133c6 <etharp_output_to_arp_index+0x32>
 80133b8:	4b40      	ldr	r3, [pc, #256]	@ (80134bc <etharp_output_to_arp_index+0x128>)
 80133ba:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80133be:	4940      	ldr	r1, [pc, #256]	@ (80134c0 <etharp_output_to_arp_index+0x12c>)
 80133c0:	4840      	ldr	r0, [pc, #256]	@ (80134c4 <etharp_output_to_arp_index+0x130>)
 80133c2:	f002 f819 	bl	80153f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80133c6:	79fa      	ldrb	r2, [r7, #7]
 80133c8:	493b      	ldr	r1, [pc, #236]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 80133ca:	4613      	mov	r3, r2
 80133cc:	005b      	lsls	r3, r3, #1
 80133ce:	4413      	add	r3, r2
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	440b      	add	r3, r1
 80133d4:	3314      	adds	r3, #20
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	2b02      	cmp	r3, #2
 80133da:	d153      	bne.n	8013484 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80133dc:	79fa      	ldrb	r2, [r7, #7]
 80133de:	4936      	ldr	r1, [pc, #216]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 80133e0:	4613      	mov	r3, r2
 80133e2:	005b      	lsls	r3, r3, #1
 80133e4:	4413      	add	r3, r2
 80133e6:	00db      	lsls	r3, r3, #3
 80133e8:	440b      	add	r3, r1
 80133ea:	3312      	adds	r3, #18
 80133ec:	881b      	ldrh	r3, [r3, #0]
 80133ee:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80133f2:	d919      	bls.n	8013428 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80133f4:	79fa      	ldrb	r2, [r7, #7]
 80133f6:	4613      	mov	r3, r2
 80133f8:	005b      	lsls	r3, r3, #1
 80133fa:	4413      	add	r3, r2
 80133fc:	00db      	lsls	r3, r3, #3
 80133fe:	4a2e      	ldr	r2, [pc, #184]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 8013400:	4413      	add	r3, r2
 8013402:	3304      	adds	r3, #4
 8013404:	4619      	mov	r1, r3
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	f000 fb4c 	bl	8013aa4 <etharp_request>
 801340c:	4603      	mov	r3, r0
 801340e:	2b00      	cmp	r3, #0
 8013410:	d138      	bne.n	8013484 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013412:	79fa      	ldrb	r2, [r7, #7]
 8013414:	4928      	ldr	r1, [pc, #160]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 8013416:	4613      	mov	r3, r2
 8013418:	005b      	lsls	r3, r3, #1
 801341a:	4413      	add	r3, r2
 801341c:	00db      	lsls	r3, r3, #3
 801341e:	440b      	add	r3, r1
 8013420:	3314      	adds	r3, #20
 8013422:	2203      	movs	r2, #3
 8013424:	701a      	strb	r2, [r3, #0]
 8013426:	e02d      	b.n	8013484 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013428:	79fa      	ldrb	r2, [r7, #7]
 801342a:	4923      	ldr	r1, [pc, #140]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 801342c:	4613      	mov	r3, r2
 801342e:	005b      	lsls	r3, r3, #1
 8013430:	4413      	add	r3, r2
 8013432:	00db      	lsls	r3, r3, #3
 8013434:	440b      	add	r3, r1
 8013436:	3312      	adds	r3, #18
 8013438:	881b      	ldrh	r3, [r3, #0]
 801343a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801343e:	d321      	bcc.n	8013484 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013440:	79fa      	ldrb	r2, [r7, #7]
 8013442:	4613      	mov	r3, r2
 8013444:	005b      	lsls	r3, r3, #1
 8013446:	4413      	add	r3, r2
 8013448:	00db      	lsls	r3, r3, #3
 801344a:	4a1b      	ldr	r2, [pc, #108]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 801344c:	4413      	add	r3, r2
 801344e:	1d19      	adds	r1, r3, #4
 8013450:	79fa      	ldrb	r2, [r7, #7]
 8013452:	4613      	mov	r3, r2
 8013454:	005b      	lsls	r3, r3, #1
 8013456:	4413      	add	r3, r2
 8013458:	00db      	lsls	r3, r3, #3
 801345a:	3308      	adds	r3, #8
 801345c:	4a16      	ldr	r2, [pc, #88]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 801345e:	4413      	add	r3, r2
 8013460:	3304      	adds	r3, #4
 8013462:	461a      	mov	r2, r3
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	f000 fafb 	bl	8013a60 <etharp_request_dst>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d109      	bne.n	8013484 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013470:	79fa      	ldrb	r2, [r7, #7]
 8013472:	4911      	ldr	r1, [pc, #68]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 8013474:	4613      	mov	r3, r2
 8013476:	005b      	lsls	r3, r3, #1
 8013478:	4413      	add	r3, r2
 801347a:	00db      	lsls	r3, r3, #3
 801347c:	440b      	add	r3, r1
 801347e:	3314      	adds	r3, #20
 8013480:	2203      	movs	r2, #3
 8013482:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801348a:	79fa      	ldrb	r2, [r7, #7]
 801348c:	4613      	mov	r3, r2
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	3308      	adds	r3, #8
 8013496:	4a08      	ldr	r2, [pc, #32]	@ (80134b8 <etharp_output_to_arp_index+0x124>)
 8013498:	4413      	add	r3, r2
 801349a:	3304      	adds	r3, #4
 801349c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80134a0:	9200      	str	r2, [sp, #0]
 80134a2:	460a      	mov	r2, r1
 80134a4:	68b9      	ldr	r1, [r7, #8]
 80134a6:	68f8      	ldr	r0, [r7, #12]
 80134a8:	f001 fe5e 	bl	8015168 <ethernet_output>
 80134ac:	4603      	mov	r3, r0
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	2000d158 	.word	0x2000d158
 80134bc:	080189bc 	.word	0x080189bc
 80134c0:	08018b2c 	.word	0x08018b2c
 80134c4:	08018a34 	.word	0x08018a34

080134c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b08a      	sub	sp, #40	@ 0x28
 80134cc:	af02      	add	r7, sp, #8
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d106      	bne.n	80134ec <etharp_output+0x24>
 80134de:	4b73      	ldr	r3, [pc, #460]	@ (80136ac <etharp_output+0x1e4>)
 80134e0:	f240 321e 	movw	r2, #798	@ 0x31e
 80134e4:	4972      	ldr	r1, [pc, #456]	@ (80136b0 <etharp_output+0x1e8>)
 80134e6:	4873      	ldr	r0, [pc, #460]	@ (80136b4 <etharp_output+0x1ec>)
 80134e8:	f001 ff86 	bl	80153f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d106      	bne.n	8013500 <etharp_output+0x38>
 80134f2:	4b6e      	ldr	r3, [pc, #440]	@ (80136ac <etharp_output+0x1e4>)
 80134f4:	f240 321f 	movw	r2, #799	@ 0x31f
 80134f8:	496f      	ldr	r1, [pc, #444]	@ (80136b8 <etharp_output+0x1f0>)
 80134fa:	486e      	ldr	r0, [pc, #440]	@ (80136b4 <etharp_output+0x1ec>)
 80134fc:	f001 ff7c 	bl	80153f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d106      	bne.n	8013514 <etharp_output+0x4c>
 8013506:	4b69      	ldr	r3, [pc, #420]	@ (80136ac <etharp_output+0x1e4>)
 8013508:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801350c:	496b      	ldr	r1, [pc, #428]	@ (80136bc <etharp_output+0x1f4>)
 801350e:	4869      	ldr	r0, [pc, #420]	@ (80136b4 <etharp_output+0x1ec>)
 8013510:	f001 ff72 	bl	80153f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	68f9      	ldr	r1, [r7, #12]
 801351a:	4618      	mov	r0, r3
 801351c:	f000 ff16 	bl	801434c <ip4_addr_isbroadcast_u32>
 8013520:	4603      	mov	r3, r0
 8013522:	2b00      	cmp	r3, #0
 8013524:	d002      	beq.n	801352c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013526:	4b66      	ldr	r3, [pc, #408]	@ (80136c0 <etharp_output+0x1f8>)
 8013528:	61fb      	str	r3, [r7, #28]
 801352a:	e0af      	b.n	801368c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013534:	2be0      	cmp	r3, #224	@ 0xe0
 8013536:	d118      	bne.n	801356a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013538:	2301      	movs	r3, #1
 801353a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801353c:	2300      	movs	r3, #0
 801353e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013540:	235e      	movs	r3, #94	@ 0x5e
 8013542:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	3301      	adds	r3, #1
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801354e:	b2db      	uxtb	r3, r3
 8013550:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	3302      	adds	r3, #2
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	3303      	adds	r3, #3
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013562:	f107 0310 	add.w	r3, r7, #16
 8013566:	61fb      	str	r3, [r7, #28]
 8013568:	e090      	b.n	801368c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	3304      	adds	r3, #4
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	405a      	eors	r2, r3
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	3308      	adds	r3, #8
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	4013      	ands	r3, r2
 801357e:	2b00      	cmp	r3, #0
 8013580:	d012      	beq.n	80135a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013588:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801358c:	4293      	cmp	r3, r2
 801358e:	d00b      	beq.n	80135a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	330c      	adds	r3, #12
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d003      	beq.n	80135a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	330c      	adds	r3, #12
 801359e:	61bb      	str	r3, [r7, #24]
 80135a0:	e002      	b.n	80135a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80135a2:	f06f 0303 	mvn.w	r3, #3
 80135a6:	e07d      	b.n	80136a4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80135a8:	4b46      	ldr	r3, [pc, #280]	@ (80136c4 <etharp_output+0x1fc>)
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	4619      	mov	r1, r3
 80135ae:	4a46      	ldr	r2, [pc, #280]	@ (80136c8 <etharp_output+0x200>)
 80135b0:	460b      	mov	r3, r1
 80135b2:	005b      	lsls	r3, r3, #1
 80135b4:	440b      	add	r3, r1
 80135b6:	00db      	lsls	r3, r3, #3
 80135b8:	4413      	add	r3, r2
 80135ba:	3314      	adds	r3, #20
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	2b01      	cmp	r3, #1
 80135c0:	d925      	bls.n	801360e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80135c2:	4b40      	ldr	r3, [pc, #256]	@ (80136c4 <etharp_output+0x1fc>)
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	4619      	mov	r1, r3
 80135c8:	4a3f      	ldr	r2, [pc, #252]	@ (80136c8 <etharp_output+0x200>)
 80135ca:	460b      	mov	r3, r1
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	440b      	add	r3, r1
 80135d0:	00db      	lsls	r3, r3, #3
 80135d2:	4413      	add	r3, r2
 80135d4:	3308      	adds	r3, #8
 80135d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	429a      	cmp	r2, r3
 80135dc:	d117      	bne.n	801360e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	4b38      	ldr	r3, [pc, #224]	@ (80136c4 <etharp_output+0x1fc>)
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	4618      	mov	r0, r3
 80135e8:	4937      	ldr	r1, [pc, #220]	@ (80136c8 <etharp_output+0x200>)
 80135ea:	4603      	mov	r3, r0
 80135ec:	005b      	lsls	r3, r3, #1
 80135ee:	4403      	add	r3, r0
 80135f0:	00db      	lsls	r3, r3, #3
 80135f2:	440b      	add	r3, r1
 80135f4:	3304      	adds	r3, #4
 80135f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d108      	bne.n	801360e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80135fc:	4b31      	ldr	r3, [pc, #196]	@ (80136c4 <etharp_output+0x1fc>)
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	461a      	mov	r2, r3
 8013602:	68b9      	ldr	r1, [r7, #8]
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f7ff fec5 	bl	8013394 <etharp_output_to_arp_index>
 801360a:	4603      	mov	r3, r0
 801360c:	e04a      	b.n	80136a4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801360e:	2300      	movs	r3, #0
 8013610:	75fb      	strb	r3, [r7, #23]
 8013612:	e031      	b.n	8013678 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013614:	7dfa      	ldrb	r2, [r7, #23]
 8013616:	492c      	ldr	r1, [pc, #176]	@ (80136c8 <etharp_output+0x200>)
 8013618:	4613      	mov	r3, r2
 801361a:	005b      	lsls	r3, r3, #1
 801361c:	4413      	add	r3, r2
 801361e:	00db      	lsls	r3, r3, #3
 8013620:	440b      	add	r3, r1
 8013622:	3314      	adds	r3, #20
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	2b01      	cmp	r3, #1
 8013628:	d923      	bls.n	8013672 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801362a:	7dfa      	ldrb	r2, [r7, #23]
 801362c:	4926      	ldr	r1, [pc, #152]	@ (80136c8 <etharp_output+0x200>)
 801362e:	4613      	mov	r3, r2
 8013630:	005b      	lsls	r3, r3, #1
 8013632:	4413      	add	r3, r2
 8013634:	00db      	lsls	r3, r3, #3
 8013636:	440b      	add	r3, r1
 8013638:	3308      	adds	r3, #8
 801363a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801363c:	68fa      	ldr	r2, [r7, #12]
 801363e:	429a      	cmp	r2, r3
 8013640:	d117      	bne.n	8013672 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	6819      	ldr	r1, [r3, #0]
 8013646:	7dfa      	ldrb	r2, [r7, #23]
 8013648:	481f      	ldr	r0, [pc, #124]	@ (80136c8 <etharp_output+0x200>)
 801364a:	4613      	mov	r3, r2
 801364c:	005b      	lsls	r3, r3, #1
 801364e:	4413      	add	r3, r2
 8013650:	00db      	lsls	r3, r3, #3
 8013652:	4403      	add	r3, r0
 8013654:	3304      	adds	r3, #4
 8013656:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013658:	4299      	cmp	r1, r3
 801365a:	d10a      	bne.n	8013672 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801365c:	4a19      	ldr	r2, [pc, #100]	@ (80136c4 <etharp_output+0x1fc>)
 801365e:	7dfb      	ldrb	r3, [r7, #23]
 8013660:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013662:	7dfb      	ldrb	r3, [r7, #23]
 8013664:	461a      	mov	r2, r3
 8013666:	68b9      	ldr	r1, [r7, #8]
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f7ff fe93 	bl	8013394 <etharp_output_to_arp_index>
 801366e:	4603      	mov	r3, r0
 8013670:	e018      	b.n	80136a4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013672:	7dfb      	ldrb	r3, [r7, #23]
 8013674:	3301      	adds	r3, #1
 8013676:	75fb      	strb	r3, [r7, #23]
 8013678:	7dfb      	ldrb	r3, [r7, #23]
 801367a:	2b09      	cmp	r3, #9
 801367c:	d9ca      	bls.n	8013614 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801367e:	68ba      	ldr	r2, [r7, #8]
 8013680:	69b9      	ldr	r1, [r7, #24]
 8013682:	68f8      	ldr	r0, [r7, #12]
 8013684:	f000 f822 	bl	80136cc <etharp_query>
 8013688:	4603      	mov	r3, r0
 801368a:	e00b      	b.n	80136a4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8013692:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013696:	9300      	str	r3, [sp, #0]
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	68b9      	ldr	r1, [r7, #8]
 801369c:	68f8      	ldr	r0, [r7, #12]
 801369e:	f001 fd63 	bl	8015168 <ethernet_output>
 80136a2:	4603      	mov	r3, r0
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3720      	adds	r7, #32
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}
 80136ac:	080189bc 	.word	0x080189bc
 80136b0:	08018b0c 	.word	0x08018b0c
 80136b4:	08018a34 	.word	0x08018a34
 80136b8:	08018b5c 	.word	0x08018b5c
 80136bc:	08018afc 	.word	0x08018afc
 80136c0:	080191b0 	.word	0x080191b0
 80136c4:	2000d248 	.word	0x2000d248
 80136c8:	2000d158 	.word	0x2000d158

080136cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b08c      	sub	sp, #48	@ 0x30
 80136d0:	af02      	add	r7, sp, #8
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	332a      	adds	r3, #42	@ 0x2a
 80136dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80136de:	23ff      	movs	r3, #255	@ 0xff
 80136e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80136e4:	2300      	movs	r3, #0
 80136e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	68f9      	ldr	r1, [r7, #12]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f000 fe2c 	bl	801434c <ip4_addr_isbroadcast_u32>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d10c      	bne.n	8013714 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013702:	2be0      	cmp	r3, #224	@ 0xe0
 8013704:	d006      	beq.n	8013714 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d003      	beq.n	8013714 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d102      	bne.n	801371a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013714:	f06f 030f 	mvn.w	r3, #15
 8013718:	e101      	b.n	801391e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801371a:	68fa      	ldr	r2, [r7, #12]
 801371c:	2101      	movs	r1, #1
 801371e:	68b8      	ldr	r0, [r7, #8]
 8013720:	f7ff fb5c 	bl	8012ddc <etharp_find_entry>
 8013724:	4603      	mov	r3, r0
 8013726:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013728:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801372c:	2b00      	cmp	r3, #0
 801372e:	da02      	bge.n	8013736 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013730:	8a7b      	ldrh	r3, [r7, #18]
 8013732:	b25b      	sxtb	r3, r3
 8013734:	e0f3      	b.n	801391e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013736:	8a7b      	ldrh	r3, [r7, #18]
 8013738:	2b7e      	cmp	r3, #126	@ 0x7e
 801373a:	d906      	bls.n	801374a <etharp_query+0x7e>
 801373c:	4b7a      	ldr	r3, [pc, #488]	@ (8013928 <etharp_query+0x25c>)
 801373e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013742:	497a      	ldr	r1, [pc, #488]	@ (801392c <etharp_query+0x260>)
 8013744:	487a      	ldr	r0, [pc, #488]	@ (8013930 <etharp_query+0x264>)
 8013746:	f001 fe57 	bl	80153f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801374a:	8a7b      	ldrh	r3, [r7, #18]
 801374c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801374e:	7c7a      	ldrb	r2, [r7, #17]
 8013750:	4978      	ldr	r1, [pc, #480]	@ (8013934 <etharp_query+0x268>)
 8013752:	4613      	mov	r3, r2
 8013754:	005b      	lsls	r3, r3, #1
 8013756:	4413      	add	r3, r2
 8013758:	00db      	lsls	r3, r3, #3
 801375a:	440b      	add	r3, r1
 801375c:	3314      	adds	r3, #20
 801375e:	781b      	ldrb	r3, [r3, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d115      	bne.n	8013790 <etharp_query+0xc4>
    is_new_entry = 1;
 8013764:	2301      	movs	r3, #1
 8013766:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013768:	7c7a      	ldrb	r2, [r7, #17]
 801376a:	4972      	ldr	r1, [pc, #456]	@ (8013934 <etharp_query+0x268>)
 801376c:	4613      	mov	r3, r2
 801376e:	005b      	lsls	r3, r3, #1
 8013770:	4413      	add	r3, r2
 8013772:	00db      	lsls	r3, r3, #3
 8013774:	440b      	add	r3, r1
 8013776:	3314      	adds	r3, #20
 8013778:	2201      	movs	r2, #1
 801377a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801377c:	7c7a      	ldrb	r2, [r7, #17]
 801377e:	496d      	ldr	r1, [pc, #436]	@ (8013934 <etharp_query+0x268>)
 8013780:	4613      	mov	r3, r2
 8013782:	005b      	lsls	r3, r3, #1
 8013784:	4413      	add	r3, r2
 8013786:	00db      	lsls	r3, r3, #3
 8013788:	440b      	add	r3, r1
 801378a:	3308      	adds	r3, #8
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013790:	7c7a      	ldrb	r2, [r7, #17]
 8013792:	4968      	ldr	r1, [pc, #416]	@ (8013934 <etharp_query+0x268>)
 8013794:	4613      	mov	r3, r2
 8013796:	005b      	lsls	r3, r3, #1
 8013798:	4413      	add	r3, r2
 801379a:	00db      	lsls	r3, r3, #3
 801379c:	440b      	add	r3, r1
 801379e:	3314      	adds	r3, #20
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	2b01      	cmp	r3, #1
 80137a4:	d011      	beq.n	80137ca <etharp_query+0xfe>
 80137a6:	7c7a      	ldrb	r2, [r7, #17]
 80137a8:	4962      	ldr	r1, [pc, #392]	@ (8013934 <etharp_query+0x268>)
 80137aa:	4613      	mov	r3, r2
 80137ac:	005b      	lsls	r3, r3, #1
 80137ae:	4413      	add	r3, r2
 80137b0:	00db      	lsls	r3, r3, #3
 80137b2:	440b      	add	r3, r1
 80137b4:	3314      	adds	r3, #20
 80137b6:	781b      	ldrb	r3, [r3, #0]
 80137b8:	2b01      	cmp	r3, #1
 80137ba:	d806      	bhi.n	80137ca <etharp_query+0xfe>
 80137bc:	4b5a      	ldr	r3, [pc, #360]	@ (8013928 <etharp_query+0x25c>)
 80137be:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80137c2:	495d      	ldr	r1, [pc, #372]	@ (8013938 <etharp_query+0x26c>)
 80137c4:	485a      	ldr	r0, [pc, #360]	@ (8013930 <etharp_query+0x264>)
 80137c6:	f001 fe17 	bl	80153f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80137ca:	6a3b      	ldr	r3, [r7, #32]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d102      	bne.n	80137d6 <etharp_query+0x10a>
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d10c      	bne.n	80137f0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80137d6:	68b9      	ldr	r1, [r7, #8]
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f000 f963 	bl	8013aa4 <etharp_request>
 80137de:	4603      	mov	r3, r0
 80137e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d102      	bne.n	80137f0 <etharp_query+0x124>
      return result;
 80137ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80137ee:	e096      	b.n	801391e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d106      	bne.n	8013804 <etharp_query+0x138>
 80137f6:	4b4c      	ldr	r3, [pc, #304]	@ (8013928 <etharp_query+0x25c>)
 80137f8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80137fc:	494f      	ldr	r1, [pc, #316]	@ (801393c <etharp_query+0x270>)
 80137fe:	484c      	ldr	r0, [pc, #304]	@ (8013930 <etharp_query+0x264>)
 8013800:	f001 fdfa 	bl	80153f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013804:	7c7a      	ldrb	r2, [r7, #17]
 8013806:	494b      	ldr	r1, [pc, #300]	@ (8013934 <etharp_query+0x268>)
 8013808:	4613      	mov	r3, r2
 801380a:	005b      	lsls	r3, r3, #1
 801380c:	4413      	add	r3, r2
 801380e:	00db      	lsls	r3, r3, #3
 8013810:	440b      	add	r3, r1
 8013812:	3314      	adds	r3, #20
 8013814:	781b      	ldrb	r3, [r3, #0]
 8013816:	2b01      	cmp	r3, #1
 8013818:	d917      	bls.n	801384a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801381a:	4a49      	ldr	r2, [pc, #292]	@ (8013940 <etharp_query+0x274>)
 801381c:	7c7b      	ldrb	r3, [r7, #17]
 801381e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013820:	7c7a      	ldrb	r2, [r7, #17]
 8013822:	4613      	mov	r3, r2
 8013824:	005b      	lsls	r3, r3, #1
 8013826:	4413      	add	r3, r2
 8013828:	00db      	lsls	r3, r3, #3
 801382a:	3308      	adds	r3, #8
 801382c:	4a41      	ldr	r2, [pc, #260]	@ (8013934 <etharp_query+0x268>)
 801382e:	4413      	add	r3, r2
 8013830:	3304      	adds	r3, #4
 8013832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013836:	9200      	str	r2, [sp, #0]
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	6879      	ldr	r1, [r7, #4]
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f001 fc93 	bl	8015168 <ethernet_output>
 8013842:	4603      	mov	r3, r0
 8013844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013848:	e067      	b.n	801391a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801384a:	7c7a      	ldrb	r2, [r7, #17]
 801384c:	4939      	ldr	r1, [pc, #228]	@ (8013934 <etharp_query+0x268>)
 801384e:	4613      	mov	r3, r2
 8013850:	005b      	lsls	r3, r3, #1
 8013852:	4413      	add	r3, r2
 8013854:	00db      	lsls	r3, r3, #3
 8013856:	440b      	add	r3, r1
 8013858:	3314      	adds	r3, #20
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	2b01      	cmp	r3, #1
 801385e:	d15c      	bne.n	801391a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013860:	2300      	movs	r3, #0
 8013862:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013868:	e01c      	b.n	80138a4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	895a      	ldrh	r2, [r3, #10]
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	891b      	ldrh	r3, [r3, #8]
 8013872:	429a      	cmp	r2, r3
 8013874:	d10a      	bne.n	801388c <etharp_query+0x1c0>
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d006      	beq.n	801388c <etharp_query+0x1c0>
 801387e:	4b2a      	ldr	r3, [pc, #168]	@ (8013928 <etharp_query+0x25c>)
 8013880:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8013884:	492f      	ldr	r1, [pc, #188]	@ (8013944 <etharp_query+0x278>)
 8013886:	482a      	ldr	r0, [pc, #168]	@ (8013930 <etharp_query+0x264>)
 8013888:	f001 fdb6 	bl	80153f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	7b1b      	ldrb	r3, [r3, #12]
 8013890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013894:	2b00      	cmp	r3, #0
 8013896:	d002      	beq.n	801389e <etharp_query+0x1d2>
        copy_needed = 1;
 8013898:	2301      	movs	r3, #1
 801389a:	61bb      	str	r3, [r7, #24]
        break;
 801389c:	e005      	b.n	80138aa <etharp_query+0x1de>
      }
      p = p->next;
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d1df      	bne.n	801386a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d007      	beq.n	80138c0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80138b0:	687a      	ldr	r2, [r7, #4]
 80138b2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80138b6:	200e      	movs	r0, #14
 80138b8:	f7f7 fbda 	bl	800b070 <pbuf_clone>
 80138bc:	61f8      	str	r0, [r7, #28]
 80138be:	e004      	b.n	80138ca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80138c4:	69f8      	ldr	r0, [r7, #28]
 80138c6:	f7f7 fa07 	bl	800acd8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80138ca:	69fb      	ldr	r3, [r7, #28]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d021      	beq.n	8013914 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80138d0:	7c7a      	ldrb	r2, [r7, #17]
 80138d2:	4918      	ldr	r1, [pc, #96]	@ (8013934 <etharp_query+0x268>)
 80138d4:	4613      	mov	r3, r2
 80138d6:	005b      	lsls	r3, r3, #1
 80138d8:	4413      	add	r3, r2
 80138da:	00db      	lsls	r3, r3, #3
 80138dc:	440b      	add	r3, r1
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00a      	beq.n	80138fa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80138e4:	7c7a      	ldrb	r2, [r7, #17]
 80138e6:	4913      	ldr	r1, [pc, #76]	@ (8013934 <etharp_query+0x268>)
 80138e8:	4613      	mov	r3, r2
 80138ea:	005b      	lsls	r3, r3, #1
 80138ec:	4413      	add	r3, r2
 80138ee:	00db      	lsls	r3, r3, #3
 80138f0:	440b      	add	r3, r1
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7f7 f94f 	bl	800ab98 <pbuf_free>
      }
      arp_table[i].q = p;
 80138fa:	7c7a      	ldrb	r2, [r7, #17]
 80138fc:	490d      	ldr	r1, [pc, #52]	@ (8013934 <etharp_query+0x268>)
 80138fe:	4613      	mov	r3, r2
 8013900:	005b      	lsls	r3, r3, #1
 8013902:	4413      	add	r3, r2
 8013904:	00db      	lsls	r3, r3, #3
 8013906:	440b      	add	r3, r1
 8013908:	69fa      	ldr	r2, [r7, #28]
 801390a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801390c:	2300      	movs	r3, #0
 801390e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013912:	e002      	b.n	801391a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013914:	23ff      	movs	r3, #255	@ 0xff
 8013916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801391a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801391e:	4618      	mov	r0, r3
 8013920:	3728      	adds	r7, #40	@ 0x28
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop
 8013928:	080189bc 	.word	0x080189bc
 801392c:	08018b68 	.word	0x08018b68
 8013930:	08018a34 	.word	0x08018a34
 8013934:	2000d158 	.word	0x2000d158
 8013938:	08018b78 	.word	0x08018b78
 801393c:	08018b5c 	.word	0x08018b5c
 8013940:	2000d248 	.word	0x2000d248
 8013944:	08018ba0 	.word	0x08018ba0

08013948 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b08a      	sub	sp, #40	@ 0x28
 801394c:	af02      	add	r7, sp, #8
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
 8013954:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013956:	2300      	movs	r3, #0
 8013958:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d106      	bne.n	801396e <etharp_raw+0x26>
 8013960:	4b3a      	ldr	r3, [pc, #232]	@ (8013a4c <etharp_raw+0x104>)
 8013962:	f240 4257 	movw	r2, #1111	@ 0x457
 8013966:	493a      	ldr	r1, [pc, #232]	@ (8013a50 <etharp_raw+0x108>)
 8013968:	483a      	ldr	r0, [pc, #232]	@ (8013a54 <etharp_raw+0x10c>)
 801396a:	f001 fd45 	bl	80153f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801396e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013972:	211c      	movs	r1, #28
 8013974:	200e      	movs	r0, #14
 8013976:	f7f6 fe2b 	bl	800a5d0 <pbuf_alloc>
 801397a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801397c:	69bb      	ldr	r3, [r7, #24]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d102      	bne.n	8013988 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013982:	f04f 33ff 	mov.w	r3, #4294967295
 8013986:	e05d      	b.n	8013a44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	895b      	ldrh	r3, [r3, #10]
 801398c:	2b1b      	cmp	r3, #27
 801398e:	d806      	bhi.n	801399e <etharp_raw+0x56>
 8013990:	4b2e      	ldr	r3, [pc, #184]	@ (8013a4c <etharp_raw+0x104>)
 8013992:	f240 4262 	movw	r2, #1122	@ 0x462
 8013996:	4930      	ldr	r1, [pc, #192]	@ (8013a58 <etharp_raw+0x110>)
 8013998:	482e      	ldr	r0, [pc, #184]	@ (8013a54 <etharp_raw+0x10c>)
 801399a:	f001 fd2d 	bl	80153f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80139a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7f5 fdb0 	bl	800950c <lwip_htons>
 80139ac:	4603      	mov	r3, r0
 80139ae:	461a      	mov	r2, r3
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80139ba:	2b06      	cmp	r3, #6
 80139bc:	d006      	beq.n	80139cc <etharp_raw+0x84>
 80139be:	4b23      	ldr	r3, [pc, #140]	@ (8013a4c <etharp_raw+0x104>)
 80139c0:	f240 4269 	movw	r2, #1129	@ 0x469
 80139c4:	4925      	ldr	r1, [pc, #148]	@ (8013a5c <etharp_raw+0x114>)
 80139c6:	4823      	ldr	r0, [pc, #140]	@ (8013a54 <etharp_raw+0x10c>)
 80139c8:	f001 fd16 	bl	80153f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	3308      	adds	r3, #8
 80139d0:	2206      	movs	r2, #6
 80139d2:	6839      	ldr	r1, [r7, #0]
 80139d4:	4618      	mov	r0, r3
 80139d6:	f001 fe48 	bl	801566a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80139da:	697b      	ldr	r3, [r7, #20]
 80139dc:	3312      	adds	r3, #18
 80139de:	2206      	movs	r2, #6
 80139e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80139e2:	4618      	mov	r0, r3
 80139e4:	f001 fe41 	bl	801566a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	330e      	adds	r3, #14
 80139ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80139ee:	6812      	ldr	r2, [r2, #0]
 80139f0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	3318      	adds	r3, #24
 80139f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139f8:	6812      	ldr	r2, [r2, #0]
 80139fa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	2200      	movs	r2, #0
 8013a00:	701a      	strb	r2, [r3, #0]
 8013a02:	2200      	movs	r2, #0
 8013a04:	f042 0201 	orr.w	r2, r2, #1
 8013a08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	f042 0208 	orr.w	r2, r2, #8
 8013a12:	709a      	strb	r2, [r3, #2]
 8013a14:	2200      	movs	r2, #0
 8013a16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	2206      	movs	r2, #6
 8013a1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	2204      	movs	r2, #4
 8013a22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013a24:	f640 0306 	movw	r3, #2054	@ 0x806
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	68ba      	ldr	r2, [r7, #8]
 8013a2e:	69b9      	ldr	r1, [r7, #24]
 8013a30:	68f8      	ldr	r0, [r7, #12]
 8013a32:	f001 fb99 	bl	8015168 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013a36:	69b8      	ldr	r0, [r7, #24]
 8013a38:	f7f7 f8ae 	bl	800ab98 <pbuf_free>
  p = NULL;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013a40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3720      	adds	r7, #32
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	080189bc 	.word	0x080189bc
 8013a50:	08018b0c 	.word	0x08018b0c
 8013a54:	08018a34 	.word	0x08018a34
 8013a58:	08018bbc 	.word	0x08018bbc
 8013a5c:	08018bf0 	.word	0x08018bf0

08013a60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b088      	sub	sp, #32
 8013a64:	af04      	add	r7, sp, #16
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	9203      	str	r2, [sp, #12]
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	9202      	str	r2, [sp, #8]
 8013a84:	4a06      	ldr	r2, [pc, #24]	@ (8013aa0 <etharp_request_dst+0x40>)
 8013a86:	9201      	str	r2, [sp, #4]
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	687a      	ldr	r2, [r7, #4]
 8013a8e:	68f8      	ldr	r0, [r7, #12]
 8013a90:	f7ff ff5a 	bl	8013948 <etharp_raw>
 8013a94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3710      	adds	r7, #16
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	080191b8 	.word	0x080191b8

08013aa4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013aae:	4a05      	ldr	r2, [pc, #20]	@ (8013ac4 <etharp_request+0x20>)
 8013ab0:	6839      	ldr	r1, [r7, #0]
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f7ff ffd4 	bl	8013a60 <etharp_request_dst>
 8013ab8:	4603      	mov	r3, r0
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3708      	adds	r7, #8
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	bf00      	nop
 8013ac4:	080191b0 	.word	0x080191b0

08013ac8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b08e      	sub	sp, #56	@ 0x38
 8013acc:	af04      	add	r7, sp, #16
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013ad2:	4b79      	ldr	r3, [pc, #484]	@ (8013cb8 <icmp_input+0x1f0>)
 8013ad4:	689b      	ldr	r3, [r3, #8]
 8013ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	f003 030f 	and.w	r3, r3, #15
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8013ae8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013aea:	2b13      	cmp	r3, #19
 8013aec:	f240 80cd 	bls.w	8013c8a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	895b      	ldrh	r3, [r3, #10]
 8013af4:	2b03      	cmp	r3, #3
 8013af6:	f240 80ca 	bls.w	8013c8e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	781b      	ldrb	r3, [r3, #0]
 8013b00:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013b04:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f000 80b7 	beq.w	8013c7c <icmp_input+0x1b4>
 8013b0e:	2b08      	cmp	r3, #8
 8013b10:	f040 80b7 	bne.w	8013c82 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013b14:	4b69      	ldr	r3, [pc, #420]	@ (8013cbc <icmp_input+0x1f4>)
 8013b16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b18:	4b67      	ldr	r3, [pc, #412]	@ (8013cb8 <icmp_input+0x1f0>)
 8013b1a:	695b      	ldr	r3, [r3, #20]
 8013b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013b20:	2be0      	cmp	r3, #224	@ 0xe0
 8013b22:	f000 80bb 	beq.w	8013c9c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013b26:	4b64      	ldr	r3, [pc, #400]	@ (8013cb8 <icmp_input+0x1f0>)
 8013b28:	695b      	ldr	r3, [r3, #20]
 8013b2a:	4a63      	ldr	r2, [pc, #396]	@ (8013cb8 <icmp_input+0x1f0>)
 8013b2c:	6812      	ldr	r2, [r2, #0]
 8013b2e:	4611      	mov	r1, r2
 8013b30:	4618      	mov	r0, r3
 8013b32:	f000 fc0b 	bl	801434c <ip4_addr_isbroadcast_u32>
 8013b36:	4603      	mov	r3, r0
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	f040 80b1 	bne.w	8013ca0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	891b      	ldrh	r3, [r3, #8]
 8013b42:	2b07      	cmp	r3, #7
 8013b44:	f240 80a5 	bls.w	8013c92 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013b48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b4a:	330e      	adds	r3, #14
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f7f6 ff8c 	bl	800aa6c <pbuf_add_header>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d04b      	beq.n	8013bf2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	891a      	ldrh	r2, [r3, #8]
 8013b5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b60:	4413      	add	r3, r2
 8013b62:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	891b      	ldrh	r3, [r3, #8]
 8013b68:	8b7a      	ldrh	r2, [r7, #26]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	f0c0 809a 	bcc.w	8013ca4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013b70:	8b7b      	ldrh	r3, [r7, #26]
 8013b72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b76:	4619      	mov	r1, r3
 8013b78:	200e      	movs	r0, #14
 8013b7a:	f7f6 fd29 	bl	800a5d0 <pbuf_alloc>
 8013b7e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	f000 8090 	beq.w	8013ca8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	895b      	ldrh	r3, [r3, #10]
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b90:	3308      	adds	r3, #8
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d203      	bcs.n	8013b9e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013b96:	6978      	ldr	r0, [r7, #20]
 8013b98:	f7f6 fffe 	bl	800ab98 <pbuf_free>
          goto icmperr;
 8013b9c:	e085      	b.n	8013caa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f001 fd5f 	bl	801566a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013bac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bae:	4619      	mov	r1, r3
 8013bb0:	6978      	ldr	r0, [r7, #20]
 8013bb2:	f7f6 ff6b 	bl	800aa8c <pbuf_remove_header>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d009      	beq.n	8013bd0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013bbc:	4b40      	ldr	r3, [pc, #256]	@ (8013cc0 <icmp_input+0x1f8>)
 8013bbe:	22b6      	movs	r2, #182	@ 0xb6
 8013bc0:	4940      	ldr	r1, [pc, #256]	@ (8013cc4 <icmp_input+0x1fc>)
 8013bc2:	4841      	ldr	r0, [pc, #260]	@ (8013cc8 <icmp_input+0x200>)
 8013bc4:	f001 fc18 	bl	80153f8 <iprintf>
          pbuf_free(r);
 8013bc8:	6978      	ldr	r0, [r7, #20]
 8013bca:	f7f6 ffe5 	bl	800ab98 <pbuf_free>
          goto icmperr;
 8013bce:	e06c      	b.n	8013caa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013bd0:	6879      	ldr	r1, [r7, #4]
 8013bd2:	6978      	ldr	r0, [r7, #20]
 8013bd4:	f7f7 f908 	bl	800ade8 <pbuf_copy>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d003      	beq.n	8013be6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013bde:	6978      	ldr	r0, [r7, #20]
 8013be0:	f7f6 ffda 	bl	800ab98 <pbuf_free>
          goto icmperr;
 8013be4:	e061      	b.n	8013caa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f7f6 ffd6 	bl	800ab98 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	607b      	str	r3, [r7, #4]
 8013bf0:	e00f      	b.n	8013c12 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013bf2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bf4:	330e      	adds	r3, #14
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f7f6 ff47 	bl	800aa8c <pbuf_remove_header>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d006      	beq.n	8013c12 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013c04:	4b2e      	ldr	r3, [pc, #184]	@ (8013cc0 <icmp_input+0x1f8>)
 8013c06:	22c7      	movs	r2, #199	@ 0xc7
 8013c08:	4930      	ldr	r1, [pc, #192]	@ (8013ccc <icmp_input+0x204>)
 8013c0a:	482f      	ldr	r0, [pc, #188]	@ (8013cc8 <icmp_input+0x200>)
 8013c0c:	f001 fbf4 	bl	80153f8 <iprintf>
          goto icmperr;
 8013c10:	e04b      	b.n	8013caa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013c18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f7f6 ff25 	bl	800aa6c <pbuf_add_header>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d12b      	bne.n	8013c80 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013c36:	4b20      	ldr	r3, [pc, #128]	@ (8013cb8 <icmp_input+0x1f0>)
 8013c38:	691a      	ldr	r2, [r3, #16]
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	2200      	movs	r2, #0
 8013c42:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	2200      	movs	r2, #0
 8013c48:	709a      	strb	r2, [r3, #2]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	22ff      	movs	r2, #255	@ 0xff
 8013c52:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	2200      	movs	r2, #0
 8013c58:	729a      	strb	r2, [r3, #10]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	9302      	str	r3, [sp, #8]
 8013c62:	2301      	movs	r3, #1
 8013c64:	9301      	str	r3, [sp, #4]
 8013c66:	2300      	movs	r3, #0
 8013c68:	9300      	str	r3, [sp, #0]
 8013c6a:	23ff      	movs	r3, #255	@ 0xff
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	69f9      	ldr	r1, [r7, #28]
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f000 fa93 	bl	801419c <ip4_output_if>
 8013c76:	4603      	mov	r3, r0
 8013c78:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013c7a:	e001      	b.n	8013c80 <icmp_input+0x1b8>
      break;
 8013c7c:	bf00      	nop
 8013c7e:	e000      	b.n	8013c82 <icmp_input+0x1ba>
      break;
 8013c80:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7f6 ff88 	bl	800ab98 <pbuf_free>
  return;
 8013c88:	e013      	b.n	8013cb2 <icmp_input+0x1ea>
    goto lenerr;
 8013c8a:	bf00      	nop
 8013c8c:	e002      	b.n	8013c94 <icmp_input+0x1cc>
    goto lenerr;
 8013c8e:	bf00      	nop
 8013c90:	e000      	b.n	8013c94 <icmp_input+0x1cc>
        goto lenerr;
 8013c92:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f7f6 ff7f 	bl	800ab98 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013c9a:	e00a      	b.n	8013cb2 <icmp_input+0x1ea>
        goto icmperr;
 8013c9c:	bf00      	nop
 8013c9e:	e004      	b.n	8013caa <icmp_input+0x1e2>
        goto icmperr;
 8013ca0:	bf00      	nop
 8013ca2:	e002      	b.n	8013caa <icmp_input+0x1e2>
          goto icmperr;
 8013ca4:	bf00      	nop
 8013ca6:	e000      	b.n	8013caa <icmp_input+0x1e2>
          goto icmperr;
 8013ca8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f7f6 ff74 	bl	800ab98 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013cb0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013cb2:	3728      	adds	r7, #40	@ 0x28
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	2000a188 	.word	0x2000a188
 8013cbc:	2000a19c 	.word	0x2000a19c
 8013cc0:	08018c34 	.word	0x08018c34
 8013cc4:	08018c6c 	.word	0x08018c6c
 8013cc8:	08018ca4 	.word	0x08018ca4
 8013ccc:	08018ccc 	.word	0x08018ccc

08013cd0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	460b      	mov	r3, r1
 8013cda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013cdc:	78fb      	ldrb	r3, [r7, #3]
 8013cde:	461a      	mov	r2, r3
 8013ce0:	2103      	movs	r1, #3
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f000 f814 	bl	8013d10 <icmp_send_response>
}
 8013ce8:	bf00      	nop
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013cfc:	78fb      	ldrb	r3, [r7, #3]
 8013cfe:	461a      	mov	r2, r3
 8013d00:	210b      	movs	r1, #11
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f000 f804 	bl	8013d10 <icmp_send_response>
}
 8013d08:	bf00      	nop
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b08c      	sub	sp, #48	@ 0x30
 8013d14:	af04      	add	r7, sp, #16
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	460b      	mov	r3, r1
 8013d1a:	70fb      	strb	r3, [r7, #3]
 8013d1c:	4613      	mov	r3, r2
 8013d1e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013d20:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013d24:	2124      	movs	r1, #36	@ 0x24
 8013d26:	2022      	movs	r0, #34	@ 0x22
 8013d28:	f7f6 fc52 	bl	800a5d0 <pbuf_alloc>
 8013d2c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013d2e:	69fb      	ldr	r3, [r7, #28]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d04c      	beq.n	8013dce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013d34:	69fb      	ldr	r3, [r7, #28]
 8013d36:	895b      	ldrh	r3, [r3, #10]
 8013d38:	2b23      	cmp	r3, #35	@ 0x23
 8013d3a:	d806      	bhi.n	8013d4a <icmp_send_response+0x3a>
 8013d3c:	4b26      	ldr	r3, [pc, #152]	@ (8013dd8 <icmp_send_response+0xc8>)
 8013d3e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013d42:	4926      	ldr	r1, [pc, #152]	@ (8013ddc <icmp_send_response+0xcc>)
 8013d44:	4826      	ldr	r0, [pc, #152]	@ (8013de0 <icmp_send_response+0xd0>)
 8013d46:	f001 fb57 	bl	80153f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	78fa      	ldrb	r2, [r7, #3]
 8013d5a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	78ba      	ldrb	r2, [r7, #2]
 8013d60:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	2200      	movs	r2, #0
 8013d66:	711a      	strb	r2, [r3, #4]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	719a      	strb	r2, [r3, #6]
 8013d72:	2200      	movs	r2, #0
 8013d74:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	685b      	ldr	r3, [r3, #4]
 8013d7a:	f103 0008 	add.w	r0, r3, #8
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	221c      	movs	r2, #28
 8013d84:	4619      	mov	r1, r3
 8013d86:	f001 fc70 	bl	801566a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013d8a:	69bb      	ldr	r3, [r7, #24]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013d90:	f107 030c 	add.w	r3, r7, #12
 8013d94:	4618      	mov	r0, r3
 8013d96:	f000 f825 	bl	8013de4 <ip4_route>
 8013d9a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d011      	beq.n	8013dc6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	2200      	movs	r2, #0
 8013da6:	709a      	strb	r2, [r3, #2]
 8013da8:	2200      	movs	r2, #0
 8013daa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013dac:	f107 020c 	add.w	r2, r7, #12
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	9302      	str	r3, [sp, #8]
 8013db4:	2301      	movs	r3, #1
 8013db6:	9301      	str	r3, [sp, #4]
 8013db8:	2300      	movs	r3, #0
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	23ff      	movs	r3, #255	@ 0xff
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	69f8      	ldr	r0, [r7, #28]
 8013dc2:	f000 f9eb 	bl	801419c <ip4_output_if>
  }
  pbuf_free(q);
 8013dc6:	69f8      	ldr	r0, [r7, #28]
 8013dc8:	f7f6 fee6 	bl	800ab98 <pbuf_free>
 8013dcc:	e000      	b.n	8013dd0 <icmp_send_response+0xc0>
    return;
 8013dce:	bf00      	nop
}
 8013dd0:	3720      	adds	r7, #32
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	08018c34 	.word	0x08018c34
 8013ddc:	08018d00 	.word	0x08018d00
 8013de0:	08018ca4 	.word	0x08018ca4

08013de4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b085      	sub	sp, #20
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013dec:	4b33      	ldr	r3, [pc, #204]	@ (8013ebc <ip4_route+0xd8>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	60fb      	str	r3, [r7, #12]
 8013df2:	e036      	b.n	8013e62 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013dfa:	f003 0301 	and.w	r3, r3, #1
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d02b      	beq.n	8013e5c <ip4_route+0x78>
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013e0a:	089b      	lsrs	r3, r3, #2
 8013e0c:	f003 0301 	and.w	r3, r3, #1
 8013e10:	b2db      	uxtb	r3, r3
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d022      	beq.n	8013e5c <ip4_route+0x78>
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	3304      	adds	r3, #4
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d01d      	beq.n	8013e5c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	3304      	adds	r3, #4
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	405a      	eors	r2, r3
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	3308      	adds	r3, #8
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	4013      	ands	r3, r2
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d101      	bne.n	8013e3c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	e038      	b.n	8013eae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013e42:	f003 0302 	and.w	r3, r3, #2
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d108      	bne.n	8013e5c <ip4_route+0x78>
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681a      	ldr	r2, [r3, #0]
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	330c      	adds	r3, #12
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d101      	bne.n	8013e5c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	e028      	b.n	8013eae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	60fb      	str	r3, [r7, #12]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d1c5      	bne.n	8013df4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013e68:	4b15      	ldr	r3, [pc, #84]	@ (8013ec0 <ip4_route+0xdc>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d01a      	beq.n	8013ea6 <ip4_route+0xc2>
 8013e70:	4b13      	ldr	r3, [pc, #76]	@ (8013ec0 <ip4_route+0xdc>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013e78:	f003 0301 	and.w	r3, r3, #1
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d012      	beq.n	8013ea6 <ip4_route+0xc2>
 8013e80:	4b0f      	ldr	r3, [pc, #60]	@ (8013ec0 <ip4_route+0xdc>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013e88:	f003 0304 	and.w	r3, r3, #4
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d00a      	beq.n	8013ea6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013e90:	4b0b      	ldr	r3, [pc, #44]	@ (8013ec0 <ip4_route+0xdc>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	3304      	adds	r3, #4
 8013e96:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d004      	beq.n	8013ea6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ea4:	d101      	bne.n	8013eaa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	e001      	b.n	8013eae <ip4_route+0xca>
  }

  return netif_default;
 8013eaa:	4b05      	ldr	r3, [pc, #20]	@ (8013ec0 <ip4_route+0xdc>)
 8013eac:	681b      	ldr	r3, [r3, #0]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3714      	adds	r7, #20
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb8:	4770      	bx	lr
 8013eba:	bf00      	nop
 8013ebc:	2000d0b8 	.word	0x2000d0b8
 8013ec0:	2000d0bc 	.word	0x2000d0bc

08013ec4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013ed2:	f003 0301 	and.w	r3, r3, #1
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d016      	beq.n	8013f0a <ip4_input_accept+0x46>
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	3304      	adds	r3, #4
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d011      	beq.n	8013f0a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8013f14 <ip4_input_accept+0x50>)
 8013ee8:	695a      	ldr	r2, [r3, #20]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	3304      	adds	r3, #4
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d008      	beq.n	8013f06 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013ef4:	4b07      	ldr	r3, [pc, #28]	@ (8013f14 <ip4_input_accept+0x50>)
 8013ef6:	695b      	ldr	r3, [r3, #20]
 8013ef8:	6879      	ldr	r1, [r7, #4]
 8013efa:	4618      	mov	r0, r3
 8013efc:	f000 fa26 	bl	801434c <ip4_addr_isbroadcast_u32>
 8013f00:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d001      	beq.n	8013f0a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013f06:	2301      	movs	r3, #1
 8013f08:	e000      	b.n	8013f0c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013f0a:	2300      	movs	r3, #0
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	2000a188 	.word	0x2000a188

08013f18 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b088      	sub	sp, #32
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8013f22:	2301      	movs	r3, #1
 8013f24:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	091b      	lsrs	r3, r3, #4
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	2b04      	cmp	r3, #4
 8013f36:	d004      	beq.n	8013f42 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f7f6 fe2d 	bl	800ab98 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	e123      	b.n	801418a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013f42:	69fb      	ldr	r3, [r7, #28]
 8013f44:	781b      	ldrb	r3, [r3, #0]
 8013f46:	f003 030f 	and.w	r3, r3, #15
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	009b      	lsls	r3, r3, #2
 8013f4e:	b2db      	uxtb	r3, r3
 8013f50:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013f52:	69fb      	ldr	r3, [r7, #28]
 8013f54:	885b      	ldrh	r3, [r3, #2]
 8013f56:	b29b      	uxth	r3, r3
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7f5 fad7 	bl	800950c <lwip_htons>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	891b      	ldrh	r3, [r3, #8]
 8013f66:	8a3a      	ldrh	r2, [r7, #16]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d204      	bcs.n	8013f76 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013f6c:	8a3b      	ldrh	r3, [r7, #16]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7f6 fc8b 	bl	800a88c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	895b      	ldrh	r3, [r3, #10]
 8013f7a:	8a7a      	ldrh	r2, [r7, #18]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d807      	bhi.n	8013f90 <ip4_input+0x78>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	891b      	ldrh	r3, [r3, #8]
 8013f84:	8a3a      	ldrh	r2, [r7, #16]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d802      	bhi.n	8013f90 <ip4_input+0x78>
 8013f8a:	8a7b      	ldrh	r3, [r7, #18]
 8013f8c:	2b13      	cmp	r3, #19
 8013f8e:	d804      	bhi.n	8013f9a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f7f6 fe01 	bl	800ab98 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013f96:	2300      	movs	r3, #0
 8013f98:	e0f7      	b.n	801418a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013f9a:	69fb      	ldr	r3, [r7, #28]
 8013f9c:	691b      	ldr	r3, [r3, #16]
 8013f9e:	4a7d      	ldr	r2, [pc, #500]	@ (8014194 <ip4_input+0x27c>)
 8013fa0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	68db      	ldr	r3, [r3, #12]
 8013fa6:	4a7b      	ldr	r2, [pc, #492]	@ (8014194 <ip4_input+0x27c>)
 8013fa8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013faa:	4b7a      	ldr	r3, [pc, #488]	@ (8014194 <ip4_input+0x27c>)
 8013fac:	695b      	ldr	r3, [r3, #20]
 8013fae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013fb2:	2be0      	cmp	r3, #224	@ 0xe0
 8013fb4:	d112      	bne.n	8013fdc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013fbc:	f003 0301 	and.w	r3, r3, #1
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d007      	beq.n	8013fd6 <ip4_input+0xbe>
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	3304      	adds	r3, #4
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d002      	beq.n	8013fd6 <ip4_input+0xbe>
      netif = inp;
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	61bb      	str	r3, [r7, #24]
 8013fd4:	e02a      	b.n	801402c <ip4_input+0x114>
    } else {
      netif = NULL;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	61bb      	str	r3, [r7, #24]
 8013fda:	e027      	b.n	801402c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013fdc:	6838      	ldr	r0, [r7, #0]
 8013fde:	f7ff ff71 	bl	8013ec4 <ip4_input_accept>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d002      	beq.n	8013fee <ip4_input+0xd6>
      netif = inp;
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	61bb      	str	r3, [r7, #24]
 8013fec:	e01e      	b.n	801402c <ip4_input+0x114>
    } else {
      netif = NULL;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013ff2:	4b68      	ldr	r3, [pc, #416]	@ (8014194 <ip4_input+0x27c>)
 8013ff4:	695b      	ldr	r3, [r3, #20]
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ffa:	d017      	beq.n	801402c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013ffc:	4b66      	ldr	r3, [pc, #408]	@ (8014198 <ip4_input+0x280>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	61bb      	str	r3, [r7, #24]
 8014002:	e00e      	b.n	8014022 <ip4_input+0x10a>
          if (netif == inp) {
 8014004:	69ba      	ldr	r2, [r7, #24]
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	429a      	cmp	r2, r3
 801400a:	d006      	beq.n	801401a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801400c:	69b8      	ldr	r0, [r7, #24]
 801400e:	f7ff ff59 	bl	8013ec4 <ip4_input_accept>
 8014012:	4603      	mov	r3, r0
 8014014:	2b00      	cmp	r3, #0
 8014016:	d108      	bne.n	801402a <ip4_input+0x112>
 8014018:	e000      	b.n	801401c <ip4_input+0x104>
            continue;
 801401a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	61bb      	str	r3, [r7, #24]
 8014022:	69bb      	ldr	r3, [r7, #24]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d1ed      	bne.n	8014004 <ip4_input+0xec>
 8014028:	e000      	b.n	801402c <ip4_input+0x114>
            break;
 801402a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d111      	bne.n	8014056 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	7a5b      	ldrb	r3, [r3, #9]
 8014036:	2b11      	cmp	r3, #17
 8014038:	d10d      	bne.n	8014056 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801403a:	8a7b      	ldrh	r3, [r7, #18]
 801403c:	69fa      	ldr	r2, [r7, #28]
 801403e:	4413      	add	r3, r2
 8014040:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	885b      	ldrh	r3, [r3, #2]
 8014046:	b29b      	uxth	r3, r3
 8014048:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801404c:	d103      	bne.n	8014056 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8014052:	2300      	movs	r3, #0
 8014054:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d017      	beq.n	801408c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801405c:	4b4d      	ldr	r3, [pc, #308]	@ (8014194 <ip4_input+0x27c>)
 801405e:	691b      	ldr	r3, [r3, #16]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d013      	beq.n	801408c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014064:	4b4b      	ldr	r3, [pc, #300]	@ (8014194 <ip4_input+0x27c>)
 8014066:	691b      	ldr	r3, [r3, #16]
 8014068:	6839      	ldr	r1, [r7, #0]
 801406a:	4618      	mov	r0, r3
 801406c:	f000 f96e 	bl	801434c <ip4_addr_isbroadcast_u32>
 8014070:	4603      	mov	r3, r0
 8014072:	2b00      	cmp	r3, #0
 8014074:	d105      	bne.n	8014082 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014076:	4b47      	ldr	r3, [pc, #284]	@ (8014194 <ip4_input+0x27c>)
 8014078:	691b      	ldr	r3, [r3, #16]
 801407a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801407e:	2be0      	cmp	r3, #224	@ 0xe0
 8014080:	d104      	bne.n	801408c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f7f6 fd88 	bl	800ab98 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014088:	2300      	movs	r3, #0
 801408a:	e07e      	b.n	801418a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d104      	bne.n	801409c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f7f6 fd80 	bl	800ab98 <pbuf_free>
    return ERR_OK;
 8014098:	2300      	movs	r3, #0
 801409a:	e076      	b.n	801418a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801409c:	69fb      	ldr	r3, [r7, #28]
 801409e:	88db      	ldrh	r3, [r3, #6]
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	461a      	mov	r2, r3
 80140a4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80140a8:	4013      	ands	r3, r2
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d00b      	beq.n	80140c6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f000 fc92 	bl	80149d8 <ip4_reass>
 80140b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d101      	bne.n	80140c0 <ip4_input+0x1a8>
      return ERR_OK;
 80140bc:	2300      	movs	r3, #0
 80140be:	e064      	b.n	801418a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80140c6:	4a33      	ldr	r2, [pc, #204]	@ (8014194 <ip4_input+0x27c>)
 80140c8:	69bb      	ldr	r3, [r7, #24]
 80140ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80140cc:	4a31      	ldr	r2, [pc, #196]	@ (8014194 <ip4_input+0x27c>)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80140d2:	4a30      	ldr	r2, [pc, #192]	@ (8014194 <ip4_input+0x27c>)
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80140d8:	69fb      	ldr	r3, [r7, #28]
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	f003 030f 	and.w	r3, r3, #15
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	009b      	lsls	r3, r3, #2
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	461a      	mov	r2, r3
 80140e8:	4b2a      	ldr	r3, [pc, #168]	@ (8014194 <ip4_input+0x27c>)
 80140ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80140ec:	8a7b      	ldrh	r3, [r7, #18]
 80140ee:	4619      	mov	r1, r3
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f7f6 fccb 	bl	800aa8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	7a5b      	ldrb	r3, [r3, #9]
 80140fa:	2b11      	cmp	r3, #17
 80140fc:	d006      	beq.n	801410c <ip4_input+0x1f4>
 80140fe:	2b11      	cmp	r3, #17
 8014100:	dc13      	bgt.n	801412a <ip4_input+0x212>
 8014102:	2b01      	cmp	r3, #1
 8014104:	d00c      	beq.n	8014120 <ip4_input+0x208>
 8014106:	2b06      	cmp	r3, #6
 8014108:	d005      	beq.n	8014116 <ip4_input+0x1fe>
 801410a:	e00e      	b.n	801412a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801410c:	6839      	ldr	r1, [r7, #0]
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f7fc faee 	bl	80106f0 <udp_input>
        break;
 8014114:	e026      	b.n	8014164 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014116:	6839      	ldr	r1, [r7, #0]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7f8 fb77 	bl	800c80c <tcp_input>
        break;
 801411e:	e021      	b.n	8014164 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014120:	6839      	ldr	r1, [r7, #0]
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7ff fcd0 	bl	8013ac8 <icmp_input>
        break;
 8014128:	e01c      	b.n	8014164 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801412a:	4b1a      	ldr	r3, [pc, #104]	@ (8014194 <ip4_input+0x27c>)
 801412c:	695b      	ldr	r3, [r3, #20]
 801412e:	69b9      	ldr	r1, [r7, #24]
 8014130:	4618      	mov	r0, r3
 8014132:	f000 f90b 	bl	801434c <ip4_addr_isbroadcast_u32>
 8014136:	4603      	mov	r3, r0
 8014138:	2b00      	cmp	r3, #0
 801413a:	d10f      	bne.n	801415c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801413c:	4b15      	ldr	r3, [pc, #84]	@ (8014194 <ip4_input+0x27c>)
 801413e:	695b      	ldr	r3, [r3, #20]
 8014140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014144:	2be0      	cmp	r3, #224	@ 0xe0
 8014146:	d009      	beq.n	801415c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014148:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801414c:	4619      	mov	r1, r3
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f7f6 fd0f 	bl	800ab72 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014154:	2102      	movs	r1, #2
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f7ff fdba 	bl	8013cd0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7f6 fd1b 	bl	800ab98 <pbuf_free>
        break;
 8014162:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014164:	4b0b      	ldr	r3, [pc, #44]	@ (8014194 <ip4_input+0x27c>)
 8014166:	2200      	movs	r2, #0
 8014168:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801416a:	4b0a      	ldr	r3, [pc, #40]	@ (8014194 <ip4_input+0x27c>)
 801416c:	2200      	movs	r2, #0
 801416e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014170:	4b08      	ldr	r3, [pc, #32]	@ (8014194 <ip4_input+0x27c>)
 8014172:	2200      	movs	r2, #0
 8014174:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014176:	4b07      	ldr	r3, [pc, #28]	@ (8014194 <ip4_input+0x27c>)
 8014178:	2200      	movs	r2, #0
 801417a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801417c:	4b05      	ldr	r3, [pc, #20]	@ (8014194 <ip4_input+0x27c>)
 801417e:	2200      	movs	r2, #0
 8014180:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014182:	4b04      	ldr	r3, [pc, #16]	@ (8014194 <ip4_input+0x27c>)
 8014184:	2200      	movs	r2, #0
 8014186:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014188:	2300      	movs	r3, #0
}
 801418a:	4618      	mov	r0, r3
 801418c:	3720      	adds	r7, #32
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	2000a188 	.word	0x2000a188
 8014198:	2000d0b8 	.word	0x2000d0b8

0801419c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b08a      	sub	sp, #40	@ 0x28
 80141a0:	af04      	add	r7, sp, #16
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	60b9      	str	r1, [r7, #8]
 80141a6:	607a      	str	r2, [r7, #4]
 80141a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d009      	beq.n	80141c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d003      	beq.n	80141c2 <ip4_output_if+0x26>
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d102      	bne.n	80141c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80141c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141c4:	3304      	adds	r3, #4
 80141c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80141c8:	78fa      	ldrb	r2, [r7, #3]
 80141ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141cc:	9302      	str	r3, [sp, #8]
 80141ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80141d2:	9301      	str	r3, [sp, #4]
 80141d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80141d8:	9300      	str	r3, [sp, #0]
 80141da:	4613      	mov	r3, r2
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	6979      	ldr	r1, [r7, #20]
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	f000 f805 	bl	80141f0 <ip4_output_if_src>
 80141e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3718      	adds	r7, #24
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b088      	sub	sp, #32
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
 80141fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	7b9b      	ldrb	r3, [r3, #14]
 8014202:	2b01      	cmp	r3, #1
 8014204:	d006      	beq.n	8014214 <ip4_output_if_src+0x24>
 8014206:	4b4b      	ldr	r3, [pc, #300]	@ (8014334 <ip4_output_if_src+0x144>)
 8014208:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801420c:	494a      	ldr	r1, [pc, #296]	@ (8014338 <ip4_output_if_src+0x148>)
 801420e:	484b      	ldr	r0, [pc, #300]	@ (801433c <ip4_output_if_src+0x14c>)
 8014210:	f001 f8f2 	bl	80153f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d060      	beq.n	80142dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801421a:	2314      	movs	r3, #20
 801421c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801421e:	2114      	movs	r1, #20
 8014220:	68f8      	ldr	r0, [r7, #12]
 8014222:	f7f6 fc23 	bl	800aa6c <pbuf_add_header>
 8014226:	4603      	mov	r3, r0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d002      	beq.n	8014232 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801422c:	f06f 0301 	mvn.w	r3, #1
 8014230:	e07c      	b.n	801432c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	895b      	ldrh	r3, [r3, #10]
 801423c:	2b13      	cmp	r3, #19
 801423e:	d806      	bhi.n	801424e <ip4_output_if_src+0x5e>
 8014240:	4b3c      	ldr	r3, [pc, #240]	@ (8014334 <ip4_output_if_src+0x144>)
 8014242:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014246:	493e      	ldr	r1, [pc, #248]	@ (8014340 <ip4_output_if_src+0x150>)
 8014248:	483c      	ldr	r0, [pc, #240]	@ (801433c <ip4_output_if_src+0x14c>)
 801424a:	f001 f8d5 	bl	80153f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	78fa      	ldrb	r2, [r7, #3]
 8014252:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801425a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014264:	8b7b      	ldrh	r3, [r7, #26]
 8014266:	089b      	lsrs	r3, r3, #2
 8014268:	b29b      	uxth	r3, r3
 801426a:	b2db      	uxtb	r3, r3
 801426c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014270:	b2da      	uxtb	r2, r3
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014276:	69fb      	ldr	r3, [r7, #28]
 8014278:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801427c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	891b      	ldrh	r3, [r3, #8]
 8014282:	4618      	mov	r0, r3
 8014284:	f7f5 f942 	bl	800950c <lwip_htons>
 8014288:	4603      	mov	r3, r0
 801428a:	461a      	mov	r2, r3
 801428c:	69fb      	ldr	r3, [r7, #28]
 801428e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	2200      	movs	r2, #0
 8014294:	719a      	strb	r2, [r3, #6]
 8014296:	2200      	movs	r2, #0
 8014298:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801429a:	4b2a      	ldr	r3, [pc, #168]	@ (8014344 <ip4_output_if_src+0x154>)
 801429c:	881b      	ldrh	r3, [r3, #0]
 801429e:	4618      	mov	r0, r3
 80142a0:	f7f5 f934 	bl	800950c <lwip_htons>
 80142a4:	4603      	mov	r3, r0
 80142a6:	461a      	mov	r2, r3
 80142a8:	69fb      	ldr	r3, [r7, #28]
 80142aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80142ac:	4b25      	ldr	r3, [pc, #148]	@ (8014344 <ip4_output_if_src+0x154>)
 80142ae:	881b      	ldrh	r3, [r3, #0]
 80142b0:	3301      	adds	r3, #1
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	4b23      	ldr	r3, [pc, #140]	@ (8014344 <ip4_output_if_src+0x154>)
 80142b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d104      	bne.n	80142c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80142be:	4b22      	ldr	r3, [pc, #136]	@ (8014348 <ip4_output_if_src+0x158>)
 80142c0:	681a      	ldr	r2, [r3, #0]
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	60da      	str	r2, [r3, #12]
 80142c6:	e003      	b.n	80142d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	69fb      	ldr	r3, [r7, #28]
 80142ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	2200      	movs	r2, #0
 80142d4:	729a      	strb	r2, [r3, #10]
 80142d6:	2200      	movs	r2, #0
 80142d8:	72da      	strb	r2, [r3, #11]
 80142da:	e00f      	b.n	80142fc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	895b      	ldrh	r3, [r3, #10]
 80142e0:	2b13      	cmp	r3, #19
 80142e2:	d802      	bhi.n	80142ea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80142e4:	f06f 0301 	mvn.w	r3, #1
 80142e8:	e020      	b.n	801432c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80142f0:	69fb      	ldr	r3, [r7, #28]
 80142f2:	691b      	ldr	r3, [r3, #16]
 80142f4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80142f6:	f107 0314 	add.w	r3, r7, #20
 80142fa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80142fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014300:	2b00      	cmp	r3, #0
 8014302:	d00c      	beq.n	801431e <ip4_output_if_src+0x12e>
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	891a      	ldrh	r2, [r3, #8]
 8014308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801430c:	429a      	cmp	r2, r3
 801430e:	d906      	bls.n	801431e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014310:	687a      	ldr	r2, [r7, #4]
 8014312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014314:	68f8      	ldr	r0, [r7, #12]
 8014316:	f000 fd53 	bl	8014dc0 <ip4_frag>
 801431a:	4603      	mov	r3, r0
 801431c:	e006      	b.n	801432c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014320:	695b      	ldr	r3, [r3, #20]
 8014322:	687a      	ldr	r2, [r7, #4]
 8014324:	68f9      	ldr	r1, [r7, #12]
 8014326:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014328:	4798      	blx	r3
 801432a:	4603      	mov	r3, r0
}
 801432c:	4618      	mov	r0, r3
 801432e:	3720      	adds	r7, #32
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	08018d2c 	.word	0x08018d2c
 8014338:	08018d60 	.word	0x08018d60
 801433c:	08018d6c 	.word	0x08018d6c
 8014340:	08018d94 	.word	0x08018d94
 8014344:	2000d24a 	.word	0x2000d24a
 8014348:	080191a8 	.word	0x080191a8

0801434c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801434c:	b480      	push	{r7}
 801434e:	b085      	sub	sp, #20
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
 8014354:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014360:	d002      	beq.n	8014368 <ip4_addr_isbroadcast_u32+0x1c>
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d101      	bne.n	801436c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014368:	2301      	movs	r3, #1
 801436a:	e02a      	b.n	80143c2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014372:	f003 0302 	and.w	r3, r3, #2
 8014376:	2b00      	cmp	r3, #0
 8014378:	d101      	bne.n	801437e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801437a:	2300      	movs	r3, #0
 801437c:	e021      	b.n	80143c2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	3304      	adds	r3, #4
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	687a      	ldr	r2, [r7, #4]
 8014386:	429a      	cmp	r2, r3
 8014388:	d101      	bne.n	801438e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801438a:	2300      	movs	r3, #0
 801438c:	e019      	b.n	80143c2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801438e:	68fa      	ldr	r2, [r7, #12]
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	3304      	adds	r3, #4
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	405a      	eors	r2, r3
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	3308      	adds	r3, #8
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	4013      	ands	r3, r2
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d10d      	bne.n	80143c0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	3308      	adds	r3, #8
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	43da      	mvns	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	3308      	adds	r3, #8
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80143b8:	429a      	cmp	r2, r3
 80143ba:	d101      	bne.n	80143c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80143bc:	2301      	movs	r3, #1
 80143be:	e000      	b.n	80143c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80143c0:	2300      	movs	r3, #0
  }
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	3714      	adds	r7, #20
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr
	...

080143d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b084      	sub	sp, #16
 80143d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80143d6:	2300      	movs	r3, #0
 80143d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80143da:	4b12      	ldr	r3, [pc, #72]	@ (8014424 <ip_reass_tmr+0x54>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80143e0:	e018      	b.n	8014414 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	7fdb      	ldrb	r3, [r3, #31]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d00b      	beq.n	8014402 <ip_reass_tmr+0x32>
      r->timer--;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	7fdb      	ldrb	r3, [r3, #31]
 80143ee:	3b01      	subs	r3, #1
 80143f0:	b2da      	uxtb	r2, r3
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	60fb      	str	r3, [r7, #12]
 8014400:	e008      	b.n	8014414 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801440c:	68b9      	ldr	r1, [r7, #8]
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f000 f80a 	bl	8014428 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d1e3      	bne.n	80143e2 <ip_reass_tmr+0x12>
    }
  }
}
 801441a:	bf00      	nop
 801441c:	bf00      	nop
 801441e:	3710      	adds	r7, #16
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}
 8014424:	2000d24c 	.word	0x2000d24c

08014428 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b088      	sub	sp, #32
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014432:	2300      	movs	r3, #0
 8014434:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014436:	683a      	ldr	r2, [r7, #0]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	429a      	cmp	r2, r3
 801443c:	d105      	bne.n	801444a <ip_reass_free_complete_datagram+0x22>
 801443e:	4b45      	ldr	r3, [pc, #276]	@ (8014554 <ip_reass_free_complete_datagram+0x12c>)
 8014440:	22ab      	movs	r2, #171	@ 0xab
 8014442:	4945      	ldr	r1, [pc, #276]	@ (8014558 <ip_reass_free_complete_datagram+0x130>)
 8014444:	4845      	ldr	r0, [pc, #276]	@ (801455c <ip_reass_free_complete_datagram+0x134>)
 8014446:	f000 ffd7 	bl	80153f8 <iprintf>
  if (prev != NULL) {
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d00a      	beq.n	8014466 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	429a      	cmp	r2, r3
 8014458:	d005      	beq.n	8014466 <ip_reass_free_complete_datagram+0x3e>
 801445a:	4b3e      	ldr	r3, [pc, #248]	@ (8014554 <ip_reass_free_complete_datagram+0x12c>)
 801445c:	22ad      	movs	r2, #173	@ 0xad
 801445e:	4940      	ldr	r1, [pc, #256]	@ (8014560 <ip_reass_free_complete_datagram+0x138>)
 8014460:	483e      	ldr	r0, [pc, #248]	@ (801455c <ip_reass_free_complete_datagram+0x134>)
 8014462:	f000 ffc9 	bl	80153f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	685b      	ldr	r3, [r3, #4]
 801446c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801446e:	697b      	ldr	r3, [r7, #20]
 8014470:	889b      	ldrh	r3, [r3, #4]
 8014472:	b29b      	uxth	r3, r3
 8014474:	2b00      	cmp	r3, #0
 8014476:	d12a      	bne.n	80144ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	681a      	ldr	r2, [r3, #0]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	6858      	ldr	r0, [r3, #4]
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	3308      	adds	r3, #8
 801448e:	2214      	movs	r2, #20
 8014490:	4619      	mov	r1, r3
 8014492:	f001 f8ea 	bl	801566a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014496:	2101      	movs	r1, #1
 8014498:	69b8      	ldr	r0, [r7, #24]
 801449a:	f7ff fc29 	bl	8013cf0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801449e:	69b8      	ldr	r0, [r7, #24]
 80144a0:	f7f6 fc02 	bl	800aca8 <pbuf_clen>
 80144a4:	4603      	mov	r3, r0
 80144a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80144a8:	8bfa      	ldrh	r2, [r7, #30]
 80144aa:	8a7b      	ldrh	r3, [r7, #18]
 80144ac:	4413      	add	r3, r2
 80144ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80144b2:	db05      	blt.n	80144c0 <ip_reass_free_complete_datagram+0x98>
 80144b4:	4b27      	ldr	r3, [pc, #156]	@ (8014554 <ip_reass_free_complete_datagram+0x12c>)
 80144b6:	22bc      	movs	r2, #188	@ 0xbc
 80144b8:	492a      	ldr	r1, [pc, #168]	@ (8014564 <ip_reass_free_complete_datagram+0x13c>)
 80144ba:	4828      	ldr	r0, [pc, #160]	@ (801455c <ip_reass_free_complete_datagram+0x134>)
 80144bc:	f000 ff9c 	bl	80153f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80144c0:	8bfa      	ldrh	r2, [r7, #30]
 80144c2:	8a7b      	ldrh	r3, [r7, #18]
 80144c4:	4413      	add	r3, r2
 80144c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80144c8:	69b8      	ldr	r0, [r7, #24]
 80144ca:	f7f6 fb65 	bl	800ab98 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80144d4:	e01f      	b.n	8014516 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80144d6:	69bb      	ldr	r3, [r7, #24]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	617b      	str	r3, [r7, #20]
    pcur = p;
 80144dc:	69bb      	ldr	r3, [r7, #24]
 80144de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80144e6:	68f8      	ldr	r0, [r7, #12]
 80144e8:	f7f6 fbde 	bl	800aca8 <pbuf_clen>
 80144ec:	4603      	mov	r3, r0
 80144ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80144f0:	8bfa      	ldrh	r2, [r7, #30]
 80144f2:	8a7b      	ldrh	r3, [r7, #18]
 80144f4:	4413      	add	r3, r2
 80144f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80144fa:	db05      	blt.n	8014508 <ip_reass_free_complete_datagram+0xe0>
 80144fc:	4b15      	ldr	r3, [pc, #84]	@ (8014554 <ip_reass_free_complete_datagram+0x12c>)
 80144fe:	22cc      	movs	r2, #204	@ 0xcc
 8014500:	4918      	ldr	r1, [pc, #96]	@ (8014564 <ip_reass_free_complete_datagram+0x13c>)
 8014502:	4816      	ldr	r0, [pc, #88]	@ (801455c <ip_reass_free_complete_datagram+0x134>)
 8014504:	f000 ff78 	bl	80153f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014508:	8bfa      	ldrh	r2, [r7, #30]
 801450a:	8a7b      	ldrh	r3, [r7, #18]
 801450c:	4413      	add	r3, r2
 801450e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014510:	68f8      	ldr	r0, [r7, #12]
 8014512:	f7f6 fb41 	bl	800ab98 <pbuf_free>
  while (p != NULL) {
 8014516:	69bb      	ldr	r3, [r7, #24]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d1dc      	bne.n	80144d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801451c:	6839      	ldr	r1, [r7, #0]
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f000 f8c2 	bl	80146a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014524:	4b10      	ldr	r3, [pc, #64]	@ (8014568 <ip_reass_free_complete_datagram+0x140>)
 8014526:	881b      	ldrh	r3, [r3, #0]
 8014528:	8bfa      	ldrh	r2, [r7, #30]
 801452a:	429a      	cmp	r2, r3
 801452c:	d905      	bls.n	801453a <ip_reass_free_complete_datagram+0x112>
 801452e:	4b09      	ldr	r3, [pc, #36]	@ (8014554 <ip_reass_free_complete_datagram+0x12c>)
 8014530:	22d2      	movs	r2, #210	@ 0xd2
 8014532:	490e      	ldr	r1, [pc, #56]	@ (801456c <ip_reass_free_complete_datagram+0x144>)
 8014534:	4809      	ldr	r0, [pc, #36]	@ (801455c <ip_reass_free_complete_datagram+0x134>)
 8014536:	f000 ff5f 	bl	80153f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801453a:	4b0b      	ldr	r3, [pc, #44]	@ (8014568 <ip_reass_free_complete_datagram+0x140>)
 801453c:	881a      	ldrh	r2, [r3, #0]
 801453e:	8bfb      	ldrh	r3, [r7, #30]
 8014540:	1ad3      	subs	r3, r2, r3
 8014542:	b29a      	uxth	r2, r3
 8014544:	4b08      	ldr	r3, [pc, #32]	@ (8014568 <ip_reass_free_complete_datagram+0x140>)
 8014546:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014548:	8bfb      	ldrh	r3, [r7, #30]
}
 801454a:	4618      	mov	r0, r3
 801454c:	3720      	adds	r7, #32
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	08018dc4 	.word	0x08018dc4
 8014558:	08018e00 	.word	0x08018e00
 801455c:	08018e0c 	.word	0x08018e0c
 8014560:	08018e34 	.word	0x08018e34
 8014564:	08018e48 	.word	0x08018e48
 8014568:	2000d250 	.word	0x2000d250
 801456c:	08018e68 	.word	0x08018e68

08014570 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b08a      	sub	sp, #40	@ 0x28
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801457a:	2300      	movs	r3, #0
 801457c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801457e:	2300      	movs	r3, #0
 8014580:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014582:	2300      	movs	r3, #0
 8014584:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014586:	2300      	movs	r3, #0
 8014588:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801458a:	2300      	movs	r3, #0
 801458c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801458e:	4b28      	ldr	r3, [pc, #160]	@ (8014630 <ip_reass_remove_oldest_datagram+0xc0>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014594:	e030      	b.n	80145f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014598:	695a      	ldr	r2, [r3, #20]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	429a      	cmp	r2, r3
 80145a0:	d10c      	bne.n	80145bc <ip_reass_remove_oldest_datagram+0x4c>
 80145a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145a4:	699a      	ldr	r2, [r3, #24]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	691b      	ldr	r3, [r3, #16]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d106      	bne.n	80145bc <ip_reass_remove_oldest_datagram+0x4c>
 80145ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145b0:	899a      	ldrh	r2, [r3, #12]
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	889b      	ldrh	r3, [r3, #4]
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d014      	beq.n	80145e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	3301      	adds	r3, #1
 80145c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80145c2:	6a3b      	ldr	r3, [r7, #32]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d104      	bne.n	80145d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80145c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80145cc:	69fb      	ldr	r3, [r7, #28]
 80145ce:	61bb      	str	r3, [r7, #24]
 80145d0:	e009      	b.n	80145e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80145d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145d4:	7fda      	ldrb	r2, [r3, #31]
 80145d6:	6a3b      	ldr	r3, [r7, #32]
 80145d8:	7fdb      	ldrb	r3, [r3, #31]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d803      	bhi.n	80145e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80145de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80145e2:	69fb      	ldr	r3, [r7, #28]
 80145e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80145e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d001      	beq.n	80145f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80145ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80145f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80145f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d1cb      	bne.n	8014596 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80145fe:	6a3b      	ldr	r3, [r7, #32]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d008      	beq.n	8014616 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014604:	69b9      	ldr	r1, [r7, #24]
 8014606:	6a38      	ldr	r0, [r7, #32]
 8014608:	f7ff ff0e 	bl	8014428 <ip_reass_free_complete_datagram>
 801460c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801460e:	697a      	ldr	r2, [r7, #20]
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	4413      	add	r3, r2
 8014614:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014616:	697a      	ldr	r2, [r7, #20]
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	429a      	cmp	r2, r3
 801461c:	da02      	bge.n	8014624 <ip_reass_remove_oldest_datagram+0xb4>
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	2b01      	cmp	r3, #1
 8014622:	dcac      	bgt.n	801457e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014624:	697b      	ldr	r3, [r7, #20]
}
 8014626:	4618      	mov	r0, r3
 8014628:	3728      	adds	r7, #40	@ 0x28
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	2000d24c 	.word	0x2000d24c

08014634 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b084      	sub	sp, #16
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801463e:	2004      	movs	r0, #4
 8014640:	f7f5 fbd8 	bl	8009df4 <memp_malloc>
 8014644:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d110      	bne.n	801466e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801464c:	6839      	ldr	r1, [r7, #0]
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f7ff ff8e 	bl	8014570 <ip_reass_remove_oldest_datagram>
 8014654:	4602      	mov	r2, r0
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	4293      	cmp	r3, r2
 801465a:	dc03      	bgt.n	8014664 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801465c:	2004      	movs	r0, #4
 801465e:	f7f5 fbc9 	bl	8009df4 <memp_malloc>
 8014662:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d101      	bne.n	801466e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801466a:	2300      	movs	r3, #0
 801466c:	e016      	b.n	801469c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801466e:	2220      	movs	r2, #32
 8014670:	2100      	movs	r1, #0
 8014672:	68f8      	ldr	r0, [r7, #12]
 8014674:	f000 ff25 	bl	80154c2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	220f      	movs	r2, #15
 801467c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801467e:	4b09      	ldr	r3, [pc, #36]	@ (80146a4 <ip_reass_enqueue_new_datagram+0x70>)
 8014680:	681a      	ldr	r2, [r3, #0]
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014686:	4a07      	ldr	r2, [pc, #28]	@ (80146a4 <ip_reass_enqueue_new_datagram+0x70>)
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	3308      	adds	r3, #8
 8014690:	2214      	movs	r2, #20
 8014692:	6879      	ldr	r1, [r7, #4]
 8014694:	4618      	mov	r0, r3
 8014696:	f000 ffe8 	bl	801566a <memcpy>
  return ipr;
 801469a:	68fb      	ldr	r3, [r7, #12]
}
 801469c:	4618      	mov	r0, r3
 801469e:	3710      	adds	r7, #16
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	2000d24c 	.word	0x2000d24c

080146a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80146b2:	4b10      	ldr	r3, [pc, #64]	@ (80146f4 <ip_reass_dequeue_datagram+0x4c>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d104      	bne.n	80146c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	4a0c      	ldr	r2, [pc, #48]	@ (80146f4 <ip_reass_dequeue_datagram+0x4c>)
 80146c2:	6013      	str	r3, [r2, #0]
 80146c4:	e00d      	b.n	80146e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d106      	bne.n	80146da <ip_reass_dequeue_datagram+0x32>
 80146cc:	4b0a      	ldr	r3, [pc, #40]	@ (80146f8 <ip_reass_dequeue_datagram+0x50>)
 80146ce:	f240 1245 	movw	r2, #325	@ 0x145
 80146d2:	490a      	ldr	r1, [pc, #40]	@ (80146fc <ip_reass_dequeue_datagram+0x54>)
 80146d4:	480a      	ldr	r0, [pc, #40]	@ (8014700 <ip_reass_dequeue_datagram+0x58>)
 80146d6:	f000 fe8f 	bl	80153f8 <iprintf>
    prev->next = ipr->next;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80146e2:	6879      	ldr	r1, [r7, #4]
 80146e4:	2004      	movs	r0, #4
 80146e6:	f7f5 fbf5 	bl	8009ed4 <memp_free>
}
 80146ea:	bf00      	nop
 80146ec:	3708      	adds	r7, #8
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
 80146f2:	bf00      	nop
 80146f4:	2000d24c 	.word	0x2000d24c
 80146f8:	08018dc4 	.word	0x08018dc4
 80146fc:	08018e8c 	.word	0x08018e8c
 8014700:	08018e0c 	.word	0x08018e0c

08014704 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b08c      	sub	sp, #48	@ 0x30
 8014708:	af00      	add	r7, sp, #0
 801470a:	60f8      	str	r0, [r7, #12]
 801470c:	60b9      	str	r1, [r7, #8]
 801470e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014710:	2300      	movs	r3, #0
 8014712:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014714:	2301      	movs	r3, #1
 8014716:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	885b      	ldrh	r3, [r3, #2]
 8014722:	b29b      	uxth	r3, r3
 8014724:	4618      	mov	r0, r3
 8014726:	f7f4 fef1 	bl	800950c <lwip_htons>
 801472a:	4603      	mov	r3, r0
 801472c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801472e:	69fb      	ldr	r3, [r7, #28]
 8014730:	781b      	ldrb	r3, [r3, #0]
 8014732:	f003 030f 	and.w	r3, r3, #15
 8014736:	b2db      	uxtb	r3, r3
 8014738:	009b      	lsls	r3, r3, #2
 801473a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801473c:	7e7b      	ldrb	r3, [r7, #25]
 801473e:	b29b      	uxth	r3, r3
 8014740:	8b7a      	ldrh	r2, [r7, #26]
 8014742:	429a      	cmp	r2, r3
 8014744:	d202      	bcs.n	801474c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014746:	f04f 33ff 	mov.w	r3, #4294967295
 801474a:	e135      	b.n	80149b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801474c:	7e7b      	ldrb	r3, [r7, #25]
 801474e:	b29b      	uxth	r3, r3
 8014750:	8b7a      	ldrh	r2, [r7, #26]
 8014752:	1ad3      	subs	r3, r2, r3
 8014754:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014756:	69fb      	ldr	r3, [r7, #28]
 8014758:	88db      	ldrh	r3, [r3, #6]
 801475a:	b29b      	uxth	r3, r3
 801475c:	4618      	mov	r0, r3
 801475e:	f7f4 fed5 	bl	800950c <lwip_htons>
 8014762:	4603      	mov	r3, r0
 8014764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014768:	b29b      	uxth	r3, r3
 801476a:	00db      	lsls	r3, r3, #3
 801476c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8014774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014776:	2200      	movs	r2, #0
 8014778:	701a      	strb	r2, [r3, #0]
 801477a:	2200      	movs	r2, #0
 801477c:	705a      	strb	r2, [r3, #1]
 801477e:	2200      	movs	r2, #0
 8014780:	709a      	strb	r2, [r3, #2]
 8014782:	2200      	movs	r2, #0
 8014784:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014788:	8afa      	ldrh	r2, [r7, #22]
 801478a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801478c:	8afa      	ldrh	r2, [r7, #22]
 801478e:	8b7b      	ldrh	r3, [r7, #26]
 8014790:	4413      	add	r3, r2
 8014792:	b29a      	uxth	r2, r3
 8014794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014796:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801479a:	88db      	ldrh	r3, [r3, #6]
 801479c:	b29b      	uxth	r3, r3
 801479e:	8afa      	ldrh	r2, [r7, #22]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d902      	bls.n	80147aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80147a4:	f04f 33ff 	mov.w	r3, #4294967295
 80147a8:	e106      	b.n	80149b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80147b0:	e068      	b.n	8014884 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80147b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80147b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147ba:	889b      	ldrh	r3, [r3, #4]
 80147bc:	b29a      	uxth	r2, r3
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	889b      	ldrh	r3, [r3, #4]
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d235      	bcs.n	8014834 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80147c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80147cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80147ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d020      	beq.n	8014816 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80147d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147d6:	889b      	ldrh	r3, [r3, #4]
 80147d8:	b29a      	uxth	r2, r3
 80147da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147dc:	88db      	ldrh	r3, [r3, #6]
 80147de:	b29b      	uxth	r3, r3
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d307      	bcc.n	80147f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80147e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147e6:	88db      	ldrh	r3, [r3, #6]
 80147e8:	b29a      	uxth	r2, r3
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	889b      	ldrh	r3, [r3, #4]
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d902      	bls.n	80147fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80147f4:	f04f 33ff 	mov.w	r3, #4294967295
 80147f8:	e0de      	b.n	80149b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80147fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147fc:	68ba      	ldr	r2, [r7, #8]
 80147fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014802:	88db      	ldrh	r3, [r3, #6]
 8014804:	b29a      	uxth	r2, r3
 8014806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014808:	889b      	ldrh	r3, [r3, #4]
 801480a:	b29b      	uxth	r3, r3
 801480c:	429a      	cmp	r2, r3
 801480e:	d03d      	beq.n	801488c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014810:	2300      	movs	r3, #0
 8014812:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014814:	e03a      	b.n	801488c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014818:	88db      	ldrh	r3, [r3, #6]
 801481a:	b29a      	uxth	r2, r3
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	889b      	ldrh	r3, [r3, #4]
 8014820:	b29b      	uxth	r3, r3
 8014822:	429a      	cmp	r2, r3
 8014824:	d902      	bls.n	801482c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014826:	f04f 33ff 	mov.w	r3, #4294967295
 801482a:	e0c5      	b.n	80149b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	68ba      	ldr	r2, [r7, #8]
 8014830:	605a      	str	r2, [r3, #4]
      break;
 8014832:	e02b      	b.n	801488c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014836:	889b      	ldrh	r3, [r3, #4]
 8014838:	b29a      	uxth	r2, r3
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	889b      	ldrh	r3, [r3, #4]
 801483e:	b29b      	uxth	r3, r3
 8014840:	429a      	cmp	r2, r3
 8014842:	d102      	bne.n	801484a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014844:	f04f 33ff 	mov.w	r3, #4294967295
 8014848:	e0b6      	b.n	80149b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801484a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801484c:	889b      	ldrh	r3, [r3, #4]
 801484e:	b29a      	uxth	r2, r3
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	88db      	ldrh	r3, [r3, #6]
 8014854:	b29b      	uxth	r3, r3
 8014856:	429a      	cmp	r2, r3
 8014858:	d202      	bcs.n	8014860 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801485a:	f04f 33ff 	mov.w	r3, #4294967295
 801485e:	e0ab      	b.n	80149b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014862:	2b00      	cmp	r3, #0
 8014864:	d009      	beq.n	801487a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014868:	88db      	ldrh	r3, [r3, #6]
 801486a:	b29a      	uxth	r2, r3
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	889b      	ldrh	r3, [r3, #4]
 8014870:	b29b      	uxth	r3, r3
 8014872:	429a      	cmp	r2, r3
 8014874:	d001      	beq.n	801487a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014876:	2300      	movs	r3, #0
 8014878:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8014884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014886:	2b00      	cmp	r3, #0
 8014888:	d193      	bne.n	80147b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801488a:	e000      	b.n	801488e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801488c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014890:	2b00      	cmp	r3, #0
 8014892:	d12d      	bne.n	80148f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014896:	2b00      	cmp	r3, #0
 8014898:	d01c      	beq.n	80148d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801489c:	88db      	ldrh	r3, [r3, #6]
 801489e:	b29a      	uxth	r2, r3
 80148a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148a2:	889b      	ldrh	r3, [r3, #4]
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d906      	bls.n	80148b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80148aa:	4b45      	ldr	r3, [pc, #276]	@ (80149c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80148ac:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80148b0:	4944      	ldr	r1, [pc, #272]	@ (80149c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80148b2:	4845      	ldr	r0, [pc, #276]	@ (80149c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80148b4:	f000 fda0 	bl	80153f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80148b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ba:	68ba      	ldr	r2, [r7, #8]
 80148bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80148be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148c0:	88db      	ldrh	r3, [r3, #6]
 80148c2:	b29a      	uxth	r2, r3
 80148c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148c6:	889b      	ldrh	r3, [r3, #4]
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d010      	beq.n	80148f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80148ce:	2300      	movs	r3, #0
 80148d0:	623b      	str	r3, [r7, #32]
 80148d2:	e00d      	b.n	80148f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	685b      	ldr	r3, [r3, #4]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d006      	beq.n	80148ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80148dc:	4b38      	ldr	r3, [pc, #224]	@ (80149c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80148de:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80148e2:	493a      	ldr	r1, [pc, #232]	@ (80149cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80148e4:	4838      	ldr	r0, [pc, #224]	@ (80149c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80148e6:	f000 fd87 	bl	80153f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	68ba      	ldr	r2, [r7, #8]
 80148ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d105      	bne.n	8014902 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	7f9b      	ldrb	r3, [r3, #30]
 80148fa:	f003 0301 	and.w	r3, r3, #1
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d059      	beq.n	80149b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014902:	6a3b      	ldr	r3, [r7, #32]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d04f      	beq.n	80149a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	685b      	ldr	r3, [r3, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d006      	beq.n	801491e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	889b      	ldrh	r3, [r3, #4]
 8014918:	b29b      	uxth	r3, r3
 801491a:	2b00      	cmp	r3, #0
 801491c:	d002      	beq.n	8014924 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801491e:	2300      	movs	r3, #0
 8014920:	623b      	str	r3, [r7, #32]
 8014922:	e041      	b.n	80149a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014926:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801492e:	e012      	b.n	8014956 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014932:	685b      	ldr	r3, [r3, #4]
 8014934:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8014936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014938:	88db      	ldrh	r3, [r3, #6]
 801493a:	b29a      	uxth	r2, r3
 801493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801493e:	889b      	ldrh	r3, [r3, #4]
 8014940:	b29b      	uxth	r3, r3
 8014942:	429a      	cmp	r2, r3
 8014944:	d002      	beq.n	801494c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014946:	2300      	movs	r3, #0
 8014948:	623b      	str	r3, [r7, #32]
            break;
 801494a:	e007      	b.n	801495c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801494e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014958:	2b00      	cmp	r3, #0
 801495a:	d1e9      	bne.n	8014930 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801495c:	6a3b      	ldr	r3, [r7, #32]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d022      	beq.n	80149a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d106      	bne.n	8014978 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801496a:	4b15      	ldr	r3, [pc, #84]	@ (80149c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801496c:	f240 12df 	movw	r2, #479	@ 0x1df
 8014970:	4917      	ldr	r1, [pc, #92]	@ (80149d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014972:	4815      	ldr	r0, [pc, #84]	@ (80149c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014974:	f000 fd40 	bl	80153f8 <iprintf>
          LWIP_ASSERT("sanity check",
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014980:	429a      	cmp	r2, r3
 8014982:	d106      	bne.n	8014992 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014984:	4b0e      	ldr	r3, [pc, #56]	@ (80149c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014986:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801498a:	4911      	ldr	r1, [pc, #68]	@ (80149d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801498c:	480e      	ldr	r0, [pc, #56]	@ (80149c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801498e:	f000 fd33 	bl	80153f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d006      	beq.n	80149a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801499a:	4b09      	ldr	r3, [pc, #36]	@ (80149c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801499c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80149a0:	490c      	ldr	r1, [pc, #48]	@ (80149d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80149a2:	4809      	ldr	r0, [pc, #36]	@ (80149c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80149a4:	f000 fd28 	bl	80153f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80149a8:	6a3b      	ldr	r3, [r7, #32]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	bf14      	ite	ne
 80149ae:	2301      	movne	r3, #1
 80149b0:	2300      	moveq	r3, #0
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	e000      	b.n	80149b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80149b6:	2300      	movs	r3, #0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3730      	adds	r7, #48	@ 0x30
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	08018dc4 	.word	0x08018dc4
 80149c4:	08018ea8 	.word	0x08018ea8
 80149c8:	08018e0c 	.word	0x08018e0c
 80149cc:	08018ec8 	.word	0x08018ec8
 80149d0:	08018f00 	.word	0x08018f00
 80149d4:	08018f10 	.word	0x08018f10

080149d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b08e      	sub	sp, #56	@ 0x38
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	685b      	ldr	r3, [r3, #4]
 80149e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80149e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	f003 030f 	and.w	r3, r3, #15
 80149ee:	b2db      	uxtb	r3, r3
 80149f0:	009b      	lsls	r3, r3, #2
 80149f2:	b2db      	uxtb	r3, r3
 80149f4:	2b14      	cmp	r3, #20
 80149f6:	f040 8171 	bne.w	8014cdc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80149fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149fc:	88db      	ldrh	r3, [r3, #6]
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7f4 fd83 	bl	800950c <lwip_htons>
 8014a06:	4603      	mov	r3, r0
 8014a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	00db      	lsls	r3, r3, #3
 8014a10:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a14:	885b      	ldrh	r3, [r3, #2]
 8014a16:	b29b      	uxth	r3, r3
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7f4 fd77 	bl	800950c <lwip_htons>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	f003 030f 	and.w	r3, r3, #15
 8014a2a:	b2db      	uxtb	r3, r3
 8014a2c:	009b      	lsls	r3, r3, #2
 8014a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8014a32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	f0c0 8150 	bcc.w	8014ce0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014a40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014a44:	b29b      	uxth	r3, r3
 8014a46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014a48:	1ad3      	subs	r3, r2, r3
 8014a4a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7f6 f92b 	bl	800aca8 <pbuf_clen>
 8014a52:	4603      	mov	r3, r0
 8014a54:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014a56:	4b8c      	ldr	r3, [pc, #560]	@ (8014c88 <ip4_reass+0x2b0>)
 8014a58:	881b      	ldrh	r3, [r3, #0]
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	8c3b      	ldrh	r3, [r7, #32]
 8014a5e:	4413      	add	r3, r2
 8014a60:	2b0a      	cmp	r3, #10
 8014a62:	dd10      	ble.n	8014a86 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014a64:	8c3b      	ldrh	r3, [r7, #32]
 8014a66:	4619      	mov	r1, r3
 8014a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014a6a:	f7ff fd81 	bl	8014570 <ip_reass_remove_oldest_datagram>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	f000 8137 	beq.w	8014ce4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014a76:	4b84      	ldr	r3, [pc, #528]	@ (8014c88 <ip4_reass+0x2b0>)
 8014a78:	881b      	ldrh	r3, [r3, #0]
 8014a7a:	461a      	mov	r2, r3
 8014a7c:	8c3b      	ldrh	r3, [r7, #32]
 8014a7e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014a80:	2b0a      	cmp	r3, #10
 8014a82:	f300 812f 	bgt.w	8014ce4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014a86:	4b81      	ldr	r3, [pc, #516]	@ (8014c8c <ip4_reass+0x2b4>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8014a8c:	e015      	b.n	8014aba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a90:	695a      	ldr	r2, [r3, #20]
 8014a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d10c      	bne.n	8014ab4 <ip4_reass+0xdc>
 8014a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a9c:	699a      	ldr	r2, [r3, #24]
 8014a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aa0:	691b      	ldr	r3, [r3, #16]
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d106      	bne.n	8014ab4 <ip4_reass+0xdc>
 8014aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa8:	899a      	ldrh	r2, [r3, #12]
 8014aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aac:	889b      	ldrh	r3, [r3, #4]
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d006      	beq.n	8014ac2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8014aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d1e6      	bne.n	8014a8e <ip4_reass+0xb6>
 8014ac0:	e000      	b.n	8014ac4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014ac2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d109      	bne.n	8014ade <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014aca:	8c3b      	ldrh	r3, [r7, #32]
 8014acc:	4619      	mov	r1, r3
 8014ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014ad0:	f7ff fdb0 	bl	8014634 <ip_reass_enqueue_new_datagram>
 8014ad4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d11c      	bne.n	8014b16 <ip4_reass+0x13e>
      goto nullreturn;
 8014adc:	e105      	b.n	8014cea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ae0:	88db      	ldrh	r3, [r3, #6]
 8014ae2:	b29b      	uxth	r3, r3
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7f4 fd11 	bl	800950c <lwip_htons>
 8014aea:	4603      	mov	r3, r0
 8014aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d110      	bne.n	8014b16 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014af6:	89db      	ldrh	r3, [r3, #14]
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7f4 fd07 	bl	800950c <lwip_htons>
 8014afe:	4603      	mov	r3, r0
 8014b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d006      	beq.n	8014b16 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b0a:	3308      	adds	r3, #8
 8014b0c:	2214      	movs	r2, #20
 8014b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b10:	4618      	mov	r0, r3
 8014b12:	f000 fdaa 	bl	801566a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b18:	88db      	ldrh	r3, [r3, #6]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	f003 0320 	and.w	r3, r3, #32
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	bf0c      	ite	eq
 8014b24:	2301      	moveq	r3, #1
 8014b26:	2300      	movne	r3, #0
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d00e      	beq.n	8014b50 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014b32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014b34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014b36:	4413      	add	r3, r2
 8014b38:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014b3a:	8b7a      	ldrh	r2, [r7, #26]
 8014b3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	f0c0 80a0 	bcc.w	8014c84 <ip4_reass+0x2ac>
 8014b44:	8b7b      	ldrh	r3, [r7, #26]
 8014b46:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	f200 809a 	bhi.w	8014c84 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014b50:	69fa      	ldr	r2, [r7, #28]
 8014b52:	6879      	ldr	r1, [r7, #4]
 8014b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b56:	f7ff fdd5 	bl	8014704 <ip_reass_chain_frag_into_datagram_and_validate>
 8014b5a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b62:	f000 809b 	beq.w	8014c9c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014b66:	4b48      	ldr	r3, [pc, #288]	@ (8014c88 <ip4_reass+0x2b0>)
 8014b68:	881a      	ldrh	r2, [r3, #0]
 8014b6a:	8c3b      	ldrh	r3, [r7, #32]
 8014b6c:	4413      	add	r3, r2
 8014b6e:	b29a      	uxth	r2, r3
 8014b70:	4b45      	ldr	r3, [pc, #276]	@ (8014c88 <ip4_reass+0x2b0>)
 8014b72:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014b74:	69fb      	ldr	r3, [r7, #28]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d00d      	beq.n	8014b96 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014b7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014b7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014b7e:	4413      	add	r3, r2
 8014b80:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b84:	8a7a      	ldrh	r2, [r7, #18]
 8014b86:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b8a:	7f9b      	ldrb	r3, [r3, #30]
 8014b8c:	f043 0301 	orr.w	r3, r3, #1
 8014b90:	b2da      	uxtb	r2, r3
 8014b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b94:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d171      	bne.n	8014c80 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b9e:	8b9b      	ldrh	r3, [r3, #28]
 8014ba0:	3314      	adds	r3, #20
 8014ba2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	685b      	ldr	r3, [r3, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb8:	3308      	adds	r3, #8
 8014bba:	2214      	movs	r2, #20
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014bc0:	f000 fd53 	bl	801566a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014bc4:	8a3b      	ldrh	r3, [r7, #16]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7f4 fca0 	bl	800950c <lwip_htons>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	461a      	mov	r2, r3
 8014bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bd2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	719a      	strb	r2, [r3, #6]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014be0:	2200      	movs	r2, #0
 8014be2:	729a      	strb	r2, [r3, #10]
 8014be4:	2200      	movs	r2, #0
 8014be6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bea:	685b      	ldr	r3, [r3, #4]
 8014bec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014bee:	e00d      	b.n	8014c0c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014bf6:	2114      	movs	r1, #20
 8014bf8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014bfa:	f7f5 ff47 	bl	800aa8c <pbuf_remove_header>
      pbuf_cat(p, r);
 8014bfe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f7f6 f88b 	bl	800ad1c <pbuf_cat>
      r = iprh->next_pbuf;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8014c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d1ee      	bne.n	8014bf0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014c12:	4b1e      	ldr	r3, [pc, #120]	@ (8014c8c <ip4_reass+0x2b4>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	d102      	bne.n	8014c22 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014c20:	e010      	b.n	8014c44 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014c22:	4b1a      	ldr	r3, [pc, #104]	@ (8014c8c <ip4_reass+0x2b4>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014c28:	e007      	b.n	8014c3a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c30:	429a      	cmp	r2, r3
 8014c32:	d006      	beq.n	8014c42 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d1f4      	bne.n	8014c2a <ip4_reass+0x252>
 8014c40:	e000      	b.n	8014c44 <ip4_reass+0x26c>
          break;
 8014c42:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014c44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c48:	f7ff fd2e 	bl	80146a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f7f6 f82b 	bl	800aca8 <pbuf_clen>
 8014c52:	4603      	mov	r3, r0
 8014c54:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014c56:	4b0c      	ldr	r3, [pc, #48]	@ (8014c88 <ip4_reass+0x2b0>)
 8014c58:	881b      	ldrh	r3, [r3, #0]
 8014c5a:	8c3a      	ldrh	r2, [r7, #32]
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d906      	bls.n	8014c6e <ip4_reass+0x296>
 8014c60:	4b0b      	ldr	r3, [pc, #44]	@ (8014c90 <ip4_reass+0x2b8>)
 8014c62:	f240 229b 	movw	r2, #667	@ 0x29b
 8014c66:	490b      	ldr	r1, [pc, #44]	@ (8014c94 <ip4_reass+0x2bc>)
 8014c68:	480b      	ldr	r0, [pc, #44]	@ (8014c98 <ip4_reass+0x2c0>)
 8014c6a:	f000 fbc5 	bl	80153f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014c6e:	4b06      	ldr	r3, [pc, #24]	@ (8014c88 <ip4_reass+0x2b0>)
 8014c70:	881a      	ldrh	r2, [r3, #0]
 8014c72:	8c3b      	ldrh	r3, [r7, #32]
 8014c74:	1ad3      	subs	r3, r2, r3
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	4b03      	ldr	r3, [pc, #12]	@ (8014c88 <ip4_reass+0x2b0>)
 8014c7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	e038      	b.n	8014cf2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014c80:	2300      	movs	r3, #0
 8014c82:	e036      	b.n	8014cf2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014c84:	bf00      	nop
 8014c86:	e00a      	b.n	8014c9e <ip4_reass+0x2c6>
 8014c88:	2000d250 	.word	0x2000d250
 8014c8c:	2000d24c 	.word	0x2000d24c
 8014c90:	08018dc4 	.word	0x08018dc4
 8014c94:	08018f34 	.word	0x08018f34
 8014c98:	08018e0c 	.word	0x08018e0c
    goto nullreturn_ipr;
 8014c9c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d106      	bne.n	8014cb2 <ip4_reass+0x2da>
 8014ca4:	4b15      	ldr	r3, [pc, #84]	@ (8014cfc <ip4_reass+0x324>)
 8014ca6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8014caa:	4915      	ldr	r1, [pc, #84]	@ (8014d00 <ip4_reass+0x328>)
 8014cac:	4815      	ldr	r0, [pc, #84]	@ (8014d04 <ip4_reass+0x32c>)
 8014cae:	f000 fba3 	bl	80153f8 <iprintf>
  if (ipr->p == NULL) {
 8014cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d116      	bne.n	8014ce8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014cba:	4b13      	ldr	r3, [pc, #76]	@ (8014d08 <ip4_reass+0x330>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d006      	beq.n	8014cd2 <ip4_reass+0x2fa>
 8014cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8014cfc <ip4_reass+0x324>)
 8014cc6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014cca:	4910      	ldr	r1, [pc, #64]	@ (8014d0c <ip4_reass+0x334>)
 8014ccc:	480d      	ldr	r0, [pc, #52]	@ (8014d04 <ip4_reass+0x32c>)
 8014cce:	f000 fb93 	bl	80153f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014cd2:	2100      	movs	r1, #0
 8014cd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014cd6:	f7ff fce7 	bl	80146a8 <ip_reass_dequeue_datagram>
 8014cda:	e006      	b.n	8014cea <ip4_reass+0x312>
    goto nullreturn;
 8014cdc:	bf00      	nop
 8014cde:	e004      	b.n	8014cea <ip4_reass+0x312>
    goto nullreturn;
 8014ce0:	bf00      	nop
 8014ce2:	e002      	b.n	8014cea <ip4_reass+0x312>
      goto nullreturn;
 8014ce4:	bf00      	nop
 8014ce6:	e000      	b.n	8014cea <ip4_reass+0x312>
  }

nullreturn:
 8014ce8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f7f5 ff54 	bl	800ab98 <pbuf_free>
  return NULL;
 8014cf0:	2300      	movs	r3, #0
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3738      	adds	r7, #56	@ 0x38
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	08018dc4 	.word	0x08018dc4
 8014d00:	08018f50 	.word	0x08018f50
 8014d04:	08018e0c 	.word	0x08018e0c
 8014d08:	2000d24c 	.word	0x2000d24c
 8014d0c:	08018f5c 	.word	0x08018f5c

08014d10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014d14:	2005      	movs	r0, #5
 8014d16:	f7f5 f86d 	bl	8009df4 <memp_malloc>
 8014d1a:	4603      	mov	r3, r0
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b082      	sub	sp, #8
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d106      	bne.n	8014d3c <ip_frag_free_pbuf_custom_ref+0x1c>
 8014d2e:	4b07      	ldr	r3, [pc, #28]	@ (8014d4c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014d30:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014d34:	4906      	ldr	r1, [pc, #24]	@ (8014d50 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014d36:	4807      	ldr	r0, [pc, #28]	@ (8014d54 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014d38:	f000 fb5e 	bl	80153f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014d3c:	6879      	ldr	r1, [r7, #4]
 8014d3e:	2005      	movs	r0, #5
 8014d40:	f7f5 f8c8 	bl	8009ed4 <memp_free>
}
 8014d44:	bf00      	nop
 8014d46:	3708      	adds	r7, #8
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	08018dc4 	.word	0x08018dc4
 8014d50:	08018f7c 	.word	0x08018f7c
 8014d54:	08018e0c 	.word	0x08018e0c

08014d58 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b084      	sub	sp, #16
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d106      	bne.n	8014d78 <ipfrag_free_pbuf_custom+0x20>
 8014d6a:	4b11      	ldr	r3, [pc, #68]	@ (8014db0 <ipfrag_free_pbuf_custom+0x58>)
 8014d6c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014d70:	4910      	ldr	r1, [pc, #64]	@ (8014db4 <ipfrag_free_pbuf_custom+0x5c>)
 8014d72:	4811      	ldr	r0, [pc, #68]	@ (8014db8 <ipfrag_free_pbuf_custom+0x60>)
 8014d74:	f000 fb40 	bl	80153f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d006      	beq.n	8014d8e <ipfrag_free_pbuf_custom+0x36>
 8014d80:	4b0b      	ldr	r3, [pc, #44]	@ (8014db0 <ipfrag_free_pbuf_custom+0x58>)
 8014d82:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014d86:	490d      	ldr	r1, [pc, #52]	@ (8014dbc <ipfrag_free_pbuf_custom+0x64>)
 8014d88:	480b      	ldr	r0, [pc, #44]	@ (8014db8 <ipfrag_free_pbuf_custom+0x60>)
 8014d8a:	f000 fb35 	bl	80153f8 <iprintf>
  if (pcr->original != NULL) {
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	695b      	ldr	r3, [r3, #20]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d004      	beq.n	8014da0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	695b      	ldr	r3, [r3, #20]
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f7f5 fefc 	bl	800ab98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014da0:	68f8      	ldr	r0, [r7, #12]
 8014da2:	f7ff ffbd 	bl	8014d20 <ip_frag_free_pbuf_custom_ref>
}
 8014da6:	bf00      	nop
 8014da8:	3710      	adds	r7, #16
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	08018dc4 	.word	0x08018dc4
 8014db4:	08018f88 	.word	0x08018f88
 8014db8:	08018e0c 	.word	0x08018e0c
 8014dbc:	08018f94 	.word	0x08018f94

08014dc0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b094      	sub	sp, #80	@ 0x50
 8014dc4:	af02      	add	r7, sp, #8
 8014dc6:	60f8      	str	r0, [r7, #12]
 8014dc8:	60b9      	str	r1, [r7, #8]
 8014dca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014dd6:	3b14      	subs	r3, #20
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	da00      	bge.n	8014dde <ip4_frag+0x1e>
 8014ddc:	3307      	adds	r3, #7
 8014dde:	10db      	asrs	r3, r3, #3
 8014de0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014de2:	2314      	movs	r3, #20
 8014de4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	685b      	ldr	r3, [r3, #4]
 8014dea:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014dee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	f003 030f 	and.w	r3, r3, #15
 8014df8:	b2db      	uxtb	r3, r3
 8014dfa:	009b      	lsls	r3, r3, #2
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	2b14      	cmp	r3, #20
 8014e00:	d002      	beq.n	8014e08 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014e02:	f06f 0305 	mvn.w	r3, #5
 8014e06:	e110      	b.n	801502a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	895b      	ldrh	r3, [r3, #10]
 8014e0c:	2b13      	cmp	r3, #19
 8014e0e:	d809      	bhi.n	8014e24 <ip4_frag+0x64>
 8014e10:	4b88      	ldr	r3, [pc, #544]	@ (8015034 <ip4_frag+0x274>)
 8014e12:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014e16:	4988      	ldr	r1, [pc, #544]	@ (8015038 <ip4_frag+0x278>)
 8014e18:	4888      	ldr	r0, [pc, #544]	@ (801503c <ip4_frag+0x27c>)
 8014e1a:	f000 faed 	bl	80153f8 <iprintf>
 8014e1e:	f06f 0305 	mvn.w	r3, #5
 8014e22:	e102      	b.n	801502a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e26:	88db      	ldrh	r3, [r3, #6]
 8014e28:	b29b      	uxth	r3, r3
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7f4 fb6e 	bl	800950c <lwip_htons>
 8014e30:	4603      	mov	r3, r0
 8014e32:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014e34:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014e36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014e3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014e44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	891b      	ldrh	r3, [r3, #8]
 8014e4a:	3b14      	subs	r3, #20
 8014e4c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014e50:	e0e1      	b.n	8015016 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014e52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014e54:	00db      	lsls	r3, r3, #3
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014e5c:	4293      	cmp	r3, r2
 8014e5e:	bf28      	it	cs
 8014e60:	4613      	movcs	r3, r2
 8014e62:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014e64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e68:	2114      	movs	r1, #20
 8014e6a:	200e      	movs	r0, #14
 8014e6c:	f7f5 fbb0 	bl	800a5d0 <pbuf_alloc>
 8014e70:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f000 80d5 	beq.w	8015024 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e7c:	895b      	ldrh	r3, [r3, #10]
 8014e7e:	2b13      	cmp	r3, #19
 8014e80:	d806      	bhi.n	8014e90 <ip4_frag+0xd0>
 8014e82:	4b6c      	ldr	r3, [pc, #432]	@ (8015034 <ip4_frag+0x274>)
 8014e84:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014e88:	496d      	ldr	r1, [pc, #436]	@ (8015040 <ip4_frag+0x280>)
 8014e8a:	486c      	ldr	r0, [pc, #432]	@ (801503c <ip4_frag+0x27c>)
 8014e8c:	f000 fab4 	bl	80153f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e92:	685b      	ldr	r3, [r3, #4]
 8014e94:	2214      	movs	r2, #20
 8014e96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f000 fbe6 	bl	801566a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ea0:	685b      	ldr	r3, [r3, #4]
 8014ea2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014ea4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014ea6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014eaa:	e064      	b.n	8014f76 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	895a      	ldrh	r2, [r3, #10]
 8014eb0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014eb2:	1ad3      	subs	r3, r2, r3
 8014eb4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	895b      	ldrh	r3, [r3, #10]
 8014eba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d906      	bls.n	8014ece <ip4_frag+0x10e>
 8014ec0:	4b5c      	ldr	r3, [pc, #368]	@ (8015034 <ip4_frag+0x274>)
 8014ec2:	f240 322d 	movw	r2, #813	@ 0x32d
 8014ec6:	495f      	ldr	r1, [pc, #380]	@ (8015044 <ip4_frag+0x284>)
 8014ec8:	485c      	ldr	r0, [pc, #368]	@ (801503c <ip4_frag+0x27c>)
 8014eca:	f000 fa95 	bl	80153f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014ece:	8bfa      	ldrh	r2, [r7, #30]
 8014ed0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014ed4:	4293      	cmp	r3, r2
 8014ed6:	bf28      	it	cs
 8014ed8:	4613      	movcs	r3, r2
 8014eda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014ede:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d105      	bne.n	8014ef2 <ip4_frag+0x132>
        poff = 0;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	60fb      	str	r3, [r7, #12]
        continue;
 8014ef0:	e041      	b.n	8014f76 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014ef2:	f7ff ff0d 	bl	8014d10 <ip_frag_alloc_pbuf_custom_ref>
 8014ef6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014ef8:	69bb      	ldr	r3, [r7, #24]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d103      	bne.n	8014f06 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014efe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014f00:	f7f5 fe4a 	bl	800ab98 <pbuf_free>
        goto memerr;
 8014f04:	e08f      	b.n	8015026 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014f06:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014f0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014f0e:	4413      	add	r3, r2
 8014f10:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014f14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014f18:	9201      	str	r2, [sp, #4]
 8014f1a:	9300      	str	r3, [sp, #0]
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	2241      	movs	r2, #65	@ 0x41
 8014f20:	2000      	movs	r0, #0
 8014f22:	f7f5 fc7f 	bl	800a824 <pbuf_alloced_custom>
 8014f26:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d106      	bne.n	8014f3c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014f2e:	69b8      	ldr	r0, [r7, #24]
 8014f30:	f7ff fef6 	bl	8014d20 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014f34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014f36:	f7f5 fe2f 	bl	800ab98 <pbuf_free>
        goto memerr;
 8014f3a:	e074      	b.n	8015026 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014f3c:	68f8      	ldr	r0, [r7, #12]
 8014f3e:	f7f5 fecb 	bl	800acd8 <pbuf_ref>
      pcr->original = p;
 8014f42:	69bb      	ldr	r3, [r7, #24]
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014f48:	69bb      	ldr	r3, [r7, #24]
 8014f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8015048 <ip4_frag+0x288>)
 8014f4c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014f4e:	6979      	ldr	r1, [r7, #20]
 8014f50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014f52:	f7f5 fee3 	bl	800ad1c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014f56:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014f5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014f64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d004      	beq.n	8014f76 <ip4_frag+0x1b6>
        poff = 0;
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014f76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d196      	bne.n	8014eac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014f7e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014f80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014f84:	4413      	add	r3, r2
 8014f86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f8c:	f1a3 0213 	sub.w	r2, r3, #19
 8014f90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014f94:	429a      	cmp	r2, r3
 8014f96:	bfcc      	ite	gt
 8014f98:	2301      	movgt	r3, #1
 8014f9a:	2300      	movle	r3, #0
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014fa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014fa8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014faa:	6a3b      	ldr	r3, [r7, #32]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d002      	beq.n	8014fb6 <ip4_frag+0x1f6>
 8014fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d003      	beq.n	8014fbe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014fb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014fbc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014fbe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7f4 faa3 	bl	800950c <lwip_htons>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	461a      	mov	r2, r3
 8014fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fcc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014fce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014fd0:	3314      	adds	r3, #20
 8014fd2:	b29b      	uxth	r3, r3
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7f4 fa99 	bl	800950c <lwip_htons>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	461a      	mov	r2, r3
 8014fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fe0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	729a      	strb	r2, [r3, #10]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	695b      	ldr	r3, [r3, #20]
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014ff4:	68b8      	ldr	r0, [r7, #8]
 8014ff6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014ff8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014ffa:	f7f5 fdcd 	bl	800ab98 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014ffe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015002:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015004:	1ad3      	subs	r3, r2, r3
 8015006:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801500a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801500e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015010:	4413      	add	r3, r2
 8015012:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015016:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801501a:	2b00      	cmp	r3, #0
 801501c:	f47f af19 	bne.w	8014e52 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015020:	2300      	movs	r3, #0
 8015022:	e002      	b.n	801502a <ip4_frag+0x26a>
      goto memerr;
 8015024:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015026:	f04f 33ff 	mov.w	r3, #4294967295
}
 801502a:	4618      	mov	r0, r3
 801502c:	3748      	adds	r7, #72	@ 0x48
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	08018dc4 	.word	0x08018dc4
 8015038:	08018fa0 	.word	0x08018fa0
 801503c:	08018e0c 	.word	0x08018e0c
 8015040:	08018fbc 	.word	0x08018fbc
 8015044:	08018fdc 	.word	0x08018fdc
 8015048:	08014d59 	.word	0x08014d59

0801504c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b086      	sub	sp, #24
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015056:	230e      	movs	r3, #14
 8015058:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	895b      	ldrh	r3, [r3, #10]
 801505e:	2b0e      	cmp	r3, #14
 8015060:	d96e      	bls.n	8015140 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	7bdb      	ldrb	r3, [r3, #15]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d106      	bne.n	8015078 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015070:	3301      	adds	r3, #1
 8015072:	b2da      	uxtb	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	7b1a      	ldrb	r2, [r3, #12]
 8015082:	7b5b      	ldrb	r3, [r3, #13]
 8015084:	021b      	lsls	r3, r3, #8
 8015086:	4313      	orrs	r3, r2
 8015088:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	781b      	ldrb	r3, [r3, #0]
 801508e:	f003 0301 	and.w	r3, r3, #1
 8015092:	2b00      	cmp	r3, #0
 8015094:	d023      	beq.n	80150de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	781b      	ldrb	r3, [r3, #0]
 801509a:	2b01      	cmp	r3, #1
 801509c:	d10f      	bne.n	80150be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	785b      	ldrb	r3, [r3, #1]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d11b      	bne.n	80150de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80150aa:	2b5e      	cmp	r3, #94	@ 0x5e
 80150ac:	d117      	bne.n	80150de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	7b5b      	ldrb	r3, [r3, #13]
 80150b2:	f043 0310 	orr.w	r3, r3, #16
 80150b6:	b2da      	uxtb	r2, r3
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	735a      	strb	r2, [r3, #13]
 80150bc:	e00f      	b.n	80150de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	2206      	movs	r2, #6
 80150c2:	4928      	ldr	r1, [pc, #160]	@ (8015164 <ethernet_input+0x118>)
 80150c4:	4618      	mov	r0, r3
 80150c6:	f000 f9ec 	bl	80154a2 <memcmp>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d106      	bne.n	80150de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	7b5b      	ldrb	r3, [r3, #13]
 80150d4:	f043 0308 	orr.w	r3, r3, #8
 80150d8:	b2da      	uxtb	r2, r3
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80150de:	89fb      	ldrh	r3, [r7, #14]
 80150e0:	2b08      	cmp	r3, #8
 80150e2:	d003      	beq.n	80150ec <ethernet_input+0xa0>
 80150e4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80150e8:	d014      	beq.n	8015114 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80150ea:	e032      	b.n	8015152 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80150f2:	f003 0308 	and.w	r3, r3, #8
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d024      	beq.n	8015144 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80150fa:	8afb      	ldrh	r3, [r7, #22]
 80150fc:	4619      	mov	r1, r3
 80150fe:	6878      	ldr	r0, [r7, #4]
 8015100:	f7f5 fcc4 	bl	800aa8c <pbuf_remove_header>
 8015104:	4603      	mov	r3, r0
 8015106:	2b00      	cmp	r3, #0
 8015108:	d11e      	bne.n	8015148 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801510a:	6839      	ldr	r1, [r7, #0]
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f7fe ff03 	bl	8013f18 <ip4_input>
      break;
 8015112:	e013      	b.n	801513c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801511a:	f003 0308 	and.w	r3, r3, #8
 801511e:	2b00      	cmp	r3, #0
 8015120:	d014      	beq.n	801514c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015122:	8afb      	ldrh	r3, [r7, #22]
 8015124:	4619      	mov	r1, r3
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f7f5 fcb0 	bl	800aa8c <pbuf_remove_header>
 801512c:	4603      	mov	r3, r0
 801512e:	2b00      	cmp	r3, #0
 8015130:	d10e      	bne.n	8015150 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015132:	6839      	ldr	r1, [r7, #0]
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f7fe f89f 	bl	8013278 <etharp_input>
      break;
 801513a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801513c:	2300      	movs	r3, #0
 801513e:	e00c      	b.n	801515a <ethernet_input+0x10e>
    goto free_and_return;
 8015140:	bf00      	nop
 8015142:	e006      	b.n	8015152 <ethernet_input+0x106>
        goto free_and_return;
 8015144:	bf00      	nop
 8015146:	e004      	b.n	8015152 <ethernet_input+0x106>
        goto free_and_return;
 8015148:	bf00      	nop
 801514a:	e002      	b.n	8015152 <ethernet_input+0x106>
        goto free_and_return;
 801514c:	bf00      	nop
 801514e:	e000      	b.n	8015152 <ethernet_input+0x106>
        goto free_and_return;
 8015150:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f7f5 fd20 	bl	800ab98 <pbuf_free>
  return ERR_OK;
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	3718      	adds	r7, #24
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	080191b0 	.word	0x080191b0

08015168 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015168:	b580      	push	{r7, lr}
 801516a:	b086      	sub	sp, #24
 801516c:	af00      	add	r7, sp, #0
 801516e:	60f8      	str	r0, [r7, #12]
 8015170:	60b9      	str	r1, [r7, #8]
 8015172:	607a      	str	r2, [r7, #4]
 8015174:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015176:	8c3b      	ldrh	r3, [r7, #32]
 8015178:	4618      	mov	r0, r3
 801517a:	f7f4 f9c7 	bl	800950c <lwip_htons>
 801517e:	4603      	mov	r3, r0
 8015180:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015182:	210e      	movs	r1, #14
 8015184:	68b8      	ldr	r0, [r7, #8]
 8015186:	f7f5 fc71 	bl	800aa6c <pbuf_add_header>
 801518a:	4603      	mov	r3, r0
 801518c:	2b00      	cmp	r3, #0
 801518e:	d125      	bne.n	80151dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	685b      	ldr	r3, [r3, #4]
 8015194:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	8afa      	ldrh	r2, [r7, #22]
 801519a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	2206      	movs	r2, #6
 80151a0:	6839      	ldr	r1, [r7, #0]
 80151a2:	4618      	mov	r0, r3
 80151a4:	f000 fa61 	bl	801566a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	3306      	adds	r3, #6
 80151ac:	2206      	movs	r2, #6
 80151ae:	6879      	ldr	r1, [r7, #4]
 80151b0:	4618      	mov	r0, r3
 80151b2:	f000 fa5a 	bl	801566a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80151bc:	2b06      	cmp	r3, #6
 80151be:	d006      	beq.n	80151ce <ethernet_output+0x66>
 80151c0:	4b0a      	ldr	r3, [pc, #40]	@ (80151ec <ethernet_output+0x84>)
 80151c2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80151c6:	490a      	ldr	r1, [pc, #40]	@ (80151f0 <ethernet_output+0x88>)
 80151c8:	480a      	ldr	r0, [pc, #40]	@ (80151f4 <ethernet_output+0x8c>)
 80151ca:	f000 f915 	bl	80153f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	699b      	ldr	r3, [r3, #24]
 80151d2:	68b9      	ldr	r1, [r7, #8]
 80151d4:	68f8      	ldr	r0, [r7, #12]
 80151d6:	4798      	blx	r3
 80151d8:	4603      	mov	r3, r0
 80151da:	e002      	b.n	80151e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80151dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80151de:	f06f 0301 	mvn.w	r3, #1
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3718      	adds	r7, #24
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	08018fec 	.word	0x08018fec
 80151f0:	08019024 	.word	0x08019024
 80151f4:	08019058 	.word	0x08019058

080151f8 <rand>:
 80151f8:	4b16      	ldr	r3, [pc, #88]	@ (8015254 <rand+0x5c>)
 80151fa:	b510      	push	{r4, lr}
 80151fc:	681c      	ldr	r4, [r3, #0]
 80151fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015200:	b9b3      	cbnz	r3, 8015230 <rand+0x38>
 8015202:	2018      	movs	r0, #24
 8015204:	f000 faa8 	bl	8015758 <malloc>
 8015208:	4602      	mov	r2, r0
 801520a:	6320      	str	r0, [r4, #48]	@ 0x30
 801520c:	b920      	cbnz	r0, 8015218 <rand+0x20>
 801520e:	4b12      	ldr	r3, [pc, #72]	@ (8015258 <rand+0x60>)
 8015210:	4812      	ldr	r0, [pc, #72]	@ (801525c <rand+0x64>)
 8015212:	2152      	movs	r1, #82	@ 0x52
 8015214:	f000 fa38 	bl	8015688 <__assert_func>
 8015218:	4911      	ldr	r1, [pc, #68]	@ (8015260 <rand+0x68>)
 801521a:	4b12      	ldr	r3, [pc, #72]	@ (8015264 <rand+0x6c>)
 801521c:	e9c0 1300 	strd	r1, r3, [r0]
 8015220:	4b11      	ldr	r3, [pc, #68]	@ (8015268 <rand+0x70>)
 8015222:	6083      	str	r3, [r0, #8]
 8015224:	230b      	movs	r3, #11
 8015226:	8183      	strh	r3, [r0, #12]
 8015228:	2100      	movs	r1, #0
 801522a:	2001      	movs	r0, #1
 801522c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015230:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015232:	480e      	ldr	r0, [pc, #56]	@ (801526c <rand+0x74>)
 8015234:	690b      	ldr	r3, [r1, #16]
 8015236:	694c      	ldr	r4, [r1, #20]
 8015238:	4a0d      	ldr	r2, [pc, #52]	@ (8015270 <rand+0x78>)
 801523a:	4358      	muls	r0, r3
 801523c:	fb02 0004 	mla	r0, r2, r4, r0
 8015240:	fba3 3202 	umull	r3, r2, r3, r2
 8015244:	3301      	adds	r3, #1
 8015246:	eb40 0002 	adc.w	r0, r0, r2
 801524a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801524e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015252:	bd10      	pop	{r4, pc}
 8015254:	20000040 	.word	0x20000040
 8015258:	080191be 	.word	0x080191be
 801525c:	080191d5 	.word	0x080191d5
 8015260:	abcd330e 	.word	0xabcd330e
 8015264:	e66d1234 	.word	0xe66d1234
 8015268:	0005deec 	.word	0x0005deec
 801526c:	5851f42d 	.word	0x5851f42d
 8015270:	4c957f2d 	.word	0x4c957f2d

08015274 <std>:
 8015274:	2300      	movs	r3, #0
 8015276:	b510      	push	{r4, lr}
 8015278:	4604      	mov	r4, r0
 801527a:	e9c0 3300 	strd	r3, r3, [r0]
 801527e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015282:	6083      	str	r3, [r0, #8]
 8015284:	8181      	strh	r1, [r0, #12]
 8015286:	6643      	str	r3, [r0, #100]	@ 0x64
 8015288:	81c2      	strh	r2, [r0, #14]
 801528a:	6183      	str	r3, [r0, #24]
 801528c:	4619      	mov	r1, r3
 801528e:	2208      	movs	r2, #8
 8015290:	305c      	adds	r0, #92	@ 0x5c
 8015292:	f000 f916 	bl	80154c2 <memset>
 8015296:	4b0d      	ldr	r3, [pc, #52]	@ (80152cc <std+0x58>)
 8015298:	6263      	str	r3, [r4, #36]	@ 0x24
 801529a:	4b0d      	ldr	r3, [pc, #52]	@ (80152d0 <std+0x5c>)
 801529c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801529e:	4b0d      	ldr	r3, [pc, #52]	@ (80152d4 <std+0x60>)
 80152a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80152a2:	4b0d      	ldr	r3, [pc, #52]	@ (80152d8 <std+0x64>)
 80152a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80152a6:	4b0d      	ldr	r3, [pc, #52]	@ (80152dc <std+0x68>)
 80152a8:	6224      	str	r4, [r4, #32]
 80152aa:	429c      	cmp	r4, r3
 80152ac:	d006      	beq.n	80152bc <std+0x48>
 80152ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80152b2:	4294      	cmp	r4, r2
 80152b4:	d002      	beq.n	80152bc <std+0x48>
 80152b6:	33d0      	adds	r3, #208	@ 0xd0
 80152b8:	429c      	cmp	r4, r3
 80152ba:	d105      	bne.n	80152c8 <std+0x54>
 80152bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80152c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152c4:	f000 b9ce 	b.w	8015664 <__retarget_lock_init_recursive>
 80152c8:	bd10      	pop	{r4, pc}
 80152ca:	bf00      	nop
 80152cc:	0801541d 	.word	0x0801541d
 80152d0:	0801543f 	.word	0x0801543f
 80152d4:	08015477 	.word	0x08015477
 80152d8:	0801549b 	.word	0x0801549b
 80152dc:	2000d254 	.word	0x2000d254

080152e0 <stdio_exit_handler>:
 80152e0:	4a02      	ldr	r2, [pc, #8]	@ (80152ec <stdio_exit_handler+0xc>)
 80152e2:	4903      	ldr	r1, [pc, #12]	@ (80152f0 <stdio_exit_handler+0x10>)
 80152e4:	4803      	ldr	r0, [pc, #12]	@ (80152f4 <stdio_exit_handler+0x14>)
 80152e6:	f000 b869 	b.w	80153bc <_fwalk_sglue>
 80152ea:	bf00      	nop
 80152ec:	20000034 	.word	0x20000034
 80152f0:	08015f69 	.word	0x08015f69
 80152f4:	20000044 	.word	0x20000044

080152f8 <cleanup_stdio>:
 80152f8:	6841      	ldr	r1, [r0, #4]
 80152fa:	4b0c      	ldr	r3, [pc, #48]	@ (801532c <cleanup_stdio+0x34>)
 80152fc:	4299      	cmp	r1, r3
 80152fe:	b510      	push	{r4, lr}
 8015300:	4604      	mov	r4, r0
 8015302:	d001      	beq.n	8015308 <cleanup_stdio+0x10>
 8015304:	f000 fe30 	bl	8015f68 <_fflush_r>
 8015308:	68a1      	ldr	r1, [r4, #8]
 801530a:	4b09      	ldr	r3, [pc, #36]	@ (8015330 <cleanup_stdio+0x38>)
 801530c:	4299      	cmp	r1, r3
 801530e:	d002      	beq.n	8015316 <cleanup_stdio+0x1e>
 8015310:	4620      	mov	r0, r4
 8015312:	f000 fe29 	bl	8015f68 <_fflush_r>
 8015316:	68e1      	ldr	r1, [r4, #12]
 8015318:	4b06      	ldr	r3, [pc, #24]	@ (8015334 <cleanup_stdio+0x3c>)
 801531a:	4299      	cmp	r1, r3
 801531c:	d004      	beq.n	8015328 <cleanup_stdio+0x30>
 801531e:	4620      	mov	r0, r4
 8015320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015324:	f000 be20 	b.w	8015f68 <_fflush_r>
 8015328:	bd10      	pop	{r4, pc}
 801532a:	bf00      	nop
 801532c:	2000d254 	.word	0x2000d254
 8015330:	2000d2bc 	.word	0x2000d2bc
 8015334:	2000d324 	.word	0x2000d324

08015338 <global_stdio_init.part.0>:
 8015338:	b510      	push	{r4, lr}
 801533a:	4b0b      	ldr	r3, [pc, #44]	@ (8015368 <global_stdio_init.part.0+0x30>)
 801533c:	4c0b      	ldr	r4, [pc, #44]	@ (801536c <global_stdio_init.part.0+0x34>)
 801533e:	4a0c      	ldr	r2, [pc, #48]	@ (8015370 <global_stdio_init.part.0+0x38>)
 8015340:	601a      	str	r2, [r3, #0]
 8015342:	4620      	mov	r0, r4
 8015344:	2200      	movs	r2, #0
 8015346:	2104      	movs	r1, #4
 8015348:	f7ff ff94 	bl	8015274 <std>
 801534c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015350:	2201      	movs	r2, #1
 8015352:	2109      	movs	r1, #9
 8015354:	f7ff ff8e 	bl	8015274 <std>
 8015358:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801535c:	2202      	movs	r2, #2
 801535e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015362:	2112      	movs	r1, #18
 8015364:	f7ff bf86 	b.w	8015274 <std>
 8015368:	2000d38c 	.word	0x2000d38c
 801536c:	2000d254 	.word	0x2000d254
 8015370:	080152e1 	.word	0x080152e1

08015374 <__sfp_lock_acquire>:
 8015374:	4801      	ldr	r0, [pc, #4]	@ (801537c <__sfp_lock_acquire+0x8>)
 8015376:	f000 b976 	b.w	8015666 <__retarget_lock_acquire_recursive>
 801537a:	bf00      	nop
 801537c:	2000d395 	.word	0x2000d395

08015380 <__sfp_lock_release>:
 8015380:	4801      	ldr	r0, [pc, #4]	@ (8015388 <__sfp_lock_release+0x8>)
 8015382:	f000 b971 	b.w	8015668 <__retarget_lock_release_recursive>
 8015386:	bf00      	nop
 8015388:	2000d395 	.word	0x2000d395

0801538c <__sinit>:
 801538c:	b510      	push	{r4, lr}
 801538e:	4604      	mov	r4, r0
 8015390:	f7ff fff0 	bl	8015374 <__sfp_lock_acquire>
 8015394:	6a23      	ldr	r3, [r4, #32]
 8015396:	b11b      	cbz	r3, 80153a0 <__sinit+0x14>
 8015398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801539c:	f7ff bff0 	b.w	8015380 <__sfp_lock_release>
 80153a0:	4b04      	ldr	r3, [pc, #16]	@ (80153b4 <__sinit+0x28>)
 80153a2:	6223      	str	r3, [r4, #32]
 80153a4:	4b04      	ldr	r3, [pc, #16]	@ (80153b8 <__sinit+0x2c>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d1f5      	bne.n	8015398 <__sinit+0xc>
 80153ac:	f7ff ffc4 	bl	8015338 <global_stdio_init.part.0>
 80153b0:	e7f2      	b.n	8015398 <__sinit+0xc>
 80153b2:	bf00      	nop
 80153b4:	080152f9 	.word	0x080152f9
 80153b8:	2000d38c 	.word	0x2000d38c

080153bc <_fwalk_sglue>:
 80153bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153c0:	4607      	mov	r7, r0
 80153c2:	4688      	mov	r8, r1
 80153c4:	4614      	mov	r4, r2
 80153c6:	2600      	movs	r6, #0
 80153c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80153cc:	f1b9 0901 	subs.w	r9, r9, #1
 80153d0:	d505      	bpl.n	80153de <_fwalk_sglue+0x22>
 80153d2:	6824      	ldr	r4, [r4, #0]
 80153d4:	2c00      	cmp	r4, #0
 80153d6:	d1f7      	bne.n	80153c8 <_fwalk_sglue+0xc>
 80153d8:	4630      	mov	r0, r6
 80153da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153de:	89ab      	ldrh	r3, [r5, #12]
 80153e0:	2b01      	cmp	r3, #1
 80153e2:	d907      	bls.n	80153f4 <_fwalk_sglue+0x38>
 80153e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80153e8:	3301      	adds	r3, #1
 80153ea:	d003      	beq.n	80153f4 <_fwalk_sglue+0x38>
 80153ec:	4629      	mov	r1, r5
 80153ee:	4638      	mov	r0, r7
 80153f0:	47c0      	blx	r8
 80153f2:	4306      	orrs	r6, r0
 80153f4:	3568      	adds	r5, #104	@ 0x68
 80153f6:	e7e9      	b.n	80153cc <_fwalk_sglue+0x10>

080153f8 <iprintf>:
 80153f8:	b40f      	push	{r0, r1, r2, r3}
 80153fa:	b507      	push	{r0, r1, r2, lr}
 80153fc:	4906      	ldr	r1, [pc, #24]	@ (8015418 <iprintf+0x20>)
 80153fe:	ab04      	add	r3, sp, #16
 8015400:	6808      	ldr	r0, [r1, #0]
 8015402:	f853 2b04 	ldr.w	r2, [r3], #4
 8015406:	6881      	ldr	r1, [r0, #8]
 8015408:	9301      	str	r3, [sp, #4]
 801540a:	f000 fa85 	bl	8015918 <_vfiprintf_r>
 801540e:	b003      	add	sp, #12
 8015410:	f85d eb04 	ldr.w	lr, [sp], #4
 8015414:	b004      	add	sp, #16
 8015416:	4770      	bx	lr
 8015418:	20000040 	.word	0x20000040

0801541c <__sread>:
 801541c:	b510      	push	{r4, lr}
 801541e:	460c      	mov	r4, r1
 8015420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015424:	f000 f8d6 	bl	80155d4 <_read_r>
 8015428:	2800      	cmp	r0, #0
 801542a:	bfab      	itete	ge
 801542c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801542e:	89a3      	ldrhlt	r3, [r4, #12]
 8015430:	181b      	addge	r3, r3, r0
 8015432:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015436:	bfac      	ite	ge
 8015438:	6563      	strge	r3, [r4, #84]	@ 0x54
 801543a:	81a3      	strhlt	r3, [r4, #12]
 801543c:	bd10      	pop	{r4, pc}

0801543e <__swrite>:
 801543e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015442:	461f      	mov	r7, r3
 8015444:	898b      	ldrh	r3, [r1, #12]
 8015446:	05db      	lsls	r3, r3, #23
 8015448:	4605      	mov	r5, r0
 801544a:	460c      	mov	r4, r1
 801544c:	4616      	mov	r6, r2
 801544e:	d505      	bpl.n	801545c <__swrite+0x1e>
 8015450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015454:	2302      	movs	r3, #2
 8015456:	2200      	movs	r2, #0
 8015458:	f000 f8aa 	bl	80155b0 <_lseek_r>
 801545c:	89a3      	ldrh	r3, [r4, #12]
 801545e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015466:	81a3      	strh	r3, [r4, #12]
 8015468:	4632      	mov	r2, r6
 801546a:	463b      	mov	r3, r7
 801546c:	4628      	mov	r0, r5
 801546e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015472:	f000 b8c1 	b.w	80155f8 <_write_r>

08015476 <__sseek>:
 8015476:	b510      	push	{r4, lr}
 8015478:	460c      	mov	r4, r1
 801547a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801547e:	f000 f897 	bl	80155b0 <_lseek_r>
 8015482:	1c43      	adds	r3, r0, #1
 8015484:	89a3      	ldrh	r3, [r4, #12]
 8015486:	bf15      	itete	ne
 8015488:	6560      	strne	r0, [r4, #84]	@ 0x54
 801548a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801548e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015492:	81a3      	strheq	r3, [r4, #12]
 8015494:	bf18      	it	ne
 8015496:	81a3      	strhne	r3, [r4, #12]
 8015498:	bd10      	pop	{r4, pc}

0801549a <__sclose>:
 801549a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801549e:	f000 b819 	b.w	80154d4 <_close_r>

080154a2 <memcmp>:
 80154a2:	b510      	push	{r4, lr}
 80154a4:	3901      	subs	r1, #1
 80154a6:	4402      	add	r2, r0
 80154a8:	4290      	cmp	r0, r2
 80154aa:	d101      	bne.n	80154b0 <memcmp+0xe>
 80154ac:	2000      	movs	r0, #0
 80154ae:	e005      	b.n	80154bc <memcmp+0x1a>
 80154b0:	7803      	ldrb	r3, [r0, #0]
 80154b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80154b6:	42a3      	cmp	r3, r4
 80154b8:	d001      	beq.n	80154be <memcmp+0x1c>
 80154ba:	1b18      	subs	r0, r3, r4
 80154bc:	bd10      	pop	{r4, pc}
 80154be:	3001      	adds	r0, #1
 80154c0:	e7f2      	b.n	80154a8 <memcmp+0x6>

080154c2 <memset>:
 80154c2:	4402      	add	r2, r0
 80154c4:	4603      	mov	r3, r0
 80154c6:	4293      	cmp	r3, r2
 80154c8:	d100      	bne.n	80154cc <memset+0xa>
 80154ca:	4770      	bx	lr
 80154cc:	f803 1b01 	strb.w	r1, [r3], #1
 80154d0:	e7f9      	b.n	80154c6 <memset+0x4>
	...

080154d4 <_close_r>:
 80154d4:	b538      	push	{r3, r4, r5, lr}
 80154d6:	4d06      	ldr	r5, [pc, #24]	@ (80154f0 <_close_r+0x1c>)
 80154d8:	2300      	movs	r3, #0
 80154da:	4604      	mov	r4, r0
 80154dc:	4608      	mov	r0, r1
 80154de:	602b      	str	r3, [r5, #0]
 80154e0:	f7eb fea4 	bl	800122c <_close>
 80154e4:	1c43      	adds	r3, r0, #1
 80154e6:	d102      	bne.n	80154ee <_close_r+0x1a>
 80154e8:	682b      	ldr	r3, [r5, #0]
 80154ea:	b103      	cbz	r3, 80154ee <_close_r+0x1a>
 80154ec:	6023      	str	r3, [r4, #0]
 80154ee:	bd38      	pop	{r3, r4, r5, pc}
 80154f0:	2000d390 	.word	0x2000d390

080154f4 <_reclaim_reent>:
 80154f4:	4b2d      	ldr	r3, [pc, #180]	@ (80155ac <_reclaim_reent+0xb8>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	4283      	cmp	r3, r0
 80154fa:	b570      	push	{r4, r5, r6, lr}
 80154fc:	4604      	mov	r4, r0
 80154fe:	d053      	beq.n	80155a8 <_reclaim_reent+0xb4>
 8015500:	69c3      	ldr	r3, [r0, #28]
 8015502:	b31b      	cbz	r3, 801554c <_reclaim_reent+0x58>
 8015504:	68db      	ldr	r3, [r3, #12]
 8015506:	b163      	cbz	r3, 8015522 <_reclaim_reent+0x2e>
 8015508:	2500      	movs	r5, #0
 801550a:	69e3      	ldr	r3, [r4, #28]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	5959      	ldr	r1, [r3, r5]
 8015510:	b9b1      	cbnz	r1, 8015540 <_reclaim_reent+0x4c>
 8015512:	3504      	adds	r5, #4
 8015514:	2d80      	cmp	r5, #128	@ 0x80
 8015516:	d1f8      	bne.n	801550a <_reclaim_reent+0x16>
 8015518:	69e3      	ldr	r3, [r4, #28]
 801551a:	4620      	mov	r0, r4
 801551c:	68d9      	ldr	r1, [r3, #12]
 801551e:	f000 f8d1 	bl	80156c4 <_free_r>
 8015522:	69e3      	ldr	r3, [r4, #28]
 8015524:	6819      	ldr	r1, [r3, #0]
 8015526:	b111      	cbz	r1, 801552e <_reclaim_reent+0x3a>
 8015528:	4620      	mov	r0, r4
 801552a:	f000 f8cb 	bl	80156c4 <_free_r>
 801552e:	69e3      	ldr	r3, [r4, #28]
 8015530:	689d      	ldr	r5, [r3, #8]
 8015532:	b15d      	cbz	r5, 801554c <_reclaim_reent+0x58>
 8015534:	4629      	mov	r1, r5
 8015536:	4620      	mov	r0, r4
 8015538:	682d      	ldr	r5, [r5, #0]
 801553a:	f000 f8c3 	bl	80156c4 <_free_r>
 801553e:	e7f8      	b.n	8015532 <_reclaim_reent+0x3e>
 8015540:	680e      	ldr	r6, [r1, #0]
 8015542:	4620      	mov	r0, r4
 8015544:	f000 f8be 	bl	80156c4 <_free_r>
 8015548:	4631      	mov	r1, r6
 801554a:	e7e1      	b.n	8015510 <_reclaim_reent+0x1c>
 801554c:	6961      	ldr	r1, [r4, #20]
 801554e:	b111      	cbz	r1, 8015556 <_reclaim_reent+0x62>
 8015550:	4620      	mov	r0, r4
 8015552:	f000 f8b7 	bl	80156c4 <_free_r>
 8015556:	69e1      	ldr	r1, [r4, #28]
 8015558:	b111      	cbz	r1, 8015560 <_reclaim_reent+0x6c>
 801555a:	4620      	mov	r0, r4
 801555c:	f000 f8b2 	bl	80156c4 <_free_r>
 8015560:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015562:	b111      	cbz	r1, 801556a <_reclaim_reent+0x76>
 8015564:	4620      	mov	r0, r4
 8015566:	f000 f8ad 	bl	80156c4 <_free_r>
 801556a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801556c:	b111      	cbz	r1, 8015574 <_reclaim_reent+0x80>
 801556e:	4620      	mov	r0, r4
 8015570:	f000 f8a8 	bl	80156c4 <_free_r>
 8015574:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015576:	b111      	cbz	r1, 801557e <_reclaim_reent+0x8a>
 8015578:	4620      	mov	r0, r4
 801557a:	f000 f8a3 	bl	80156c4 <_free_r>
 801557e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015580:	b111      	cbz	r1, 8015588 <_reclaim_reent+0x94>
 8015582:	4620      	mov	r0, r4
 8015584:	f000 f89e 	bl	80156c4 <_free_r>
 8015588:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801558a:	b111      	cbz	r1, 8015592 <_reclaim_reent+0x9e>
 801558c:	4620      	mov	r0, r4
 801558e:	f000 f899 	bl	80156c4 <_free_r>
 8015592:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015594:	b111      	cbz	r1, 801559c <_reclaim_reent+0xa8>
 8015596:	4620      	mov	r0, r4
 8015598:	f000 f894 	bl	80156c4 <_free_r>
 801559c:	6a23      	ldr	r3, [r4, #32]
 801559e:	b11b      	cbz	r3, 80155a8 <_reclaim_reent+0xb4>
 80155a0:	4620      	mov	r0, r4
 80155a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155a6:	4718      	bx	r3
 80155a8:	bd70      	pop	{r4, r5, r6, pc}
 80155aa:	bf00      	nop
 80155ac:	20000040 	.word	0x20000040

080155b0 <_lseek_r>:
 80155b0:	b538      	push	{r3, r4, r5, lr}
 80155b2:	4d07      	ldr	r5, [pc, #28]	@ (80155d0 <_lseek_r+0x20>)
 80155b4:	4604      	mov	r4, r0
 80155b6:	4608      	mov	r0, r1
 80155b8:	4611      	mov	r1, r2
 80155ba:	2200      	movs	r2, #0
 80155bc:	602a      	str	r2, [r5, #0]
 80155be:	461a      	mov	r2, r3
 80155c0:	f7eb fe5b 	bl	800127a <_lseek>
 80155c4:	1c43      	adds	r3, r0, #1
 80155c6:	d102      	bne.n	80155ce <_lseek_r+0x1e>
 80155c8:	682b      	ldr	r3, [r5, #0]
 80155ca:	b103      	cbz	r3, 80155ce <_lseek_r+0x1e>
 80155cc:	6023      	str	r3, [r4, #0]
 80155ce:	bd38      	pop	{r3, r4, r5, pc}
 80155d0:	2000d390 	.word	0x2000d390

080155d4 <_read_r>:
 80155d4:	b538      	push	{r3, r4, r5, lr}
 80155d6:	4d07      	ldr	r5, [pc, #28]	@ (80155f4 <_read_r+0x20>)
 80155d8:	4604      	mov	r4, r0
 80155da:	4608      	mov	r0, r1
 80155dc:	4611      	mov	r1, r2
 80155de:	2200      	movs	r2, #0
 80155e0:	602a      	str	r2, [r5, #0]
 80155e2:	461a      	mov	r2, r3
 80155e4:	f7eb fde9 	bl	80011ba <_read>
 80155e8:	1c43      	adds	r3, r0, #1
 80155ea:	d102      	bne.n	80155f2 <_read_r+0x1e>
 80155ec:	682b      	ldr	r3, [r5, #0]
 80155ee:	b103      	cbz	r3, 80155f2 <_read_r+0x1e>
 80155f0:	6023      	str	r3, [r4, #0]
 80155f2:	bd38      	pop	{r3, r4, r5, pc}
 80155f4:	2000d390 	.word	0x2000d390

080155f8 <_write_r>:
 80155f8:	b538      	push	{r3, r4, r5, lr}
 80155fa:	4d07      	ldr	r5, [pc, #28]	@ (8015618 <_write_r+0x20>)
 80155fc:	4604      	mov	r4, r0
 80155fe:	4608      	mov	r0, r1
 8015600:	4611      	mov	r1, r2
 8015602:	2200      	movs	r2, #0
 8015604:	602a      	str	r2, [r5, #0]
 8015606:	461a      	mov	r2, r3
 8015608:	f7eb fdf4 	bl	80011f4 <_write>
 801560c:	1c43      	adds	r3, r0, #1
 801560e:	d102      	bne.n	8015616 <_write_r+0x1e>
 8015610:	682b      	ldr	r3, [r5, #0]
 8015612:	b103      	cbz	r3, 8015616 <_write_r+0x1e>
 8015614:	6023      	str	r3, [r4, #0]
 8015616:	bd38      	pop	{r3, r4, r5, pc}
 8015618:	2000d390 	.word	0x2000d390

0801561c <__libc_init_array>:
 801561c:	b570      	push	{r4, r5, r6, lr}
 801561e:	4d0d      	ldr	r5, [pc, #52]	@ (8015654 <__libc_init_array+0x38>)
 8015620:	4c0d      	ldr	r4, [pc, #52]	@ (8015658 <__libc_init_array+0x3c>)
 8015622:	1b64      	subs	r4, r4, r5
 8015624:	10a4      	asrs	r4, r4, #2
 8015626:	2600      	movs	r6, #0
 8015628:	42a6      	cmp	r6, r4
 801562a:	d109      	bne.n	8015640 <__libc_init_array+0x24>
 801562c:	4d0b      	ldr	r5, [pc, #44]	@ (801565c <__libc_init_array+0x40>)
 801562e:	4c0c      	ldr	r4, [pc, #48]	@ (8015660 <__libc_init_array+0x44>)
 8015630:	f000 fe48 	bl	80162c4 <_init>
 8015634:	1b64      	subs	r4, r4, r5
 8015636:	10a4      	asrs	r4, r4, #2
 8015638:	2600      	movs	r6, #0
 801563a:	42a6      	cmp	r6, r4
 801563c:	d105      	bne.n	801564a <__libc_init_array+0x2e>
 801563e:	bd70      	pop	{r4, r5, r6, pc}
 8015640:	f855 3b04 	ldr.w	r3, [r5], #4
 8015644:	4798      	blx	r3
 8015646:	3601      	adds	r6, #1
 8015648:	e7ee      	b.n	8015628 <__libc_init_array+0xc>
 801564a:	f855 3b04 	ldr.w	r3, [r5], #4
 801564e:	4798      	blx	r3
 8015650:	3601      	adds	r6, #1
 8015652:	e7f2      	b.n	801563a <__libc_init_array+0x1e>
 8015654:	080192a4 	.word	0x080192a4
 8015658:	080192a4 	.word	0x080192a4
 801565c:	080192a4 	.word	0x080192a4
 8015660:	080192a8 	.word	0x080192a8

08015664 <__retarget_lock_init_recursive>:
 8015664:	4770      	bx	lr

08015666 <__retarget_lock_acquire_recursive>:
 8015666:	4770      	bx	lr

08015668 <__retarget_lock_release_recursive>:
 8015668:	4770      	bx	lr

0801566a <memcpy>:
 801566a:	440a      	add	r2, r1
 801566c:	4291      	cmp	r1, r2
 801566e:	f100 33ff 	add.w	r3, r0, #4294967295
 8015672:	d100      	bne.n	8015676 <memcpy+0xc>
 8015674:	4770      	bx	lr
 8015676:	b510      	push	{r4, lr}
 8015678:	f811 4b01 	ldrb.w	r4, [r1], #1
 801567c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015680:	4291      	cmp	r1, r2
 8015682:	d1f9      	bne.n	8015678 <memcpy+0xe>
 8015684:	bd10      	pop	{r4, pc}
	...

08015688 <__assert_func>:
 8015688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801568a:	4614      	mov	r4, r2
 801568c:	461a      	mov	r2, r3
 801568e:	4b09      	ldr	r3, [pc, #36]	@ (80156b4 <__assert_func+0x2c>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	4605      	mov	r5, r0
 8015694:	68d8      	ldr	r0, [r3, #12]
 8015696:	b14c      	cbz	r4, 80156ac <__assert_func+0x24>
 8015698:	4b07      	ldr	r3, [pc, #28]	@ (80156b8 <__assert_func+0x30>)
 801569a:	9100      	str	r1, [sp, #0]
 801569c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80156a0:	4906      	ldr	r1, [pc, #24]	@ (80156bc <__assert_func+0x34>)
 80156a2:	462b      	mov	r3, r5
 80156a4:	f000 fc88 	bl	8015fb8 <fiprintf>
 80156a8:	f000 fd3c 	bl	8016124 <abort>
 80156ac:	4b04      	ldr	r3, [pc, #16]	@ (80156c0 <__assert_func+0x38>)
 80156ae:	461c      	mov	r4, r3
 80156b0:	e7f3      	b.n	801569a <__assert_func+0x12>
 80156b2:	bf00      	nop
 80156b4:	20000040 	.word	0x20000040
 80156b8:	0801922d 	.word	0x0801922d
 80156bc:	0801923a 	.word	0x0801923a
 80156c0:	08019268 	.word	0x08019268

080156c4 <_free_r>:
 80156c4:	b538      	push	{r3, r4, r5, lr}
 80156c6:	4605      	mov	r5, r0
 80156c8:	2900      	cmp	r1, #0
 80156ca:	d041      	beq.n	8015750 <_free_r+0x8c>
 80156cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156d0:	1f0c      	subs	r4, r1, #4
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	bfb8      	it	lt
 80156d6:	18e4      	addlt	r4, r4, r3
 80156d8:	f000 f8e8 	bl	80158ac <__malloc_lock>
 80156dc:	4a1d      	ldr	r2, [pc, #116]	@ (8015754 <_free_r+0x90>)
 80156de:	6813      	ldr	r3, [r2, #0]
 80156e0:	b933      	cbnz	r3, 80156f0 <_free_r+0x2c>
 80156e2:	6063      	str	r3, [r4, #4]
 80156e4:	6014      	str	r4, [r2, #0]
 80156e6:	4628      	mov	r0, r5
 80156e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156ec:	f000 b8e4 	b.w	80158b8 <__malloc_unlock>
 80156f0:	42a3      	cmp	r3, r4
 80156f2:	d908      	bls.n	8015706 <_free_r+0x42>
 80156f4:	6820      	ldr	r0, [r4, #0]
 80156f6:	1821      	adds	r1, r4, r0
 80156f8:	428b      	cmp	r3, r1
 80156fa:	bf01      	itttt	eq
 80156fc:	6819      	ldreq	r1, [r3, #0]
 80156fe:	685b      	ldreq	r3, [r3, #4]
 8015700:	1809      	addeq	r1, r1, r0
 8015702:	6021      	streq	r1, [r4, #0]
 8015704:	e7ed      	b.n	80156e2 <_free_r+0x1e>
 8015706:	461a      	mov	r2, r3
 8015708:	685b      	ldr	r3, [r3, #4]
 801570a:	b10b      	cbz	r3, 8015710 <_free_r+0x4c>
 801570c:	42a3      	cmp	r3, r4
 801570e:	d9fa      	bls.n	8015706 <_free_r+0x42>
 8015710:	6811      	ldr	r1, [r2, #0]
 8015712:	1850      	adds	r0, r2, r1
 8015714:	42a0      	cmp	r0, r4
 8015716:	d10b      	bne.n	8015730 <_free_r+0x6c>
 8015718:	6820      	ldr	r0, [r4, #0]
 801571a:	4401      	add	r1, r0
 801571c:	1850      	adds	r0, r2, r1
 801571e:	4283      	cmp	r3, r0
 8015720:	6011      	str	r1, [r2, #0]
 8015722:	d1e0      	bne.n	80156e6 <_free_r+0x22>
 8015724:	6818      	ldr	r0, [r3, #0]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	6053      	str	r3, [r2, #4]
 801572a:	4408      	add	r0, r1
 801572c:	6010      	str	r0, [r2, #0]
 801572e:	e7da      	b.n	80156e6 <_free_r+0x22>
 8015730:	d902      	bls.n	8015738 <_free_r+0x74>
 8015732:	230c      	movs	r3, #12
 8015734:	602b      	str	r3, [r5, #0]
 8015736:	e7d6      	b.n	80156e6 <_free_r+0x22>
 8015738:	6820      	ldr	r0, [r4, #0]
 801573a:	1821      	adds	r1, r4, r0
 801573c:	428b      	cmp	r3, r1
 801573e:	bf04      	itt	eq
 8015740:	6819      	ldreq	r1, [r3, #0]
 8015742:	685b      	ldreq	r3, [r3, #4]
 8015744:	6063      	str	r3, [r4, #4]
 8015746:	bf04      	itt	eq
 8015748:	1809      	addeq	r1, r1, r0
 801574a:	6021      	streq	r1, [r4, #0]
 801574c:	6054      	str	r4, [r2, #4]
 801574e:	e7ca      	b.n	80156e6 <_free_r+0x22>
 8015750:	bd38      	pop	{r3, r4, r5, pc}
 8015752:	bf00      	nop
 8015754:	2000d39c 	.word	0x2000d39c

08015758 <malloc>:
 8015758:	4b02      	ldr	r3, [pc, #8]	@ (8015764 <malloc+0xc>)
 801575a:	4601      	mov	r1, r0
 801575c:	6818      	ldr	r0, [r3, #0]
 801575e:	f000 b825 	b.w	80157ac <_malloc_r>
 8015762:	bf00      	nop
 8015764:	20000040 	.word	0x20000040

08015768 <sbrk_aligned>:
 8015768:	b570      	push	{r4, r5, r6, lr}
 801576a:	4e0f      	ldr	r6, [pc, #60]	@ (80157a8 <sbrk_aligned+0x40>)
 801576c:	460c      	mov	r4, r1
 801576e:	6831      	ldr	r1, [r6, #0]
 8015770:	4605      	mov	r5, r0
 8015772:	b911      	cbnz	r1, 801577a <sbrk_aligned+0x12>
 8015774:	f000 fcc6 	bl	8016104 <_sbrk_r>
 8015778:	6030      	str	r0, [r6, #0]
 801577a:	4621      	mov	r1, r4
 801577c:	4628      	mov	r0, r5
 801577e:	f000 fcc1 	bl	8016104 <_sbrk_r>
 8015782:	1c43      	adds	r3, r0, #1
 8015784:	d103      	bne.n	801578e <sbrk_aligned+0x26>
 8015786:	f04f 34ff 	mov.w	r4, #4294967295
 801578a:	4620      	mov	r0, r4
 801578c:	bd70      	pop	{r4, r5, r6, pc}
 801578e:	1cc4      	adds	r4, r0, #3
 8015790:	f024 0403 	bic.w	r4, r4, #3
 8015794:	42a0      	cmp	r0, r4
 8015796:	d0f8      	beq.n	801578a <sbrk_aligned+0x22>
 8015798:	1a21      	subs	r1, r4, r0
 801579a:	4628      	mov	r0, r5
 801579c:	f000 fcb2 	bl	8016104 <_sbrk_r>
 80157a0:	3001      	adds	r0, #1
 80157a2:	d1f2      	bne.n	801578a <sbrk_aligned+0x22>
 80157a4:	e7ef      	b.n	8015786 <sbrk_aligned+0x1e>
 80157a6:	bf00      	nop
 80157a8:	2000d398 	.word	0x2000d398

080157ac <_malloc_r>:
 80157ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157b0:	1ccd      	adds	r5, r1, #3
 80157b2:	f025 0503 	bic.w	r5, r5, #3
 80157b6:	3508      	adds	r5, #8
 80157b8:	2d0c      	cmp	r5, #12
 80157ba:	bf38      	it	cc
 80157bc:	250c      	movcc	r5, #12
 80157be:	2d00      	cmp	r5, #0
 80157c0:	4606      	mov	r6, r0
 80157c2:	db01      	blt.n	80157c8 <_malloc_r+0x1c>
 80157c4:	42a9      	cmp	r1, r5
 80157c6:	d904      	bls.n	80157d2 <_malloc_r+0x26>
 80157c8:	230c      	movs	r3, #12
 80157ca:	6033      	str	r3, [r6, #0]
 80157cc:	2000      	movs	r0, #0
 80157ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80158a8 <_malloc_r+0xfc>
 80157d6:	f000 f869 	bl	80158ac <__malloc_lock>
 80157da:	f8d8 3000 	ldr.w	r3, [r8]
 80157de:	461c      	mov	r4, r3
 80157e0:	bb44      	cbnz	r4, 8015834 <_malloc_r+0x88>
 80157e2:	4629      	mov	r1, r5
 80157e4:	4630      	mov	r0, r6
 80157e6:	f7ff ffbf 	bl	8015768 <sbrk_aligned>
 80157ea:	1c43      	adds	r3, r0, #1
 80157ec:	4604      	mov	r4, r0
 80157ee:	d158      	bne.n	80158a2 <_malloc_r+0xf6>
 80157f0:	f8d8 4000 	ldr.w	r4, [r8]
 80157f4:	4627      	mov	r7, r4
 80157f6:	2f00      	cmp	r7, #0
 80157f8:	d143      	bne.n	8015882 <_malloc_r+0xd6>
 80157fa:	2c00      	cmp	r4, #0
 80157fc:	d04b      	beq.n	8015896 <_malloc_r+0xea>
 80157fe:	6823      	ldr	r3, [r4, #0]
 8015800:	4639      	mov	r1, r7
 8015802:	4630      	mov	r0, r6
 8015804:	eb04 0903 	add.w	r9, r4, r3
 8015808:	f000 fc7c 	bl	8016104 <_sbrk_r>
 801580c:	4581      	cmp	r9, r0
 801580e:	d142      	bne.n	8015896 <_malloc_r+0xea>
 8015810:	6821      	ldr	r1, [r4, #0]
 8015812:	1a6d      	subs	r5, r5, r1
 8015814:	4629      	mov	r1, r5
 8015816:	4630      	mov	r0, r6
 8015818:	f7ff ffa6 	bl	8015768 <sbrk_aligned>
 801581c:	3001      	adds	r0, #1
 801581e:	d03a      	beq.n	8015896 <_malloc_r+0xea>
 8015820:	6823      	ldr	r3, [r4, #0]
 8015822:	442b      	add	r3, r5
 8015824:	6023      	str	r3, [r4, #0]
 8015826:	f8d8 3000 	ldr.w	r3, [r8]
 801582a:	685a      	ldr	r2, [r3, #4]
 801582c:	bb62      	cbnz	r2, 8015888 <_malloc_r+0xdc>
 801582e:	f8c8 7000 	str.w	r7, [r8]
 8015832:	e00f      	b.n	8015854 <_malloc_r+0xa8>
 8015834:	6822      	ldr	r2, [r4, #0]
 8015836:	1b52      	subs	r2, r2, r5
 8015838:	d420      	bmi.n	801587c <_malloc_r+0xd0>
 801583a:	2a0b      	cmp	r2, #11
 801583c:	d917      	bls.n	801586e <_malloc_r+0xc2>
 801583e:	1961      	adds	r1, r4, r5
 8015840:	42a3      	cmp	r3, r4
 8015842:	6025      	str	r5, [r4, #0]
 8015844:	bf18      	it	ne
 8015846:	6059      	strne	r1, [r3, #4]
 8015848:	6863      	ldr	r3, [r4, #4]
 801584a:	bf08      	it	eq
 801584c:	f8c8 1000 	streq.w	r1, [r8]
 8015850:	5162      	str	r2, [r4, r5]
 8015852:	604b      	str	r3, [r1, #4]
 8015854:	4630      	mov	r0, r6
 8015856:	f000 f82f 	bl	80158b8 <__malloc_unlock>
 801585a:	f104 000b 	add.w	r0, r4, #11
 801585e:	1d23      	adds	r3, r4, #4
 8015860:	f020 0007 	bic.w	r0, r0, #7
 8015864:	1ac2      	subs	r2, r0, r3
 8015866:	bf1c      	itt	ne
 8015868:	1a1b      	subne	r3, r3, r0
 801586a:	50a3      	strne	r3, [r4, r2]
 801586c:	e7af      	b.n	80157ce <_malloc_r+0x22>
 801586e:	6862      	ldr	r2, [r4, #4]
 8015870:	42a3      	cmp	r3, r4
 8015872:	bf0c      	ite	eq
 8015874:	f8c8 2000 	streq.w	r2, [r8]
 8015878:	605a      	strne	r2, [r3, #4]
 801587a:	e7eb      	b.n	8015854 <_malloc_r+0xa8>
 801587c:	4623      	mov	r3, r4
 801587e:	6864      	ldr	r4, [r4, #4]
 8015880:	e7ae      	b.n	80157e0 <_malloc_r+0x34>
 8015882:	463c      	mov	r4, r7
 8015884:	687f      	ldr	r7, [r7, #4]
 8015886:	e7b6      	b.n	80157f6 <_malloc_r+0x4a>
 8015888:	461a      	mov	r2, r3
 801588a:	685b      	ldr	r3, [r3, #4]
 801588c:	42a3      	cmp	r3, r4
 801588e:	d1fb      	bne.n	8015888 <_malloc_r+0xdc>
 8015890:	2300      	movs	r3, #0
 8015892:	6053      	str	r3, [r2, #4]
 8015894:	e7de      	b.n	8015854 <_malloc_r+0xa8>
 8015896:	230c      	movs	r3, #12
 8015898:	6033      	str	r3, [r6, #0]
 801589a:	4630      	mov	r0, r6
 801589c:	f000 f80c 	bl	80158b8 <__malloc_unlock>
 80158a0:	e794      	b.n	80157cc <_malloc_r+0x20>
 80158a2:	6005      	str	r5, [r0, #0]
 80158a4:	e7d6      	b.n	8015854 <_malloc_r+0xa8>
 80158a6:	bf00      	nop
 80158a8:	2000d39c 	.word	0x2000d39c

080158ac <__malloc_lock>:
 80158ac:	4801      	ldr	r0, [pc, #4]	@ (80158b4 <__malloc_lock+0x8>)
 80158ae:	f7ff beda 	b.w	8015666 <__retarget_lock_acquire_recursive>
 80158b2:	bf00      	nop
 80158b4:	2000d394 	.word	0x2000d394

080158b8 <__malloc_unlock>:
 80158b8:	4801      	ldr	r0, [pc, #4]	@ (80158c0 <__malloc_unlock+0x8>)
 80158ba:	f7ff bed5 	b.w	8015668 <__retarget_lock_release_recursive>
 80158be:	bf00      	nop
 80158c0:	2000d394 	.word	0x2000d394

080158c4 <__sfputc_r>:
 80158c4:	6893      	ldr	r3, [r2, #8]
 80158c6:	3b01      	subs	r3, #1
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	b410      	push	{r4}
 80158cc:	6093      	str	r3, [r2, #8]
 80158ce:	da08      	bge.n	80158e2 <__sfputc_r+0x1e>
 80158d0:	6994      	ldr	r4, [r2, #24]
 80158d2:	42a3      	cmp	r3, r4
 80158d4:	db01      	blt.n	80158da <__sfputc_r+0x16>
 80158d6:	290a      	cmp	r1, #10
 80158d8:	d103      	bne.n	80158e2 <__sfputc_r+0x1e>
 80158da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158de:	f000 bb7d 	b.w	8015fdc <__swbuf_r>
 80158e2:	6813      	ldr	r3, [r2, #0]
 80158e4:	1c58      	adds	r0, r3, #1
 80158e6:	6010      	str	r0, [r2, #0]
 80158e8:	7019      	strb	r1, [r3, #0]
 80158ea:	4608      	mov	r0, r1
 80158ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158f0:	4770      	bx	lr

080158f2 <__sfputs_r>:
 80158f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158f4:	4606      	mov	r6, r0
 80158f6:	460f      	mov	r7, r1
 80158f8:	4614      	mov	r4, r2
 80158fa:	18d5      	adds	r5, r2, r3
 80158fc:	42ac      	cmp	r4, r5
 80158fe:	d101      	bne.n	8015904 <__sfputs_r+0x12>
 8015900:	2000      	movs	r0, #0
 8015902:	e007      	b.n	8015914 <__sfputs_r+0x22>
 8015904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015908:	463a      	mov	r2, r7
 801590a:	4630      	mov	r0, r6
 801590c:	f7ff ffda 	bl	80158c4 <__sfputc_r>
 8015910:	1c43      	adds	r3, r0, #1
 8015912:	d1f3      	bne.n	80158fc <__sfputs_r+0xa>
 8015914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015918 <_vfiprintf_r>:
 8015918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801591c:	460d      	mov	r5, r1
 801591e:	b09d      	sub	sp, #116	@ 0x74
 8015920:	4614      	mov	r4, r2
 8015922:	4698      	mov	r8, r3
 8015924:	4606      	mov	r6, r0
 8015926:	b118      	cbz	r0, 8015930 <_vfiprintf_r+0x18>
 8015928:	6a03      	ldr	r3, [r0, #32]
 801592a:	b90b      	cbnz	r3, 8015930 <_vfiprintf_r+0x18>
 801592c:	f7ff fd2e 	bl	801538c <__sinit>
 8015930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015932:	07d9      	lsls	r1, r3, #31
 8015934:	d405      	bmi.n	8015942 <_vfiprintf_r+0x2a>
 8015936:	89ab      	ldrh	r3, [r5, #12]
 8015938:	059a      	lsls	r2, r3, #22
 801593a:	d402      	bmi.n	8015942 <_vfiprintf_r+0x2a>
 801593c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801593e:	f7ff fe92 	bl	8015666 <__retarget_lock_acquire_recursive>
 8015942:	89ab      	ldrh	r3, [r5, #12]
 8015944:	071b      	lsls	r3, r3, #28
 8015946:	d501      	bpl.n	801594c <_vfiprintf_r+0x34>
 8015948:	692b      	ldr	r3, [r5, #16]
 801594a:	b99b      	cbnz	r3, 8015974 <_vfiprintf_r+0x5c>
 801594c:	4629      	mov	r1, r5
 801594e:	4630      	mov	r0, r6
 8015950:	f000 fb82 	bl	8016058 <__swsetup_r>
 8015954:	b170      	cbz	r0, 8015974 <_vfiprintf_r+0x5c>
 8015956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015958:	07dc      	lsls	r4, r3, #31
 801595a:	d504      	bpl.n	8015966 <_vfiprintf_r+0x4e>
 801595c:	f04f 30ff 	mov.w	r0, #4294967295
 8015960:	b01d      	add	sp, #116	@ 0x74
 8015962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015966:	89ab      	ldrh	r3, [r5, #12]
 8015968:	0598      	lsls	r0, r3, #22
 801596a:	d4f7      	bmi.n	801595c <_vfiprintf_r+0x44>
 801596c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801596e:	f7ff fe7b 	bl	8015668 <__retarget_lock_release_recursive>
 8015972:	e7f3      	b.n	801595c <_vfiprintf_r+0x44>
 8015974:	2300      	movs	r3, #0
 8015976:	9309      	str	r3, [sp, #36]	@ 0x24
 8015978:	2320      	movs	r3, #32
 801597a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801597e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015982:	2330      	movs	r3, #48	@ 0x30
 8015984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015b34 <_vfiprintf_r+0x21c>
 8015988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801598c:	f04f 0901 	mov.w	r9, #1
 8015990:	4623      	mov	r3, r4
 8015992:	469a      	mov	sl, r3
 8015994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015998:	b10a      	cbz	r2, 801599e <_vfiprintf_r+0x86>
 801599a:	2a25      	cmp	r2, #37	@ 0x25
 801599c:	d1f9      	bne.n	8015992 <_vfiprintf_r+0x7a>
 801599e:	ebba 0b04 	subs.w	fp, sl, r4
 80159a2:	d00b      	beq.n	80159bc <_vfiprintf_r+0xa4>
 80159a4:	465b      	mov	r3, fp
 80159a6:	4622      	mov	r2, r4
 80159a8:	4629      	mov	r1, r5
 80159aa:	4630      	mov	r0, r6
 80159ac:	f7ff ffa1 	bl	80158f2 <__sfputs_r>
 80159b0:	3001      	adds	r0, #1
 80159b2:	f000 80a7 	beq.w	8015b04 <_vfiprintf_r+0x1ec>
 80159b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159b8:	445a      	add	r2, fp
 80159ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80159bc:	f89a 3000 	ldrb.w	r3, [sl]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f000 809f 	beq.w	8015b04 <_vfiprintf_r+0x1ec>
 80159c6:	2300      	movs	r3, #0
 80159c8:	f04f 32ff 	mov.w	r2, #4294967295
 80159cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159d0:	f10a 0a01 	add.w	sl, sl, #1
 80159d4:	9304      	str	r3, [sp, #16]
 80159d6:	9307      	str	r3, [sp, #28]
 80159d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80159dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80159de:	4654      	mov	r4, sl
 80159e0:	2205      	movs	r2, #5
 80159e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159e6:	4853      	ldr	r0, [pc, #332]	@ (8015b34 <_vfiprintf_r+0x21c>)
 80159e8:	f7ea fc2a 	bl	8000240 <memchr>
 80159ec:	9a04      	ldr	r2, [sp, #16]
 80159ee:	b9d8      	cbnz	r0, 8015a28 <_vfiprintf_r+0x110>
 80159f0:	06d1      	lsls	r1, r2, #27
 80159f2:	bf44      	itt	mi
 80159f4:	2320      	movmi	r3, #32
 80159f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159fa:	0713      	lsls	r3, r2, #28
 80159fc:	bf44      	itt	mi
 80159fe:	232b      	movmi	r3, #43	@ 0x2b
 8015a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015a04:	f89a 3000 	ldrb.w	r3, [sl]
 8015a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a0a:	d015      	beq.n	8015a38 <_vfiprintf_r+0x120>
 8015a0c:	9a07      	ldr	r2, [sp, #28]
 8015a0e:	4654      	mov	r4, sl
 8015a10:	2000      	movs	r0, #0
 8015a12:	f04f 0c0a 	mov.w	ip, #10
 8015a16:	4621      	mov	r1, r4
 8015a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a1c:	3b30      	subs	r3, #48	@ 0x30
 8015a1e:	2b09      	cmp	r3, #9
 8015a20:	d94b      	bls.n	8015aba <_vfiprintf_r+0x1a2>
 8015a22:	b1b0      	cbz	r0, 8015a52 <_vfiprintf_r+0x13a>
 8015a24:	9207      	str	r2, [sp, #28]
 8015a26:	e014      	b.n	8015a52 <_vfiprintf_r+0x13a>
 8015a28:	eba0 0308 	sub.w	r3, r0, r8
 8015a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8015a30:	4313      	orrs	r3, r2
 8015a32:	9304      	str	r3, [sp, #16]
 8015a34:	46a2      	mov	sl, r4
 8015a36:	e7d2      	b.n	80159de <_vfiprintf_r+0xc6>
 8015a38:	9b03      	ldr	r3, [sp, #12]
 8015a3a:	1d19      	adds	r1, r3, #4
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	9103      	str	r1, [sp, #12]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	bfbb      	ittet	lt
 8015a44:	425b      	neglt	r3, r3
 8015a46:	f042 0202 	orrlt.w	r2, r2, #2
 8015a4a:	9307      	strge	r3, [sp, #28]
 8015a4c:	9307      	strlt	r3, [sp, #28]
 8015a4e:	bfb8      	it	lt
 8015a50:	9204      	strlt	r2, [sp, #16]
 8015a52:	7823      	ldrb	r3, [r4, #0]
 8015a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8015a56:	d10a      	bne.n	8015a6e <_vfiprintf_r+0x156>
 8015a58:	7863      	ldrb	r3, [r4, #1]
 8015a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a5c:	d132      	bne.n	8015ac4 <_vfiprintf_r+0x1ac>
 8015a5e:	9b03      	ldr	r3, [sp, #12]
 8015a60:	1d1a      	adds	r2, r3, #4
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	9203      	str	r2, [sp, #12]
 8015a66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015a6a:	3402      	adds	r4, #2
 8015a6c:	9305      	str	r3, [sp, #20]
 8015a6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015b44 <_vfiprintf_r+0x22c>
 8015a72:	7821      	ldrb	r1, [r4, #0]
 8015a74:	2203      	movs	r2, #3
 8015a76:	4650      	mov	r0, sl
 8015a78:	f7ea fbe2 	bl	8000240 <memchr>
 8015a7c:	b138      	cbz	r0, 8015a8e <_vfiprintf_r+0x176>
 8015a7e:	9b04      	ldr	r3, [sp, #16]
 8015a80:	eba0 000a 	sub.w	r0, r0, sl
 8015a84:	2240      	movs	r2, #64	@ 0x40
 8015a86:	4082      	lsls	r2, r0
 8015a88:	4313      	orrs	r3, r2
 8015a8a:	3401      	adds	r4, #1
 8015a8c:	9304      	str	r3, [sp, #16]
 8015a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a92:	4829      	ldr	r0, [pc, #164]	@ (8015b38 <_vfiprintf_r+0x220>)
 8015a94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015a98:	2206      	movs	r2, #6
 8015a9a:	f7ea fbd1 	bl	8000240 <memchr>
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d03f      	beq.n	8015b22 <_vfiprintf_r+0x20a>
 8015aa2:	4b26      	ldr	r3, [pc, #152]	@ (8015b3c <_vfiprintf_r+0x224>)
 8015aa4:	bb1b      	cbnz	r3, 8015aee <_vfiprintf_r+0x1d6>
 8015aa6:	9b03      	ldr	r3, [sp, #12]
 8015aa8:	3307      	adds	r3, #7
 8015aaa:	f023 0307 	bic.w	r3, r3, #7
 8015aae:	3308      	adds	r3, #8
 8015ab0:	9303      	str	r3, [sp, #12]
 8015ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ab4:	443b      	add	r3, r7
 8015ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ab8:	e76a      	b.n	8015990 <_vfiprintf_r+0x78>
 8015aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8015abe:	460c      	mov	r4, r1
 8015ac0:	2001      	movs	r0, #1
 8015ac2:	e7a8      	b.n	8015a16 <_vfiprintf_r+0xfe>
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	3401      	adds	r4, #1
 8015ac8:	9305      	str	r3, [sp, #20]
 8015aca:	4619      	mov	r1, r3
 8015acc:	f04f 0c0a 	mov.w	ip, #10
 8015ad0:	4620      	mov	r0, r4
 8015ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ad6:	3a30      	subs	r2, #48	@ 0x30
 8015ad8:	2a09      	cmp	r2, #9
 8015ada:	d903      	bls.n	8015ae4 <_vfiprintf_r+0x1cc>
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d0c6      	beq.n	8015a6e <_vfiprintf_r+0x156>
 8015ae0:	9105      	str	r1, [sp, #20]
 8015ae2:	e7c4      	b.n	8015a6e <_vfiprintf_r+0x156>
 8015ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ae8:	4604      	mov	r4, r0
 8015aea:	2301      	movs	r3, #1
 8015aec:	e7f0      	b.n	8015ad0 <_vfiprintf_r+0x1b8>
 8015aee:	ab03      	add	r3, sp, #12
 8015af0:	9300      	str	r3, [sp, #0]
 8015af2:	462a      	mov	r2, r5
 8015af4:	4b12      	ldr	r3, [pc, #72]	@ (8015b40 <_vfiprintf_r+0x228>)
 8015af6:	a904      	add	r1, sp, #16
 8015af8:	4630      	mov	r0, r6
 8015afa:	f3af 8000 	nop.w
 8015afe:	4607      	mov	r7, r0
 8015b00:	1c78      	adds	r0, r7, #1
 8015b02:	d1d6      	bne.n	8015ab2 <_vfiprintf_r+0x19a>
 8015b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015b06:	07d9      	lsls	r1, r3, #31
 8015b08:	d405      	bmi.n	8015b16 <_vfiprintf_r+0x1fe>
 8015b0a:	89ab      	ldrh	r3, [r5, #12]
 8015b0c:	059a      	lsls	r2, r3, #22
 8015b0e:	d402      	bmi.n	8015b16 <_vfiprintf_r+0x1fe>
 8015b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015b12:	f7ff fda9 	bl	8015668 <__retarget_lock_release_recursive>
 8015b16:	89ab      	ldrh	r3, [r5, #12]
 8015b18:	065b      	lsls	r3, r3, #25
 8015b1a:	f53f af1f 	bmi.w	801595c <_vfiprintf_r+0x44>
 8015b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b20:	e71e      	b.n	8015960 <_vfiprintf_r+0x48>
 8015b22:	ab03      	add	r3, sp, #12
 8015b24:	9300      	str	r3, [sp, #0]
 8015b26:	462a      	mov	r2, r5
 8015b28:	4b05      	ldr	r3, [pc, #20]	@ (8015b40 <_vfiprintf_r+0x228>)
 8015b2a:	a904      	add	r1, sp, #16
 8015b2c:	4630      	mov	r0, r6
 8015b2e:	f000 f879 	bl	8015c24 <_printf_i>
 8015b32:	e7e4      	b.n	8015afe <_vfiprintf_r+0x1e6>
 8015b34:	08019269 	.word	0x08019269
 8015b38:	08019273 	.word	0x08019273
 8015b3c:	00000000 	.word	0x00000000
 8015b40:	080158f3 	.word	0x080158f3
 8015b44:	0801926f 	.word	0x0801926f

08015b48 <_printf_common>:
 8015b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b4c:	4616      	mov	r6, r2
 8015b4e:	4698      	mov	r8, r3
 8015b50:	688a      	ldr	r2, [r1, #8]
 8015b52:	690b      	ldr	r3, [r1, #16]
 8015b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	bfb8      	it	lt
 8015b5c:	4613      	movlt	r3, r2
 8015b5e:	6033      	str	r3, [r6, #0]
 8015b60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015b64:	4607      	mov	r7, r0
 8015b66:	460c      	mov	r4, r1
 8015b68:	b10a      	cbz	r2, 8015b6e <_printf_common+0x26>
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	6033      	str	r3, [r6, #0]
 8015b6e:	6823      	ldr	r3, [r4, #0]
 8015b70:	0699      	lsls	r1, r3, #26
 8015b72:	bf42      	ittt	mi
 8015b74:	6833      	ldrmi	r3, [r6, #0]
 8015b76:	3302      	addmi	r3, #2
 8015b78:	6033      	strmi	r3, [r6, #0]
 8015b7a:	6825      	ldr	r5, [r4, #0]
 8015b7c:	f015 0506 	ands.w	r5, r5, #6
 8015b80:	d106      	bne.n	8015b90 <_printf_common+0x48>
 8015b82:	f104 0a19 	add.w	sl, r4, #25
 8015b86:	68e3      	ldr	r3, [r4, #12]
 8015b88:	6832      	ldr	r2, [r6, #0]
 8015b8a:	1a9b      	subs	r3, r3, r2
 8015b8c:	42ab      	cmp	r3, r5
 8015b8e:	dc26      	bgt.n	8015bde <_printf_common+0x96>
 8015b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015b94:	6822      	ldr	r2, [r4, #0]
 8015b96:	3b00      	subs	r3, #0
 8015b98:	bf18      	it	ne
 8015b9a:	2301      	movne	r3, #1
 8015b9c:	0692      	lsls	r2, r2, #26
 8015b9e:	d42b      	bmi.n	8015bf8 <_printf_common+0xb0>
 8015ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ba4:	4641      	mov	r1, r8
 8015ba6:	4638      	mov	r0, r7
 8015ba8:	47c8      	blx	r9
 8015baa:	3001      	adds	r0, #1
 8015bac:	d01e      	beq.n	8015bec <_printf_common+0xa4>
 8015bae:	6823      	ldr	r3, [r4, #0]
 8015bb0:	6922      	ldr	r2, [r4, #16]
 8015bb2:	f003 0306 	and.w	r3, r3, #6
 8015bb6:	2b04      	cmp	r3, #4
 8015bb8:	bf02      	ittt	eq
 8015bba:	68e5      	ldreq	r5, [r4, #12]
 8015bbc:	6833      	ldreq	r3, [r6, #0]
 8015bbe:	1aed      	subeq	r5, r5, r3
 8015bc0:	68a3      	ldr	r3, [r4, #8]
 8015bc2:	bf0c      	ite	eq
 8015bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015bc8:	2500      	movne	r5, #0
 8015bca:	4293      	cmp	r3, r2
 8015bcc:	bfc4      	itt	gt
 8015bce:	1a9b      	subgt	r3, r3, r2
 8015bd0:	18ed      	addgt	r5, r5, r3
 8015bd2:	2600      	movs	r6, #0
 8015bd4:	341a      	adds	r4, #26
 8015bd6:	42b5      	cmp	r5, r6
 8015bd8:	d11a      	bne.n	8015c10 <_printf_common+0xc8>
 8015bda:	2000      	movs	r0, #0
 8015bdc:	e008      	b.n	8015bf0 <_printf_common+0xa8>
 8015bde:	2301      	movs	r3, #1
 8015be0:	4652      	mov	r2, sl
 8015be2:	4641      	mov	r1, r8
 8015be4:	4638      	mov	r0, r7
 8015be6:	47c8      	blx	r9
 8015be8:	3001      	adds	r0, #1
 8015bea:	d103      	bne.n	8015bf4 <_printf_common+0xac>
 8015bec:	f04f 30ff 	mov.w	r0, #4294967295
 8015bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bf4:	3501      	adds	r5, #1
 8015bf6:	e7c6      	b.n	8015b86 <_printf_common+0x3e>
 8015bf8:	18e1      	adds	r1, r4, r3
 8015bfa:	1c5a      	adds	r2, r3, #1
 8015bfc:	2030      	movs	r0, #48	@ 0x30
 8015bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015c02:	4422      	add	r2, r4
 8015c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015c08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015c0c:	3302      	adds	r3, #2
 8015c0e:	e7c7      	b.n	8015ba0 <_printf_common+0x58>
 8015c10:	2301      	movs	r3, #1
 8015c12:	4622      	mov	r2, r4
 8015c14:	4641      	mov	r1, r8
 8015c16:	4638      	mov	r0, r7
 8015c18:	47c8      	blx	r9
 8015c1a:	3001      	adds	r0, #1
 8015c1c:	d0e6      	beq.n	8015bec <_printf_common+0xa4>
 8015c1e:	3601      	adds	r6, #1
 8015c20:	e7d9      	b.n	8015bd6 <_printf_common+0x8e>
	...

08015c24 <_printf_i>:
 8015c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c28:	7e0f      	ldrb	r7, [r1, #24]
 8015c2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015c2c:	2f78      	cmp	r7, #120	@ 0x78
 8015c2e:	4691      	mov	r9, r2
 8015c30:	4680      	mov	r8, r0
 8015c32:	460c      	mov	r4, r1
 8015c34:	469a      	mov	sl, r3
 8015c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015c3a:	d807      	bhi.n	8015c4c <_printf_i+0x28>
 8015c3c:	2f62      	cmp	r7, #98	@ 0x62
 8015c3e:	d80a      	bhi.n	8015c56 <_printf_i+0x32>
 8015c40:	2f00      	cmp	r7, #0
 8015c42:	f000 80d1 	beq.w	8015de8 <_printf_i+0x1c4>
 8015c46:	2f58      	cmp	r7, #88	@ 0x58
 8015c48:	f000 80b8 	beq.w	8015dbc <_printf_i+0x198>
 8015c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015c54:	e03a      	b.n	8015ccc <_printf_i+0xa8>
 8015c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015c5a:	2b15      	cmp	r3, #21
 8015c5c:	d8f6      	bhi.n	8015c4c <_printf_i+0x28>
 8015c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8015c64 <_printf_i+0x40>)
 8015c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015c64:	08015cbd 	.word	0x08015cbd
 8015c68:	08015cd1 	.word	0x08015cd1
 8015c6c:	08015c4d 	.word	0x08015c4d
 8015c70:	08015c4d 	.word	0x08015c4d
 8015c74:	08015c4d 	.word	0x08015c4d
 8015c78:	08015c4d 	.word	0x08015c4d
 8015c7c:	08015cd1 	.word	0x08015cd1
 8015c80:	08015c4d 	.word	0x08015c4d
 8015c84:	08015c4d 	.word	0x08015c4d
 8015c88:	08015c4d 	.word	0x08015c4d
 8015c8c:	08015c4d 	.word	0x08015c4d
 8015c90:	08015dcf 	.word	0x08015dcf
 8015c94:	08015cfb 	.word	0x08015cfb
 8015c98:	08015d89 	.word	0x08015d89
 8015c9c:	08015c4d 	.word	0x08015c4d
 8015ca0:	08015c4d 	.word	0x08015c4d
 8015ca4:	08015df1 	.word	0x08015df1
 8015ca8:	08015c4d 	.word	0x08015c4d
 8015cac:	08015cfb 	.word	0x08015cfb
 8015cb0:	08015c4d 	.word	0x08015c4d
 8015cb4:	08015c4d 	.word	0x08015c4d
 8015cb8:	08015d91 	.word	0x08015d91
 8015cbc:	6833      	ldr	r3, [r6, #0]
 8015cbe:	1d1a      	adds	r2, r3, #4
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	6032      	str	r2, [r6, #0]
 8015cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015ccc:	2301      	movs	r3, #1
 8015cce:	e09c      	b.n	8015e0a <_printf_i+0x1e6>
 8015cd0:	6833      	ldr	r3, [r6, #0]
 8015cd2:	6820      	ldr	r0, [r4, #0]
 8015cd4:	1d19      	adds	r1, r3, #4
 8015cd6:	6031      	str	r1, [r6, #0]
 8015cd8:	0606      	lsls	r6, r0, #24
 8015cda:	d501      	bpl.n	8015ce0 <_printf_i+0xbc>
 8015cdc:	681d      	ldr	r5, [r3, #0]
 8015cde:	e003      	b.n	8015ce8 <_printf_i+0xc4>
 8015ce0:	0645      	lsls	r5, r0, #25
 8015ce2:	d5fb      	bpl.n	8015cdc <_printf_i+0xb8>
 8015ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015ce8:	2d00      	cmp	r5, #0
 8015cea:	da03      	bge.n	8015cf4 <_printf_i+0xd0>
 8015cec:	232d      	movs	r3, #45	@ 0x2d
 8015cee:	426d      	negs	r5, r5
 8015cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015cf4:	4858      	ldr	r0, [pc, #352]	@ (8015e58 <_printf_i+0x234>)
 8015cf6:	230a      	movs	r3, #10
 8015cf8:	e011      	b.n	8015d1e <_printf_i+0xfa>
 8015cfa:	6821      	ldr	r1, [r4, #0]
 8015cfc:	6833      	ldr	r3, [r6, #0]
 8015cfe:	0608      	lsls	r0, r1, #24
 8015d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8015d04:	d402      	bmi.n	8015d0c <_printf_i+0xe8>
 8015d06:	0649      	lsls	r1, r1, #25
 8015d08:	bf48      	it	mi
 8015d0a:	b2ad      	uxthmi	r5, r5
 8015d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8015d0e:	4852      	ldr	r0, [pc, #328]	@ (8015e58 <_printf_i+0x234>)
 8015d10:	6033      	str	r3, [r6, #0]
 8015d12:	bf14      	ite	ne
 8015d14:	230a      	movne	r3, #10
 8015d16:	2308      	moveq	r3, #8
 8015d18:	2100      	movs	r1, #0
 8015d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015d1e:	6866      	ldr	r6, [r4, #4]
 8015d20:	60a6      	str	r6, [r4, #8]
 8015d22:	2e00      	cmp	r6, #0
 8015d24:	db05      	blt.n	8015d32 <_printf_i+0x10e>
 8015d26:	6821      	ldr	r1, [r4, #0]
 8015d28:	432e      	orrs	r6, r5
 8015d2a:	f021 0104 	bic.w	r1, r1, #4
 8015d2e:	6021      	str	r1, [r4, #0]
 8015d30:	d04b      	beq.n	8015dca <_printf_i+0x1a6>
 8015d32:	4616      	mov	r6, r2
 8015d34:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d38:	fb03 5711 	mls	r7, r3, r1, r5
 8015d3c:	5dc7      	ldrb	r7, [r0, r7]
 8015d3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d42:	462f      	mov	r7, r5
 8015d44:	42bb      	cmp	r3, r7
 8015d46:	460d      	mov	r5, r1
 8015d48:	d9f4      	bls.n	8015d34 <_printf_i+0x110>
 8015d4a:	2b08      	cmp	r3, #8
 8015d4c:	d10b      	bne.n	8015d66 <_printf_i+0x142>
 8015d4e:	6823      	ldr	r3, [r4, #0]
 8015d50:	07df      	lsls	r7, r3, #31
 8015d52:	d508      	bpl.n	8015d66 <_printf_i+0x142>
 8015d54:	6923      	ldr	r3, [r4, #16]
 8015d56:	6861      	ldr	r1, [r4, #4]
 8015d58:	4299      	cmp	r1, r3
 8015d5a:	bfde      	ittt	le
 8015d5c:	2330      	movle	r3, #48	@ 0x30
 8015d5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015d66:	1b92      	subs	r2, r2, r6
 8015d68:	6122      	str	r2, [r4, #16]
 8015d6a:	f8cd a000 	str.w	sl, [sp]
 8015d6e:	464b      	mov	r3, r9
 8015d70:	aa03      	add	r2, sp, #12
 8015d72:	4621      	mov	r1, r4
 8015d74:	4640      	mov	r0, r8
 8015d76:	f7ff fee7 	bl	8015b48 <_printf_common>
 8015d7a:	3001      	adds	r0, #1
 8015d7c:	d14a      	bne.n	8015e14 <_printf_i+0x1f0>
 8015d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8015d82:	b004      	add	sp, #16
 8015d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d88:	6823      	ldr	r3, [r4, #0]
 8015d8a:	f043 0320 	orr.w	r3, r3, #32
 8015d8e:	6023      	str	r3, [r4, #0]
 8015d90:	4832      	ldr	r0, [pc, #200]	@ (8015e5c <_printf_i+0x238>)
 8015d92:	2778      	movs	r7, #120	@ 0x78
 8015d94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015d98:	6823      	ldr	r3, [r4, #0]
 8015d9a:	6831      	ldr	r1, [r6, #0]
 8015d9c:	061f      	lsls	r7, r3, #24
 8015d9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8015da2:	d402      	bmi.n	8015daa <_printf_i+0x186>
 8015da4:	065f      	lsls	r7, r3, #25
 8015da6:	bf48      	it	mi
 8015da8:	b2ad      	uxthmi	r5, r5
 8015daa:	6031      	str	r1, [r6, #0]
 8015dac:	07d9      	lsls	r1, r3, #31
 8015dae:	bf44      	itt	mi
 8015db0:	f043 0320 	orrmi.w	r3, r3, #32
 8015db4:	6023      	strmi	r3, [r4, #0]
 8015db6:	b11d      	cbz	r5, 8015dc0 <_printf_i+0x19c>
 8015db8:	2310      	movs	r3, #16
 8015dba:	e7ad      	b.n	8015d18 <_printf_i+0xf4>
 8015dbc:	4826      	ldr	r0, [pc, #152]	@ (8015e58 <_printf_i+0x234>)
 8015dbe:	e7e9      	b.n	8015d94 <_printf_i+0x170>
 8015dc0:	6823      	ldr	r3, [r4, #0]
 8015dc2:	f023 0320 	bic.w	r3, r3, #32
 8015dc6:	6023      	str	r3, [r4, #0]
 8015dc8:	e7f6      	b.n	8015db8 <_printf_i+0x194>
 8015dca:	4616      	mov	r6, r2
 8015dcc:	e7bd      	b.n	8015d4a <_printf_i+0x126>
 8015dce:	6833      	ldr	r3, [r6, #0]
 8015dd0:	6825      	ldr	r5, [r4, #0]
 8015dd2:	6961      	ldr	r1, [r4, #20]
 8015dd4:	1d18      	adds	r0, r3, #4
 8015dd6:	6030      	str	r0, [r6, #0]
 8015dd8:	062e      	lsls	r6, r5, #24
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	d501      	bpl.n	8015de2 <_printf_i+0x1be>
 8015dde:	6019      	str	r1, [r3, #0]
 8015de0:	e002      	b.n	8015de8 <_printf_i+0x1c4>
 8015de2:	0668      	lsls	r0, r5, #25
 8015de4:	d5fb      	bpl.n	8015dde <_printf_i+0x1ba>
 8015de6:	8019      	strh	r1, [r3, #0]
 8015de8:	2300      	movs	r3, #0
 8015dea:	6123      	str	r3, [r4, #16]
 8015dec:	4616      	mov	r6, r2
 8015dee:	e7bc      	b.n	8015d6a <_printf_i+0x146>
 8015df0:	6833      	ldr	r3, [r6, #0]
 8015df2:	1d1a      	adds	r2, r3, #4
 8015df4:	6032      	str	r2, [r6, #0]
 8015df6:	681e      	ldr	r6, [r3, #0]
 8015df8:	6862      	ldr	r2, [r4, #4]
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	f7ea fa1f 	bl	8000240 <memchr>
 8015e02:	b108      	cbz	r0, 8015e08 <_printf_i+0x1e4>
 8015e04:	1b80      	subs	r0, r0, r6
 8015e06:	6060      	str	r0, [r4, #4]
 8015e08:	6863      	ldr	r3, [r4, #4]
 8015e0a:	6123      	str	r3, [r4, #16]
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015e12:	e7aa      	b.n	8015d6a <_printf_i+0x146>
 8015e14:	6923      	ldr	r3, [r4, #16]
 8015e16:	4632      	mov	r2, r6
 8015e18:	4649      	mov	r1, r9
 8015e1a:	4640      	mov	r0, r8
 8015e1c:	47d0      	blx	sl
 8015e1e:	3001      	adds	r0, #1
 8015e20:	d0ad      	beq.n	8015d7e <_printf_i+0x15a>
 8015e22:	6823      	ldr	r3, [r4, #0]
 8015e24:	079b      	lsls	r3, r3, #30
 8015e26:	d413      	bmi.n	8015e50 <_printf_i+0x22c>
 8015e28:	68e0      	ldr	r0, [r4, #12]
 8015e2a:	9b03      	ldr	r3, [sp, #12]
 8015e2c:	4298      	cmp	r0, r3
 8015e2e:	bfb8      	it	lt
 8015e30:	4618      	movlt	r0, r3
 8015e32:	e7a6      	b.n	8015d82 <_printf_i+0x15e>
 8015e34:	2301      	movs	r3, #1
 8015e36:	4632      	mov	r2, r6
 8015e38:	4649      	mov	r1, r9
 8015e3a:	4640      	mov	r0, r8
 8015e3c:	47d0      	blx	sl
 8015e3e:	3001      	adds	r0, #1
 8015e40:	d09d      	beq.n	8015d7e <_printf_i+0x15a>
 8015e42:	3501      	adds	r5, #1
 8015e44:	68e3      	ldr	r3, [r4, #12]
 8015e46:	9903      	ldr	r1, [sp, #12]
 8015e48:	1a5b      	subs	r3, r3, r1
 8015e4a:	42ab      	cmp	r3, r5
 8015e4c:	dcf2      	bgt.n	8015e34 <_printf_i+0x210>
 8015e4e:	e7eb      	b.n	8015e28 <_printf_i+0x204>
 8015e50:	2500      	movs	r5, #0
 8015e52:	f104 0619 	add.w	r6, r4, #25
 8015e56:	e7f5      	b.n	8015e44 <_printf_i+0x220>
 8015e58:	0801927a 	.word	0x0801927a
 8015e5c:	0801928b 	.word	0x0801928b

08015e60 <__sflush_r>:
 8015e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e68:	0716      	lsls	r6, r2, #28
 8015e6a:	4605      	mov	r5, r0
 8015e6c:	460c      	mov	r4, r1
 8015e6e:	d454      	bmi.n	8015f1a <__sflush_r+0xba>
 8015e70:	684b      	ldr	r3, [r1, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	dc02      	bgt.n	8015e7c <__sflush_r+0x1c>
 8015e76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	dd48      	ble.n	8015f0e <__sflush_r+0xae>
 8015e7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015e7e:	2e00      	cmp	r6, #0
 8015e80:	d045      	beq.n	8015f0e <__sflush_r+0xae>
 8015e82:	2300      	movs	r3, #0
 8015e84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015e88:	682f      	ldr	r7, [r5, #0]
 8015e8a:	6a21      	ldr	r1, [r4, #32]
 8015e8c:	602b      	str	r3, [r5, #0]
 8015e8e:	d030      	beq.n	8015ef2 <__sflush_r+0x92>
 8015e90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015e92:	89a3      	ldrh	r3, [r4, #12]
 8015e94:	0759      	lsls	r1, r3, #29
 8015e96:	d505      	bpl.n	8015ea4 <__sflush_r+0x44>
 8015e98:	6863      	ldr	r3, [r4, #4]
 8015e9a:	1ad2      	subs	r2, r2, r3
 8015e9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015e9e:	b10b      	cbz	r3, 8015ea4 <__sflush_r+0x44>
 8015ea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015ea2:	1ad2      	subs	r2, r2, r3
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015ea8:	6a21      	ldr	r1, [r4, #32]
 8015eaa:	4628      	mov	r0, r5
 8015eac:	47b0      	blx	r6
 8015eae:	1c43      	adds	r3, r0, #1
 8015eb0:	89a3      	ldrh	r3, [r4, #12]
 8015eb2:	d106      	bne.n	8015ec2 <__sflush_r+0x62>
 8015eb4:	6829      	ldr	r1, [r5, #0]
 8015eb6:	291d      	cmp	r1, #29
 8015eb8:	d82b      	bhi.n	8015f12 <__sflush_r+0xb2>
 8015eba:	4a2a      	ldr	r2, [pc, #168]	@ (8015f64 <__sflush_r+0x104>)
 8015ebc:	40ca      	lsrs	r2, r1
 8015ebe:	07d6      	lsls	r6, r2, #31
 8015ec0:	d527      	bpl.n	8015f12 <__sflush_r+0xb2>
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	6062      	str	r2, [r4, #4]
 8015ec6:	04d9      	lsls	r1, r3, #19
 8015ec8:	6922      	ldr	r2, [r4, #16]
 8015eca:	6022      	str	r2, [r4, #0]
 8015ecc:	d504      	bpl.n	8015ed8 <__sflush_r+0x78>
 8015ece:	1c42      	adds	r2, r0, #1
 8015ed0:	d101      	bne.n	8015ed6 <__sflush_r+0x76>
 8015ed2:	682b      	ldr	r3, [r5, #0]
 8015ed4:	b903      	cbnz	r3, 8015ed8 <__sflush_r+0x78>
 8015ed6:	6560      	str	r0, [r4, #84]	@ 0x54
 8015ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015eda:	602f      	str	r7, [r5, #0]
 8015edc:	b1b9      	cbz	r1, 8015f0e <__sflush_r+0xae>
 8015ede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015ee2:	4299      	cmp	r1, r3
 8015ee4:	d002      	beq.n	8015eec <__sflush_r+0x8c>
 8015ee6:	4628      	mov	r0, r5
 8015ee8:	f7ff fbec 	bl	80156c4 <_free_r>
 8015eec:	2300      	movs	r3, #0
 8015eee:	6363      	str	r3, [r4, #52]	@ 0x34
 8015ef0:	e00d      	b.n	8015f0e <__sflush_r+0xae>
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	4628      	mov	r0, r5
 8015ef6:	47b0      	blx	r6
 8015ef8:	4602      	mov	r2, r0
 8015efa:	1c50      	adds	r0, r2, #1
 8015efc:	d1c9      	bne.n	8015e92 <__sflush_r+0x32>
 8015efe:	682b      	ldr	r3, [r5, #0]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d0c6      	beq.n	8015e92 <__sflush_r+0x32>
 8015f04:	2b1d      	cmp	r3, #29
 8015f06:	d001      	beq.n	8015f0c <__sflush_r+0xac>
 8015f08:	2b16      	cmp	r3, #22
 8015f0a:	d11e      	bne.n	8015f4a <__sflush_r+0xea>
 8015f0c:	602f      	str	r7, [r5, #0]
 8015f0e:	2000      	movs	r0, #0
 8015f10:	e022      	b.n	8015f58 <__sflush_r+0xf8>
 8015f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f16:	b21b      	sxth	r3, r3
 8015f18:	e01b      	b.n	8015f52 <__sflush_r+0xf2>
 8015f1a:	690f      	ldr	r7, [r1, #16]
 8015f1c:	2f00      	cmp	r7, #0
 8015f1e:	d0f6      	beq.n	8015f0e <__sflush_r+0xae>
 8015f20:	0793      	lsls	r3, r2, #30
 8015f22:	680e      	ldr	r6, [r1, #0]
 8015f24:	bf08      	it	eq
 8015f26:	694b      	ldreq	r3, [r1, #20]
 8015f28:	600f      	str	r7, [r1, #0]
 8015f2a:	bf18      	it	ne
 8015f2c:	2300      	movne	r3, #0
 8015f2e:	eba6 0807 	sub.w	r8, r6, r7
 8015f32:	608b      	str	r3, [r1, #8]
 8015f34:	f1b8 0f00 	cmp.w	r8, #0
 8015f38:	dde9      	ble.n	8015f0e <__sflush_r+0xae>
 8015f3a:	6a21      	ldr	r1, [r4, #32]
 8015f3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015f3e:	4643      	mov	r3, r8
 8015f40:	463a      	mov	r2, r7
 8015f42:	4628      	mov	r0, r5
 8015f44:	47b0      	blx	r6
 8015f46:	2800      	cmp	r0, #0
 8015f48:	dc08      	bgt.n	8015f5c <__sflush_r+0xfc>
 8015f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f52:	81a3      	strh	r3, [r4, #12]
 8015f54:	f04f 30ff 	mov.w	r0, #4294967295
 8015f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f5c:	4407      	add	r7, r0
 8015f5e:	eba8 0800 	sub.w	r8, r8, r0
 8015f62:	e7e7      	b.n	8015f34 <__sflush_r+0xd4>
 8015f64:	20400001 	.word	0x20400001

08015f68 <_fflush_r>:
 8015f68:	b538      	push	{r3, r4, r5, lr}
 8015f6a:	690b      	ldr	r3, [r1, #16]
 8015f6c:	4605      	mov	r5, r0
 8015f6e:	460c      	mov	r4, r1
 8015f70:	b913      	cbnz	r3, 8015f78 <_fflush_r+0x10>
 8015f72:	2500      	movs	r5, #0
 8015f74:	4628      	mov	r0, r5
 8015f76:	bd38      	pop	{r3, r4, r5, pc}
 8015f78:	b118      	cbz	r0, 8015f82 <_fflush_r+0x1a>
 8015f7a:	6a03      	ldr	r3, [r0, #32]
 8015f7c:	b90b      	cbnz	r3, 8015f82 <_fflush_r+0x1a>
 8015f7e:	f7ff fa05 	bl	801538c <__sinit>
 8015f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d0f3      	beq.n	8015f72 <_fflush_r+0xa>
 8015f8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015f8c:	07d0      	lsls	r0, r2, #31
 8015f8e:	d404      	bmi.n	8015f9a <_fflush_r+0x32>
 8015f90:	0599      	lsls	r1, r3, #22
 8015f92:	d402      	bmi.n	8015f9a <_fflush_r+0x32>
 8015f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015f96:	f7ff fb66 	bl	8015666 <__retarget_lock_acquire_recursive>
 8015f9a:	4628      	mov	r0, r5
 8015f9c:	4621      	mov	r1, r4
 8015f9e:	f7ff ff5f 	bl	8015e60 <__sflush_r>
 8015fa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015fa4:	07da      	lsls	r2, r3, #31
 8015fa6:	4605      	mov	r5, r0
 8015fa8:	d4e4      	bmi.n	8015f74 <_fflush_r+0xc>
 8015faa:	89a3      	ldrh	r3, [r4, #12]
 8015fac:	059b      	lsls	r3, r3, #22
 8015fae:	d4e1      	bmi.n	8015f74 <_fflush_r+0xc>
 8015fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015fb2:	f7ff fb59 	bl	8015668 <__retarget_lock_release_recursive>
 8015fb6:	e7dd      	b.n	8015f74 <_fflush_r+0xc>

08015fb8 <fiprintf>:
 8015fb8:	b40e      	push	{r1, r2, r3}
 8015fba:	b503      	push	{r0, r1, lr}
 8015fbc:	4601      	mov	r1, r0
 8015fbe:	ab03      	add	r3, sp, #12
 8015fc0:	4805      	ldr	r0, [pc, #20]	@ (8015fd8 <fiprintf+0x20>)
 8015fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fc6:	6800      	ldr	r0, [r0, #0]
 8015fc8:	9301      	str	r3, [sp, #4]
 8015fca:	f7ff fca5 	bl	8015918 <_vfiprintf_r>
 8015fce:	b002      	add	sp, #8
 8015fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fd4:	b003      	add	sp, #12
 8015fd6:	4770      	bx	lr
 8015fd8:	20000040 	.word	0x20000040

08015fdc <__swbuf_r>:
 8015fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fde:	460e      	mov	r6, r1
 8015fe0:	4614      	mov	r4, r2
 8015fe2:	4605      	mov	r5, r0
 8015fe4:	b118      	cbz	r0, 8015fee <__swbuf_r+0x12>
 8015fe6:	6a03      	ldr	r3, [r0, #32]
 8015fe8:	b90b      	cbnz	r3, 8015fee <__swbuf_r+0x12>
 8015fea:	f7ff f9cf 	bl	801538c <__sinit>
 8015fee:	69a3      	ldr	r3, [r4, #24]
 8015ff0:	60a3      	str	r3, [r4, #8]
 8015ff2:	89a3      	ldrh	r3, [r4, #12]
 8015ff4:	071a      	lsls	r2, r3, #28
 8015ff6:	d501      	bpl.n	8015ffc <__swbuf_r+0x20>
 8015ff8:	6923      	ldr	r3, [r4, #16]
 8015ffa:	b943      	cbnz	r3, 801600e <__swbuf_r+0x32>
 8015ffc:	4621      	mov	r1, r4
 8015ffe:	4628      	mov	r0, r5
 8016000:	f000 f82a 	bl	8016058 <__swsetup_r>
 8016004:	b118      	cbz	r0, 801600e <__swbuf_r+0x32>
 8016006:	f04f 37ff 	mov.w	r7, #4294967295
 801600a:	4638      	mov	r0, r7
 801600c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801600e:	6823      	ldr	r3, [r4, #0]
 8016010:	6922      	ldr	r2, [r4, #16]
 8016012:	1a98      	subs	r0, r3, r2
 8016014:	6963      	ldr	r3, [r4, #20]
 8016016:	b2f6      	uxtb	r6, r6
 8016018:	4283      	cmp	r3, r0
 801601a:	4637      	mov	r7, r6
 801601c:	dc05      	bgt.n	801602a <__swbuf_r+0x4e>
 801601e:	4621      	mov	r1, r4
 8016020:	4628      	mov	r0, r5
 8016022:	f7ff ffa1 	bl	8015f68 <_fflush_r>
 8016026:	2800      	cmp	r0, #0
 8016028:	d1ed      	bne.n	8016006 <__swbuf_r+0x2a>
 801602a:	68a3      	ldr	r3, [r4, #8]
 801602c:	3b01      	subs	r3, #1
 801602e:	60a3      	str	r3, [r4, #8]
 8016030:	6823      	ldr	r3, [r4, #0]
 8016032:	1c5a      	adds	r2, r3, #1
 8016034:	6022      	str	r2, [r4, #0]
 8016036:	701e      	strb	r6, [r3, #0]
 8016038:	6962      	ldr	r2, [r4, #20]
 801603a:	1c43      	adds	r3, r0, #1
 801603c:	429a      	cmp	r2, r3
 801603e:	d004      	beq.n	801604a <__swbuf_r+0x6e>
 8016040:	89a3      	ldrh	r3, [r4, #12]
 8016042:	07db      	lsls	r3, r3, #31
 8016044:	d5e1      	bpl.n	801600a <__swbuf_r+0x2e>
 8016046:	2e0a      	cmp	r6, #10
 8016048:	d1df      	bne.n	801600a <__swbuf_r+0x2e>
 801604a:	4621      	mov	r1, r4
 801604c:	4628      	mov	r0, r5
 801604e:	f7ff ff8b 	bl	8015f68 <_fflush_r>
 8016052:	2800      	cmp	r0, #0
 8016054:	d0d9      	beq.n	801600a <__swbuf_r+0x2e>
 8016056:	e7d6      	b.n	8016006 <__swbuf_r+0x2a>

08016058 <__swsetup_r>:
 8016058:	b538      	push	{r3, r4, r5, lr}
 801605a:	4b29      	ldr	r3, [pc, #164]	@ (8016100 <__swsetup_r+0xa8>)
 801605c:	4605      	mov	r5, r0
 801605e:	6818      	ldr	r0, [r3, #0]
 8016060:	460c      	mov	r4, r1
 8016062:	b118      	cbz	r0, 801606c <__swsetup_r+0x14>
 8016064:	6a03      	ldr	r3, [r0, #32]
 8016066:	b90b      	cbnz	r3, 801606c <__swsetup_r+0x14>
 8016068:	f7ff f990 	bl	801538c <__sinit>
 801606c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016070:	0719      	lsls	r1, r3, #28
 8016072:	d422      	bmi.n	80160ba <__swsetup_r+0x62>
 8016074:	06da      	lsls	r2, r3, #27
 8016076:	d407      	bmi.n	8016088 <__swsetup_r+0x30>
 8016078:	2209      	movs	r2, #9
 801607a:	602a      	str	r2, [r5, #0]
 801607c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016080:	81a3      	strh	r3, [r4, #12]
 8016082:	f04f 30ff 	mov.w	r0, #4294967295
 8016086:	e033      	b.n	80160f0 <__swsetup_r+0x98>
 8016088:	0758      	lsls	r0, r3, #29
 801608a:	d512      	bpl.n	80160b2 <__swsetup_r+0x5a>
 801608c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801608e:	b141      	cbz	r1, 80160a2 <__swsetup_r+0x4a>
 8016090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016094:	4299      	cmp	r1, r3
 8016096:	d002      	beq.n	801609e <__swsetup_r+0x46>
 8016098:	4628      	mov	r0, r5
 801609a:	f7ff fb13 	bl	80156c4 <_free_r>
 801609e:	2300      	movs	r3, #0
 80160a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80160a2:	89a3      	ldrh	r3, [r4, #12]
 80160a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80160a8:	81a3      	strh	r3, [r4, #12]
 80160aa:	2300      	movs	r3, #0
 80160ac:	6063      	str	r3, [r4, #4]
 80160ae:	6923      	ldr	r3, [r4, #16]
 80160b0:	6023      	str	r3, [r4, #0]
 80160b2:	89a3      	ldrh	r3, [r4, #12]
 80160b4:	f043 0308 	orr.w	r3, r3, #8
 80160b8:	81a3      	strh	r3, [r4, #12]
 80160ba:	6923      	ldr	r3, [r4, #16]
 80160bc:	b94b      	cbnz	r3, 80160d2 <__swsetup_r+0x7a>
 80160be:	89a3      	ldrh	r3, [r4, #12]
 80160c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80160c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80160c8:	d003      	beq.n	80160d2 <__swsetup_r+0x7a>
 80160ca:	4621      	mov	r1, r4
 80160cc:	4628      	mov	r0, r5
 80160ce:	f000 f856 	bl	801617e <__smakebuf_r>
 80160d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160d6:	f013 0201 	ands.w	r2, r3, #1
 80160da:	d00a      	beq.n	80160f2 <__swsetup_r+0x9a>
 80160dc:	2200      	movs	r2, #0
 80160de:	60a2      	str	r2, [r4, #8]
 80160e0:	6962      	ldr	r2, [r4, #20]
 80160e2:	4252      	negs	r2, r2
 80160e4:	61a2      	str	r2, [r4, #24]
 80160e6:	6922      	ldr	r2, [r4, #16]
 80160e8:	b942      	cbnz	r2, 80160fc <__swsetup_r+0xa4>
 80160ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80160ee:	d1c5      	bne.n	801607c <__swsetup_r+0x24>
 80160f0:	bd38      	pop	{r3, r4, r5, pc}
 80160f2:	0799      	lsls	r1, r3, #30
 80160f4:	bf58      	it	pl
 80160f6:	6962      	ldrpl	r2, [r4, #20]
 80160f8:	60a2      	str	r2, [r4, #8]
 80160fa:	e7f4      	b.n	80160e6 <__swsetup_r+0x8e>
 80160fc:	2000      	movs	r0, #0
 80160fe:	e7f7      	b.n	80160f0 <__swsetup_r+0x98>
 8016100:	20000040 	.word	0x20000040

08016104 <_sbrk_r>:
 8016104:	b538      	push	{r3, r4, r5, lr}
 8016106:	4d06      	ldr	r5, [pc, #24]	@ (8016120 <_sbrk_r+0x1c>)
 8016108:	2300      	movs	r3, #0
 801610a:	4604      	mov	r4, r0
 801610c:	4608      	mov	r0, r1
 801610e:	602b      	str	r3, [r5, #0]
 8016110:	f7eb f8c0 	bl	8001294 <_sbrk>
 8016114:	1c43      	adds	r3, r0, #1
 8016116:	d102      	bne.n	801611e <_sbrk_r+0x1a>
 8016118:	682b      	ldr	r3, [r5, #0]
 801611a:	b103      	cbz	r3, 801611e <_sbrk_r+0x1a>
 801611c:	6023      	str	r3, [r4, #0]
 801611e:	bd38      	pop	{r3, r4, r5, pc}
 8016120:	2000d390 	.word	0x2000d390

08016124 <abort>:
 8016124:	b508      	push	{r3, lr}
 8016126:	2006      	movs	r0, #6
 8016128:	f000 f88e 	bl	8016248 <raise>
 801612c:	2001      	movs	r0, #1
 801612e:	f7eb f839 	bl	80011a4 <_exit>

08016132 <__swhatbuf_r>:
 8016132:	b570      	push	{r4, r5, r6, lr}
 8016134:	460c      	mov	r4, r1
 8016136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801613a:	2900      	cmp	r1, #0
 801613c:	b096      	sub	sp, #88	@ 0x58
 801613e:	4615      	mov	r5, r2
 8016140:	461e      	mov	r6, r3
 8016142:	da0d      	bge.n	8016160 <__swhatbuf_r+0x2e>
 8016144:	89a3      	ldrh	r3, [r4, #12]
 8016146:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801614a:	f04f 0100 	mov.w	r1, #0
 801614e:	bf14      	ite	ne
 8016150:	2340      	movne	r3, #64	@ 0x40
 8016152:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016156:	2000      	movs	r0, #0
 8016158:	6031      	str	r1, [r6, #0]
 801615a:	602b      	str	r3, [r5, #0]
 801615c:	b016      	add	sp, #88	@ 0x58
 801615e:	bd70      	pop	{r4, r5, r6, pc}
 8016160:	466a      	mov	r2, sp
 8016162:	f000 f879 	bl	8016258 <_fstat_r>
 8016166:	2800      	cmp	r0, #0
 8016168:	dbec      	blt.n	8016144 <__swhatbuf_r+0x12>
 801616a:	9901      	ldr	r1, [sp, #4]
 801616c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016170:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016174:	4259      	negs	r1, r3
 8016176:	4159      	adcs	r1, r3
 8016178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801617c:	e7eb      	b.n	8016156 <__swhatbuf_r+0x24>

0801617e <__smakebuf_r>:
 801617e:	898b      	ldrh	r3, [r1, #12]
 8016180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016182:	079d      	lsls	r5, r3, #30
 8016184:	4606      	mov	r6, r0
 8016186:	460c      	mov	r4, r1
 8016188:	d507      	bpl.n	801619a <__smakebuf_r+0x1c>
 801618a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801618e:	6023      	str	r3, [r4, #0]
 8016190:	6123      	str	r3, [r4, #16]
 8016192:	2301      	movs	r3, #1
 8016194:	6163      	str	r3, [r4, #20]
 8016196:	b003      	add	sp, #12
 8016198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801619a:	ab01      	add	r3, sp, #4
 801619c:	466a      	mov	r2, sp
 801619e:	f7ff ffc8 	bl	8016132 <__swhatbuf_r>
 80161a2:	9f00      	ldr	r7, [sp, #0]
 80161a4:	4605      	mov	r5, r0
 80161a6:	4639      	mov	r1, r7
 80161a8:	4630      	mov	r0, r6
 80161aa:	f7ff faff 	bl	80157ac <_malloc_r>
 80161ae:	b948      	cbnz	r0, 80161c4 <__smakebuf_r+0x46>
 80161b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161b4:	059a      	lsls	r2, r3, #22
 80161b6:	d4ee      	bmi.n	8016196 <__smakebuf_r+0x18>
 80161b8:	f023 0303 	bic.w	r3, r3, #3
 80161bc:	f043 0302 	orr.w	r3, r3, #2
 80161c0:	81a3      	strh	r3, [r4, #12]
 80161c2:	e7e2      	b.n	801618a <__smakebuf_r+0xc>
 80161c4:	89a3      	ldrh	r3, [r4, #12]
 80161c6:	6020      	str	r0, [r4, #0]
 80161c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80161cc:	81a3      	strh	r3, [r4, #12]
 80161ce:	9b01      	ldr	r3, [sp, #4]
 80161d0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80161d4:	b15b      	cbz	r3, 80161ee <__smakebuf_r+0x70>
 80161d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161da:	4630      	mov	r0, r6
 80161dc:	f000 f84e 	bl	801627c <_isatty_r>
 80161e0:	b128      	cbz	r0, 80161ee <__smakebuf_r+0x70>
 80161e2:	89a3      	ldrh	r3, [r4, #12]
 80161e4:	f023 0303 	bic.w	r3, r3, #3
 80161e8:	f043 0301 	orr.w	r3, r3, #1
 80161ec:	81a3      	strh	r3, [r4, #12]
 80161ee:	89a3      	ldrh	r3, [r4, #12]
 80161f0:	431d      	orrs	r5, r3
 80161f2:	81a5      	strh	r5, [r4, #12]
 80161f4:	e7cf      	b.n	8016196 <__smakebuf_r+0x18>

080161f6 <_raise_r>:
 80161f6:	291f      	cmp	r1, #31
 80161f8:	b538      	push	{r3, r4, r5, lr}
 80161fa:	4605      	mov	r5, r0
 80161fc:	460c      	mov	r4, r1
 80161fe:	d904      	bls.n	801620a <_raise_r+0x14>
 8016200:	2316      	movs	r3, #22
 8016202:	6003      	str	r3, [r0, #0]
 8016204:	f04f 30ff 	mov.w	r0, #4294967295
 8016208:	bd38      	pop	{r3, r4, r5, pc}
 801620a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801620c:	b112      	cbz	r2, 8016214 <_raise_r+0x1e>
 801620e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016212:	b94b      	cbnz	r3, 8016228 <_raise_r+0x32>
 8016214:	4628      	mov	r0, r5
 8016216:	f000 f853 	bl	80162c0 <_getpid_r>
 801621a:	4622      	mov	r2, r4
 801621c:	4601      	mov	r1, r0
 801621e:	4628      	mov	r0, r5
 8016220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016224:	f000 b83a 	b.w	801629c <_kill_r>
 8016228:	2b01      	cmp	r3, #1
 801622a:	d00a      	beq.n	8016242 <_raise_r+0x4c>
 801622c:	1c59      	adds	r1, r3, #1
 801622e:	d103      	bne.n	8016238 <_raise_r+0x42>
 8016230:	2316      	movs	r3, #22
 8016232:	6003      	str	r3, [r0, #0]
 8016234:	2001      	movs	r0, #1
 8016236:	e7e7      	b.n	8016208 <_raise_r+0x12>
 8016238:	2100      	movs	r1, #0
 801623a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801623e:	4620      	mov	r0, r4
 8016240:	4798      	blx	r3
 8016242:	2000      	movs	r0, #0
 8016244:	e7e0      	b.n	8016208 <_raise_r+0x12>
	...

08016248 <raise>:
 8016248:	4b02      	ldr	r3, [pc, #8]	@ (8016254 <raise+0xc>)
 801624a:	4601      	mov	r1, r0
 801624c:	6818      	ldr	r0, [r3, #0]
 801624e:	f7ff bfd2 	b.w	80161f6 <_raise_r>
 8016252:	bf00      	nop
 8016254:	20000040 	.word	0x20000040

08016258 <_fstat_r>:
 8016258:	b538      	push	{r3, r4, r5, lr}
 801625a:	4d07      	ldr	r5, [pc, #28]	@ (8016278 <_fstat_r+0x20>)
 801625c:	2300      	movs	r3, #0
 801625e:	4604      	mov	r4, r0
 8016260:	4608      	mov	r0, r1
 8016262:	4611      	mov	r1, r2
 8016264:	602b      	str	r3, [r5, #0]
 8016266:	f7ea ffed 	bl	8001244 <_fstat>
 801626a:	1c43      	adds	r3, r0, #1
 801626c:	d102      	bne.n	8016274 <_fstat_r+0x1c>
 801626e:	682b      	ldr	r3, [r5, #0]
 8016270:	b103      	cbz	r3, 8016274 <_fstat_r+0x1c>
 8016272:	6023      	str	r3, [r4, #0]
 8016274:	bd38      	pop	{r3, r4, r5, pc}
 8016276:	bf00      	nop
 8016278:	2000d390 	.word	0x2000d390

0801627c <_isatty_r>:
 801627c:	b538      	push	{r3, r4, r5, lr}
 801627e:	4d06      	ldr	r5, [pc, #24]	@ (8016298 <_isatty_r+0x1c>)
 8016280:	2300      	movs	r3, #0
 8016282:	4604      	mov	r4, r0
 8016284:	4608      	mov	r0, r1
 8016286:	602b      	str	r3, [r5, #0]
 8016288:	f7ea ffec 	bl	8001264 <_isatty>
 801628c:	1c43      	adds	r3, r0, #1
 801628e:	d102      	bne.n	8016296 <_isatty_r+0x1a>
 8016290:	682b      	ldr	r3, [r5, #0]
 8016292:	b103      	cbz	r3, 8016296 <_isatty_r+0x1a>
 8016294:	6023      	str	r3, [r4, #0]
 8016296:	bd38      	pop	{r3, r4, r5, pc}
 8016298:	2000d390 	.word	0x2000d390

0801629c <_kill_r>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	4d07      	ldr	r5, [pc, #28]	@ (80162bc <_kill_r+0x20>)
 80162a0:	2300      	movs	r3, #0
 80162a2:	4604      	mov	r4, r0
 80162a4:	4608      	mov	r0, r1
 80162a6:	4611      	mov	r1, r2
 80162a8:	602b      	str	r3, [r5, #0]
 80162aa:	f7ea ff69 	bl	8001180 <_kill>
 80162ae:	1c43      	adds	r3, r0, #1
 80162b0:	d102      	bne.n	80162b8 <_kill_r+0x1c>
 80162b2:	682b      	ldr	r3, [r5, #0]
 80162b4:	b103      	cbz	r3, 80162b8 <_kill_r+0x1c>
 80162b6:	6023      	str	r3, [r4, #0]
 80162b8:	bd38      	pop	{r3, r4, r5, pc}
 80162ba:	bf00      	nop
 80162bc:	2000d390 	.word	0x2000d390

080162c0 <_getpid_r>:
 80162c0:	f7ea bf56 	b.w	8001170 <_getpid>

080162c4 <_init>:
 80162c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162c6:	bf00      	nop
 80162c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162ca:	bc08      	pop	{r3}
 80162cc:	469e      	mov	lr, r3
 80162ce:	4770      	bx	lr

080162d0 <_fini>:
 80162d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162d2:	bf00      	nop
 80162d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162d6:	bc08      	pop	{r3}
 80162d8:	469e      	mov	lr, r3
 80162da:	4770      	bx	lr
