
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080088a4  080088a4  000098a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008904  08008904  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008904  08008904  00009904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800890c  0800890c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800890c  0800890c  0000990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008910  08008910  00009910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008914  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000591c  20000060  08008974  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000597c  08008974  0000a97c  2**0
                  ALLOC
 11 .lwip_sec     00000140  2007c000  2007c000  0000b000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a2e6  00000000  00000000  0000a08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dae  00000000  00000000  00034374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  00039128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017f3  00000000  00000000  0003aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bab6  00000000  00000000  0003c7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023644  00000000  00000000  00068299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118351  00000000  00000000  0008b8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a3c2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008630  00000000  00000000  001a3c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001ac2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800888c 	.word	0x0800888c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800888c 	.word	0x0800888c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <AppMain>:
#include "app_main.h"
#include "main.h"
#include "lcd.h"


void AppMain(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

	//FreeRTOS_IPInit();

	//test LCD
	lcd_4SPI_init();
 8000570:	f000 f8f0 	bl	8000754 <lcd_4SPI_init>
	setPageaddressing();
 8000574:	f000 f85e 	bl	8000634 <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 f871 	bl	8000660 <lcd_setpage_address>
	lcd_setcolumn_address(32);
 800057e:	2020      	movs	r0, #32
 8000580:	f000 f888 	bl	8000694 <lcd_setcolumn_address>

	while(1){

		onLCD();
 8000584:	f000 f82a 	bl	80005dc <onLCD>
		clearLCD();
 8000588:	f000 f8fe 	bl	8000788 <clearLCD>
		lcd_printHELLO();
 800058c:	f000 f934 	bl	80007f8 <lcd_printHELLO>
		offLCD();
 8000590:	f000 f83a 	bl	8000608 <offLCD>
		onLCD();
 8000594:	bf00      	nop
 8000596:	e7f5      	b.n	8000584 <AppMain+0x18>

08000598 <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	@ 0x40
 80005a6:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <lcd_transfer+0x3c>)
 80005a8:	f001 ff34 	bl	8002414 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80005ac:	1df9      	adds	r1, r7, #7
 80005ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b2:	2201      	movs	r2, #1
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <lcd_transfer+0x40>)
 80005b6:	f003 fae4 	bl	8003b82 <HAL_SPI_Transmit>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2140      	movs	r1, #64	@ 0x40
 80005c2:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <lcd_transfer+0x3c>)
 80005c4:	f001 ff26 	bl	8002414 <HAL_GPIO_WritePin>

	return HAL_OK;
 80005c8:	2300      	movs	r3, #0

}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020c00 	.word	0x40020c00
 80005d8:	20000174 	.word	0x20000174

080005dc <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 80005e2:	23af      	movs	r3, #175	@ 0xaf
 80005e4:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <onLCD+0x28>)
 80005ec:	f001 ff12 	bl	8002414 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffd0 	bl	8000598 <lcd_transfer>
 80005f8:	4603      	mov	r3, r0

}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020c00 	.word	0x40020c00

08000608 <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 800060e:	23ae      	movs	r3, #174	@ 0xae
 8000610:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <offLCD+0x28>)
 8000618:	f001 fefc 	bl	8002414 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffba 	bl	8000598 <lcd_transfer>
 8000624:	4603      	mov	r3, r0
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020c00 	.word	0x40020c00

08000634 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 800063a:	2320      	movs	r3, #32
 800063c:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	4806      	ldr	r0, [pc, #24]	@ (800065c <setPageaddressing+0x28>)
 8000644:	f001 fee6 	bl	8002414 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffa4 	bl	8000598 <lcd_transfer>
 8000650:	4603      	mov	r3, r0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020c00 	.word	0x40020c00

08000660 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000672:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	4805      	ldr	r0, [pc, #20]	@ (8000690 <lcd_setpage_address+0x30>)
 800067a:	f001 fecb 	bl	8002414 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff89 	bl	8000598 <lcd_transfer>
 8000686:	4603      	mov	r3, r0
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b7f      	cmp	r3, #127	@ 0x7f
 80006a0:	dc02      	bgt.n	80006a8 <lcd_setcolumn_address+0x14>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da01      	bge.n	80006ac <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e030      	b.n	800070e <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 80006b0:	2310      	movs	r3, #16
 80006b2:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 80006b4:	2300      	movs	r3, #0
 80006b6:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	091b      	lsrs	r3, r3, #4
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	b25a      	sxtb	r2, r3
 80006c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 80006ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	b25a      	sxtb	r2, r3
 80006d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006d8:	4313      	orrs	r3, r2
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <lcd_setcolumn_address+0x84>)
 80006e4:	f001 fe96 	bl	8002414 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff54 	bl	8000598 <lcd_transfer>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e009      	b.n	800070e <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 80006fa:	7b7b      	ldrb	r3, [r7, #13]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff4b 	bl	8000598 <lcd_transfer>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	e000      	b.n	800070e <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020c00 	.word	0x40020c00

0800071c <lcd_writeRAM>:

HAL_StatusTypeDef lcd_writeRAM(uint8_t data){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	//pull A0 high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	2180      	movs	r1, #128	@ 0x80
 800072a:	4809      	ldr	r0, [pc, #36]	@ (8000750 <lcd_writeRAM+0x34>)
 800072c:	f001 fe72 	bl	8002414 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef status = lcd_transfer(data);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff30 	bl	8000598 <lcd_transfer>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <lcd_writeRAM+0x34>)
 8000742:	f001 fe67 	bl	8002414 <HAL_GPIO_WritePin>

	return status;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020c00 	.word	0x40020c00

08000754 <lcd_4SPI_init>:

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2140      	movs	r1, #64	@ 0x40
 800075c:	4808      	ldr	r0, [pc, #32]	@ (8000780 <lcd_4SPI_init+0x2c>)
 800075e:	f001 fe59 	bl	8002414 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2101      	movs	r1, #1
 8000766:	4807      	ldr	r0, [pc, #28]	@ (8000784 <lcd_4SPI_init+0x30>)
 8000768:	f001 fe54 	bl	8002414 <HAL_GPIO_WritePin>

	//dummy transmission for SPI

	onLCD();
 800076c:	f7ff ff36 	bl	80005dc <onLCD>
	offLCD();
 8000770:	f7ff ff4a 	bl	8000608 <offLCD>

	//this is the column where the lcd starts
	lcd_setcolumn_address(32);
 8000774:	2020      	movs	r0, #32
 8000776:	f7ff ff8d 	bl	8000694 <lcd_setcolumn_address>

	return HAL_OK;
 800077a:	2300      	movs	r3, #0

}
 800077c:	4618      	mov	r0, r3
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40020c00 	.word	0x40020c00
 8000784:	40020800 	.word	0x40020800

08000788 <clearLCD>:

//set the entirety of the screen to 0, wiping the screen.
HAL_StatusTypeDef  clearLCD(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

	int errors = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]

	for(int a = 0; a < 16; a++){
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	e022      	b.n	80007de <clearLCD+0x56>
		lcd_setpage_address(a);
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f7ff ff61 	bl	8000660 <lcd_setpage_address>
		lcd_setcolumn_address(0);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff78 	bl	8000694 <lcd_setcolumn_address>

		for(int i = 0; i < 128; i++){
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	e013      	b.n	80007d2 <clearLCD+0x4a>
			//starting point for my LCD
			if(i == 32){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b20      	cmp	r3, #32
 80007ae:	d100      	bne.n	80007b2 <clearLCD+0x2a>
				__NOP();
 80007b0:	bf00      	nop
			}

			//ending point of my LCD
			if(i == 97){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b61      	cmp	r3, #97	@ 0x61
 80007b6:	d100      	bne.n	80007ba <clearLCD+0x32>
				__NOP();
 80007b8:	bf00      	nop
			}

			if(lcd_writeRAM(0x00) != HAL_OK){
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ffae 	bl	800071c <lcd_writeRAM>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <clearLCD+0x44>
				errors += 1;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 128; i++){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3301      	adds	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007d6:	dde8      	ble.n	80007aa <clearLCD+0x22>
	for(int a = 0; a < 16; a++){
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	3301      	adds	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	ddd9      	ble.n	8000798 <clearLCD+0x10>
			}
			//HAL_Delay(10);
		}
	}

	if(errors == 0){
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <clearLCD+0x66>
		return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <clearLCD+0x68>
	}
	else{
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <lcd_printHELLO>:
		return HAL_ERROR;
	}
}

//print HELLO message
HAL_StatusTypeDef lcd_printHELLO(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	int errors = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]

	lcd_setpage_address(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff ff2c 	bl	8000660 <lcd_setpage_address>
	lcd_setcolumn_address(32);
 8000808:	2020      	movs	r0, #32
 800080a:	f7ff ff43 	bl	8000694 <lcd_setcolumn_address>

	//H
	if(lcd_writeRAM(0x7F) != HAL_OK){
 800080e:	207f      	movs	r0, #127	@ 0x7f
 8000810:	f7ff ff84 	bl	800071c <lcd_writeRAM>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <lcd_printHELLO+0x28>
		errors += 1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3301      	adds	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x08) != HAL_OK){
 8000820:	2008      	movs	r0, #8
 8000822:	f7ff ff7b 	bl	800071c <lcd_writeRAM>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <lcd_printHELLO+0x3a>
		errors += 1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x08) != HAL_OK){
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff ff72 	bl	800071c <lcd_writeRAM>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <lcd_printHELLO+0x4c>
		errors += 1;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3301      	adds	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x7F) != HAL_OK){
 8000844:	207f      	movs	r0, #127	@ 0x7f
 8000846:	f7ff ff69 	bl	800071c <lcd_writeRAM>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <lcd_printHELLO+0x5e>
		errors += 1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3301      	adds	r3, #1
 8000854:	607b      	str	r3, [r7, #4]
	}

	//space
	if(lcd_writeRAM(0x00) != HAL_OK){
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ff60 	bl	800071c <lcd_writeRAM>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <lcd_printHELLO+0x70>
		errors += 1;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
	}

	//E
	if(lcd_writeRAM(0x7F) != HAL_OK){
 8000868:	207f      	movs	r0, #127	@ 0x7f
 800086a:	f7ff ff57 	bl	800071c <lcd_writeRAM>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <lcd_printHELLO+0x82>
		errors += 1;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x49) != HAL_OK){
 800087a:	2049      	movs	r0, #73	@ 0x49
 800087c:	f7ff ff4e 	bl	800071c <lcd_writeRAM>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <lcd_printHELLO+0x94>
		errors += 1;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x49) != HAL_OK){
 800088c:	2049      	movs	r0, #73	@ 0x49
 800088e:	f7ff ff45 	bl	800071c <lcd_writeRAM>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <lcd_printHELLO+0xa6>
		errors += 1;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x41) != HAL_OK){
 800089e:	2041      	movs	r0, #65	@ 0x41
 80008a0:	f7ff ff3c 	bl	800071c <lcd_writeRAM>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <lcd_printHELLO+0xb8>
		errors += 1;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
	}
	//space
	if(lcd_writeRAM(0x00) != HAL_OK){
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ff33 	bl	800071c <lcd_writeRAM>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <lcd_printHELLO+0xca>
		errors += 1;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3301      	adds	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
	}

	//L
	for(int i = 0; i < 2; i++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	e02f      	b.n	8000928 <lcd_printHELLO+0x130>
		if(lcd_writeRAM(0x7F) != HAL_OK){
 80008c8:	207f      	movs	r0, #127	@ 0x7f
 80008ca:	f7ff ff27 	bl	800071c <lcd_writeRAM>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <lcd_printHELLO+0xe2>
			errors += 1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
		}
		if(lcd_writeRAM(0x40) != HAL_OK){
 80008da:	2040      	movs	r0, #64	@ 0x40
 80008dc:	f7ff ff1e 	bl	800071c <lcd_writeRAM>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <lcd_printHELLO+0xf4>
			errors += 1;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3301      	adds	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
		}
		if(lcd_writeRAM(0x40) != HAL_OK){
 80008ec:	2040      	movs	r0, #64	@ 0x40
 80008ee:	f7ff ff15 	bl	800071c <lcd_writeRAM>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d002      	beq.n	80008fe <lcd_printHELLO+0x106>
			errors += 1;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
		}
		if(lcd_writeRAM(0x40) != HAL_OK){
 80008fe:	2040      	movs	r0, #64	@ 0x40
 8000900:	f7ff ff0c 	bl	800071c <lcd_writeRAM>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <lcd_printHELLO+0x118>
			errors += 1;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3301      	adds	r3, #1
 800090e:	607b      	str	r3, [r7, #4]
		}
		//space
		if(lcd_writeRAM(0x00) != HAL_OK){
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff ff03 	bl	800071c <lcd_writeRAM>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <lcd_printHELLO+0x12a>
			errors += 1;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 2; i++){
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	ddcc      	ble.n	80008c8 <lcd_printHELLO+0xd0>
		}
	}

	//O
	if(lcd_writeRAM(0x7F) != HAL_OK){
 800092e:	207f      	movs	r0, #127	@ 0x7f
 8000930:	f7ff fef4 	bl	800071c <lcd_writeRAM>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <lcd_printHELLO+0x148>
		errors += 1;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3301      	adds	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x41) != HAL_OK){
 8000940:	2041      	movs	r0, #65	@ 0x41
 8000942:	f7ff feeb 	bl	800071c <lcd_writeRAM>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <lcd_printHELLO+0x15a>
		errors += 1;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3301      	adds	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x41) != HAL_OK){
 8000952:	2041      	movs	r0, #65	@ 0x41
 8000954:	f7ff fee2 	bl	800071c <lcd_writeRAM>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <lcd_printHELLO+0x16c>
		errors += 1;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3301      	adds	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
	}
	if(lcd_writeRAM(0x7F) != HAL_OK){
 8000964:	207f      	movs	r0, #127	@ 0x7f
 8000966:	f7ff fed9 	bl	800071c <lcd_writeRAM>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <lcd_printHELLO+0x17e>
		errors += 1;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3301      	adds	r3, #1
 8000974:	607b      	str	r3, [r7, #4]
	}


	if(errors == 0){
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <lcd_printHELLO+0x188>
		return HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	e000      	b.n	8000982 <lcd_printHELLO+0x18a>
	}
	else{
		return HAL_ERROR;
 8000980:	2301      	movs	r3, #1
	}
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000990:	f000 fa72 	bl	8000e78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fdc4 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f822 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 f996 	bl	8000ccc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009a0:	f000 f936 	bl	8000c10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009a4:	f000 f964 	bl	8000c70 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 80009a8:	f000 f8f4 	bl	8000b94 <MX_SPI2_Init>
  MX_ETH_Init();
 80009ac:	f000 f88a 	bl	8000ac4 <MX_ETH_Init>
  MX_RNG_Init();
 80009b0:	f000 f8d6 	bl	8000b60 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009b4:	f004 ff5c 	bl	8005870 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <main+0x48>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <main+0x4c>)
 80009be:	f004 ffc1 	bl	8005944 <osThreadNew>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a05      	ldr	r2, [pc, #20]	@ (80009dc <main+0x50>)
 80009c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009c8:	f004 ff86 	bl	80058d8 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 80009cc:	f7ff fdce 	bl	800056c <AppMain>
 80009d0:	e7fc      	b.n	80009cc <main+0x40>
 80009d2:	bf00      	nop
 80009d4:	080088c8 	.word	0x080088c8
 80009d8:	08000e61 	.word	0x08000e61
 80009dc:	20000740 	.word	0x20000740

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	@ 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2234      	movs	r2, #52	@ 0x34
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 fe5c 	bl	80086ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a04:	f001 fe5a 	bl	80026bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <SystemClock_Config+0xdc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000abc <SystemClock_Config+0xdc>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <SystemClock_Config+0xdc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a20:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <SystemClock_Config+0xe0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a28:	4a25      	ldr	r2, [pc, #148]	@ (8000ac0 <SystemClock_Config+0xe0>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <SystemClock_Config+0xe0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a40:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a54:	2360      	movs	r3, #96	@ 0x60
 8000a56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fe87 	bl	800277c <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a74:	f000 fa40 	bl	8000ef8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a78:	f001 fe30 	bl	80026dc <HAL_PWREx_EnableOverDrive>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a82:	f000 fa39 	bl	8000ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f002 f918 	bl	8002cd8 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000aae:	f000 fa23 	bl	8000ef8 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3750      	adds	r7, #80	@ 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000aca:	4a20      	ldr	r2, [pc, #128]	@ (8000b4c <MX_ETH_Init+0x88>)
 8000acc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ace:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000ad6:	2280      	movs	r2, #128	@ 0x80
 8000ad8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000adc:	22e1      	movs	r2, #225	@ 0xe1
 8000ade:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000af4:	4a16      	ldr	r2, [pc, #88]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000af6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000afa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000afe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <MX_ETH_Init+0x90>)
 8000b04:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000b08:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <MX_ETH_Init+0x94>)
 8000b0a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000b0e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000b12:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000b16:	f000 febd 	bl	8001894 <HAL_ETH_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b20:	f000 f9ea 	bl	8000ef8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b24:	2238      	movs	r2, #56	@ 0x38
 8000b26:	2100      	movs	r1, #0
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <MX_ETH_Init+0x98>)
 8000b2a:	f007 fdbf 	bl	80086ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_ETH_Init+0x98>)
 8000b30:	2221      	movs	r2, #33	@ 0x21
 8000b32:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_ETH_Init+0x98>)
 8000b36:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b3a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <MX_ETH_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000b4 	.word	0x200000b4
 8000b4c:	40028000 	.word	0x40028000
 8000b50:	20000744 	.word	0x20000744
 8000b54:	2007c0a0 	.word	0x2007c0a0
 8000b58:	2007c000 	.word	0x2007c000
 8000b5c:	2000007c 	.word	0x2000007c

08000b60 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
static void MX_RNG_Init(void)
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	607b      	str	r3, [r7, #4]
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_RNG_Init+0x2c>)
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <MX_RNG_Init+0x30>)
 8000b70:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b72:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <MX_RNG_Init+0x2c>)
 8000b74:	f002 ff30 	bl	80039d8 <HAL_RNG_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_RNG_Init+0x22>
  {
    Error_Handler();
 8000b7e:	f000 f9bb 	bl	8000ef8 <Error_Handler>
      else
          return pdFALSE;
  }
  /* USER CODE END RNG_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000164 	.word	0x20000164
 8000b90:	50060800 	.word	0x50060800

08000b94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <MX_SPI2_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000ba0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bb2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bca:	2238      	movs	r2, #56	@ 0x38
 8000bcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bf4:	f002 ff1a 	bl	8003a2c <HAL_SPI_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 f97b 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000174 	.word	0x20000174
 8000c0c:	40003800 	.word	0x40003800

08000c10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c16:	4a15      	ldr	r2, [pc, #84]	@ (8000c6c <MX_USART3_UART_Init+0x5c>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_USART3_UART_Init+0x58>)
 8000c54:	f003 fd62 	bl	800471c <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c5e:	f000 f94b 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200001d8 	.word	0x200001d8
 8000c6c:	40004800 	.word	0x40004800

08000c70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c74:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7e:	2206      	movs	r2, #6
 8000c80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb4:	f001 fbc7 	bl	8002446 <HAL_PCD_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cbe:	f000 f91b 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000260 	.word	0x20000260

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	@ 0x30
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a59      	ldr	r2, [pc, #356]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b57      	ldr	r3, [pc, #348]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	4b54      	ldr	r3, [pc, #336]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a53      	ldr	r2, [pc, #332]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b51      	ldr	r3, [pc, #324]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b4e      	ldr	r3, [pc, #312]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a4d      	ldr	r2, [pc, #308]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	4b48      	ldr	r3, [pc, #288]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a47      	ldr	r2, [pc, #284]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b45      	ldr	r3, [pc, #276]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	4b42      	ldr	r3, [pc, #264]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a41      	ldr	r2, [pc, #260]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a3b      	ldr	r2, [pc, #236]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b39      	ldr	r3, [pc, #228]	@ (8000e4c <MX_GPIO_Init+0x180>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2101      	movs	r1, #1
 8000d76:	4836      	ldr	r0, [pc, #216]	@ (8000e50 <MX_GPIO_Init+0x184>)
 8000d78:	f001 fb4c 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000d82:	4834      	ldr	r0, [pc, #208]	@ (8000e54 <MX_GPIO_Init+0x188>)
 8000d84:	f001 fb46 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2140      	movs	r1, #64	@ 0x40
 8000d8c:	4832      	ldr	r0, [pc, #200]	@ (8000e58 <MX_GPIO_Init+0x18c>)
 8000d8e:	f001 fb41 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	21c0      	movs	r1, #192	@ 0xc0
 8000d96:	4831      	ldr	r0, [pc, #196]	@ (8000e5c <MX_GPIO_Init+0x190>)
 8000d98:	f001 fb3c 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4827      	ldr	r0, [pc, #156]	@ (8000e50 <MX_GPIO_Init+0x184>)
 8000db4:	f001 f982 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4820      	ldr	r0, [pc, #128]	@ (8000e50 <MX_GPIO_Init+0x184>)
 8000dd0:	f001 f974 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000dd4:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4819      	ldr	r0, [pc, #100]	@ (8000e54 <MX_GPIO_Init+0x188>)
 8000dee:	f001 f965 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df2:	2340      	movs	r3, #64	@ 0x40
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4813      	ldr	r0, [pc, #76]	@ (8000e58 <MX_GPIO_Init+0x18c>)
 8000e0a:	f001 f957 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e0e:	2380      	movs	r3, #128	@ 0x80
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_GPIO_Init+0x18c>)
 8000e22:	f001 f94b 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e26:	23c0      	movs	r3, #192	@ 0xc0
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <MX_GPIO_Init+0x190>)
 8000e3e:	f001 f93d 	bl	80020bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e42:	bf00      	nop
 8000e44:	3730      	adds	r7, #48	@ 0x30
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	AppMain();
 8000e68:	f7ff fb80 	bl	800056c <AppMain>
    osDelay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f004 fe0f 	bl	8005a90 <osDelay>
	AppMain();
 8000e72:	bf00      	nop
 8000e74:	e7f8      	b.n	8000e68 <StartDefaultTask+0x8>
	...

08000e78 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e8a:	f000 fc8b 	bl	80017a4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MPU_Config+0x58>)
 8000e98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000e9a:	230d      	movs	r3, #13
 8000e9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fca9 	bl	8001814 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f000 fc86 	bl	80017d4 <HAL_MPU_Enable>

}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2007c000 	.word	0x2007c000

08000ed4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ee6:	f000 fb37 	bl	8001558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40001000 	.word	0x40001000

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <Error_Handler+0x8>

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	f06f 0001 	mvn.w	r0, #1
 8000f42:	f000 fc05 	bl	8001750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	@ 0x38
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	@ (80010ac <HAL_ETH_MspInit+0x158>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f040 8096 	bne.w	80010a4 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f78:	4b4d      	ldr	r3, [pc, #308]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000f7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f84:	4b4a      	ldr	r3, [pc, #296]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f8c:	623b      	str	r3, [r7, #32]
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	4b47      	ldr	r3, [pc, #284]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	4a46      	ldr	r2, [pc, #280]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000f96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9c:	4b44      	ldr	r3, [pc, #272]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	4b41      	ldr	r3, [pc, #260]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	4a40      	ldr	r2, [pc, #256]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000fae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a3a      	ldr	r2, [pc, #232]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b38      	ldr	r3, [pc, #224]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b35      	ldr	r3, [pc, #212]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	4a34      	ldr	r2, [pc, #208]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe4:	4b32      	ldr	r3, [pc, #200]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	4a28      	ldr	r2, [pc, #160]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 800100e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001012:	6313      	str	r3, [r2, #48]	@ 0x30
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001020:	233a      	movs	r3, #58	@ 0x3a
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001030:	230b      	movs	r3, #11
 8001032:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	481e      	ldr	r0, [pc, #120]	@ (80010b4 <HAL_ETH_MspInit+0x160>)
 800103c:	f001 f83e 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 8001040:	238e      	movs	r3, #142	@ 0x8e
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001050:	230b      	movs	r3, #11
 8001052:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4817      	ldr	r0, [pc, #92]	@ (80010b8 <HAL_ETH_MspInit+0x164>)
 800105c:	f001 f82e 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8001060:	f242 0301 	movw	r3, #8193	@ 0x2001
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001072:	230b      	movs	r3, #11
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	480f      	ldr	r0, [pc, #60]	@ (80010bc <HAL_ETH_MspInit+0x168>)
 800107e:	f001 f81d 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001082:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001094:	230b      	movs	r3, #11
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <HAL_ETH_MspInit+0x16c>)
 80010a0:	f001 f80c 	bl	80020bc <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80010a4:	bf00      	nop
 80010a6:	3738      	adds	r7, #56	@ 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40028000 	.word	0x40028000
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40021800 	.word	0x40021800

080010c4 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a8      	sub	sp, #160	@ 0xa0
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	2290      	movs	r2, #144	@ 0x90
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f007 fae9 	bl	80086ac <memset>
  if(hrng->Instance==RNG)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <HAL_RNG_MspInit+0x60>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d11b      	bne.n	800111c <HAL_RNG_MspInit+0x58>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 f847 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001100:	f7ff fefa 	bl	8000ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_RNG_MspInit+0x64>)
 8001106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001108:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <HAL_RNG_MspInit+0x64>)
 800110a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800110e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_RNG_MspInit+0x64>)
 8001112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 800111c:	bf00      	nop
 800111e:	37a0      	adds	r7, #160	@ 0xa0
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	50060800 	.word	0x50060800
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_SPI_MspInit+0x7c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d128      	bne.n	80011a0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a16      	ldr	r2, [pc, #88]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800117e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <HAL_SPI_MspInit+0x84>)
 800119c:	f000 ff8e 	bl	80020bc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40003800 	.word	0x40003800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400

080011b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ae      	sub	sp, #184	@ 0xb8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2290      	movs	r2, #144	@ 0x90
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f007 fa69 	bl	80086ac <memset>
  if(huart->Instance==USART3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a22      	ldr	r2, [pc, #136]	@ (8001268 <HAL_UART_MspInit+0xb4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d13c      	bne.n	800125e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 ffc8 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff fe7b 	bl	8000ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <HAL_UART_MspInit+0xb8>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a19      	ldr	r2, [pc, #100]	@ (800126c <HAL_UART_MspInit+0xb8>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_UART_MspInit+0xb8>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_UART_MspInit+0xb8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a13      	ldr	r2, [pc, #76]	@ (800126c <HAL_UART_MspInit+0xb8>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <HAL_UART_MspInit+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001232:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800124c:	2307      	movs	r3, #7
 800124e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	@ (8001270 <HAL_UART_MspInit+0xbc>)
 800125a:	f000 ff2f 	bl	80020bc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800125e:	bf00      	nop
 8001260:	37b8      	adds	r7, #184	@ 0xb8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004800 	.word	0x40004800
 800126c:	40023800 	.word	0x40023800
 8001270:	40020c00 	.word	0x40020c00

08001274 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ae      	sub	sp, #184	@ 0xb8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2290      	movs	r2, #144	@ 0x90
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f007 fa09 	bl	80086ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012a2:	d159      	bne.n	8001358 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 ff67 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012c0:	f7ff fe1a 	bl	8000ef8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	4a25      	ldr	r2, [pc, #148]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d0:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012dc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80012e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012f6:	230a      	movs	r3, #10
 80012f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001300:	4619      	mov	r1, r3
 8001302:	4818      	ldr	r0, [pc, #96]	@ (8001364 <HAL_PCD_MspInit+0xf0>)
 8001304:	f000 feda 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001308:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800130c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001320:	4619      	mov	r1, r3
 8001322:	4810      	ldr	r0, [pc, #64]	@ (8001364 <HAL_PCD_MspInit+0xf0>)
 8001324:	f000 feca 	bl	80020bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 800132a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132c:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 800132e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001332:	6353      	str	r3, [r2, #52]	@ 0x34
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 8001336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 8001342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001344:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134a:	6453      	str	r3, [r2, #68]	@ 0x44
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <HAL_PCD_MspInit+0xec>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001358:	bf00      	nop
 800135a:	37b8      	adds	r7, #184	@ 0xb8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	@ 0x38
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001378:	4b33      	ldr	r3, [pc, #204]	@ (8001448 <HAL_InitTick+0xe0>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <HAL_InitTick+0xe0>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	6413      	str	r3, [r2, #64]	@ 0x40
 8001384:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <HAL_InitTick+0xe0>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001390:	f107 0210 	add.w	r2, r7, #16
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fec2 	bl	8003124 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013aa:	f001 fe93 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80013ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80013b0:	e004      	b.n	80013bc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013b2:	f001 fe8f 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013be:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_InitTick+0xe4>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	3b01      	subs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_InitTick+0xe8>)
 80013cc:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <HAL_InitTick+0xec>)
 80013ce:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <HAL_InitTick+0xe8>)
 80013d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_InitTick+0xe8>)
 80013da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <HAL_InitTick+0xe8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_InitTick+0xe8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_InitTick+0xe8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013f0:	4817      	ldr	r0, [pc, #92]	@ (8001450 <HAL_InitTick+0xe8>)
 80013f2:	f002 fec5 	bl	8004180 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11b      	bne.n	800143c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001404:	4812      	ldr	r0, [pc, #72]	@ (8001450 <HAL_InitTick+0xe8>)
 8001406:	f002 ff1d 	bl	8004244 <HAL_TIM_Base_Start_IT>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001414:	2b00      	cmp	r3, #0
 8001416:	d111      	bne.n	800143c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001418:	2036      	movs	r0, #54	@ 0x36
 800141a:	f000 f9b5 	bl	8001788 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d808      	bhi.n	8001436 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	2036      	movs	r0, #54	@ 0x36
 800142a:	f000 f991 	bl	8001750 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_InitTick+0xf0>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e002      	b.n	800143c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800143c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001440:	4618      	mov	r0, r3
 8001442:	3738      	adds	r7, #56	@ 0x38
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	431bde83 	.word	0x431bde83
 8001450:	2000074c 	.word	0x2000074c
 8001454:	40001000 	.word	0x40001000
 8001458:	20000004 	.word	0x20000004

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <TIM6_DAC_IRQHandler+0x10>)
 800149a:	f002 ff4b 	bl	8004334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000074c 	.word	0x2000074c

080014a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001504 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d0:	f7ff ffea 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f007 f93d 	bl	8008778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff fa45 	bl	800098c <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001510:	08008914 	.word	0x08008914
  ldr r2, =_sbss
 8001514:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001518:	2000597c 	.word	0x2000597c

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <HAL_Init+0x34>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <HAL_Init+0x34>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800152e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <HAL_Init+0x34>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <HAL_Init+0x34>)
 8001536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 f8fc 	bl	800173a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	200f      	movs	r0, #15
 8001544:	f7ff ff10 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fcdc 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023c00 	.word	0x40023c00

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	20000798 	.word	0x20000798

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000798 	.word	0x20000798

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	4313      	orrs	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	05fa0000 	.word	0x05fa0000

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	@ (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff4c 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001762:	f7ff ff61 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	6978      	ldr	r0, [r7, #20]
 800176e:	f7ff ffb1 	bl	80016d4 <NVIC_EncodePriority>
 8001772:	4602      	mov	r2, r0
 8001774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff80 	bl	8001680 <__NVIC_SetPriority>
}
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff54 	bl	8001644 <__NVIC_EnableIRQ>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017a8:	f3bf 8f5f 	dmb	sy
}
 80017ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <HAL_MPU_Disable+0x28>)
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <HAL_MPU_Disable+0x28>)
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_MPU_Disable+0x2c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00
 80017d0:	e000ed90 	.word	0xe000ed90

080017d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017dc:	4a0b      	ldr	r2, [pc, #44]	@ (800180c <HAL_MPU_Enable+0x38>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <HAL_MPU_Enable+0x3c>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	4a09      	ldr	r2, [pc, #36]	@ (8001810 <HAL_MPU_Enable+0x3c>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017f2:	f3bf 8f4f 	dsb	sy
}
 80017f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f8:	f3bf 8f6f 	isb	sy
}
 80017fc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed90 	.word	0xe000ed90
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	785a      	ldrb	r2, [r3, #1]
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_MPU_ConfigRegion+0x7c>)
 8001822:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001824:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <HAL_MPU_ConfigRegion+0x7c>)
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	4a19      	ldr	r2, [pc, #100]	@ (8001890 <HAL_MPU_ConfigRegion+0x7c>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001830:	4a17      	ldr	r2, [pc, #92]	@ (8001890 <HAL_MPU_ConfigRegion+0x7c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7b1b      	ldrb	r3, [r3, #12]
 800183c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7adb      	ldrb	r3, [r3, #11]
 8001842:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001844:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7a9b      	ldrb	r3, [r3, #10]
 800184a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800184c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7b5b      	ldrb	r3, [r3, #13]
 8001852:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001854:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7b9b      	ldrb	r3, [r3, #14]
 800185a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800185c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7bdb      	ldrb	r3, [r3, #15]
 8001862:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001864:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7a5b      	ldrb	r3, [r3, #9]
 800186a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800186c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7a1b      	ldrb	r3, [r3, #8]
 8001872:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001874:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800187e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001880:	6113      	str	r3, [r2, #16]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed90 	.word	0xe000ed90

08001894 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e086      	b.n	80019b4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d106      	bne.n	80018be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fb4b 	bl	8000f54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <HAL_ETH_Init+0x128>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	4a3e      	ldr	r2, [pc, #248]	@ (80019bc <HAL_ETH_Init+0x128>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ca:	4b3c      	ldr	r3, [pc, #240]	@ (80019bc <HAL_ETH_Init+0x128>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018d6:	4b3a      	ldr	r3, [pc, #232]	@ (80019c0 <HAL_ETH_Init+0x12c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a39      	ldr	r2, [pc, #228]	@ (80019c0 <HAL_ETH_Init+0x12c>)
 80018dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80018e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018e2:	4b37      	ldr	r3, [pc, #220]	@ (80019c0 <HAL_ETH_Init+0x12c>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4935      	ldr	r1, [pc, #212]	@ (80019c0 <HAL_ETH_Init+0x12c>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018f0:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <HAL_ETH_Init+0x12c>)
 80018f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800190a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fe38 	bl	8001580 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001912:	e011      	b.n	8001938 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001914:	f7ff fe34 	bl	8001580 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001922:	d909      	bls.n	8001938 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2204      	movs	r2, #4
 8001928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	22e0      	movs	r2, #224	@ 0xe0
 8001930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e03d      	b.n	80019b4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1e4      	bne.n	8001914 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fa40 	bl	8001dd0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 faeb 	bl	8001f2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fb41 	bl	8001fde <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	461a      	mov	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 faa9 	bl	8001ebc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_ETH_Init+0x130>)
 8001988:	430b      	orrs	r3, r1
 800198a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800199e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2210      	movs	r2, #16
 80019ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40013800 	.word	0x40013800
 80019c4:	00020060 	.word	0x00020060

080019c8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80019f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001b20 <HAL_ETH_IRQHandler+0x158>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00e      	beq.n	8001a1e <HAL_ETH_IRQHandler+0x56>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b43      	ldr	r3, [pc, #268]	@ (8001b24 <HAL_ETH_IRQHandler+0x15c>)
 8001a16:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f003 fec1 	bl	80057a0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00f      	beq.n	8001a48 <HAL_ETH_IRQHandler+0x80>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00a      	beq.n	8001a48 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001a40:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f003 fedc 	bl	8005800 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d042      	beq.n	8001ad8 <HAL_ETH_IRQHandler+0x110>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d03d      	beq.n	8001ad8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a62:	f043 0208 	orr.w	r2, r3, #8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d01a      	beq.n	8001aac <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <HAL_ETH_IRQHandler+0x160>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001a9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aa0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	22e0      	movs	r2, #224	@ 0xe0
 8001aa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001aaa:	e012      	b.n	8001ad2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aca:	461a      	mov	r2, r3
 8001acc:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001ad0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f003 fe08 	bl	80056e8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00e      	beq.n	8001b00 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f81a 	bl	8001b2c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_ETH_IRQHandler+0x158>)
 8001b0c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b10:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f814 	bl	8001b40 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40013c00 	.word	0x40013c00
 8001b24:	00010040 	.word	0x00010040
 8001b28:	007e2000 	.word	0x007e2000

08001b2c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4b53      	ldr	r3, [pc, #332]	@ (8001cb8 <ETH_SetMACConfig+0x164>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	7b9b      	ldrb	r3, [r3, #14]
 8001b72:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	7c12      	ldrb	r2, [r2, #16]
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d102      	bne.n	8001b82 <ETH_SetMACConfig+0x2e>
 8001b7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b80:	e000      	b.n	8001b84 <ETH_SetMACConfig+0x30>
 8001b82:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001b84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	7c52      	ldrb	r2, [r2, #17]
 8001b8a:	2a00      	cmp	r2, #0
 8001b8c:	d102      	bne.n	8001b94 <ETH_SetMACConfig+0x40>
 8001b8e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b92:	e000      	b.n	8001b96 <ETH_SetMACConfig+0x42>
 8001b94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b96:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	7fdb      	ldrb	r3, [r3, #31]
 8001ba2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ba4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001baa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	7f92      	ldrb	r2, [r2, #30]
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d102      	bne.n	8001bba <ETH_SetMACConfig+0x66>
 8001bb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb8:	e000      	b.n	8001bbc <ETH_SetMACConfig+0x68>
 8001bba:	2200      	movs	r2, #0
                        macconf->Speed |
 8001bbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	7f1b      	ldrb	r3, [r3, #28]
 8001bc2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bc4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001bd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bda:	2a00      	cmp	r2, #0
 8001bdc:	d102      	bne.n	8001be4 <ETH_SetMACConfig+0x90>
 8001bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be2:	e000      	b.n	8001be6 <ETH_SetMACConfig+0x92>
 8001be4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001be6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	7bdb      	ldrb	r3, [r3, #15]
 8001bec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bf4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001bfc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff fcbe 	bl	8001598 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	d101      	bne.n	8001c4a <ETH_SetMACConfig+0xf6>
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	e000      	b.n	8001c4c <ETH_SetMACConfig+0xf8>
 8001c4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c4c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001c5a:	2a01      	cmp	r2, #1
 8001c5c:	d101      	bne.n	8001c62 <ETH_SetMACConfig+0x10e>
 8001c5e:	2208      	movs	r2, #8
 8001c60:	e000      	b.n	8001c64 <ETH_SetMACConfig+0x110>
 8001c62:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c64:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001c6c:	2a01      	cmp	r2, #1
 8001c6e:	d101      	bne.n	8001c74 <ETH_SetMACConfig+0x120>
 8001c70:	2204      	movs	r2, #4
 8001c72:	e000      	b.n	8001c76 <ETH_SetMACConfig+0x122>
 8001c74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d101      	bne.n	8001c86 <ETH_SetMACConfig+0x132>
 8001c82:	2202      	movs	r2, #2
 8001c84:	e000      	b.n	8001c88 <ETH_SetMACConfig+0x134>
 8001c86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff fc79 	bl	8001598 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	fd20810f 	.word	0xfd20810f

08001cbc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dcc <ETH_SetDMAConfig+0x110>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	7b1b      	ldrb	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <ETH_SetDMAConfig+0x2c>
 8001ce2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ce6:	e000      	b.n	8001cea <ETH_SetDMAConfig+0x2e>
 8001ce8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7b5b      	ldrb	r3, [r3, #13]
 8001cee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cf0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	7f52      	ldrb	r2, [r2, #29]
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d102      	bne.n	8001d00 <ETH_SetDMAConfig+0x44>
 8001cfa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001cfe:	e000      	b.n	8001d02 <ETH_SetDMAConfig+0x46>
 8001d00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	7b9b      	ldrb	r3, [r3, #14]
 8001d08:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d0a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	7f1b      	ldrb	r3, [r3, #28]
 8001d16:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001d18:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	7f9b      	ldrb	r3, [r3, #30]
 8001d1e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d20:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d2e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d30:	4313      	orrs	r3, r2
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff fc20 	bl	8001598 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d60:	461a      	mov	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	791b      	ldrb	r3, [r3, #4]
 8001d6a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d70:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d76:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d7c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d84:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d86:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d8e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d94:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001da2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7ff fbf1 	bl	8001598 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	f8de3f23 	.word	0xf8de3f23

08001dd0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0a6      	sub	sp, #152	@ 0x98
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dee:	2301      	movs	r3, #1
 8001df0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e12:	2300      	movs	r3, #0
 8001e14:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fe7f 	bl	8001b54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e56:	2301      	movs	r3, #1
 8001e58:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e90:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e96:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff05 	bl	8001cbc <ETH_SetDMAConfig>
}
 8001eb2:	bf00      	nop
 8001eb4:	3798      	adds	r7, #152	@ 0x98
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3305      	adds	r3, #5
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	3204      	adds	r2, #4
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <ETH_MACAddressConfig+0x68>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3303      	adds	r3, #3
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	061a      	lsls	r2, r3, #24
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3301      	adds	r3, #1
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4313      	orrs	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <ETH_MACAddressConfig+0x6c>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6013      	str	r3, [r2, #0]
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40028040 	.word	0x40028040
 8001f28:	40028044 	.word	0x40028044

08001f2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e03e      	b.n	8001fb8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68d9      	ldr	r1, [r3, #12]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	3206      	adds	r2, #6
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d80c      	bhi.n	8001f9c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68d9      	ldr	r1, [r3, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	e004      	b.n	8001fa6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d9bd      	bls.n	8001f3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd0:	611a      	str	r2, [r3, #16]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e048      	b.n	800207e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6919      	ldr	r1, [r3, #16]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002028:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	3212      	adds	r2, #18
 800204a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d80c      	bhi.n	800206e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6919      	ldr	r1, [r3, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	e004      	b.n	8002078 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	461a      	mov	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d9b3      	bls.n	8001fec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ae:	60da      	str	r2, [r3, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e175      	b.n	80023c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f040 8164 	bne.w	80023c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d005      	beq.n	8002112 <HAL_GPIO_Init+0x56>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d130      	bne.n	8002174 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0201 	and.w	r2, r3, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b03      	cmp	r3, #3
 800217e:	d017      	beq.n	80021b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d123      	bne.n	8002204 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80be 	beq.w	80023c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	4b66      	ldr	r3, [pc, #408]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	4a65      	ldr	r2, [pc, #404]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002250:	6453      	str	r3, [r2, #68]	@ 0x44
 8002252:	4b63      	ldr	r3, [pc, #396]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800225e:	4a61      	ldr	r2, [pc, #388]	@ (80023e4 <HAL_GPIO_Init+0x328>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a58      	ldr	r2, [pc, #352]	@ (80023e8 <HAL_GPIO_Init+0x32c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d037      	beq.n	80022fa <HAL_GPIO_Init+0x23e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a57      	ldr	r2, [pc, #348]	@ (80023ec <HAL_GPIO_Init+0x330>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d031      	beq.n	80022f6 <HAL_GPIO_Init+0x23a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a56      	ldr	r2, [pc, #344]	@ (80023f0 <HAL_GPIO_Init+0x334>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02b      	beq.n	80022f2 <HAL_GPIO_Init+0x236>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a55      	ldr	r2, [pc, #340]	@ (80023f4 <HAL_GPIO_Init+0x338>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x232>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a54      	ldr	r2, [pc, #336]	@ (80023f8 <HAL_GPIO_Init+0x33c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x22e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a53      	ldr	r2, [pc, #332]	@ (80023fc <HAL_GPIO_Init+0x340>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x22a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a52      	ldr	r2, [pc, #328]	@ (8002400 <HAL_GPIO_Init+0x344>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x226>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a51      	ldr	r2, [pc, #324]	@ (8002404 <HAL_GPIO_Init+0x348>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x222>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a50      	ldr	r2, [pc, #320]	@ (8002408 <HAL_GPIO_Init+0x34c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x21e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4f      	ldr	r2, [pc, #316]	@ (800240c <HAL_GPIO_Init+0x350>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x21a>
 80022d2:	2309      	movs	r3, #9
 80022d4:	e012      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022d6:	230a      	movs	r3, #10
 80022d8:	e010      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022da:	2308      	movs	r3, #8
 80022dc:	e00e      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022de:	2307      	movs	r3, #7
 80022e0:	e00c      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e00a      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e008      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022fa:	2300      	movs	r3, #0
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f002 0203 	and.w	r2, r2, #3
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800230c:	4935      	ldr	r1, [pc, #212]	@ (80023e4 <HAL_GPIO_Init+0x328>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_GPIO_Init+0x354>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233e:	4a34      	ldr	r2, [pc, #208]	@ (8002410 <HAL_GPIO_Init+0x354>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002344:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <HAL_GPIO_Init+0x354>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002368:	4a29      	ldr	r2, [pc, #164]	@ (8002410 <HAL_GPIO_Init+0x354>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236e:	4b28      	ldr	r3, [pc, #160]	@ (8002410 <HAL_GPIO_Init+0x354>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002392:	4a1f      	ldr	r2, [pc, #124]	@ (8002410 <HAL_GPIO_Init+0x354>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002398:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_GPIO_Init+0x354>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023bc:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <HAL_GPIO_Init+0x354>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	f67f ae86 	bls.w	80020dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40013800 	.word	0x40013800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40021400 	.word	0x40021400
 8002400:	40021800 	.word	0x40021800
 8002404:	40021c00 	.word	0x40021c00
 8002408:	40022000 	.word	0x40022000
 800240c:	40022400 	.word	0x40022400
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002430:	e003      	b.n	800243a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	041a      	lsls	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af02      	add	r7, sp, #8
 800244c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e108      	b.n	800266a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fefe 	bl	8001274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002486:	d102      	bne.n	800248e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fe6a 	bl	800516c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7c1a      	ldrb	r2, [r3, #16]
 80024a0:	f88d 2000 	strb.w	r2, [sp]
 80024a4:	3304      	adds	r3, #4
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	f002 fe06 	bl	80050b8 <USB_CoreInit>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0d5      	b.n	800266a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 fe62 	bl	800518e <USB_SetCurrentMode>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0c6      	b.n	800266a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e04a      	b.n	8002578 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3315      	adds	r3, #21
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3314      	adds	r3, #20
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	b298      	uxth	r0, r3
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	332e      	adds	r3, #46	@ 0x2e
 800251e:	4602      	mov	r2, r0
 8002520:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3318      	adds	r3, #24
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	331c      	adds	r3, #28
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3320      	adds	r3, #32
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3324      	adds	r3, #36	@ 0x24
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	3301      	adds	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	791b      	ldrb	r3, [r3, #4]
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	429a      	cmp	r2, r3
 8002580:	d3af      	bcc.n	80024e2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e044      	b.n	8002612 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	3301      	adds	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	791b      	ldrb	r3, [r3, #4]
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	429a      	cmp	r2, r3
 800261a:	d3b5      	bcc.n	8002588 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7c1a      	ldrb	r2, [r3, #16]
 8002624:	f88d 2000 	strb.w	r2, [sp]
 8002628:	3304      	adds	r3, #4
 800262a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262c:	f002 fdfc 	bl	8005228 <USB_DevInit>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e013      	b.n	800266a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7b1b      	ldrb	r3, [r3, #12]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d102      	bne.n	800265e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f80b 	bl	8002674 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f002 ffb7 	bl	80055d6 <USB_DevDisconnect>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026a2:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	10000003 	.word	0x10000003

080026bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a04      	ldr	r2, [pc, #16]	@ (80026d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40007000 	.word	0x40007000

080026dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b23      	ldr	r3, [pc, #140]	@ (8002774 <HAL_PWREx_EnableOverDrive+0x98>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	4a22      	ldr	r2, [pc, #136]	@ (8002774 <HAL_PWREx_EnableOverDrive+0x98>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f2:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002708:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800270a:	f7fe ff39 	bl	8001580 <HAL_GetTick>
 800270e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002710:	e009      	b.n	8002726 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002712:	f7fe ff35 	bl	8001580 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002720:	d901      	bls.n	8002726 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e022      	b.n	800276c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002726:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002732:	d1ee      	bne.n	8002712 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002734:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0f      	ldr	r2, [pc, #60]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800273e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002740:	f7fe ff1e 	bl	8001580 <HAL_GetTick>
 8002744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002746:	e009      	b.n	800275c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002748:	f7fe ff1a 	bl	8001580 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002756:	d901      	bls.n	800275c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e007      	b.n	800276c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002768:	d1ee      	bne.n	8002748 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	40007000 	.word	0x40007000

0800277c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e29b      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8087 	beq.w	80028ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a0:	4b96      	ldr	r3, [pc, #600]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d00c      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ac:	4b93      	ldr	r3, [pc, #588]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d112      	bne.n	80027de <HAL_RCC_OscConfig+0x62>
 80027b8:	4b90      	ldr	r3, [pc, #576]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c4:	d10b      	bne.n	80027de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c6:	4b8d      	ldr	r3, [pc, #564]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d06c      	beq.n	80028ac <HAL_RCC_OscConfig+0x130>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d168      	bne.n	80028ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e275      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x7a>
 80027e8:	4b84      	ldr	r3, [pc, #528]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a83      	ldr	r2, [pc, #524]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80027ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	e02e      	b.n	8002854 <HAL_RCC_OscConfig+0xd8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x9c>
 80027fe:	4b7f      	ldr	r3, [pc, #508]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a7e      	ldr	r2, [pc, #504]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b7c      	ldr	r3, [pc, #496]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7b      	ldr	r2, [pc, #492]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002810:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e01d      	b.n	8002854 <HAL_RCC_OscConfig+0xd8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0xc0>
 8002822:	4b76      	ldr	r3, [pc, #472]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a75      	ldr	r2, [pc, #468]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b73      	ldr	r3, [pc, #460]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a72      	ldr	r2, [pc, #456]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0xd8>
 800283c:	4b6f      	ldr	r3, [pc, #444]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6e      	ldr	r2, [pc, #440]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b6c      	ldr	r3, [pc, #432]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6b      	ldr	r2, [pc, #428]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fe90 	bl	8001580 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe fe8c 	bl	8001580 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	@ 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e229      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b61      	ldr	r3, [pc, #388]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0xe8>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fe7c 	bl	8001580 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fe78 	bl	8001580 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	@ 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e215      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	4b57      	ldr	r3, [pc, #348]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x110>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d069      	beq.n	800298e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ba:	4b50      	ldr	r3, [pc, #320]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b4d      	ldr	r3, [pc, #308]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x190>
 80028d2:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	4b47      	ldr	r3, [pc, #284]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x17a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1e9      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b41      	ldr	r3, [pc, #260]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	493d      	ldr	r1, [pc, #244]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	e040      	b.n	800298e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d023      	beq.n	800295c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b39      	ldr	r3, [pc, #228]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a38      	ldr	r2, [pc, #224]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fe2e 	bl	8001580 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002928:	f7fe fe2a 	bl	8001580 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1c7      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4929      	ldr	r1, [pc, #164]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
 800295a:	e018      	b.n	800298e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295c:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a26      	ldr	r2, [pc, #152]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fe0a 	bl	8001580 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002970:	f7fe fe06 	bl	8001580 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1a3      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d038      	beq.n	8002a0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d019      	beq.n	80029d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a2:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80029a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a6:	4a15      	ldr	r2, [pc, #84]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe fde7 	bl	8001580 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b6:	f7fe fde3 	bl	8001580 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e180      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x23a>
 80029d4:	e01a      	b.n	8002a0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80029d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_RCC_OscConfig+0x280>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe fdcd 	bl	8001580 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ea:	f7fe fdc9 	bl	8001580 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d903      	bls.n	8002a00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e166      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
 80029fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	4b92      	ldr	r3, [pc, #584]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ee      	bne.n	80029ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80a4 	beq.w	8002b62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b8c      	ldr	r3, [pc, #560]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b89      	ldr	r3, [pc, #548]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	4a88      	ldr	r2, [pc, #544]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a32:	4b86      	ldr	r3, [pc, #536]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a42:	4b83      	ldr	r3, [pc, #524]	@ (8002c50 <HAL_RCC_OscConfig+0x4d4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a4e:	4b80      	ldr	r3, [pc, #512]	@ (8002c50 <HAL_RCC_OscConfig+0x4d4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7f      	ldr	r2, [pc, #508]	@ (8002c50 <HAL_RCC_OscConfig+0x4d4>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fd91 	bl	8001580 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fe fd8d 	bl	8001580 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	@ 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e12a      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a74:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCC_OscConfig+0x4d4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x31a>
 8002a88:	4b70      	ldr	r3, [pc, #448]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a6f      	ldr	r2, [pc, #444]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a94:	e02d      	b.n	8002af2 <HAL_RCC_OscConfig+0x376>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x33c>
 8002a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	4a6a      	ldr	r2, [pc, #424]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aaa:	4b68      	ldr	r3, [pc, #416]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	4a67      	ldr	r2, [pc, #412]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x376>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x35e>
 8002ac0:	4b62      	ldr	r3, [pc, #392]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a61      	ldr	r2, [pc, #388]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002acc:	4b5f      	ldr	r3, [pc, #380]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x376>
 8002ada:	4b5c      	ldr	r3, [pc, #368]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	4a5b      	ldr	r2, [pc, #364]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae6:	4b59      	ldr	r3, [pc, #356]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fd41 	bl	8001580 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe fd3d 	bl	8001580 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0d8      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x386>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe fd2b 	bl	8001580 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fd27 	bl	8001580 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0c2      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	4a3c      	ldr	r2, [pc, #240]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80ae 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	4b37      	ldr	r3, [pc, #220]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d06d      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d14b      	bne.n	8002c18 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b32      	ldr	r3, [pc, #200]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a31      	ldr	r2, [pc, #196]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fcf8 	bl	8001580 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fcf4 	bl	8001580 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e091      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	4b29      	ldr	r3, [pc, #164]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	019b      	lsls	r3, r3, #6
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	071b      	lsls	r3, r3, #28
 8002bde:	491b      	ldr	r1, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fcc6 	bl	8001580 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe fcc2 	bl	8001580 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e05f      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x47c>
 8002c16:	e057      	b.n	8002cc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c18:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fcac 	bl	8001580 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fca8 	bl	8001580 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e045      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	4b03      	ldr	r3, [pc, #12]	@ (8002c4c <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4b0>
 8002c4a:	e03d      	b.n	8002cc8 <HAL_RCC_OscConfig+0x54c>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <HAL_RCC_OscConfig+0x558>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d030      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d129      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d122      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d119      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d10f      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d0      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b67      	ldr	r3, [pc, #412]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	4965      	ldr	r1, [pc, #404]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b63      	ldr	r3, [pc, #396]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b59      	ldr	r3, [pc, #356]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b53      	ldr	r3, [pc, #332]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a52      	ldr	r2, [pc, #328]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	494d      	ldr	r1, [pc, #308]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d040      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d115      	bne.n	8002dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e073      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06b      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4936      	ldr	r1, [pc, #216]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fbd8 	bl	8001580 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe fbd4 	bl	8001580 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e053      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d210      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b24      	ldr	r3, [pc, #144]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 020f 	bic.w	r2, r3, #15
 8002e12:	4922      	ldr	r1, [pc, #136]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e032      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4916      	ldr	r1, [pc, #88]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490e      	ldr	r1, [pc, #56]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f821 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490a      	ldr	r1, [pc, #40]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e86:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <HAL_RCC_ClockConfig+0x1d4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fa6c 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	080088ec 	.word	0x080088ec
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b094      	sub	sp, #80	@ 0x50
 8002eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec8:	4b79      	ldr	r3, [pc, #484]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	f200 80e1 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee2:	e0db      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b73      	ldr	r3, [pc, #460]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ee8:	e0db      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eea:	4b73      	ldr	r3, [pc, #460]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eee:	e0d8      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002efa:	4b6d      	ldr	r3, [pc, #436]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d063      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f22:	4622      	mov	r2, r4
 8002f24:	462b      	mov	r3, r5
 8002f26:	f04f 0000 	mov.w	r0, #0
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	0159      	lsls	r1, r3, #5
 8002f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f34:	0150      	lsls	r0, r2, #5
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	1a51      	subs	r1, r2, r1
 8002f3e:	6139      	str	r1, [r7, #16]
 8002f40:	4629      	mov	r1, r5
 8002f42:	eb63 0301 	sbc.w	r3, r3, r1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f54:	4659      	mov	r1, fp
 8002f56:	018b      	lsls	r3, r1, #6
 8002f58:	4651      	mov	r1, sl
 8002f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5e:	4651      	mov	r1, sl
 8002f60:	018a      	lsls	r2, r1, #6
 8002f62:	4651      	mov	r1, sl
 8002f64:	ebb2 0801 	subs.w	r8, r2, r1
 8002f68:	4659      	mov	r1, fp
 8002f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f82:	4690      	mov	r8, r2
 8002f84:	4699      	mov	r9, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	eb18 0303 	adds.w	r3, r8, r3
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	462b      	mov	r3, r5
 8002f90:	eb49 0303 	adc.w	r3, r9, r3
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	024b      	lsls	r3, r1, #9
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fac:	4621      	mov	r1, r4
 8002fae:	024a      	lsls	r2, r1, #9
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fc0:	f7fd f93e 	bl	8000240 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fcc:	e058      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fce:	4b38      	ldr	r3, [pc, #224]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	4611      	mov	r1, r2
 8002fda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fde:	623b      	str	r3, [r7, #32]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	0159      	lsls	r1, r3, #5
 8002ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffa:	0150      	lsls	r0, r2, #5
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4641      	mov	r1, r8
 8003002:	ebb2 0a01 	subs.w	sl, r2, r1
 8003006:	4649      	mov	r1, r9
 8003008:	eb63 0b01 	sbc.w	fp, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800301c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003020:	ebb2 040a 	subs.w	r4, r2, sl
 8003024:	eb63 050b 	sbc.w	r5, r3, fp
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	00eb      	lsls	r3, r5, #3
 8003032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003036:	00e2      	lsls	r2, r4, #3
 8003038:	4614      	mov	r4, r2
 800303a:	461d      	mov	r5, r3
 800303c:	4643      	mov	r3, r8
 800303e:	18e3      	adds	r3, r4, r3
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	464b      	mov	r3, r9
 8003044:	eb45 0303 	adc.w	r3, r5, r3
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003056:	4629      	mov	r1, r5
 8003058:	028b      	lsls	r3, r1, #10
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003060:	4621      	mov	r1, r4
 8003062:	028a      	lsls	r2, r1, #10
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	61fa      	str	r2, [r7, #28]
 8003070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003074:	f7fd f8e4 	bl	8000240 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003090:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3750      	adds	r7, #80	@ 0x50
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	@ (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	080088fc 	.word	0x080088fc

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffdc 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	080088fc 	.word	0x080088fc

08003124 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	220f      	movs	r2, #15
 8003132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003134:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003140:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003158:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003166:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <HAL_RCC_GetClockConfig+0x60>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	601a      	str	r2, [r3, #0]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	40023c00 	.word	0x40023c00

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031b0:	4b69      	ldr	r3, [pc, #420]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a68      	ldr	r2, [pc, #416]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80031ba:	6093      	str	r3, [r2, #8]
 80031bc:	4b66      	ldr	r3, [pc, #408]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c4:	4964      	ldr	r1, [pc, #400]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031d2:	2301      	movs	r3, #1
 80031d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d017      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	4959      	ldr	r1, [pc, #356]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003200:	d101      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003202:	2301      	movs	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800320e:	2301      	movs	r3, #1
 8003210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d017      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800321e:	4b4e      	ldr	r3, [pc, #312]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003224:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	494a      	ldr	r1, [pc, #296]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800323c:	d101      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800323e:	2301      	movs	r3, #1
 8003240:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800325a:	2301      	movs	r3, #1
 800325c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 808b 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800326c:	4b3a      	ldr	r3, [pc, #232]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	4a39      	ldr	r2, [pc, #228]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	@ 0x40
 8003278:	4b37      	ldr	r3, [pc, #220]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003284:	4b35      	ldr	r3, [pc, #212]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a34      	ldr	r2, [pc, #208]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800328a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fe f976 	bl	8001580 <HAL_GetTick>
 8003294:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003298:	f7fe f972 	bl	8001580 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e38f      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032aa:	4b2c      	ldr	r3, [pc, #176]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b6:	4b28      	ldr	r3, [pc, #160]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d035      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d02e      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d4:	4b20      	ldr	r3, [pc, #128]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032de:	4b1e      	ldr	r3, [pc, #120]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032f6:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032fc:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d114      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe f93a 	bl	8001580 <HAL_GetTick>
 800330c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	e00a      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fe f936 	bl	8001580 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e351      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ee      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800333a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800333e:	d111      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800334c:	4b04      	ldr	r3, [pc, #16]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800334e:	400b      	ands	r3, r1
 8003350:	4901      	ldr	r1, [pc, #4]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
 8003356:	e00b      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003358:	40023800 	.word	0x40023800
 800335c:	40007000 	.word	0x40007000
 8003360:	0ffffcff 	.word	0x0ffffcff
 8003364:	4bac      	ldr	r3, [pc, #688]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4aab      	ldr	r2, [pc, #684]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800336e:	6093      	str	r3, [r2, #8]
 8003370:	4ba9      	ldr	r3, [pc, #676]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337c:	49a6      	ldr	r1, [pc, #664]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337e:	4313      	orrs	r3, r2
 8003380:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800338e:	4ba2      	ldr	r3, [pc, #648]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003394:	4aa0      	ldr	r2, [pc, #640]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800339a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800339e:	4b9e      	ldr	r3, [pc, #632]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a8:	499b      	ldr	r1, [pc, #620]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033bc:	4b96      	ldr	r3, [pc, #600]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ca:	4993      	ldr	r1, [pc, #588]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033de:	4b8e      	ldr	r3, [pc, #568]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ec:	498a      	ldr	r1, [pc, #552]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003400:	4b85      	ldr	r3, [pc, #532]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800340e:	4982      	ldr	r1, [pc, #520]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003422:	4b7d      	ldr	r3, [pc, #500]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003428:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	4979      	ldr	r1, [pc, #484]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003444:	4b74      	ldr	r3, [pc, #464]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	4971      	ldr	r1, [pc, #452]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003466:	4b6c      	ldr	r3, [pc, #432]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	f023 020c 	bic.w	r2, r3, #12
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003474:	4968      	ldr	r1, [pc, #416]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003488:	4b63      	ldr	r3, [pc, #396]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003496:	4960      	ldr	r1, [pc, #384]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b8:	4957      	ldr	r1, [pc, #348]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034cc:	4b52      	ldr	r3, [pc, #328]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034da:	494f      	ldr	r1, [pc, #316]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	4946      	ldr	r1, [pc, #280]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003510:	4b41      	ldr	r3, [pc, #260]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003516:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351e:	493e      	ldr	r1, [pc, #248]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003532:	4b39      	ldr	r3, [pc, #228]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003538:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003540:	4935      	ldr	r1, [pc, #212]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003554:	4b30      	ldr	r3, [pc, #192]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003562:	492d      	ldr	r1, [pc, #180]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d011      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003576:	4b28      	ldr	r3, [pc, #160]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003584:	4924      	ldr	r1, [pc, #144]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035b6:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c4:	4914      	ldr	r1, [pc, #80]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e8:	490b      	ldr	r1, [pc, #44]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00f      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035fc:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003602:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360c:	4902      	ldr	r1, [pc, #8]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003614:	e002      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003628:	4b8a      	ldr	r3, [pc, #552]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800362a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800362e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003638:	4986      	ldr	r1, [pc, #536]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800364c:	4b81      	ldr	r3, [pc, #516]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003652:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800365c:	497d      	ldr	r1, [pc, #500]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d006      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80d6 	beq.w	8003824 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003678:	4b76      	ldr	r3, [pc, #472]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a75      	ldr	r2, [pc, #468]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7fd ff7c 	bl	8001580 <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800368c:	f7fd ff78 	bl	8001580 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	@ 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e195      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800369e:	4b6d      	ldr	r3, [pc, #436]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d021      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11d      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036be:	4b65      	ldr	r3, [pc, #404]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036cc:	4b61      	ldr	r3, [pc, #388]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d2:	0e1b      	lsrs	r3, r3, #24
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	019a      	lsls	r2, r3, #6
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	4958      	ldr	r1, [pc, #352]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02e      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003724:	d129      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003726:	4b4b      	ldr	r3, [pc, #300]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003734:	4b47      	ldr	r3, [pc, #284]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800373a:	0f1b      	lsrs	r3, r3, #28
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	019a      	lsls	r2, r3, #6
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	041b      	lsls	r3, r3, #16
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	071b      	lsls	r3, r3, #28
 800375a:	493e      	ldr	r1, [pc, #248]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003762:	4b3c      	ldr	r3, [pc, #240]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003768:	f023 021f 	bic.w	r2, r3, #31
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	3b01      	subs	r3, #1
 8003772:	4938      	ldr	r1, [pc, #224]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01d      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003786:	4b33      	ldr	r3, [pc, #204]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378c:	0e1b      	lsrs	r3, r3, #24
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003794:	4b2f      	ldr	r3, [pc, #188]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800379a:	0f1b      	lsrs	r3, r3, #28
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	019a      	lsls	r2, r3, #6
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	431a      	orrs	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	061b      	lsls	r3, r3, #24
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	071b      	lsls	r3, r3, #28
 80037ba:	4926      	ldr	r1, [pc, #152]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d011      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	019a      	lsls	r2, r3, #6
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	071b      	lsls	r3, r3, #28
 80037ea:	491a      	ldr	r1, [pc, #104]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037f2:	4b18      	ldr	r3, [pc, #96]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a17      	ldr	r2, [pc, #92]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fe:	f7fd febf 	bl	8001580 <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003806:	f7fd febb 	bl	8001580 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	@ 0x64
 8003812:	d901      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0d8      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003818:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	f040 80ce 	bne.w	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a08      	ldr	r2, [pc, #32]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003838:	f7fd fea2 	bl	8001580 <HAL_GetTick>
 800383c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800383e:	e00b      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003840:	f7fd fe9e 	bl	8001580 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d904      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0bb      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003858:	4b5e      	ldr	r3, [pc, #376]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003864:	d0ec      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02e      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d12a      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800388e:	4b51      	ldr	r3, [pc, #324]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800389c:	4b4d      	ldr	r3, [pc, #308]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	0f1b      	lsrs	r3, r3, #28
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	019a      	lsls	r2, r3, #6
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	061b      	lsls	r3, r3, #24
 80038bc:	431a      	orrs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	071b      	lsls	r3, r3, #28
 80038c2:	4944      	ldr	r1, [pc, #272]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038ca:	4b42      	ldr	r3, [pc, #264]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	493d      	ldr	r1, [pc, #244]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d022      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038f8:	d11d      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038fa:	4b36      	ldr	r3, [pc, #216]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	0e1b      	lsrs	r3, r3, #24
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003908:	4b32      	ldr	r3, [pc, #200]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390e:	0f1b      	lsrs	r3, r3, #28
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	019a      	lsls	r2, r3, #6
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	431a      	orrs	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	061b      	lsls	r3, r3, #24
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	071b      	lsls	r3, r3, #28
 800392e:	4929      	ldr	r1, [pc, #164]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d028      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003942:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	0e1b      	lsrs	r3, r3, #24
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003950:	4b20      	ldr	r3, [pc, #128]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	019a      	lsls	r2, r3, #6
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	431a      	orrs	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	071b      	lsls	r3, r3, #28
 8003976:	4917      	ldr	r1, [pc, #92]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003984:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	4911      	ldr	r1, [pc, #68]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003994:	4b0f      	ldr	r3, [pc, #60]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0e      	ldr	r2, [pc, #56]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fd fdee 	bl	8001580 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039a8:	f7fd fdea 	bl	8001580 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e007      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c6:	d1ef      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800

080039d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e01c      	b.n	8003a24 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	795b      	ldrb	r3, [r3, #5]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fb62 	bl	80010c4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0204 	orr.w	r2, r2, #4
 8003a14:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e09d      	b.n	8003b7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4e:	d009      	beq.n	8003a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
 8003a56:	e005      	b.n	8003a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fb54 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003aa4:	d902      	bls.n	8003aac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e002      	b.n	8003ab2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003aba:	d007      	beq.n	8003acc <HAL_SPI_Init+0xa0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ac4:	d002      	beq.n	8003acc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	ea42 0103 	orr.w	r1, r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	f003 0204 	and.w	r2, r3, #4
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b088      	sub	sp, #32
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b92:	f7fd fcf5 	bl	8001580 <HAL_GetTick>
 8003b96:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d001      	beq.n	8003bac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e15c      	b.n	8003e66 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_SPI_Transmit+0x36>
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e154      	b.n	8003e66 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_SPI_Transmit+0x48>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e14d      	b.n	8003e66 <HAL_SPI_Transmit+0x2e4>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	88fa      	ldrh	r2, [r7, #6]
 8003bf0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c1c:	d10f      	bne.n	8003c3e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d007      	beq.n	8003c5c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c64:	d952      	bls.n	8003d0c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Transmit+0xf2>
 8003c6e:	8b7b      	ldrh	r3, [r7, #26]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d145      	bne.n	8003d00 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	881a      	ldrh	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	1c9a      	adds	r2, r3, #2
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c98:	e032      	b.n	8003d00 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d112      	bne.n	8003cce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb8:	1c9a      	adds	r2, r3, #2
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ccc:	e018      	b.n	8003d00 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cce:	f7fd fc57 	bl	8001580 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d803      	bhi.n	8003ce6 <HAL_SPI_Transmit+0x164>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce4:	d102      	bne.n	8003cec <HAL_SPI_Transmit+0x16a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e0b2      	b.n	8003e66 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1c7      	bne.n	8003c9a <HAL_SPI_Transmit+0x118>
 8003d0a:	e083      	b.n	8003e14 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_Transmit+0x198>
 8003d14:	8b7b      	ldrh	r3, [r7, #26]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d177      	bne.n	8003e0a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d912      	bls.n	8003d4a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b02      	subs	r3, #2
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d48:	e05f      	b.n	8003e0a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d70:	e04b      	b.n	8003e0a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d12b      	bne.n	8003dd8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d912      	bls.n	8003db0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8e:	881a      	ldrh	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b02      	subs	r3, #2
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dae:	e02c      	b.n	8003e0a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dd6:	e018      	b.n	8003e0a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd8:	f7fd fbd2 	bl	8001580 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d803      	bhi.n	8003df0 <HAL_SPI_Transmit+0x26e>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x274>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e02d      	b.n	8003e66 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ae      	bne.n	8003d72 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f947 	bl	80040ac <SPI_EndRxTxTransaction>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e80:	f7fd fb7e 	bl	8001580 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e90:	f7fd fb76 	bl	8001580 <HAL_GetTick>
 8003e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e96:	4b39      	ldr	r3, [pc, #228]	@ (8003f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	015b      	lsls	r3, r3, #5
 8003e9c:	0d1b      	lsrs	r3, r3, #20
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	fb02 f303 	mul.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ea6:	e055      	b.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eae:	d051      	beq.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eb0:	f7fd fb66 	bl	8001580 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d902      	bls.n	8003ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d13d      	bne.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ede:	d111      	bne.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee8:	d004      	beq.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef2:	d107      	bne.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f0c:	d10f      	bne.n	8003f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e018      	b.n	8003f74 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e002      	b.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d19a      	bne.n	8003ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000000 	.word	0x20000000

08003f80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	@ 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f92:	f7fd faf5 	bl	8001580 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003fa2:	f7fd faed 	bl	8001580 <HAL_GetTick>
 8003fa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80040a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00da      	lsls	r2, r3, #3
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	0d1b      	lsrs	r3, r3, #20
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fc8:	e061      	b.n	800408e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003fd0:	d107      	bne.n	8003fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fe8:	d051      	beq.n	800408e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fea:	f7fd fac9 	bl	8001580 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d902      	bls.n	8004000 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d13d      	bne.n	800407c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800400e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004018:	d111      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004022:	d004      	beq.n	800402e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402c:	d107      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800403c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004046:	d10f      	bne.n	8004068 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e011      	b.n	80040a0 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
 8004086:	e002      	b.n	800408e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	3b01      	subs	r3, #1
 800408c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	d195      	bne.n	8003fca <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3728      	adds	r7, #40	@ 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000000 	.word	0x20000000

080040ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff ff5b 	bl	8003f80 <SPI_WaitFifoStateUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e046      	b.n	800416e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040e0:	4b25      	ldr	r3, [pc, #148]	@ (8004178 <SPI_EndRxTxTransaction+0xcc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a25      	ldr	r2, [pc, #148]	@ (800417c <SPI_EndRxTxTransaction+0xd0>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0d5b      	lsrs	r3, r3, #21
 80040ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040fe:	d112      	bne.n	8004126 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	2180      	movs	r1, #128	@ 0x80
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7ff feb0 	bl	8003e70 <SPI_WaitFlagStateUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e023      	b.n	800416e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3b01      	subs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413c:	2b80      	cmp	r3, #128	@ 0x80
 800413e:	d0f2      	beq.n	8004126 <SPI_EndRxTxTransaction+0x7a>
 8004140:	e000      	b.n	8004144 <SPI_EndRxTxTransaction+0x98>
        break;
 8004142:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2200      	movs	r2, #0
 800414c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff15 	bl	8003f80 <SPI_WaitFifoStateUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e000      	b.n	800416e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000000 	.word	0x20000000
 800417c:	165e9f81 	.word	0x165e9f81

08004180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e049      	b.n	8004226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f841 	bl	800422e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 f9e8 	bl	8004594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d001      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e054      	b.n	8004306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a26      	ldr	r2, [pc, #152]	@ (8004314 <HAL_TIM_Base_Start_IT+0xd0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d022      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d01d      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a22      	ldr	r2, [pc, #136]	@ (8004318 <HAL_TIM_Base_Start_IT+0xd4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d018      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a21      	ldr	r2, [pc, #132]	@ (800431c <HAL_TIM_Base_Start_IT+0xd8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <HAL_TIM_Base_Start_IT+0xdc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00e      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004324 <HAL_TIM_Base_Start_IT+0xe0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d009      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004328 <HAL_TIM_Base_Start_IT+0xe4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1b      	ldr	r2, [pc, #108]	@ (800432c <HAL_TIM_Base_Start_IT+0xe8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d115      	bne.n	80042f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <HAL_TIM_Base_Start_IT+0xec>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d015      	beq.n	8004302 <HAL_TIM_Base_Start_IT+0xbe>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042dc:	d011      	beq.n	8004302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ee:	e008      	b.n	8004302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e000      	b.n	8004304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40010400 	.word	0x40010400
 8004328:	40014000 	.word	0x40014000
 800432c:	40001800 	.word	0x40001800
 8004330:	00010007 	.word	0x00010007

08004334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d020      	beq.n	8004398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01b      	beq.n	8004398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0202 	mvn.w	r2, #2
 8004368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8e9 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8db 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f8ec 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d020      	beq.n	80043e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01b      	beq.n	80043e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0204 	mvn.w	r2, #4
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8c3 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8b5 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f8c6 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d020      	beq.n	8004430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0208 	mvn.w	r2, #8
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2204      	movs	r2, #4
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f89d 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f88f 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8a0 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	d020      	beq.n	800447c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01b      	beq.n	800447c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0210 	mvn.w	r2, #16
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2208      	movs	r2, #8
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f877 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f869 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f87a 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00c      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0201 	mvn.w	r2, #1
 8004498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc fd1a 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00c      	beq.n	80044ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f913 	bl	80046f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f90b 	bl	8004708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00c      	beq.n	8004516 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800450e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f834 	bl	800457e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00c      	beq.n	800453a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0220 	mvn.w	r2, #32
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f8d3 	bl	80046e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a43      	ldr	r2, [pc, #268]	@ (80046b4 <TIM_Base_SetConfig+0x120>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a40      	ldr	r2, [pc, #256]	@ (80046b8 <TIM_Base_SetConfig+0x124>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3f      	ldr	r2, [pc, #252]	@ (80046bc <TIM_Base_SetConfig+0x128>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3e      	ldr	r2, [pc, #248]	@ (80046c0 <TIM_Base_SetConfig+0x12c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3d      	ldr	r2, [pc, #244]	@ (80046c4 <TIM_Base_SetConfig+0x130>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a32      	ldr	r2, [pc, #200]	@ (80046b4 <TIM_Base_SetConfig+0x120>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f4:	d027      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2f      	ldr	r2, [pc, #188]	@ (80046b8 <TIM_Base_SetConfig+0x124>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d023      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2e      	ldr	r2, [pc, #184]	@ (80046bc <TIM_Base_SetConfig+0x128>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2d      	ldr	r2, [pc, #180]	@ (80046c0 <TIM_Base_SetConfig+0x12c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2c      	ldr	r2, [pc, #176]	@ (80046c4 <TIM_Base_SetConfig+0x130>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d017      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <TIM_Base_SetConfig+0x134>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <TIM_Base_SetConfig+0x138>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a29      	ldr	r2, [pc, #164]	@ (80046d0 <TIM_Base_SetConfig+0x13c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a28      	ldr	r2, [pc, #160]	@ (80046d4 <TIM_Base_SetConfig+0x140>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a27      	ldr	r2, [pc, #156]	@ (80046d8 <TIM_Base_SetConfig+0x144>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a26      	ldr	r2, [pc, #152]	@ (80046dc <TIM_Base_SetConfig+0x148>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d108      	bne.n	8004658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a0e      	ldr	r2, [pc, #56]	@ (80046b4 <TIM_Base_SetConfig+0x120>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0xf2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a10      	ldr	r2, [pc, #64]	@ (80046c4 <TIM_Base_SetConfig+0x130>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d103      	bne.n	800468e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40010400 	.word	0x40010400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400
 80046d0:	40014800 	.word	0x40014800
 80046d4:	40001800 	.word	0x40001800
 80046d8:	40001c00 	.word	0x40001c00
 80046dc:	40002000 	.word	0x40002000

080046e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e040      	b.n	80047b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fd38 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2224      	movs	r2, #36	@ 0x24
 8004748:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa8c 	bl	8004c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f825 	bl	80047b8 <UART_SetConfig>
 800476e:	4603      	mov	r3, r0
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e01b      	b.n	80047b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fb0b 	bl	8004dc4 <UART_CheckIdleState>
 80047ae:	4603      	mov	r3, r0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4ba6      	ldr	r3, [pc, #664]	@ (8004a7c <UART_SetConfig+0x2c4>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a94      	ldr	r2, [pc, #592]	@ (8004a80 <UART_SetConfig+0x2c8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d120      	bne.n	8004876 <UART_SetConfig+0xbe>
 8004834:	4b93      	ldr	r3, [pc, #588]	@ (8004a84 <UART_SetConfig+0x2cc>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b03      	cmp	r3, #3
 8004840:	d816      	bhi.n	8004870 <UART_SetConfig+0xb8>
 8004842:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <UART_SetConfig+0x90>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	08004859 	.word	0x08004859
 800484c:	08004865 	.word	0x08004865
 8004850:	0800485f 	.word	0x0800485f
 8004854:	0800486b 	.word	0x0800486b
 8004858:	2301      	movs	r3, #1
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e150      	b.n	8004b00 <UART_SetConfig+0x348>
 800485e:	2302      	movs	r3, #2
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e14d      	b.n	8004b00 <UART_SetConfig+0x348>
 8004864:	2304      	movs	r3, #4
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e14a      	b.n	8004b00 <UART_SetConfig+0x348>
 800486a:	2308      	movs	r3, #8
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e147      	b.n	8004b00 <UART_SetConfig+0x348>
 8004870:	2310      	movs	r3, #16
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e144      	b.n	8004b00 <UART_SetConfig+0x348>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a83      	ldr	r2, [pc, #524]	@ (8004a88 <UART_SetConfig+0x2d0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d132      	bne.n	80048e6 <UART_SetConfig+0x12e>
 8004880:	4b80      	ldr	r3, [pc, #512]	@ (8004a84 <UART_SetConfig+0x2cc>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d828      	bhi.n	80048e0 <UART_SetConfig+0x128>
 800488e:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <UART_SetConfig+0xdc>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048c9 	.word	0x080048c9
 8004898:	080048e1 	.word	0x080048e1
 800489c:	080048e1 	.word	0x080048e1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	080048e1 	.word	0x080048e1
 80048b4:	080048cf 	.word	0x080048cf
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048e1 	.word	0x080048e1
 80048c4:	080048db 	.word	0x080048db
 80048c8:	2300      	movs	r3, #0
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e118      	b.n	8004b00 <UART_SetConfig+0x348>
 80048ce:	2302      	movs	r3, #2
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e115      	b.n	8004b00 <UART_SetConfig+0x348>
 80048d4:	2304      	movs	r3, #4
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e112      	b.n	8004b00 <UART_SetConfig+0x348>
 80048da:	2308      	movs	r3, #8
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e10f      	b.n	8004b00 <UART_SetConfig+0x348>
 80048e0:	2310      	movs	r3, #16
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e10c      	b.n	8004b00 <UART_SetConfig+0x348>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a68      	ldr	r2, [pc, #416]	@ (8004a8c <UART_SetConfig+0x2d4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d120      	bne.n	8004932 <UART_SetConfig+0x17a>
 80048f0:	4b64      	ldr	r3, [pc, #400]	@ (8004a84 <UART_SetConfig+0x2cc>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048fa:	2b30      	cmp	r3, #48	@ 0x30
 80048fc:	d013      	beq.n	8004926 <UART_SetConfig+0x16e>
 80048fe:	2b30      	cmp	r3, #48	@ 0x30
 8004900:	d814      	bhi.n	800492c <UART_SetConfig+0x174>
 8004902:	2b20      	cmp	r3, #32
 8004904:	d009      	beq.n	800491a <UART_SetConfig+0x162>
 8004906:	2b20      	cmp	r3, #32
 8004908:	d810      	bhi.n	800492c <UART_SetConfig+0x174>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <UART_SetConfig+0x15c>
 800490e:	2b10      	cmp	r3, #16
 8004910:	d006      	beq.n	8004920 <UART_SetConfig+0x168>
 8004912:	e00b      	b.n	800492c <UART_SetConfig+0x174>
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e0f2      	b.n	8004b00 <UART_SetConfig+0x348>
 800491a:	2302      	movs	r3, #2
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e0ef      	b.n	8004b00 <UART_SetConfig+0x348>
 8004920:	2304      	movs	r3, #4
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0ec      	b.n	8004b00 <UART_SetConfig+0x348>
 8004926:	2308      	movs	r3, #8
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e0e9      	b.n	8004b00 <UART_SetConfig+0x348>
 800492c:	2310      	movs	r3, #16
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e0e6      	b.n	8004b00 <UART_SetConfig+0x348>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a56      	ldr	r2, [pc, #344]	@ (8004a90 <UART_SetConfig+0x2d8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d120      	bne.n	800497e <UART_SetConfig+0x1c6>
 800493c:	4b51      	ldr	r3, [pc, #324]	@ (8004a84 <UART_SetConfig+0x2cc>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004942:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004946:	2bc0      	cmp	r3, #192	@ 0xc0
 8004948:	d013      	beq.n	8004972 <UART_SetConfig+0x1ba>
 800494a:	2bc0      	cmp	r3, #192	@ 0xc0
 800494c:	d814      	bhi.n	8004978 <UART_SetConfig+0x1c0>
 800494e:	2b80      	cmp	r3, #128	@ 0x80
 8004950:	d009      	beq.n	8004966 <UART_SetConfig+0x1ae>
 8004952:	2b80      	cmp	r3, #128	@ 0x80
 8004954:	d810      	bhi.n	8004978 <UART_SetConfig+0x1c0>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <UART_SetConfig+0x1a8>
 800495a:	2b40      	cmp	r3, #64	@ 0x40
 800495c:	d006      	beq.n	800496c <UART_SetConfig+0x1b4>
 800495e:	e00b      	b.n	8004978 <UART_SetConfig+0x1c0>
 8004960:	2300      	movs	r3, #0
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e0cc      	b.n	8004b00 <UART_SetConfig+0x348>
 8004966:	2302      	movs	r3, #2
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e0c9      	b.n	8004b00 <UART_SetConfig+0x348>
 800496c:	2304      	movs	r3, #4
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e0c6      	b.n	8004b00 <UART_SetConfig+0x348>
 8004972:	2308      	movs	r3, #8
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e0c3      	b.n	8004b00 <UART_SetConfig+0x348>
 8004978:	2310      	movs	r3, #16
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e0c0      	b.n	8004b00 <UART_SetConfig+0x348>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a44      	ldr	r2, [pc, #272]	@ (8004a94 <UART_SetConfig+0x2dc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d125      	bne.n	80049d4 <UART_SetConfig+0x21c>
 8004988:	4b3e      	ldr	r3, [pc, #248]	@ (8004a84 <UART_SetConfig+0x2cc>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004996:	d017      	beq.n	80049c8 <UART_SetConfig+0x210>
 8004998:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800499c:	d817      	bhi.n	80049ce <UART_SetConfig+0x216>
 800499e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a2:	d00b      	beq.n	80049bc <UART_SetConfig+0x204>
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a8:	d811      	bhi.n	80049ce <UART_SetConfig+0x216>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <UART_SetConfig+0x1fe>
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b2:	d006      	beq.n	80049c2 <UART_SetConfig+0x20a>
 80049b4:	e00b      	b.n	80049ce <UART_SetConfig+0x216>
 80049b6:	2300      	movs	r3, #0
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e0a1      	b.n	8004b00 <UART_SetConfig+0x348>
 80049bc:	2302      	movs	r3, #2
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e09e      	b.n	8004b00 <UART_SetConfig+0x348>
 80049c2:	2304      	movs	r3, #4
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e09b      	b.n	8004b00 <UART_SetConfig+0x348>
 80049c8:	2308      	movs	r3, #8
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	e098      	b.n	8004b00 <UART_SetConfig+0x348>
 80049ce:	2310      	movs	r3, #16
 80049d0:	77fb      	strb	r3, [r7, #31]
 80049d2:	e095      	b.n	8004b00 <UART_SetConfig+0x348>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004a98 <UART_SetConfig+0x2e0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d125      	bne.n	8004a2a <UART_SetConfig+0x272>
 80049de:	4b29      	ldr	r3, [pc, #164]	@ (8004a84 <UART_SetConfig+0x2cc>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049ec:	d017      	beq.n	8004a1e <UART_SetConfig+0x266>
 80049ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049f2:	d817      	bhi.n	8004a24 <UART_SetConfig+0x26c>
 80049f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049f8:	d00b      	beq.n	8004a12 <UART_SetConfig+0x25a>
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049fe:	d811      	bhi.n	8004a24 <UART_SetConfig+0x26c>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <UART_SetConfig+0x254>
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a08:	d006      	beq.n	8004a18 <UART_SetConfig+0x260>
 8004a0a:	e00b      	b.n	8004a24 <UART_SetConfig+0x26c>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e076      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a12:	2302      	movs	r3, #2
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e073      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e070      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e06d      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a24:	2310      	movs	r3, #16
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e06a      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004a9c <UART_SetConfig+0x2e4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d138      	bne.n	8004aa6 <UART_SetConfig+0x2ee>
 8004a34:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <UART_SetConfig+0x2cc>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a42:	d017      	beq.n	8004a74 <UART_SetConfig+0x2bc>
 8004a44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a48:	d82a      	bhi.n	8004aa0 <UART_SetConfig+0x2e8>
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4e:	d00b      	beq.n	8004a68 <UART_SetConfig+0x2b0>
 8004a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a54:	d824      	bhi.n	8004aa0 <UART_SetConfig+0x2e8>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <UART_SetConfig+0x2aa>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	d006      	beq.n	8004a6e <UART_SetConfig+0x2b6>
 8004a60:	e01e      	b.n	8004aa0 <UART_SetConfig+0x2e8>
 8004a62:	2300      	movs	r3, #0
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e04b      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e048      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	77fb      	strb	r3, [r7, #31]
 8004a72:	e045      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a74:	2308      	movs	r3, #8
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e042      	b.n	8004b00 <UART_SetConfig+0x348>
 8004a7a:	bf00      	nop
 8004a7c:	efff69f3 	.word	0xefff69f3
 8004a80:	40011000 	.word	0x40011000
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40004400 	.word	0x40004400
 8004a8c:	40004800 	.word	0x40004800
 8004a90:	40004c00 	.word	0x40004c00
 8004a94:	40005000 	.word	0x40005000
 8004a98:	40011400 	.word	0x40011400
 8004a9c:	40007800 	.word	0x40007800
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e02c      	b.n	8004b00 <UART_SetConfig+0x348>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a72      	ldr	r2, [pc, #456]	@ (8004c74 <UART_SetConfig+0x4bc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d125      	bne.n	8004afc <UART_SetConfig+0x344>
 8004ab0:	4b71      	ldr	r3, [pc, #452]	@ (8004c78 <UART_SetConfig+0x4c0>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004aba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004abe:	d017      	beq.n	8004af0 <UART_SetConfig+0x338>
 8004ac0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ac4:	d817      	bhi.n	8004af6 <UART_SetConfig+0x33e>
 8004ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aca:	d00b      	beq.n	8004ae4 <UART_SetConfig+0x32c>
 8004acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad0:	d811      	bhi.n	8004af6 <UART_SetConfig+0x33e>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <UART_SetConfig+0x326>
 8004ad6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ada:	d006      	beq.n	8004aea <UART_SetConfig+0x332>
 8004adc:	e00b      	b.n	8004af6 <UART_SetConfig+0x33e>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e00d      	b.n	8004b00 <UART_SetConfig+0x348>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e00a      	b.n	8004b00 <UART_SetConfig+0x348>
 8004aea:	2304      	movs	r3, #4
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e007      	b.n	8004b00 <UART_SetConfig+0x348>
 8004af0:	2308      	movs	r3, #8
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e004      	b.n	8004b00 <UART_SetConfig+0x348>
 8004af6:	2310      	movs	r3, #16
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e001      	b.n	8004b00 <UART_SetConfig+0x348>
 8004afc:	2310      	movs	r3, #16
 8004afe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b08:	d15b      	bne.n	8004bc2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b0a:	7ffb      	ldrb	r3, [r7, #31]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d828      	bhi.n	8004b62 <UART_SetConfig+0x3aa>
 8004b10:	a201      	add	r2, pc, #4	@ (adr r2, 8004b18 <UART_SetConfig+0x360>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b4d 	.word	0x08004b4d
 8004b24:	08004b63 	.word	0x08004b63
 8004b28:	08004b53 	.word	0x08004b53
 8004b2c:	08004b63 	.word	0x08004b63
 8004b30:	08004b63 	.word	0x08004b63
 8004b34:	08004b63 	.word	0x08004b63
 8004b38:	08004b5b 	.word	0x08004b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7fe faca 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004b40:	61b8      	str	r0, [r7, #24]
        break;
 8004b42:	e013      	b.n	8004b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b44:	f7fe fada 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8004b48:	61b8      	str	r0, [r7, #24]
        break;
 8004b4a:	e00f      	b.n	8004b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <UART_SetConfig+0x4c4>)
 8004b4e:	61bb      	str	r3, [r7, #24]
        break;
 8004b50:	e00c      	b.n	8004b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b52:	f7fe f9ad 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8004b56:	61b8      	str	r0, [r7, #24]
        break;
 8004b58:	e008      	b.n	8004b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5e:	61bb      	str	r3, [r7, #24]
        break;
 8004b60:	e004      	b.n	8004b6c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	77bb      	strb	r3, [r7, #30]
        break;
 8004b6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d074      	beq.n	8004c5c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	005a      	lsls	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	441a      	add	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b0f      	cmp	r3, #15
 8004b8c:	d916      	bls.n	8004bbc <UART_SetConfig+0x404>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b94:	d212      	bcs.n	8004bbc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f023 030f 	bic.w	r3, r3, #15
 8004b9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	89fa      	ldrh	r2, [r7, #14]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	e04f      	b.n	8004c5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	77bb      	strb	r3, [r7, #30]
 8004bc0:	e04c      	b.n	8004c5c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bc2:	7ffb      	ldrb	r3, [r7, #31]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d828      	bhi.n	8004c1a <UART_SetConfig+0x462>
 8004bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd0 <UART_SetConfig+0x418>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004c05 	.word	0x08004c05
 8004bdc:	08004c1b 	.word	0x08004c1b
 8004be0:	08004c0b 	.word	0x08004c0b
 8004be4:	08004c1b 	.word	0x08004c1b
 8004be8:	08004c1b 	.word	0x08004c1b
 8004bec:	08004c1b 	.word	0x08004c1b
 8004bf0:	08004c13 	.word	0x08004c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7fe fa6e 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004bf8:	61b8      	str	r0, [r7, #24]
        break;
 8004bfa:	e013      	b.n	8004c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bfc:	f7fe fa7e 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8004c00:	61b8      	str	r0, [r7, #24]
        break;
 8004c02:	e00f      	b.n	8004c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <UART_SetConfig+0x4c4>)
 8004c06:	61bb      	str	r3, [r7, #24]
        break;
 8004c08:	e00c      	b.n	8004c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0a:	f7fe f951 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8004c0e:	61b8      	str	r0, [r7, #24]
        break;
 8004c10:	e008      	b.n	8004c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c16:	61bb      	str	r3, [r7, #24]
        break;
 8004c18:	e004      	b.n	8004c24 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	77bb      	strb	r3, [r7, #30]
        break;
 8004c22:	bf00      	nop
    }

    if (pclk != 0U)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d018      	beq.n	8004c5c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	085a      	lsrs	r2, r3, #1
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	441a      	add	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b0f      	cmp	r3, #15
 8004c42:	d909      	bls.n	8004c58 <UART_SetConfig+0x4a0>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4a:	d205      	bcs.n	8004c58 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	e001      	b.n	8004c5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c68:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40007c00 	.word	0x40007c00
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	00f42400 	.word	0x00f42400

08004c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d7e:	d10a      	bne.n	8004d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b098      	sub	sp, #96	@ 0x60
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd4:	f7fc fbd4 	bl	8001580 <HAL_GetTick>
 8004dd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d12e      	bne.n	8004e46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f88c 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d021      	beq.n	8004e46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e062      	b.n	8004f0c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d149      	bne.n	8004ee8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f856 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d03c      	beq.n	8004ee8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec0:	61fa      	str	r2, [r7, #28]
 8004ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	69b9      	ldr	r1, [r7, #24]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e011      	b.n	8004f0c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3758      	adds	r7, #88	@ 0x58
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	e04f      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f2c:	d04b      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fc fb27 	bl	8001580 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e04e      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d037      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b80      	cmp	r3, #128	@ 0x80
 8004f5a:	d034      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b40      	cmp	r3, #64	@ 0x40
 8004f60:	d031      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d110      	bne.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f838 	bl	8004fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2208      	movs	r2, #8
 8004f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e029      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa0:	d111      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f81e 	bl	8004fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e00f      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d0a0      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b095      	sub	sp, #84	@ 0x54
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005014:	643b      	str	r3, [r7, #64]	@ 0x40
 8005016:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800501a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e6      	bne.n	8004ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3308      	adds	r3, #8
 800502e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	61fb      	str	r3, [r7, #28]
   return(result);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3308      	adds	r3, #8
 8005046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800504e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e5      	bne.n	8005028 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005060:	2b01      	cmp	r3, #1
 8005062:	d118      	bne.n	8005096 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	60bb      	str	r3, [r7, #8]
   return(result);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f023 0310 	bic.w	r3, r3, #16
 8005078:	647b      	str	r3, [r7, #68]	@ 0x44
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6979      	ldr	r1, [r7, #20]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	613b      	str	r3, [r7, #16]
   return(result);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e6      	bne.n	8005064 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050aa:	bf00      	nop
 80050ac:	3754      	adds	r7, #84	@ 0x54
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b8:	b084      	sub	sp, #16
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	f107 001c 	add.w	r0, r7, #28
 80050c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d121      	bne.n	8005116 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	4b21      	ldr	r3, [pc, #132]	@ (8005168 <USB_CoreInit+0xb0>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d105      	bne.n	800510a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa92 	bl	8005634 <USB_CoreReset>
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]
 8005114:	e010      	b.n	8005138 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa86 	bl	8005634 <USB_CoreReset>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005138:	7fbb      	ldrb	r3, [r7, #30]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d10b      	bne.n	8005156 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f043 0206 	orr.w	r2, r3, #6
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005162:	b004      	add	sp, #16
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	ffbdffbf 	.word	0xffbdffbf

0800516c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 0201 	bic.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d115      	bne.n	80051dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051bc:	200a      	movs	r0, #10
 80051be:	f7fc f9eb 	bl	8001598 <HAL_Delay>
      ms += 10U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	330a      	adds	r3, #10
 80051c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fa25 	bl	8005618 <USB_GetMode>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d01e      	beq.n	8005212 <USB_SetCurrentMode+0x84>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80051d8:	d9f0      	bls.n	80051bc <USB_SetCurrentMode+0x2e>
 80051da:	e01a      	b.n	8005212 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d115      	bne.n	800520e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051ee:	200a      	movs	r0, #10
 80051f0:	f7fc f9d2 	bl	8001598 <HAL_Delay>
      ms += 10U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	330a      	adds	r3, #10
 80051f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fa0c 	bl	8005618 <USB_GetMode>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <USB_SetCurrentMode+0x84>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2bc7      	cmp	r3, #199	@ 0xc7
 800520a:	d9f0      	bls.n	80051ee <USB_SetCurrentMode+0x60>
 800520c:	e001      	b.n	8005212 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e005      	b.n	800521e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2bc8      	cmp	r3, #200	@ 0xc8
 8005216:	d101      	bne.n	800521c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005228:	b084      	sub	sp, #16
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	e009      	b.n	800525c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	3340      	adds	r3, #64	@ 0x40
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	2200      	movs	r2, #0
 8005254:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3301      	adds	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b0e      	cmp	r3, #14
 8005260:	d9f2      	bls.n	8005248 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005262:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11c      	bne.n	80052a4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e005      	b.n	80052b0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052b6:	461a      	mov	r2, r3
 80052b8:	2300      	movs	r3, #0
 80052ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052bc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10d      	bne.n	80052e0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d104      	bne.n	80052d6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052cc:	2100      	movs	r1, #0
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f968 	bl	80055a4 <USB_SetDevSpeed>
 80052d4:	e008      	b.n	80052e8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052d6:	2101      	movs	r1, #1
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f963 	bl	80055a4 <USB_SetDevSpeed>
 80052de:	e003      	b.n	80052e8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052e0:	2103      	movs	r1, #3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f95e 	bl	80055a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052e8:	2110      	movs	r1, #16
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f8fa 	bl	80054e4 <USB_FlushTxFifo>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f924 	bl	8005548 <USB_FlushRxFifo>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531c:	461a      	mov	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e043      	b.n	80053bc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800534a:	d118      	bne.n	800537e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535e:	461a      	mov	r2, r3
 8005360:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e013      	b.n	8005390 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005374:	461a      	mov	r2, r3
 8005376:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e008      	b.n	8005390 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538a:	461a      	mov	r2, r3
 800538c:	2300      	movs	r3, #0
 800538e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	461a      	mov	r2, r3
 800539e:	2300      	movs	r3, #0
 80053a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ae:	461a      	mov	r2, r3
 80053b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3301      	adds	r3, #1
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053c0:	461a      	mov	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d3b5      	bcc.n	8005334 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	e043      	b.n	8005456 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053e4:	d118      	bne.n	8005418 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f8:	461a      	mov	r2, r3
 80053fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e013      	b.n	800542a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540e:	461a      	mov	r2, r3
 8005410:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e008      	b.n	800542a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005424:	461a      	mov	r2, r3
 8005426:	2300      	movs	r3, #0
 8005428:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	2300      	movs	r3, #0
 800543a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005448:	461a      	mov	r2, r3
 800544a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800544e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	3301      	adds	r3, #1
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800545a:	461a      	mov	r2, r3
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4293      	cmp	r3, r2
 8005460:	d3b5      	bcc.n	80053ce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005474:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005482:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005484:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f043 0210 	orr.w	r2, r3, #16
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	4b0f      	ldr	r3, [pc, #60]	@ (80054dc <USB_DevInit+0x2b4>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f043 0208 	orr.w	r2, r3, #8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d105      	bne.n	80054cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <USB_DevInit+0x2b8>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d8:	b004      	add	sp, #16
 80054da:	4770      	bx	lr
 80054dc:	803c3800 	.word	0x803c3800
 80054e0:	40000004 	.word	0x40000004

080054e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3301      	adds	r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054fe:	d901      	bls.n	8005504 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e01b      	b.n	800553c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	daf2      	bge.n	80054f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	019b      	lsls	r3, r3, #6
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005528:	d901      	bls.n	800552e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e006      	b.n	800553c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b20      	cmp	r3, #32
 8005538:	d0f0      	beq.n	800551c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005560:	d901      	bls.n	8005566 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e018      	b.n	8005598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	daf2      	bge.n	8005554 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2210      	movs	r2, #16
 8005576:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3301      	adds	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005584:	d901      	bls.n	800558a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e006      	b.n	8005598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b10      	cmp	r3, #16
 8005594:	d0f0      	beq.n	8005578 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055c4:	4313      	orrs	r3, r2
 80055c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055f0:	f023 0303 	bic.w	r3, r3, #3
 80055f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0301 	and.w	r3, r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800564c:	d901      	bls.n	8005652 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e022      	b.n	8005698 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	daf2      	bge.n	8005640 <USB_CoreReset+0xc>

  count = 10U;
 800565a:	230a      	movs	r3, #10
 800565c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800565e:	e002      	b.n	8005666 <USB_CoreReset+0x32>
  {
    count--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3b01      	subs	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f9      	bne.n	8005660 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f043 0201 	orr.w	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005684:	d901      	bls.n	800568a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e006      	b.n	8005698 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b01      	cmp	r3, #1
 8005694:	d0f0      	beq.n	8005678 <USB_CoreReset+0x44>

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80056aa:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <ETH_IRQHandler+0x38>)
 80056ac:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 80056ae:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <ETH_IRQHandler+0x3c>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fc f987 	bl	80019c8 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 80056ba:	4b09      	ldr	r3, [pc, #36]	@ (80056e0 <ETH_IRQHandler+0x3c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <ETH_IRQHandler+0x2e>
 80056c2:	4b08      	ldr	r3, [pc, #32]	@ (80056e4 <ETH_IRQHandler+0x40>)
 80056c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	f3bf 8f6f 	isb	sy
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	2000079c 	.word	0x2000079c
 80056e0:	20000850 	.word	0x20000850
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 80056f0:	2300      	movs	r3, #0
 80056f2:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056fa:	2be0      	cmp	r3, #224	@ 0xe0
 80056fc:	d103      	bne.n	8005706 <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	f043 0320 	orr.w	r3, r3, #32
 8005704:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	f043 0310 	orr.w	r3, r3, #16
 800571a:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005722:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	f043 0308 	orr.w	r3, r3, #8
 8005734:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	f043 0304 	orr.w	r3, r3, #4
 8005746:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800575c:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 800575e:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <HAL_ETH_ErrorCallback+0xb0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d014      	beq.n	8005790 <HAL_ETH_ErrorCallback+0xa8>
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d011      	beq.n	8005790 <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 8005770:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <HAL_ETH_ErrorCallback+0xb0>)
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	7df9      	ldrb	r1, [r7, #23]
 8005776:	f107 030c 	add.w	r3, r7, #12
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	2300      	movs	r3, #0
 800577e:	2201      	movs	r2, #1
 8005780:	f001 fec0 	bl	8007504 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8005784:	4b05      	ldr	r3, [pc, #20]	@ (800579c <HAL_ETH_ErrorCallback+0xb4>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	4a03      	ldr	r2, [pc, #12]	@ (800579c <HAL_ETH_ErrorCallback+0xb4>)
 800578e:	6013      	str	r3, [r2, #0]
    }
}
 8005790:	bf00      	nop
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	2000084c 	.word	0x2000084c
 800579c:	20000850 	.word	0x20000850

080057a0 <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ac:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 80057ae:	4b11      	ldr	r3, [pc, #68]	@ (80057f4 <HAL_ETH_RxCpltCallback+0x54>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d902      	bls.n	80057be <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 80057b8:	4a0e      	ldr	r2, [pc, #56]	@ (80057f4 <HAL_ETH_RxCpltCallback+0x54>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 80057be:	4b0e      	ldr	r3, [pc, #56]	@ (80057f8 <HAL_ETH_RxCpltCallback+0x58>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d011      	beq.n	80057ea <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 80057ca:	4b0b      	ldr	r3, [pc, #44]	@ (80057f8 <HAL_ETH_RxCpltCallback+0x58>)
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f107 0308 	add.w	r3, r7, #8
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	2300      	movs	r3, #0
 80057d6:	2201      	movs	r2, #1
 80057d8:	2101      	movs	r1, #1
 80057da:	f001 fe93 	bl	8007504 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80057de:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <HAL_ETH_RxCpltCallback+0x5c>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	4a05      	ldr	r2, [pc, #20]	@ (80057fc <HAL_ETH_RxCpltCallback+0x5c>)
 80057e8:	6013      	str	r3, [r2, #0]
    }
}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000854 	.word	0x20000854
 80057f8:	2000084c 	.word	0x2000084c
 80057fc:	20000850 	.word	0x20000850

08005800 <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af02      	add	r7, sp, #8
 8005806:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 800580e:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <HAL_ETH_TxCpltCallback+0x54>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	429a      	cmp	r2, r3
 8005816:	d902      	bls.n	800581e <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 8005818:	4a0e      	ldr	r2, [pc, #56]	@ (8005854 <HAL_ETH_TxCpltCallback+0x54>)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 800581e:	4b0e      	ldr	r3, [pc, #56]	@ (8005858 <HAL_ETH_TxCpltCallback+0x58>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d011      	beq.n	800584a <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 800582a:	4b0b      	ldr	r3, [pc, #44]	@ (8005858 <HAL_ETH_TxCpltCallback+0x58>)
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	2201      	movs	r2, #1
 8005838:	2102      	movs	r1, #2
 800583a:	f001 fe63 	bl	8007504 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 800583e:	4b07      	ldr	r3, [pc, #28]	@ (800585c <HAL_ETH_TxCpltCallback+0x5c>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4313      	orrs	r3, r2
 8005846:	4a05      	ldr	r2, [pc, #20]	@ (800585c <HAL_ETH_TxCpltCallback+0x5c>)
 8005848:	6013      	str	r3, [r2, #0]
    }
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000858 	.word	0x20000858
 8005858:	2000084c 	.word	0x2000084c
 800585c:	20000850 	.word	0x20000850

08005860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005876:	f3ef 8305 	mrs	r3, IPSR
 800587a:	60bb      	str	r3, [r7, #8]
  return(result);
 800587c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10f      	bne.n	80058a2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005882:	f3ef 8310 	mrs	r3, PRIMASK
 8005886:	607b      	str	r3, [r7, #4]
  return(result);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d105      	bne.n	800589a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800588e:	f3ef 8311 	mrs	r3, BASEPRI
 8005892:	603b      	str	r3, [r7, #0]
  return(result);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <osKernelInitialize+0x3a>
 800589a:	4b0e      	ldr	r3, [pc, #56]	@ (80058d4 <osKernelInitialize+0x64>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d103      	bne.n	80058aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80058a2:	f06f 0305 	mvn.w	r3, #5
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e00c      	b.n	80058c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058aa:	4b0a      	ldr	r3, [pc, #40]	@ (80058d4 <osKernelInitialize+0x64>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d105      	bne.n	80058be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058b2:	4b08      	ldr	r3, [pc, #32]	@ (80058d4 <osKernelInitialize+0x64>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e002      	b.n	80058c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80058be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058c4:	68fb      	ldr	r3, [r7, #12]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	2000085c 	.word	0x2000085c

080058d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058de:	f3ef 8305 	mrs	r3, IPSR
 80058e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10f      	bne.n	800590a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ea:	f3ef 8310 	mrs	r3, PRIMASK
 80058ee:	607b      	str	r3, [r7, #4]
  return(result);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d105      	bne.n	8005902 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058f6:	f3ef 8311 	mrs	r3, BASEPRI
 80058fa:	603b      	str	r3, [r7, #0]
  return(result);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <osKernelStart+0x3a>
 8005902:	4b0f      	ldr	r3, [pc, #60]	@ (8005940 <osKernelStart+0x68>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d103      	bne.n	8005912 <osKernelStart+0x3a>
    stat = osErrorISR;
 800590a:	f06f 0305 	mvn.w	r3, #5
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	e010      	b.n	8005934 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005912:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <osKernelStart+0x68>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d109      	bne.n	800592e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800591a:	f7ff ffa1 	bl	8005860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800591e:	4b08      	ldr	r3, [pc, #32]	@ (8005940 <osKernelStart+0x68>)
 8005920:	2202      	movs	r2, #2
 8005922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005924:	f001 f8e2 	bl	8006aec <vTaskStartScheduler>
      stat = osOK;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e002      	b.n	8005934 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800592e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005932:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005934:	68fb      	ldr	r3, [r7, #12]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	2000085c 	.word	0x2000085c

08005944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b090      	sub	sp, #64	@ 0x40
 8005948:	af04      	add	r7, sp, #16
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005954:	f3ef 8305 	mrs	r3, IPSR
 8005958:	61fb      	str	r3, [r7, #28]
  return(result);
 800595a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 8090 	bne.w	8005a82 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005962:	f3ef 8310 	mrs	r3, PRIMASK
 8005966:	61bb      	str	r3, [r7, #24]
  return(result);
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d105      	bne.n	800597a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800596e:	f3ef 8311 	mrs	r3, BASEPRI
 8005972:	617b      	str	r3, [r7, #20]
  return(result);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <osThreadNew+0x3e>
 800597a:	4b44      	ldr	r3, [pc, #272]	@ (8005a8c <osThreadNew+0x148>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d07f      	beq.n	8005a82 <osThreadNew+0x13e>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d07c      	beq.n	8005a82 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8005988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800598e:	2318      	movs	r3, #24
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800599a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d045      	beq.n	8005a2e <osThreadNew+0xea>
      if (attr->name != NULL) {
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <osThreadNew+0x6c>
        name = attr->name;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <osThreadNew+0x92>
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	2b38      	cmp	r3, #56	@ 0x38
 80059c8:	d805      	bhi.n	80059d6 <osThreadNew+0x92>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <osThreadNew+0x96>
        return (NULL);
 80059d6:	2300      	movs	r3, #0
 80059d8:	e054      	b.n	8005a84 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	089b      	lsrs	r3, r3, #2
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00e      	beq.n	8005a10 <osThreadNew+0xcc>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	2ba7      	cmp	r3, #167	@ 0xa7
 80059f8:	d90a      	bls.n	8005a10 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d006      	beq.n	8005a10 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <osThreadNew+0xcc>
        mem = 1;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	e010      	b.n	8005a32 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10c      	bne.n	8005a32 <osThreadNew+0xee>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d108      	bne.n	8005a32 <osThreadNew+0xee>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <osThreadNew+0xee>
          mem = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	e001      	b.n	8005a32 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d110      	bne.n	8005a5a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a40:	9202      	str	r2, [sp, #8]
 8005a42:	9301      	str	r3, [sp, #4]
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fe4e 	bl	80066f0 <xTaskCreateStatic>
 8005a54:	4603      	mov	r3, r0
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	e013      	b.n	8005a82 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d110      	bne.n	8005a82 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	f107 0310 	add.w	r3, r7, #16
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fea2 	bl	80067bc <xTaskCreate>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d001      	beq.n	8005a82 <osThreadNew+0x13e>
          hTask = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a82:	693b      	ldr	r3, [r7, #16]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3730      	adds	r7, #48	@ 0x30
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	2000085c 	.word	0x2000085c

08005a90 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a98:	f3ef 8305 	mrs	r3, IPSR
 8005a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a9e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10f      	bne.n	8005ac4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <osDelay+0x3c>
 8005abc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <osDelay+0x58>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d103      	bne.n	8005acc <osDelay+0x3c>
    stat = osErrorISR;
 8005ac4:	f06f 0305 	mvn.w	r3, #5
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	e007      	b.n	8005adc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <osDelay+0x4c>
      vTaskDelay(ticks);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 ffd0 	bl	8006a7c <vTaskDelay>
    }
  }

  return (stat);
 8005adc:	697b      	ldr	r3, [r7, #20]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	2000085c 	.word	0x2000085c

08005aec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4a07      	ldr	r2, [pc, #28]	@ (8005b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8005afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4a06      	ldr	r2, [pc, #24]	@ (8005b1c <vApplicationGetIdleTaskMemory+0x30>)
 8005b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b0a:	601a      	str	r2, [r3, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	20000860 	.word	0x20000860
 8005b1c:	20000908 	.word	0x20000908

08005b20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a07      	ldr	r2, [pc, #28]	@ (8005b4c <vApplicationGetTimerTaskMemory+0x2c>)
 8005b30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4a06      	ldr	r2, [pc, #24]	@ (8005b50 <vApplicationGetTimerTaskMemory+0x30>)
 8005b36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b3e:	601a      	str	r2, [r3, #0]
}
 8005b40:	bf00      	nop
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	20000d08 	.word	0x20000d08
 8005b50:	20000db0 	.word	0x20000db0

08005b54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f103 0208 	add.w	r2, r3, #8
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f103 0208 	add.w	r2, r3, #8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f103 0208 	add.w	r2, r3, #8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	601a      	str	r2, [r3, #0]
}
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c0c:	d103      	bne.n	8005c16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e00c      	b.n	8005c30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3308      	adds	r3, #8
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e002      	b.n	8005c24 <vListInsert+0x2e>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d2f6      	bcs.n	8005c1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6892      	ldr	r2, [r2, #8]
 8005c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6852      	ldr	r2, [r2, #4]
 8005c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d103      	bne.n	8005c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	1e5a      	subs	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd4:	b672      	cpsid	i
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	b662      	cpsie	i
 8005ce4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005cec:	f002 f9c6 	bl	800807c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cfc:	fb01 f303 	mul.w	r3, r1, r3
 8005d00:	441a      	add	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	22ff      	movs	r2, #255	@ 0xff
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	22ff      	movs	r2, #255	@ 0xff
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d114      	bne.n	8005d6c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01a      	beq.n	8005d80 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3310      	adds	r3, #16
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 f978 	bl	8007044 <xTaskRemoveFromEventList>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d012      	beq.n	8005d80 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <xQueueGenericReset+0xd4>)
 8005d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	e009      	b.n	8005d80 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3310      	adds	r3, #16
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff feef 	bl	8005b54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3324      	adds	r3, #36	@ 0x24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff feea 	bl	8005b54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d80:	f002 f9b2 	bl	80080e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d84:	2301      	movs	r3, #1
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08e      	sub	sp, #56	@ 0x38
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	b672      	cpsid	i
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	b662      	cpsie	i
 8005dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dce:	b672      	cpsid	i
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	b662      	cpsie	i
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	e7fd      	b.n	8005de2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <xQueueGenericCreateStatic+0x5e>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <xQueueGenericCreateStatic+0x62>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <xQueueGenericCreateStatic+0x64>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e00:	b672      	cpsid	i
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	b662      	cpsie	i
 8005e10:	623b      	str	r3, [r7, #32]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <xQueueGenericCreateStatic+0x90>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <xQueueGenericCreateStatic+0x94>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <xQueueGenericCreateStatic+0x96>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10d      	bne.n	8005e4a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	b672      	cpsid	i
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	b662      	cpsie	i
 8005e42:	61fb      	str	r3, [r7, #28]
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	e7fd      	b.n	8005e46 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e4a:	2350      	movs	r3, #80	@ 0x50
 8005e4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b50      	cmp	r3, #80	@ 0x50
 8005e52:	d00d      	beq.n	8005e70 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	b672      	cpsid	i
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	b662      	cpsie	i
 8005e68:	61bb      	str	r3, [r7, #24]
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00d      	beq.n	8005e98 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f805 	bl	8005ea2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3730      	adds	r7, #48	@ 0x30
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	e002      	b.n	8005ec4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	69b8      	ldr	r0, [r7, #24]
 8005ed4:	f7ff fef2 	bl	8005cbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ee0:	bf00      	nop
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	@ 0x38
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10d      	bne.n	8005f20 <xQueueGenericSend+0x38>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	b672      	cpsid	i
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	b662      	cpsie	i
 8005f18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	e7fd      	b.n	8005f1c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d103      	bne.n	8005f2e <xQueueGenericSend+0x46>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <xQueueGenericSend+0x4a>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericSend+0x4c>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10d      	bne.n	8005f54 <xQueueGenericSend+0x6c>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	b672      	cpsid	i
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	b662      	cpsie	i
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	e7fd      	b.n	8005f50 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d103      	bne.n	8005f62 <xQueueGenericSend+0x7a>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <xQueueGenericSend+0x7e>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <xQueueGenericSend+0x80>
 8005f66:	2300      	movs	r3, #0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10d      	bne.n	8005f88 <xQueueGenericSend+0xa0>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f70:	b672      	cpsid	i
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	b662      	cpsie	i
 8005f80:	623b      	str	r3, [r7, #32]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f88:	f001 fa2a 	bl	80073e0 <xTaskGetSchedulerState>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <xQueueGenericSend+0xb0>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <xQueueGenericSend+0xb4>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <xQueueGenericSend+0xb6>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10d      	bne.n	8005fbe <xQueueGenericSend+0xd6>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	b672      	cpsid	i
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	b662      	cpsie	i
 8005fb6:	61fb      	str	r3, [r7, #28]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fbe:	f002 f85d 	bl	800807c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <xQueueGenericSend+0xec>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d129      	bne.n	8006028 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fda:	f000 fa1b 	bl	8006414 <prvCopyDataToQueue>
 8005fde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d010      	beq.n	800600a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	3324      	adds	r3, #36	@ 0x24
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 f829 	bl	8007044 <xTaskRemoveFromEventList>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80060f8 <xQueueGenericSend+0x210>)
 8005ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	e00a      	b.n	8006020 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006010:	4b39      	ldr	r3, [pc, #228]	@ (80060f8 <xQueueGenericSend+0x210>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006020:	f002 f862 	bl	80080e8 <vPortExitCritical>
				return pdPASS;
 8006024:	2301      	movs	r3, #1
 8006026:	e063      	b.n	80060f0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800602e:	f002 f85b 	bl	80080e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006032:	2300      	movs	r3, #0
 8006034:	e05c      	b.n	80060f0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	4618      	mov	r0, r3
 8006042:	f001 f865 	bl	8007110 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006046:	2301      	movs	r3, #1
 8006048:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800604a:	f002 f84d 	bl	80080e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800604e:	f000 fdc1 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006052:	f002 f813 	bl	800807c <vPortEnterCritical>
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800605c:	b25b      	sxtb	r3, r3
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006062:	d103      	bne.n	800606c <xQueueGenericSend+0x184>
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006072:	b25b      	sxtb	r3, r3
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006078:	d103      	bne.n	8006082 <xQueueGenericSend+0x19a>
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006082:	f002 f831 	bl	80080e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006086:	1d3a      	adds	r2, r7, #4
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	4611      	mov	r1, r2
 800608e:	4618      	mov	r0, r3
 8006090:	f001 f854 	bl	800713c <xTaskCheckForTimeOut>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d124      	bne.n	80060e4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800609a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800609c:	f000 fab2 	bl	8006604 <prvIsQueueFull>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d018      	beq.n	80060d8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	3310      	adds	r3, #16
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	4611      	mov	r1, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 ff72 	bl	8006f98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060b6:	f000 fa3d 	bl	8006534 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060ba:	f000 fd99 	bl	8006bf0 <xTaskResumeAll>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f47f af7c 	bne.w	8005fbe <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80060c6:	4b0c      	ldr	r3, [pc, #48]	@ (80060f8 <xQueueGenericSend+0x210>)
 80060c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	e772      	b.n	8005fbe <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060da:	f000 fa2b 	bl	8006534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060de:	f000 fd87 	bl	8006bf0 <xTaskResumeAll>
 80060e2:	e76c      	b.n	8005fbe <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060e6:	f000 fa25 	bl	8006534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060ea:	f000 fd81 	bl	8006bf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3738      	adds	r7, #56	@ 0x38
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08e      	sub	sp, #56	@ 0x38
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10d      	bne.n	8006130 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	b672      	cpsid	i
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	b662      	cpsie	i
 8006128:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	e7fd      	b.n	800612c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <xQueueGenericSendFromISR+0x42>
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <xQueueGenericSendFromISR+0x46>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueGenericSendFromISR+0x48>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10d      	bne.n	8006164 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	b672      	cpsid	i
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	b662      	cpsie	i
 800615c:	623b      	str	r3, [r7, #32]
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d103      	bne.n	8006172 <xQueueGenericSendFromISR+0x76>
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <xQueueGenericSendFromISR+0x7a>
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <xQueueGenericSendFromISR+0x7c>
 8006176:	2300      	movs	r3, #0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10d      	bne.n	8006198 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	b672      	cpsid	i
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	b662      	cpsie	i
 8006190:	61fb      	str	r3, [r7, #28]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006198:	f002 f858 	bl	800824c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800619c:	f3ef 8211 	mrs	r2, BASEPRI
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	b672      	cpsid	i
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	b662      	cpsie	i
 80061b4:	61ba      	str	r2, [r7, #24]
 80061b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d302      	bcc.n	80061ce <xQueueGenericSendFromISR+0xd2>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d12c      	bne.n	8006228 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061de:	f000 f919 	bl	8006414 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ea:	d112      	bne.n	8006212 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d016      	beq.n	8006222 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	3324      	adds	r3, #36	@ 0x24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 ff23 	bl	8007044 <xTaskRemoveFromEventList>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e007      	b.n	8006222 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006212:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006216:	3301      	adds	r3, #1
 8006218:	b2db      	uxtb	r3, r3
 800621a:	b25a      	sxtb	r2, r3
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006222:	2301      	movs	r3, #1
 8006224:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006226:	e001      	b.n	800622c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006228:	2300      	movs	r3, #0
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34
 800622c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800623a:	4618      	mov	r0, r3
 800623c:	3738      	adds	r7, #56	@ 0x38
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	@ 0x30
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006250:	2300      	movs	r3, #0
 8006252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10d      	bne.n	800627a <xQueueReceive+0x36>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006262:	b672      	cpsid	i
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	b662      	cpsie	i
 8006272:	623b      	str	r3, [r7, #32]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <xQueueReceive+0x44>
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <xQueueReceive+0x48>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <xQueueReceive+0x4a>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10d      	bne.n	80062ae <xQueueReceive+0x6a>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	b672      	cpsid	i
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	b662      	cpsie	i
 80062a6:	61fb      	str	r3, [r7, #28]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062ae:	f001 f897 	bl	80073e0 <xTaskGetSchedulerState>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <xQueueReceive+0x7a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <xQueueReceive+0x7e>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueReceive+0x80>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10d      	bne.n	80062e4 <xQueueReceive+0xa0>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062cc:	b672      	cpsid	i
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	b662      	cpsie	i
 80062dc:	61bb      	str	r3, [r7, #24]
}
 80062de:	bf00      	nop
 80062e0:	bf00      	nop
 80062e2:	e7fd      	b.n	80062e0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062e4:	f001 feca 	bl	800807c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01f      	beq.n	8006334 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062f8:	f000 f8f6 	bl	80064e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	1e5a      	subs	r2, r3, #1
 8006300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006302:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00f      	beq.n	800632c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	3310      	adds	r3, #16
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fe97 	bl	8007044 <xTaskRemoveFromEventList>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800631c:	4b3c      	ldr	r3, [pc, #240]	@ (8006410 <xQueueReceive+0x1cc>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800632c:	f001 fedc 	bl	80080e8 <vPortExitCritical>
				return pdPASS;
 8006330:	2301      	movs	r3, #1
 8006332:	e069      	b.n	8006408 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800633a:	f001 fed5 	bl	80080e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800633e:	2300      	movs	r3, #0
 8006340:	e062      	b.n	8006408 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006348:	f107 0310 	add.w	r3, r7, #16
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fedf 	bl	8007110 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006356:	f001 fec7 	bl	80080e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800635a:	f000 fc3b 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800635e:	f001 fe8d 	bl	800807c <vPortEnterCritical>
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006368:	b25b      	sxtb	r3, r3
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800636e:	d103      	bne.n	8006378 <xQueueReceive+0x134>
 8006370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800637e:	b25b      	sxtb	r3, r3
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006384:	d103      	bne.n	800638e <xQueueReceive+0x14a>
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800638e:	f001 feab 	bl	80080e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006392:	1d3a      	adds	r2, r7, #4
 8006394:	f107 0310 	add.w	r3, r7, #16
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fece 	bl	800713c <xTaskCheckForTimeOut>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d123      	bne.n	80063ee <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a8:	f000 f916 	bl	80065d8 <prvIsQueueEmpty>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d017      	beq.n	80063e2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	3324      	adds	r3, #36	@ 0x24
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	4611      	mov	r1, r2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fdec 	bl	8006f98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063c2:	f000 f8b7 	bl	8006534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063c6:	f000 fc13 	bl	8006bf0 <xTaskResumeAll>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d189      	bne.n	80062e4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80063d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <xQueueReceive+0x1cc>)
 80063d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	e780      	b.n	80062e4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063e4:	f000 f8a6 	bl	8006534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063e8:	f000 fc02 	bl	8006bf0 <xTaskResumeAll>
 80063ec:	e77a      	b.n	80062e4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063f0:	f000 f8a0 	bl	8006534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063f4:	f000 fbfc 	bl	8006bf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063fa:	f000 f8ed 	bl	80065d8 <prvIsQueueEmpty>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	f43f af6f 	beq.w	80062e4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006406:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006408:	4618      	mov	r0, r3
 800640a:	3730      	adds	r7, #48	@ 0x30
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006428:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d14d      	bne.n	80064d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 ffec 	bl	800741c <xTaskPriorityDisinherit>
 8006444:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	609a      	str	r2, [r3, #8]
 800644c:	e043      	b.n	80064d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d119      	bne.n	8006488 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6858      	ldr	r0, [r3, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645c:	461a      	mov	r2, r3
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	f002 f9b0 	bl	80087c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646c:	441a      	add	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	d32b      	bcc.n	80064d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	e026      	b.n	80064d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68d8      	ldr	r0, [r3, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006490:	461a      	mov	r2, r3
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	f002 f996 	bl	80087c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a0:	425b      	negs	r3, r3
 80064a2:	441a      	add	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d207      	bcs.n	80064c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064bc:	425b      	negs	r3, r3
 80064be:	441a      	add	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d105      	bne.n	80064d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80064de:	697b      	ldr	r3, [r7, #20]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d018      	beq.n	800652c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	441a      	add	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	429a      	cmp	r2, r3
 8006512:	d303      	bcc.n	800651c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68d9      	ldr	r1, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	461a      	mov	r2, r3
 8006526:	6838      	ldr	r0, [r7, #0]
 8006528:	f002 f94c 	bl	80087c4 <memcpy>
	}
}
 800652c:	bf00      	nop
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800653c:	f001 fd9e 	bl	800807c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006546:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006548:	e011      	b.n	800656e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	d012      	beq.n	8006578 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3324      	adds	r3, #36	@ 0x24
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fd74 	bl	8007044 <xTaskRemoveFromEventList>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006562:	f000 fe53 	bl	800720c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	3b01      	subs	r3, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800656e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006572:	2b00      	cmp	r3, #0
 8006574:	dce9      	bgt.n	800654a <prvUnlockQueue+0x16>
 8006576:	e000      	b.n	800657a <prvUnlockQueue+0x46>
					break;
 8006578:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	22ff      	movs	r2, #255	@ 0xff
 800657e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006582:	f001 fdb1 	bl	80080e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006586:	f001 fd79 	bl	800807c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006590:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006592:	e011      	b.n	80065b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d012      	beq.n	80065c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3310      	adds	r3, #16
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fd4f 	bl	8007044 <xTaskRemoveFromEventList>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065ac:	f000 fe2e 	bl	800720c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dce9      	bgt.n	8006594 <prvUnlockQueue+0x60>
 80065c0:	e000      	b.n	80065c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	22ff      	movs	r2, #255	@ 0xff
 80065c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80065cc:	f001 fd8c 	bl	80080e8 <vPortExitCritical>
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065e0:	f001 fd4c 	bl	800807c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065ec:	2301      	movs	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e001      	b.n	80065f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f6:	f001 fd77 	bl	80080e8 <vPortExitCritical>

	return xReturn;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800660c:	f001 fd36 	bl	800807c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006618:	429a      	cmp	r2, r3
 800661a:	d102      	bne.n	8006622 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e001      	b.n	8006626 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006626:	f001 fd5f 	bl	80080e8 <vPortExitCritical>

	return xReturn;
 800662a:	68fb      	ldr	r3, [r7, #12]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e014      	b.n	800666e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006644:	4a0f      	ldr	r2, [pc, #60]	@ (8006684 <vQueueAddToRegistry+0x50>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10b      	bne.n	8006668 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006650:	490c      	ldr	r1, [pc, #48]	@ (8006684 <vQueueAddToRegistry+0x50>)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800665a:	4a0a      	ldr	r2, [pc, #40]	@ (8006684 <vQueueAddToRegistry+0x50>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4413      	add	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006666:	e006      	b.n	8006676 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3301      	adds	r3, #1
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b07      	cmp	r3, #7
 8006672:	d9e7      	bls.n	8006644 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	200015b0 	.word	0x200015b0

08006688 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006698:	f001 fcf0 	bl	800807c <vPortEnterCritical>
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066a8:	d103      	bne.n	80066b2 <vQueueWaitForMessageRestricted+0x2a>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066be:	d103      	bne.n	80066c8 <vQueueWaitForMessageRestricted+0x40>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066c8:	f001 fd0e 	bl	80080e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	3324      	adds	r3, #36	@ 0x24
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fc83 	bl	8006fe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066e2:	6978      	ldr	r0, [r7, #20]
 80066e4:	f7ff ff26 	bl	8006534 <prvUnlockQueue>
	}
 80066e8:	bf00      	nop
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08e      	sub	sp, #56	@ 0x38
 80066f4:	af04      	add	r7, sp, #16
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10d      	bne.n	8006720 <xTaskCreateStatic+0x30>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	b672      	cpsid	i
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	b662      	cpsie	i
 8006718:	623b      	str	r3, [r7, #32]
}
 800671a:	bf00      	nop
 800671c:	bf00      	nop
 800671e:	e7fd      	b.n	800671c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <xTaskCreateStatic+0x52>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	b672      	cpsid	i
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	b662      	cpsie	i
 800673a:	61fb      	str	r3, [r7, #28]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006742:	23a8      	movs	r3, #168	@ 0xa8
 8006744:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2ba8      	cmp	r3, #168	@ 0xa8
 800674a:	d00d      	beq.n	8006768 <xTaskCreateStatic+0x78>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	b672      	cpsid	i
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	b662      	cpsie	i
 8006760:	61bb      	str	r3, [r7, #24]
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006768:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01e      	beq.n	80067ae <xTaskCreateStatic+0xbe>
 8006770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01b      	beq.n	80067ae <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800677e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	2202      	movs	r2, #2
 8006784:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006788:	2300      	movs	r3, #0
 800678a:	9303      	str	r3, [sp, #12]
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	9302      	str	r3, [sp, #8]
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f851 	bl	8006848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067a8:	f000 f8f8 	bl	800699c <prvAddNewTaskToReadyList>
 80067ac:	e001      	b.n	80067b2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067b2:	697b      	ldr	r3, [r7, #20]
	}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3728      	adds	r7, #40	@ 0x28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08c      	sub	sp, #48	@ 0x30
 80067c0:	af04      	add	r7, sp, #16
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	4613      	mov	r3, r2
 80067ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 fd81 	bl	80082d8 <pvPortMalloc>
 80067d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00e      	beq.n	80067fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067de:	20a8      	movs	r0, #168	@ 0xa8
 80067e0:	f001 fd7a 	bl	80082d8 <pvPortMalloc>
 80067e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80067f2:	e005      	b.n	8006800 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067f4:	6978      	ldr	r0, [r7, #20]
 80067f6:	f001 fe3d 	bl	8008474 <vPortFree>
 80067fa:	e001      	b.n	8006800 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d017      	beq.n	8006836 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	2300      	movs	r3, #0
 8006812:	9303      	str	r3, [sp, #12]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	9302      	str	r3, [sp, #8]
 8006818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f80f 	bl	8006848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800682a:	69f8      	ldr	r0, [r7, #28]
 800682c:	f000 f8b6 	bl	800699c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006830:	2301      	movs	r3, #1
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	e002      	b.n	800683c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800683a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800683c:	69bb      	ldr	r3, [r7, #24]
	}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	461a      	mov	r2, r3
 8006860:	21a5      	movs	r1, #165	@ 0xa5
 8006862:	f001 ff23 	bl	80086ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006870:	440b      	add	r3, r1
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f023 0307 	bic.w	r3, r3, #7
 800687e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00d      	beq.n	80068a6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	b672      	cpsid	i
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	b662      	cpsie	i
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01f      	beq.n	80068ec <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ac:	2300      	movs	r3, #0
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e012      	b.n	80068d8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	4413      	add	r3, r2
 80068b8:	7819      	ldrb	r1, [r3, #0]
 80068ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	4413      	add	r3, r2
 80068c0:	3334      	adds	r3, #52	@ 0x34
 80068c2:	460a      	mov	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d006      	beq.n	80068e0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	3301      	adds	r3, #1
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d9e9      	bls.n	80068b2 <prvInitialiseNewTask+0x6a>
 80068de:	e000      	b.n	80068e2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80068e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068ea:	e003      	b.n	80068f4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	2b37      	cmp	r3, #55	@ 0x37
 80068f8:	d901      	bls.n	80068fe <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068fa:	2337      	movs	r3, #55	@ 0x37
 80068fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006902:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006908:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	2200      	movs	r2, #0
 800690e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	3304      	adds	r3, #4
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff f93d 	bl	8005b94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	3318      	adds	r3, #24
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff f938 	bl	8005b94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006928:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006938:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2200      	movs	r2, #0
 800693e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	2200      	movs	r2, #0
 8006946:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	3354      	adds	r3, #84	@ 0x54
 800694e:	224c      	movs	r2, #76	@ 0x4c
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f001 feaa 	bl	80086ac <memset>
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	4a0d      	ldr	r2, [pc, #52]	@ (8006990 <prvInitialiseNewTask+0x148>)
 800695c:	659a      	str	r2, [r3, #88]	@ 0x58
 800695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006960:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <prvInitialiseNewTask+0x14c>)
 8006962:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	4a0c      	ldr	r2, [pc, #48]	@ (8006998 <prvInitialiseNewTask+0x150>)
 8006968:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	68f9      	ldr	r1, [r7, #12]
 800696e:	69b8      	ldr	r0, [r7, #24]
 8006970:	f001 fa72 	bl	8007e58 <pxPortInitialiseStack>
 8006974:	4602      	mov	r2, r0
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006986:	bf00      	nop
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	2000583c 	.word	0x2000583c
 8006994:	200058a4 	.word	0x200058a4
 8006998:	2000590c 	.word	0x2000590c

0800699c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069a4:	f001 fb6a 	bl	800807c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069c0:	4b27      	ldr	r3, [pc, #156]	@ (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d110      	bne.n	80069ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069c8:	f000 fc44 	bl	8007254 <prvInitialiseTaskLists>
 80069cc:	e00d      	b.n	80069ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069ce:	4b26      	ldr	r3, [pc, #152]	@ (8006a68 <prvAddNewTaskToReadyList+0xcc>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069d6:	4b23      	ldr	r3, [pc, #140]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d802      	bhi.n	80069ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069ea:	4b20      	ldr	r3, [pc, #128]	@ (8006a6c <prvAddNewTaskToReadyList+0xd0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3301      	adds	r3, #1
 80069f0:	4a1e      	ldr	r2, [pc, #120]	@ (8006a6c <prvAddNewTaskToReadyList+0xd0>)
 80069f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069f4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <prvAddNewTaskToReadyList+0xd0>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a00:	4b1b      	ldr	r3, [pc, #108]	@ (8006a70 <prvAddNewTaskToReadyList+0xd4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d903      	bls.n	8006a10 <prvAddNewTaskToReadyList+0x74>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a18      	ldr	r2, [pc, #96]	@ (8006a70 <prvAddNewTaskToReadyList+0xd4>)
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4a15      	ldr	r2, [pc, #84]	@ (8006a74 <prvAddNewTaskToReadyList+0xd8>)
 8006a1e:	441a      	add	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7ff f8c1 	bl	8005bae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a2c:	f001 fb5c 	bl	80080e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a30:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <prvAddNewTaskToReadyList+0xcc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00e      	beq.n	8006a56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a38:	4b0a      	ldr	r3, [pc, #40]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d207      	bcs.n	8006a56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a46:	4b0c      	ldr	r3, [pc, #48]	@ (8006a78 <prvAddNewTaskToReadyList+0xdc>)
 8006a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20001ac4 	.word	0x20001ac4
 8006a64:	200015f0 	.word	0x200015f0
 8006a68:	20001ad0 	.word	0x20001ad0
 8006a6c:	20001ae0 	.word	0x20001ae0
 8006a70:	20001acc 	.word	0x20001acc
 8006a74:	200015f4 	.word	0x200015f4
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01a      	beq.n	8006ac4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ae4 <vTaskDelay+0x68>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00d      	beq.n	8006ab2 <vTaskDelay+0x36>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	b672      	cpsid	i
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	b662      	cpsie	i
 8006aaa:	60bb      	str	r3, [r7, #8]
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	e7fd      	b.n	8006aae <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006ab2:	f000 f88f 	bl	8006bd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fe11 	bl	80076e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006abe:	f000 f897 	bl	8006bf0 <xTaskResumeAll>
 8006ac2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d107      	bne.n	8006ada <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006aca:	4b07      	ldr	r3, [pc, #28]	@ (8006ae8 <vTaskDelay+0x6c>)
 8006acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20001aec 	.word	0x20001aec
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	@ 0x28
 8006af0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006afa:	463a      	mov	r2, r7
 8006afc:	1d39      	adds	r1, r7, #4
 8006afe:	f107 0308 	add.w	r3, r7, #8
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fff2 	bl	8005aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	9202      	str	r2, [sp, #8]
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	2300      	movs	r3, #0
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	2300      	movs	r3, #0
 8006b18:	460a      	mov	r2, r1
 8006b1a:	4926      	ldr	r1, [pc, #152]	@ (8006bb4 <vTaskStartScheduler+0xc8>)
 8006b1c:	4826      	ldr	r0, [pc, #152]	@ (8006bb8 <vTaskStartScheduler+0xcc>)
 8006b1e:	f7ff fde7 	bl	80066f0 <xTaskCreateStatic>
 8006b22:	4603      	mov	r3, r0
 8006b24:	4a25      	ldr	r2, [pc, #148]	@ (8006bbc <vTaskStartScheduler+0xd0>)
 8006b26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b28:	4b24      	ldr	r3, [pc, #144]	@ (8006bbc <vTaskStartScheduler+0xd0>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b30:	2301      	movs	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e001      	b.n	8006b3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d102      	bne.n	8006b46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b40:	f000 fe22 	bl	8007788 <xTimerCreateTimerTask>
 8006b44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d11d      	bne.n	8006b88 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b50:	b672      	cpsid	i
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	b662      	cpsie	i
 8006b60:	613b      	str	r3, [r7, #16]
}
 8006b62:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b64:	4b16      	ldr	r3, [pc, #88]	@ (8006bc0 <vTaskStartScheduler+0xd4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3354      	adds	r3, #84	@ 0x54
 8006b6a:	4a16      	ldr	r2, [pc, #88]	@ (8006bc4 <vTaskStartScheduler+0xd8>)
 8006b6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b6e:	4b16      	ldr	r3, [pc, #88]	@ (8006bc8 <vTaskStartScheduler+0xdc>)
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b76:	4b15      	ldr	r3, [pc, #84]	@ (8006bcc <vTaskStartScheduler+0xe0>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b7c:	4b14      	ldr	r3, [pc, #80]	@ (8006bd0 <vTaskStartScheduler+0xe4>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b82:	f001 f9fd 	bl	8007f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b86:	e011      	b.n	8006bac <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b8e:	d10d      	bne.n	8006bac <vTaskStartScheduler+0xc0>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b94:	b672      	cpsid	i
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	b662      	cpsie	i
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <vTaskStartScheduler+0xbc>
}
 8006bac:	bf00      	nop
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	080088b0 	.word	0x080088b0
 8006bb8:	08007225 	.word	0x08007225
 8006bbc:	20001ae8 	.word	0x20001ae8
 8006bc0:	200015f0 	.word	0x200015f0
 8006bc4:	20000010 	.word	0x20000010
 8006bc8:	20001ae4 	.word	0x20001ae4
 8006bcc:	20001ad0 	.word	0x20001ad0
 8006bd0:	20001ac8 	.word	0x20001ac8

08006bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006bd8:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <vTaskSuspendAll+0x18>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	4a03      	ldr	r2, [pc, #12]	@ (8006bec <vTaskSuspendAll+0x18>)
 8006be0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006be2:	bf00      	nop
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	20001aec 	.word	0x20001aec

08006bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bfe:	4b43      	ldr	r3, [pc, #268]	@ (8006d0c <xTaskResumeAll+0x11c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10d      	bne.n	8006c22 <xTaskResumeAll+0x32>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	b672      	cpsid	i
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	b662      	cpsie	i
 8006c1a:	603b      	str	r3, [r7, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c22:	f001 fa2b 	bl	800807c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c26:	4b39      	ldr	r3, [pc, #228]	@ (8006d0c <xTaskResumeAll+0x11c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	4a37      	ldr	r2, [pc, #220]	@ (8006d0c <xTaskResumeAll+0x11c>)
 8006c2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c30:	4b36      	ldr	r3, [pc, #216]	@ (8006d0c <xTaskResumeAll+0x11c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d162      	bne.n	8006cfe <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c38:	4b35      	ldr	r3, [pc, #212]	@ (8006d10 <xTaskResumeAll+0x120>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d05e      	beq.n	8006cfe <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c40:	e02f      	b.n	8006ca2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c42:	4b34      	ldr	r3, [pc, #208]	@ (8006d14 <xTaskResumeAll+0x124>)
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3318      	adds	r3, #24
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff f80a 	bl	8005c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff f805 	bl	8005c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c62:	4b2d      	ldr	r3, [pc, #180]	@ (8006d18 <xTaskResumeAll+0x128>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d903      	bls.n	8006c72 <xTaskResumeAll+0x82>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006d18 <xTaskResumeAll+0x128>)
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4a27      	ldr	r2, [pc, #156]	@ (8006d1c <xTaskResumeAll+0x12c>)
 8006c80:	441a      	add	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f7fe ff90 	bl	8005bae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c92:	4b23      	ldr	r3, [pc, #140]	@ (8006d20 <xTaskResumeAll+0x130>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d302      	bcc.n	8006ca2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006c9c:	4b21      	ldr	r3, [pc, #132]	@ (8006d24 <xTaskResumeAll+0x134>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8006d14 <xTaskResumeAll+0x124>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1cb      	bne.n	8006c42 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cb0:	f000 fb76 	bl	80073a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d28 <xTaskResumeAll+0x138>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d010      	beq.n	8006ce2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cc0:	f000 f846 	bl	8006d50 <xTaskIncrementTick>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006cca:	4b16      	ldr	r3, [pc, #88]	@ (8006d24 <xTaskResumeAll+0x134>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f1      	bne.n	8006cc0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006cdc:	4b12      	ldr	r3, [pc, #72]	@ (8006d28 <xTaskResumeAll+0x138>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ce2:	4b10      	ldr	r3, [pc, #64]	@ (8006d24 <xTaskResumeAll+0x134>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cea:	2301      	movs	r3, #1
 8006cec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cee:	4b0f      	ldr	r3, [pc, #60]	@ (8006d2c <xTaskResumeAll+0x13c>)
 8006cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cfe:	f001 f9f3 	bl	80080e8 <vPortExitCritical>

	return xAlreadyYielded;
 8006d02:	68bb      	ldr	r3, [r7, #8]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20001aec 	.word	0x20001aec
 8006d10:	20001ac4 	.word	0x20001ac4
 8006d14:	20001a84 	.word	0x20001a84
 8006d18:	20001acc 	.word	0x20001acc
 8006d1c:	200015f4 	.word	0x200015f4
 8006d20:	200015f0 	.word	0x200015f0
 8006d24:	20001ad8 	.word	0x20001ad8
 8006d28:	20001ad4 	.word	0x20001ad4
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d36:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <xTaskGetTickCount+0x1c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d3c:	687b      	ldr	r3, [r7, #4]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20001ac8 	.word	0x20001ac8

08006d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d5a:	4b50      	ldr	r3, [pc, #320]	@ (8006e9c <xTaskIncrementTick+0x14c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 808c 	bne.w	8006e7c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d64:	4b4e      	ldr	r3, [pc, #312]	@ (8006ea0 <xTaskIncrementTick+0x150>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8006ea0 <xTaskIncrementTick+0x150>)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d123      	bne.n	8006dc0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d78:	4b4a      	ldr	r3, [pc, #296]	@ (8006ea4 <xTaskIncrementTick+0x154>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00d      	beq.n	8006d9e <xTaskIncrementTick+0x4e>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d86:	b672      	cpsid	i
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	b662      	cpsie	i
 8006d96:	603b      	str	r3, [r7, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	e7fd      	b.n	8006d9a <xTaskIncrementTick+0x4a>
 8006d9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ea4 <xTaskIncrementTick+0x154>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	4b40      	ldr	r3, [pc, #256]	@ (8006ea8 <xTaskIncrementTick+0x158>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ea4 <xTaskIncrementTick+0x154>)
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	4a3e      	ldr	r2, [pc, #248]	@ (8006ea8 <xTaskIncrementTick+0x158>)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	4b3e      	ldr	r3, [pc, #248]	@ (8006eac <xTaskIncrementTick+0x15c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4a3c      	ldr	r2, [pc, #240]	@ (8006eac <xTaskIncrementTick+0x15c>)
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	f000 faf0 	bl	80073a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8006eb0 <xTaskIncrementTick+0x160>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d349      	bcc.n	8006e5e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dca:	4b36      	ldr	r3, [pc, #216]	@ (8006ea4 <xTaskIncrementTick+0x154>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd4:	4b36      	ldr	r3, [pc, #216]	@ (8006eb0 <xTaskIncrementTick+0x160>)
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dda:	601a      	str	r2, [r3, #0]
					break;
 8006ddc:	e03f      	b.n	8006e5e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dde:	4b31      	ldr	r3, [pc, #196]	@ (8006ea4 <xTaskIncrementTick+0x154>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d203      	bcs.n	8006dfe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006df6:	4a2e      	ldr	r2, [pc, #184]	@ (8006eb0 <xTaskIncrementTick+0x160>)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dfc:	e02f      	b.n	8006e5e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe ff30 	bl	8005c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	3318      	adds	r3, #24
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe ff27 	bl	8005c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e1e:	4b25      	ldr	r3, [pc, #148]	@ (8006eb4 <xTaskIncrementTick+0x164>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d903      	bls.n	8006e2e <xTaskIncrementTick+0xde>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2a:	4a22      	ldr	r2, [pc, #136]	@ (8006eb4 <xTaskIncrementTick+0x164>)
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb8 <xTaskIncrementTick+0x168>)
 8006e3c:	441a      	add	r2, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f7fe feb2 	bl	8005bae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ebc <xTaskIncrementTick+0x16c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d3b8      	bcc.n	8006dca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e5c:	e7b5      	b.n	8006dca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e5e:	4b17      	ldr	r3, [pc, #92]	@ (8006ebc <xTaskIncrementTick+0x16c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e64:	4914      	ldr	r1, [pc, #80]	@ (8006eb8 <xTaskIncrementTick+0x168>)
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d907      	bls.n	8006e86 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006e76:	2301      	movs	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	e004      	b.n	8006e86 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e7c:	4b10      	ldr	r3, [pc, #64]	@ (8006ec0 <xTaskIncrementTick+0x170>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec0 <xTaskIncrementTick+0x170>)
 8006e84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e86:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec4 <xTaskIncrementTick+0x174>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e92:	697b      	ldr	r3, [r7, #20]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20001aec 	.word	0x20001aec
 8006ea0:	20001ac8 	.word	0x20001ac8
 8006ea4:	20001a7c 	.word	0x20001a7c
 8006ea8:	20001a80 	.word	0x20001a80
 8006eac:	20001adc 	.word	0x20001adc
 8006eb0:	20001ae4 	.word	0x20001ae4
 8006eb4:	20001acc 	.word	0x20001acc
 8006eb8:	200015f4 	.word	0x200015f4
 8006ebc:	200015f0 	.word	0x200015f0
 8006ec0:	20001ad4 	.word	0x20001ad4
 8006ec4:	20001ad8 	.word	0x20001ad8

08006ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ece:	4b2c      	ldr	r3, [pc, #176]	@ (8006f80 <vTaskSwitchContext+0xb8>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8006f84 <vTaskSwitchContext+0xbc>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006edc:	e049      	b.n	8006f72 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006ede:	4b29      	ldr	r3, [pc, #164]	@ (8006f84 <vTaskSwitchContext+0xbc>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee4:	4b28      	ldr	r3, [pc, #160]	@ (8006f88 <vTaskSwitchContext+0xc0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e013      	b.n	8006f14 <vTaskSwitchContext+0x4c>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10d      	bne.n	8006f0e <vTaskSwitchContext+0x46>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	b672      	cpsid	i
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	b662      	cpsie	i
 8006f06:	607b      	str	r3, [r7, #4]
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	e7fd      	b.n	8006f0a <vTaskSwitchContext+0x42>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	491d      	ldr	r1, [pc, #116]	@ (8006f8c <vTaskSwitchContext+0xc4>)
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0e1      	beq.n	8006eec <vTaskSwitchContext+0x24>
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4a16      	ldr	r2, [pc, #88]	@ (8006f8c <vTaskSwitchContext+0xc4>)
 8006f34:	4413      	add	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	605a      	str	r2, [r3, #4]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	3308      	adds	r3, #8
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d104      	bne.n	8006f58 <vTaskSwitchContext+0x90>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	605a      	str	r2, [r3, #4]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f90 <vTaskSwitchContext+0xc8>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	4a09      	ldr	r2, [pc, #36]	@ (8006f88 <vTaskSwitchContext+0xc0>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f68:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <vTaskSwitchContext+0xc8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3354      	adds	r3, #84	@ 0x54
 8006f6e:	4a09      	ldr	r2, [pc, #36]	@ (8006f94 <vTaskSwitchContext+0xcc>)
 8006f70:	6013      	str	r3, [r2, #0]
}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20001aec 	.word	0x20001aec
 8006f84:	20001ad8 	.word	0x20001ad8
 8006f88:	20001acc 	.word	0x20001acc
 8006f8c:	200015f4 	.word	0x200015f4
 8006f90:	200015f0 	.word	0x200015f0
 8006f94:	20000010 	.word	0x20000010

08006f98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10d      	bne.n	8006fc4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fac:	b672      	cpsid	i
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	b662      	cpsie	i
 8006fbc:	60fb      	str	r3, [r7, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fc4:	4b07      	ldr	r3, [pc, #28]	@ (8006fe4 <vTaskPlaceOnEventList+0x4c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3318      	adds	r3, #24
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7fe fe12 	bl	8005bf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	6838      	ldr	r0, [r7, #0]
 8006fd6:	f000 fb83 	bl	80076e0 <prvAddCurrentTaskToDelayedList>
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200015f0 	.word	0x200015f0

08006fe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10d      	bne.n	8007016 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	b672      	cpsid	i
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	b662      	cpsie	i
 800700e:	617b      	str	r3, [r7, #20]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007016:	4b0a      	ldr	r3, [pc, #40]	@ (8007040 <vTaskPlaceOnEventListRestricted+0x58>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3318      	adds	r3, #24
 800701c:	4619      	mov	r1, r3
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7fe fdc5 	bl	8005bae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800702a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800702e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	68b8      	ldr	r0, [r7, #8]
 8007034:	f000 fb54 	bl	80076e0 <prvAddCurrentTaskToDelayedList>
	}
 8007038:	bf00      	nop
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	200015f0 	.word	0x200015f0

08007044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	b672      	cpsid	i
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	b662      	cpsie	i
 800706e:	60fb      	str	r3, [r7, #12]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3318      	adds	r3, #24
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fdf4 	bl	8005c68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007080:	4b1d      	ldr	r3, [pc, #116]	@ (80070f8 <xTaskRemoveFromEventList+0xb4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d11d      	bne.n	80070c4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fdeb 	bl	8005c68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007096:	4b19      	ldr	r3, [pc, #100]	@ (80070fc <xTaskRemoveFromEventList+0xb8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d903      	bls.n	80070a6 <xTaskRemoveFromEventList+0x62>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a2:	4a16      	ldr	r2, [pc, #88]	@ (80070fc <xTaskRemoveFromEventList+0xb8>)
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4a13      	ldr	r2, [pc, #76]	@ (8007100 <xTaskRemoveFromEventList+0xbc>)
 80070b4:	441a      	add	r2, r3
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f7fe fd76 	bl	8005bae <vListInsertEnd>
 80070c2:	e005      	b.n	80070d0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3318      	adds	r3, #24
 80070c8:	4619      	mov	r1, r3
 80070ca:	480e      	ldr	r0, [pc, #56]	@ (8007104 <xTaskRemoveFromEventList+0xc0>)
 80070cc:	f7fe fd6f 	bl	8005bae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007108 <xTaskRemoveFromEventList+0xc4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d905      	bls.n	80070ea <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070e2:	4b0a      	ldr	r3, [pc, #40]	@ (800710c <xTaskRemoveFromEventList+0xc8>)
 80070e4:	2201      	movs	r2, #1
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	e001      	b.n	80070ee <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070ee:	697b      	ldr	r3, [r7, #20]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20001aec 	.word	0x20001aec
 80070fc:	20001acc 	.word	0x20001acc
 8007100:	200015f4 	.word	0x200015f4
 8007104:	20001a84 	.word	0x20001a84
 8007108:	200015f0 	.word	0x200015f0
 800710c:	20001ad8 	.word	0x20001ad8

08007110 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007118:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <vTaskInternalSetTimeOutState+0x24>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007120:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <vTaskInternalSetTimeOutState+0x28>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	605a      	str	r2, [r3, #4]
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	20001adc 	.word	0x20001adc
 8007138:	20001ac8 	.word	0x20001ac8

0800713c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b088      	sub	sp, #32
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10d      	bne.n	8007168 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	b672      	cpsid	i
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	b662      	cpsie	i
 8007160:	613b      	str	r3, [r7, #16]
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10d      	bne.n	800718a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	b672      	cpsid	i
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	b662      	cpsie	i
 8007182:	60fb      	str	r3, [r7, #12]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800718a:	f000 ff77 	bl	800807c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800718e:	4b1d      	ldr	r3, [pc, #116]	@ (8007204 <xTaskCheckForTimeOut+0xc8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071a6:	d102      	bne.n	80071ae <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	e023      	b.n	80071f6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b15      	ldr	r3, [pc, #84]	@ (8007208 <xTaskCheckForTimeOut+0xcc>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d007      	beq.n	80071ca <xTaskCheckForTimeOut+0x8e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	e015      	b.n	80071f6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d20b      	bcs.n	80071ec <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ff95 	bl	8007110 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	e004      	b.n	80071f6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2200      	movs	r2, #0
 80071f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071f2:	2301      	movs	r3, #1
 80071f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071f6:	f000 ff77 	bl	80080e8 <vPortExitCritical>

	return xReturn;
 80071fa:	69fb      	ldr	r3, [r7, #28]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3720      	adds	r7, #32
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20001ac8 	.word	0x20001ac8
 8007208:	20001adc 	.word	0x20001adc

0800720c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007210:	4b03      	ldr	r3, [pc, #12]	@ (8007220 <vTaskMissedYield+0x14>)
 8007212:	2201      	movs	r2, #1
 8007214:	601a      	str	r2, [r3, #0]
}
 8007216:	bf00      	nop
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	20001ad8 	.word	0x20001ad8

08007224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800722c:	f000 f852 	bl	80072d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007230:	4b06      	ldr	r3, [pc, #24]	@ (800724c <prvIdleTask+0x28>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d9f9      	bls.n	800722c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007238:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <prvIdleTask+0x2c>)
 800723a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007248:	e7f0      	b.n	800722c <prvIdleTask+0x8>
 800724a:	bf00      	nop
 800724c:	200015f4 	.word	0x200015f4
 8007250:	e000ed04 	.word	0xe000ed04

08007254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800725a:	2300      	movs	r3, #0
 800725c:	607b      	str	r3, [r7, #4]
 800725e:	e00c      	b.n	800727a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4a12      	ldr	r2, [pc, #72]	@ (80072b4 <prvInitialiseTaskLists+0x60>)
 800726c:	4413      	add	r3, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fc70 	bl	8005b54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3301      	adds	r3, #1
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b37      	cmp	r3, #55	@ 0x37
 800727e:	d9ef      	bls.n	8007260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007280:	480d      	ldr	r0, [pc, #52]	@ (80072b8 <prvInitialiseTaskLists+0x64>)
 8007282:	f7fe fc67 	bl	8005b54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007286:	480d      	ldr	r0, [pc, #52]	@ (80072bc <prvInitialiseTaskLists+0x68>)
 8007288:	f7fe fc64 	bl	8005b54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800728c:	480c      	ldr	r0, [pc, #48]	@ (80072c0 <prvInitialiseTaskLists+0x6c>)
 800728e:	f7fe fc61 	bl	8005b54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007292:	480c      	ldr	r0, [pc, #48]	@ (80072c4 <prvInitialiseTaskLists+0x70>)
 8007294:	f7fe fc5e 	bl	8005b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007298:	480b      	ldr	r0, [pc, #44]	@ (80072c8 <prvInitialiseTaskLists+0x74>)
 800729a:	f7fe fc5b 	bl	8005b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800729e:	4b0b      	ldr	r3, [pc, #44]	@ (80072cc <prvInitialiseTaskLists+0x78>)
 80072a0:	4a05      	ldr	r2, [pc, #20]	@ (80072b8 <prvInitialiseTaskLists+0x64>)
 80072a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072a4:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <prvInitialiseTaskLists+0x7c>)
 80072a6:	4a05      	ldr	r2, [pc, #20]	@ (80072bc <prvInitialiseTaskLists+0x68>)
 80072a8:	601a      	str	r2, [r3, #0]
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200015f4 	.word	0x200015f4
 80072b8:	20001a54 	.word	0x20001a54
 80072bc:	20001a68 	.word	0x20001a68
 80072c0:	20001a84 	.word	0x20001a84
 80072c4:	20001a98 	.word	0x20001a98
 80072c8:	20001ab0 	.word	0x20001ab0
 80072cc:	20001a7c 	.word	0x20001a7c
 80072d0:	20001a80 	.word	0x20001a80

080072d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072da:	e019      	b.n	8007310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072dc:	f000 fece 	bl	800807c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e0:	4b10      	ldr	r3, [pc, #64]	@ (8007324 <prvCheckTasksWaitingTermination+0x50>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fcbb 	bl	8005c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <prvCheckTasksWaitingTermination+0x54>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007328 <prvCheckTasksWaitingTermination+0x54>)
 80072fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072fc:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <prvCheckTasksWaitingTermination+0x58>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3b01      	subs	r3, #1
 8007302:	4a0a      	ldr	r2, [pc, #40]	@ (800732c <prvCheckTasksWaitingTermination+0x58>)
 8007304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007306:	f000 feef 	bl	80080e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f810 	bl	8007330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007310:	4b06      	ldr	r3, [pc, #24]	@ (800732c <prvCheckTasksWaitingTermination+0x58>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e1      	bne.n	80072dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20001a98 	.word	0x20001a98
 8007328:	20001ac4 	.word	0x20001ac4
 800732c:	20001aac 	.word	0x20001aac

08007330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3354      	adds	r3, #84	@ 0x54
 800733c:	4618      	mov	r0, r3
 800733e:	f001 f9bd 	bl	80086bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007348:	2b00      	cmp	r3, #0
 800734a:	d108      	bne.n	800735e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	4618      	mov	r0, r3
 8007352:	f001 f88f 	bl	8008474 <vPortFree>
				vPortFree( pxTCB );
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 f88c 	bl	8008474 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800735c:	e01b      	b.n	8007396 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007364:	2b01      	cmp	r3, #1
 8007366:	d103      	bne.n	8007370 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 f883 	bl	8008474 <vPortFree>
	}
 800736e:	e012      	b.n	8007396 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007376:	2b02      	cmp	r3, #2
 8007378:	d00d      	beq.n	8007396 <prvDeleteTCB+0x66>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737e:	b672      	cpsid	i
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	b662      	cpsie	i
 800738e:	60fb      	str	r3, [r7, #12]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <prvDeleteTCB+0x62>
	}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073a6:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <prvResetNextTaskUnblockTime+0x38>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073b0:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <prvResetNextTaskUnblockTime+0x3c>)
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073b8:	e008      	b.n	80073cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ba:	4b07      	ldr	r3, [pc, #28]	@ (80073d8 <prvResetNextTaskUnblockTime+0x38>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4a04      	ldr	r2, [pc, #16]	@ (80073dc <prvResetNextTaskUnblockTime+0x3c>)
 80073ca:	6013      	str	r3, [r2, #0]
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20001a7c 	.word	0x20001a7c
 80073dc:	20001ae4 	.word	0x20001ae4

080073e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <xTaskGetSchedulerState+0x34>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073ee:	2301      	movs	r3, #1
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	e008      	b.n	8007406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f4:	4b08      	ldr	r3, [pc, #32]	@ (8007418 <xTaskGetSchedulerState+0x38>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073fc:	2302      	movs	r3, #2
 80073fe:	607b      	str	r3, [r7, #4]
 8007400:	e001      	b.n	8007406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007406:	687b      	ldr	r3, [r7, #4]
	}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	20001ad0 	.word	0x20001ad0
 8007418:	20001aec 	.word	0x20001aec

0800741c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d05c      	beq.n	80074ec <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007432:	4b31      	ldr	r3, [pc, #196]	@ (80074f8 <xTaskPriorityDisinherit+0xdc>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	429a      	cmp	r2, r3
 800743a:	d00d      	beq.n	8007458 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	b672      	cpsid	i
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	b662      	cpsie	i
 8007450:	60fb      	str	r3, [r7, #12]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10d      	bne.n	800747c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	b672      	cpsid	i
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	b662      	cpsie	i
 8007474:	60bb      	str	r3, [r7, #8]
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	e7fd      	b.n	8007478 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007480:	1e5a      	subs	r2, r3, #1
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748e:	429a      	cmp	r2, r3
 8007490:	d02c      	beq.n	80074ec <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007496:	2b00      	cmp	r3, #0
 8007498:	d128      	bne.n	80074ec <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fbe2 	bl	8005c68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074bc:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <xTaskPriorityDisinherit+0xe0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <xTaskPriorityDisinherit+0xb0>
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a0c      	ldr	r2, [pc, #48]	@ (80074fc <xTaskPriorityDisinherit+0xe0>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4a09      	ldr	r2, [pc, #36]	@ (8007500 <xTaskPriorityDisinherit+0xe4>)
 80074da:	441a      	add	r2, r3
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe fb63 	bl	8005bae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074ec:	697b      	ldr	r3, [r7, #20]
	}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200015f0 	.word	0x200015f0
 80074fc:	20001acc 	.word	0x20001acc
 8007500:	200015f4 	.word	0x200015f4

08007504 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08e      	sub	sp, #56	@ 0x38
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007514:	2301      	movs	r3, #1
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10d      	bne.n	800753a <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	b672      	cpsid	i
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	b662      	cpsie	i
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800753a:	f000 fe87 	bl	800824c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007542:	f3ef 8211 	mrs	r2, BASEPRI
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	b672      	cpsid	i
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	b662      	cpsie	i
 800755a:	623a      	str	r2, [r7, #32]
 800755c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800755e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007560:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007578:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757e:	2202      	movs	r2, #2
 8007580:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	2b04      	cmp	r3, #4
 8007588:	d82e      	bhi.n	80075e8 <xTaskGenericNotifyFromISR+0xe4>
 800758a:	a201      	add	r2, pc, #4	@ (adr r2, 8007590 <xTaskGenericNotifyFromISR+0x8c>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	08007611 	.word	0x08007611
 8007594:	080075a5 	.word	0x080075a5
 8007598:	080075b7 	.word	0x080075b7
 800759c:	080075c7 	.word	0x080075c7
 80075a0:	080075d1 	.word	0x080075d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80075b4:	e02f      	b.n	8007616 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80075c4:	e027      	b.n	8007616 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80075ce:	e022      	b.n	8007616 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80075d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d004      	beq.n	80075e2 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80075e0:	e019      	b.n	8007616 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80075e6:	e016      	b.n	8007616 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075f2:	d00f      	beq.n	8007614 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f8:	b672      	cpsid	i
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	b662      	cpsie	i
 8007608:	61bb      	str	r3, [r7, #24]
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <xTaskGenericNotifyFromISR+0x108>
					break;
 8007610:	bf00      	nop
 8007612:	e000      	b.n	8007616 <xTaskGenericNotifyFromISR+0x112>
					break;
 8007614:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007616:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800761a:	2b01      	cmp	r3, #1
 800761c:	d149      	bne.n	80076b2 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00d      	beq.n	8007642 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	b672      	cpsid	i
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	b662      	cpsie	i
 800763a:	617b      	str	r3, [r7, #20]
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	e7fd      	b.n	800763e <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007642:	4b21      	ldr	r3, [pc, #132]	@ (80076c8 <xTaskGenericNotifyFromISR+0x1c4>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11d      	bne.n	8007686 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	3304      	adds	r3, #4
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fb0a 	bl	8005c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007658:	4b1c      	ldr	r3, [pc, #112]	@ (80076cc <xTaskGenericNotifyFromISR+0x1c8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d903      	bls.n	8007668 <xTaskGenericNotifyFromISR+0x164>
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	4a19      	ldr	r2, [pc, #100]	@ (80076cc <xTaskGenericNotifyFromISR+0x1c8>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4a16      	ldr	r2, [pc, #88]	@ (80076d0 <xTaskGenericNotifyFromISR+0x1cc>)
 8007676:	441a      	add	r2, r3
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe fa95 	bl	8005bae <vListInsertEnd>
 8007684:	e005      	b.n	8007692 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	3318      	adds	r3, #24
 800768a:	4619      	mov	r1, r3
 800768c:	4811      	ldr	r0, [pc, #68]	@ (80076d4 <xTaskGenericNotifyFromISR+0x1d0>)
 800768e:	f7fe fa8e 	bl	8005bae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007696:	4b10      	ldr	r3, [pc, #64]	@ (80076d8 <xTaskGenericNotifyFromISR+0x1d4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	429a      	cmp	r2, r3
 800769e:	d908      	bls.n	80076b2 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80076a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80076a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076a8:	2201      	movs	r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80076ac:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <xTaskGenericNotifyFromISR+0x1d8>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f383 8811 	msr	BASEPRI, r3
}
 80076bc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80076be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3738      	adds	r7, #56	@ 0x38
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20001aec 	.word	0x20001aec
 80076cc:	20001acc 	.word	0x20001acc
 80076d0:	200015f4 	.word	0x200015f4
 80076d4:	20001a84 	.word	0x20001a84
 80076d8:	200015f0 	.word	0x200015f0
 80076dc:	20001ad8 	.word	0x20001ad8

080076e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076ea:	4b21      	ldr	r3, [pc, #132]	@ (8007770 <prvAddCurrentTaskToDelayedList+0x90>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076f0:	4b20      	ldr	r3, [pc, #128]	@ (8007774 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3304      	adds	r3, #4
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe fab6 	bl	8005c68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007702:	d10a      	bne.n	800771a <prvAddCurrentTaskToDelayedList+0x3a>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800770a:	4b1a      	ldr	r3, [pc, #104]	@ (8007774 <prvAddCurrentTaskToDelayedList+0x94>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4819      	ldr	r0, [pc, #100]	@ (8007778 <prvAddCurrentTaskToDelayedList+0x98>)
 8007714:	f7fe fa4b 	bl	8005bae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007718:	e026      	b.n	8007768 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007722:	4b14      	ldr	r3, [pc, #80]	@ (8007774 <prvAddCurrentTaskToDelayedList+0x94>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	429a      	cmp	r2, r3
 8007730:	d209      	bcs.n	8007746 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007732:	4b12      	ldr	r3, [pc, #72]	@ (800777c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	4b0f      	ldr	r3, [pc, #60]	@ (8007774 <prvAddCurrentTaskToDelayedList+0x94>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3304      	adds	r3, #4
 800773c:	4619      	mov	r1, r3
 800773e:	4610      	mov	r0, r2
 8007740:	f7fe fa59 	bl	8005bf6 <vListInsert>
}
 8007744:	e010      	b.n	8007768 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007746:	4b0e      	ldr	r3, [pc, #56]	@ (8007780 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <prvAddCurrentTaskToDelayedList+0x94>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3304      	adds	r3, #4
 8007750:	4619      	mov	r1, r3
 8007752:	4610      	mov	r0, r2
 8007754:	f7fe fa4f 	bl	8005bf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007758:	4b0a      	ldr	r3, [pc, #40]	@ (8007784 <prvAddCurrentTaskToDelayedList+0xa4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	429a      	cmp	r2, r3
 8007760:	d202      	bcs.n	8007768 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007762:	4a08      	ldr	r2, [pc, #32]	@ (8007784 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	6013      	str	r3, [r2, #0]
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20001ac8 	.word	0x20001ac8
 8007774:	200015f0 	.word	0x200015f0
 8007778:	20001ab0 	.word	0x20001ab0
 800777c:	20001a80 	.word	0x20001a80
 8007780:	20001a7c 	.word	0x20001a7c
 8007784:	20001ae4 	.word	0x20001ae4

08007788 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	@ 0x28
 800778c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007792:	f000 fb21 	bl	8007dd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007796:	4b1e      	ldr	r3, [pc, #120]	@ (8007810 <xTimerCreateTimerTask+0x88>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d021      	beq.n	80077e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077a6:	1d3a      	adds	r2, r7, #4
 80077a8:	f107 0108 	add.w	r1, r7, #8
 80077ac:	f107 030c 	add.w	r3, r7, #12
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe f9b5 	bl	8005b20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	9202      	str	r2, [sp, #8]
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	2302      	movs	r3, #2
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	2300      	movs	r3, #0
 80077c6:	460a      	mov	r2, r1
 80077c8:	4912      	ldr	r1, [pc, #72]	@ (8007814 <xTimerCreateTimerTask+0x8c>)
 80077ca:	4813      	ldr	r0, [pc, #76]	@ (8007818 <xTimerCreateTimerTask+0x90>)
 80077cc:	f7fe ff90 	bl	80066f0 <xTaskCreateStatic>
 80077d0:	4603      	mov	r3, r0
 80077d2:	4a12      	ldr	r2, [pc, #72]	@ (800781c <xTimerCreateTimerTask+0x94>)
 80077d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077d6:	4b11      	ldr	r3, [pc, #68]	@ (800781c <xTimerCreateTimerTask+0x94>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077de:	2301      	movs	r3, #1
 80077e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10d      	bne.n	8007804 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	b672      	cpsid	i
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	b662      	cpsie	i
 80077fc:	613b      	str	r3, [r7, #16]
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007804:	697b      	ldr	r3, [r7, #20]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20001b20 	.word	0x20001b20
 8007814:	080088b8 	.word	0x080088b8
 8007818:	08007961 	.word	0x08007961
 800781c:	20001b24 	.word	0x20001b24

08007820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	@ 0x28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10d      	bne.n	8007854 <xTimerGenericCommand+0x34>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	b672      	cpsid	i
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	b662      	cpsie	i
 800784c:	623b      	str	r3, [r7, #32]
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007854:	4b19      	ldr	r3, [pc, #100]	@ (80078bc <xTimerGenericCommand+0x9c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d02a      	beq.n	80078b2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b05      	cmp	r3, #5
 800786c:	dc18      	bgt.n	80078a0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800786e:	f7ff fdb7 	bl	80073e0 <xTaskGetSchedulerState>
 8007872:	4603      	mov	r3, r0
 8007874:	2b02      	cmp	r3, #2
 8007876:	d109      	bne.n	800788c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007878:	4b10      	ldr	r3, [pc, #64]	@ (80078bc <xTimerGenericCommand+0x9c>)
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	f107 0110 	add.w	r1, r7, #16
 8007880:	2300      	movs	r3, #0
 8007882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007884:	f7fe fb30 	bl	8005ee8 <xQueueGenericSend>
 8007888:	6278      	str	r0, [r7, #36]	@ 0x24
 800788a:	e012      	b.n	80078b2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800788c:	4b0b      	ldr	r3, [pc, #44]	@ (80078bc <xTimerGenericCommand+0x9c>)
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	f107 0110 	add.w	r1, r7, #16
 8007894:	2300      	movs	r3, #0
 8007896:	2200      	movs	r2, #0
 8007898:	f7fe fb26 	bl	8005ee8 <xQueueGenericSend>
 800789c:	6278      	str	r0, [r7, #36]	@ 0x24
 800789e:	e008      	b.n	80078b2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078a0:	4b06      	ldr	r3, [pc, #24]	@ (80078bc <xTimerGenericCommand+0x9c>)
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	f107 0110 	add.w	r1, r7, #16
 80078a8:	2300      	movs	r3, #0
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	f7fe fc26 	bl	80060fc <xQueueGenericSendFromISR>
 80078b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3728      	adds	r7, #40	@ 0x28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20001b20 	.word	0x20001b20

080078c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ca:	4b24      	ldr	r3, [pc, #144]	@ (800795c <prvProcessExpiredTimer+0x9c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe f9c5 	bl	8005c68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d025      	beq.n	8007938 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	18d1      	adds	r1, r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	6978      	ldr	r0, [r7, #20]
 80078fa:	f000 f8d7 	bl	8007aac <prvInsertTimerInActiveList>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d022      	beq.n	800794a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007904:	2300      	movs	r3, #0
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	2300      	movs	r3, #0
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	2100      	movs	r1, #0
 800790e:	6978      	ldr	r0, [r7, #20]
 8007910:	f7ff ff86 	bl	8007820 <xTimerGenericCommand>
 8007914:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d116      	bne.n	800794a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	b672      	cpsid	i
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	b662      	cpsie	i
 8007930:	60fb      	str	r3, [r7, #12]
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800793e:	f023 0301 	bic.w	r3, r3, #1
 8007942:	b2da      	uxtb	r2, r3
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	4798      	blx	r3
}
 8007952:	bf00      	nop
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20001b18 	.word	0x20001b18

08007960 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007968:	f107 0308 	add.w	r3, r7, #8
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f859 	bl	8007a24 <prvGetNextExpireTime>
 8007972:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f805 	bl	8007988 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800797e:	f000 f8d7 	bl	8007b30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007982:	bf00      	nop
 8007984:	e7f0      	b.n	8007968 <prvTimerTask+0x8>
	...

08007988 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007992:	f7ff f91f 	bl	8006bd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007996:	f107 0308 	add.w	r3, r7, #8
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f866 	bl	8007a6c <prvSampleTimeNow>
 80079a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d130      	bne.n	8007a0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <prvProcessTimerOrBlockTask+0x3c>
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d806      	bhi.n	80079c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079b6:	f7ff f91b 	bl	8006bf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff7f 	bl	80078c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079c2:	e024      	b.n	8007a0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079ca:	4b13      	ldr	r3, [pc, #76]	@ (8007a18 <prvProcessTimerOrBlockTask+0x90>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <prvProcessTimerOrBlockTask+0x50>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <prvProcessTimerOrBlockTask+0x52>
 80079d8:	2300      	movs	r3, #0
 80079da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079dc:	4b0f      	ldr	r3, [pc, #60]	@ (8007a1c <prvProcessTimerOrBlockTask+0x94>)
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	4619      	mov	r1, r3
 80079ea:	f7fe fe4d 	bl	8006688 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079ee:	f7ff f8ff 	bl	8006bf0 <xTaskResumeAll>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079f8:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <prvProcessTimerOrBlockTask+0x98>)
 80079fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	f3bf 8f6f 	isb	sy
}
 8007a08:	e001      	b.n	8007a0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a0a:	f7ff f8f1 	bl	8006bf0 <xTaskResumeAll>
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20001b1c 	.word	0x20001b1c
 8007a1c:	20001b20 	.word	0x20001b20
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a68 <prvGetNextExpireTime+0x44>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <prvGetNextExpireTime+0x16>
 8007a36:	2201      	movs	r2, #1
 8007a38:	e000      	b.n	8007a3c <prvGetNextExpireTime+0x18>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a48:	4b07      	ldr	r3, [pc, #28]	@ (8007a68 <prvGetNextExpireTime+0x44>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e001      	b.n	8007a58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a58:	68fb      	ldr	r3, [r7, #12]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20001b18 	.word	0x20001b18

08007a6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a74:	f7ff f95c 	bl	8006d30 <xTaskGetTickCount>
 8007a78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <prvSampleTimeNow+0x3c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d205      	bcs.n	8007a90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a84:	f000 f940 	bl	8007d08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e002      	b.n	8007a96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a96:	4a04      	ldr	r2, [pc, #16]	@ (8007aa8 <prvSampleTimeNow+0x3c>)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20001b28 	.word	0x20001b28

08007aac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d812      	bhi.n	8007af8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	1ad2      	subs	r2, r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d302      	bcc.n	8007ae6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	e01b      	b.n	8007b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ae6:	4b10      	ldr	r3, [pc, #64]	@ (8007b28 <prvInsertTimerInActiveList+0x7c>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7fe f880 	bl	8005bf6 <vListInsert>
 8007af6:	e012      	b.n	8007b1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d206      	bcs.n	8007b0e <prvInsertTimerInActiveList+0x62>
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d302      	bcc.n	8007b0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e007      	b.n	8007b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b0e:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <prvInsertTimerInActiveList+0x80>)
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fe f86c 	bl	8005bf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b1e:	697b      	ldr	r3, [r7, #20]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20001b1c 	.word	0x20001b1c
 8007b2c:	20001b18 	.word	0x20001b18

08007b30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08e      	sub	sp, #56	@ 0x38
 8007b34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b36:	e0d4      	b.n	8007ce2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	da1b      	bge.n	8007b76 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b3e:	1d3b      	adds	r3, r7, #4
 8007b40:	3304      	adds	r3, #4
 8007b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10d      	bne.n	8007b66 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4e:	b672      	cpsid	i
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	b662      	cpsie	i
 8007b5e:	61fb      	str	r3, [r7, #28]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b6c:	6850      	ldr	r0, [r2, #4]
 8007b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b70:	6892      	ldr	r2, [r2, #8]
 8007b72:	4611      	mov	r1, r2
 8007b74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f2c0 80b2 	blt.w	8007ce2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe f86a 	bl	8005c68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b94:	463b      	mov	r3, r7
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff68 	bl	8007a6c <prvSampleTimeNow>
 8007b9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	f200 809b 	bhi.w	8007cdc <prvProcessReceivedCommands+0x1ac>
 8007ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bac <prvProcessReceivedCommands+0x7c>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bd5 	.word	0x08007bd5
 8007bb8:	08007c4f 	.word	0x08007c4f
 8007bbc:	08007c63 	.word	0x08007c63
 8007bc0:	08007cb3 	.word	0x08007cb3
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007bd5 	.word	0x08007bd5
 8007bcc:	08007c4f 	.word	0x08007c4f
 8007bd0:	08007c63 	.word	0x08007c63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	18d1      	adds	r1, r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bf4:	f7ff ff5a 	bl	8007aac <prvInsertTimerInActiveList>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d070      	beq.n	8007ce0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d065      	beq.n	8007ce0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	441a      	add	r2, r3
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	2300      	movs	r3, #0
 8007c22:	2100      	movs	r1, #0
 8007c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c26:	f7ff fdfb 	bl	8007820 <xTimerGenericCommand>
 8007c2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d156      	bne.n	8007ce0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c36:	b672      	cpsid	i
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	b662      	cpsie	i
 8007c46:	61bb      	str	r3, [r7, #24]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c54:	f023 0301 	bic.w	r3, r3, #1
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c60:	e03f      	b.n	8007ce2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c68:	f043 0301 	orr.w	r3, r3, #1
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10d      	bne.n	8007c9e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c86:	b672      	cpsid	i
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	b662      	cpsie	i
 8007c96:	617b      	str	r3, [r7, #20]
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	e7fd      	b.n	8007c9a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	18d1      	adds	r1, r2, r3
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cac:	f7ff fefe 	bl	8007aac <prvInsertTimerInActiveList>
					break;
 8007cb0:	e017      	b.n	8007ce2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d103      	bne.n	8007cc8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007cc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cc2:	f000 fbd7 	bl	8008474 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cc6:	e00c      	b.n	8007ce2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cda:	e002      	b.n	8007ce2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007cdc:	bf00      	nop
 8007cde:	e000      	b.n	8007ce2 <prvProcessReceivedCommands+0x1b2>
					break;
 8007ce0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ce2:	4b08      	ldr	r3, [pc, #32]	@ (8007d04 <prvProcessReceivedCommands+0x1d4>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	1d39      	adds	r1, r7, #4
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe faaa 	bl	8006244 <xQueueReceive>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f47f af20 	bne.w	8007b38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	3730      	adds	r7, #48	@ 0x30
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20001b20 	.word	0x20001b20

08007d08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d0e:	e04b      	b.n	8007da8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d10:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd0 <prvSwitchTimerLists+0xc8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8007dd0 <prvSwitchTimerLists+0xc8>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fd ff9d 	bl	8005c68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d031      	beq.n	8007da8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d90e      	bls.n	8007d74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d62:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd0 <prvSwitchTimerLists+0xc8>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f7fd ff42 	bl	8005bf6 <vListInsert>
 8007d72:	e019      	b.n	8007da8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d74:	2300      	movs	r3, #0
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7ff fd4e 	bl	8007820 <xTimerGenericCommand>
 8007d84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10d      	bne.n	8007da8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	b672      	cpsid	i
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	b662      	cpsie	i
 8007da0:	603b      	str	r3, [r7, #0]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007da8:	4b09      	ldr	r3, [pc, #36]	@ (8007dd0 <prvSwitchTimerLists+0xc8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1ae      	bne.n	8007d10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007db2:	4b07      	ldr	r3, [pc, #28]	@ (8007dd0 <prvSwitchTimerLists+0xc8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007db8:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <prvSwitchTimerLists+0xcc>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a04      	ldr	r2, [pc, #16]	@ (8007dd0 <prvSwitchTimerLists+0xc8>)
 8007dbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dc0:	4a04      	ldr	r2, [pc, #16]	@ (8007dd4 <prvSwitchTimerLists+0xcc>)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	6013      	str	r3, [r2, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20001b18 	.word	0x20001b18
 8007dd4:	20001b1c 	.word	0x20001b1c

08007dd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dde:	f000 f94d 	bl	800807c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007de2:	4b15      	ldr	r3, [pc, #84]	@ (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d120      	bne.n	8007e2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dea:	4814      	ldr	r0, [pc, #80]	@ (8007e3c <prvCheckForValidListAndQueue+0x64>)
 8007dec:	f7fd feb2 	bl	8005b54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007df0:	4813      	ldr	r0, [pc, #76]	@ (8007e40 <prvCheckForValidListAndQueue+0x68>)
 8007df2:	f7fd feaf 	bl	8005b54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007df6:	4b13      	ldr	r3, [pc, #76]	@ (8007e44 <prvCheckForValidListAndQueue+0x6c>)
 8007df8:	4a10      	ldr	r2, [pc, #64]	@ (8007e3c <prvCheckForValidListAndQueue+0x64>)
 8007dfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007dfc:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <prvCheckForValidListAndQueue+0x70>)
 8007dfe:	4a10      	ldr	r2, [pc, #64]	@ (8007e40 <prvCheckForValidListAndQueue+0x68>)
 8007e00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e02:	2300      	movs	r3, #0
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4b11      	ldr	r3, [pc, #68]	@ (8007e4c <prvCheckForValidListAndQueue+0x74>)
 8007e08:	4a11      	ldr	r2, [pc, #68]	@ (8007e50 <prvCheckForValidListAndQueue+0x78>)
 8007e0a:	2110      	movs	r1, #16
 8007e0c:	200a      	movs	r0, #10
 8007e0e:	f7fd ffc1 	bl	8005d94 <xQueueGenericCreateStatic>
 8007e12:	4603      	mov	r3, r0
 8007e14:	4a08      	ldr	r2, [pc, #32]	@ (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e18:	4b07      	ldr	r3, [pc, #28]	@ (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e20:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	490b      	ldr	r1, [pc, #44]	@ (8007e54 <prvCheckForValidListAndQueue+0x7c>)
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fc04 	bl	8006634 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e2c:	f000 f95c 	bl	80080e8 <vPortExitCritical>
}
 8007e30:	bf00      	nop
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20001b20 	.word	0x20001b20
 8007e3c:	20001af0 	.word	0x20001af0
 8007e40:	20001b04 	.word	0x20001b04
 8007e44:	20001b18 	.word	0x20001b18
 8007e48:	20001b1c 	.word	0x20001b1c
 8007e4c:	20001bcc 	.word	0x20001bcc
 8007e50:	20001b2c 	.word	0x20001b2c
 8007e54:	080088c0 	.word	0x080088c0

08007e58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3b04      	subs	r3, #4
 8007e68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3b04      	subs	r3, #4
 8007e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f023 0201 	bic.w	r2, r3, #1
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b04      	subs	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e88:	4a0c      	ldr	r2, [pc, #48]	@ (8007ebc <pxPortInitialiseStack+0x64>)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3b14      	subs	r3, #20
 8007e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f06f 0202 	mvn.w	r2, #2
 8007ea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b20      	subs	r3, #32
 8007eac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	08007ec1 	.word	0x08007ec1

08007ec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eca:	4b15      	ldr	r3, [pc, #84]	@ (8007f20 <prvTaskExitError+0x60>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ed2:	d00d      	beq.n	8007ef0 <prvTaskExitError+0x30>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	b672      	cpsid	i
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	b662      	cpsie	i
 8007ee8:	60fb      	str	r3, [r7, #12]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <prvTaskExitError+0x2c>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	b672      	cpsid	i
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	b662      	cpsie	i
 8007f04:	60bb      	str	r3, [r7, #8]
}
 8007f06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f08:	bf00      	nop
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0fc      	beq.n	8007f0a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	2000000c 	.word	0x2000000c
	...

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	4770      	bx	lr
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst2>:
 8007f50:	200015f0 	.word	0x200015f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f58:	4808      	ldr	r0, [pc, #32]	@ (8007f7c <prvPortStartFirstTask+0x24>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8814 	msr	CONTROL, r0
 8007f6a:	b662      	cpsie	i
 8007f6c:	b661      	cpsie	f
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	df00      	svc	0
 8007f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f7a:	bf00      	nop
 8007f7c:	e000ed08 	.word	0xe000ed08

08007f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f86:	4b37      	ldr	r3, [pc, #220]	@ (8008064 <xPortStartScheduler+0xe4>)
 8007f88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	22ff      	movs	r2, #255	@ 0xff
 8007f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	4b2f      	ldr	r3, [pc, #188]	@ (8008068 <xPortStartScheduler+0xe8>)
 8007fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fae:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <xPortStartScheduler+0xec>)
 8007fb0:	2207      	movs	r2, #7
 8007fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fb4:	e009      	b.n	8007fca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800806c <xPortStartScheduler+0xec>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800806c <xPortStartScheduler+0xec>)
 8007fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd2:	2b80      	cmp	r3, #128	@ 0x80
 8007fd4:	d0ef      	beq.n	8007fb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fd6:	4b25      	ldr	r3, [pc, #148]	@ (800806c <xPortStartScheduler+0xec>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f1c3 0307 	rsb	r3, r3, #7
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d00d      	beq.n	8007ffe <xPortStartScheduler+0x7e>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	b672      	cpsid	i
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	b662      	cpsie	i
 8007ff6:	60bb      	str	r3, [r7, #8]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800806c <xPortStartScheduler+0xec>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	4a19      	ldr	r2, [pc, #100]	@ (800806c <xPortStartScheduler+0xec>)
 8008006:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008008:	4b18      	ldr	r3, [pc, #96]	@ (800806c <xPortStartScheduler+0xec>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008010:	4a16      	ldr	r2, [pc, #88]	@ (800806c <xPortStartScheduler+0xec>)
 8008012:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	b2da      	uxtb	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800801c:	4b14      	ldr	r3, [pc, #80]	@ (8008070 <xPortStartScheduler+0xf0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a13      	ldr	r2, [pc, #76]	@ (8008070 <xPortStartScheduler+0xf0>)
 8008022:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008028:	4b11      	ldr	r3, [pc, #68]	@ (8008070 <xPortStartScheduler+0xf0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a10      	ldr	r2, [pc, #64]	@ (8008070 <xPortStartScheduler+0xf0>)
 800802e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008032:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008034:	f000 f8dc 	bl	80081f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008038:	4b0e      	ldr	r3, [pc, #56]	@ (8008074 <xPortStartScheduler+0xf4>)
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800803e:	f000 f8fb 	bl	8008238 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008042:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <xPortStartScheduler+0xf8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a0c      	ldr	r2, [pc, #48]	@ (8008078 <xPortStartScheduler+0xf8>)
 8008048:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800804c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800804e:	f7ff ff83 	bl	8007f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008052:	f7fe ff39 	bl	8006ec8 <vTaskSwitchContext>
	prvTaskExitError();
 8008056:	f7ff ff33 	bl	8007ec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	e000e400 	.word	0xe000e400
 8008068:	20001c1c 	.word	0x20001c1c
 800806c:	20001c20 	.word	0x20001c20
 8008070:	e000ed20 	.word	0xe000ed20
 8008074:	2000000c 	.word	0x2000000c
 8008078:	e000ef34 	.word	0xe000ef34

0800807c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	b672      	cpsid	i
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	b662      	cpsie	i
 8008096:	607b      	str	r3, [r7, #4]
}
 8008098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800809a:	4b11      	ldr	r3, [pc, #68]	@ (80080e0 <vPortEnterCritical+0x64>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	4a0f      	ldr	r2, [pc, #60]	@ (80080e0 <vPortEnterCritical+0x64>)
 80080a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080a4:	4b0e      	ldr	r3, [pc, #56]	@ (80080e0 <vPortEnterCritical+0x64>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d112      	bne.n	80080d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080ac:	4b0d      	ldr	r3, [pc, #52]	@ (80080e4 <vPortEnterCritical+0x68>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00d      	beq.n	80080d2 <vPortEnterCritical+0x56>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	b672      	cpsid	i
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	b662      	cpsie	i
 80080ca:	603b      	str	r3, [r7, #0]
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	e7fd      	b.n	80080ce <vPortEnterCritical+0x52>
	}
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	2000000c 	.word	0x2000000c
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ee:	4b13      	ldr	r3, [pc, #76]	@ (800813c <vPortExitCritical+0x54>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10d      	bne.n	8008112 <vPortExitCritical+0x2a>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	b672      	cpsid	i
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	b662      	cpsie	i
 800810a:	607b      	str	r3, [r7, #4]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008112:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <vPortExitCritical+0x54>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3b01      	subs	r3, #1
 8008118:	4a08      	ldr	r2, [pc, #32]	@ (800813c <vPortExitCritical+0x54>)
 800811a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800811c:	4b07      	ldr	r3, [pc, #28]	@ (800813c <vPortExitCritical+0x54>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d105      	bne.n	8008130 <vPortExitCritical+0x48>
 8008124:	2300      	movs	r3, #0
 8008126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	f383 8811 	msr	BASEPRI, r3
}
 800812e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	2000000c 	.word	0x2000000c

08008140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008140:	f3ef 8009 	mrs	r0, PSP
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4b15      	ldr	r3, [pc, #84]	@ (80081a0 <pxCurrentTCBConst>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	f01e 0f10 	tst.w	lr, #16
 8008150:	bf08      	it	eq
 8008152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	6010      	str	r0, [r2, #0]
 800815c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008164:	b672      	cpsid	i
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	b662      	cpsie	i
 8008174:	f7fe fea8 	bl	8006ec8 <vTaskSwitchContext>
 8008178:	f04f 0000 	mov.w	r0, #0
 800817c:	f380 8811 	msr	BASEPRI, r0
 8008180:	bc09      	pop	{r0, r3}
 8008182:	6819      	ldr	r1, [r3, #0]
 8008184:	6808      	ldr	r0, [r1, #0]
 8008186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818a:	f01e 0f10 	tst.w	lr, #16
 800818e:	bf08      	it	eq
 8008190:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008194:	f380 8809 	msr	PSP, r0
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop

080081a0 <pxCurrentTCBConst>:
 80081a0:	200015f0 	.word	0x200015f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop

080081a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	b672      	cpsid	i
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	b662      	cpsie	i
 80081c2:	607b      	str	r3, [r7, #4]
}
 80081c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081c6:	f7fe fdc3 	bl	8006d50 <xTaskIncrementTick>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081d0:	4b06      	ldr	r3, [pc, #24]	@ (80081ec <SysTick_Handler+0x44>)
 80081d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	2300      	movs	r3, #0
 80081da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	f383 8811 	msr	BASEPRI, r3
}
 80081e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008224 <vPortSetupTimerInterrupt+0x34>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008228 <vPortSetupTimerInterrupt+0x38>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008200:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <vPortSetupTimerInterrupt+0x3c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a0a      	ldr	r2, [pc, #40]	@ (8008230 <vPortSetupTimerInterrupt+0x40>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	099b      	lsrs	r3, r3, #6
 800820c:	4a09      	ldr	r2, [pc, #36]	@ (8008234 <vPortSetupTimerInterrupt+0x44>)
 800820e:	3b01      	subs	r3, #1
 8008210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008212:	4b04      	ldr	r3, [pc, #16]	@ (8008224 <vPortSetupTimerInterrupt+0x34>)
 8008214:	2207      	movs	r2, #7
 8008216:	601a      	str	r2, [r3, #0]
}
 8008218:	bf00      	nop
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	e000e010 	.word	0xe000e010
 8008228:	e000e018 	.word	0xe000e018
 800822c:	20000000 	.word	0x20000000
 8008230:	10624dd3 	.word	0x10624dd3
 8008234:	e000e014 	.word	0xe000e014

08008238 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008238:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008248 <vPortEnableVFP+0x10>
 800823c:	6801      	ldr	r1, [r0, #0]
 800823e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008242:	6001      	str	r1, [r0, #0]
 8008244:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008246:	bf00      	nop
 8008248:	e000ed88 	.word	0xe000ed88

0800824c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008252:	f3ef 8305 	mrs	r3, IPSR
 8008256:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b0f      	cmp	r3, #15
 800825c:	d917      	bls.n	800828e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800825e:	4a1a      	ldr	r2, [pc, #104]	@ (80082c8 <vPortValidateInterruptPriority+0x7c>)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008268:	4b18      	ldr	r3, [pc, #96]	@ (80082cc <vPortValidateInterruptPriority+0x80>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	7afa      	ldrb	r2, [r7, #11]
 800826e:	429a      	cmp	r2, r3
 8008270:	d20d      	bcs.n	800828e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	b672      	cpsid	i
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	b662      	cpsie	i
 8008286:	607b      	str	r3, [r7, #4]
}
 8008288:	bf00      	nop
 800828a:	bf00      	nop
 800828c:	e7fd      	b.n	800828a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800828e:	4b10      	ldr	r3, [pc, #64]	@ (80082d0 <vPortValidateInterruptPriority+0x84>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008296:	4b0f      	ldr	r3, [pc, #60]	@ (80082d4 <vPortValidateInterruptPriority+0x88>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d90d      	bls.n	80082ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a2:	b672      	cpsid	i
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	b662      	cpsie	i
 80082b2:	603b      	str	r3, [r7, #0]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <vPortValidateInterruptPriority+0x6a>
	}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	e000e3f0 	.word	0xe000e3f0
 80082cc:	20001c1c 	.word	0x20001c1c
 80082d0:	e000ed0c 	.word	0xe000ed0c
 80082d4:	20001c20 	.word	0x20001c20

080082d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08a      	sub	sp, #40	@ 0x28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082e4:	f7fe fc76 	bl	8006bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082e8:	4b5d      	ldr	r3, [pc, #372]	@ (8008460 <pvPortMalloc+0x188>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082f0:	f000 f920 	bl	8008534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008464 <pvPortMalloc+0x18c>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 8094 	bne.w	800842a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d020      	beq.n	800834a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008308:	2208      	movs	r2, #8
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b00      	cmp	r3, #0
 8008318:	d017      	beq.n	800834a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	3308      	adds	r3, #8
 8008322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00d      	beq.n	800834a <pvPortMalloc+0x72>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	b672      	cpsid	i
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	b662      	cpsie	i
 8008342:	617b      	str	r3, [r7, #20]
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	e7fd      	b.n	8008346 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d06c      	beq.n	800842a <pvPortMalloc+0x152>
 8008350:	4b45      	ldr	r3, [pc, #276]	@ (8008468 <pvPortMalloc+0x190>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	d867      	bhi.n	800842a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800835a:	4b44      	ldr	r3, [pc, #272]	@ (800846c <pvPortMalloc+0x194>)
 800835c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800835e:	4b43      	ldr	r3, [pc, #268]	@ (800846c <pvPortMalloc+0x194>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008364:	e004      	b.n	8008370 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800836a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	429a      	cmp	r2, r3
 8008378:	d903      	bls.n	8008382 <pvPortMalloc+0xaa>
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f1      	bne.n	8008366 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008382:	4b37      	ldr	r3, [pc, #220]	@ (8008460 <pvPortMalloc+0x188>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008388:	429a      	cmp	r2, r3
 800838a:	d04e      	beq.n	800842a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2208      	movs	r2, #8
 8008392:	4413      	add	r3, r2
 8008394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800839e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	1ad2      	subs	r2, r2, r3
 80083a6:	2308      	movs	r3, #8
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d922      	bls.n	80083f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4413      	add	r3, r2
 80083b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00d      	beq.n	80083dc <pvPortMalloc+0x104>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c4:	b672      	cpsid	i
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	b662      	cpsie	i
 80083d4:	613b      	str	r3, [r7, #16]
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	e7fd      	b.n	80083d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	1ad2      	subs	r2, r2, r3
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083ee:	69b8      	ldr	r0, [r7, #24]
 80083f0:	f000 f902 	bl	80085f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008468 <pvPortMalloc+0x190>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008468 <pvPortMalloc+0x190>)
 8008400:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008402:	4b19      	ldr	r3, [pc, #100]	@ (8008468 <pvPortMalloc+0x190>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b1a      	ldr	r3, [pc, #104]	@ (8008470 <pvPortMalloc+0x198>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d203      	bcs.n	8008416 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800840e:	4b16      	ldr	r3, [pc, #88]	@ (8008468 <pvPortMalloc+0x190>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <pvPortMalloc+0x198>)
 8008414:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	4b12      	ldr	r3, [pc, #72]	@ (8008464 <pvPortMalloc+0x18c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	431a      	orrs	r2, r3
 8008420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008422:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800842a:	f7fe fbe1 	bl	8006bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f003 0307 	and.w	r3, r3, #7
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00d      	beq.n	8008454 <pvPortMalloc+0x17c>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843c:	b672      	cpsid	i
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	b662      	cpsie	i
 800844c:	60fb      	str	r3, [r7, #12]
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	e7fd      	b.n	8008450 <pvPortMalloc+0x178>
	return pvReturn;
 8008454:	69fb      	ldr	r3, [r7, #28]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3728      	adds	r7, #40	@ 0x28
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	2000582c 	.word	0x2000582c
 8008464:	20005838 	.word	0x20005838
 8008468:	20005830 	.word	0x20005830
 800846c:	20005824 	.word	0x20005824
 8008470:	20005834 	.word	0x20005834

08008474 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d04e      	beq.n	8008524 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008486:	2308      	movs	r3, #8
 8008488:	425b      	negs	r3, r3
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4413      	add	r3, r2
 800848e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	4b24      	ldr	r3, [pc, #144]	@ (800852c <vPortFree+0xb8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4013      	ands	r3, r2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10d      	bne.n	80084be <vPortFree+0x4a>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a6:	b672      	cpsid	i
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	b662      	cpsie	i
 80084b6:	60fb      	str	r3, [r7, #12]
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	e7fd      	b.n	80084ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00d      	beq.n	80084e2 <vPortFree+0x6e>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ca:	b672      	cpsid	i
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	b662      	cpsie	i
 80084da:	60bb      	str	r3, [r7, #8]
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	e7fd      	b.n	80084de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	4b11      	ldr	r3, [pc, #68]	@ (800852c <vPortFree+0xb8>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d019      	beq.n	8008524 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d115      	bne.n	8008524 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <vPortFree+0xb8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	43db      	mvns	r3, r3
 8008502:	401a      	ands	r2, r3
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008508:	f7fe fb64 	bl	8006bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <vPortFree+0xbc>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4413      	add	r3, r2
 8008516:	4a06      	ldr	r2, [pc, #24]	@ (8008530 <vPortFree+0xbc>)
 8008518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800851a:	6938      	ldr	r0, [r7, #16]
 800851c:	f000 f86c 	bl	80085f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008520:	f7fe fb66 	bl	8006bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008524:	bf00      	nop
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20005838 	.word	0x20005838
 8008530:	20005830 	.word	0x20005830

08008534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800853a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800853e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008540:	4b27      	ldr	r3, [pc, #156]	@ (80085e0 <prvHeapInit+0xac>)
 8008542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3307      	adds	r3, #7
 8008552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	4a1f      	ldr	r2, [pc, #124]	@ (80085e0 <prvHeapInit+0xac>)
 8008564:	4413      	add	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800856c:	4a1d      	ldr	r2, [pc, #116]	@ (80085e4 <prvHeapInit+0xb0>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008572:	4b1c      	ldr	r3, [pc, #112]	@ (80085e4 <prvHeapInit+0xb0>)
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008580:	2208      	movs	r2, #8
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0307 	bic.w	r3, r3, #7
 800858e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <prvHeapInit+0xb4>)
 8008594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008596:	4b14      	ldr	r3, [pc, #80]	@ (80085e8 <prvHeapInit+0xb4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800859e:	4b12      	ldr	r3, [pc, #72]	@ (80085e8 <prvHeapInit+0xb4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085b4:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <prvHeapInit+0xb4>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4a0a      	ldr	r2, [pc, #40]	@ (80085ec <prvHeapInit+0xb8>)
 80085c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	4a09      	ldr	r2, [pc, #36]	@ (80085f0 <prvHeapInit+0xbc>)
 80085ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085cc:	4b09      	ldr	r3, [pc, #36]	@ (80085f4 <prvHeapInit+0xc0>)
 80085ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20001c24 	.word	0x20001c24
 80085e4:	20005824 	.word	0x20005824
 80085e8:	2000582c 	.word	0x2000582c
 80085ec:	20005834 	.word	0x20005834
 80085f0:	20005830 	.word	0x20005830
 80085f4:	20005838 	.word	0x20005838

080085f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008600:	4b28      	ldr	r3, [pc, #160]	@ (80086a4 <prvInsertBlockIntoFreeList+0xac>)
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e002      	b.n	800860c <prvInsertBlockIntoFreeList+0x14>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	429a      	cmp	r2, r3
 8008614:	d8f7      	bhi.n	8008606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	4413      	add	r3, r2
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d108      	bne.n	800863a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	441a      	add	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d118      	bne.n	8008680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b15      	ldr	r3, [pc, #84]	@ (80086a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d00d      	beq.n	8008676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	441a      	add	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e008      	b.n	8008688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008676:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e003      	b.n	8008688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d002      	beq.n	8008696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008696:	bf00      	nop
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20005824 	.word	0x20005824
 80086a8:	2000582c 	.word	0x2000582c

080086ac <memset>:
 80086ac:	4402      	add	r2, r0
 80086ae:	4603      	mov	r3, r0
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d100      	bne.n	80086b6 <memset+0xa>
 80086b4:	4770      	bx	lr
 80086b6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ba:	e7f9      	b.n	80086b0 <memset+0x4>

080086bc <_reclaim_reent>:
 80086bc:	4b2d      	ldr	r3, [pc, #180]	@ (8008774 <_reclaim_reent+0xb8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4283      	cmp	r3, r0
 80086c2:	b570      	push	{r4, r5, r6, lr}
 80086c4:	4604      	mov	r4, r0
 80086c6:	d053      	beq.n	8008770 <_reclaim_reent+0xb4>
 80086c8:	69c3      	ldr	r3, [r0, #28]
 80086ca:	b31b      	cbz	r3, 8008714 <_reclaim_reent+0x58>
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	b163      	cbz	r3, 80086ea <_reclaim_reent+0x2e>
 80086d0:	2500      	movs	r5, #0
 80086d2:	69e3      	ldr	r3, [r4, #28]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	5959      	ldr	r1, [r3, r5]
 80086d8:	b9b1      	cbnz	r1, 8008708 <_reclaim_reent+0x4c>
 80086da:	3504      	adds	r5, #4
 80086dc:	2d80      	cmp	r5, #128	@ 0x80
 80086de:	d1f8      	bne.n	80086d2 <_reclaim_reent+0x16>
 80086e0:	69e3      	ldr	r3, [r4, #28]
 80086e2:	4620      	mov	r0, r4
 80086e4:	68d9      	ldr	r1, [r3, #12]
 80086e6:	f000 f87b 	bl	80087e0 <_free_r>
 80086ea:	69e3      	ldr	r3, [r4, #28]
 80086ec:	6819      	ldr	r1, [r3, #0]
 80086ee:	b111      	cbz	r1, 80086f6 <_reclaim_reent+0x3a>
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 f875 	bl	80087e0 <_free_r>
 80086f6:	69e3      	ldr	r3, [r4, #28]
 80086f8:	689d      	ldr	r5, [r3, #8]
 80086fa:	b15d      	cbz	r5, 8008714 <_reclaim_reent+0x58>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4620      	mov	r0, r4
 8008700:	682d      	ldr	r5, [r5, #0]
 8008702:	f000 f86d 	bl	80087e0 <_free_r>
 8008706:	e7f8      	b.n	80086fa <_reclaim_reent+0x3e>
 8008708:	680e      	ldr	r6, [r1, #0]
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f868 	bl	80087e0 <_free_r>
 8008710:	4631      	mov	r1, r6
 8008712:	e7e1      	b.n	80086d8 <_reclaim_reent+0x1c>
 8008714:	6961      	ldr	r1, [r4, #20]
 8008716:	b111      	cbz	r1, 800871e <_reclaim_reent+0x62>
 8008718:	4620      	mov	r0, r4
 800871a:	f000 f861 	bl	80087e0 <_free_r>
 800871e:	69e1      	ldr	r1, [r4, #28]
 8008720:	b111      	cbz	r1, 8008728 <_reclaim_reent+0x6c>
 8008722:	4620      	mov	r0, r4
 8008724:	f000 f85c 	bl	80087e0 <_free_r>
 8008728:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800872a:	b111      	cbz	r1, 8008732 <_reclaim_reent+0x76>
 800872c:	4620      	mov	r0, r4
 800872e:	f000 f857 	bl	80087e0 <_free_r>
 8008732:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008734:	b111      	cbz	r1, 800873c <_reclaim_reent+0x80>
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f852 	bl	80087e0 <_free_r>
 800873c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800873e:	b111      	cbz	r1, 8008746 <_reclaim_reent+0x8a>
 8008740:	4620      	mov	r0, r4
 8008742:	f000 f84d 	bl	80087e0 <_free_r>
 8008746:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008748:	b111      	cbz	r1, 8008750 <_reclaim_reent+0x94>
 800874a:	4620      	mov	r0, r4
 800874c:	f000 f848 	bl	80087e0 <_free_r>
 8008750:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008752:	b111      	cbz	r1, 800875a <_reclaim_reent+0x9e>
 8008754:	4620      	mov	r0, r4
 8008756:	f000 f843 	bl	80087e0 <_free_r>
 800875a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800875c:	b111      	cbz	r1, 8008764 <_reclaim_reent+0xa8>
 800875e:	4620      	mov	r0, r4
 8008760:	f000 f83e 	bl	80087e0 <_free_r>
 8008764:	6a23      	ldr	r3, [r4, #32]
 8008766:	b11b      	cbz	r3, 8008770 <_reclaim_reent+0xb4>
 8008768:	4620      	mov	r0, r4
 800876a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800876e:	4718      	bx	r3
 8008770:	bd70      	pop	{r4, r5, r6, pc}
 8008772:	bf00      	nop
 8008774:	20000010 	.word	0x20000010

08008778 <__libc_init_array>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	4d0d      	ldr	r5, [pc, #52]	@ (80087b0 <__libc_init_array+0x38>)
 800877c:	4c0d      	ldr	r4, [pc, #52]	@ (80087b4 <__libc_init_array+0x3c>)
 800877e:	1b64      	subs	r4, r4, r5
 8008780:	10a4      	asrs	r4, r4, #2
 8008782:	2600      	movs	r6, #0
 8008784:	42a6      	cmp	r6, r4
 8008786:	d109      	bne.n	800879c <__libc_init_array+0x24>
 8008788:	4d0b      	ldr	r5, [pc, #44]	@ (80087b8 <__libc_init_array+0x40>)
 800878a:	4c0c      	ldr	r4, [pc, #48]	@ (80087bc <__libc_init_array+0x44>)
 800878c:	f000 f87e 	bl	800888c <_init>
 8008790:	1b64      	subs	r4, r4, r5
 8008792:	10a4      	asrs	r4, r4, #2
 8008794:	2600      	movs	r6, #0
 8008796:	42a6      	cmp	r6, r4
 8008798:	d105      	bne.n	80087a6 <__libc_init_array+0x2e>
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a0:	4798      	blx	r3
 80087a2:	3601      	adds	r6, #1
 80087a4:	e7ee      	b.n	8008784 <__libc_init_array+0xc>
 80087a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087aa:	4798      	blx	r3
 80087ac:	3601      	adds	r6, #1
 80087ae:	e7f2      	b.n	8008796 <__libc_init_array+0x1e>
 80087b0:	0800890c 	.word	0x0800890c
 80087b4:	0800890c 	.word	0x0800890c
 80087b8:	0800890c 	.word	0x0800890c
 80087bc:	08008910 	.word	0x08008910

080087c0 <__retarget_lock_acquire_recursive>:
 80087c0:	4770      	bx	lr

080087c2 <__retarget_lock_release_recursive>:
 80087c2:	4770      	bx	lr

080087c4 <memcpy>:
 80087c4:	440a      	add	r2, r1
 80087c6:	4291      	cmp	r1, r2
 80087c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80087cc:	d100      	bne.n	80087d0 <memcpy+0xc>
 80087ce:	4770      	bx	lr
 80087d0:	b510      	push	{r4, lr}
 80087d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087da:	4291      	cmp	r1, r2
 80087dc:	d1f9      	bne.n	80087d2 <memcpy+0xe>
 80087de:	bd10      	pop	{r4, pc}

080087e0 <_free_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4605      	mov	r5, r0
 80087e4:	2900      	cmp	r1, #0
 80087e6:	d041      	beq.n	800886c <_free_r+0x8c>
 80087e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ec:	1f0c      	subs	r4, r1, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bfb8      	it	lt
 80087f2:	18e4      	addlt	r4, r4, r3
 80087f4:	f000 f83e 	bl	8008874 <__malloc_lock>
 80087f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008870 <_free_r+0x90>)
 80087fa:	6813      	ldr	r3, [r2, #0]
 80087fc:	b933      	cbnz	r3, 800880c <_free_r+0x2c>
 80087fe:	6063      	str	r3, [r4, #4]
 8008800:	6014      	str	r4, [r2, #0]
 8008802:	4628      	mov	r0, r5
 8008804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008808:	f000 b83a 	b.w	8008880 <__malloc_unlock>
 800880c:	42a3      	cmp	r3, r4
 800880e:	d908      	bls.n	8008822 <_free_r+0x42>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	1821      	adds	r1, r4, r0
 8008814:	428b      	cmp	r3, r1
 8008816:	bf01      	itttt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	1809      	addeq	r1, r1, r0
 800881e:	6021      	streq	r1, [r4, #0]
 8008820:	e7ed      	b.n	80087fe <_free_r+0x1e>
 8008822:	461a      	mov	r2, r3
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	b10b      	cbz	r3, 800882c <_free_r+0x4c>
 8008828:	42a3      	cmp	r3, r4
 800882a:	d9fa      	bls.n	8008822 <_free_r+0x42>
 800882c:	6811      	ldr	r1, [r2, #0]
 800882e:	1850      	adds	r0, r2, r1
 8008830:	42a0      	cmp	r0, r4
 8008832:	d10b      	bne.n	800884c <_free_r+0x6c>
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	4401      	add	r1, r0
 8008838:	1850      	adds	r0, r2, r1
 800883a:	4283      	cmp	r3, r0
 800883c:	6011      	str	r1, [r2, #0]
 800883e:	d1e0      	bne.n	8008802 <_free_r+0x22>
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	6053      	str	r3, [r2, #4]
 8008846:	4408      	add	r0, r1
 8008848:	6010      	str	r0, [r2, #0]
 800884a:	e7da      	b.n	8008802 <_free_r+0x22>
 800884c:	d902      	bls.n	8008854 <_free_r+0x74>
 800884e:	230c      	movs	r3, #12
 8008850:	602b      	str	r3, [r5, #0]
 8008852:	e7d6      	b.n	8008802 <_free_r+0x22>
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	1821      	adds	r1, r4, r0
 8008858:	428b      	cmp	r3, r1
 800885a:	bf04      	itt	eq
 800885c:	6819      	ldreq	r1, [r3, #0]
 800885e:	685b      	ldreq	r3, [r3, #4]
 8008860:	6063      	str	r3, [r4, #4]
 8008862:	bf04      	itt	eq
 8008864:	1809      	addeq	r1, r1, r0
 8008866:	6021      	streq	r1, [r4, #0]
 8008868:	6054      	str	r4, [r2, #4]
 800886a:	e7ca      	b.n	8008802 <_free_r+0x22>
 800886c:	bd38      	pop	{r3, r4, r5, pc}
 800886e:	bf00      	nop
 8008870:	20005978 	.word	0x20005978

08008874 <__malloc_lock>:
 8008874:	4801      	ldr	r0, [pc, #4]	@ (800887c <__malloc_lock+0x8>)
 8008876:	f7ff bfa3 	b.w	80087c0 <__retarget_lock_acquire_recursive>
 800887a:	bf00      	nop
 800887c:	20005974 	.word	0x20005974

08008880 <__malloc_unlock>:
 8008880:	4801      	ldr	r0, [pc, #4]	@ (8008888 <__malloc_unlock+0x8>)
 8008882:	f7ff bf9e 	b.w	80087c2 <__retarget_lock_release_recursive>
 8008886:	bf00      	nop
 8008888:	20005974 	.word	0x20005974

0800888c <_init>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	bf00      	nop
 8008890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008892:	bc08      	pop	{r3}
 8008894:	469e      	mov	lr, r3
 8008896:	4770      	bx	lr

08008898 <_fini>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	bf00      	nop
 800889c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889e:	bc08      	pop	{r3}
 80088a0:	469e      	mov	lr, r3
 80088a2:	4770      	bx	lr
