
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080097b4  080097b4  0000a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b8  080098b8  0000b1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080098b8  080098b8  0000a8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c0  080098c0  0000b1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c0  080098c0  0000a8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098c4  080098c4  0000a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080098c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08009928  0000b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  080099c8  0000b100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005e14  200001a0  08009a68  0000b1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005fb4  08009a68  0000bfb4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002e8e3  00000000  00000000  0000b1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006427  00000000  00000000  00039ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002270  00000000  00000000  0003fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a9b  00000000  00000000  00042148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00030fd3  00000000  00000000  00043be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002e355  00000000  00000000  00074bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011a75d  00000000  00000000  000a2f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001bd668  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009244  00000000  00000000  001bd6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004a  00000000  00000000  001c68f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800979c 	.word	0x0800979c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	0800979c 	.word	0x0800979c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000572:	4b26      	ldr	r3, [pc, #152]	@ (800060c <_DoInit+0xa0>)
 8000574:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000576:	22a8      	movs	r2, #168	@ 0xa8
 8000578:	2100      	movs	r1, #0
 800057a:	6838      	ldr	r0, [r7, #0]
 800057c:	f009 f81e 	bl	80095bc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2203      	movs	r2, #3
 8000584:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2203      	movs	r2, #3
 800058a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <_DoInit+0xa4>)
 8000590:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <_DoInit+0xa8>)
 8000596:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800059e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	2200      	movs	r2, #0
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	2200      	movs	r2, #0
 80005b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <_DoInit+0xa4>)
 80005b6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <_DoInit+0xac>)
 80005bc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2210      	movs	r2, #16
 80005c2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2200      	movs	r2, #0
 80005d4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80005d6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e00c      	b.n	80005fa <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f1c3 030f 	rsb	r3, r3, #15
 80005e6:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <_DoInit+0xb0>)
 80005e8:	5cd1      	ldrb	r1, [r2, r3]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	460a      	mov	r2, r1
 80005f2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d9ef      	bls.n	80005e0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000600:	f3bf 8f5f 	dmb	sy
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200001bc 	.word	0x200001bc
 8000610:	080097b4 	.word	0x080097b4
 8000614:	20000264 	.word	0x20000264
 8000618:	20000664 	.word	0x20000664
 800061c:	08009858 	.word	0x08009858

08000620 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	429a      	cmp	r2, r3
 8000642:	d905      	bls.n	8000650 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	3b01      	subs	r3, #1
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
 800064e:	e007      	b.n	8000660 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	69b9      	ldr	r1, [r7, #24]
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	1acb      	subs	r3, r1, r3
 800065a:	4413      	add	r3, r2
 800065c:	3b01      	subs	r3, #1
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800066a:	4293      	cmp	r3, r2
 800066c:	bf28      	it	cs
 800066e:	4613      	movcs	r3, r2
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4293      	cmp	r3, r2
 8000678:	bf28      	it	cs
 800067a:	4613      	movcs	r3, r2
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	4413      	add	r3, r2
 8000686:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800068a:	68b9      	ldr	r1, [r7, #8]
 800068c:	6978      	ldr	r0, [r7, #20]
 800068e:	f009 f821 	bl	80096d4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000692:	6a3a      	ldr	r2, [r7, #32]
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	4413      	add	r3, r2
 8000698:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069e:	4413      	add	r3, r2
 80006a0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80006aa:	69fa      	ldr	r2, [r7, #28]
 80006ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ae:	4413      	add	r3, r2
 80006b0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	69fa      	ldr	r2, [r7, #28]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d101      	bne.n	80006c0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80006c0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	69fa      	ldr	r2, [r7, #28]
 80006c8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1b2      	bne.n	8000636 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80006d0:	6a3b      	ldr	r3, [r7, #32]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3728      	adds	r7, #40	@ 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b088      	sub	sp, #32
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d911      	bls.n	8000722 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	4413      	add	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	6938      	ldr	r0, [r7, #16]
 800070e:	f008 ffe1 	bl	80096d4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000712:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	441a      	add	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000720:	e01f      	b.n	8000762 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	4413      	add	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	6938      	ldr	r0, [r7, #16]
 8000736:	f008 ffcd 	bl	80096d4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	4413      	add	r3, r2
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	4619      	mov	r1, r3
 8000752:	6938      	ldr	r0, [r7, #16]
 8000754:	f008 ffbe 	bl	80096d4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000758:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	60da      	str	r2, [r3, #12]
}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800076a:	b480      	push	{r7}
 800076c:	b087      	sub	sp, #28
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	429a      	cmp	r2, r3
 8000784:	d808      	bhi.n	8000798 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1ad2      	subs	r2, r2, r3
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	4413      	add	r3, r2
 8000792:	3b01      	subs	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e004      	b.n	80007a2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	3b01      	subs	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80007a2:	697b      	ldr	r3, [r7, #20]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	371c      	adds	r7, #28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	4a1f      	ldr	r2, [pc, #124]	@ (800084c <SEGGER_RTT_WriteNoLock+0x9c>)
 80007ce:	4413      	add	r3, r2
 80007d0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d029      	beq.n	800082e <SEGGER_RTT_WriteNoLock+0x7e>
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d82e      	bhi.n	800083c <SEGGER_RTT_WriteNoLock+0x8c>
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <SEGGER_RTT_WriteNoLock+0x38>
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d013      	beq.n	800080e <SEGGER_RTT_WriteNoLock+0x5e>
 80007e6:	e029      	b.n	800083c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80007e8:	6978      	ldr	r0, [r7, #20]
 80007ea:	f7ff ffbe 	bl	800076a <_GetAvailWriteSpace>
 80007ee:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d202      	bcs.n	80007fe <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80007fc:	e021      	b.n	8000842 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	69b9      	ldr	r1, [r7, #24]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ff67 	bl	80006da <_WriteNoCheck>
    break;
 800080c:	e019      	b.n	8000842 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ffab 	bl	800076a <_GetAvailWriteSpace>
 8000814:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	4293      	cmp	r3, r2
 800081c:	bf28      	it	cs
 800081e:	4613      	movcs	r3, r2
 8000820:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	69b9      	ldr	r1, [r7, #24]
 8000826:	6978      	ldr	r0, [r7, #20]
 8000828:	f7ff ff57 	bl	80006da <_WriteNoCheck>
    break;
 800082c:	e009      	b.n	8000842 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	69b9      	ldr	r1, [r7, #24]
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	f7ff fef4 	bl	8000620 <_WriteBlocking>
 8000838:	61f8      	str	r0, [r7, #28]
    break;
 800083a:	e002      	b.n	8000842 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    break;
 8000840:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000842:	69fb      	ldr	r3, [r7, #28]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200001bc 	.word	0x200001bc

08000850 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <SEGGER_RTT_Write+0x48>)
 800085e:	61fb      	str	r3, [r7, #28]
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b53      	cmp	r3, #83	@ 0x53
 8000868:	d001      	beq.n	800086e <SEGGER_RTT_Write+0x1e>
 800086a:	f7ff fe7f 	bl	800056c <_DoInit>
  SEGGER_RTT_LOCK();
 800086e:	f3ef 8311 	mrs	r3, BASEPRI
 8000872:	f04f 0120 	mov.w	r1, #32
 8000876:	f381 8811 	msr	BASEPRI, r1
 800087a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	68b9      	ldr	r1, [r7, #8]
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff ff95 	bl	80007b0 <SEGGER_RTT_WriteNoLock>
 8000886:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800088e:	697b      	ldr	r3, [r7, #20]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001bc 	.word	0x200001bc

0800089c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d80e      	bhi.n	80008d8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4413      	add	r3, r2
 80008c2:	78fa      	ldrb	r2, [r7, #3]
 80008c4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d115      	bne.n	8000910 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6918      	ldr	r0, [r3, #16]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	461a      	mov	r2, r3
 80008f2:	f7ff ffad 	bl	8000850 <SEGGER_RTT_Write>
 80008f6:	4602      	mov	r2, r0
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d004      	beq.n	800090a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f04f 32ff 	mov.w	r2, #4294967295
 8000906:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000908:	e002      	b.n	8000910 <_StoreChar+0x74>
      p->Cnt = 0u;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800092a:	2301      	movs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000932:	e007      	b.n	8000944 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000934:	6a3a      	ldr	r2, [r7, #32]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	fbb2 f3f3 	udiv	r3, r2, r3
 800093c:	623b      	str	r3, [r7, #32]
    Width++;
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3301      	adds	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000944:	6a3a      	ldr	r2, [r7, #32]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d2f3      	bcs.n	8000934 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	429a      	cmp	r2, r3
 8000952:	d901      	bls.n	8000958 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	2b00      	cmp	r3, #0
 8000960:	d125      	bne.n	80009ae <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000964:	2b00      	cmp	r3, #0
 8000966:	d022      	beq.n	80009ae <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d005      	beq.n	800097e <_PrintUnsigned+0x66>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_PrintUnsigned+0x66>
        c = '0';
 8000978:	2330      	movs	r3, #48	@ 0x30
 800097a:	76fb      	strb	r3, [r7, #27]
 800097c:	e001      	b.n	8000982 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800097e:	2320      	movs	r3, #32
 8000980:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000982:	e00b      	b.n	800099c <_PrintUnsigned+0x84>
        FieldWidth--;
 8000984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000986:	3b01      	subs	r3, #1
 8000988:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800098a:	7efb      	ldrb	r3, [r7, #27]
 800098c:	4619      	mov	r1, r3
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff ff84 	bl	800089c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db07      	blt.n	80009ac <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <_PrintUnsigned+0x96>
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3ec      	bcc.n	8000984 <_PrintUnsigned+0x6c>
 80009aa:	e000      	b.n	80009ae <_PrintUnsigned+0x96>
          break;
 80009ac:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db55      	blt.n	8000a62 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d903      	bls.n	80009c4 <_PrintUnsigned+0xac>
        NumDigits--;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3b01      	subs	r3, #1
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	e009      	b.n	80009d8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009cc:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d200      	bcs.n	80009d8 <_PrintUnsigned+0xc0>
          break;
 80009d6:	e005      	b.n	80009e4 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	fb02 f303 	mul.w	r3, r2, r3
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80009e2:	e7e8      	b.n	80009b6 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ec:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009f2:	fb02 f303 	mul.w	r3, r2, r3
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <_PrintUnsigned+0x154>)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f7ff ff48 	bl	800089c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db08      	blt.n	8000a26 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1df      	bne.n	80009e4 <_PrintUnsigned+0xcc>
 8000a24:	e000      	b.n	8000a28 <_PrintUnsigned+0x110>
        break;
 8000a26:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d017      	beq.n	8000a62 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d014      	beq.n	8000a62 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a38:	e00a      	b.n	8000a50 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000a40:	2120      	movs	r1, #32
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff ff2a 	bl	800089c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db07      	blt.n	8000a60 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d005      	beq.n	8000a62 <_PrintUnsigned+0x14a>
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d3ed      	bcc.n	8000a3a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000a5e:	e000      	b.n	8000a62 <_PrintUnsigned+0x14a>
            break;
 8000a60:	bf00      	nop
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	0800986c 	.word	0x0800986c

08000a70 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bfb8      	it	lt
 8000a84:	425b      	neglt	r3, r3
 8000a86:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000a8c:	e007      	b.n	8000a9e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a96:	613b      	str	r3, [r7, #16]
    Width++;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	daf3      	bge.n	8000a8e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d901      	bls.n	8000ab2 <_PrintInt+0x42>
    Width = NumDigits;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00a      	beq.n	8000ace <_PrintInt+0x5e>
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db04      	blt.n	8000ac8 <_PrintInt+0x58>
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <_PrintInt+0x5e>
    FieldWidth--;
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <_PrintInt+0x6e>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d01c      	beq.n	8000b18 <_PrintInt+0xa8>
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d117      	bne.n	8000b18 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d014      	beq.n	8000b18 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000aee:	e00a      	b.n	8000b06 <_PrintInt+0x96>
        FieldWidth--;
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000af6:	2120      	movs	r1, #32
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff fecf 	bl	800089c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db07      	blt.n	8000b16 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <_PrintInt+0xa8>
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d3ed      	bcc.n	8000af0 <_PrintInt+0x80>
 8000b14:	e000      	b.n	8000b18 <_PrintInt+0xa8>
          break;
 8000b16:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db4a      	blt.n	8000bb6 <_PrintInt+0x146>
    if (v < 0) {
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da07      	bge.n	8000b36 <_PrintInt+0xc6>
      v = -v;
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	425b      	negs	r3, r3
 8000b2a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000b2c:	212d      	movs	r1, #45	@ 0x2d
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff feb4 	bl	800089c <_StoreChar>
 8000b34:	e008      	b.n	8000b48 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000b40:	212b      	movs	r1, #43	@ 0x2b
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff feaa 	bl	800089c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db32      	blt.n	8000bb6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d01f      	beq.n	8000b9a <_PrintInt+0x12a>
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d11a      	bne.n	8000b9a <_PrintInt+0x12a>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d117      	bne.n	8000b9a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d014      	beq.n	8000b9a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b70:	e00a      	b.n	8000b88 <_PrintInt+0x118>
            FieldWidth--;
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000b78:	2130      	movs	r1, #48	@ 0x30
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff fe8e 	bl	800089c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db07      	blt.n	8000b98 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <_PrintInt+0x12a>
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3ed      	bcc.n	8000b72 <_PrintInt+0x102>
 8000b96:	e000      	b.n	8000b9a <_PrintInt+0x12a>
              break;
 8000b98:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db09      	blt.n	8000bb6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff feb1 	bl	8000918 <_PrintUnsigned>
      }
    }
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0a4      	sub	sp, #144	@ 0x90
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000bd2:	2340      	movs	r3, #64	@ 0x40
 8000bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000bf0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 81d9 	beq.w	8000fac <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 8000bfa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000bfe:	2b25      	cmp	r3, #37	@ 0x25
 8000c00:	f040 81c7 	bne.w	8000f92 <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000c04:	2300      	movs	r3, #0
 8000c06:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 8000c16:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c1a:	3b23      	subs	r3, #35	@ 0x23
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d83f      	bhi.n	8000ca0 <SEGGER_RTT_vprintf+0xe0>
 8000c20:	a201      	add	r2, pc, #4	@ (adr r2, 8000c28 <SEGGER_RTT_vprintf+0x68>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c91 	.word	0x08000c91
 8000c2c:	08000ca1 	.word	0x08000ca1
 8000c30:	08000ca1 	.word	0x08000ca1
 8000c34:	08000ca1 	.word	0x08000ca1
 8000c38:	08000ca1 	.word	0x08000ca1
 8000c3c:	08000ca1 	.word	0x08000ca1
 8000c40:	08000ca1 	.word	0x08000ca1
 8000c44:	08000ca1 	.word	0x08000ca1
 8000c48:	08000c81 	.word	0x08000c81
 8000c4c:	08000ca1 	.word	0x08000ca1
 8000c50:	08000c61 	.word	0x08000c61
 8000c54:	08000ca1 	.word	0x08000ca1
 8000c58:	08000ca1 	.word	0x08000ca1
 8000c5c:	08000c71 	.word	0x08000c71
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	e01b      	b.n	8000ca8 <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	e013      	b.n	8000ca8 <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	e00b      	b.n	8000ca8 <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	e003      	b.n	8000ca8 <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000ca6:	bf00      	nop
        }
      } while (v);
 8000ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1ae      	bne.n	8000c0e <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 8000cbc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cc2:	d912      	bls.n	8000cea <SEGGER_RTT_vprintf+0x12a>
 8000cc4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cc8:	2b39      	cmp	r3, #57	@ 0x39
 8000cca:	d80e      	bhi.n	8000cea <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000cd2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3b30      	subs	r3, #48	@ 0x30
 8000ce6:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8000ce8:	e7e4      	b.n	8000cb4 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 8000cfc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d00:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d02:	d132      	bne.n	8000d6a <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d10:	d10d      	bne.n	8000d2e <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3301      	adds	r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1d19      	adds	r1, r3, #4
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6011      	str	r1, [r2, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000d2c:	e01d      	b.n	8000d6a <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 8000d36:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d3c:	d915      	bls.n	8000d6a <SEGGER_RTT_vprintf+0x1aa>
 8000d3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d42:	2b39      	cmp	r3, #57	@ 0x39
 8000d44:	d811      	bhi.n	8000d6a <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 8000d52:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d62:	4413      	add	r3, r2
 8000d64:	3b30      	subs	r3, #48	@ 0x30
 8000d66:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8000d68:	e7e1      	b.n	8000d2e <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 8000d72:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d76:	2b6c      	cmp	r3, #108	@ 0x6c
 8000d78:	d003      	beq.n	8000d82 <SEGGER_RTT_vprintf+0x1c2>
 8000d7a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d7e:	2b68      	cmp	r3, #104	@ 0x68
 8000d80:	d107      	bne.n	8000d92 <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 8000d90:	e7ef      	b.n	8000d72 <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000d92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d96:	2b25      	cmp	r3, #37	@ 0x25
 8000d98:	f000 80ef 	beq.w	8000f7a <SEGGER_RTT_vprintf+0x3ba>
 8000d9c:	2b25      	cmp	r3, #37	@ 0x25
 8000d9e:	f2c0 80f3 	blt.w	8000f88 <SEGGER_RTT_vprintf+0x3c8>
 8000da2:	2b78      	cmp	r3, #120	@ 0x78
 8000da4:	f300 80f0 	bgt.w	8000f88 <SEGGER_RTT_vprintf+0x3c8>
 8000da8:	2b58      	cmp	r3, #88	@ 0x58
 8000daa:	f2c0 80ed 	blt.w	8000f88 <SEGGER_RTT_vprintf+0x3c8>
 8000dae:	3b58      	subs	r3, #88	@ 0x58
 8000db0:	2b20      	cmp	r3, #32
 8000db2:	f200 80e9 	bhi.w	8000f88 <SEGGER_RTT_vprintf+0x3c8>
 8000db6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dbc <SEGGER_RTT_vprintf+0x1fc>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000ebf 	.word	0x08000ebf
 8000dc0:	08000f89 	.word	0x08000f89
 8000dc4:	08000f89 	.word	0x08000f89
 8000dc8:	08000f89 	.word	0x08000f89
 8000dcc:	08000f89 	.word	0x08000f89
 8000dd0:	08000f89 	.word	0x08000f89
 8000dd4:	08000f89 	.word	0x08000f89
 8000dd8:	08000f89 	.word	0x08000f89
 8000ddc:	08000f89 	.word	0x08000f89
 8000de0:	08000f89 	.word	0x08000f89
 8000de4:	08000f89 	.word	0x08000f89
 8000de8:	08000e41 	.word	0x08000e41
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000f89 	.word	0x08000f89
 8000df4:	08000f89 	.word	0x08000f89
 8000df8:	08000f89 	.word	0x08000f89
 8000dfc:	08000f89 	.word	0x08000f89
 8000e00:	08000f89 	.word	0x08000f89
 8000e04:	08000f89 	.word	0x08000f89
 8000e08:	08000f89 	.word	0x08000f89
 8000e0c:	08000f89 	.word	0x08000f89
 8000e10:	08000f89 	.word	0x08000f89
 8000e14:	08000f89 	.word	0x08000f89
 8000e18:	08000f89 	.word	0x08000f89
 8000e1c:	08000f51 	.word	0x08000f51
 8000e20:	08000f89 	.word	0x08000f89
 8000e24:	08000f89 	.word	0x08000f89
 8000e28:	08000ee9 	.word	0x08000ee9
 8000e2c:	08000f89 	.word	0x08000f89
 8000e30:	08000e95 	.word	0x08000e95
 8000e34:	08000f89 	.word	0x08000f89
 8000e38:	08000f89 	.word	0x08000f89
 8000e3c:	08000ebf 	.word	0x08000ebf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1d19      	adds	r1, r3, #4
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6011      	str	r1, [r2, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 8000e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e54:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 8000e58:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fd1a 	bl	800089c <_StoreChar>
        break;
 8000e68:	e08f      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1d19      	adds	r1, r3, #4
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6011      	str	r1, [r2, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 8000e7a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e88:	220a      	movs	r2, #10
 8000e8a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000e8e:	f7ff fdef 	bl	8000a70 <_PrintInt>
        break;
 8000e92:	e07a      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1d19      	adds	r1, r3, #4
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6011      	str	r1, [r2, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8000ea4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000ea8:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000eb6:	220a      	movs	r2, #10
 8000eb8:	f7ff fd2e 	bl	8000918 <_PrintUnsigned>
        break;
 8000ebc:	e065      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1d19      	adds	r1, r3, #4
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6011      	str	r1, [r2, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 8000ece:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000ed2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	f7ff fd19 	bl	8000918 <_PrintUnsigned>
        break;
 8000ee6:	e050      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	1d19      	adds	r1, r3, #4
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6011      	str	r1, [r2, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8000ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d104      	bne.n	8000f06 <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8000efc:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <SEGGER_RTT_vprintf+0x41c>)
 8000efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 8000f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 8000f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f10:	3301      	adds	r3, #1
 8000f12:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8000f14:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d015      	beq.n	8000f48 <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8000f1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <SEGGER_RTT_vprintf+0x36a>
 8000f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d010      	beq.n	8000f4c <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8000f2a:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000f2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fcb1 	bl	800089c <_StoreChar>
            Precision--;
 8000f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 8000f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	dadf      	bge.n	8000f06 <SEGGER_RTT_vprintf+0x346>
        }
        break;
 8000f46:	e020      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
              break;
 8000f48:	bf00      	nop
 8000f4a:	e01e      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
              break;
 8000f4c:	bf00      	nop
        break;
 8000f4e:	e01c      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1d19      	adds	r1, r3, #4
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6011      	str	r1, [r2, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000f60:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f64:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2308      	movs	r3, #8
 8000f72:	2210      	movs	r2, #16
 8000f74:	f7ff fcd0 	bl	8000918 <_PrintUnsigned>
        break;
 8000f78:	e007      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000f7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f7e:	2125      	movs	r1, #37	@ 0x25
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fc8b 	bl	800089c <_StoreChar>
        break;
 8000f86:	e000      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 8000f88:	bf00      	nop
      }
      sFormat++;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	e007      	b.n	8000fa2 <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 8000f92:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000f96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fc7d 	bl	800089c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000fa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f6bf ae1c 	bge.w	8000be2 <SEGGER_RTT_vprintf+0x22>
 8000faa:	e000      	b.n	8000fae <SEGGER_RTT_vprintf+0x3ee>
      break;
 8000fac:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000fae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd0d      	ble.n	8000fd0 <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000fba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fc44 	bl	8000850 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000fcc:	4413      	add	r3, r2
 8000fce:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 8000fd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3788      	adds	r7, #136	@ 0x88
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	080097c0 	.word	0x080097c0

08000fe0 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000fe0:	b40e      	push	{r1, r2, r3}
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	69f9      	ldr	r1, [r7, #28]
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fde1 	bl	8000bc0 <SEGGER_RTT_vprintf>
 8000ffe:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8001000:	68fb      	ldr	r3, [r7, #12]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100c:	b003      	add	sp, #12
 800100e:	4770      	bx	lr

08001010 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <MX_ETH_Init+0x84>)
 8001016:	4a20      	ldr	r2, [pc, #128]	@ (8001098 <MX_ETH_Init+0x88>)
 8001018:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <MX_ETH_Init+0x8c>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001020:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <MX_ETH_Init+0x8c>)
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <MX_ETH_Init+0x8c>)
 8001028:	22e1      	movs	r2, #225	@ 0xe1
 800102a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <MX_ETH_Init+0x8c>)
 800102e:	2200      	movs	r2, #0
 8001030:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <MX_ETH_Init+0x8c>)
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <MX_ETH_Init+0x8c>)
 800103a:	2200      	movs	r2, #0
 800103c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_ETH_Init+0x84>)
 8001040:	4a16      	ldr	r2, [pc, #88]	@ (800109c <MX_ETH_Init+0x8c>)
 8001042:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <MX_ETH_Init+0x84>)
 8001046:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800104a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_ETH_Init+0x84>)
 800104e:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <MX_ETH_Init+0x90>)
 8001050:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <MX_ETH_Init+0x84>)
 8001054:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <MX_ETH_Init+0x94>)
 8001056:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_ETH_Init+0x84>)
 800105a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800105e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001060:	480c      	ldr	r0, [pc, #48]	@ (8001094 <MX_ETH_Init+0x84>)
 8001062:	f001 f973 	bl	800234c <HAL_ETH_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800106c:	f000 fb56 	bl	800171c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001070:	2238      	movs	r2, #56	@ 0x38
 8001072:	2100      	movs	r1, #0
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <MX_ETH_Init+0x98>)
 8001076:	f008 faa1 	bl	80095bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <MX_ETH_Init+0x98>)
 800107c:	2221      	movs	r2, #33	@ 0x21
 800107e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_ETH_Init+0x98>)
 8001082:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001086:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <MX_ETH_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200006ac 	.word	0x200006ac
 8001098:	40028000 	.word	0x40028000
 800109c:	2000075c 	.word	0x2000075c
 80010a0:	20000100 	.word	0x20000100
 80010a4:	20000060 	.word	0x20000060
 80010a8:	20000674 	.word	0x20000674

080010ac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	@ 0x38
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001204 <HAL_ETH_MspInit+0x158>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	f040 8096 	bne.w	80011fc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80010d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 80010d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010da:	6313      	str	r3, [r2, #48]	@ 0x30
 80010dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e4:	623b      	str	r3, [r7, #32]
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	4b47      	ldr	r3, [pc, #284]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	4a46      	ldr	r2, [pc, #280]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 80010ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f4:	4b44      	ldr	r3, [pc, #272]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	4b41      	ldr	r3, [pc, #260]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001104:	4a40      	ldr	r2, [pc, #256]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 8001106:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800110a:	6313      	str	r3, [r2, #48]	@ 0x30
 800110c:	4b3e      	ldr	r3, [pc, #248]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001118:	4b3b      	ldr	r3, [pc, #236]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	4a3a      	ldr	r2, [pc, #232]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6313      	str	r3, [r2, #48]	@ 0x30
 8001124:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b35      	ldr	r3, [pc, #212]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4a34      	ldr	r2, [pc, #208]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6313      	str	r3, [r2, #48]	@ 0x30
 800113c:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b2f      	ldr	r3, [pc, #188]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a2e      	ldr	r2, [pc, #184]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001164:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 8001166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800116a:	6313      	str	r3, [r2, #48]	@ 0x30
 800116c:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <HAL_ETH_MspInit+0x15c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001178:	233a      	movs	r3, #58	@ 0x3a
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001188:	230b      	movs	r3, #11
 800118a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	481e      	ldr	r0, [pc, #120]	@ (800120c <HAL_ETH_MspInit+0x160>)
 8001194:	f001 fcee 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 8001198:	238e      	movs	r3, #142	@ 0x8e
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a8:	230b      	movs	r3, #11
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4817      	ldr	r0, [pc, #92]	@ (8001210 <HAL_ETH_MspInit+0x164>)
 80011b4:	f001 fcde 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80011b8:	f242 0301 	movw	r3, #8193	@ 0x2001
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ca:	230b      	movs	r3, #11
 80011cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	480f      	ldr	r0, [pc, #60]	@ (8001214 <HAL_ETH_MspInit+0x168>)
 80011d6:	f001 fccd 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011da:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ec:	230b      	movs	r3, #11
 80011ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <HAL_ETH_MspInit+0x16c>)
 80011f8:	f001 fcbc 	bl	8002b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3738      	adds	r7, #56	@ 0x38
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40028000 	.word	0x40028000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020800 	.word	0x40020800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40021800 	.word	0x40021800

0800121c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <MX_FREERTOS_Init+0x18>)
 8001222:	2100      	movs	r1, #0
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_FREERTOS_Init+0x1c>)
 8001226:	f005 fb1b 	bl	8006860 <osThreadNew>
 800122a:	4603      	mov	r3, r0
 800122c:	4a03      	ldr	r2, [pc, #12]	@ (800123c <MX_FREERTOS_Init+0x20>)
 800122e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	0800987c 	.word	0x0800987c
 8001238:	08001241 	.word	0x08001241
 800123c:	20000764 	.word	0x20000764

08001240 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 AppMain();
 8001248:	f000 fd4a 	bl	8001ce0 <AppMain>
    osDelay(1);
 800124c:	2001      	movs	r0, #1
 800124e:	f005 fbad 	bl	80069ac <osDelay>
	 AppMain();
 8001252:	bf00      	nop
 8001254:	e7f8      	b.n	8001248 <StartDefaultTask+0x8>
	...

08001258 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	@ 0x30
 800125c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b63      	ldr	r3, [pc, #396]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a62      	ldr	r2, [pc, #392]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b60      	ldr	r3, [pc, #384]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	4b5d      	ldr	r3, [pc, #372]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a5c      	ldr	r2, [pc, #368]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b5a      	ldr	r3, [pc, #360]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b57      	ldr	r3, [pc, #348]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a56      	ldr	r2, [pc, #344]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b54      	ldr	r3, [pc, #336]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b51      	ldr	r3, [pc, #324]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a50      	ldr	r2, [pc, #320]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b4e      	ldr	r3, [pc, #312]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b4b      	ldr	r3, [pc, #300]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a4a      	ldr	r2, [pc, #296]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b48      	ldr	r3, [pc, #288]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e6:	4b45      	ldr	r3, [pc, #276]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a44      	ldr	r2, [pc, #272]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b42      	ldr	r3, [pc, #264]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2101      	movs	r1, #1
 8001302:	483f      	ldr	r0, [pc, #252]	@ (8001400 <MX_GPIO_Init+0x1a8>)
 8001304:	f001 fde2 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2104      	movs	r1, #4
 800130c:	483d      	ldr	r0, [pc, #244]	@ (8001404 <MX_GPIO_Init+0x1ac>)
 800130e:	f001 fddd 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001318:	483a      	ldr	r0, [pc, #232]	@ (8001404 <MX_GPIO_Init+0x1ac>)
 800131a:	f001 fdd7 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2140      	movs	r1, #64	@ 0x40
 8001322:	4839      	ldr	r0, [pc, #228]	@ (8001408 <MX_GPIO_Init+0x1b0>)
 8001324:	f001 fdd2 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	21c0      	movs	r1, #192	@ 0xc0
 800132c:	4837      	ldr	r0, [pc, #220]	@ (800140c <MX_GPIO_Init+0x1b4>)
 800132e:	f001 fdcd 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001338:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	482d      	ldr	r0, [pc, #180]	@ (8001400 <MX_GPIO_Init+0x1a8>)
 800134a:	f001 fc13 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134e:	2301      	movs	r3, #1
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4826      	ldr	r0, [pc, #152]	@ (8001400 <MX_GPIO_Init+0x1a8>)
 8001366:	f001 fc05 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136a:	2304      	movs	r3, #4
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4820      	ldr	r0, [pc, #128]	@ (8001404 <MX_GPIO_Init+0x1ac>)
 8001382:	f001 fbf7 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001386:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4819      	ldr	r0, [pc, #100]	@ (8001404 <MX_GPIO_Init+0x1ac>)
 80013a0:	f001 fbe8 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a4:	2340      	movs	r3, #64	@ 0x40
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4813      	ldr	r0, [pc, #76]	@ (8001408 <MX_GPIO_Init+0x1b0>)
 80013bc:	f001 fbda 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <MX_GPIO_Init+0x1b0>)
 80013d4:	f001 fbce 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d8:	23c0      	movs	r3, #192	@ 0xc0
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <MX_GPIO_Init+0x1b4>)
 80013f0:	f001 fbc0 	bl	8002b74 <HAL_GPIO_Init>

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	@ 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800
 8001404:	40020400 	.word	0x40020400
 8001408:	40021800 	.word	0x40021800
 800140c:	40020c00 	.word	0x40020c00

08001410 <MX_I2S1_Init>:

I2S_HandleTypeDef hi2s1;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_I2S1_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	@ (8001460 <MX_I2S1_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <MX_I2S1_Init+0x4c>)
 800141c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001420:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <MX_I2S1_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <MX_I2S1_Init+0x4c>)
 800142a:	2203      	movs	r2, #3
 800142c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <MX_I2S1_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_I2S1_Init+0x4c>)
 8001436:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800143a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <MX_I2S1_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <MX_I2S1_Init+0x4c>)
 8001444:	2202      	movs	r2, #2
 8001446:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	@ (800145c <MX_I2S1_Init+0x4c>)
 800144a:	f001 fd59 	bl	8002f00 <HAL_I2S_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 8001454:	f000 f962 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000768 	.word	0x20000768
 8001460:	40013000 	.word	0x40013000

08001464 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0ae      	sub	sp, #184	@ 0xb8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2290      	movs	r2, #144	@ 0x90
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f008 f899 	bl	80095bc <memset>
  if(i2sHandle->Instance==SPI1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a36      	ldr	r2, [pc, #216]	@ (8001568 <HAL_I2S_MspInit+0x104>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d165      	bne.n	8001560 <HAL_I2S_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001494:	2301      	movs	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001498:	23c0      	movs	r3, #192	@ 0xc0
 800149a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80014ac:	2300      	movs	r3, #0
 80014ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fdf5 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2S_MspInit+0x60>
    {
      Error_Handler();
 80014c0:	f000 f92c 	bl	800171c <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <HAL_I2S_MspInit+0x108>)
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	4a28      	ldr	r2, [pc, #160]	@ (800156c <HAL_I2S_MspInit+0x108>)
 80014ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d0:	4b26      	ldr	r3, [pc, #152]	@ (800156c <HAL_I2S_MspInit+0x108>)
 80014d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <HAL_I2S_MspInit+0x108>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e0:	4a22      	ldr	r2, [pc, #136]	@ (800156c <HAL_I2S_MspInit+0x108>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e8:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_I2S_MspInit+0x108>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_I2S_MspInit+0x108>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <HAL_I2S_MspInit+0x108>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001500:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <HAL_I2S_MspInit+0x108>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800150c:	2330      	movs	r3, #48	@ 0x30
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001524:	2305      	movs	r3, #5
 8001526:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800152e:	4619      	mov	r1, r3
 8001530:	480f      	ldr	r0, [pc, #60]	@ (8001570 <HAL_I2S_MspInit+0x10c>)
 8001532:	f001 fb1f 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001536:	2320      	movs	r3, #32
 8001538:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800154e:	2305      	movs	r3, #5
 8001550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <HAL_I2S_MspInit+0x110>)
 800155c:	f001 fb0a 	bl	8002b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	37b8      	adds	r7, #184	@ 0xb8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013000 	.word	0x40013000
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800157c:	f000 f88e 	bl	800169c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001580:	f000 fd2a 	bl	8001fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001584:	f000 f818 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001588:	f7ff fe66 	bl	8001258 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800158c:	f000 fa70 	bl	8001a70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001590:	f000 fafe 	bl	8001b90 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8001594:	f000 f910 	bl	80017b8 <MX_SPI2_Init>
  MX_RNG_Init();
 8001598:	f000 f8c6 	bl	8001728 <MX_RNG_Init>
  MX_I2S1_Init();
 800159c:	f7ff ff38 	bl	8001410 <MX_I2S1_Init>
  MX_ETH_Init();
 80015a0:	f7ff fd36 	bl	8001010 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80015a4:	f005 f8f2 	bl	800678c <osKernelInitialize>
  MX_FREERTOS_Init();
 80015a8:	f7ff fe38 	bl	800121c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015ac:	f005 f922 	bl	80067f4 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 80015b0:	f000 fb96 	bl	8001ce0 <AppMain>
 80015b4:	e7fc      	b.n	80015b0 <main+0x38>
	...

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	@ 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	2234      	movs	r2, #52	@ 0x34
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f007 fff8 	bl	80095bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015dc:	f001 fffc 	bl	80035d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001694 <SystemClock_Config+0xdc>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001694 <SystemClock_Config+0xdc>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ec:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <SystemClock_Config+0xdc>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015f8:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <SystemClock_Config+0xe0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001600:	4a25      	ldr	r2, [pc, #148]	@ (8001698 <SystemClock_Config+0xe0>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <SystemClock_Config+0xe0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001614:	2301      	movs	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001618:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800161c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800162c:	2360      	movs	r3, #96	@ 0x60
 800162e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001634:	2304      	movs	r3, #4
 8001636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001638:	2302      	movs	r3, #2
 800163a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4618      	mov	r0, r3
 8001642:	f002 f829 	bl	8003698 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800164c:	f000 f866 	bl	800171c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001650:	f001 ffd2 	bl	80035f8 <HAL_PWREx_EnableOverDrive>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800165a:	f000 f85f 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	2302      	movs	r3, #2
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	2103      	movs	r1, #3
 800167a:	4618      	mov	r0, r3
 800167c:	f002 faba 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001686:	f000 f849 	bl	800171c <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	@ 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80016ae:	f000 fdd5 	bl	800225c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MPU_Config+0x58>)
 80016bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80016be:	230d      	movs	r3, #13
 80016c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80016ca:	2303      	movs	r3, #3
 80016cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016de:	463b      	mov	r3, r7
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fdf3 	bl	80022cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80016e6:	2006      	movs	r0, #6
 80016e8:	f000 fdd0 	bl	800228c <HAL_MPU_Enable>

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2007c000 	.word	0x2007c000

080016f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800170a:	f000 fc81 	bl	8002010 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40001000 	.word	0x40001000

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <Error_Handler+0x8>

08001728 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_RNG_Init+0x20>)
 800172e:	4a07      	ldr	r2, [pc, #28]	@ (800174c <MX_RNG_Init+0x24>)
 8001730:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <MX_RNG_Init+0x20>)
 8001734:	f003 f8de 	bl	80048f4 <HAL_RNG_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800173e:	f7ff ffed 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200007a8 	.word	0x200007a8
 800174c:	50060800 	.word	0x50060800

08001750 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0a8      	sub	sp, #160	@ 0xa0
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	2290      	movs	r2, #144	@ 0x90
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f007 ff2b 	bl	80095bc <memset>
  if(rngHandle->Instance==RNG)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a11      	ldr	r2, [pc, #68]	@ (80017b0 <HAL_RNG_MspInit+0x60>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d11b      	bne.n	80017a8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001770:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001774:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fc8f 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800178c:	f7ff ffc6 	bl	800171c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_RNG_MspInit+0x64>)
 8001792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001794:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_RNG_MspInit+0x64>)
 8001796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800179a:	6353      	str	r3, [r2, #52]	@ 0x34
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_RNG_MspInit+0x64>)
 800179e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80017a8:	bf00      	nop
 80017aa:	37a0      	adds	r7, #160	@ 0xa0
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	50060800 	.word	0x50060800
 80017b4:	40023800 	.word	0x40023800

080017b8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <MX_SPI2_Init+0x74>)
 80017be:	4a1c      	ldr	r2, [pc, #112]	@ (8001830 <MX_SPI2_Init+0x78>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <MX_SPI2_Init+0x74>)
 80017c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <MX_SPI2_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_SPI2_Init+0x74>)
 80017d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017d8:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_SPI2_Init+0x74>)
 80017da:	2202      	movs	r2, #2
 80017dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <MX_SPI2_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_SPI2_Init+0x74>)
 80017e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_SPI2_Init+0x74>)
 80017ee:	2238      	movs	r2, #56	@ 0x38
 80017f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <MX_SPI2_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_SPI2_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <MX_SPI2_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001804:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_SPI2_Init+0x74>)
 8001806:	2207      	movs	r2, #7
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <MX_SPI2_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_SPI2_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	@ (800182c <MX_SPI2_Init+0x74>)
 8001818:	f003 f896 	bl	8004948 <HAL_SPI_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001822:	f7ff ff7b 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200007b8 	.word	0x200007b8
 8001830:	40003800 	.word	0x40003800

08001834 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	@ 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_SPI_MspInit+0x7c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d128      	bne.n	80018a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a16      	ldr	r2, [pc, #88]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_SPI_MspInit+0x80>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001886:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001898:	2305      	movs	r3, #5
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <HAL_SPI_MspInit+0x84>)
 80018a4:	f001 f966 	bl	8002b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40003800 	.word	0x40003800
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020400 	.word	0x40020400

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	4a10      	ldr	r2, [pc, #64]	@ (8001908 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	210f      	movs	r1, #15
 80018f6:	f06f 0001 	mvn.w	r0, #1
 80018fa:	f000 fc85 	bl	8002208 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	@ 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800191c:	4b33      	ldr	r3, [pc, #204]	@ (80019ec <HAL_InitTick+0xe0>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	4a32      	ldr	r2, [pc, #200]	@ (80019ec <HAL_InitTick+0xe0>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6413      	str	r3, [r2, #64]	@ 0x40
 8001928:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <HAL_InitTick+0xe0>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001934:	f107 0210 	add.w	r2, r7, #16
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fb7e 	bl	8004040 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d103      	bne.n	8001956 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800194e:	f002 fb4f 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8001952:	6378      	str	r0, [r7, #52]	@ 0x34
 8001954:	e004      	b.n	8001960 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001956:	f002 fb4b 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 800195a:	4603      	mov	r3, r0
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001962:	4a23      	ldr	r2, [pc, #140]	@ (80019f0 <HAL_InitTick+0xe4>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0c9b      	lsrs	r3, r3, #18
 800196a:	3b01      	subs	r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800196e:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <HAL_InitTick+0xe8>)
 8001970:	4a21      	ldr	r2, [pc, #132]	@ (80019f8 <HAL_InitTick+0xec>)
 8001972:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001974:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <HAL_InitTick+0xe8>)
 8001976:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800197a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800197c:	4a1d      	ldr	r2, [pc, #116]	@ (80019f4 <HAL_InitTick+0xe8>)
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001980:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <HAL_InitTick+0xe8>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <HAL_InitTick+0xe8>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <HAL_InitTick+0xe8>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001994:	4817      	ldr	r0, [pc, #92]	@ (80019f4 <HAL_InitTick+0xe8>)
 8001996:	f003 fb81 	bl	800509c <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11b      	bne.n	80019e0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019a8:	4812      	ldr	r0, [pc, #72]	@ (80019f4 <HAL_InitTick+0xe8>)
 80019aa:	f003 fbd9 	bl	8005160 <HAL_TIM_Base_Start_IT>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d111      	bne.n	80019e0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019bc:	2036      	movs	r0, #54	@ 0x36
 80019be:	f000 fc3f 	bl	8002240 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d808      	bhi.n	80019da <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	2036      	movs	r0, #54	@ 0x36
 80019ce:	f000 fc1b 	bl	8002208 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_InitTick+0xf0>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e002      	b.n	80019e0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3738      	adds	r7, #56	@ 0x38
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	431bde83 	.word	0x431bde83
 80019f4:	2000081c 	.word	0x2000081c
 80019f8:	40001000 	.word	0x40001000
 80019fc:	20000004 	.word	0x20000004

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <NMI_Handler+0x4>

08001a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <MemManage_Handler+0x4>

08001a18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <TIM6_DAC_IRQHandler+0x10>)
 8001a3e:	f003 fc07 	bl	8005250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000081c 	.word	0x2000081c

08001a4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a76:	4a15      	ldr	r2, [pc, #84]	@ (8001acc <MX_USART3_UART_Init+0x5c>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001ab4:	f003 fdc0 	bl	8005638 <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001abe:	f7ff fe2d 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000868 	.word	0x20000868
 8001acc:	40004800 	.word	0x40004800

08001ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0ae      	sub	sp, #184	@ 0xb8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2290      	movs	r2, #144	@ 0x90
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f007 fd63 	bl	80095bc <memset>
  if(uartHandle->Instance==USART3)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a22      	ldr	r2, [pc, #136]	@ (8001b84 <HAL_UART_MspInit+0xb4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d13c      	bne.n	8001b7a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fac8 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b1a:	f7ff fdff 	bl	800171c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <HAL_UART_MspInit+0xb8>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a19      	ldr	r2, [pc, #100]	@ (8001b88 <HAL_UART_MspInit+0xb8>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <HAL_UART_MspInit+0xb8>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <HAL_UART_MspInit+0xb8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <HAL_UART_MspInit+0xb8>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_UART_MspInit+0xb8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	@ (8001b8c <HAL_UART_MspInit+0xbc>)
 8001b76:	f000 fffd 	bl	8002b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	37b8      	adds	r7, #184	@ 0xb8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004800 	.word	0x40004800
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020c00 	.word	0x40020c00

08001b90 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b9e:	2206      	movs	r2, #6
 8001ba0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bd4:	f001 fbc5 	bl	8003362 <HAL_PCD_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001bde:	f7ff fd9d 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200008f0 	.word	0x200008f0

08001bec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ae      	sub	sp, #184	@ 0xb8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2290      	movs	r2, #144	@ 0x90
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f007 fcd5 	bl	80095bc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c1a:	d159      	bne.n	8001cd0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fa39 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c38:	f7ff fd70 	bl	800171c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	4a25      	ldr	r2, [pc, #148]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c48:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c54:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c6e:	230a      	movs	r3, #10
 8001c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4818      	ldr	r0, [pc, #96]	@ (8001cdc <HAL_PCD_MspInit+0xf0>)
 8001c7c:	f000 ff7a 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4810      	ldr	r0, [pc, #64]	@ (8001cdc <HAL_PCD_MspInit+0xf0>)
 8001c9c:	f000 ff6a 	bl	8002b74 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001caa:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <HAL_PCD_MspInit+0xec>)
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	37b8      	adds	r7, #184	@ 0xb8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <AppMain>:
#include "TCP_IP.h"
#include "proj_tasks.h"
#include "mic.h"


void AppMain(void){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af02      	add	r7, sp, #8

	//Task to create network interface and socket
	xTaskCreate(vInterfaceSocketTask, "Task Initialize Interface & Socket",
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	2328      	movs	r3, #40	@ 0x28
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf4:	490a      	ldr	r1, [pc, #40]	@ (8001d20 <AppMain+0x40>)
 8001cf6:	480b      	ldr	r0, [pc, #44]	@ (8001d24 <AppMain+0x44>)
 8001cf8:	f005 fcee 	bl	80076d8 <xTaskCreate>

	//test LCD

	//configureI2S();
	//getAudio();
	lcd_4SPI_init();
 8001cfc:	f000 f8d6 	bl	8001eac <lcd_4SPI_init>
	setPageaddressing();
 8001d00:	f000 f860 	bl	8001dc4 <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f000 f873 	bl	8001df0 <lcd_setpage_address>
	lcd_setcolumn_address(32);
 8001d0a:	2020      	movs	r0, #32
 8001d0c:	f000 f88a 	bl	8001e24 <lcd_setcolumn_address>

	while(1){
		//SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
		getAudio();
 8001d10:	f000 f8e6 	bl	8001ee0 <getAudio>
		HAL_Delay(2000);
 8001d14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d18:	f000 f99a 	bl	8002050 <HAL_Delay>
		getAudio();
 8001d1c:	bf00      	nop
 8001d1e:	e7f7      	b.n	8001d10 <AppMain+0x30>
 8001d20:	080097d4 	.word	0x080097d4
 8001d24:	08001f71 	.word	0x08001f71

08001d28 <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2140      	movs	r1, #64	@ 0x40
 8001d36:	480b      	ldr	r0, [pc, #44]	@ (8001d64 <lcd_transfer+0x3c>)
 8001d38:	f001 f8c8 	bl	8002ecc <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 8001d3c:	1df9      	adds	r1, r7, #7
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	2201      	movs	r2, #1
 8001d44:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <lcd_transfer+0x40>)
 8001d46:	f002 feaa 	bl	8004a9e <HAL_SPI_Transmit>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <lcd_transfer+0x3c>)
 8001d54:	f001 f8ba 	bl	8002ecc <HAL_GPIO_WritePin>

	return HAL_OK;
 8001d58:	2300      	movs	r3, #0

}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	200007b8 	.word	0x200007b8

08001d6c <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 8001d72:	23af      	movs	r3, #175	@ 0xaf
 8001d74:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2180      	movs	r1, #128	@ 0x80
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <onLCD+0x28>)
 8001d7c:	f001 f8a6 	bl	8002ecc <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ffd0 	bl	8001d28 <lcd_transfer>
 8001d88:	4603      	mov	r3, r0

}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40020c00 	.word	0x40020c00

08001d98 <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 8001d9e:	23ae      	movs	r3, #174	@ 0xae
 8001da0:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2180      	movs	r1, #128	@ 0x80
 8001da6:	4806      	ldr	r0, [pc, #24]	@ (8001dc0 <offLCD+0x28>)
 8001da8:	f001 f890 	bl	8002ecc <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ffba 	bl	8001d28 <lcd_transfer>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40020c00 	.word	0x40020c00

08001dc4 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	4806      	ldr	r0, [pc, #24]	@ (8001dec <setPageaddressing+0x28>)
 8001dd4:	f001 f87a 	bl	8002ecc <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ffa4 	bl	8001d28 <lcd_transfer>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020c00 	.word	0x40020c00

08001df0 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001e02:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2180      	movs	r1, #128	@ 0x80
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <lcd_setpage_address+0x30>)
 8001e0a:	f001 f85f 	bl	8002ecc <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8001e0e:	7bbb      	ldrb	r3, [r7, #14]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff89 	bl	8001d28 <lcd_transfer>
 8001e16:	4603      	mov	r3, r0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40020c00 	.word	0x40020c00

08001e24 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e30:	dc02      	bgt.n	8001e38 <lcd_setcolumn_address+0x14>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da01      	bge.n	8001e3c <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e030      	b.n	8001e9e <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 8001e40:	2310      	movs	r3, #16
 8001e42:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 8001e44:	2300      	movs	r3, #0
 8001e46:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	b25a      	sxtb	r2, r3
 8001e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	b25a      	sxtb	r2, r3
 8001e64:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	480d      	ldr	r0, [pc, #52]	@ (8001ea8 <lcd_setcolumn_address+0x84>)
 8001e74:	f001 f82a 	bl	8002ecc <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff54 	bl	8001d28 <lcd_transfer>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e009      	b.n	8001e9e <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 8001e8a:	7b7b      	ldrb	r3, [r7, #13]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff4b 	bl	8001d28 <lcd_transfer>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40020c00 	.word	0x40020c00

08001eac <lcd_4SPI_init>:
}

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2140      	movs	r1, #64	@ 0x40
 8001eb4:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <lcd_4SPI_init+0x2c>)
 8001eb6:	f001 f809 	bl	8002ecc <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4807      	ldr	r0, [pc, #28]	@ (8001edc <lcd_4SPI_init+0x30>)
 8001ec0:	f001 f804 	bl	8002ecc <HAL_GPIO_WritePin>

	//dummy transmission for SPI

	onLCD();
 8001ec4:	f7ff ff52 	bl	8001d6c <onLCD>
	offLCD();
 8001ec8:	f7ff ff66 	bl	8001d98 <offLCD>

	//this is the column where the lcd starts
	lcd_setcolumn_address(32);
 8001ecc:	2020      	movs	r0, #32
 8001ece:	f7ff ffa9 	bl	8001e24 <lcd_setcolumn_address>

	return HAL_OK;
 8001ed2:	2300      	movs	r3, #0

}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40020800 	.word	0x40020800

08001ee0 <getAudio>:
 * 		SDA -> PC12 (WHITE)
 */


//get audio from the mic
uint32_t getAudio(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint32_t timeout_I2S = 5000;
 8001ee6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001eea:	60fb      	str	r3, [r7, #12]

	// For 24-bit data in 32-bit frame, each sample is one 32-bit word
	uint32_t i2sRxBuffer[1]; // Single 32-bit sample

	//pass buffer as uint16_t* but with size for 32-bit data
	status = HAL_I2S_Receive(&hi2s1, (uint16_t*)i2sRxBuffer, 2, timeout_I2S);
 8001eec:	1d39      	adds	r1, r7, #4
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4819      	ldr	r0, [pc, #100]	@ (8001f58 <getAudio+0x78>)
 8001ef4:	f001 f8ea 	bl	80030cc <HAL_I2S_Receive>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	72fb      	strb	r3, [r7, #11]
	///should print 0x0..0300
	//printf("I2S Mode: 0x%08lX\n", hi2s1.Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG);

	//I2S state is 1, correct

	if(status == HAL_OK){
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <getAudio+0x36>
		SEGGER_RTT_printf(0,"works\n");
 8001f02:	4916      	ldr	r1, [pc, #88]	@ (8001f5c <getAudio+0x7c>)
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff f86b 	bl	8000fe0 <SEGGER_RTT_printf>
		SEGGER_RTT_printf(0, "i2sRxBuffer[0]: 0x%08X\n", i2sRxBuffer[0]);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4914      	ldr	r1, [pc, #80]	@ (8001f60 <getAudio+0x80>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff f865 	bl	8000fe0 <SEGGER_RTT_printf>

	}
	if (status != HAL_OK) {
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d016      	beq.n	8001f4a <getAudio+0x6a>
	    if (status == HAL_BUSY) {
 8001f1c:	7afb      	ldrb	r3, [r7, #11]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d104      	bne.n	8001f2c <getAudio+0x4c>
			SEGGER_RTT_printf(0,"busy error\n");
 8001f22:	4910      	ldr	r1, [pc, #64]	@ (8001f64 <getAudio+0x84>)
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff f85b 	bl	8000fe0 <SEGGER_RTT_printf>
 8001f2a:	e00e      	b.n	8001f4a <getAudio+0x6a>
	    } else if (status == HAL_TIMEOUT) {
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d104      	bne.n	8001f3c <getAudio+0x5c>
			SEGGER_RTT_printf(0,"timeout error\n");
 8001f32:	490d      	ldr	r1, [pc, #52]	@ (8001f68 <getAudio+0x88>)
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff f853 	bl	8000fe0 <SEGGER_RTT_printf>
 8001f3a:	e006      	b.n	8001f4a <getAudio+0x6a>
	    } else if (status == HAL_ERROR) {
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d103      	bne.n	8001f4a <getAudio+0x6a>
			SEGGER_RTT_printf(0,"reg error\n");
 8001f42:	490a      	ldr	r1, [pc, #40]	@ (8001f6c <getAudio+0x8c>)
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff f84b 	bl	8000fe0 <SEGGER_RTT_printf>
	    }
	}
	return 0xDEAD;
 8001f4a:	f64d 63ad 	movw	r3, #57005	@ 0xdead
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000768 	.word	0x20000768
 8001f5c:	080097f8 	.word	0x080097f8
 8001f60:	08009800 	.word	0x08009800
 8001f64:	08009818 	.word	0x08009818
 8001f68:	08009824 	.word	0x08009824
 8001f6c:	08009834 	.word	0x08009834

08001f70 <vInterfaceSocketTask>:

//store Mic data, use 8 chars for 64 bits in case
static char TxBuffer[8];

//initailize network interface and create socket, only 1 for my current applications
void vInterfaceSocketTask(void * argument) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

	//Initialize Socket
	//xClientSocket = ConfigTCPClientSocket();

    for(;;) {
        vTaskDelay(1000);
 8001f78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f7c:	f005 fd0c 	bl	8007998 <vTaskDelay>
 8001f80:	e7fa      	b.n	8001f78 <vInterfaceSocketTask+0x8>
	...

08001f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f88:	f7ff fd60 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f8c:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f8e:	490d      	ldr	r1, [pc, #52]	@ (8001fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f90:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fb2:	f007 fb69 	bl	8009688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb6:	f7ff fadf 	bl	8001578 <main>
  bx  lr    
 8001fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001fc8:	080098c8 	.word	0x080098c8
  ldr r2, =_sbss
 8001fcc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001fd0:	20005fb4 	.word	0x20005fb4

08001fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC_IRQHandler>
	...

08001fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_Init+0x34>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <HAL_Init+0x34>)
 8001fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_Init+0x34>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	@ (800200c <HAL_Init+0x34>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 f8fc 	bl	80021f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f7ff fc86 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fc5c 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023c00 	.word	0x40023c00

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	20000dd0 	.word	0x20000dd0

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000dd0 	.word	0x20000dd0

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_Delay+0x44>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x40>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x40>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00
 80020dc:	05fa0000 	.word	0x05fa0000

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ff4c 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800221a:	f7ff ff61 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 800221e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	6978      	ldr	r0, [r7, #20]
 8002226:	f7ff ffb1 	bl	800218c <NVIC_EncodePriority>
 800222a:	4602      	mov	r2, r0
 800222c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff80 	bl	8002138 <__NVIC_SetPriority>
}
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ff54 	bl	80020fc <__NVIC_EnableIRQ>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002260:	f3bf 8f5f 	dmb	sy
}
 8002264:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <HAL_MPU_Disable+0x28>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	4a06      	ldr	r2, [pc, #24]	@ (8002284 <HAL_MPU_Disable+0x28>)
 800226c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002270:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002272:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_MPU_Disable+0x2c>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00
 8002288:	e000ed90 	.word	0xe000ed90

0800228c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002294:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <HAL_MPU_Enable+0x38>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_MPU_Enable+0x3c>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	4a09      	ldr	r2, [pc, #36]	@ (80022c8 <HAL_MPU_Enable+0x3c>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80022aa:	f3bf 8f4f 	dsb	sy
}
 80022ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022b0:	f3bf 8f6f 	isb	sy
}
 80022b4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed90 	.word	0xe000ed90
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	785a      	ldrb	r2, [r3, #1]
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_MPU_ConfigRegion+0x7c>)
 80022da:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_MPU_ConfigRegion+0x7c>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <HAL_MPU_ConfigRegion+0x7c>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022e8:	4a17      	ldr	r2, [pc, #92]	@ (8002348 <HAL_MPU_ConfigRegion+0x7c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7b1b      	ldrb	r3, [r3, #12]
 80022f4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7adb      	ldrb	r3, [r3, #11]
 80022fa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7a9b      	ldrb	r3, [r3, #10]
 8002302:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002304:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7b5b      	ldrb	r3, [r3, #13]
 800230a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800230c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7b9b      	ldrb	r3, [r3, #14]
 8002312:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002314:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7bdb      	ldrb	r3, [r3, #15]
 800231a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800231c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7a5b      	ldrb	r3, [r3, #9]
 8002322:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002324:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7a1b      	ldrb	r3, [r3, #8]
 800232a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800232c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002334:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002336:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002338:	6113      	str	r3, [r2, #16]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed90 	.word	0xe000ed90

0800234c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e086      	b.n	800246c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe fe9b 	bl	80010ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <HAL_ETH_Init+0x128>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4a3e      	ldr	r2, [pc, #248]	@ (8002474 <HAL_ETH_Init+0x128>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
 8002382:	4b3c      	ldr	r3, [pc, #240]	@ (8002474 <HAL_ETH_Init+0x128>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800238e:	4b3a      	ldr	r3, [pc, #232]	@ (8002478 <HAL_ETH_Init+0x12c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4a39      	ldr	r2, [pc, #228]	@ (8002478 <HAL_ETH_Init+0x12c>)
 8002394:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002398:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800239a:	4b37      	ldr	r3, [pc, #220]	@ (8002478 <HAL_ETH_Init+0x12c>)
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4935      	ldr	r1, [pc, #212]	@ (8002478 <HAL_ETH_Init+0x12c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023a8:	4b33      	ldr	r3, [pc, #204]	@ (8002478 <HAL_ETH_Init+0x12c>)
 80023aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c4:	f7ff fe38 	bl	8002038 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023ca:	e011      	b.n	80023f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023cc:	f7ff fe34 	bl	8002038 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023da:	d909      	bls.n	80023f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2204      	movs	r2, #4
 80023e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	22e0      	movs	r2, #224	@ 0xe0
 80023e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e03d      	b.n	800246c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e4      	bne.n	80023cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fa40 	bl	8002888 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 faeb 	bl	80029e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fb41 	bl	8002a96 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	461a      	mov	r2, r3
 800241a:	2100      	movs	r1, #0
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 faa9 	bl	8002974 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002430:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <HAL_ETH_Init+0x130>)
 8002440:	430b      	orrs	r3, r1
 8002442:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002456:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2210      	movs	r2, #16
 8002466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	00020060 	.word	0x00020060

08002480 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80024a8:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <HAL_ETH_IRQHandler+0x158>)
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <HAL_ETH_IRQHandler+0x56>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b43      	ldr	r3, [pc, #268]	@ (80025dc <HAL_ETH_IRQHandler+0x15c>)
 80024ce:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f004 f8f3 	bl	80066bc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00f      	beq.n	8002500 <HAL_ETH_IRQHandler+0x80>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f2:	461a      	mov	r2, r3
 80024f4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80024f8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f004 f90e 	bl	800671c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d042      	beq.n	8002590 <HAL_ETH_IRQHandler+0x110>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d03d      	beq.n	8002590 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251a:	f043 0208 	orr.w	r2, r3, #8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01a      	beq.n	8002564 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	4b29      	ldr	r3, [pc, #164]	@ (80025e0 <HAL_ETH_IRQHandler+0x160>)
 800253a:	4013      	ands	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002554:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002558:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	22e0      	movs	r2, #224	@ 0xe0
 800255e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002562:	e012      	b.n	800258a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002572:	4013      	ands	r3, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002582:	461a      	mov	r2, r3
 8002584:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002588:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f004 f83a 	bl	8006604 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00e      	beq.n	80025b8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f81a 	bl	80025e4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_ETH_IRQHandler+0x158>)
 80025c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025c8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f814 	bl	80025f8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80025d0:	bf00      	nop
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40013c00 	.word	0x40013c00
 80025dc:	00010040 	.word	0x00010040
 80025e0:	007e2000 	.word	0x007e2000

080025e4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4b53      	ldr	r3, [pc, #332]	@ (8002770 <ETH_SetMACConfig+0x164>)
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	7b9b      	ldrb	r3, [r3, #14]
 800262a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	7c12      	ldrb	r2, [r2, #16]
 8002630:	2a00      	cmp	r2, #0
 8002632:	d102      	bne.n	800263a <ETH_SetMACConfig+0x2e>
 8002634:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002638:	e000      	b.n	800263c <ETH_SetMACConfig+0x30>
 800263a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800263c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	7c52      	ldrb	r2, [r2, #17]
 8002642:	2a00      	cmp	r2, #0
 8002644:	d102      	bne.n	800264c <ETH_SetMACConfig+0x40>
 8002646:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800264a:	e000      	b.n	800264e <ETH_SetMACConfig+0x42>
 800264c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800264e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002654:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	7fdb      	ldrb	r3, [r3, #31]
 800265a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800265c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002662:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	7f92      	ldrb	r2, [r2, #30]
 8002668:	2a00      	cmp	r2, #0
 800266a:	d102      	bne.n	8002672 <ETH_SetMACConfig+0x66>
 800266c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002670:	e000      	b.n	8002674 <ETH_SetMACConfig+0x68>
 8002672:	2200      	movs	r2, #0
                        macconf->Speed |
 8002674:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7f1b      	ldrb	r3, [r3, #28]
 800267a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800267c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002682:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800268a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002692:	2a00      	cmp	r2, #0
 8002694:	d102      	bne.n	800269c <ETH_SetMACConfig+0x90>
 8002696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800269a:	e000      	b.n	800269e <ETH_SetMACConfig+0x92>
 800269c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800269e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	7bdb      	ldrb	r3, [r3, #15]
 80026a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026b6:	4313      	orrs	r3, r2
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff fcbe 	bl	8002050 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	d101      	bne.n	8002702 <ETH_SetMACConfig+0xf6>
 80026fe:	2280      	movs	r2, #128	@ 0x80
 8002700:	e000      	b.n	8002704 <ETH_SetMACConfig+0xf8>
 8002702:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002704:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800270a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002712:	2a01      	cmp	r2, #1
 8002714:	d101      	bne.n	800271a <ETH_SetMACConfig+0x10e>
 8002716:	2208      	movs	r2, #8
 8002718:	e000      	b.n	800271c <ETH_SetMACConfig+0x110>
 800271a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800271c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002724:	2a01      	cmp	r2, #1
 8002726:	d101      	bne.n	800272c <ETH_SetMACConfig+0x120>
 8002728:	2204      	movs	r2, #4
 800272a:	e000      	b.n	800272e <ETH_SetMACConfig+0x122>
 800272c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800272e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002736:	2a01      	cmp	r2, #1
 8002738:	d101      	bne.n	800273e <ETH_SetMACConfig+0x132>
 800273a:	2202      	movs	r2, #2
 800273c:	e000      	b.n	8002740 <ETH_SetMACConfig+0x134>
 800273e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002740:	4313      	orrs	r3, r2
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff fc79 	bl	8002050 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	fd20810f 	.word	0xfd20810f

08002774 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4b3d      	ldr	r3, [pc, #244]	@ (8002884 <ETH_SetDMAConfig+0x110>)
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7b1b      	ldrb	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <ETH_SetDMAConfig+0x2c>
 800279a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800279e:	e000      	b.n	80027a2 <ETH_SetDMAConfig+0x2e>
 80027a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	7b5b      	ldrb	r3, [r3, #13]
 80027a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	7f52      	ldrb	r2, [r2, #29]
 80027ae:	2a00      	cmp	r2, #0
 80027b0:	d102      	bne.n	80027b8 <ETH_SetDMAConfig+0x44>
 80027b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027b6:	e000      	b.n	80027ba <ETH_SetDMAConfig+0x46>
 80027b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	7b9b      	ldrb	r3, [r3, #14]
 80027c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7f1b      	ldrb	r3, [r3, #28]
 80027ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	7f9b      	ldrb	r3, [r3, #30]
 80027d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f8:	461a      	mov	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800280a:	2001      	movs	r0, #1
 800280c:	f7ff fc20 	bl	8002050 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002818:	461a      	mov	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002828:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800282e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002834:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800283c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800283e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002846:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800284c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002856:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800285a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002868:	2001      	movs	r0, #1
 800286a:	f7ff fbf1 	bl	8002050 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6013      	str	r3, [r2, #0]
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	f8de3f23 	.word	0xf8de3f23

08002888 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b0a6      	sub	sp, #152	@ 0x98
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800289c:	2300      	movs	r3, #0
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028ca:	2300      	movs	r3, #0
 80028cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002902:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fe7f 	bl	800260c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800290e:	2301      	movs	r3, #1
 8002910:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002912:	2301      	movs	r3, #1
 8002914:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800291c:	2301      	movs	r3, #1
 800291e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800293a:	2301      	movs	r3, #1
 800293c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800293e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002942:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002944:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002948:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800294a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800294e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002956:	2300      	movs	r3, #0
 8002958:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ff05 	bl	8002774 <ETH_SetDMAConfig>
}
 800296a:	bf00      	nop
 800296c:	3798      	adds	r7, #152	@ 0x98
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3305      	adds	r3, #5
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	3204      	adds	r2, #4
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <ETH_MACAddressConfig+0x68>)
 8002996:	4413      	add	r3, r2
 8002998:	461a      	mov	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3303      	adds	r3, #3
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	061a      	lsls	r2, r3, #24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3302      	adds	r3, #2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	041b      	lsls	r3, r3, #16
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	4313      	orrs	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <ETH_MACAddressConfig+0x6c>)
 80029c6:	4413      	add	r3, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	6013      	str	r3, [r2, #0]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40028040 	.word	0x40028040
 80029e0:	40028044 	.word	0x40028044

080029e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e03e      	b.n	8002a70 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	3206      	adds	r2, #6
 8002a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d80c      	bhi.n	8002a54 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	e004      	b.n	8002a5e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d9bd      	bls.n	80029f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a88:	611a      	str	r2, [r3, #16]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e048      	b.n	8002b36 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6919      	ldr	r1, [r3, #16]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	3212      	adds	r2, #18
 8002b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d80c      	bhi.n	8002b26 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6919      	ldr	r1, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	e004      	b.n	8002b30 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d9b3      	bls.n	8002aa4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b66:	60da      	str	r2, [r3, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e175      	b.n	8002e80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 8164 	bne.w	8002e7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_GPIO_Init+0x56>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d130      	bne.n	8002c2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0201 	and.w	r2, r3, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d017      	beq.n	8002c68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80be 	beq.w	8002e7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	4b66      	ldr	r3, [pc, #408]	@ (8002e98 <HAL_GPIO_Init+0x324>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	4a65      	ldr	r2, [pc, #404]	@ (8002e98 <HAL_GPIO_Init+0x324>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d0a:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <HAL_GPIO_Init+0x324>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d16:	4a61      	ldr	r2, [pc, #388]	@ (8002e9c <HAL_GPIO_Init+0x328>)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	@ (8002ea0 <HAL_GPIO_Init+0x32c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d037      	beq.n	8002db2 <HAL_GPIO_Init+0x23e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a57      	ldr	r2, [pc, #348]	@ (8002ea4 <HAL_GPIO_Init+0x330>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d031      	beq.n	8002dae <HAL_GPIO_Init+0x23a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a56      	ldr	r2, [pc, #344]	@ (8002ea8 <HAL_GPIO_Init+0x334>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02b      	beq.n	8002daa <HAL_GPIO_Init+0x236>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a55      	ldr	r2, [pc, #340]	@ (8002eac <HAL_GPIO_Init+0x338>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d025      	beq.n	8002da6 <HAL_GPIO_Init+0x232>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a54      	ldr	r2, [pc, #336]	@ (8002eb0 <HAL_GPIO_Init+0x33c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <HAL_GPIO_Init+0x22e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a53      	ldr	r2, [pc, #332]	@ (8002eb4 <HAL_GPIO_Init+0x340>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <HAL_GPIO_Init+0x22a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	@ (8002eb8 <HAL_GPIO_Init+0x344>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x226>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a51      	ldr	r2, [pc, #324]	@ (8002ebc <HAL_GPIO_Init+0x348>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x222>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a50      	ldr	r2, [pc, #320]	@ (8002ec0 <HAL_GPIO_Init+0x34c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x21e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4f      	ldr	r2, [pc, #316]	@ (8002ec4 <HAL_GPIO_Init+0x350>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x21a>
 8002d8a:	2309      	movs	r3, #9
 8002d8c:	e012      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d8e:	230a      	movs	r3, #10
 8002d90:	e010      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d92:	2308      	movs	r3, #8
 8002d94:	e00e      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d96:	2307      	movs	r3, #7
 8002d98:	e00c      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d9a:	2306      	movs	r3, #6
 8002d9c:	e00a      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d9e:	2305      	movs	r3, #5
 8002da0:	e008      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002da2:	2304      	movs	r3, #4
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002da6:	2303      	movs	r3, #3
 8002da8:	e004      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002db2:	2300      	movs	r3, #0
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f002 0203 	and.w	r2, r2, #3
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dc4:	4935      	ldr	r1, [pc, #212]	@ (8002e9c <HAL_GPIO_Init+0x328>)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec8 <HAL_GPIO_Init+0x354>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df6:	4a34      	ldr	r2, [pc, #208]	@ (8002ec8 <HAL_GPIO_Init+0x354>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dfc:	4b32      	ldr	r3, [pc, #200]	@ (8002ec8 <HAL_GPIO_Init+0x354>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e20:	4a29      	ldr	r2, [pc, #164]	@ (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e26:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e74:	4a14      	ldr	r2, [pc, #80]	@ (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	f67f ae86 	bls.w	8002b94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3724      	adds	r7, #36	@ 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40021400 	.word	0x40021400
 8002eb8:	40021800 	.word	0x40021800
 8002ebc:	40021c00 	.word	0x40021c00
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40022400 	.word	0x40022400
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0d2      	b.n	80030b8 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fa9c 	bl	8001464 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69d9      	ldr	r1, [r3, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b60      	ldr	r3, [pc, #384]	@ (80030c0 <HAL_I2S_Init+0x1c0>)
 8002f40:	400b      	ands	r3, r1
 8002f42:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d067      	beq.n	8003024 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e001      	b.n	8002f66 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d802      	bhi.n	8002f74 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002f7c:	4b51      	ldr	r3, [pc, #324]	@ (80030c4 <HAL_I2S_Init+0x1c4>)
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e003      	b.n	8002f8a <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f968 	bl	8003258 <I2S_GetClockFreq>
 8002f88:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f92:	d125      	bne.n	8002fe0 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	461a      	mov	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	3305      	adds	r3, #5
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e01f      	b.n	8002ffe <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	3305      	adds	r3, #5
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e00e      	b.n	8002ffe <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	3305      	adds	r3, #5
 8002ffc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4a31      	ldr	r2, [pc, #196]	@ (80030c8 <HAL_I2S_Init+0x1c8>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	08db      	lsrs	r3, r3, #3
 8003008:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	e003      	b.n	800302c <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003024:	2302      	movs	r3, #2
 8003026:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d902      	bls.n	8003038 <HAL_I2S_Init+0x138>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2bff      	cmp	r3, #255	@ 0xff
 8003036:	d907      	bls.n	8003048 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	f043 0210 	orr.w	r2, r3, #16
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e037      	b.n	80030b8 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	ea42 0103 	orr.w	r1, r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	430a      	orrs	r2, r1
 800305a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_I2S_Init+0x1c0>)
 8003064:	4013      	ands	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6851      	ldr	r1, [r2, #4]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68d2      	ldr	r2, [r2, #12]
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6992      	ldr	r2, [r2, #24]
 800307a:	430a      	orrs	r2, r1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003086:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b30      	cmp	r3, #48	@ 0x30
 800308e:	d003      	beq.n	8003098 <HAL_I2S_Init+0x198>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2bb0      	cmp	r3, #176	@ 0xb0
 8003096:	d107      	bne.n	80030a8 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	fffff040 	.word	0xfffff040
 80030c4:	00bb8000 	.word	0x00bb8000
 80030c8:	cccccccd 	.word	0xcccccccd

080030cc <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_I2S_Receive+0x1c>
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0b0      	b.n	800324e <HAL_I2S_Receive+0x182>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d001      	beq.n	80030fc <HAL_I2S_Receive+0x30>
  {
    return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0a8      	b.n	800324e <HAL_I2S_Receive+0x182>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_I2S_Receive+0x40>
 8003108:	2302      	movs	r3, #2
 800310a:	e0a0      	b.n	800324e <HAL_I2S_Receive+0x182>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2204      	movs	r2, #4
 8003118:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d002      	beq.n	8003140 <HAL_I2S_Receive+0x74>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b05      	cmp	r3, #5
 800313e:	d10a      	bne.n	8003156 <HAL_I2S_Receive+0x8a>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8003154:	e005      	b.n	8003162 <HAL_I2S_Receive+0x96>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	88fa      	ldrh	r2, [r7, #6]
 800315a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003170:	d007      	beq.n	8003182 <HAL_I2S_Receive+0xb6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003180:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800318c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003190:	d14f      	bne.n	8003232 <HAL_I2S_Receive+0x166>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 80031a8:	e043      	b.n	8003232 <HAL_I2S_Receive+0x166>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2201      	movs	r2, #1
 80031ae:	2101      	movs	r1, #1
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f89d 	bl	80032f0 <I2S_WaitFlagStateUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00f      	beq.n	80031dc <HAL_I2S_Receive+0x110>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      __HAL_UNLOCK(hi2s);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e038      	b.n	800324e <HAL_I2S_Receive+0x182>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	b292      	uxth	r2, r2
 80031e8:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320c:	2b40      	cmp	r3, #64	@ 0x40
 800320e:	d110      	bne.n	8003232 <HAL_I2S_Receive+0x166>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	63da      	str	r2, [r3, #60]	@ 0x3c
  while (hi2s->RxXferCount > 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1b6      	bne.n	80031aa <HAL_I2S_Receive+0xde>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hi2s);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d02d      	beq.n	80032c4 <I2S_GetClockFreq+0x6c>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d12e      	bne.n	80032ca <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800326c:	4b1c      	ldr	r3, [pc, #112]	@ (80032e0 <I2S_GetClockFreq+0x88>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003278:	4b19      	ldr	r3, [pc, #100]	@ (80032e0 <I2S_GetClockFreq+0x88>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003280:	4a18      	ldr	r2, [pc, #96]	@ (80032e4 <I2S_GetClockFreq+0x8c>)
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e007      	b.n	800329a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <I2S_GetClockFreq+0x88>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003292:	4a15      	ldr	r2, [pc, #84]	@ (80032e8 <I2S_GetClockFreq+0x90>)
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 800329a:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <I2S_GetClockFreq+0x88>)
 800329c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a0:	0f1b      	lsrs	r3, r3, #28
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80032a8:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <I2S_GetClockFreq+0x88>)
 80032aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ae:	099b      	lsrs	r3, r3, #6
 80032b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	fb03 f202 	mul.w	r2, r3, r2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	613b      	str	r3, [r7, #16]

      break;
 80032c2:	e005      	b.n	80032d0 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80032c4:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <I2S_GetClockFreq+0x94>)
 80032c6:	613b      	str	r3, [r7, #16]
      break;
 80032c8:	e002      	b.n	80032d0 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
      break;
 80032ce:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80032d0:	693b      	ldr	r3, [r7, #16]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	00f42400 	.word	0x00f42400
 80032e8:	007a1200 	.word	0x007a1200
 80032ec:	00bb8000 	.word	0x00bb8000

080032f0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003300:	f7fe fe9a 	bl	8002038 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003306:	e018      	b.n	800333a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d014      	beq.n	800333a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003310:	f7fe fe92 	bl	8002038 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d902      	bls.n	8003326 <I2S_WaitFlagStateUntilTimeout+0x36>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e00f      	b.n	800335a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4013      	ands	r3, r2
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	429a      	cmp	r2, r3
 8003356:	d1d7      	bne.n	8003308 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af02      	add	r7, sp, #8
 8003368:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e108      	b.n	8003586 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe fc2c 	bl	8001bec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2203      	movs	r2, #3
 8003398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033a2:	d102      	bne.n	80033aa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 fe6a 	bl	8006088 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7c1a      	ldrb	r2, [r3, #16]
 80033bc:	f88d 2000 	strb.w	r2, [sp]
 80033c0:	3304      	adds	r3, #4
 80033c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c4:	f002 fe06 	bl	8005fd4 <USB_CoreInit>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0d5      	b.n	8003586 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f002 fe62 	bl	80060aa <USB_SetCurrentMode>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0c6      	b.n	8003586 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	e04a      	b.n	8003494 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3315      	adds	r3, #21
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3314      	adds	r3, #20
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	b298      	uxth	r0, r3
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	332e      	adds	r3, #46	@ 0x2e
 800343a:	4602      	mov	r2, r0
 800343c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3318      	adds	r3, #24
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	331c      	adds	r3, #28
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3320      	adds	r3, #32
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3324      	adds	r3, #36	@ 0x24
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3301      	adds	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	791b      	ldrb	r3, [r3, #4]
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	429a      	cmp	r2, r3
 800349c:	d3af      	bcc.n	80033fe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	e044      	b.n	800352e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	3301      	adds	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	791b      	ldrb	r3, [r3, #4]
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	429a      	cmp	r2, r3
 8003536:	d3b5      	bcc.n	80034a4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7c1a      	ldrb	r2, [r3, #16]
 8003540:	f88d 2000 	strb.w	r2, [sp]
 8003544:	3304      	adds	r3, #4
 8003546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003548:	f002 fdfc 	bl	8006144 <USB_DevInit>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e013      	b.n	8003586 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	7b1b      	ldrb	r3, [r3, #12]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d102      	bne.n	800357a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f80b 	bl	8003590 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f002 ffb7 	bl	80064f2 <USB_DevDisconnect>

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035be:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	10000003 	.word	0x10000003

080035d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a04      	ldr	r2, [pc, #16]	@ (80035f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40007000 	.word	0x40007000

080035f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <HAL_PWREx_EnableOverDrive+0x98>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	4a22      	ldr	r2, [pc, #136]	@ (8003690 <HAL_PWREx_EnableOverDrive+0x98>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	@ 0x40
 800360e:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_PWREx_EnableOverDrive+0x98>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800361a:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <HAL_PWREx_EnableOverDrive+0x9c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003624:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003626:	f7fe fd07 	bl	8002038 <HAL_GetTick>
 800362a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800362c:	e009      	b.n	8003642 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800362e:	f7fe fd03 	bl	8002038 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800363c:	d901      	bls.n	8003642 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e022      	b.n	8003688 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364e:	d1ee      	bne.n	800362e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003650:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0f      	ldr	r2, [pc, #60]	@ (8003694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800365c:	f7fe fcec 	bl	8002038 <HAL_GetTick>
 8003660:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003662:	e009      	b.n	8003678 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003664:	f7fe fce8 	bl	8002038 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003672:	d901      	bls.n	8003678 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e007      	b.n	8003688 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <HAL_PWREx_EnableOverDrive+0x9c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003684:	d1ee      	bne.n	8003664 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	40007000 	.word	0x40007000

08003698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036a0:	2300      	movs	r3, #0
 80036a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e29b      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8087 	beq.w	80037ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036bc:	4b96      	ldr	r3, [pc, #600]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d00c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c8:	4b93      	ldr	r3, [pc, #588]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d112      	bne.n	80036fa <HAL_RCC_OscConfig+0x62>
 80036d4:	4b90      	ldr	r3, [pc, #576]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e0:	d10b      	bne.n	80036fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d06c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x130>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d168      	bne.n	80037c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e275      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x7a>
 8003704:	4b84      	ldr	r3, [pc, #528]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a83      	ldr	r2, [pc, #524]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e02e      	b.n	8003770 <HAL_RCC_OscConfig+0xd8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x9c>
 800371a:	4b7f      	ldr	r3, [pc, #508]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7e      	ldr	r2, [pc, #504]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b7c      	ldr	r3, [pc, #496]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7b      	ldr	r2, [pc, #492]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800372c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0xd8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0xc0>
 800373e:	4b76      	ldr	r3, [pc, #472]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a75      	ldr	r2, [pc, #468]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b73      	ldr	r3, [pc, #460]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a72      	ldr	r2, [pc, #456]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0xd8>
 8003758:	4b6f      	ldr	r3, [pc, #444]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6e      	ldr	r2, [pc, #440]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b6c      	ldr	r3, [pc, #432]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6b      	ldr	r2, [pc, #428]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800376e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fc5e 	bl	8002038 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe fc5a 	bl	8002038 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	@ 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e229      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b61      	ldr	r3, [pc, #388]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0xe8>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe fc4a 	bl	8002038 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe fc46 	bl	8002038 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	@ 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e215      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	4b57      	ldr	r3, [pc, #348]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x110>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d069      	beq.n	80038aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d6:	4b50      	ldr	r3, [pc, #320]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d11c      	bne.n	8003828 <HAL_RCC_OscConfig+0x190>
 80037ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	4b47      	ldr	r3, [pc, #284]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x17a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e1e9      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b41      	ldr	r3, [pc, #260]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	493d      	ldr	r1, [pc, #244]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	e040      	b.n	80038aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d023      	beq.n	8003878 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003830:	4b39      	ldr	r3, [pc, #228]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a38      	ldr	r2, [pc, #224]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fbfc 	bl	8002038 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003844:	f7fe fbf8 	bl	8002038 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e1c7      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b30      	ldr	r3, [pc, #192]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4929      	ldr	r1, [pc, #164]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
 8003876:	e018      	b.n	80038aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003878:	4b27      	ldr	r3, [pc, #156]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a26      	ldr	r2, [pc, #152]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe fbd8 	bl	8002038 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388c:	f7fe fbd4 	bl	8002038 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1a3      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d038      	beq.n	8003928 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d019      	beq.n	80038f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038be:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80038c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fe fbb5 	bl	8002038 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fe fbb1 	bl	8002038 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e180      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80038e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x23a>
 80038f0:	e01a      	b.n	8003928 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <HAL_RCC_OscConfig+0x280>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fe fb9b 	bl	8002038 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fe fb97 	bl	8002038 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d903      	bls.n	800391c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e166      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
 8003918:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391c:	4b92      	ldr	r3, [pc, #584]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 800391e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1ee      	bne.n	8003906 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80a4 	beq.w	8003a7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003936:	4b8c      	ldr	r3, [pc, #560]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	4b89      	ldr	r3, [pc, #548]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	4a88      	ldr	r2, [pc, #544]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	@ 0x40
 800394e:	4b86      	ldr	r3, [pc, #536]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800395e:	4b83      	ldr	r3, [pc, #524]	@ (8003b6c <HAL_RCC_OscConfig+0x4d4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d118      	bne.n	800399c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800396a:	4b80      	ldr	r3, [pc, #512]	@ (8003b6c <HAL_RCC_OscConfig+0x4d4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7f      	ldr	r2, [pc, #508]	@ (8003b6c <HAL_RCC_OscConfig+0x4d4>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003976:	f7fe fb5f 	bl	8002038 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397e:	f7fe fb5b 	bl	8002038 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	@ 0x64
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e12a      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003990:	4b76      	ldr	r3, [pc, #472]	@ (8003b6c <HAL_RCC_OscConfig+0x4d4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_OscConfig+0x31a>
 80039a4:	4b70      	ldr	r3, [pc, #448]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a8:	4a6f      	ldr	r2, [pc, #444]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b0:	e02d      	b.n	8003a0e <HAL_RCC_OscConfig+0x376>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x33c>
 80039ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	4a6a      	ldr	r2, [pc, #424]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c6:	4b68      	ldr	r3, [pc, #416]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	4a67      	ldr	r2, [pc, #412]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d2:	e01c      	b.n	8003a0e <HAL_RCC_OscConfig+0x376>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d10c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x35e>
 80039dc:	4b62      	ldr	r3, [pc, #392]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e0:	4a61      	ldr	r2, [pc, #388]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e8:	4b5f      	ldr	r3, [pc, #380]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	4a5e      	ldr	r2, [pc, #376]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f4:	e00b      	b.n	8003a0e <HAL_RCC_OscConfig+0x376>
 80039f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a02:	4b59      	ldr	r3, [pc, #356]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	4a58      	ldr	r2, [pc, #352]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d015      	beq.n	8003a42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fe fb0f 	bl	8002038 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fe fb0b 	bl	8002038 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0d8      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	4b4c      	ldr	r3, [pc, #304]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ee      	beq.n	8003a1e <HAL_RCC_OscConfig+0x386>
 8003a40:	e014      	b.n	8003a6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a42:	f7fe faf9 	bl	8002038 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fe faf5 	bl	8002038 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0c2      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	4b41      	ldr	r3, [pc, #260]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ee      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4b3d      	ldr	r3, [pc, #244]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	4a3c      	ldr	r2, [pc, #240]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80ae 	beq.w	8003be4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a88:	4b37      	ldr	r3, [pc, #220]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d06d      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d14b      	bne.n	8003b34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b32      	ldr	r3, [pc, #200]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a31      	ldr	r2, [pc, #196]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fac6 	bl	8002038 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fe fac2 	bl	8002038 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e091      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	4b29      	ldr	r3, [pc, #164]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	071b      	lsls	r3, r3, #28
 8003afa:	491b      	ldr	r1, [pc, #108]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b00:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a18      	ldr	r2, [pc, #96]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fa94 	bl	8002038 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fe fa90 	bl	8002038 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e05f      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b26:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x47c>
 8003b32:	e057      	b.n	8003be4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b34:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe fa7a 	bl	8002038 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe fa76 	bl	8002038 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e045      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b03      	ldr	r3, [pc, #12]	@ (8003b68 <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4b0>
 8003b66:	e03d      	b.n	8003be4 <HAL_RCC_OscConfig+0x54c>
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b70:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <HAL_RCC_OscConfig+0x558>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d030      	beq.n	8003be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d129      	bne.n	8003be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d122      	bne.n	8003be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ba6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d119      	bne.n	8003be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d10f      	bne.n	8003be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0d0      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d910      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b67      	ldr	r3, [pc, #412]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 020f 	bic.w	r2, r3, #15
 8003c22:	4965      	ldr	r1, [pc, #404]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b63      	ldr	r3, [pc, #396]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0b8      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c54:	4b59      	ldr	r3, [pc, #356]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4a58      	ldr	r2, [pc, #352]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c6c:	4b53      	ldr	r3, [pc, #332]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a52      	ldr	r2, [pc, #328]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c78:	4b50      	ldr	r3, [pc, #320]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	494d      	ldr	r1, [pc, #308]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d040      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d107      	bne.n	8003cae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4b47      	ldr	r3, [pc, #284]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d115      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e07f      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	4b41      	ldr	r3, [pc, #260]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e073      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06b      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd6:	4b39      	ldr	r3, [pc, #228]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f023 0203 	bic.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4936      	ldr	r1, [pc, #216]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce8:	f7fe f9a6 	bl	8002038 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf0:	f7fe f9a2 	bl	8002038 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e053      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	4b2d      	ldr	r3, [pc, #180]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 020c 	and.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1eb      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d18:	4b27      	ldr	r3, [pc, #156]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d210      	bcs.n	8003d48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 020f 	bic.w	r2, r3, #15
 8003d2e:	4922      	ldr	r1, [pc, #136]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b20      	ldr	r3, [pc, #128]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e032      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d54:	4b19      	ldr	r3, [pc, #100]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4916      	ldr	r1, [pc, #88]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d72:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	490e      	ldr	r1, [pc, #56]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d86:	f000 f821 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	490a      	ldr	r1, [pc, #40]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003d98:	5ccb      	ldrb	r3, [r1, r3]
 8003d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9e:	4a09      	ldr	r2, [pc, #36]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003da2:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1d4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd fdb0 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023c00 	.word	0x40023c00
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	080098a0 	.word	0x080098a0
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	20000004 	.word	0x20000004

08003dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b094      	sub	sp, #80	@ 0x50
 8003dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd8:	2300      	movs	r3, #0
 8003dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ddc:	2300      	movs	r3, #0
 8003dde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de4:	4b79      	ldr	r3, [pc, #484]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d00d      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x40>
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	f200 80e1 	bhi.w	8003fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x34>
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dfe:	e0db      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e00:	4b73      	ldr	r3, [pc, #460]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e04:	e0db      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e06:	4b73      	ldr	r3, [pc, #460]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e0a:	e0d8      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e16:	4b6d      	ldr	r3, [pc, #436]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e22:	4b6a      	ldr	r3, [pc, #424]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	2200      	movs	r2, #0
 8003e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e36:	2300      	movs	r3, #0
 8003e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e3e:	4622      	mov	r2, r4
 8003e40:	462b      	mov	r3, r5
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	0159      	lsls	r1, r3, #5
 8003e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e50:	0150      	lsls	r0, r2, #5
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4621      	mov	r1, r4
 8003e58:	1a51      	subs	r1, r2, r1
 8003e5a:	6139      	str	r1, [r7, #16]
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e70:	4659      	mov	r1, fp
 8003e72:	018b      	lsls	r3, r1, #6
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	018a      	lsls	r2, r1, #6
 8003e7e:	4651      	mov	r1, sl
 8003e80:	ebb2 0801 	subs.w	r8, r2, r1
 8003e84:	4659      	mov	r1, fp
 8003e86:	eb63 0901 	sbc.w	r9, r3, r1
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e9e:	4690      	mov	r8, r2
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	eb18 0303 	adds.w	r3, r8, r3
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	462b      	mov	r3, r5
 8003eac:	eb49 0303 	adc.w	r3, r9, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	024b      	lsls	r3, r1, #9
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ec8:	4621      	mov	r1, r4
 8003eca:	024a      	lsls	r2, r1, #9
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003edc:	f7fc f9b0 	bl	8000240 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee8:	e058      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eea:	4b38      	ldr	r3, [pc, #224]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	099b      	lsrs	r3, r3, #6
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003efa:	623b      	str	r3, [r7, #32]
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	f04f 0000 	mov.w	r0, #0
 8003f0c:	f04f 0100 	mov.w	r1, #0
 8003f10:	0159      	lsls	r1, r3, #5
 8003f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f16:	0150      	lsls	r0, r2, #5
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f22:	4649      	mov	r1, r9
 8003f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f40:	eb63 050b 	sbc.w	r5, r3, fp
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	00eb      	lsls	r3, r5, #3
 8003f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f52:	00e2      	lsls	r2, r4, #3
 8003f54:	4614      	mov	r4, r2
 8003f56:	461d      	mov	r5, r3
 8003f58:	4643      	mov	r3, r8
 8003f5a:	18e3      	adds	r3, r4, r3
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	464b      	mov	r3, r9
 8003f60:	eb45 0303 	adc.w	r3, r5, r3
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f72:	4629      	mov	r1, r5
 8003f74:	028b      	lsls	r3, r1, #10
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	028a      	lsls	r2, r1, #10
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f86:	2200      	movs	r2, #0
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	61fa      	str	r2, [r7, #28]
 8003f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f90:	f7fc f956 	bl	8000240 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003fac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fb6:	e002      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3750      	adds	r7, #80	@ 0x50
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	007a1200 	.word	0x007a1200

08003fd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	@ (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000000 	.word	0x20000000

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ff4:	f7ff fff0 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0a9b      	lsrs	r3, r3, #10
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	@ (8004014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	080098b0 	.word	0x080098b0

08004018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800401c:	f7ff ffdc 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	0b5b      	lsrs	r3, r3, #13
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4903      	ldr	r1, [pc, #12]	@ (800403c <HAL_RCC_GetPCLK2Freq+0x24>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40023800 	.word	0x40023800
 800403c:	080098b0 	.word	0x080098b0

08004040 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	220f      	movs	r2, #15
 800404e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004050:	4b12      	ldr	r3, [pc, #72]	@ (800409c <HAL_RCC_GetClockConfig+0x5c>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0203 	and.w	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800405c:	4b0f      	ldr	r3, [pc, #60]	@ (800409c <HAL_RCC_GetClockConfig+0x5c>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004068:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <HAL_RCC_GetClockConfig+0x5c>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004074:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_GetClockConfig+0x5c>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	08db      	lsrs	r3, r3, #3
 800407a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004082:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <HAL_RCC_GetClockConfig+0x60>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	40023c00 	.word	0x40023c00

080040a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d012      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040cc:	4b69      	ldr	r3, [pc, #420]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a68      	ldr	r2, [pc, #416]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80040d6:	6093      	str	r3, [r2, #8]
 80040d8:	4b66      	ldr	r3, [pc, #408]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e0:	4964      	ldr	r1, [pc, #400]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d017      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004104:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410c:	4959      	ldr	r1, [pc, #356]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004118:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800411c:	d101      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d017      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800413a:	4b4e      	ldr	r3, [pc, #312]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004140:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	494a      	ldr	r1, [pc, #296]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004166:	2301      	movs	r3, #1
 8004168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 808b 	beq.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b3a      	ldr	r3, [pc, #232]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	4a39      	ldr	r2, [pc, #228]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004192:	6413      	str	r3, [r2, #64]	@ 0x40
 8004194:	4b37      	ldr	r3, [pc, #220]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041a0:	4b35      	ldr	r3, [pc, #212]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a34      	ldr	r2, [pc, #208]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ac:	f7fd ff44 	bl	8002038 <HAL_GetTick>
 80041b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b4:	f7fd ff40 	bl	8002038 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	@ 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e38f      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d2:	4b28      	ldr	r3, [pc, #160]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d035      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d02e      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041f0:	4b20      	ldr	r3, [pc, #128]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004204:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004206:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420a:	4a1a      	ldr	r2, [pc, #104]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004210:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004212:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004218:	4b16      	ldr	r3, [pc, #88]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d114      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd ff08 	bl	8002038 <HAL_GetTick>
 8004228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422a:	e00a      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fd ff04 	bl	8002038 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e351      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004242:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0ee      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800425a:	d111      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800425c:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004268:	4b04      	ldr	r3, [pc, #16]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800426a:	400b      	ands	r3, r1
 800426c:	4901      	ldr	r1, [pc, #4]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
 8004272:	e00b      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004274:	40023800 	.word	0x40023800
 8004278:	40007000 	.word	0x40007000
 800427c:	0ffffcff 	.word	0x0ffffcff
 8004280:	4bac      	ldr	r3, [pc, #688]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4aab      	ldr	r2, [pc, #684]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004286:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800428a:	6093      	str	r3, [r2, #8]
 800428c:	4ba9      	ldr	r3, [pc, #676]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	49a6      	ldr	r1, [pc, #664]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429a:	4313      	orrs	r3, r2
 800429c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d010      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042aa:	4ba2      	ldr	r3, [pc, #648]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042b0:	4aa0      	ldr	r2, [pc, #640]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80042ba:	4b9e      	ldr	r3, [pc, #632]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c4:	499b      	ldr	r1, [pc, #620]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042d8:	4b96      	ldr	r3, [pc, #600]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042e6:	4993      	ldr	r1, [pc, #588]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004300:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004308:	498a      	ldr	r1, [pc, #552]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800431c:	4b85      	ldr	r3, [pc, #532]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800432a:	4982      	ldr	r1, [pc, #520]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800433e:	4b7d      	ldr	r3, [pc, #500]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004344:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434c:	4979      	ldr	r1, [pc, #484]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004360:	4b74      	ldr	r3, [pc, #464]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436e:	4971      	ldr	r1, [pc, #452]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004382:	4b6c      	ldr	r3, [pc, #432]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004388:	f023 020c 	bic.w	r2, r3, #12
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004390:	4968      	ldr	r1, [pc, #416]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a4:	4b63      	ldr	r3, [pc, #396]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b2:	4960      	ldr	r1, [pc, #384]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d4:	4957      	ldr	r1, [pc, #348]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043e8:	4b52      	ldr	r3, [pc, #328]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	494f      	ldr	r1, [pc, #316]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800440a:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004410:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004418:	4946      	ldr	r1, [pc, #280]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800442c:	4b41      	ldr	r3, [pc, #260]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	493e      	ldr	r1, [pc, #248]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800444e:	4b39      	ldr	r3, [pc, #228]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004454:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445c:	4935      	ldr	r1, [pc, #212]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004470:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004476:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800447e:	492d      	ldr	r1, [pc, #180]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d011      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004492:	4b28      	ldr	r3, [pc, #160]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004498:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a0:	4924      	ldr	r1, [pc, #144]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b0:	d101      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d2:	4b18      	ldr	r3, [pc, #96]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e0:	4914      	ldr	r1, [pc, #80]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004504:	490b      	ldr	r1, [pc, #44]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00f      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004528:	4902      	ldr	r1, [pc, #8]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004530:	e002      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004544:	4b8a      	ldr	r3, [pc, #552]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800454a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004554:	4986      	ldr	r1, [pc, #536]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004568:	4b81      	ldr	r3, [pc, #516]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800456e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004578:	497d      	ldr	r1, [pc, #500]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d006      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80d6 	beq.w	8004740 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004594:	4b76      	ldr	r3, [pc, #472]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a75      	ldr	r2, [pc, #468]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800459a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800459e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a0:	f7fd fd4a 	bl	8002038 <HAL_GetTick>
 80045a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045a8:	f7fd fd46 	bl	8002038 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	@ 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e195      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d021      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11d      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045da:	4b65      	ldr	r3, [pc, #404]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045e8:	4b61      	ldr	r3, [pc, #388]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ee:	0e1b      	lsrs	r3, r3, #24
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	019a      	lsls	r2, r3, #6
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	041b      	lsls	r3, r3, #16
 8004600:	431a      	orrs	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	061b      	lsls	r3, r3, #24
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	071b      	lsls	r3, r3, #28
 800460e:	4958      	ldr	r1, [pc, #352]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d004      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02e      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004640:	d129      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004642:	4b4b      	ldr	r3, [pc, #300]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004650:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004656:	0f1b      	lsrs	r3, r3, #28
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	019a      	lsls	r2, r3, #6
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	041b      	lsls	r3, r3, #16
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	431a      	orrs	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	071b      	lsls	r3, r3, #28
 8004676:	493e      	ldr	r1, [pc, #248]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800467e:	4b3c      	ldr	r3, [pc, #240]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004684:	f023 021f 	bic.w	r2, r3, #31
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	3b01      	subs	r3, #1
 800468e:	4938      	ldr	r1, [pc, #224]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01d      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046a2:	4b33      	ldr	r3, [pc, #204]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a8:	0e1b      	lsrs	r3, r3, #24
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046b6:	0f1b      	lsrs	r3, r3, #28
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	019a      	lsls	r2, r3, #6
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	431a      	orrs	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	061b      	lsls	r3, r3, #24
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	071b      	lsls	r3, r3, #28
 80046d6:	4926      	ldr	r1, [pc, #152]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	019a      	lsls	r2, r3, #6
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	071b      	lsls	r3, r3, #28
 8004706:	491a      	ldr	r1, [pc, #104]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800470e:	4b18      	ldr	r3, [pc, #96]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a17      	ldr	r2, [pc, #92]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004714:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471a:	f7fd fc8d 	bl	8002038 <HAL_GetTick>
 800471e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004722:	f7fd fc89 	bl	8002038 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b64      	cmp	r3, #100	@ 0x64
 800472e:	d901      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e0d8      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004734:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	f040 80ce 	bne.w	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004748:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a08      	ldr	r2, [pc, #32]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004754:	f7fd fc70 	bl	8002038 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800475a:	e00b      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800475c:	f7fd fc6c 	bl	8002038 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	@ 0x64
 8004768:	d904      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0bb      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004774:	4b5e      	ldr	r3, [pc, #376]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800477c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004780:	d0ec      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d02e      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d12a      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047aa:	4b51      	ldr	r3, [pc, #324]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047b8:	4b4d      	ldr	r3, [pc, #308]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047be:	0f1b      	lsrs	r3, r3, #28
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	019a      	lsls	r2, r3, #6
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	071b      	lsls	r3, r3, #28
 80047de:	4944      	ldr	r1, [pc, #272]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047e6:	4b42      	ldr	r3, [pc, #264]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	493d      	ldr	r1, [pc, #244]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d022      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004814:	d11d      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004816:	4b36      	ldr	r3, [pc, #216]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004824:	4b32      	ldr	r3, [pc, #200]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482a:	0f1b      	lsrs	r3, r3, #28
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	019a      	lsls	r2, r3, #6
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	431a      	orrs	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	061b      	lsls	r3, r3, #24
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	071b      	lsls	r3, r3, #28
 800484a:	4929      	ldr	r1, [pc, #164]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d028      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800485e:	4b24      	ldr	r3, [pc, #144]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800486c:	4b20      	ldr	r3, [pc, #128]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004872:	0c1b      	lsrs	r3, r3, #16
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	019a      	lsls	r2, r3, #6
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	431a      	orrs	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	071b      	lsls	r3, r3, #28
 8004892:	4917      	ldr	r1, [pc, #92]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800489a:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	4911      	ldr	r1, [pc, #68]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048b0:	4b0f      	ldr	r3, [pc, #60]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0e      	ldr	r2, [pc, #56]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fd fbbc 	bl	8002038 <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048c4:	f7fd fbb8 	bl	8002038 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	@ 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e007      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e2:	d1ef      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800

080048f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e01c      	b.n	8004940 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	795b      	ldrb	r3, [r3, #5]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fc ff1a 	bl	8001750 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0204 	orr.w	r2, r2, #4
 8004930:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e09d      	b.n	8004a96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d108      	bne.n	8004974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800496a:	d009      	beq.n	8004980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	61da      	str	r2, [r3, #28]
 8004972:	e005      	b.n	8004980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc ff4a 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049c0:	d902      	bls.n	80049c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e002      	b.n	80049ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80049d6:	d007      	beq.n	80049e8 <HAL_SPI_Init+0xa0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049e0:	d002      	beq.n	80049e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2a:	ea42 0103 	orr.w	r1, r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	f003 0204 	and.w	r2, r3, #4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a64:	ea42 0103 	orr.w	r1, r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b088      	sub	sp, #32
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aae:	f7fd fac3 	bl	8002038 <HAL_GetTick>
 8004ab2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d001      	beq.n	8004ac8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e15c      	b.n	8004d82 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Transmit+0x36>
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e154      	b.n	8004d82 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_SPI_Transmit+0x48>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e14d      	b.n	8004d82 <HAL_SPI_Transmit+0x2e4>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2203      	movs	r2, #3
 8004af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	88fa      	ldrh	r2, [r7, #6]
 8004b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b38:	d10f      	bne.n	8004b5a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d007      	beq.n	8004b78 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b80:	d952      	bls.n	8004c28 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Transmit+0xf2>
 8004b8a:	8b7b      	ldrh	r3, [r7, #26]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d145      	bne.n	8004c1c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b94:	881a      	ldrh	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba0:	1c9a      	adds	r2, r3, #2
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bb4:	e032      	b.n	8004c1c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d112      	bne.n	8004bea <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc8:	881a      	ldrh	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	1c9a      	adds	r2, r3, #2
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004be8:	e018      	b.n	8004c1c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bea:	f7fd fa25 	bl	8002038 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d803      	bhi.n	8004c02 <HAL_SPI_Transmit+0x164>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d102      	bne.n	8004c08 <HAL_SPI_Transmit+0x16a>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0b2      	b.n	8004d82 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1c7      	bne.n	8004bb6 <HAL_SPI_Transmit+0x118>
 8004c26:	e083      	b.n	8004d30 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Transmit+0x198>
 8004c30:	8b7b      	ldrh	r3, [r7, #26]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d177      	bne.n	8004d26 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d912      	bls.n	8004c66 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	881a      	ldrh	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b02      	subs	r3, #2
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c64:	e05f      	b.n	8004d26 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c8c:	e04b      	b.n	8004d26 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d12b      	bne.n	8004cf4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d912      	bls.n	8004ccc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b02      	subs	r3, #2
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cca:	e02c      	b.n	8004d26 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cf2:	e018      	b.n	8004d26 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf4:	f7fd f9a0 	bl	8002038 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d803      	bhi.n	8004d0c <HAL_SPI_Transmit+0x26e>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d102      	bne.n	8004d12 <HAL_SPI_Transmit+0x274>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e02d      	b.n	8004d82 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ae      	bne.n	8004c8e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f947 	bl	8004fc8 <SPI_EndRxTxTransaction>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004d80:	2300      	movs	r3, #0
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d9c:	f7fd f94c 	bl	8002038 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	4413      	add	r3, r2
 8004daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dac:	f7fd f944 	bl	8002038 <HAL_GetTick>
 8004db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004db2:	4b39      	ldr	r3, [pc, #228]	@ (8004e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	015b      	lsls	r3, r3, #5
 8004db8:	0d1b      	lsrs	r3, r3, #20
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dc2:	e055      	b.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d051      	beq.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dcc:	f7fd f934 	bl	8002038 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d902      	bls.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d13d      	bne.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dfa:	d111      	bne.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e04:	d004      	beq.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0e:	d107      	bne.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e28:	d10f      	bne.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e018      	b.n	8004e90 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e002      	b.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d19a      	bne.n	8004dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000000 	.word	0x20000000

08004e9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	@ 0x28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eae:	f7fd f8c3 	bl	8002038 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	4413      	add	r3, r2
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ebe:	f7fd f8bb 	bl	8002038 <HAL_GetTick>
 8004ec2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00da      	lsls	r2, r3, #3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	0d1b      	lsrs	r3, r3, #20
 8004edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ee4:	e061      	b.n	8004faa <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004eec:	d107      	bne.n	8004efe <SPI_WaitFifoStateUntilTimeout+0x62>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d051      	beq.n	8004faa <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f06:	f7fd f897 	bl	8002038 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d902      	bls.n	8004f1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d13d      	bne.n	8004f98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f34:	d111      	bne.n	8004f5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f3e:	d004      	beq.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f48:	d107      	bne.n	8004f5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f62:	d10f      	bne.n	8004f84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e011      	b.n	8004fbc <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa2:	e002      	b.n	8004faa <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d195      	bne.n	8004ee6 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3728      	adds	r7, #40	@ 0x28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000000 	.word	0x20000000

08004fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff ff5b 	bl	8004e9c <SPI_WaitFifoStateUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e046      	b.n	800508a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ffc:	4b25      	ldr	r3, [pc, #148]	@ (8005094 <SPI_EndRxTxTransaction+0xcc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a25      	ldr	r2, [pc, #148]	@ (8005098 <SPI_EndRxTxTransaction+0xd0>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	0d5b      	lsrs	r3, r3, #21
 8005008:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800500c:	fb02 f303 	mul.w	r3, r2, r3
 8005010:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800501a:	d112      	bne.n	8005042 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	2180      	movs	r1, #128	@ 0x80
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff feb0 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e023      	b.n	800508a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3b01      	subs	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b80      	cmp	r3, #128	@ 0x80
 800505a:	d0f2      	beq.n	8005042 <SPI_EndRxTxTransaction+0x7a>
 800505c:	e000      	b.n	8005060 <SPI_EndRxTxTransaction+0x98>
        break;
 800505e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff ff15 	bl	8004e9c <SPI_WaitFifoStateUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e000      	b.n	800508a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000000 	.word	0x20000000
 8005098:	165e9f81 	.word	0x165e9f81

0800509c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e049      	b.n	8005142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f841 	bl	800514a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f000 f9e8 	bl	80054b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	d001      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e054      	b.n	8005222 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a26      	ldr	r2, [pc, #152]	@ (8005230 <HAL_TIM_Base_Start_IT+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a2:	d01d      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <HAL_TIM_Base_Start_IT+0xd4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <HAL_TIM_Base_Start_IT+0xd8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1f      	ldr	r2, [pc, #124]	@ (800523c <HAL_TIM_Base_Start_IT+0xdc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <HAL_TIM_Base_Start_IT+0xe0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005244 <HAL_TIM_Base_Start_IT+0xe4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <HAL_TIM_Base_Start_IT+0xe8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d115      	bne.n	800520c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	4b19      	ldr	r3, [pc, #100]	@ (800524c <HAL_TIM_Base_Start_IT+0xec>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d015      	beq.n	800521e <HAL_TIM_Base_Start_IT+0xbe>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f8:	d011      	beq.n	800521e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	e008      	b.n	800521e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e000      	b.n	8005220 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40010400 	.word	0x40010400
 8005244:	40014000 	.word	0x40014000
 8005248:	40001800 	.word	0x40001800
 800524c:	00010007 	.word	0x00010007

08005250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d020      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01b      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0202 	mvn.w	r2, #2
 8005284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8e9 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 80052a0:	e005      	b.n	80052ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8db 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f8ec 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d020      	beq.n	8005300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01b      	beq.n	8005300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0204 	mvn.w	r2, #4
 80052d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8c3 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f8b5 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f8c6 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d020      	beq.n	800534c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01b      	beq.n	800534c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0208 	mvn.w	r2, #8
 800531c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2204      	movs	r2, #4
 8005322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f89d 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f88f 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8a0 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b00      	cmp	r3, #0
 8005354:	d020      	beq.n	8005398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0210 	mvn.w	r2, #16
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2208      	movs	r2, #8
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f877 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f869 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f87a 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00c      	beq.n	80053bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0201 	mvn.w	r2, #1
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc f99e 	bl	80016f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d104      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f913 	bl	8005610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f90b 	bl	8005624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f834 	bl	800549a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00c      	beq.n	8005456 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0220 	mvn.w	r2, #32
 800544e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8d3 	bl	80055fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a43      	ldr	r2, [pc, #268]	@ (80055d0 <TIM_Base_SetConfig+0x120>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ce:	d00f      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a40      	ldr	r2, [pc, #256]	@ (80055d4 <TIM_Base_SetConfig+0x124>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3f      	ldr	r2, [pc, #252]	@ (80055d8 <TIM_Base_SetConfig+0x128>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3e      	ldr	r2, [pc, #248]	@ (80055dc <TIM_Base_SetConfig+0x12c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3d      	ldr	r2, [pc, #244]	@ (80055e0 <TIM_Base_SetConfig+0x130>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a32      	ldr	r2, [pc, #200]	@ (80055d0 <TIM_Base_SetConfig+0x120>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d02b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005510:	d027      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2f      	ldr	r2, [pc, #188]	@ (80055d4 <TIM_Base_SetConfig+0x124>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d023      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2e      	ldr	r2, [pc, #184]	@ (80055d8 <TIM_Base_SetConfig+0x128>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01f      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2d      	ldr	r2, [pc, #180]	@ (80055dc <TIM_Base_SetConfig+0x12c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a2c      	ldr	r2, [pc, #176]	@ (80055e0 <TIM_Base_SetConfig+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d017      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2b      	ldr	r2, [pc, #172]	@ (80055e4 <TIM_Base_SetConfig+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2a      	ldr	r2, [pc, #168]	@ (80055e8 <TIM_Base_SetConfig+0x138>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a29      	ldr	r2, [pc, #164]	@ (80055ec <TIM_Base_SetConfig+0x13c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a28      	ldr	r2, [pc, #160]	@ (80055f0 <TIM_Base_SetConfig+0x140>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a27      	ldr	r2, [pc, #156]	@ (80055f4 <TIM_Base_SetConfig+0x144>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a26      	ldr	r2, [pc, #152]	@ (80055f8 <TIM_Base_SetConfig+0x148>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d108      	bne.n	8005574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a0e      	ldr	r2, [pc, #56]	@ (80055d0 <TIM_Base_SetConfig+0x120>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_Base_SetConfig+0xf2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a10      	ldr	r2, [pc, #64]	@ (80055e0 <TIM_Base_SetConfig+0x130>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d103      	bne.n	80055aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f043 0204 	orr.w	r2, r3, #4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40010400 	.word	0x40010400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800
 80055f0:	40001800 	.word	0x40001800
 80055f4:	40001c00 	.word	0x40001c00
 80055f8:	40002000 	.word	0x40002000

080055fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e040      	b.n	80056cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fa38 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2224      	movs	r2, #36	@ 0x24
 8005664:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa8c 	bl	8005b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f825 	bl	80056d4 <UART_SetConfig>
 800568a:	4603      	mov	r3, r0
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e01b      	b.n	80056cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fb0b 	bl	8005ce0 <UART_CheckIdleState>
 80056ca:	4603      	mov	r3, r0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4ba6      	ldr	r3, [pc, #664]	@ (8005998 <UART_SetConfig+0x2c4>)
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	6979      	ldr	r1, [r7, #20]
 8005708:	430b      	orrs	r3, r1
 800570a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	430a      	orrs	r2, r1
 8005744:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a94      	ldr	r2, [pc, #592]	@ (800599c <UART_SetConfig+0x2c8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d120      	bne.n	8005792 <UART_SetConfig+0xbe>
 8005750:	4b93      	ldr	r3, [pc, #588]	@ (80059a0 <UART_SetConfig+0x2cc>)
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b03      	cmp	r3, #3
 800575c:	d816      	bhi.n	800578c <UART_SetConfig+0xb8>
 800575e:	a201      	add	r2, pc, #4	@ (adr r2, 8005764 <UART_SetConfig+0x90>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005775 	.word	0x08005775
 8005768:	08005781 	.word	0x08005781
 800576c:	0800577b 	.word	0x0800577b
 8005770:	08005787 	.word	0x08005787
 8005774:	2301      	movs	r3, #1
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e150      	b.n	8005a1c <UART_SetConfig+0x348>
 800577a:	2302      	movs	r3, #2
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e14d      	b.n	8005a1c <UART_SetConfig+0x348>
 8005780:	2304      	movs	r3, #4
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e14a      	b.n	8005a1c <UART_SetConfig+0x348>
 8005786:	2308      	movs	r3, #8
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e147      	b.n	8005a1c <UART_SetConfig+0x348>
 800578c:	2310      	movs	r3, #16
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e144      	b.n	8005a1c <UART_SetConfig+0x348>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a83      	ldr	r2, [pc, #524]	@ (80059a4 <UART_SetConfig+0x2d0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d132      	bne.n	8005802 <UART_SetConfig+0x12e>
 800579c:	4b80      	ldr	r3, [pc, #512]	@ (80059a0 <UART_SetConfig+0x2cc>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b0c      	cmp	r3, #12
 80057a8:	d828      	bhi.n	80057fc <UART_SetConfig+0x128>
 80057aa:	a201      	add	r2, pc, #4	@ (adr r2, 80057b0 <UART_SetConfig+0xdc>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057e5 	.word	0x080057e5
 80057b4:	080057fd 	.word	0x080057fd
 80057b8:	080057fd 	.word	0x080057fd
 80057bc:	080057fd 	.word	0x080057fd
 80057c0:	080057f1 	.word	0x080057f1
 80057c4:	080057fd 	.word	0x080057fd
 80057c8:	080057fd 	.word	0x080057fd
 80057cc:	080057fd 	.word	0x080057fd
 80057d0:	080057eb 	.word	0x080057eb
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	080057f7 	.word	0x080057f7
 80057e4:	2300      	movs	r3, #0
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e118      	b.n	8005a1c <UART_SetConfig+0x348>
 80057ea:	2302      	movs	r3, #2
 80057ec:	77fb      	strb	r3, [r7, #31]
 80057ee:	e115      	b.n	8005a1c <UART_SetConfig+0x348>
 80057f0:	2304      	movs	r3, #4
 80057f2:	77fb      	strb	r3, [r7, #31]
 80057f4:	e112      	b.n	8005a1c <UART_SetConfig+0x348>
 80057f6:	2308      	movs	r3, #8
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e10f      	b.n	8005a1c <UART_SetConfig+0x348>
 80057fc:	2310      	movs	r3, #16
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e10c      	b.n	8005a1c <UART_SetConfig+0x348>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a68      	ldr	r2, [pc, #416]	@ (80059a8 <UART_SetConfig+0x2d4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d120      	bne.n	800584e <UART_SetConfig+0x17a>
 800580c:	4b64      	ldr	r3, [pc, #400]	@ (80059a0 <UART_SetConfig+0x2cc>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005816:	2b30      	cmp	r3, #48	@ 0x30
 8005818:	d013      	beq.n	8005842 <UART_SetConfig+0x16e>
 800581a:	2b30      	cmp	r3, #48	@ 0x30
 800581c:	d814      	bhi.n	8005848 <UART_SetConfig+0x174>
 800581e:	2b20      	cmp	r3, #32
 8005820:	d009      	beq.n	8005836 <UART_SetConfig+0x162>
 8005822:	2b20      	cmp	r3, #32
 8005824:	d810      	bhi.n	8005848 <UART_SetConfig+0x174>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <UART_SetConfig+0x15c>
 800582a:	2b10      	cmp	r3, #16
 800582c:	d006      	beq.n	800583c <UART_SetConfig+0x168>
 800582e:	e00b      	b.n	8005848 <UART_SetConfig+0x174>
 8005830:	2300      	movs	r3, #0
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e0f2      	b.n	8005a1c <UART_SetConfig+0x348>
 8005836:	2302      	movs	r3, #2
 8005838:	77fb      	strb	r3, [r7, #31]
 800583a:	e0ef      	b.n	8005a1c <UART_SetConfig+0x348>
 800583c:	2304      	movs	r3, #4
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e0ec      	b.n	8005a1c <UART_SetConfig+0x348>
 8005842:	2308      	movs	r3, #8
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e0e9      	b.n	8005a1c <UART_SetConfig+0x348>
 8005848:	2310      	movs	r3, #16
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e0e6      	b.n	8005a1c <UART_SetConfig+0x348>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a56      	ldr	r2, [pc, #344]	@ (80059ac <UART_SetConfig+0x2d8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d120      	bne.n	800589a <UART_SetConfig+0x1c6>
 8005858:	4b51      	ldr	r3, [pc, #324]	@ (80059a0 <UART_SetConfig+0x2cc>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005862:	2bc0      	cmp	r3, #192	@ 0xc0
 8005864:	d013      	beq.n	800588e <UART_SetConfig+0x1ba>
 8005866:	2bc0      	cmp	r3, #192	@ 0xc0
 8005868:	d814      	bhi.n	8005894 <UART_SetConfig+0x1c0>
 800586a:	2b80      	cmp	r3, #128	@ 0x80
 800586c:	d009      	beq.n	8005882 <UART_SetConfig+0x1ae>
 800586e:	2b80      	cmp	r3, #128	@ 0x80
 8005870:	d810      	bhi.n	8005894 <UART_SetConfig+0x1c0>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <UART_SetConfig+0x1a8>
 8005876:	2b40      	cmp	r3, #64	@ 0x40
 8005878:	d006      	beq.n	8005888 <UART_SetConfig+0x1b4>
 800587a:	e00b      	b.n	8005894 <UART_SetConfig+0x1c0>
 800587c:	2300      	movs	r3, #0
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e0cc      	b.n	8005a1c <UART_SetConfig+0x348>
 8005882:	2302      	movs	r3, #2
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e0c9      	b.n	8005a1c <UART_SetConfig+0x348>
 8005888:	2304      	movs	r3, #4
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e0c6      	b.n	8005a1c <UART_SetConfig+0x348>
 800588e:	2308      	movs	r3, #8
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e0c3      	b.n	8005a1c <UART_SetConfig+0x348>
 8005894:	2310      	movs	r3, #16
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e0c0      	b.n	8005a1c <UART_SetConfig+0x348>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a44      	ldr	r2, [pc, #272]	@ (80059b0 <UART_SetConfig+0x2dc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d125      	bne.n	80058f0 <UART_SetConfig+0x21c>
 80058a4:	4b3e      	ldr	r3, [pc, #248]	@ (80059a0 <UART_SetConfig+0x2cc>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b2:	d017      	beq.n	80058e4 <UART_SetConfig+0x210>
 80058b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b8:	d817      	bhi.n	80058ea <UART_SetConfig+0x216>
 80058ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058be:	d00b      	beq.n	80058d8 <UART_SetConfig+0x204>
 80058c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c4:	d811      	bhi.n	80058ea <UART_SetConfig+0x216>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <UART_SetConfig+0x1fe>
 80058ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ce:	d006      	beq.n	80058de <UART_SetConfig+0x20a>
 80058d0:	e00b      	b.n	80058ea <UART_SetConfig+0x216>
 80058d2:	2300      	movs	r3, #0
 80058d4:	77fb      	strb	r3, [r7, #31]
 80058d6:	e0a1      	b.n	8005a1c <UART_SetConfig+0x348>
 80058d8:	2302      	movs	r3, #2
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e09e      	b.n	8005a1c <UART_SetConfig+0x348>
 80058de:	2304      	movs	r3, #4
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e09b      	b.n	8005a1c <UART_SetConfig+0x348>
 80058e4:	2308      	movs	r3, #8
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e098      	b.n	8005a1c <UART_SetConfig+0x348>
 80058ea:	2310      	movs	r3, #16
 80058ec:	77fb      	strb	r3, [r7, #31]
 80058ee:	e095      	b.n	8005a1c <UART_SetConfig+0x348>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a2f      	ldr	r2, [pc, #188]	@ (80059b4 <UART_SetConfig+0x2e0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d125      	bne.n	8005946 <UART_SetConfig+0x272>
 80058fa:	4b29      	ldr	r3, [pc, #164]	@ (80059a0 <UART_SetConfig+0x2cc>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005900:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005904:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005908:	d017      	beq.n	800593a <UART_SetConfig+0x266>
 800590a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800590e:	d817      	bhi.n	8005940 <UART_SetConfig+0x26c>
 8005910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005914:	d00b      	beq.n	800592e <UART_SetConfig+0x25a>
 8005916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800591a:	d811      	bhi.n	8005940 <UART_SetConfig+0x26c>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <UART_SetConfig+0x254>
 8005920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005924:	d006      	beq.n	8005934 <UART_SetConfig+0x260>
 8005926:	e00b      	b.n	8005940 <UART_SetConfig+0x26c>
 8005928:	2301      	movs	r3, #1
 800592a:	77fb      	strb	r3, [r7, #31]
 800592c:	e076      	b.n	8005a1c <UART_SetConfig+0x348>
 800592e:	2302      	movs	r3, #2
 8005930:	77fb      	strb	r3, [r7, #31]
 8005932:	e073      	b.n	8005a1c <UART_SetConfig+0x348>
 8005934:	2304      	movs	r3, #4
 8005936:	77fb      	strb	r3, [r7, #31]
 8005938:	e070      	b.n	8005a1c <UART_SetConfig+0x348>
 800593a:	2308      	movs	r3, #8
 800593c:	77fb      	strb	r3, [r7, #31]
 800593e:	e06d      	b.n	8005a1c <UART_SetConfig+0x348>
 8005940:	2310      	movs	r3, #16
 8005942:	77fb      	strb	r3, [r7, #31]
 8005944:	e06a      	b.n	8005a1c <UART_SetConfig+0x348>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1b      	ldr	r2, [pc, #108]	@ (80059b8 <UART_SetConfig+0x2e4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d138      	bne.n	80059c2 <UART_SetConfig+0x2ee>
 8005950:	4b13      	ldr	r3, [pc, #76]	@ (80059a0 <UART_SetConfig+0x2cc>)
 8005952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005956:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800595a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800595e:	d017      	beq.n	8005990 <UART_SetConfig+0x2bc>
 8005960:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005964:	d82a      	bhi.n	80059bc <UART_SetConfig+0x2e8>
 8005966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800596a:	d00b      	beq.n	8005984 <UART_SetConfig+0x2b0>
 800596c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005970:	d824      	bhi.n	80059bc <UART_SetConfig+0x2e8>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <UART_SetConfig+0x2aa>
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800597a:	d006      	beq.n	800598a <UART_SetConfig+0x2b6>
 800597c:	e01e      	b.n	80059bc <UART_SetConfig+0x2e8>
 800597e:	2300      	movs	r3, #0
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e04b      	b.n	8005a1c <UART_SetConfig+0x348>
 8005984:	2302      	movs	r3, #2
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e048      	b.n	8005a1c <UART_SetConfig+0x348>
 800598a:	2304      	movs	r3, #4
 800598c:	77fb      	strb	r3, [r7, #31]
 800598e:	e045      	b.n	8005a1c <UART_SetConfig+0x348>
 8005990:	2308      	movs	r3, #8
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e042      	b.n	8005a1c <UART_SetConfig+0x348>
 8005996:	bf00      	nop
 8005998:	efff69f3 	.word	0xefff69f3
 800599c:	40011000 	.word	0x40011000
 80059a0:	40023800 	.word	0x40023800
 80059a4:	40004400 	.word	0x40004400
 80059a8:	40004800 	.word	0x40004800
 80059ac:	40004c00 	.word	0x40004c00
 80059b0:	40005000 	.word	0x40005000
 80059b4:	40011400 	.word	0x40011400
 80059b8:	40007800 	.word	0x40007800
 80059bc:	2310      	movs	r3, #16
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e02c      	b.n	8005a1c <UART_SetConfig+0x348>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a72      	ldr	r2, [pc, #456]	@ (8005b90 <UART_SetConfig+0x4bc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d125      	bne.n	8005a18 <UART_SetConfig+0x344>
 80059cc:	4b71      	ldr	r3, [pc, #452]	@ (8005b94 <UART_SetConfig+0x4c0>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80059d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80059da:	d017      	beq.n	8005a0c <UART_SetConfig+0x338>
 80059dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80059e0:	d817      	bhi.n	8005a12 <UART_SetConfig+0x33e>
 80059e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059e6:	d00b      	beq.n	8005a00 <UART_SetConfig+0x32c>
 80059e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ec:	d811      	bhi.n	8005a12 <UART_SetConfig+0x33e>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <UART_SetConfig+0x326>
 80059f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059f6:	d006      	beq.n	8005a06 <UART_SetConfig+0x332>
 80059f8:	e00b      	b.n	8005a12 <UART_SetConfig+0x33e>
 80059fa:	2300      	movs	r3, #0
 80059fc:	77fb      	strb	r3, [r7, #31]
 80059fe:	e00d      	b.n	8005a1c <UART_SetConfig+0x348>
 8005a00:	2302      	movs	r3, #2
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e00a      	b.n	8005a1c <UART_SetConfig+0x348>
 8005a06:	2304      	movs	r3, #4
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e007      	b.n	8005a1c <UART_SetConfig+0x348>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e004      	b.n	8005a1c <UART_SetConfig+0x348>
 8005a12:	2310      	movs	r3, #16
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e001      	b.n	8005a1c <UART_SetConfig+0x348>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a24:	d15b      	bne.n	8005ade <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005a26:	7ffb      	ldrb	r3, [r7, #31]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d828      	bhi.n	8005a7e <UART_SetConfig+0x3aa>
 8005a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <UART_SetConfig+0x360>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	08005a7f 	.word	0x08005a7f
 8005a44:	08005a6f 	.word	0x08005a6f
 8005a48:	08005a7f 	.word	0x08005a7f
 8005a4c:	08005a7f 	.word	0x08005a7f
 8005a50:	08005a7f 	.word	0x08005a7f
 8005a54:	08005a77 	.word	0x08005a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fe faca 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005a5c:	61b8      	str	r0, [r7, #24]
        break;
 8005a5e:	e013      	b.n	8005a88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a60:	f7fe fada 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 8005a64:	61b8      	str	r0, [r7, #24]
        break;
 8005a66:	e00f      	b.n	8005a88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a68:	4b4b      	ldr	r3, [pc, #300]	@ (8005b98 <UART_SetConfig+0x4c4>)
 8005a6a:	61bb      	str	r3, [r7, #24]
        break;
 8005a6c:	e00c      	b.n	8005a88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a6e:	f7fe f9ad 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8005a72:	61b8      	str	r0, [r7, #24]
        break;
 8005a74:	e008      	b.n	8005a88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a7a:	61bb      	str	r3, [r7, #24]
        break;
 8005a7c:	e004      	b.n	8005a88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	77bb      	strb	r3, [r7, #30]
        break;
 8005a86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d074      	beq.n	8005b78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	005a      	lsls	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	441a      	add	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b0f      	cmp	r3, #15
 8005aa8:	d916      	bls.n	8005ad8 <UART_SetConfig+0x404>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab0:	d212      	bcs.n	8005ad8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f023 030f 	bic.w	r3, r3, #15
 8005aba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	89fb      	ldrh	r3, [r7, #14]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	89fa      	ldrh	r2, [r7, #14]
 8005ad4:	60da      	str	r2, [r3, #12]
 8005ad6:	e04f      	b.n	8005b78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	77bb      	strb	r3, [r7, #30]
 8005adc:	e04c      	b.n	8005b78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ade:	7ffb      	ldrb	r3, [r7, #31]
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d828      	bhi.n	8005b36 <UART_SetConfig+0x462>
 8005ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <UART_SetConfig+0x418>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b37 	.word	0x08005b37
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b37 	.word	0x08005b37
 8005b04:	08005b37 	.word	0x08005b37
 8005b08:	08005b37 	.word	0x08005b37
 8005b0c:	08005b2f 	.word	0x08005b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fe fa6e 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005b14:	61b8      	str	r0, [r7, #24]
        break;
 8005b16:	e013      	b.n	8005b40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7fe fa7e 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 8005b1c:	61b8      	str	r0, [r7, #24]
        break;
 8005b1e:	e00f      	b.n	8005b40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b20:	4b1d      	ldr	r3, [pc, #116]	@ (8005b98 <UART_SetConfig+0x4c4>)
 8005b22:	61bb      	str	r3, [r7, #24]
        break;
 8005b24:	e00c      	b.n	8005b40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b26:	f7fe f951 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8005b2a:	61b8      	str	r0, [r7, #24]
        break;
 8005b2c:	e008      	b.n	8005b40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b32:	61bb      	str	r3, [r7, #24]
        break;
 8005b34:	e004      	b.n	8005b40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b3e:	bf00      	nop
    }

    if (pclk != 0U)
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d018      	beq.n	8005b78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	085a      	lsrs	r2, r3, #1
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	441a      	add	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b0f      	cmp	r3, #15
 8005b5e:	d909      	bls.n	8005b74 <UART_SetConfig+0x4a0>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b66:	d205      	bcs.n	8005b74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60da      	str	r2, [r3, #12]
 8005b72:	e001      	b.n	8005b78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b84:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40007c00 	.word	0x40007c00
 8005b94:	40023800 	.word	0x40023800
 8005b98:	00f42400 	.word	0x00f42400

08005b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01a      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9a:	d10a      	bne.n	8005cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b098      	sub	sp, #96	@ 0x60
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf0:	f7fc f9a2 	bl	8002038 <HAL_GetTick>
 8005cf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d12e      	bne.n	8005d62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f88c 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d021      	beq.n	8005d62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e062      	b.n	8005e28 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d149      	bne.n	8005e04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f856 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03c      	beq.n	8005e04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	623b      	str	r3, [r7, #32]
   return(result);
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ddc:	61fa      	str	r2, [r7, #28]
 8005dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e5      	bne.n	8005dbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e011      	b.n	8005e28 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3758      	adds	r7, #88	@ 0x58
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e40:	e04f      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d04b      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fc f8f5 	bl	8002038 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e04e      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d037      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b80      	cmp	r3, #128	@ 0x80
 8005e76:	d034      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d031      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d110      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2208      	movs	r2, #8
 8005e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f838 	bl	8005f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e029      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ebc:	d111      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f81e 	bl	8005f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e00f      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4013      	ands	r3, r2
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d0a0      	beq.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b095      	sub	sp, #84	@ 0x54
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e6      	bne.n	8005f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3308      	adds	r3, #8
 8005f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e5      	bne.n	8005f44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d118      	bne.n	8005fb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e6      	bne.n	8005f80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fc6:	bf00      	nop
 8005fc8:	3754      	adds	r7, #84	@ 0x54
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	f107 001c 	add.w	r0, r7, #28
 8005fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fe6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d121      	bne.n	8006032 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	4b21      	ldr	r3, [pc, #132]	@ (8006084 <USB_CoreInit+0xb0>)
 8006000:	4013      	ands	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006012:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006016:	2b01      	cmp	r3, #1
 8006018:	d105      	bne.n	8006026 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fa92 	bl	8006550 <USB_CoreReset>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]
 8006030:	e010      	b.n	8006054 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa86 	bl	8006550 <USB_CoreReset>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006054:	7fbb      	ldrb	r3, [r7, #30]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10b      	bne.n	8006072 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f043 0206 	orr.w	r2, r3, #6
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f043 0220 	orr.w	r2, r3, #32
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800607e:	b004      	add	sp, #16
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	ffbdffbf 	.word	0xffbdffbf

08006088 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f023 0201 	bic.w	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d115      	bne.n	80060f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060d8:	200a      	movs	r0, #10
 80060da:	f7fb ffb9 	bl	8002050 <HAL_Delay>
      ms += 10U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	330a      	adds	r3, #10
 80060e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa25 	bl	8006534 <USB_GetMode>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d01e      	beq.n	800612e <USB_SetCurrentMode+0x84>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80060f4:	d9f0      	bls.n	80060d8 <USB_SetCurrentMode+0x2e>
 80060f6:	e01a      	b.n	800612e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d115      	bne.n	800612a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800610a:	200a      	movs	r0, #10
 800610c:	f7fb ffa0 	bl	8002050 <HAL_Delay>
      ms += 10U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	330a      	adds	r3, #10
 8006114:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fa0c 	bl	8006534 <USB_GetMode>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <USB_SetCurrentMode+0x84>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2bc7      	cmp	r3, #199	@ 0xc7
 8006126:	d9f0      	bls.n	800610a <USB_SetCurrentMode+0x60>
 8006128:	e001      	b.n	800612e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e005      	b.n	800613a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2bc8      	cmp	r3, #200	@ 0xc8
 8006132:	d101      	bne.n	8006138 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006144:	b084      	sub	sp, #16
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800615e:	2300      	movs	r3, #0
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	e009      	b.n	8006178 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3340      	adds	r3, #64	@ 0x40
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	2200      	movs	r2, #0
 8006170:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3301      	adds	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b0e      	cmp	r3, #14
 800617c:	d9f2      	bls.n	8006164 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800617e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006182:	2b00      	cmp	r3, #0
 8006184:	d11c      	bne.n	80061c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006194:	f043 0302 	orr.w	r3, r3, #2
 8006198:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e005      	b.n	80061cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061d2:	461a      	mov	r2, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10d      	bne.n	80061fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061e8:	2100      	movs	r1, #0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f968 	bl	80064c0 <USB_SetDevSpeed>
 80061f0:	e008      	b.n	8006204 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061f2:	2101      	movs	r1, #1
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f963 	bl	80064c0 <USB_SetDevSpeed>
 80061fa:	e003      	b.n	8006204 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061fc:	2103      	movs	r1, #3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f95e 	bl	80064c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006204:	2110      	movs	r1, #16
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f8fa 	bl	8006400 <USB_FlushTxFifo>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f924 	bl	8006464 <USB_FlushRxFifo>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622c:	461a      	mov	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006238:	461a      	mov	r2, r3
 800623a:	2300      	movs	r3, #0
 800623c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006244:	461a      	mov	r2, r3
 8006246:	2300      	movs	r3, #0
 8006248:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	e043      	b.n	80062d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006262:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006266:	d118      	bne.n	800629a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627a:	461a      	mov	r2, r3
 800627c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e013      	b.n	80062ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006290:	461a      	mov	r2, r3
 8006292:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	e008      	b.n	80062ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a6:	461a      	mov	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ca:	461a      	mov	r2, r3
 80062cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	3301      	adds	r3, #1
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062dc:	461a      	mov	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d3b5      	bcc.n	8006250 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	e043      	b.n	8006372 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006300:	d118      	bne.n	8006334 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e013      	b.n	8006346 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	461a      	mov	r2, r3
 800632c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e008      	b.n	8006346 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006340:	461a      	mov	r2, r3
 8006342:	2300      	movs	r3, #0
 8006344:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006352:	461a      	mov	r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006364:	461a      	mov	r2, r3
 8006366:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800636a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	3301      	adds	r3, #1
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006376:	461a      	mov	r2, r3
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4293      	cmp	r3, r2
 800637c:	d3b5      	bcc.n	80062ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800638c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006390:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800639e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f043 0210 	orr.w	r2, r3, #16
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	4b0f      	ldr	r3, [pc, #60]	@ (80063f8 <USB_DevInit+0x2b4>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f043 0208 	orr.w	r2, r3, #8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d105      	bne.n	80063e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <USB_DevInit+0x2b8>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063f4:	b004      	add	sp, #16
 80063f6:	4770      	bx	lr
 80063f8:	803c3800 	.word	0x803c3800
 80063fc:	40000004 	.word	0x40000004

08006400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800641a:	d901      	bls.n	8006420 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e01b      	b.n	8006458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	daf2      	bge.n	800640e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	019b      	lsls	r3, r3, #6
 8006430:	f043 0220 	orr.w	r2, r3, #32
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006444:	d901      	bls.n	800644a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e006      	b.n	8006458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b20      	cmp	r3, #32
 8006454:	d0f0      	beq.n	8006438 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800647c:	d901      	bls.n	8006482 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e018      	b.n	80064b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	daf2      	bge.n	8006470 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2210      	movs	r2, #16
 8006492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064a0:	d901      	bls.n	80064a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e006      	b.n	80064b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d0f0      	beq.n	8006494 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064e0:	4313      	orrs	r3, r2
 80064e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800650c:	f023 0303 	bic.w	r3, r3, #3
 8006510:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006520:	f043 0302 	orr.w	r3, r3, #2
 8006524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f003 0301 	and.w	r3, r3, #1
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006568:	d901      	bls.n	800656e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e022      	b.n	80065b4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	daf2      	bge.n	800655c <USB_CoreReset+0xc>

  count = 10U;
 8006576:	230a      	movs	r3, #10
 8006578:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800657a:	e002      	b.n	8006582 <USB_CoreReset+0x32>
  {
    count--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3b01      	subs	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f9      	bne.n	800657c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f043 0201 	orr.w	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065a0:	d901      	bls.n	80065a6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e006      	b.n	80065b4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d0f0      	beq.n	8006594 <USB_CoreReset+0x44>

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80065c6:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <ETH_IRQHandler+0x38>)
 80065c8:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 80065ca:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <ETH_IRQHandler+0x3c>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fb ff55 	bl	8002480 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 80065d6:	4b09      	ldr	r3, [pc, #36]	@ (80065fc <ETH_IRQHandler+0x3c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <ETH_IRQHandler+0x2e>
 80065de:	4b08      	ldr	r3, [pc, #32]	@ (8006600 <ETH_IRQHandler+0x40>)
 80065e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	f3bf 8f6f 	isb	sy
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000dd4 	.word	0x20000dd4
 80065fc:	20000e88 	.word	0x20000e88
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af02      	add	r7, sp, #8
 800660a:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 800660c:	2300      	movs	r3, #0
 800660e:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006616:	2be0      	cmp	r3, #224	@ 0xe0
 8006618:	d103      	bne.n	8006622 <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	f043 0320 	orr.w	r3, r3, #32
 8006620:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d019      	beq.n	8006664 <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	f043 0310 	orr.w	r3, r3, #16
 8006636:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800663e:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 800664a:	7dfb      	ldrb	r3, [r7, #23]
 800664c:	f043 0308 	orr.w	r3, r3, #8
 8006650:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	f043 0304 	orr.w	r3, r3, #4
 8006662:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 8006672:	7dfb      	ldrb	r3, [r7, #23]
 8006674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006678:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 800667a:	4b0e      	ldr	r3, [pc, #56]	@ (80066b4 <HAL_ETH_ErrorCallback+0xb0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d014      	beq.n	80066ac <HAL_ETH_ErrorCallback+0xa8>
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d011      	beq.n	80066ac <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <HAL_ETH_ErrorCallback+0xb0>)
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	7df9      	ldrb	r1, [r7, #23]
 8006692:	f107 030c 	add.w	r3, r7, #12
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	2300      	movs	r3, #0
 800669a:	2201      	movs	r2, #1
 800669c:	f001 fec0 	bl	8008420 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80066a0:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_ETH_ErrorCallback+0xb4>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	4a03      	ldr	r2, [pc, #12]	@ (80066b8 <HAL_ETH_ErrorCallback+0xb4>)
 80066aa:	6013      	str	r3, [r2, #0]
    }
}
 80066ac:	bf00      	nop
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000e84 	.word	0x20000e84
 80066b8:	20000e88 	.word	0x20000e88

080066bc <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c8:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 80066ca:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <HAL_ETH_RxCpltCallback+0x54>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d902      	bls.n	80066da <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 80066d4:	4a0e      	ldr	r2, [pc, #56]	@ (8006710 <HAL_ETH_RxCpltCallback+0x54>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 80066da:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <HAL_ETH_RxCpltCallback+0x58>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d011      	beq.n	8006706 <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 80066e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <HAL_ETH_RxCpltCallback+0x58>)
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	f107 0308 	add.w	r3, r7, #8
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	2201      	movs	r2, #1
 80066f4:	2101      	movs	r1, #1
 80066f6:	f001 fe93 	bl	8008420 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80066fa:	4b07      	ldr	r3, [pc, #28]	@ (8006718 <HAL_ETH_RxCpltCallback+0x5c>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4313      	orrs	r3, r2
 8006702:	4a05      	ldr	r2, [pc, #20]	@ (8006718 <HAL_ETH_RxCpltCallback+0x5c>)
 8006704:	6013      	str	r3, [r2, #0]
    }
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000e8c 	.word	0x20000e8c
 8006714:	20000e84 	.word	0x20000e84
 8006718:	20000e88 	.word	0x20000e88

0800671c <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 800672a:	4b11      	ldr	r3, [pc, #68]	@ (8006770 <HAL_ETH_TxCpltCallback+0x54>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	429a      	cmp	r2, r3
 8006732:	d902      	bls.n	800673a <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 8006734:	4a0e      	ldr	r2, [pc, #56]	@ (8006770 <HAL_ETH_TxCpltCallback+0x54>)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 800673a:	4b0e      	ldr	r3, [pc, #56]	@ (8006774 <HAL_ETH_TxCpltCallback+0x58>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d011      	beq.n	8006766 <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 8006746:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <HAL_ETH_TxCpltCallback+0x58>)
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	2300      	movs	r3, #0
 8006752:	2201      	movs	r2, #1
 8006754:	2102      	movs	r1, #2
 8006756:	f001 fe63 	bl	8008420 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 800675a:	4b07      	ldr	r3, [pc, #28]	@ (8006778 <HAL_ETH_TxCpltCallback+0x5c>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4313      	orrs	r3, r2
 8006762:	4a05      	ldr	r2, [pc, #20]	@ (8006778 <HAL_ETH_TxCpltCallback+0x5c>)
 8006764:	6013      	str	r3, [r2, #0]
    }
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000e90 	.word	0x20000e90
 8006774:	20000e84 	.word	0x20000e84
 8006778:	20000e88 	.word	0x20000e88

0800677c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006792:	f3ef 8305 	mrs	r3, IPSR
 8006796:	60bb      	str	r3, [r7, #8]
  return(result);
 8006798:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10f      	bne.n	80067be <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800679e:	f3ef 8310 	mrs	r3, PRIMASK
 80067a2:	607b      	str	r3, [r7, #4]
  return(result);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d105      	bne.n	80067b6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067aa:	f3ef 8311 	mrs	r3, BASEPRI
 80067ae:	603b      	str	r3, [r7, #0]
  return(result);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <osKernelInitialize+0x3a>
 80067b6:	4b0e      	ldr	r3, [pc, #56]	@ (80067f0 <osKernelInitialize+0x64>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d103      	bne.n	80067c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80067be:	f06f 0305 	mvn.w	r3, #5
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e00c      	b.n	80067e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067c6:	4b0a      	ldr	r3, [pc, #40]	@ (80067f0 <osKernelInitialize+0x64>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067ce:	4b08      	ldr	r3, [pc, #32]	@ (80067f0 <osKernelInitialize+0x64>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e002      	b.n	80067e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80067e0:	68fb      	ldr	r3, [r7, #12]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20000e94 	.word	0x20000e94

080067f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067fa:	f3ef 8305 	mrs	r3, IPSR
 80067fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006800:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10f      	bne.n	8006826 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006806:	f3ef 8310 	mrs	r3, PRIMASK
 800680a:	607b      	str	r3, [r7, #4]
  return(result);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d105      	bne.n	800681e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006812:	f3ef 8311 	mrs	r3, BASEPRI
 8006816:	603b      	str	r3, [r7, #0]
  return(result);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <osKernelStart+0x3a>
 800681e:	4b0f      	ldr	r3, [pc, #60]	@ (800685c <osKernelStart+0x68>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d103      	bne.n	800682e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006826:	f06f 0305 	mvn.w	r3, #5
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e010      	b.n	8006850 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <osKernelStart+0x68>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d109      	bne.n	800684a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006836:	f7ff ffa1 	bl	800677c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800683a:	4b08      	ldr	r3, [pc, #32]	@ (800685c <osKernelStart+0x68>)
 800683c:	2202      	movs	r2, #2
 800683e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006840:	f001 f8e2 	bl	8007a08 <vTaskStartScheduler>
      stat = osOK;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e002      	b.n	8006850 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006850:	68fb      	ldr	r3, [r7, #12]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000e94 	.word	0x20000e94

08006860 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b090      	sub	sp, #64	@ 0x40
 8006864:	af04      	add	r7, sp, #16
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006870:	f3ef 8305 	mrs	r3, IPSR
 8006874:	61fb      	str	r3, [r7, #28]
  return(result);
 8006876:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006878:	2b00      	cmp	r3, #0
 800687a:	f040 8090 	bne.w	800699e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800687e:	f3ef 8310 	mrs	r3, PRIMASK
 8006882:	61bb      	str	r3, [r7, #24]
  return(result);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800688a:	f3ef 8311 	mrs	r3, BASEPRI
 800688e:	617b      	str	r3, [r7, #20]
  return(result);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <osThreadNew+0x3e>
 8006896:	4b44      	ldr	r3, [pc, #272]	@ (80069a8 <osThreadNew+0x148>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d07f      	beq.n	800699e <osThreadNew+0x13e>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d07c      	beq.n	800699e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80068a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80068a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80068aa:	2318      	movs	r3, #24
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295
 80068b6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d045      	beq.n	800694a <osThreadNew+0xea>
      if (attr->name != NULL) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <osThreadNew+0x6c>
        name = attr->name;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <osThreadNew+0x92>
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	2b38      	cmp	r3, #56	@ 0x38
 80068e4:	d805      	bhi.n	80068f2 <osThreadNew+0x92>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <osThreadNew+0x96>
        return (NULL);
 80068f2:	2300      	movs	r3, #0
 80068f4:	e054      	b.n	80069a0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	089b      	lsrs	r3, r3, #2
 8006904:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00e      	beq.n	800692c <osThreadNew+0xcc>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	2ba7      	cmp	r3, #167	@ 0xa7
 8006914:	d90a      	bls.n	800692c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <osThreadNew+0xcc>
        mem = 1;
 8006926:	2301      	movs	r3, #1
 8006928:	623b      	str	r3, [r7, #32]
 800692a:	e010      	b.n	800694e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10c      	bne.n	800694e <osThreadNew+0xee>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d108      	bne.n	800694e <osThreadNew+0xee>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <osThreadNew+0xee>
          mem = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	623b      	str	r3, [r7, #32]
 8006948:	e001      	b.n	800694e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d110      	bne.n	8006976 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800695c:	9202      	str	r2, [sp, #8]
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006968:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fe4e 	bl	800760c <xTaskCreateStatic>
 8006970:	4603      	mov	r3, r0
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	e013      	b.n	800699e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d110      	bne.n	800699e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800697c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697e:	b29a      	uxth	r2, r3
 8006980:	f107 0310 	add.w	r3, r7, #16
 8006984:	9301      	str	r3, [sp, #4]
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fea2 	bl	80076d8 <xTaskCreate>
 8006994:	4603      	mov	r3, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	d001      	beq.n	800699e <osThreadNew+0x13e>
          hTask = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800699e:	693b      	ldr	r3, [r7, #16]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3730      	adds	r7, #48	@ 0x30
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000e94 	.word	0x20000e94

080069ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b4:	f3ef 8305 	mrs	r3, IPSR
 80069b8:	613b      	str	r3, [r7, #16]
  return(result);
 80069ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10f      	bne.n	80069e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c0:	f3ef 8310 	mrs	r3, PRIMASK
 80069c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069cc:	f3ef 8311 	mrs	r3, BASEPRI
 80069d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <osDelay+0x3c>
 80069d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006a04 <osDelay+0x58>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d103      	bne.n	80069e8 <osDelay+0x3c>
    stat = osErrorISR;
 80069e0:	f06f 0305 	mvn.w	r3, #5
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	e007      	b.n	80069f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 ffd0 	bl	8007998 <vTaskDelay>
    }
  }

  return (stat);
 80069f8:	697b      	ldr	r3, [r7, #20]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000e94 	.word	0x20000e94

08006a08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a07      	ldr	r2, [pc, #28]	@ (8006a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4a06      	ldr	r2, [pc, #24]	@ (8006a38 <vApplicationGetIdleTaskMemory+0x30>)
 8006a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a26:	601a      	str	r2, [r3, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	20000e98 	.word	0x20000e98
 8006a38:	20000f40 	.word	0x20000f40

08006a3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4a07      	ldr	r2, [pc, #28]	@ (8006a68 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4a06      	ldr	r2, [pc, #24]	@ (8006a6c <vApplicationGetTimerTaskMemory+0x30>)
 8006a52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a5a:	601a      	str	r2, [r3, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20001340 	.word	0x20001340
 8006a6c:	200013e8 	.word	0x200013e8

08006a70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f103 0208 	add.w	r2, r3, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f04f 32ff 	mov.w	r2, #4294967295
 8006a88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f103 0208 	add.w	r2, r3, #8
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f103 0208 	add.w	r2, r3, #8
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	601a      	str	r2, [r3, #0]
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d103      	bne.n	8006b32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e00c      	b.n	8006b4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3308      	adds	r3, #8
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e002      	b.n	8006b40 <vListInsert+0x2e>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d2f6      	bcs.n	8006b3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
}
 8006b78:	bf00      	nop
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6892      	ldr	r2, [r2, #8]
 8006b9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6852      	ldr	r2, [r2, #4]
 8006ba4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d103      	bne.n	8006bb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	1e5a      	subs	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf0:	b672      	cpsid	i
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	b662      	cpsie	i
 8006c00:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006c08:	f002 f9c0 	bl	8008f8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c14:	68f9      	ldr	r1, [r7, #12]
 8006c16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	441a      	add	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c3e:	fb01 f303 	mul.w	r3, r1, r3
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	22ff      	movs	r2, #255	@ 0xff
 8006c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	22ff      	movs	r2, #255	@ 0xff
 8006c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d114      	bne.n	8006c88 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01a      	beq.n	8006c9c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3310      	adds	r3, #16
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 f978 	bl	8007f60 <xTaskRemoveFromEventList>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d012      	beq.n	8006c9c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <xQueueGenericReset+0xd4>)
 8006c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	e009      	b.n	8006c9c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3310      	adds	r3, #16
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff feef 	bl	8006a70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3324      	adds	r3, #36	@ 0x24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff feea 	bl	8006a70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c9c:	f002 f9ac 	bl	8008ff8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ca0:	2301      	movs	r3, #1
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08e      	sub	sp, #56	@ 0x38
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10d      	bne.n	8006ce0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	b672      	cpsid	i
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	b662      	cpsie	i
 8006cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	e7fd      	b.n	8006cdc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10d      	bne.n	8006d02 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	b672      	cpsid	i
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	b662      	cpsie	i
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	e7fd      	b.n	8006cfe <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <xQueueGenericCreateStatic+0x5e>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <xQueueGenericCreateStatic+0x62>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <xQueueGenericCreateStatic+0x64>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10d      	bne.n	8006d34 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	b672      	cpsid	i
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	b662      	cpsie	i
 8006d2c:	623b      	str	r3, [r7, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <xQueueGenericCreateStatic+0x90>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <xQueueGenericCreateStatic+0x94>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <xQueueGenericCreateStatic+0x96>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10d      	bne.n	8006d66 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	b672      	cpsid	i
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	b662      	cpsie	i
 8006d5e:	61fb      	str	r3, [r7, #28]
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	e7fd      	b.n	8006d62 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d66:	2350      	movs	r3, #80	@ 0x50
 8006d68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b50      	cmp	r3, #80	@ 0x50
 8006d6e:	d00d      	beq.n	8006d8c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	b672      	cpsid	i
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	b662      	cpsie	i
 8006d84:	61bb      	str	r3, [r7, #24]
}
 8006d86:	bf00      	nop
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00d      	beq.n	8006db4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006da0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f805 	bl	8006dbe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3730      	adds	r7, #48	@ 0x30
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	e002      	b.n	8006de0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dec:	2101      	movs	r1, #1
 8006dee:	69b8      	ldr	r0, [r7, #24]
 8006df0:	f7ff fef2 	bl	8006bd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08e      	sub	sp, #56	@ 0x38
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e12:	2300      	movs	r3, #0
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10d      	bne.n	8006e3c <xQueueGenericSend+0x38>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	b672      	cpsid	i
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	b662      	cpsie	i
 8006e34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d103      	bne.n	8006e4a <xQueueGenericSend+0x46>
 8006e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <xQueueGenericSend+0x4a>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <xQueueGenericSend+0x4c>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <xQueueGenericSend+0x6c>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e58:	b672      	cpsid	i
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	b662      	cpsie	i
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	e7fd      	b.n	8006e6c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d103      	bne.n	8006e7e <xQueueGenericSend+0x7a>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <xQueueGenericSend+0x7e>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <xQueueGenericSend+0x80>
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <xQueueGenericSend+0xa0>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	b672      	cpsid	i
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	b662      	cpsie	i
 8006e9c:	623b      	str	r3, [r7, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	e7fd      	b.n	8006ea0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ea4:	f001 fa2a 	bl	80082fc <xTaskGetSchedulerState>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d102      	bne.n	8006eb4 <xQueueGenericSend+0xb0>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <xQueueGenericSend+0xb4>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <xQueueGenericSend+0xb6>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10d      	bne.n	8006eda <xQueueGenericSend+0xd6>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	b672      	cpsid	i
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	b662      	cpsie	i
 8006ed2:	61fb      	str	r3, [r7, #28]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eda:	f002 f857 	bl	8008f8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d302      	bcc.n	8006ef0 <xQueueGenericSend+0xec>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d129      	bne.n	8006f44 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ef6:	f000 fa1b 	bl	8007330 <prvCopyDataToQueue>
 8006efa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	3324      	adds	r3, #36	@ 0x24
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 f829 	bl	8007f60 <xTaskRemoveFromEventList>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d013      	beq.n	8006f3c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f14:	4b3f      	ldr	r3, [pc, #252]	@ (8007014 <xQueueGenericSend+0x210>)
 8006f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	e00a      	b.n	8006f3c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f2c:	4b39      	ldr	r3, [pc, #228]	@ (8007014 <xQueueGenericSend+0x210>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f3c:	f002 f85c 	bl	8008ff8 <vPortExitCritical>
				return pdPASS;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e063      	b.n	800700c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f4a:	f002 f855 	bl	8008ff8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e05c      	b.n	800700c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d106      	bne.n	8006f66 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f58:	f107 0314 	add.w	r3, r7, #20
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 f865 	bl	800802c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f66:	f002 f847 	bl	8008ff8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f6a:	f000 fdc1 	bl	8007af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f6e:	f002 f80d 	bl	8008f8c <vPortEnterCritical>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d103      	bne.n	8006f88 <xQueueGenericSend+0x184>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f8e:	b25b      	sxtb	r3, r3
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d103      	bne.n	8006f9e <xQueueGenericSend+0x19a>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f9e:	f002 f82b 	bl	8008ff8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fa2:	1d3a      	adds	r2, r7, #4
 8006fa4:	f107 0314 	add.w	r3, r7, #20
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 f854 	bl	8008058 <xTaskCheckForTimeOut>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d124      	bne.n	8007000 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fb8:	f000 fab2 	bl	8007520 <prvIsQueueFull>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d018      	beq.n	8006ff4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 ff72 	bl	8007eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fd2:	f000 fa3d 	bl	8007450 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fd6:	f000 fd99 	bl	8007b0c <xTaskResumeAll>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f47f af7c 	bne.w	8006eda <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <xQueueGenericSend+0x210>)
 8006fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	e772      	b.n	8006eda <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ff6:	f000 fa2b 	bl	8007450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ffa:	f000 fd87 	bl	8007b0c <xTaskResumeAll>
 8006ffe:	e76c      	b.n	8006eda <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007002:	f000 fa25 	bl	8007450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007006:	f000 fd81 	bl	8007b0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800700a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800700c:	4618      	mov	r0, r3
 800700e:	3738      	adds	r7, #56	@ 0x38
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	e000ed04 	.word	0xe000ed04

08007018 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08e      	sub	sp, #56	@ 0x38
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10d      	bne.n	800704c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	b672      	cpsid	i
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	b662      	cpsie	i
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	e7fd      	b.n	8007048 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <xQueueGenericSendFromISR+0x42>
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <xQueueGenericSendFromISR+0x46>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <xQueueGenericSendFromISR+0x48>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10d      	bne.n	8007080 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	b672      	cpsid	i
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	b662      	cpsie	i
 8007078:	623b      	str	r3, [r7, #32]
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d103      	bne.n	800708e <xQueueGenericSendFromISR+0x76>
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <xQueueGenericSendFromISR+0x7a>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xQueueGenericSendFromISR+0x7c>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10d      	bne.n	80070b4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709c:	b672      	cpsid	i
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	b662      	cpsie	i
 80070ac:	61fb      	str	r3, [r7, #28]
}
 80070ae:	bf00      	nop
 80070b0:	bf00      	nop
 80070b2:	e7fd      	b.n	80070b0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070b4:	f002 f852 	bl	800915c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070b8:	f3ef 8211 	mrs	r2, BASEPRI
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	b672      	cpsid	i
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	b662      	cpsie	i
 80070d0:	61ba      	str	r2, [r7, #24]
 80070d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <xQueueGenericSendFromISR+0xd2>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d12c      	bne.n	8007144 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070fa:	f000 f919 	bl	8007330 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d112      	bne.n	800712e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	2b00      	cmp	r3, #0
 800710e:	d016      	beq.n	800713e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007112:	3324      	adds	r3, #36	@ 0x24
 8007114:	4618      	mov	r0, r3
 8007116:	f000 ff23 	bl	8007f60 <xTaskRemoveFromEventList>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00e      	beq.n	800713e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	e007      	b.n	800713e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800712e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007132:	3301      	adds	r3, #1
 8007134:	b2db      	uxtb	r3, r3
 8007136:	b25a      	sxtb	r2, r3
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800713e:	2301      	movs	r3, #1
 8007140:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007142:	e001      	b.n	8007148 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007144:	2300      	movs	r3, #0
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
 8007148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007152:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007156:	4618      	mov	r0, r3
 8007158:	3738      	adds	r7, #56	@ 0x38
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08c      	sub	sp, #48	@ 0x30
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800716c:	2300      	movs	r3, #0
 800716e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10d      	bne.n	8007196 <xQueueReceive+0x36>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717e:	b672      	cpsid	i
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	b662      	cpsie	i
 800718e:	623b      	str	r3, [r7, #32]
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	e7fd      	b.n	8007192 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <xQueueReceive+0x44>
 800719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <xQueueReceive+0x48>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <xQueueReceive+0x4a>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10d      	bne.n	80071ca <xQueueReceive+0x6a>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	b672      	cpsid	i
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	b662      	cpsie	i
 80071c2:	61fb      	str	r3, [r7, #28]
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	e7fd      	b.n	80071c6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ca:	f001 f897 	bl	80082fc <xTaskGetSchedulerState>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <xQueueReceive+0x7a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <xQueueReceive+0x7e>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <xQueueReceive+0x80>
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <xQueueReceive+0xa0>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e8:	b672      	cpsid	i
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	b662      	cpsie	i
 80071f8:	61bb      	str	r3, [r7, #24]
}
 80071fa:	bf00      	nop
 80071fc:	bf00      	nop
 80071fe:	e7fd      	b.n	80071fc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007200:	f001 fec4 	bl	8008f8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01f      	beq.n	8007250 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007214:	f000 f8f6 	bl	8007404 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	1e5a      	subs	r2, r3, #1
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00f      	beq.n	8007248 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722a:	3310      	adds	r3, #16
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fe97 	bl	8007f60 <xTaskRemoveFromEventList>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007238:	4b3c      	ldr	r3, [pc, #240]	@ (800732c <xQueueReceive+0x1cc>)
 800723a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007248:	f001 fed6 	bl	8008ff8 <vPortExitCritical>
				return pdPASS;
 800724c:	2301      	movs	r3, #1
 800724e:	e069      	b.n	8007324 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007256:	f001 fecf 	bl	8008ff8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800725a:	2300      	movs	r3, #0
 800725c:	e062      	b.n	8007324 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800725e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d106      	bne.n	8007272 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007264:	f107 0310 	add.w	r3, r7, #16
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fedf 	bl	800802c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800726e:	2301      	movs	r3, #1
 8007270:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007272:	f001 fec1 	bl	8008ff8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007276:	f000 fc3b 	bl	8007af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800727a:	f001 fe87 	bl	8008f8c <vPortEnterCritical>
 800727e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007284:	b25b      	sxtb	r3, r3
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d103      	bne.n	8007294 <xQueueReceive+0x134>
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800729a:	b25b      	sxtb	r3, r3
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d103      	bne.n	80072aa <xQueueReceive+0x14a>
 80072a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072aa:	f001 fea5 	bl	8008ff8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072ae:	1d3a      	adds	r2, r7, #4
 80072b0:	f107 0310 	add.w	r3, r7, #16
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fece 	bl	8008058 <xTaskCheckForTimeOut>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d123      	bne.n	800730a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072c4:	f000 f916 	bl	80074f4 <prvIsQueueEmpty>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d017      	beq.n	80072fe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	3324      	adds	r3, #36	@ 0x24
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fdec 	bl	8007eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072de:	f000 f8b7 	bl	8007450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072e2:	f000 fc13 	bl	8007b0c <xTaskResumeAll>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d189      	bne.n	8007200 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80072ec:	4b0f      	ldr	r3, [pc, #60]	@ (800732c <xQueueReceive+0x1cc>)
 80072ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	e780      	b.n	8007200 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007300:	f000 f8a6 	bl	8007450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007304:	f000 fc02 	bl	8007b0c <xTaskResumeAll>
 8007308:	e77a      	b.n	8007200 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800730a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800730c:	f000 f8a0 	bl	8007450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007310:	f000 fbfc 	bl	8007b0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007316:	f000 f8ed 	bl	80074f4 <prvIsQueueEmpty>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	f43f af6f 	beq.w	8007200 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007322:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007324:	4618      	mov	r0, r3
 8007326:	3730      	adds	r7, #48	@ 0x30
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007344:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10d      	bne.n	800736a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d14d      	bne.n	80073f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 ffec 	bl	8008338 <xTaskPriorityDisinherit>
 8007360:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	e043      	b.n	80073f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d119      	bne.n	80073a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6858      	ldr	r0, [r3, #4]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007378:	461a      	mov	r2, r3
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	f002 f9aa 	bl	80096d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007388:	441a      	add	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	429a      	cmp	r2, r3
 8007398:	d32b      	bcc.n	80073f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	e026      	b.n	80073f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68d8      	ldr	r0, [r3, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ac:	461a      	mov	r2, r3
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	f002 f990 	bl	80096d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	425b      	negs	r3, r3
 80073be:	441a      	add	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d207      	bcs.n	80073e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d8:	425b      	negs	r3, r3
 80073da:	441a      	add	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d105      	bne.n	80073f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80073fa:	697b      	ldr	r3, [r7, #20]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d018      	beq.n	8007448 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741e:	441a      	add	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	429a      	cmp	r2, r3
 800742e:	d303      	bcc.n	8007438 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68d9      	ldr	r1, [r3, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007440:	461a      	mov	r2, r3
 8007442:	6838      	ldr	r0, [r7, #0]
 8007444:	f002 f946 	bl	80096d4 <memcpy>
	}
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007458:	f001 fd98 	bl	8008f8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007462:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007464:	e011      	b.n	800748a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d012      	beq.n	8007494 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3324      	adds	r3, #36	@ 0x24
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fd74 	bl	8007f60 <xTaskRemoveFromEventList>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800747e:	f000 fe53 	bl	8008128 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	3b01      	subs	r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800748a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dce9      	bgt.n	8007466 <prvUnlockQueue+0x16>
 8007492:	e000      	b.n	8007496 <prvUnlockQueue+0x46>
					break;
 8007494:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	22ff      	movs	r2, #255	@ 0xff
 800749a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800749e:	f001 fdab 	bl	8008ff8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074a2:	f001 fd73 	bl	8008f8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ae:	e011      	b.n	80074d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d012      	beq.n	80074de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3310      	adds	r3, #16
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fd4f 	bl	8007f60 <xTaskRemoveFromEventList>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074c8:	f000 fe2e 	bl	8008128 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	dce9      	bgt.n	80074b0 <prvUnlockQueue+0x60>
 80074dc:	e000      	b.n	80074e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	22ff      	movs	r2, #255	@ 0xff
 80074e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80074e8:	f001 fd86 	bl	8008ff8 <vPortExitCritical>
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074fc:	f001 fd46 	bl	8008f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e001      	b.n	8007512 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007512:	f001 fd71 	bl	8008ff8 <vPortExitCritical>

	return xReturn;
 8007516:	68fb      	ldr	r3, [r7, #12]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007528:	f001 fd30 	bl	8008f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007534:	429a      	cmp	r2, r3
 8007536:	d102      	bne.n	800753e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e001      	b.n	8007542 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007542:	f001 fd59 	bl	8008ff8 <vPortExitCritical>

	return xReturn;
 8007546:	68fb      	ldr	r3, [r7, #12]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e014      	b.n	800758a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007560:	4a0f      	ldr	r2, [pc, #60]	@ (80075a0 <vQueueAddToRegistry+0x50>)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10b      	bne.n	8007584 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800756c:	490c      	ldr	r1, [pc, #48]	@ (80075a0 <vQueueAddToRegistry+0x50>)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007576:	4a0a      	ldr	r2, [pc, #40]	@ (80075a0 <vQueueAddToRegistry+0x50>)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	4413      	add	r3, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007582:	e006      	b.n	8007592 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3301      	adds	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b07      	cmp	r3, #7
 800758e:	d9e7      	bls.n	8007560 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20001be8 	.word	0x20001be8

080075a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075b4:	f001 fcea 	bl	8008f8c <vPortEnterCritical>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c4:	d103      	bne.n	80075ce <vQueueWaitForMessageRestricted+0x2a>
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075d4:	b25b      	sxtb	r3, r3
 80075d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075da:	d103      	bne.n	80075e4 <vQueueWaitForMessageRestricted+0x40>
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075e4:	f001 fd08 	bl	8008ff8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	3324      	adds	r3, #36	@ 0x24
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fc83 	bl	8007f04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075fe:	6978      	ldr	r0, [r7, #20]
 8007600:	f7ff ff26 	bl	8007450 <prvUnlockQueue>
	}
 8007604:	bf00      	nop
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08e      	sub	sp, #56	@ 0x38
 8007610:	af04      	add	r7, sp, #16
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800761a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10d      	bne.n	800763c <xTaskCreateStatic+0x30>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007624:	b672      	cpsid	i
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	b662      	cpsie	i
 8007634:	623b      	str	r3, [r7, #32]
}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	e7fd      	b.n	8007638 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10d      	bne.n	800765e <xTaskCreateStatic+0x52>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	b672      	cpsid	i
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	b662      	cpsie	i
 8007656:	61fb      	str	r3, [r7, #28]
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	e7fd      	b.n	800765a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800765e:	23a8      	movs	r3, #168	@ 0xa8
 8007660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	2ba8      	cmp	r3, #168	@ 0xa8
 8007666:	d00d      	beq.n	8007684 <xTaskCreateStatic+0x78>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766c:	b672      	cpsid	i
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	b662      	cpsie	i
 800767c:	61bb      	str	r3, [r7, #24]
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	e7fd      	b.n	8007680 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007684:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01e      	beq.n	80076ca <xTaskCreateStatic+0xbe>
 800768c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01b      	beq.n	80076ca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800769a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076a4:	2300      	movs	r3, #0
 80076a6:	9303      	str	r3, [sp, #12]
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	9302      	str	r3, [sp, #8]
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f851 	bl	8007764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076c4:	f000 f8f8 	bl	80078b8 <prvAddNewTaskToReadyList>
 80076c8:	e001      	b.n	80076ce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076ce:	697b      	ldr	r3, [r7, #20]
	}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3728      	adds	r7, #40	@ 0x28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08c      	sub	sp, #48	@ 0x30
 80076dc:	af04      	add	r7, sp, #16
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 fd7b 	bl	80091e8 <pvPortMalloc>
 80076f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076fa:	20a8      	movs	r0, #168	@ 0xa8
 80076fc:	f001 fd74 	bl	80091e8 <pvPortMalloc>
 8007700:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	631a      	str	r2, [r3, #48]	@ 0x30
 800770e:	e005      	b.n	800771c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007710:	6978      	ldr	r0, [r7, #20]
 8007712:	f001 fe37 	bl	8009384 <vPortFree>
 8007716:	e001      	b.n	800771c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d017      	beq.n	8007752 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800772a:	88fa      	ldrh	r2, [r7, #6]
 800772c:	2300      	movs	r3, #0
 800772e:	9303      	str	r3, [sp, #12]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	9302      	str	r3, [sp, #8]
 8007734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f80f 	bl	8007764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007746:	69f8      	ldr	r0, [r7, #28]
 8007748:	f000 f8b6 	bl	80078b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800774c:	2301      	movs	r3, #1
 800774e:	61bb      	str	r3, [r7, #24]
 8007750:	e002      	b.n	8007758 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007752:	f04f 33ff 	mov.w	r3, #4294967295
 8007756:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007758:	69bb      	ldr	r3, [r7, #24]
	}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	461a      	mov	r2, r3
 800777c:	21a5      	movs	r1, #165	@ 0xa5
 800777e:	f001 ff1d 	bl	80095bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800778c:	440b      	add	r3, r1
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f023 0307 	bic.w	r3, r3, #7
 800779a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077aa:	b672      	cpsid	i
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	b662      	cpsie	i
 80077ba:	617b      	str	r3, [r7, #20]
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	e7fd      	b.n	80077be <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01f      	beq.n	8007808 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	e012      	b.n	80077f4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	7819      	ldrb	r1, [r3, #0]
 80077d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	3334      	adds	r3, #52	@ 0x34
 80077de:	460a      	mov	r2, r1
 80077e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	4413      	add	r3, r2
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d006      	beq.n	80077fc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	3301      	adds	r3, #1
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	2b0f      	cmp	r3, #15
 80077f8:	d9e9      	bls.n	80077ce <prvInitialiseNewTask+0x6a>
 80077fa:	e000      	b.n	80077fe <prvInitialiseNewTask+0x9a>
			{
				break;
 80077fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007806:	e003      	b.n	8007810 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	2b37      	cmp	r3, #55	@ 0x37
 8007814:	d901      	bls.n	800781a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007816:	2337      	movs	r3, #55	@ 0x37
 8007818:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800781e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007824:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	2200      	movs	r2, #0
 800782a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff f93d 	bl	8006ab0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	3318      	adds	r3, #24
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff f938 	bl	8006ab0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007844:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007854:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	2200      	movs	r2, #0
 8007862:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	3354      	adds	r3, #84	@ 0x54
 800786a:	224c      	movs	r2, #76	@ 0x4c
 800786c:	2100      	movs	r1, #0
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fea4 	bl	80095bc <memset>
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	4a0d      	ldr	r2, [pc, #52]	@ (80078ac <prvInitialiseNewTask+0x148>)
 8007878:	659a      	str	r2, [r3, #88]	@ 0x58
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	4a0c      	ldr	r2, [pc, #48]	@ (80078b0 <prvInitialiseNewTask+0x14c>)
 800787e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	4a0c      	ldr	r2, [pc, #48]	@ (80078b4 <prvInitialiseNewTask+0x150>)
 8007884:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	69b8      	ldr	r0, [r7, #24]
 800788c:	f001 fa72 	bl	8008d74 <pxPortInitialiseStack>
 8007890:	4602      	mov	r2, r0
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a2:	bf00      	nop
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20005e74 	.word	0x20005e74
 80078b0:	20005edc 	.word	0x20005edc
 80078b4:	20005f44 	.word	0x20005f44

080078b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078c0:	f001 fb64 	bl	8008f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078c4:	4b2d      	ldr	r3, [pc, #180]	@ (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	4a2c      	ldr	r2, [pc, #176]	@ (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078dc:	4b27      	ldr	r3, [pc, #156]	@ (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d110      	bne.n	8007906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078e4:	f000 fc44 	bl	8008170 <prvInitialiseTaskLists>
 80078e8:	e00d      	b.n	8007906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ea:	4b26      	ldr	r3, [pc, #152]	@ (8007984 <prvAddNewTaskToReadyList+0xcc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078f2:	4b23      	ldr	r3, [pc, #140]	@ (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d802      	bhi.n	8007906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007900:	4a1f      	ldr	r2, [pc, #124]	@ (8007980 <prvAddNewTaskToReadyList+0xc8>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007906:	4b20      	ldr	r3, [pc, #128]	@ (8007988 <prvAddNewTaskToReadyList+0xd0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3301      	adds	r3, #1
 800790c:	4a1e      	ldr	r2, [pc, #120]	@ (8007988 <prvAddNewTaskToReadyList+0xd0>)
 800790e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007910:	4b1d      	ldr	r3, [pc, #116]	@ (8007988 <prvAddNewTaskToReadyList+0xd0>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791c:	4b1b      	ldr	r3, [pc, #108]	@ (800798c <prvAddNewTaskToReadyList+0xd4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d903      	bls.n	800792c <prvAddNewTaskToReadyList+0x74>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	4a18      	ldr	r2, [pc, #96]	@ (800798c <prvAddNewTaskToReadyList+0xd4>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4a15      	ldr	r2, [pc, #84]	@ (8007990 <prvAddNewTaskToReadyList+0xd8>)
 800793a:	441a      	add	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7ff f8c1 	bl	8006aca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007948:	f001 fb56 	bl	8008ff8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800794c:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <prvAddNewTaskToReadyList+0xcc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007954:	4b0a      	ldr	r3, [pc, #40]	@ (8007980 <prvAddNewTaskToReadyList+0xc8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	429a      	cmp	r2, r3
 8007960:	d207      	bcs.n	8007972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007962:	4b0c      	ldr	r3, [pc, #48]	@ (8007994 <prvAddNewTaskToReadyList+0xdc>)
 8007964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200020fc 	.word	0x200020fc
 8007980:	20001c28 	.word	0x20001c28
 8007984:	20002108 	.word	0x20002108
 8007988:	20002118 	.word	0x20002118
 800798c:	20002104 	.word	0x20002104
 8007990:	20001c2c 	.word	0x20001c2c
 8007994:	e000ed04 	.word	0xe000ed04

08007998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d01a      	beq.n	80079e0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079aa:	4b15      	ldr	r3, [pc, #84]	@ (8007a00 <vTaskDelay+0x68>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00d      	beq.n	80079ce <vTaskDelay+0x36>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	60bb      	str	r3, [r7, #8]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <vTaskDelay+0x32>
			vTaskSuspendAll();
 80079ce:	f000 f88f 	bl	8007af0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fe11 	bl	80085fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079da:	f000 f897 	bl	8007b0c <xTaskResumeAll>
 80079de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d107      	bne.n	80079f6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80079e6:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <vTaskDelay+0x6c>)
 80079e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20002124 	.word	0x20002124
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	@ 0x28
 8007a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a16:	463a      	mov	r2, r7
 8007a18:	1d39      	adds	r1, r7, #4
 8007a1a:	f107 0308 	add.w	r3, r7, #8
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe fff2 	bl	8006a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	9202      	str	r2, [sp, #8]
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	460a      	mov	r2, r1
 8007a36:	4926      	ldr	r1, [pc, #152]	@ (8007ad0 <vTaskStartScheduler+0xc8>)
 8007a38:	4826      	ldr	r0, [pc, #152]	@ (8007ad4 <vTaskStartScheduler+0xcc>)
 8007a3a:	f7ff fde7 	bl	800760c <xTaskCreateStatic>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4a25      	ldr	r2, [pc, #148]	@ (8007ad8 <vTaskStartScheduler+0xd0>)
 8007a42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a44:	4b24      	ldr	r3, [pc, #144]	@ (8007ad8 <vTaskStartScheduler+0xd0>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	e001      	b.n	8007a56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d102      	bne.n	8007a62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a5c:	f000 fe22 	bl	80086a4 <xTimerCreateTimerTask>
 8007a60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d11d      	bne.n	8007aa4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6c:	b672      	cpsid	i
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	b662      	cpsie	i
 8007a7c:	613b      	str	r3, [r7, #16]
}
 8007a7e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a80:	4b16      	ldr	r3, [pc, #88]	@ (8007adc <vTaskStartScheduler+0xd4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3354      	adds	r3, #84	@ 0x54
 8007a86:	4a16      	ldr	r2, [pc, #88]	@ (8007ae0 <vTaskStartScheduler+0xd8>)
 8007a88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a8a:	4b16      	ldr	r3, [pc, #88]	@ (8007ae4 <vTaskStartScheduler+0xdc>)
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a92:	4b15      	ldr	r3, [pc, #84]	@ (8007ae8 <vTaskStartScheduler+0xe0>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a98:	4b14      	ldr	r3, [pc, #80]	@ (8007aec <vTaskStartScheduler+0xe4>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a9e:	f001 f9f7 	bl	8008e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007aa2:	e011      	b.n	8007ac8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d10d      	bne.n	8007ac8 <vTaskStartScheduler+0xc0>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	b672      	cpsid	i
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	b662      	cpsie	i
 8007ac0:	60fb      	str	r3, [r7, #12]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <vTaskStartScheduler+0xbc>
}
 8007ac8:	bf00      	nop
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	08009840 	.word	0x08009840
 8007ad4:	08008141 	.word	0x08008141
 8007ad8:	20002120 	.word	0x20002120
 8007adc:	20001c28 	.word	0x20001c28
 8007ae0:	20000010 	.word	0x20000010
 8007ae4:	2000211c 	.word	0x2000211c
 8007ae8:	20002108 	.word	0x20002108
 8007aec:	20002100 	.word	0x20002100

08007af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007af4:	4b04      	ldr	r3, [pc, #16]	@ (8007b08 <vTaskSuspendAll+0x18>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	4a03      	ldr	r2, [pc, #12]	@ (8007b08 <vTaskSuspendAll+0x18>)
 8007afc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007afe:	bf00      	nop
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	20002124 	.word	0x20002124

08007b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b1a:	4b43      	ldr	r3, [pc, #268]	@ (8007c28 <xTaskResumeAll+0x11c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10d      	bne.n	8007b3e <xTaskResumeAll+0x32>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b26:	b672      	cpsid	i
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	b662      	cpsie	i
 8007b36:	603b      	str	r3, [r7, #0]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b3e:	f001 fa25 	bl	8008f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b42:	4b39      	ldr	r3, [pc, #228]	@ (8007c28 <xTaskResumeAll+0x11c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	4a37      	ldr	r2, [pc, #220]	@ (8007c28 <xTaskResumeAll+0x11c>)
 8007b4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b4c:	4b36      	ldr	r3, [pc, #216]	@ (8007c28 <xTaskResumeAll+0x11c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d162      	bne.n	8007c1a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b54:	4b35      	ldr	r3, [pc, #212]	@ (8007c2c <xTaskResumeAll+0x120>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d05e      	beq.n	8007c1a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b5c:	e02f      	b.n	8007bbe <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b5e:	4b34      	ldr	r3, [pc, #208]	@ (8007c30 <xTaskResumeAll+0x124>)
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3318      	adds	r3, #24
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff f80a 	bl	8006b84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff f805 	bl	8006b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8007c34 <xTaskResumeAll+0x128>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d903      	bls.n	8007b8e <xTaskResumeAll+0x82>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8007c34 <xTaskResumeAll+0x128>)
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4a27      	ldr	r2, [pc, #156]	@ (8007c38 <xTaskResumeAll+0x12c>)
 8007b9c:	441a      	add	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	f7fe ff90 	bl	8006aca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bae:	4b23      	ldr	r3, [pc, #140]	@ (8007c3c <xTaskResumeAll+0x130>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d302      	bcc.n	8007bbe <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007bb8:	4b21      	ldr	r3, [pc, #132]	@ (8007c40 <xTaskResumeAll+0x134>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007c30 <xTaskResumeAll+0x124>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1cb      	bne.n	8007b5e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bcc:	f000 fb76 	bl	80082bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c44 <xTaskResumeAll+0x138>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d010      	beq.n	8007bfe <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bdc:	f000 f846 	bl	8007c6c <xTaskIncrementTick>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007be6:	4b16      	ldr	r3, [pc, #88]	@ (8007c40 <xTaskResumeAll+0x134>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f1      	bne.n	8007bdc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007bf8:	4b12      	ldr	r3, [pc, #72]	@ (8007c44 <xTaskResumeAll+0x138>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bfe:	4b10      	ldr	r3, [pc, #64]	@ (8007c40 <xTaskResumeAll+0x134>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d009      	beq.n	8007c1a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c06:	2301      	movs	r3, #1
 8007c08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c48 <xTaskResumeAll+0x13c>)
 8007c0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c1a:	f001 f9ed 	bl	8008ff8 <vPortExitCritical>

	return xAlreadyYielded;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20002124 	.word	0x20002124
 8007c2c:	200020fc 	.word	0x200020fc
 8007c30:	200020bc 	.word	0x200020bc
 8007c34:	20002104 	.word	0x20002104
 8007c38:	20001c2c 	.word	0x20001c2c
 8007c3c:	20001c28 	.word	0x20001c28
 8007c40:	20002110 	.word	0x20002110
 8007c44:	2000210c 	.word	0x2000210c
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c52:	4b05      	ldr	r3, [pc, #20]	@ (8007c68 <xTaskGetTickCount+0x1c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c58:	687b      	ldr	r3, [r7, #4]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	20002100 	.word	0x20002100

08007c6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c76:	4b50      	ldr	r3, [pc, #320]	@ (8007db8 <xTaskIncrementTick+0x14c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f040 808c 	bne.w	8007d98 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c80:	4b4e      	ldr	r3, [pc, #312]	@ (8007dbc <xTaskIncrementTick+0x150>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3301      	adds	r3, #1
 8007c86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c88:	4a4c      	ldr	r2, [pc, #304]	@ (8007dbc <xTaskIncrementTick+0x150>)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d123      	bne.n	8007cdc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c94:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc0 <xTaskIncrementTick+0x154>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00d      	beq.n	8007cba <xTaskIncrementTick+0x4e>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca2:	b672      	cpsid	i
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	b662      	cpsie	i
 8007cb2:	603b      	str	r3, [r7, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	e7fd      	b.n	8007cb6 <xTaskIncrementTick+0x4a>
 8007cba:	4b41      	ldr	r3, [pc, #260]	@ (8007dc0 <xTaskIncrementTick+0x154>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	4b40      	ldr	r3, [pc, #256]	@ (8007dc4 <xTaskIncrementTick+0x158>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8007dc0 <xTaskIncrementTick+0x154>)
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8007dc4 <xTaskIncrementTick+0x158>)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	4b3e      	ldr	r3, [pc, #248]	@ (8007dc8 <xTaskIncrementTick+0x15c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8007dc8 <xTaskIncrementTick+0x15c>)
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	f000 faf0 	bl	80082bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8007dcc <xTaskIncrementTick+0x160>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d349      	bcc.n	8007d7a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ce6:	4b36      	ldr	r3, [pc, #216]	@ (8007dc0 <xTaskIncrementTick+0x154>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf0:	4b36      	ldr	r3, [pc, #216]	@ (8007dcc <xTaskIncrementTick+0x160>)
 8007cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf6:	601a      	str	r2, [r3, #0]
					break;
 8007cf8:	e03f      	b.n	8007d7a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cfa:	4b31      	ldr	r3, [pc, #196]	@ (8007dc0 <xTaskIncrementTick+0x154>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d203      	bcs.n	8007d1a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d12:	4a2e      	ldr	r2, [pc, #184]	@ (8007dcc <xTaskIncrementTick+0x160>)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d18:	e02f      	b.n	8007d7a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe ff30 	bl	8006b84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d004      	beq.n	8007d36 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3318      	adds	r3, #24
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe ff27 	bl	8006b84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d3a:	4b25      	ldr	r3, [pc, #148]	@ (8007dd0 <xTaskIncrementTick+0x164>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d903      	bls.n	8007d4a <xTaskIncrementTick+0xde>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d46:	4a22      	ldr	r2, [pc, #136]	@ (8007dd0 <xTaskIncrementTick+0x164>)
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd4 <xTaskIncrementTick+0x168>)
 8007d58:	441a      	add	r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4610      	mov	r0, r2
 8007d62:	f7fe feb2 	bl	8006aca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd8 <xTaskIncrementTick+0x16c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d3b8      	bcc.n	8007ce6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d78:	e7b5      	b.n	8007ce6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d7a:	4b17      	ldr	r3, [pc, #92]	@ (8007dd8 <xTaskIncrementTick+0x16c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d80:	4914      	ldr	r1, [pc, #80]	@ (8007dd4 <xTaskIncrementTick+0x168>)
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d907      	bls.n	8007da2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e004      	b.n	8007da2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d98:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <xTaskIncrementTick+0x170>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8007ddc <xTaskIncrementTick+0x170>)
 8007da0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007da2:	4b0f      	ldr	r3, [pc, #60]	@ (8007de0 <xTaskIncrementTick+0x174>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007dae:	697b      	ldr	r3, [r7, #20]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20002124 	.word	0x20002124
 8007dbc:	20002100 	.word	0x20002100
 8007dc0:	200020b4 	.word	0x200020b4
 8007dc4:	200020b8 	.word	0x200020b8
 8007dc8:	20002114 	.word	0x20002114
 8007dcc:	2000211c 	.word	0x2000211c
 8007dd0:	20002104 	.word	0x20002104
 8007dd4:	20001c2c 	.word	0x20001c2c
 8007dd8:	20001c28 	.word	0x20001c28
 8007ddc:	2000210c 	.word	0x2000210c
 8007de0:	20002110 	.word	0x20002110

08007de4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dea:	4b2c      	ldr	r3, [pc, #176]	@ (8007e9c <vTaskSwitchContext+0xb8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007df2:	4b2b      	ldr	r3, [pc, #172]	@ (8007ea0 <vTaskSwitchContext+0xbc>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007df8:	e049      	b.n	8007e8e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007dfa:	4b29      	ldr	r3, [pc, #164]	@ (8007ea0 <vTaskSwitchContext+0xbc>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e00:	4b28      	ldr	r3, [pc, #160]	@ (8007ea4 <vTaskSwitchContext+0xc0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	e013      	b.n	8007e30 <vTaskSwitchContext+0x4c>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10d      	bne.n	8007e2a <vTaskSwitchContext+0x46>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	b672      	cpsid	i
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	b662      	cpsie	i
 8007e22:	607b      	str	r3, [r7, #4]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <vTaskSwitchContext+0x42>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	491d      	ldr	r1, [pc, #116]	@ (8007ea8 <vTaskSwitchContext+0xc4>)
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0e1      	beq.n	8007e08 <vTaskSwitchContext+0x24>
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ea8 <vTaskSwitchContext+0xc4>)
 8007e50:	4413      	add	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	605a      	str	r2, [r3, #4]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3308      	adds	r3, #8
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d104      	bne.n	8007e74 <vTaskSwitchContext+0x90>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	605a      	str	r2, [r3, #4]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007eac <vTaskSwitchContext+0xc8>)
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	4a09      	ldr	r2, [pc, #36]	@ (8007ea4 <vTaskSwitchContext+0xc0>)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e84:	4b09      	ldr	r3, [pc, #36]	@ (8007eac <vTaskSwitchContext+0xc8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3354      	adds	r3, #84	@ 0x54
 8007e8a:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <vTaskSwitchContext+0xcc>)
 8007e8c:	6013      	str	r3, [r2, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	20002124 	.word	0x20002124
 8007ea0:	20002110 	.word	0x20002110
 8007ea4:	20002104 	.word	0x20002104
 8007ea8:	20001c2c 	.word	0x20001c2c
 8007eac:	20001c28 	.word	0x20001c28
 8007eb0:	20000010 	.word	0x20000010

08007eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10d      	bne.n	8007ee0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec8:	b672      	cpsid	i
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	b662      	cpsie	i
 8007ed8:	60fb      	str	r3, [r7, #12]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ee0:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <vTaskPlaceOnEventList+0x4c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3318      	adds	r3, #24
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7fe fe12 	bl	8006b12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eee:	2101      	movs	r1, #1
 8007ef0:	6838      	ldr	r0, [r7, #0]
 8007ef2:	f000 fb83 	bl	80085fc <prvAddCurrentTaskToDelayedList>
}
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20001c28 	.word	0x20001c28

08007f04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	b672      	cpsid	i
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	b662      	cpsie	i
 8007f2a:	617b      	str	r3, [r7, #20]
}
 8007f2c:	bf00      	nop
 8007f2e:	bf00      	nop
 8007f30:	e7fd      	b.n	8007f2e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f32:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <vTaskPlaceOnEventListRestricted+0x58>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4619      	mov	r1, r3
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7fe fdc5 	bl	8006aca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007f46:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	68b8      	ldr	r0, [r7, #8]
 8007f50:	f000 fb54 	bl	80085fc <prvAddCurrentTaskToDelayedList>
	}
 8007f54:	bf00      	nop
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20001c28 	.word	0x20001c28

08007f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10d      	bne.n	8007f92 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	b672      	cpsid	i
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	b662      	cpsie	i
 8007f8a:	60fb      	str	r3, [r7, #12]
}
 8007f8c:	bf00      	nop
 8007f8e:	bf00      	nop
 8007f90:	e7fd      	b.n	8007f8e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3318      	adds	r3, #24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fdf4 	bl	8006b84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8008014 <xTaskRemoveFromEventList+0xb4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d11d      	bne.n	8007fe0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fdeb 	bl	8006b84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb2:	4b19      	ldr	r3, [pc, #100]	@ (8008018 <xTaskRemoveFromEventList+0xb8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d903      	bls.n	8007fc2 <xTaskRemoveFromEventList+0x62>
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbe:	4a16      	ldr	r2, [pc, #88]	@ (8008018 <xTaskRemoveFromEventList+0xb8>)
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4a13      	ldr	r2, [pc, #76]	@ (800801c <xTaskRemoveFromEventList+0xbc>)
 8007fd0:	441a      	add	r2, r3
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f7fe fd76 	bl	8006aca <vListInsertEnd>
 8007fde:	e005      	b.n	8007fec <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3318      	adds	r3, #24
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	480e      	ldr	r0, [pc, #56]	@ (8008020 <xTaskRemoveFromEventList+0xc0>)
 8007fe8:	f7fe fd6f 	bl	8006aca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8008024 <xTaskRemoveFromEventList+0xc4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d905      	bls.n	8008006 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8008028 <xTaskRemoveFromEventList+0xc8>)
 8008000:	2201      	movs	r2, #1
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e001      	b.n	800800a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800800a:	697b      	ldr	r3, [r7, #20]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	20002124 	.word	0x20002124
 8008018:	20002104 	.word	0x20002104
 800801c:	20001c2c 	.word	0x20001c2c
 8008020:	200020bc 	.word	0x200020bc
 8008024:	20001c28 	.word	0x20001c28
 8008028:	20002110 	.word	0x20002110

0800802c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008034:	4b06      	ldr	r3, [pc, #24]	@ (8008050 <vTaskInternalSetTimeOutState+0x24>)
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800803c:	4b05      	ldr	r3, [pc, #20]	@ (8008054 <vTaskInternalSetTimeOutState+0x28>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	605a      	str	r2, [r3, #4]
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	20002114 	.word	0x20002114
 8008054:	20002100 	.word	0x20002100

08008058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	b672      	cpsid	i
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	b662      	cpsie	i
 800807c:	613b      	str	r3, [r7, #16]
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10d      	bne.n	80080a6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808e:	b672      	cpsid	i
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	b662      	cpsie	i
 800809e:	60fb      	str	r3, [r7, #12]
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	e7fd      	b.n	80080a2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80080a6:	f000 ff71 	bl	8008f8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008120 <xTaskCheckForTimeOut+0xc8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d102      	bne.n	80080ca <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61fb      	str	r3, [r7, #28]
 80080c8:	e023      	b.n	8008112 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	4b15      	ldr	r3, [pc, #84]	@ (8008124 <xTaskCheckForTimeOut+0xcc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d007      	beq.n	80080e6 <xTaskCheckForTimeOut+0x8e>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d302      	bcc.n	80080e6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	61fb      	str	r3, [r7, #28]
 80080e4:	e015      	b.n	8008112 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d20b      	bcs.n	8008108 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff ff95 	bl	800802c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008102:	2300      	movs	r3, #0
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	e004      	b.n	8008112 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800810e:	2301      	movs	r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008112:	f000 ff71 	bl	8008ff8 <vPortExitCritical>

	return xReturn;
 8008116:	69fb      	ldr	r3, [r7, #28]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3720      	adds	r7, #32
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20002100 	.word	0x20002100
 8008124:	20002114 	.word	0x20002114

08008128 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800812c:	4b03      	ldr	r3, [pc, #12]	@ (800813c <vTaskMissedYield+0x14>)
 800812e:	2201      	movs	r2, #1
 8008130:	601a      	str	r2, [r3, #0]
}
 8008132:	bf00      	nop
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	20002110 	.word	0x20002110

08008140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008148:	f000 f852 	bl	80081f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800814c:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <prvIdleTask+0x28>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d9f9      	bls.n	8008148 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008154:	4b05      	ldr	r3, [pc, #20]	@ (800816c <prvIdleTask+0x2c>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008164:	e7f0      	b.n	8008148 <prvIdleTask+0x8>
 8008166:	bf00      	nop
 8008168:	20001c2c 	.word	0x20001c2c
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008176:	2300      	movs	r3, #0
 8008178:	607b      	str	r3, [r7, #4]
 800817a:	e00c      	b.n	8008196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4a12      	ldr	r2, [pc, #72]	@ (80081d0 <prvInitialiseTaskLists+0x60>)
 8008188:	4413      	add	r3, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fc70 	bl	8006a70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3301      	adds	r3, #1
 8008194:	607b      	str	r3, [r7, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b37      	cmp	r3, #55	@ 0x37
 800819a:	d9ef      	bls.n	800817c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800819c:	480d      	ldr	r0, [pc, #52]	@ (80081d4 <prvInitialiseTaskLists+0x64>)
 800819e:	f7fe fc67 	bl	8006a70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081a2:	480d      	ldr	r0, [pc, #52]	@ (80081d8 <prvInitialiseTaskLists+0x68>)
 80081a4:	f7fe fc64 	bl	8006a70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081a8:	480c      	ldr	r0, [pc, #48]	@ (80081dc <prvInitialiseTaskLists+0x6c>)
 80081aa:	f7fe fc61 	bl	8006a70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081ae:	480c      	ldr	r0, [pc, #48]	@ (80081e0 <prvInitialiseTaskLists+0x70>)
 80081b0:	f7fe fc5e 	bl	8006a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081b4:	480b      	ldr	r0, [pc, #44]	@ (80081e4 <prvInitialiseTaskLists+0x74>)
 80081b6:	f7fe fc5b 	bl	8006a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ba:	4b0b      	ldr	r3, [pc, #44]	@ (80081e8 <prvInitialiseTaskLists+0x78>)
 80081bc:	4a05      	ldr	r2, [pc, #20]	@ (80081d4 <prvInitialiseTaskLists+0x64>)
 80081be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081c0:	4b0a      	ldr	r3, [pc, #40]	@ (80081ec <prvInitialiseTaskLists+0x7c>)
 80081c2:	4a05      	ldr	r2, [pc, #20]	@ (80081d8 <prvInitialiseTaskLists+0x68>)
 80081c4:	601a      	str	r2, [r3, #0]
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20001c2c 	.word	0x20001c2c
 80081d4:	2000208c 	.word	0x2000208c
 80081d8:	200020a0 	.word	0x200020a0
 80081dc:	200020bc 	.word	0x200020bc
 80081e0:	200020d0 	.word	0x200020d0
 80081e4:	200020e8 	.word	0x200020e8
 80081e8:	200020b4 	.word	0x200020b4
 80081ec:	200020b8 	.word	0x200020b8

080081f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081f6:	e019      	b.n	800822c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081f8:	f000 fec8 	bl	8008f8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081fc:	4b10      	ldr	r3, [pc, #64]	@ (8008240 <prvCheckTasksWaitingTermination+0x50>)
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3304      	adds	r3, #4
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fcbb 	bl	8006b84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800820e:	4b0d      	ldr	r3, [pc, #52]	@ (8008244 <prvCheckTasksWaitingTermination+0x54>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3b01      	subs	r3, #1
 8008214:	4a0b      	ldr	r2, [pc, #44]	@ (8008244 <prvCheckTasksWaitingTermination+0x54>)
 8008216:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008218:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <prvCheckTasksWaitingTermination+0x58>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3b01      	subs	r3, #1
 800821e:	4a0a      	ldr	r2, [pc, #40]	@ (8008248 <prvCheckTasksWaitingTermination+0x58>)
 8008220:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008222:	f000 fee9 	bl	8008ff8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f810 	bl	800824c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800822c:	4b06      	ldr	r3, [pc, #24]	@ (8008248 <prvCheckTasksWaitingTermination+0x58>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e1      	bne.n	80081f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200020d0 	.word	0x200020d0
 8008244:	200020fc 	.word	0x200020fc
 8008248:	200020e4 	.word	0x200020e4

0800824c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3354      	adds	r3, #84	@ 0x54
 8008258:	4618      	mov	r0, r3
 800825a:	f001 f9b7 	bl	80095cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008264:	2b00      	cmp	r3, #0
 8008266:	d108      	bne.n	800827a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826c:	4618      	mov	r0, r3
 800826e:	f001 f889 	bl	8009384 <vPortFree>
				vPortFree( pxTCB );
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 f886 	bl	8009384 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008278:	e01b      	b.n	80082b2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008280:	2b01      	cmp	r3, #1
 8008282:	d103      	bne.n	800828c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f87d 	bl	8009384 <vPortFree>
	}
 800828a:	e012      	b.n	80082b2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008292:	2b02      	cmp	r3, #2
 8008294:	d00d      	beq.n	80082b2 <prvDeleteTCB+0x66>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	b672      	cpsid	i
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	b662      	cpsie	i
 80082aa:	60fb      	str	r3, [r7, #12]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <prvDeleteTCB+0x62>
	}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082c2:	4b0c      	ldr	r3, [pc, #48]	@ (80082f4 <prvResetNextTaskUnblockTime+0x38>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d104      	bne.n	80082d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <prvResetNextTaskUnblockTime+0x3c>)
 80082ce:	f04f 32ff 	mov.w	r2, #4294967295
 80082d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082d4:	e008      	b.n	80082e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d6:	4b07      	ldr	r3, [pc, #28]	@ (80082f4 <prvResetNextTaskUnblockTime+0x38>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	4a04      	ldr	r2, [pc, #16]	@ (80082f8 <prvResetNextTaskUnblockTime+0x3c>)
 80082e6:	6013      	str	r3, [r2, #0]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	200020b4 	.word	0x200020b4
 80082f8:	2000211c 	.word	0x2000211c

080082fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008302:	4b0b      	ldr	r3, [pc, #44]	@ (8008330 <xTaskGetSchedulerState+0x34>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d102      	bne.n	8008310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800830a:	2301      	movs	r3, #1
 800830c:	607b      	str	r3, [r7, #4]
 800830e:	e008      	b.n	8008322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008310:	4b08      	ldr	r3, [pc, #32]	@ (8008334 <xTaskGetSchedulerState+0x38>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008318:	2302      	movs	r3, #2
 800831a:	607b      	str	r3, [r7, #4]
 800831c:	e001      	b.n	8008322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800831e:	2300      	movs	r3, #0
 8008320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008322:	687b      	ldr	r3, [r7, #4]
	}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	20002108 	.word	0x20002108
 8008334:	20002124 	.word	0x20002124

08008338 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d05c      	beq.n	8008408 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800834e:	4b31      	ldr	r3, [pc, #196]	@ (8008414 <xTaskPriorityDisinherit+0xdc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	429a      	cmp	r2, r3
 8008356:	d00d      	beq.n	8008374 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	b672      	cpsid	i
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	b662      	cpsie	i
 800836c:	60fb      	str	r3, [r7, #12]
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10d      	bne.n	8008398 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008380:	b672      	cpsid	i
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	b662      	cpsie	i
 8008390:	60bb      	str	r3, [r7, #8]
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	e7fd      	b.n	8008394 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800839c:	1e5a      	subs	r2, r3, #1
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d02c      	beq.n	8008408 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d128      	bne.n	8008408 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fbe2 	bl	8006b84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008418 <xTaskPriorityDisinherit+0xe0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d903      	bls.n	80083e8 <xTaskPriorityDisinherit+0xb0>
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008418 <xTaskPriorityDisinherit+0xe0>)
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4a09      	ldr	r2, [pc, #36]	@ (800841c <xTaskPriorityDisinherit+0xe4>)
 80083f6:	441a      	add	r2, r3
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7fe fb63 	bl	8006aca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008404:	2301      	movs	r3, #1
 8008406:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008408:	697b      	ldr	r3, [r7, #20]
	}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20001c28 	.word	0x20001c28
 8008418:	20002104 	.word	0x20002104
 800841c:	20001c2c 	.word	0x20001c2c

08008420 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08e      	sub	sp, #56	@ 0x38
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	4613      	mov	r3, r2
 800842e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008430:	2301      	movs	r3, #1
 8008432:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10d      	bne.n	8008456 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843e:	b672      	cpsid	i
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	b662      	cpsie	i
 800844e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop
 8008454:	e7fd      	b.n	8008452 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008456:	f000 fe81 	bl	800915c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800845e:	f3ef 8211 	mrs	r2, BASEPRI
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	b672      	cpsid	i
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	b662      	cpsie	i
 8008476:	623a      	str	r2, [r7, #32]
 8008478:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800847a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800847c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	2202      	movs	r2, #2
 800849c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d82e      	bhi.n	8008504 <xTaskGenericNotifyFromISR+0xe4>
 80084a6:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <xTaskGenericNotifyFromISR+0x8c>)
 80084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ac:	0800852d 	.word	0x0800852d
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	080084d3 	.word	0x080084d3
 80084b8:	080084e3 	.word	0x080084e3
 80084bc:	080084ed 	.word	0x080084ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	431a      	orrs	r2, r3
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80084d0:	e02f      	b.n	8008532 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80084e0:	e027      	b.n	8008532 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80084ea:	e022      	b.n	8008532 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80084ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d004      	beq.n	80084fe <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80084f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80084fc:	e019      	b.n	8008532 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 80084fe:	2300      	movs	r3, #0
 8008500:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8008502:	e016      	b.n	8008532 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d00f      	beq.n	8008530 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	b672      	cpsid	i
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	b662      	cpsie	i
 8008524:	61bb      	str	r3, [r7, #24]
}
 8008526:	bf00      	nop
 8008528:	bf00      	nop
 800852a:	e7fd      	b.n	8008528 <xTaskGenericNotifyFromISR+0x108>
					break;
 800852c:	bf00      	nop
 800852e:	e000      	b.n	8008532 <xTaskGenericNotifyFromISR+0x112>
					break;
 8008530:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008532:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008536:	2b01      	cmp	r3, #1
 8008538:	d149      	bne.n	80085ce <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00d      	beq.n	800855e <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008546:	b672      	cpsid	i
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	b662      	cpsie	i
 8008556:	617b      	str	r3, [r7, #20]
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	e7fd      	b.n	800855a <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800855e:	4b21      	ldr	r3, [pc, #132]	@ (80085e4 <xTaskGenericNotifyFromISR+0x1c4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d11d      	bne.n	80085a2 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	3304      	adds	r3, #4
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fb0a 	bl	8006b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008574:	4b1c      	ldr	r3, [pc, #112]	@ (80085e8 <xTaskGenericNotifyFromISR+0x1c8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d903      	bls.n	8008584 <xTaskGenericNotifyFromISR+0x164>
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	4a19      	ldr	r2, [pc, #100]	@ (80085e8 <xTaskGenericNotifyFromISR+0x1c8>)
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a16      	ldr	r2, [pc, #88]	@ (80085ec <xTaskGenericNotifyFromISR+0x1cc>)
 8008592:	441a      	add	r2, r3
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	3304      	adds	r3, #4
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7fe fa95 	bl	8006aca <vListInsertEnd>
 80085a0:	e005      	b.n	80085ae <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	3318      	adds	r3, #24
 80085a6:	4619      	mov	r1, r3
 80085a8:	4811      	ldr	r0, [pc, #68]	@ (80085f0 <xTaskGenericNotifyFromISR+0x1d0>)
 80085aa:	f7fe fa8e 	bl	8006aca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b2:	4b10      	ldr	r3, [pc, #64]	@ (80085f4 <xTaskGenericNotifyFromISR+0x1d4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d908      	bls.n	80085ce <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80085bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80085c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085c4:	2201      	movs	r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80085c8:	4b0b      	ldr	r3, [pc, #44]	@ (80085f8 <xTaskGenericNotifyFromISR+0x1d8>)
 80085ca:	2201      	movs	r2, #1
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f383 8811 	msr	BASEPRI, r3
}
 80085d8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80085da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80085dc:	4618      	mov	r0, r3
 80085de:	3738      	adds	r7, #56	@ 0x38
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20002124 	.word	0x20002124
 80085e8:	20002104 	.word	0x20002104
 80085ec:	20001c2c 	.word	0x20001c2c
 80085f0:	200020bc 	.word	0x200020bc
 80085f4:	20001c28 	.word	0x20001c28
 80085f8:	20002110 	.word	0x20002110

080085fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008606:	4b21      	ldr	r3, [pc, #132]	@ (800868c <prvAddCurrentTaskToDelayedList+0x90>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800860c:	4b20      	ldr	r3, [pc, #128]	@ (8008690 <prvAddCurrentTaskToDelayedList+0x94>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3304      	adds	r3, #4
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fab6 	bl	8006b84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861e:	d10a      	bne.n	8008636 <prvAddCurrentTaskToDelayedList+0x3a>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008626:	4b1a      	ldr	r3, [pc, #104]	@ (8008690 <prvAddCurrentTaskToDelayedList+0x94>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3304      	adds	r3, #4
 800862c:	4619      	mov	r1, r3
 800862e:	4819      	ldr	r0, [pc, #100]	@ (8008694 <prvAddCurrentTaskToDelayedList+0x98>)
 8008630:	f7fe fa4b 	bl	8006aca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008634:	e026      	b.n	8008684 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4413      	add	r3, r2
 800863c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800863e:	4b14      	ldr	r3, [pc, #80]	@ (8008690 <prvAddCurrentTaskToDelayedList+0x94>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	429a      	cmp	r2, r3
 800864c:	d209      	bcs.n	8008662 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800864e:	4b12      	ldr	r3, [pc, #72]	@ (8008698 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b0f      	ldr	r3, [pc, #60]	@ (8008690 <prvAddCurrentTaskToDelayedList+0x94>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3304      	adds	r3, #4
 8008658:	4619      	mov	r1, r3
 800865a:	4610      	mov	r0, r2
 800865c:	f7fe fa59 	bl	8006b12 <vListInsert>
}
 8008660:	e010      	b.n	8008684 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008662:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	4b0a      	ldr	r3, [pc, #40]	@ (8008690 <prvAddCurrentTaskToDelayedList+0x94>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3304      	adds	r3, #4
 800866c:	4619      	mov	r1, r3
 800866e:	4610      	mov	r0, r2
 8008670:	f7fe fa4f 	bl	8006b12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008674:	4b0a      	ldr	r3, [pc, #40]	@ (80086a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	429a      	cmp	r2, r3
 800867c:	d202      	bcs.n	8008684 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800867e:	4a08      	ldr	r2, [pc, #32]	@ (80086a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	6013      	str	r3, [r2, #0]
}
 8008684:	bf00      	nop
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20002100 	.word	0x20002100
 8008690:	20001c28 	.word	0x20001c28
 8008694:	200020e8 	.word	0x200020e8
 8008698:	200020b8 	.word	0x200020b8
 800869c:	200020b4 	.word	0x200020b4
 80086a0:	2000211c 	.word	0x2000211c

080086a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	@ 0x28
 80086a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086ae:	f000 fb21 	bl	8008cf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086b2:	4b1e      	ldr	r3, [pc, #120]	@ (800872c <xTimerCreateTimerTask+0x88>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d021      	beq.n	80086fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80086c2:	1d3a      	adds	r2, r7, #4
 80086c4:	f107 0108 	add.w	r1, r7, #8
 80086c8:	f107 030c 	add.w	r3, r7, #12
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe f9b5 	bl	8006a3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	9202      	str	r2, [sp, #8]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	2302      	movs	r3, #2
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	2300      	movs	r3, #0
 80086e2:	460a      	mov	r2, r1
 80086e4:	4912      	ldr	r1, [pc, #72]	@ (8008730 <xTimerCreateTimerTask+0x8c>)
 80086e6:	4813      	ldr	r0, [pc, #76]	@ (8008734 <xTimerCreateTimerTask+0x90>)
 80086e8:	f7fe ff90 	bl	800760c <xTaskCreateStatic>
 80086ec:	4603      	mov	r3, r0
 80086ee:	4a12      	ldr	r2, [pc, #72]	@ (8008738 <xTimerCreateTimerTask+0x94>)
 80086f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086f2:	4b11      	ldr	r3, [pc, #68]	@ (8008738 <xTimerCreateTimerTask+0x94>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086fa:	2301      	movs	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10d      	bne.n	8008720 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008708:	b672      	cpsid	i
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	b662      	cpsie	i
 8008718:	613b      	str	r3, [r7, #16]
}
 800871a:	bf00      	nop
 800871c:	bf00      	nop
 800871e:	e7fd      	b.n	800871c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008720:	697b      	ldr	r3, [r7, #20]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20002158 	.word	0x20002158
 8008730:	08009848 	.word	0x08009848
 8008734:	0800887d 	.word	0x0800887d
 8008738:	2000215c 	.word	0x2000215c

0800873c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08a      	sub	sp, #40	@ 0x28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800874a:	2300      	movs	r3, #0
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10d      	bne.n	8008770 <xTimerGenericCommand+0x34>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	b672      	cpsid	i
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	b662      	cpsie	i
 8008768:	623b      	str	r3, [r7, #32]
}
 800876a:	bf00      	nop
 800876c:	bf00      	nop
 800876e:	e7fd      	b.n	800876c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008770:	4b19      	ldr	r3, [pc, #100]	@ (80087d8 <xTimerGenericCommand+0x9c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d02a      	beq.n	80087ce <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b05      	cmp	r3, #5
 8008788:	dc18      	bgt.n	80087bc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800878a:	f7ff fdb7 	bl	80082fc <xTaskGetSchedulerState>
 800878e:	4603      	mov	r3, r0
 8008790:	2b02      	cmp	r3, #2
 8008792:	d109      	bne.n	80087a8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008794:	4b10      	ldr	r3, [pc, #64]	@ (80087d8 <xTimerGenericCommand+0x9c>)
 8008796:	6818      	ldr	r0, [r3, #0]
 8008798:	f107 0110 	add.w	r1, r7, #16
 800879c:	2300      	movs	r3, #0
 800879e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087a0:	f7fe fb30 	bl	8006e04 <xQueueGenericSend>
 80087a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80087a6:	e012      	b.n	80087ce <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087a8:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <xTimerGenericCommand+0x9c>)
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	f107 0110 	add.w	r1, r7, #16
 80087b0:	2300      	movs	r3, #0
 80087b2:	2200      	movs	r2, #0
 80087b4:	f7fe fb26 	bl	8006e04 <xQueueGenericSend>
 80087b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80087ba:	e008      	b.n	80087ce <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087bc:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <xTimerGenericCommand+0x9c>)
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	f107 0110 	add.w	r1, r7, #16
 80087c4:	2300      	movs	r3, #0
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	f7fe fc26 	bl	8007018 <xQueueGenericSendFromISR>
 80087cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3728      	adds	r7, #40	@ 0x28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20002158 	.word	0x20002158

080087dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af02      	add	r7, sp, #8
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e6:	4b24      	ldr	r3, [pc, #144]	@ (8008878 <prvProcessExpiredTimer+0x9c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe f9c5 	bl	8006b84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d025      	beq.n	8008854 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	18d1      	adds	r1, r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	6978      	ldr	r0, [r7, #20]
 8008816:	f000 f8d7 	bl	80089c8 <prvInsertTimerInActiveList>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d022      	beq.n	8008866 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008820:	2300      	movs	r3, #0
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	2100      	movs	r1, #0
 800882a:	6978      	ldr	r0, [r7, #20]
 800882c:	f7ff ff86 	bl	800873c <xTimerGenericCommand>
 8008830:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d116      	bne.n	8008866 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883c:	b672      	cpsid	i
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	b662      	cpsie	i
 800884c:	60fb      	str	r3, [r7, #12]
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	b2da      	uxtb	r2, r3
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	6978      	ldr	r0, [r7, #20]
 800886c:	4798      	blx	r3
}
 800886e:	bf00      	nop
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20002150 	.word	0x20002150

0800887c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008884:	f107 0308 	add.w	r3, r7, #8
 8008888:	4618      	mov	r0, r3
 800888a:	f000 f859 	bl	8008940 <prvGetNextExpireTime>
 800888e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	4619      	mov	r1, r3
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 f805 	bl	80088a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800889a:	f000 f8d7 	bl	8008a4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800889e:	bf00      	nop
 80088a0:	e7f0      	b.n	8008884 <prvTimerTask+0x8>
	...

080088a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088ae:	f7ff f91f 	bl	8007af0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f866 	bl	8008988 <prvSampleTimeNow>
 80088bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d130      	bne.n	8008926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <prvProcessTimerOrBlockTask+0x3c>
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d806      	bhi.n	80088e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088d2:	f7ff f91b 	bl	8007b0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff ff7f 	bl	80087dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088de:	e024      	b.n	800892a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088e6:	4b13      	ldr	r3, [pc, #76]	@ (8008934 <prvProcessTimerOrBlockTask+0x90>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <prvProcessTimerOrBlockTask+0x50>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <prvProcessTimerOrBlockTask+0x52>
 80088f4:	2300      	movs	r3, #0
 80088f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008938 <prvProcessTimerOrBlockTask+0x94>)
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	4619      	mov	r1, r3
 8008906:	f7fe fe4d 	bl	80075a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800890a:	f7ff f8ff 	bl	8007b0c <xTaskResumeAll>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008914:	4b09      	ldr	r3, [pc, #36]	@ (800893c <prvProcessTimerOrBlockTask+0x98>)
 8008916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	f3bf 8f6f 	isb	sy
}
 8008924:	e001      	b.n	800892a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008926:	f7ff f8f1 	bl	8007b0c <xTaskResumeAll>
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20002154 	.word	0x20002154
 8008938:	20002158 	.word	0x20002158
 800893c:	e000ed04 	.word	0xe000ed04

08008940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008948:	4b0e      	ldr	r3, [pc, #56]	@ (8008984 <prvGetNextExpireTime+0x44>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <prvGetNextExpireTime+0x16>
 8008952:	2201      	movs	r2, #1
 8008954:	e000      	b.n	8008958 <prvGetNextExpireTime+0x18>
 8008956:	2200      	movs	r2, #0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008964:	4b07      	ldr	r3, [pc, #28]	@ (8008984 <prvGetNextExpireTime+0x44>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	e001      	b.n	8008974 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008974:	68fb      	ldr	r3, [r7, #12]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20002150 	.word	0x20002150

08008988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008990:	f7ff f95c 	bl	8007c4c <xTaskGetTickCount>
 8008994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008996:	4b0b      	ldr	r3, [pc, #44]	@ (80089c4 <prvSampleTimeNow+0x3c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	429a      	cmp	r2, r3
 800899e:	d205      	bcs.n	80089ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089a0:	f000 f940 	bl	8008c24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e002      	b.n	80089b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089b2:	4a04      	ldr	r2, [pc, #16]	@ (80089c4 <prvSampleTimeNow+0x3c>)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089b8:	68fb      	ldr	r3, [r7, #12]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20002160 	.word	0x20002160

080089c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d812      	bhi.n	8008a14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	1ad2      	subs	r2, r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d302      	bcc.n	8008a02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e01b      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a02:	4b10      	ldr	r3, [pc, #64]	@ (8008a44 <prvInsertTimerInActiveList+0x7c>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	f7fe f880 	bl	8006b12 <vListInsert>
 8008a12:	e012      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d206      	bcs.n	8008a2a <prvInsertTimerInActiveList+0x62>
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d302      	bcc.n	8008a2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e007      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a2a:	4b07      	ldr	r3, [pc, #28]	@ (8008a48 <prvInsertTimerInActiveList+0x80>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4619      	mov	r1, r3
 8008a34:	4610      	mov	r0, r2
 8008a36:	f7fe f86c 	bl	8006b12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a3a:	697b      	ldr	r3, [r7, #20]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	20002154 	.word	0x20002154
 8008a48:	20002150 	.word	0x20002150

08008a4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08e      	sub	sp, #56	@ 0x38
 8008a50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a52:	e0d4      	b.n	8008bfe <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	da1b      	bge.n	8008a92 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a5a:	1d3b      	adds	r3, r7, #4
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10d      	bne.n	8008a82 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6a:	b672      	cpsid	i
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	b662      	cpsie	i
 8008a7a:	61fb      	str	r3, [r7, #28]
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	e7fd      	b.n	8008a7e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a88:	6850      	ldr	r0, [r2, #4]
 8008a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a8c:	6892      	ldr	r2, [r2, #8]
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f2c0 80b2 	blt.w	8008bfe <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe f86a 	bl	8006b84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff ff68 	bl	8008988 <prvSampleTimeNow>
 8008ab8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	f200 809b 	bhi.w	8008bf8 <prvProcessReceivedCommands+0x1ac>
 8008ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac8 <prvProcessReceivedCommands+0x7c>)
 8008ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac8:	08008af1 	.word	0x08008af1
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af1 	.word	0x08008af1
 8008ad4:	08008b6b 	.word	0x08008b6b
 8008ad8:	08008b7f 	.word	0x08008b7f
 8008adc:	08008bcf 	.word	0x08008bcf
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008af1 	.word	0x08008af1
 8008ae8:	08008b6b 	.word	0x08008b6b
 8008aec:	08008b7f 	.word	0x08008b7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	18d1      	adds	r1, r2, r3
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b10:	f7ff ff5a 	bl	80089c8 <prvInsertTimerInActiveList>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d070      	beq.n	8008bfc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d065      	beq.n	8008bfc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	441a      	add	r2, r3
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b42:	f7ff fdfb 	bl	800873c <xTimerGenericCommand>
 8008b46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d156      	bne.n	8008bfc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b52:	b672      	cpsid	i
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	b662      	cpsie	i
 8008b62:	61bb      	str	r3, [r7, #24]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b7c:	e03f      	b.n	8008bfe <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b84:	f043 0301 	orr.w	r3, r3, #1
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10d      	bne.n	8008bba <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	b672      	cpsid	i
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	b662      	cpsie	i
 8008bb2:	617b      	str	r3, [r7, #20]
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop
 8008bb8:	e7fd      	b.n	8008bb6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc0:	18d1      	adds	r1, r2, r3
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc8:	f7ff fefe 	bl	80089c8 <prvInsertTimerInActiveList>
					break;
 8008bcc:	e017      	b.n	8008bfe <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d103      	bne.n	8008be4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008bdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bde:	f000 fbd1 	bl	8009384 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008be2:	e00c      	b.n	8008bfe <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008bf6:	e002      	b.n	8008bfe <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008bf8:	bf00      	nop
 8008bfa:	e000      	b.n	8008bfe <prvProcessReceivedCommands+0x1b2>
					break;
 8008bfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bfe:	4b08      	ldr	r3, [pc, #32]	@ (8008c20 <prvProcessReceivedCommands+0x1d4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	1d39      	adds	r1, r7, #4
 8008c04:	2200      	movs	r2, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe faaa 	bl	8007160 <xQueueReceive>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f47f af20 	bne.w	8008a54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	3730      	adds	r7, #48	@ 0x30
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20002158 	.word	0x20002158

08008c24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c2a:	e04b      	b.n	8008cc4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8008cec <prvSwitchTimerLists+0xc8>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c36:	4b2d      	ldr	r3, [pc, #180]	@ (8008cec <prvSwitchTimerLists+0xc8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3304      	adds	r3, #4
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fd ff9d 	bl	8006b84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d031      	beq.n	8008cc4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	4413      	add	r3, r2
 8008c68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d90e      	bls.n	8008c90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008cec <prvSwitchTimerLists+0xc8>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f7fd ff42 	bl	8006b12 <vListInsert>
 8008c8e:	e019      	b.n	8008cc4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c90:	2300      	movs	r3, #0
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	2300      	movs	r3, #0
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff fd4e 	bl	800873c <xTimerGenericCommand>
 8008ca0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10d      	bne.n	8008cc4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cac:	b672      	cpsid	i
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	b662      	cpsie	i
 8008cbc:	603b      	str	r3, [r7, #0]
}
 8008cbe:	bf00      	nop
 8008cc0:	bf00      	nop
 8008cc2:	e7fd      	b.n	8008cc0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cc4:	4b09      	ldr	r3, [pc, #36]	@ (8008cec <prvSwitchTimerLists+0xc8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1ae      	bne.n	8008c2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cce:	4b07      	ldr	r3, [pc, #28]	@ (8008cec <prvSwitchTimerLists+0xc8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cd4:	4b06      	ldr	r3, [pc, #24]	@ (8008cf0 <prvSwitchTimerLists+0xcc>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a04      	ldr	r2, [pc, #16]	@ (8008cec <prvSwitchTimerLists+0xc8>)
 8008cda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cdc:	4a04      	ldr	r2, [pc, #16]	@ (8008cf0 <prvSwitchTimerLists+0xcc>)
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	6013      	str	r3, [r2, #0]
}
 8008ce2:	bf00      	nop
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20002150 	.word	0x20002150
 8008cf0:	20002154 	.word	0x20002154

08008cf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cfa:	f000 f947 	bl	8008f8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cfe:	4b15      	ldr	r3, [pc, #84]	@ (8008d54 <prvCheckForValidListAndQueue+0x60>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d120      	bne.n	8008d48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d06:	4814      	ldr	r0, [pc, #80]	@ (8008d58 <prvCheckForValidListAndQueue+0x64>)
 8008d08:	f7fd feb2 	bl	8006a70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d0c:	4813      	ldr	r0, [pc, #76]	@ (8008d5c <prvCheckForValidListAndQueue+0x68>)
 8008d0e:	f7fd feaf 	bl	8006a70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d12:	4b13      	ldr	r3, [pc, #76]	@ (8008d60 <prvCheckForValidListAndQueue+0x6c>)
 8008d14:	4a10      	ldr	r2, [pc, #64]	@ (8008d58 <prvCheckForValidListAndQueue+0x64>)
 8008d16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d18:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <prvCheckForValidListAndQueue+0x70>)
 8008d1a:	4a10      	ldr	r2, [pc, #64]	@ (8008d5c <prvCheckForValidListAndQueue+0x68>)
 8008d1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	4b11      	ldr	r3, [pc, #68]	@ (8008d68 <prvCheckForValidListAndQueue+0x74>)
 8008d24:	4a11      	ldr	r2, [pc, #68]	@ (8008d6c <prvCheckForValidListAndQueue+0x78>)
 8008d26:	2110      	movs	r1, #16
 8008d28:	200a      	movs	r0, #10
 8008d2a:	f7fd ffc1 	bl	8006cb0 <xQueueGenericCreateStatic>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4a08      	ldr	r2, [pc, #32]	@ (8008d54 <prvCheckForValidListAndQueue+0x60>)
 8008d32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d34:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <prvCheckForValidListAndQueue+0x60>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d3c:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <prvCheckForValidListAndQueue+0x60>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	490b      	ldr	r1, [pc, #44]	@ (8008d70 <prvCheckForValidListAndQueue+0x7c>)
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe fc04 	bl	8007550 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d48:	f000 f956 	bl	8008ff8 <vPortExitCritical>
}
 8008d4c:	bf00      	nop
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20002158 	.word	0x20002158
 8008d58:	20002128 	.word	0x20002128
 8008d5c:	2000213c 	.word	0x2000213c
 8008d60:	20002150 	.word	0x20002150
 8008d64:	20002154 	.word	0x20002154
 8008d68:	20002204 	.word	0x20002204
 8008d6c:	20002164 	.word	0x20002164
 8008d70:	08009850 	.word	0x08009850

08008d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3b04      	subs	r3, #4
 8008d84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3b04      	subs	r3, #4
 8008d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f023 0201 	bic.w	r2, r3, #1
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3b04      	subs	r3, #4
 8008da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008da4:	4a0c      	ldr	r2, [pc, #48]	@ (8008dd8 <pxPortInitialiseStack+0x64>)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3b14      	subs	r3, #20
 8008dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3b04      	subs	r3, #4
 8008dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f06f 0202 	mvn.w	r2, #2
 8008dc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3b20      	subs	r3, #32
 8008dc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dca:	68fb      	ldr	r3, [r7, #12]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	08008ddd 	.word	0x08008ddd

08008ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008de6:	4b15      	ldr	r3, [pc, #84]	@ (8008e3c <prvTaskExitError+0x60>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d00d      	beq.n	8008e0c <prvTaskExitError+0x30>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	b672      	cpsid	i
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	b662      	cpsie	i
 8008e04:	60fb      	str	r3, [r7, #12]
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	e7fd      	b.n	8008e08 <prvTaskExitError+0x2c>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	b672      	cpsid	i
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	b662      	cpsie	i
 8008e20:	60bb      	str	r3, [r7, #8]
}
 8008e22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e24:	bf00      	nop
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0fc      	beq.n	8008e26 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	2000000c 	.word	0x2000000c

08008e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e40:	4b07      	ldr	r3, [pc, #28]	@ (8008e60 <pxCurrentTCBConst2>)
 8008e42:	6819      	ldr	r1, [r3, #0]
 8008e44:	6808      	ldr	r0, [r1, #0]
 8008e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4a:	f380 8809 	msr	PSP, r0
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f04f 0000 	mov.w	r0, #0
 8008e56:	f380 8811 	msr	BASEPRI, r0
 8008e5a:	4770      	bx	lr
 8008e5c:	f3af 8000 	nop.w

08008e60 <pxCurrentTCBConst2>:
 8008e60:	20001c28 	.word	0x20001c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop

08008e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e68:	4808      	ldr	r0, [pc, #32]	@ (8008e8c <prvPortStartFirstTask+0x24>)
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	6800      	ldr	r0, [r0, #0]
 8008e6e:	f380 8808 	msr	MSP, r0
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f380 8814 	msr	CONTROL, r0
 8008e7a:	b662      	cpsie	i
 8008e7c:	b661      	cpsie	f
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	df00      	svc	0
 8008e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e8a:	bf00      	nop
 8008e8c:	e000ed08 	.word	0xe000ed08

08008e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e96:	4b37      	ldr	r3, [pc, #220]	@ (8008f74 <xPortStartScheduler+0xe4>)
 8008e98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	22ff      	movs	r2, #255	@ 0xff
 8008ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	4b2f      	ldr	r3, [pc, #188]	@ (8008f78 <xPortStartScheduler+0xe8>)
 8008ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8008f7c <xPortStartScheduler+0xec>)
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ec4:	e009      	b.n	8008eda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8008f7c <xPortStartScheduler+0xec>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8008f7c <xPortStartScheduler+0xec>)
 8008ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eda:	78fb      	ldrb	r3, [r7, #3]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee2:	2b80      	cmp	r3, #128	@ 0x80
 8008ee4:	d0ef      	beq.n	8008ec6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ee6:	4b25      	ldr	r3, [pc, #148]	@ (8008f7c <xPortStartScheduler+0xec>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f1c3 0307 	rsb	r3, r3, #7
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d00d      	beq.n	8008f0e <xPortStartScheduler+0x7e>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef6:	b672      	cpsid	i
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	b662      	cpsie	i
 8008f06:	60bb      	str	r3, [r7, #8]
}
 8008f08:	bf00      	nop
 8008f0a:	bf00      	nop
 8008f0c:	e7fd      	b.n	8008f0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f7c <xPortStartScheduler+0xec>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	4a19      	ldr	r2, [pc, #100]	@ (8008f7c <xPortStartScheduler+0xec>)
 8008f16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f18:	4b18      	ldr	r3, [pc, #96]	@ (8008f7c <xPortStartScheduler+0xec>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f20:	4a16      	ldr	r2, [pc, #88]	@ (8008f7c <xPortStartScheduler+0xec>)
 8008f22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f2c:	4b14      	ldr	r3, [pc, #80]	@ (8008f80 <xPortStartScheduler+0xf0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a13      	ldr	r2, [pc, #76]	@ (8008f80 <xPortStartScheduler+0xf0>)
 8008f32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f38:	4b11      	ldr	r3, [pc, #68]	@ (8008f80 <xPortStartScheduler+0xf0>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a10      	ldr	r2, [pc, #64]	@ (8008f80 <xPortStartScheduler+0xf0>)
 8008f3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008f42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f44:	f000 f8dc 	bl	8009100 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f48:	4b0e      	ldr	r3, [pc, #56]	@ (8008f84 <xPortStartScheduler+0xf4>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f4e:	f000 f8fb 	bl	8009148 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f52:	4b0d      	ldr	r3, [pc, #52]	@ (8008f88 <xPortStartScheduler+0xf8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a0c      	ldr	r2, [pc, #48]	@ (8008f88 <xPortStartScheduler+0xf8>)
 8008f58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008f5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f5e:	f7ff ff83 	bl	8008e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f62:	f7fe ff3f 	bl	8007de4 <vTaskSwitchContext>
	prvTaskExitError();
 8008f66:	f7ff ff39 	bl	8008ddc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	e000e400 	.word	0xe000e400
 8008f78:	20002254 	.word	0x20002254
 8008f7c:	20002258 	.word	0x20002258
 8008f80:	e000ed20 	.word	0xe000ed20
 8008f84:	2000000c 	.word	0x2000000c
 8008f88:	e000ef34 	.word	0xe000ef34

08008f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	b672      	cpsid	i
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	b662      	cpsie	i
 8008fa6:	607b      	str	r3, [r7, #4]
}
 8008fa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008faa:	4b11      	ldr	r3, [pc, #68]	@ (8008ff0 <vPortEnterCritical+0x64>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8008ff0 <vPortEnterCritical+0x64>)
 8008fb2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff0 <vPortEnterCritical+0x64>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d112      	bne.n	8008fe2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff4 <vPortEnterCritical+0x68>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00d      	beq.n	8008fe2 <vPortEnterCritical+0x56>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	b672      	cpsid	i
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	b662      	cpsie	i
 8008fda:	603b      	str	r3, [r7, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	e7fd      	b.n	8008fde <vPortEnterCritical+0x52>
	}
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	2000000c 	.word	0x2000000c
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ffe:	4b13      	ldr	r3, [pc, #76]	@ (800904c <vPortExitCritical+0x54>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10d      	bne.n	8009022 <vPortExitCritical+0x2a>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	b672      	cpsid	i
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	b662      	cpsie	i
 800901a:	607b      	str	r3, [r7, #4]
}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	e7fd      	b.n	800901e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009022:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <vPortExitCritical+0x54>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3b01      	subs	r3, #1
 8009028:	4a08      	ldr	r2, [pc, #32]	@ (800904c <vPortExitCritical+0x54>)
 800902a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800902c:	4b07      	ldr	r3, [pc, #28]	@ (800904c <vPortExitCritical+0x54>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d105      	bne.n	8009040 <vPortExitCritical+0x48>
 8009034:	2300      	movs	r3, #0
 8009036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	f383 8811 	msr	BASEPRI, r3
}
 800903e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	2000000c 	.word	0x2000000c

08009050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009050:	f3ef 8009 	mrs	r0, PSP
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	4b15      	ldr	r3, [pc, #84]	@ (80090b0 <pxCurrentTCBConst>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	f01e 0f10 	tst.w	lr, #16
 8009060:	bf08      	it	eq
 8009062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906a:	6010      	str	r0, [r2, #0]
 800906c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009074:	b672      	cpsid	i
 8009076:	f380 8811 	msr	BASEPRI, r0
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	b662      	cpsie	i
 8009084:	f7fe feae 	bl	8007de4 <vTaskSwitchContext>
 8009088:	f04f 0000 	mov.w	r0, #0
 800908c:	f380 8811 	msr	BASEPRI, r0
 8009090:	bc09      	pop	{r0, r3}
 8009092:	6819      	ldr	r1, [r3, #0]
 8009094:	6808      	ldr	r0, [r1, #0]
 8009096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909a:	f01e 0f10 	tst.w	lr, #16
 800909e:	bf08      	it	eq
 80090a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090a4:	f380 8809 	msr	PSP, r0
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop

080090b0 <pxCurrentTCBConst>:
 80090b0:	20001c28 	.word	0x20001c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop

080090b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c2:	b672      	cpsid	i
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	b662      	cpsie	i
 80090d2:	607b      	str	r3, [r7, #4]
}
 80090d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090d6:	f7fe fdc9 	bl	8007c6c <xTaskIncrementTick>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090e0:	4b06      	ldr	r3, [pc, #24]	@ (80090fc <SysTick_Handler+0x44>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	2300      	movs	r3, #0
 80090ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	f383 8811 	msr	BASEPRI, r3
}
 80090f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009104:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <vPortSetupTimerInterrupt+0x34>)
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800910a:	4b0b      	ldr	r3, [pc, #44]	@ (8009138 <vPortSetupTimerInterrupt+0x38>)
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009110:	4b0a      	ldr	r3, [pc, #40]	@ (800913c <vPortSetupTimerInterrupt+0x3c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a0a      	ldr	r2, [pc, #40]	@ (8009140 <vPortSetupTimerInterrupt+0x40>)
 8009116:	fba2 2303 	umull	r2, r3, r2, r3
 800911a:	099b      	lsrs	r3, r3, #6
 800911c:	4a09      	ldr	r2, [pc, #36]	@ (8009144 <vPortSetupTimerInterrupt+0x44>)
 800911e:	3b01      	subs	r3, #1
 8009120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009122:	4b04      	ldr	r3, [pc, #16]	@ (8009134 <vPortSetupTimerInterrupt+0x34>)
 8009124:	2207      	movs	r2, #7
 8009126:	601a      	str	r2, [r3, #0]
}
 8009128:	bf00      	nop
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	e000e010 	.word	0xe000e010
 8009138:	e000e018 	.word	0xe000e018
 800913c:	20000000 	.word	0x20000000
 8009140:	10624dd3 	.word	0x10624dd3
 8009144:	e000e014 	.word	0xe000e014

08009148 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009148:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009158 <vPortEnableVFP+0x10>
 800914c:	6801      	ldr	r1, [r0, #0]
 800914e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009152:	6001      	str	r1, [r0, #0]
 8009154:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009156:	bf00      	nop
 8009158:	e000ed88 	.word	0xe000ed88

0800915c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009162:	f3ef 8305 	mrs	r3, IPSR
 8009166:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b0f      	cmp	r3, #15
 800916c:	d917      	bls.n	800919e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800916e:	4a1a      	ldr	r2, [pc, #104]	@ (80091d8 <vPortValidateInterruptPriority+0x7c>)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009178:	4b18      	ldr	r3, [pc, #96]	@ (80091dc <vPortValidateInterruptPriority+0x80>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	7afa      	ldrb	r2, [r7, #11]
 800917e:	429a      	cmp	r2, r3
 8009180:	d20d      	bcs.n	800919e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	b672      	cpsid	i
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	b662      	cpsie	i
 8009196:	607b      	str	r3, [r7, #4]
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800919e:	4b10      	ldr	r3, [pc, #64]	@ (80091e0 <vPortValidateInterruptPriority+0x84>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091a6:	4b0f      	ldr	r3, [pc, #60]	@ (80091e4 <vPortValidateInterruptPriority+0x88>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d90d      	bls.n	80091ca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	b672      	cpsid	i
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	b662      	cpsie	i
 80091c2:	603b      	str	r3, [r7, #0]
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	e7fd      	b.n	80091c6 <vPortValidateInterruptPriority+0x6a>
	}
 80091ca:	bf00      	nop
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	e000e3f0 	.word	0xe000e3f0
 80091dc:	20002254 	.word	0x20002254
 80091e0:	e000ed0c 	.word	0xe000ed0c
 80091e4:	20002258 	.word	0x20002258

080091e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08a      	sub	sp, #40	@ 0x28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091f4:	f7fe fc7c 	bl	8007af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091f8:	4b5d      	ldr	r3, [pc, #372]	@ (8009370 <pvPortMalloc+0x188>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009200:	f000 f920 	bl	8009444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009204:	4b5b      	ldr	r3, [pc, #364]	@ (8009374 <pvPortMalloc+0x18c>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	f040 8094 	bne.w	800933a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d020      	beq.n	800925a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009218:	2208      	movs	r2, #8
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4413      	add	r3, r2
 800921e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b00      	cmp	r3, #0
 8009228:	d017      	beq.n	800925a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f023 0307 	bic.w	r3, r3, #7
 8009230:	3308      	adds	r3, #8
 8009232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <pvPortMalloc+0x72>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009242:	b672      	cpsid	i
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	b662      	cpsie	i
 8009252:	617b      	str	r3, [r7, #20]
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	e7fd      	b.n	8009256 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d06c      	beq.n	800933a <pvPortMalloc+0x152>
 8009260:	4b45      	ldr	r3, [pc, #276]	@ (8009378 <pvPortMalloc+0x190>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	429a      	cmp	r2, r3
 8009268:	d867      	bhi.n	800933a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800926a:	4b44      	ldr	r3, [pc, #272]	@ (800937c <pvPortMalloc+0x194>)
 800926c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800926e:	4b43      	ldr	r3, [pc, #268]	@ (800937c <pvPortMalloc+0x194>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009274:	e004      	b.n	8009280 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d903      	bls.n	8009292 <pvPortMalloc+0xaa>
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1f1      	bne.n	8009276 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009292:	4b37      	ldr	r3, [pc, #220]	@ (8009370 <pvPortMalloc+0x188>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009298:	429a      	cmp	r2, r3
 800929a:	d04e      	beq.n	800933a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2208      	movs	r2, #8
 80092a2:	4413      	add	r3, r2
 80092a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	1ad2      	subs	r2, r2, r3
 80092b6:	2308      	movs	r3, #8
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d922      	bls.n	8009304 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4413      	add	r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00d      	beq.n	80092ec <pvPortMalloc+0x104>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d4:	b672      	cpsid	i
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	b662      	cpsie	i
 80092e4:	613b      	str	r3, [r7, #16]
}
 80092e6:	bf00      	nop
 80092e8:	bf00      	nop
 80092ea:	e7fd      	b.n	80092e8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092fe:	69b8      	ldr	r0, [r7, #24]
 8009300:	f000 f902 	bl	8009508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009304:	4b1c      	ldr	r3, [pc, #112]	@ (8009378 <pvPortMalloc+0x190>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	4a1a      	ldr	r2, [pc, #104]	@ (8009378 <pvPortMalloc+0x190>)
 8009310:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009312:	4b19      	ldr	r3, [pc, #100]	@ (8009378 <pvPortMalloc+0x190>)
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b1a      	ldr	r3, [pc, #104]	@ (8009380 <pvPortMalloc+0x198>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d203      	bcs.n	8009326 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800931e:	4b16      	ldr	r3, [pc, #88]	@ (8009378 <pvPortMalloc+0x190>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a17      	ldr	r2, [pc, #92]	@ (8009380 <pvPortMalloc+0x198>)
 8009324:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	4b12      	ldr	r3, [pc, #72]	@ (8009374 <pvPortMalloc+0x18c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	431a      	orrs	r2, r3
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800933a:	f7fe fbe7 	bl	8007b0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00d      	beq.n	8009364 <pvPortMalloc+0x17c>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934c:	b672      	cpsid	i
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	b662      	cpsie	i
 800935c:	60fb      	str	r3, [r7, #12]
}
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	e7fd      	b.n	8009360 <pvPortMalloc+0x178>
	return pvReturn;
 8009364:	69fb      	ldr	r3, [r7, #28]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3728      	adds	r7, #40	@ 0x28
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20005e64 	.word	0x20005e64
 8009374:	20005e70 	.word	0x20005e70
 8009378:	20005e68 	.word	0x20005e68
 800937c:	20005e5c 	.word	0x20005e5c
 8009380:	20005e6c 	.word	0x20005e6c

08009384 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d04e      	beq.n	8009434 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009396:	2308      	movs	r3, #8
 8009398:	425b      	negs	r3, r3
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	4413      	add	r3, r2
 800939e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	4b24      	ldr	r3, [pc, #144]	@ (800943c <vPortFree+0xb8>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4013      	ands	r3, r2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10d      	bne.n	80093ce <vPortFree+0x4a>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b6:	b672      	cpsid	i
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	b662      	cpsie	i
 80093c6:	60fb      	str	r3, [r7, #12]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <vPortFree+0x6e>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093da:	b672      	cpsid	i
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	b662      	cpsie	i
 80093ea:	60bb      	str	r3, [r7, #8]
}
 80093ec:	bf00      	nop
 80093ee:	bf00      	nop
 80093f0:	e7fd      	b.n	80093ee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	4b11      	ldr	r3, [pc, #68]	@ (800943c <vPortFree+0xb8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4013      	ands	r3, r2
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d019      	beq.n	8009434 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d115      	bne.n	8009434 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	4b0b      	ldr	r3, [pc, #44]	@ (800943c <vPortFree+0xb8>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	43db      	mvns	r3, r3
 8009412:	401a      	ands	r2, r3
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009418:	f7fe fb6a 	bl	8007af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	4b07      	ldr	r3, [pc, #28]	@ (8009440 <vPortFree+0xbc>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4413      	add	r3, r2
 8009426:	4a06      	ldr	r2, [pc, #24]	@ (8009440 <vPortFree+0xbc>)
 8009428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800942a:	6938      	ldr	r0, [r7, #16]
 800942c:	f000 f86c 	bl	8009508 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009430:	f7fe fb6c 	bl	8007b0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009434:	bf00      	nop
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	20005e70 	.word	0x20005e70
 8009440:	20005e68 	.word	0x20005e68

08009444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800944a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800944e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009450:	4b27      	ldr	r3, [pc, #156]	@ (80094f0 <prvHeapInit+0xac>)
 8009452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00c      	beq.n	8009478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3307      	adds	r3, #7
 8009462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0307 	bic.w	r3, r3, #7
 800946a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	4a1f      	ldr	r2, [pc, #124]	@ (80094f0 <prvHeapInit+0xac>)
 8009474:	4413      	add	r3, r2
 8009476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800947c:	4a1d      	ldr	r2, [pc, #116]	@ (80094f4 <prvHeapInit+0xb0>)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009482:	4b1c      	ldr	r3, [pc, #112]	@ (80094f4 <prvHeapInit+0xb0>)
 8009484:	2200      	movs	r2, #0
 8009486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4413      	add	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009490:	2208      	movs	r2, #8
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	1a9b      	subs	r3, r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 0307 	bic.w	r3, r3, #7
 800949e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4a15      	ldr	r2, [pc, #84]	@ (80094f8 <prvHeapInit+0xb4>)
 80094a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094a6:	4b14      	ldr	r3, [pc, #80]	@ (80094f8 <prvHeapInit+0xb4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2200      	movs	r2, #0
 80094ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094ae:	4b12      	ldr	r3, [pc, #72]	@ (80094f8 <prvHeapInit+0xb4>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	1ad2      	subs	r2, r2, r3
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094c4:	4b0c      	ldr	r3, [pc, #48]	@ (80094f8 <prvHeapInit+0xb4>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	4a0a      	ldr	r2, [pc, #40]	@ (80094fc <prvHeapInit+0xb8>)
 80094d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	4a09      	ldr	r2, [pc, #36]	@ (8009500 <prvHeapInit+0xbc>)
 80094da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094dc:	4b09      	ldr	r3, [pc, #36]	@ (8009504 <prvHeapInit+0xc0>)
 80094de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80094e2:	601a      	str	r2, [r3, #0]
}
 80094e4:	bf00      	nop
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	2000225c 	.word	0x2000225c
 80094f4:	20005e5c 	.word	0x20005e5c
 80094f8:	20005e64 	.word	0x20005e64
 80094fc:	20005e6c 	.word	0x20005e6c
 8009500:	20005e68 	.word	0x20005e68
 8009504:	20005e70 	.word	0x20005e70

08009508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009510:	4b28      	ldr	r3, [pc, #160]	@ (80095b4 <prvInsertBlockIntoFreeList+0xac>)
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e002      	b.n	800951c <prvInsertBlockIntoFreeList+0x14>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	429a      	cmp	r2, r3
 8009524:	d8f7      	bhi.n	8009516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	4413      	add	r3, r2
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	d108      	bne.n	800954a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	441a      	add	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	441a      	add	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d118      	bne.n	8009590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	4b15      	ldr	r3, [pc, #84]	@ (80095b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	429a      	cmp	r2, r3
 8009568:	d00d      	beq.n	8009586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	441a      	add	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	e008      	b.n	8009598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009586:	4b0c      	ldr	r3, [pc, #48]	@ (80095b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	e003      	b.n	8009598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d002      	beq.n	80095a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20005e5c 	.word	0x20005e5c
 80095b8:	20005e64 	.word	0x20005e64

080095bc <memset>:
 80095bc:	4402      	add	r2, r0
 80095be:	4603      	mov	r3, r0
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d100      	bne.n	80095c6 <memset+0xa>
 80095c4:	4770      	bx	lr
 80095c6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ca:	e7f9      	b.n	80095c0 <memset+0x4>

080095cc <_reclaim_reent>:
 80095cc:	4b2d      	ldr	r3, [pc, #180]	@ (8009684 <_reclaim_reent+0xb8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4283      	cmp	r3, r0
 80095d2:	b570      	push	{r4, r5, r6, lr}
 80095d4:	4604      	mov	r4, r0
 80095d6:	d053      	beq.n	8009680 <_reclaim_reent+0xb4>
 80095d8:	69c3      	ldr	r3, [r0, #28]
 80095da:	b31b      	cbz	r3, 8009624 <_reclaim_reent+0x58>
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	b163      	cbz	r3, 80095fa <_reclaim_reent+0x2e>
 80095e0:	2500      	movs	r5, #0
 80095e2:	69e3      	ldr	r3, [r4, #28]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	5959      	ldr	r1, [r3, r5]
 80095e8:	b9b1      	cbnz	r1, 8009618 <_reclaim_reent+0x4c>
 80095ea:	3504      	adds	r5, #4
 80095ec:	2d80      	cmp	r5, #128	@ 0x80
 80095ee:	d1f8      	bne.n	80095e2 <_reclaim_reent+0x16>
 80095f0:	69e3      	ldr	r3, [r4, #28]
 80095f2:	4620      	mov	r0, r4
 80095f4:	68d9      	ldr	r1, [r3, #12]
 80095f6:	f000 f87b 	bl	80096f0 <_free_r>
 80095fa:	69e3      	ldr	r3, [r4, #28]
 80095fc:	6819      	ldr	r1, [r3, #0]
 80095fe:	b111      	cbz	r1, 8009606 <_reclaim_reent+0x3a>
 8009600:	4620      	mov	r0, r4
 8009602:	f000 f875 	bl	80096f0 <_free_r>
 8009606:	69e3      	ldr	r3, [r4, #28]
 8009608:	689d      	ldr	r5, [r3, #8]
 800960a:	b15d      	cbz	r5, 8009624 <_reclaim_reent+0x58>
 800960c:	4629      	mov	r1, r5
 800960e:	4620      	mov	r0, r4
 8009610:	682d      	ldr	r5, [r5, #0]
 8009612:	f000 f86d 	bl	80096f0 <_free_r>
 8009616:	e7f8      	b.n	800960a <_reclaim_reent+0x3e>
 8009618:	680e      	ldr	r6, [r1, #0]
 800961a:	4620      	mov	r0, r4
 800961c:	f000 f868 	bl	80096f0 <_free_r>
 8009620:	4631      	mov	r1, r6
 8009622:	e7e1      	b.n	80095e8 <_reclaim_reent+0x1c>
 8009624:	6961      	ldr	r1, [r4, #20]
 8009626:	b111      	cbz	r1, 800962e <_reclaim_reent+0x62>
 8009628:	4620      	mov	r0, r4
 800962a:	f000 f861 	bl	80096f0 <_free_r>
 800962e:	69e1      	ldr	r1, [r4, #28]
 8009630:	b111      	cbz	r1, 8009638 <_reclaim_reent+0x6c>
 8009632:	4620      	mov	r0, r4
 8009634:	f000 f85c 	bl	80096f0 <_free_r>
 8009638:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800963a:	b111      	cbz	r1, 8009642 <_reclaim_reent+0x76>
 800963c:	4620      	mov	r0, r4
 800963e:	f000 f857 	bl	80096f0 <_free_r>
 8009642:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009644:	b111      	cbz	r1, 800964c <_reclaim_reent+0x80>
 8009646:	4620      	mov	r0, r4
 8009648:	f000 f852 	bl	80096f0 <_free_r>
 800964c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800964e:	b111      	cbz	r1, 8009656 <_reclaim_reent+0x8a>
 8009650:	4620      	mov	r0, r4
 8009652:	f000 f84d 	bl	80096f0 <_free_r>
 8009656:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009658:	b111      	cbz	r1, 8009660 <_reclaim_reent+0x94>
 800965a:	4620      	mov	r0, r4
 800965c:	f000 f848 	bl	80096f0 <_free_r>
 8009660:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009662:	b111      	cbz	r1, 800966a <_reclaim_reent+0x9e>
 8009664:	4620      	mov	r0, r4
 8009666:	f000 f843 	bl	80096f0 <_free_r>
 800966a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800966c:	b111      	cbz	r1, 8009674 <_reclaim_reent+0xa8>
 800966e:	4620      	mov	r0, r4
 8009670:	f000 f83e 	bl	80096f0 <_free_r>
 8009674:	6a23      	ldr	r3, [r4, #32]
 8009676:	b11b      	cbz	r3, 8009680 <_reclaim_reent+0xb4>
 8009678:	4620      	mov	r0, r4
 800967a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800967e:	4718      	bx	r3
 8009680:	bd70      	pop	{r4, r5, r6, pc}
 8009682:	bf00      	nop
 8009684:	20000010 	.word	0x20000010

08009688 <__libc_init_array>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	4d0d      	ldr	r5, [pc, #52]	@ (80096c0 <__libc_init_array+0x38>)
 800968c:	4c0d      	ldr	r4, [pc, #52]	@ (80096c4 <__libc_init_array+0x3c>)
 800968e:	1b64      	subs	r4, r4, r5
 8009690:	10a4      	asrs	r4, r4, #2
 8009692:	2600      	movs	r6, #0
 8009694:	42a6      	cmp	r6, r4
 8009696:	d109      	bne.n	80096ac <__libc_init_array+0x24>
 8009698:	4d0b      	ldr	r5, [pc, #44]	@ (80096c8 <__libc_init_array+0x40>)
 800969a:	4c0c      	ldr	r4, [pc, #48]	@ (80096cc <__libc_init_array+0x44>)
 800969c:	f000 f87e 	bl	800979c <_init>
 80096a0:	1b64      	subs	r4, r4, r5
 80096a2:	10a4      	asrs	r4, r4, #2
 80096a4:	2600      	movs	r6, #0
 80096a6:	42a6      	cmp	r6, r4
 80096a8:	d105      	bne.n	80096b6 <__libc_init_array+0x2e>
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b0:	4798      	blx	r3
 80096b2:	3601      	adds	r6, #1
 80096b4:	e7ee      	b.n	8009694 <__libc_init_array+0xc>
 80096b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ba:	4798      	blx	r3
 80096bc:	3601      	adds	r6, #1
 80096be:	e7f2      	b.n	80096a6 <__libc_init_array+0x1e>
 80096c0:	080098c0 	.word	0x080098c0
 80096c4:	080098c0 	.word	0x080098c0
 80096c8:	080098c0 	.word	0x080098c0
 80096cc:	080098c4 	.word	0x080098c4

080096d0 <__retarget_lock_acquire_recursive>:
 80096d0:	4770      	bx	lr

080096d2 <__retarget_lock_release_recursive>:
 80096d2:	4770      	bx	lr

080096d4 <memcpy>:
 80096d4:	440a      	add	r2, r1
 80096d6:	4291      	cmp	r1, r2
 80096d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096dc:	d100      	bne.n	80096e0 <memcpy+0xc>
 80096de:	4770      	bx	lr
 80096e0:	b510      	push	{r4, lr}
 80096e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ea:	4291      	cmp	r1, r2
 80096ec:	d1f9      	bne.n	80096e2 <memcpy+0xe>
 80096ee:	bd10      	pop	{r4, pc}

080096f0 <_free_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4605      	mov	r5, r0
 80096f4:	2900      	cmp	r1, #0
 80096f6:	d041      	beq.n	800977c <_free_r+0x8c>
 80096f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fc:	1f0c      	subs	r4, r1, #4
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfb8      	it	lt
 8009702:	18e4      	addlt	r4, r4, r3
 8009704:	f000 f83e 	bl	8009784 <__malloc_lock>
 8009708:	4a1d      	ldr	r2, [pc, #116]	@ (8009780 <_free_r+0x90>)
 800970a:	6813      	ldr	r3, [r2, #0]
 800970c:	b933      	cbnz	r3, 800971c <_free_r+0x2c>
 800970e:	6063      	str	r3, [r4, #4]
 8009710:	6014      	str	r4, [r2, #0]
 8009712:	4628      	mov	r0, r5
 8009714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009718:	f000 b83a 	b.w	8009790 <__malloc_unlock>
 800971c:	42a3      	cmp	r3, r4
 800971e:	d908      	bls.n	8009732 <_free_r+0x42>
 8009720:	6820      	ldr	r0, [r4, #0]
 8009722:	1821      	adds	r1, r4, r0
 8009724:	428b      	cmp	r3, r1
 8009726:	bf01      	itttt	eq
 8009728:	6819      	ldreq	r1, [r3, #0]
 800972a:	685b      	ldreq	r3, [r3, #4]
 800972c:	1809      	addeq	r1, r1, r0
 800972e:	6021      	streq	r1, [r4, #0]
 8009730:	e7ed      	b.n	800970e <_free_r+0x1e>
 8009732:	461a      	mov	r2, r3
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	b10b      	cbz	r3, 800973c <_free_r+0x4c>
 8009738:	42a3      	cmp	r3, r4
 800973a:	d9fa      	bls.n	8009732 <_free_r+0x42>
 800973c:	6811      	ldr	r1, [r2, #0]
 800973e:	1850      	adds	r0, r2, r1
 8009740:	42a0      	cmp	r0, r4
 8009742:	d10b      	bne.n	800975c <_free_r+0x6c>
 8009744:	6820      	ldr	r0, [r4, #0]
 8009746:	4401      	add	r1, r0
 8009748:	1850      	adds	r0, r2, r1
 800974a:	4283      	cmp	r3, r0
 800974c:	6011      	str	r1, [r2, #0]
 800974e:	d1e0      	bne.n	8009712 <_free_r+0x22>
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	6053      	str	r3, [r2, #4]
 8009756:	4408      	add	r0, r1
 8009758:	6010      	str	r0, [r2, #0]
 800975a:	e7da      	b.n	8009712 <_free_r+0x22>
 800975c:	d902      	bls.n	8009764 <_free_r+0x74>
 800975e:	230c      	movs	r3, #12
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	e7d6      	b.n	8009712 <_free_r+0x22>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	1821      	adds	r1, r4, r0
 8009768:	428b      	cmp	r3, r1
 800976a:	bf04      	itt	eq
 800976c:	6819      	ldreq	r1, [r3, #0]
 800976e:	685b      	ldreq	r3, [r3, #4]
 8009770:	6063      	str	r3, [r4, #4]
 8009772:	bf04      	itt	eq
 8009774:	1809      	addeq	r1, r1, r0
 8009776:	6021      	streq	r1, [r4, #0]
 8009778:	6054      	str	r4, [r2, #4]
 800977a:	e7ca      	b.n	8009712 <_free_r+0x22>
 800977c:	bd38      	pop	{r3, r4, r5, pc}
 800977e:	bf00      	nop
 8009780:	20005fb0 	.word	0x20005fb0

08009784 <__malloc_lock>:
 8009784:	4801      	ldr	r0, [pc, #4]	@ (800978c <__malloc_lock+0x8>)
 8009786:	f7ff bfa3 	b.w	80096d0 <__retarget_lock_acquire_recursive>
 800978a:	bf00      	nop
 800978c:	20005fac 	.word	0x20005fac

08009790 <__malloc_unlock>:
 8009790:	4801      	ldr	r0, [pc, #4]	@ (8009798 <__malloc_unlock+0x8>)
 8009792:	f7ff bf9e 	b.w	80096d2 <__retarget_lock_release_recursive>
 8009796:	bf00      	nop
 8009798:	20005fac 	.word	0x20005fac

0800979c <_init>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	bf00      	nop
 80097a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a2:	bc08      	pop	{r3}
 80097a4:	469e      	mov	lr, r3
 80097a6:	4770      	bx	lr

080097a8 <_fini>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	bf00      	nop
 80097ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ae:	bc08      	pop	{r3}
 80097b0:	469e      	mov	lr, r3
 80097b2:	4770      	bx	lr
